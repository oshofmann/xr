var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Network port table</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SELinux must keep a mapping of network ports to labels/SIDs.  This</span>", 
"<span class=\"comment\"> * mapping is maintained as part of the normal policy but a fast cache is</span>", 
"<span class=\"comment\"> * needed to reduce the lookup overhead.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author: Paul Moore &lt;paul.moore@hp.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This code is heavily based on the \"netif\" concept originally developed by</span>", 
"<span class=\"comment\"> * James Morris &lt;jmorris@redhat.com&gt;</span>", 
"<span class=\"comment\"> *   (see security/selinux/netif.c for more information)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * (c) Copyright Hewlett-Packard Development Company, L.P., 2008</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software: you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of version 2 of the GNU General Public License as</span>", 
"<span class=\"comment\"> * published by the Free Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#in6\">in6</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"netport.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"objsec.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEL_NETPORT_HASH_SIZE\">SEL_NETPORT_HASH_SIZE</a>       256", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEL_NETPORT_HASH_BKT_LIMIT\">SEL_NETPORT_HASH_BKT_LIMIT</a>   16", 
"", 
"struct <a class=\"id\" href=\"#sel_netport_bkt\">sel_netport_bkt</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#sel_netport\">sel_netport</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netport_security_struct\">netport_security_struct</a> <a class=\"id\" href=\"#psec\">psec</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#rcu\">rcu</a>;", 
"};", 
"", 
"<span class=\"comment\">/* NOTE: we are using a combined hash table for both IPv4 and IPv6, the reason</span>", 
"<span class=\"comment\"> * for this is that I suspect most users will not make heavy use of both</span>", 
"<span class=\"comment\"> * address families at the same time so one table will usually end up wasted,</span>", 
"<span class=\"comment\"> * if this becomes a problem we can always add a hash table for each address</span>", 
"<span class=\"comment\"> * family later */</span>", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#sel_netport_list\">sel_netport_list</a>);", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#sel_netport_lock\">sel_netport_lock</a>);", 
"static struct <a class=\"id\" href=\"#sel_netport_bkt\">sel_netport_bkt</a> <a class=\"id\" href=\"#sel_netport_hash\">sel_netport_hash</a>[<a class=\"id\" href=\"#SEL_NETPORT_HASH_SIZE\">SEL_NETPORT_HASH_SIZE</a>];", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sel_netport_free - Frees a port entry</span>", 
"<span class=\"comment\"> * @p: the entry's RCU field</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * This function is designed to be used as a callback to the call_rcu()</span>", 
"<span class=\"comment\"> * function so that memory allocated to a hash table port entry can be</span>", 
"<span class=\"comment\"> * released safely.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sel_netport_free\">sel_netport_free</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sel_netport\">sel_netport</a> *<a class=\"id\" href=\"#port\">port</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#sel_netport\">sel_netport</a>, <a class=\"id\" href=\"#rcu\">rcu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#port\">port</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sel_netport_hashfn - Hashing function for the port table</span>", 
"<span class=\"comment\"> * @pnum: port number</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * This is the hashing function for the port table, it returns the bucket</span>", 
"<span class=\"comment\"> * number for the given port.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#sel_netport_hashfn\">sel_netport_hashfn</a>(<a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#pnum\">pnum</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#pnum\">pnum</a> &amp; (<a class=\"id\" href=\"#SEL_NETPORT_HASH_SIZE\">SEL_NETPORT_HASH_SIZE</a> - 1));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sel_netport_find - Search for a port record</span>", 
"<span class=\"comment\"> * @protocol: protocol</span>", 
"<span class=\"comment\"> * @port: pnum</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Search the network port table and return the matching record.  If an entry</span>", 
"<span class=\"comment\"> * can not be found in the table return NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#sel_netport\">sel_netport</a> *<a class=\"id\" href=\"#sel_netport_find\">sel_netport_find</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#protocol\">protocol</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#pnum\">pnum</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sel_netport\">sel_netport</a> *<a class=\"id\" href=\"#port\">port</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#sel_netport_hashfn\">sel_netport_hashfn</a>(<a class=\"id\" href=\"#pnum\">pnum</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#port\">port</a>, &amp;<a class=\"id\" href=\"#sel_netport_hash\">sel_netport_hash</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#psec\">psec</a>.<a class=\"id\" href=\"#port\">port</a> == <a class=\"id\" href=\"#pnum\">pnum</a> && <a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#psec\">psec</a>.<a class=\"id\" href=\"#protocol\">protocol</a> == <a class=\"id\" href=\"#protocol\">protocol</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#port\">port</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sel_netport_insert - Insert a new port into the table</span>", 
"<span class=\"comment\"> * @port: the new port record</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Add a new port record to the network address hash table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sel_netport_insert\">sel_netport_insert</a>(struct <a class=\"id\" href=\"#sel_netport\">sel_netport</a> *<a class=\"id\" href=\"#port\">port</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we need to impose a limit on the growth of the hash table so check</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this bucket to make sure it is within the specified bounds */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#sel_netport_hashfn\">sel_netport_hashfn</a>(<a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#psec\">psec</a>.<a class=\"id\" href=\"#port\">port</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#sel_netport_hash\">sel_netport_hash</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sel_netport_hash\">sel_netport_hash</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#size\">size</a> == <a class=\"id\" href=\"#SEL_NETPORT_HASH_BKT_LIMIT\">SEL_NETPORT_HASH_BKT_LIMIT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sel_netport\">sel_netport</a> *<a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#sel_netport_hash\">sel_netport_hash</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#prev\">prev</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sel_netport\">sel_netport</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#sel_netport_free\">sel_netport_free</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sel_netport_hash\">sel_netport_hash</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#size\">size</a>++;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sel_netport_sid_slow - Lookup the SID of a network address using the policy</span>", 
"<span class=\"comment\"> * @protocol: protocol</span>", 
"<span class=\"comment\"> * @pnum: port</span>", 
"<span class=\"comment\"> * @sid: port SID</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * This function determines the SID of a network port by quering the security</span>", 
"<span class=\"comment\"> * policy.  The result is added to the network port table to speedup future</span>", 
"<span class=\"comment\"> * queries.  Returns zero on success, negative values on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#sel_netport_sid_slow\">sel_netport_sid_slow</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#protocol\">protocol</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#pnum\">pnum</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#sid\">sid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sel_netport\">sel_netport</a> *<a class=\"id\" href=\"#port\">port</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sel_netport\">sel_netport</a> *<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#sel_netport_lock\">sel_netport_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a> = <a class=\"id\" href=\"#sel_netport_find\">sel_netport_find</a>(<a class=\"id\" href=\"#protocol\">protocol</a>, <a class=\"id\" href=\"#pnum\">pnum</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#port\">port</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#psec\">psec</a>.<a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#sel_netport_lock\">sel_netport_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#new\">new</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#security_port_sid\">security_port_sid</a>(<a class=\"id\" href=\"#protocol\">protocol</a>, <a class=\"id\" href=\"#pnum\">pnum</a>, <a class=\"id\" href=\"#sid\">sid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#psec\">psec</a>.<a class=\"id\" href=\"#port\">port</a> = <a class=\"id\" href=\"#pnum\">pnum</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#psec\">psec</a>.<a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#protocol\">protocol</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#psec\">psec</a>.<a class=\"id\" href=\"#sid\">sid</a> = *<a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sel_netport_insert\">sel_netport_insert</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#sel_netport_lock\">sel_netport_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"SELinux: failure in sel_netport_sid_slow(),\"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \" unable to determine network port label\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sel_netport_sid - Lookup the SID of a network port</span>", 
"<span class=\"comment\"> * @protocol: protocol</span>", 
"<span class=\"comment\"> * @pnum: port</span>", 
"<span class=\"comment\"> * @sid: port SID</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * This function determines the SID of a network port using the fastest method</span>", 
"<span class=\"comment\"> * possible.  First the port table is queried, but if an entry can't be found</span>", 
"<span class=\"comment\"> * then the policy is queried and the result is added to the table to speedup</span>", 
"<span class=\"comment\"> * future queries.  Returns zero on success, negative values on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sel_netport_sid\">sel_netport_sid</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#protocol\">protocol</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#pnum\">pnum</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#sid\">sid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sel_netport\">sel_netport</a> *<a class=\"id\" href=\"#port\">port</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a> = <a class=\"id\" href=\"#sel_netport_find\">sel_netport_find</a>(<a class=\"id\" href=\"#protocol\">protocol</a>, <a class=\"id\" href=\"#pnum\">pnum</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#port\">port</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#psec\">psec</a>.<a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sel_netport_sid_slow\">sel_netport_sid_slow</a>(<a class=\"id\" href=\"#protocol\">protocol</a>, <a class=\"id\" href=\"#pnum\">pnum</a>, <a class=\"id\" href=\"#sid\">sid</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sel_netport_flush - Flush the entire network port table</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Remove all entries from the network address table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sel_netport_flush\">sel_netport_flush</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sel_netport\">sel_netport</a> *<a class=\"id\" href=\"#port\">port</a>, *<a class=\"id\" href=\"#port_tmp\">port_tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#sel_netport_lock\">sel_netport_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#idx\">idx</a> = 0; <a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#SEL_NETPORT_HASH_SIZE\">SEL_NETPORT_HASH_SIZE</a>; <a class=\"id\" href=\"#idx\">idx</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#port_tmp\">port_tmp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#sel_netport_hash\">sel_netport_hash</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#sel_netport_free\">sel_netport_free</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sel_netport_hash\">sel_netport_hash</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#size\">size</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#sel_netport_lock\">sel_netport_lock</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sel_netport_avc_callback\">sel_netport_avc_callback</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tsid\">tsid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#class\">class</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#perms\">perms</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#retained\">retained</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a> == <a class=\"id\" href=\"#AVC_CALLBACK_RESET\">AVC_CALLBACK_RESET</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sel_netport_flush\">sel_netport_flush</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#synchronize_net\">synchronize_net</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#sel_netport_init\">sel_netport_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#selinux_enabled\">selinux_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#iter\">iter</a> = 0; <a class=\"id\" href=\"#iter\">iter</a> &lt; <a class=\"id\" href=\"#SEL_NETPORT_HASH_SIZE\">SEL_NETPORT_HASH_SIZE</a>; <a class=\"id\" href=\"#iter\">iter</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#sel_netport_hash\">sel_netport_hash</a>[<a class=\"id\" href=\"#iter\">iter</a>].<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sel_netport_hash\">sel_netport_hash</a>[<a class=\"id\" href=\"#iter\">iter</a>].<a class=\"id\" href=\"#size\">size</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#avc_add_callback\">avc_add_callback</a>(<a class=\"id\" href=\"#sel_netport_avc_callback\">sel_netport_avc_callback</a>, <a class=\"id\" href=\"#AVC_CALLBACK_RESET\">AVC_CALLBACK_RESET</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#SECSID_NULL\">SECSID_NULL</a>, <a class=\"id\" href=\"#SECSID_NULL\">SECSID_NULL</a>, <a class=\"id\" href=\"#SECCLASS_NULL\">SECCLASS_NULL</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"avc_add_callback() failed, error %d\\n\", <a class=\"id\" href=\"#ret\">ret</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#__initcall\">__initcall</a>(<a class=\"id\" href=\"#sel_netport_init\">sel_netport_init</a>);", 
];
xr_frag_insert('l/29/fd76fabec7e76e48431d8d78c851280833a137.xr', __xr_tmp);
