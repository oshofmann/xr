var __xr_tmp = [
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#____call_usermodehelper\">____call_usermodehelper</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#sub_info\">sub_info</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_signal_handlers\">flush_signal_handlers</a>(<a class=\"id\" href=\"#current\">current</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We can run anywhere, unlike our parent keventd(). */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpus_allowed_ptr\">set_cpus_allowed_ptr</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#cpu_all_mask\">cpu_all_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Our parent is keventd, which runs with elevated scheduling priority.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Avoid propagating that into the userspace child.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_user_nice\">set_user_nice</a>(<a class=\"id\" href=\"#current\">current</a>, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#init\">init</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#init\">init</a>(<a class=\"id\" href=\"#sub_info\">sub_info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#kernel_execve\">kernel_execve</a>(<a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#path\">path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (const char *const *)<a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#argv\">argv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (const char *const *)<a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#envp\">envp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Exec failed? */</span>", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_exit\">do_exit</a>(0);", 
"}", 
"", 
"void <a class=\"id\" href=\"#call_usermodehelper_freeinfo\">call_usermodehelper_freeinfo</a>(struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#cleanup\">cleanup</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#cleanup\">cleanup</a>)(<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#call_usermodehelper_freeinfo\">call_usermodehelper_freeinfo</a>);", 
"", 
"<span class=\"comment\">/* Keventd can't block, but this (a child) can. */</span>", 
"static int <a class=\"id\" href=\"#wait_for_helper\">wait_for_helper</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#sub_info\">sub_info</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If SIGCLD is ignored sys_wait4 won't populate the status. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#action\">action</a>[<a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>-1].<a class=\"id\" href=\"#sa\">sa</a>.<a class=\"id\" href=\"#sa_handler\">sa_handler</a> = <a class=\"id\" href=\"#SIG_DFL\">SIG_DFL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#kernel_thread\">kernel_thread</a>(<a class=\"id\" href=\"#____call_usermodehelper\">____call_usermodehelper</a>, <a class=\"id\" href=\"#sub_info\">sub_info</a>, <a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ECHILD\">ECHILD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Normally it is bogus to call wait4() from in-kernel because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * wait4() wants to write the exit code to a userspace address.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * But wait_for_helper() always runs as keventd, and put_user()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to a kernel address works OK for kernel threads, due to their</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * having an mm_segment_t which spans the entire address space.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Thus the __user pointer cast is valid here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sys_wait4\">sys_wait4</a>(<a class=\"id\" href=\"#pid\">pid</a>, (int <a class=\"id\" href=\"#__user\">__user</a> *)&amp;<a class=\"id\" href=\"#ret\">ret</a>, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If ret is 0, either ____call_usermodehelper failed and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * real error code is already in sub_info-&gt;retval or</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * sub_info-&gt;retval is 0 anyway, so don't mess with it then.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(<a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#complete\">complete</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* This is run by khelper thread  */</span>", 
"static void <a class=\"id\" href=\"#__call_usermodehelper\">__call_usermodehelper</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#sub_info\">sub_info</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#umh_wait\">umh_wait</a> <a class=\"id\" href=\"#wait\">wait</a> = <a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#wait\">wait</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* CLONE_VFORK: wait until the usermode helper has execve'd</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * successfully We need the data structures to stay around</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * until that is done.  */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wait\">wait</a> == <a class=\"id\" href=\"#UMH_WAIT_PROC\">UMH_WAIT_PROC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#kernel_thread\">kernel_thread</a>(<a class=\"id\" href=\"#wait_for_helper\">wait_for_helper</a>, <a class=\"id\" href=\"#sub_info\">sub_info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#CLONE_FS\">CLONE_FS</a> | <a class=\"id\" href=\"#CLONE_FILES\">CLONE_FILES</a> | <a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#kernel_thread\">kernel_thread</a>(<a class=\"id\" href=\"#____call_usermodehelper\">____call_usermodehelper</a>, <a class=\"id\" href=\"#sub_info\">sub_info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#CLONE_VFORK\">CLONE_VFORK</a> | <a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#wait\">wait</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UMH_NO_WAIT\">UMH_NO_WAIT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_usermodehelper_freeinfo\">call_usermodehelper_freeinfo</a>(<a class=\"id\" href=\"#sub_info\">sub_info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UMH_WAIT_PROC\">UMH_WAIT_PROC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FALLTHROUGH */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UMH_WAIT_EXEC\">UMH_WAIT_EXEC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(<a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#complete\">complete</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_SLEEP\">CONFIG_PM_SLEEP</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If set, call_usermodehelper_exec() will exit immediately returning -EBUSY</span>", 
"<span class=\"comment\"> * (used for preventing user land processes from being created after the user</span>", 
"<span class=\"comment\"> * land has been frozen during a system-wide hibernation or suspend operation).</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#usermodehelper_disabled\">usermodehelper_disabled</a>;", 
"", 
"<span class=\"comment\">/* Number of helpers running */</span>", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#running_helpers\">running_helpers</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wait queue head used by usermodehelper_pm_callback() to wait for all running</span>", 
"<span class=\"comment\"> * helpers to finish.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#running_helpers_waitq\">running_helpers_waitq</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Time to wait for running_helpers to become zero before the setting of</span>", 
"<span class=\"comment\"> * usermodehelper_disabled in usermodehelper_pm_callback() fails</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RUNNING_HELPERS_TIMEOUT\">RUNNING_HELPERS_TIMEOUT</a><span class=\"ts\"/>(5 * <a class=\"id\" href=\"#HZ\">HZ</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usermodehelper_disable - prevent new helpers from being started</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#usermodehelper_disable\">usermodehelper_disable</a>(void)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usermodehelper_disabled\">usermodehelper_disabled</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * From now on call_usermodehelper_exec() won't start any new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * helpers, so it is sufficient if running_helpers turns out to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be zero at one point (it may be increased later, but that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * doesn't matter).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#wait_event_timeout\">wait_event_timeout</a>(<a class=\"id\" href=\"#running_helpers_waitq\">running_helpers_waitq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#running_helpers\">running_helpers</a>) == 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RUNNING_HELPERS_TIMEOUT\">RUNNING_HELPERS_TIMEOUT</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usermodehelper_disabled\">usermodehelper_disabled</a> = 0;", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usermodehelper_enable - allow new helpers to be started again</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#usermodehelper_enable\">usermodehelper_enable</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usermodehelper_disabled\">usermodehelper_disabled</a> = 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#helper_lock\">helper_lock</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#running_helpers\">running_helpers</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__after_atomic_inc\">smp_mb__after_atomic_inc</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#helper_unlock\">helper_unlock</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#running_helpers\">running_helpers</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#running_helpers_waitq\">running_helpers_waitq</a>);", 
"}", 
"#else <span class=\"comment\">/* CONFIG_PM_SLEEP */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usermodehelper_disabled\">usermodehelper_disabled</a><span class=\"ts\"/>0", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#helper_lock\">helper_lock</a>(void) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#helper_unlock\">helper_unlock</a>(void) {}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PM_SLEEP */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * call_usermodehelper_setup - prepare to call a usermode helper</span>", 
"<span class=\"comment\"> * @path: path to usermode executable</span>", 
"<span class=\"comment\"> * @argv: arg vector for process</span>", 
"<span class=\"comment\"> * @envp: environment for process</span>", 
"<span class=\"comment\"> * @gfp_mask: gfp mask for memory allocation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns either %NULL on allocation failure, or a subprocess_info</span>", 
"<span class=\"comment\"> * structure.  This should be passed to call_usermodehelper_exec to</span>", 
"<span class=\"comment\"> * exec the process and free the structure.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#call_usermodehelper_setup\">call_usermodehelper_setup</a>(char *<a class=\"id\" href=\"#path\">path</a>, char **<a class=\"id\" href=\"#argv\">argv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  char **<a class=\"id\" href=\"#envp\">envp</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#sub_info\">sub_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sub_info\">sub_info</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a>), <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sub_info\">sub_info</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;<a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#__call_usermodehelper\">__call_usermodehelper</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#argv\">argv</a> = <a class=\"id\" href=\"#argv\">argv</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#envp\">envp</a> = <a class=\"id\" href=\"#envp\">envp</a>;", 
"  <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sub_info\">sub_info</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#call_usermodehelper_setup\">call_usermodehelper_setup</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * call_usermodehelper_setfns - set a cleanup/init function</span>", 
"<span class=\"comment\"> * @info: a subprocess_info returned by call_usermodehelper_setup</span>", 
"<span class=\"comment\"> * @cleanup: a cleanup function</span>", 
"<span class=\"comment\"> * @init: an init function</span>", 
"<span class=\"comment\"> * @data: arbitrary context sensitive data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The init function is used to customize the helper process prior to</span>", 
"<span class=\"comment\"> * exec.  A non-zero return code causes the process to error out, exit,</span>", 
"<span class=\"comment\"> * and return the failure to the calling process</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The cleanup function is just before ethe subprocess_info is about to</span>", 
"<span class=\"comment\"> * be freed.  This can be used for freeing the argv and envp.  The</span>", 
"<span class=\"comment\"> * Function must be runnable in either a process context or the</span>", 
"<span class=\"comment\"> * context in which call_usermodehelper_exec is called.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#call_usermodehelper_setfns\">call_usermodehelper_setfns</a>(struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    int (*<a class=\"id\" href=\"#init\">init</a>)(struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#info\">info</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>    void (*<a class=\"id\" href=\"#cleanup\">cleanup</a>)(struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#info\">info</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>    void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#cleanup\">cleanup</a> = <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#init\">init</a> = <a class=\"id\" href=\"#init\">init</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#call_usermodehelper_setfns\">call_usermodehelper_setfns</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * call_usermodehelper_exec - start a usermode application</span>", 
"<span class=\"comment\"> * @sub_info: information about the subprocessa</span>", 
"<span class=\"comment\"> * @wait: wait for the application to finish and return status.</span>", 
"<span class=\"comment\"> *        when -1 don't wait at all, but you get no useful error back when</span>", 
"<span class=\"comment\"> *        the program couldn't be exec'ed. This makes it safe to call</span>", 
"<span class=\"comment\"> *        from interrupt context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Runs a user-space application.  The application is started</span>", 
"<span class=\"comment\"> * asynchronously if wait is not set, and runs as a child of keventd.</span>", 
"<span class=\"comment\"> * (ie. it runs with full root capabilities).</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#call_usermodehelper_exec\">call_usermodehelper_exec</a>(struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#sub_info\">sub_info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     enum <a class=\"id\" href=\"#umh_wait\">umh_wait</a> <a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_COMPLETION_ONSTACK\">DECLARE_COMPLETION_ONSTACK</a>(<a class=\"id\" href=\"#done\">done</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#helper_lock\">helper_lock</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#path\">path</a>[0] == '\\0')", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#khelper_wq\">khelper_wq</a> || <a class=\"id\" href=\"#usermodehelper_disabled\">usermodehelper_disabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#complete\">complete</a> = &amp;<a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#wait\">wait</a> = <a class=\"id\" href=\"#wait\">wait</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue_work\">queue_work</a>(<a class=\"id\" href=\"#khelper_wq\">khelper_wq</a>, &amp;<a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wait\">wait</a> == <a class=\"id\" href=\"#UMH_NO_WAIT\">UMH_NO_WAIT</a>)<span class=\"ts\"/><span class=\"comment\">/* task has freed sub_info */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#done\">done</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#sub_info\">sub_info</a>-><a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_usermodehelper_freeinfo\">call_usermodehelper_freeinfo</a>(<a class=\"id\" href=\"#sub_info\">sub_info</a>);", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#helper_unlock\">helper_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#call_usermodehelper_exec\">call_usermodehelper_exec</a>);", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#usermodehelper_init\">usermodehelper_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#khelper_wq\">khelper_wq</a> = <a class=\"id\" href=\"#create_singlethread_workqueue\">create_singlethread_workqueue</a>(\"khelper\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#khelper_wq\">khelper_wq</a>);", 
"}", 
];
xr_frag_insert('l/2a/14d8a558d043ac45fee65fcc266c02fd950646.xr', __xr_tmp);
