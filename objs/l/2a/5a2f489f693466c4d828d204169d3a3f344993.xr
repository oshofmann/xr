var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/fs/binfmt_elf.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These are the functions used to load ELF format executables as used</span>", 
"<span class=\"comment\"> * on SVr4 machines.  Information on the format may be found in the book</span>", 
"<span class=\"comment\"> * \"UNIX SYSTEM V RELEASE 4 Programmers Guide: Ansi C and Programming Support</span>", 
"<span class=\"comment\"> * Tools\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright 1993, 1994: Eric Youngdale (ericy@cais.com).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mman\">mman</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#signal\">signal</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#binfmts\">binfmts</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#personality\">personality</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#elfcore\">elfcore</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highuid\">highuid</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#random\">random</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#elf\">elf</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#utsname\">utsname</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#coredump\">coredump</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#param\">param</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static int <a class=\"id\" href=\"#load_elf_binary\">load_elf_binary</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"static int <a class=\"id\" href=\"#load_elf_library\">load_elf_library</a>(struct <a class=\"id\" href=\"#file\">file</a> *);", 
"static unsigned long <a class=\"id\" href=\"#elf_map\">elf_map</a>(struct <a class=\"id\" href=\"#file\">file</a> *, unsigned long, struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int, int, unsigned long);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If we don't support core dumping, then supply a NULL so we</span>", 
"<span class=\"comment\"> * don't even try.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ELF_CORE\">CONFIG_ELF_CORE</a>", 
"static int <a class=\"id\" href=\"#elf_core_dump\">elf_core_dump</a>(struct <a class=\"id\" href=\"#coredump_params\">coredump_params</a> *<a class=\"id\" href=\"#cprm\">cprm</a>);", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#elf_core_dump\">elf_core_dump</a><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#ELF_EXEC_PAGESIZE\">ELF_EXEC_PAGESIZE</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ELF_MIN_ALIGN\">ELF_MIN_ALIGN</a><span class=\"ts\"/><a class=\"id\" href=\"#ELF_EXEC_PAGESIZE\">ELF_EXEC_PAGESIZE</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ELF_MIN_ALIGN\">ELF_MIN_ALIGN</a><span class=\"ts\"/><a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ELF_CORE_EFLAGS\">ELF_CORE_EFLAGS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ELF_CORE_EFLAGS\">ELF_CORE_EFLAGS</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ELF_PAGESTART\">ELF_PAGESTART</a>(<a class=\"id\" href=\"#_v\">_v</a>) ((<a class=\"id\" href=\"#_v\">_v</a>) &amp; ~(unsigned long)(<a class=\"id\" href=\"#ELF_MIN_ALIGN\">ELF_MIN_ALIGN</a>-1))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ELF_PAGEOFFSET\">ELF_PAGEOFFSET</a>(<a class=\"id\" href=\"#_v\">_v</a>) ((<a class=\"id\" href=\"#_v\">_v</a>) &amp; (<a class=\"id\" href=\"#ELF_MIN_ALIGN\">ELF_MIN_ALIGN</a>-1))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ELF_PAGEALIGN\">ELF_PAGEALIGN</a>(<a class=\"id\" href=\"#_v\">_v</a>) (((<a class=\"id\" href=\"#_v\">_v</a>) + <a class=\"id\" href=\"#ELF_MIN_ALIGN\">ELF_MIN_ALIGN</a> - 1) &amp; ~(<a class=\"id\" href=\"#ELF_MIN_ALIGN\">ELF_MIN_ALIGN</a> - 1))", 
"", 
"static struct <a class=\"id\" href=\"#linux_binfmt\">linux_binfmt</a> <a class=\"id\" href=\"#elf_format\">elf_format</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#module\">module</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#load_binary\">load_binary</a><span class=\"ts\"/>= <a class=\"id\" href=\"#load_elf_binary\">load_elf_binary</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#load_shlib\">load_shlib</a><span class=\"ts\"/>= <a class=\"id\" href=\"#load_elf_library\">load_elf_library</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#core_dump\">core_dump</a><span class=\"ts\"/>= <a class=\"id\" href=\"#elf_core_dump\">elf_core_dump</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#min_coredump\">min_coredump</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ELF_EXEC_PAGESIZE\">ELF_EXEC_PAGESIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#hasvdso\">hasvdso</a><span class=\"ts\"/>= 1", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BAD_ADDR\">BAD_ADDR</a>(<a class=\"id\" href=\"#x\">x</a>) ((unsigned long)(<a class=\"id\" href=\"#x\">x</a>) >= <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a>)", 
"", 
"static int <a class=\"id\" href=\"#set_brk\">set_brk</a>(unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#ELF_PAGEALIGN\">ELF_PAGEALIGN</a>(<a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#ELF_PAGEALIGN\">ELF_PAGEALIGN</a>(<a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#start\">start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#do_brk\">do_brk</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#BAD_ADDR\">BAD_ADDR</a>(<a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#start_brk\">start_brk</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#brk\">brk</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* We need to explicitly zero any fractional pages</span>", 
"<span class=\"comment\">   after the data section (i.e. bss).  This would</span>", 
"<span class=\"comment\">   contain the junk from the file that should not</span>", 
"<span class=\"comment\">   be in memory</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#padzero\">padzero</a>(unsigned long <a class=\"id\" href=\"#elf_bss\">elf_bss</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nbyte\">nbyte</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nbyte\">nbyte</a> = <a class=\"id\" href=\"#ELF_PAGEOFFSET\">ELF_PAGEOFFSET</a>(<a class=\"id\" href=\"#elf_bss\">elf_bss</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nbyte\">nbyte</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbyte\">nbyte</a> = <a class=\"id\" href=\"#ELF_MIN_ALIGN\">ELF_MIN_ALIGN</a> - <a class=\"id\" href=\"#nbyte\">nbyte</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#clear_user\">clear_user</a>((void <a class=\"id\" href=\"#__user\">__user</a> *) <a class=\"id\" href=\"#elf_bss\">elf_bss</a>, <a class=\"id\" href=\"#nbyte\">nbyte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Let's use some macros to make this stack manipulation a little clearer */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_STACK_GROWSUP\">CONFIG_STACK_GROWSUP</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STACK_ADD\">STACK_ADD</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#items\">items</a>) ((<a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a> <a class=\"id\" href=\"#__user\">__user</a> *)(<a class=\"id\" href=\"#sp\">sp</a>) + (<a class=\"id\" href=\"#items\">items</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STACK_ROUND\">STACK_ROUND</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#items\">items</a>) \\", 
"<span class=\"ts\"/>((15 + (unsigned long) ((<a class=\"id\" href=\"#sp\">sp</a>) + (<a class=\"id\" href=\"#items\">items</a>))) &amp;~ 15UL)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STACK_ALLOC\">STACK_ALLOC</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#len\">len</a>) ({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#old_sp\">old_sp</a> = (<a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a> <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#sp\">sp</a>; <a class=\"id\" href=\"#sp\">sp</a> += <a class=\"id\" href=\"#len\">len</a>; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_sp\">old_sp</a>; })", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STACK_ADD\">STACK_ADD</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#items\">items</a>) ((<a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a> <a class=\"id\" href=\"#__user\">__user</a> *)(<a class=\"id\" href=\"#sp\">sp</a>) - (<a class=\"id\" href=\"#items\">items</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STACK_ROUND\">STACK_ROUND</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#items\">items</a>) \\", 
"<span class=\"ts\"/>(((unsigned long) (<a class=\"id\" href=\"#sp\">sp</a> - <a class=\"id\" href=\"#items\">items</a>)) &amp;~ 15UL)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STACK_ALLOC\">STACK_ALLOC</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#len\">len</a>) ({ <a class=\"id\" href=\"#sp\">sp</a> -= <a class=\"id\" href=\"#len\">len</a> ; <a class=\"id\" href=\"#sp\">sp</a>; })", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ELF_BASE_PLATFORM\">ELF_BASE_PLATFORM</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * AT_BASE_PLATFORM indicates the \"real\" hardware/microarchitecture.</span>", 
"<span class=\"comment\"> * If the arch defines ELF_BASE_PLATFORM (in asm/elf.h), the value</span>", 
"<span class=\"comment\"> * will be copied to the user stack in the same manner as AT_PLATFORM.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ELF_BASE_PLATFORM\">ELF_BASE_PLATFORM</a> <a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int", 
"<a class=\"id\" href=\"#create_elf_tables\">create_elf_tables</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>, struct <a class=\"id\" href=\"#elfhdr\">elfhdr</a> *<a class=\"id\" href=\"#exec\">exec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#load_addr\">load_addr</a>, unsigned long <a class=\"id\" href=\"#interp_load_addr\">interp_load_addr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#argc\">argc</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#argc\">argc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#envc\">envc</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#envc\">envc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#argv\">argv</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#envp\">envp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#u_platform\">u_platform</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#u_base_platform\">u_base_platform</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#u_rand_bytes\">u_rand_bytes</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#k_platform\">k_platform</a> = <a class=\"id\" href=\"#ELF_PLATFORM\">ELF_PLATFORM</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#k_base_platform\">k_base_platform</a> = <a class=\"id\" href=\"#ELF_BASE_PLATFORM\">ELF_BASE_PLATFORM</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#k_rand_bytes\">k_rand_bytes</a>[16];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#items\">items</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a> *<a class=\"id\" href=\"#elf_info\">elf_info</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ei_index\">ei_index</a> = 0;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In some cases (e.g. Hyper-Threading), we want to avoid L1</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * evictions by the processes running on the same package. One</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * thing we can do is to shuffle the initial stack for them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#arch_align_stack\">arch_align_stack</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this architecture has a platform capability string, copy it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to userspace.  In some cases (Sparc), this info is impossible</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for userspace to get any other way, in others (i386) it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * merely difficult.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u_platform\">u_platform</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#k_platform\">k_platform</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#k_platform\">k_platform</a>) + 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u_platform\">u_platform</a> = (<a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a> <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#STACK_ALLOC\">STACK_ALLOC</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__copy_to_user\">__copy_to_user</a>(<a class=\"id\" href=\"#u_platform\">u_platform</a>, <a class=\"id\" href=\"#k_platform\">k_platform</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this architecture has a \"base\" platform capability</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * string, copy it to userspace.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u_base_platform\">u_base_platform</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#k_base_platform\">k_base_platform</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#k_base_platform\">k_base_platform</a>) + 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u_base_platform\">u_base_platform</a> = (<a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a> <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#STACK_ALLOC\">STACK_ALLOC</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__copy_to_user\">__copy_to_user</a>(<a class=\"id\" href=\"#u_base_platform\">u_base_platform</a>, <a class=\"id\" href=\"#k_base_platform\">k_base_platform</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Generate 16 random bytes for userspace PRNG seeding.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_random_bytes\">get_random_bytes</a>(<a class=\"id\" href=\"#k_rand_bytes\">k_rand_bytes</a>, sizeof(<a class=\"id\" href=\"#k_rand_bytes\">k_rand_bytes</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u_rand_bytes\">u_rand_bytes</a> = (<a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a> <a class=\"id\" href=\"#__user\">__user</a> *)", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#STACK_ALLOC\">STACK_ALLOC</a>(<a class=\"id\" href=\"#p\">p</a>, sizeof(<a class=\"id\" href=\"#k_rand_bytes\">k_rand_bytes</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__copy_to_user\">__copy_to_user</a>(<a class=\"id\" href=\"#u_rand_bytes\">u_rand_bytes</a>, <a class=\"id\" href=\"#k_rand_bytes\">k_rand_bytes</a>, sizeof(<a class=\"id\" href=\"#k_rand_bytes\">k_rand_bytes</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Create the ELF interpreter info */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_info\">elf_info</a> = (<a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a> *)<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#saved_auxv\">saved_auxv</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* update AT_VECTOR_SIZE_BASE if the number of NEW_AUX_ENT() changes */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>(<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#val\">val</a>) \\", 
"<span class=\"ts\"/>do { \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_info\">elf_info</a>[<a class=\"id\" href=\"#ei_index\">ei_index</a>++] = <a class=\"id\" href=\"#id\">id</a>; \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_info\">elf_info</a>[<a class=\"id\" href=\"#ei_index\">ei_index</a>++] = <a class=\"id\" href=\"#val\">val</a>; \\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ARCH_DLINFO\">ARCH_DLINFO</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ARCH_DLINFO must come first so PPC can do its special alignment of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * AUXV.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * update AT_VECTOR_SIZE_ARCH if the number of NEW_AUX_ENT() in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ARCH_DLINFO changes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ARCH_DLINFO\">ARCH_DLINFO</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>(<a class=\"id\" href=\"#AT_HWCAP\">AT_HWCAP</a>, <a class=\"id\" href=\"#ELF_HWCAP\">ELF_HWCAP</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>(<a class=\"id\" href=\"#AT_PAGESZ\">AT_PAGESZ</a>, <a class=\"id\" href=\"#ELF_EXEC_PAGESIZE\">ELF_EXEC_PAGESIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>(<a class=\"id\" href=\"#AT_CLKTCK\">AT_CLKTCK</a>, <a class=\"id\" href=\"#CLOCKS_PER_SEC\">CLOCKS_PER_SEC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>(<a class=\"id\" href=\"#AT_PHDR\">AT_PHDR</a>, <a class=\"id\" href=\"#load_addr\">load_addr</a> + <a class=\"id\" href=\"#exec\">exec</a>-><a class=\"id\" href=\"#e_phoff\">e_phoff</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>(<a class=\"id\" href=\"#AT_PHENT\">AT_PHENT</a>, sizeof(struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>(<a class=\"id\" href=\"#AT_PHNUM\">AT_PHNUM</a>, <a class=\"id\" href=\"#exec\">exec</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>(<a class=\"id\" href=\"#AT_BASE\">AT_BASE</a>, <a class=\"id\" href=\"#interp_load_addr\">interp_load_addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>(<a class=\"id\" href=\"#AT_FLAGS\">AT_FLAGS</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>(<a class=\"id\" href=\"#AT_ENTRY\">AT_ENTRY</a>, <a class=\"id\" href=\"#exec\">exec</a>-><a class=\"id\" href=\"#e_entry\">e_entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>(<a class=\"id\" href=\"#AT_UID\">AT_UID</a>, <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#uid\">uid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>(<a class=\"id\" href=\"#AT_EUID\">AT_EUID</a>, <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#euid\">euid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>(<a class=\"id\" href=\"#AT_GID\">AT_GID</a>, <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#gid\">gid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>(<a class=\"id\" href=\"#AT_EGID\">AT_EGID</a>, <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#egid\">egid</a>);", 
" <span class=\"ts\"/><a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>(<a class=\"id\" href=\"#AT_SECURE\">AT_SECURE</a>, <a class=\"id\" href=\"#security_bprm_secureexec\">security_bprm_secureexec</a>(<a class=\"id\" href=\"#bprm\">bprm</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>(<a class=\"id\" href=\"#AT_RANDOM\">AT_RANDOM</a>, (<a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a>)(unsigned long)<a class=\"id\" href=\"#u_rand_bytes\">u_rand_bytes</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>(<a class=\"id\" href=\"#AT_EXECFN\">AT_EXECFN</a>, <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#exec\">exec</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#k_platform\">k_platform</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>(<a class=\"id\" href=\"#AT_PLATFORM\">AT_PLATFORM</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a>)(unsigned long)<a class=\"id\" href=\"#u_platform\">u_platform</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#k_base_platform\">k_base_platform</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>(<a class=\"id\" href=\"#AT_BASE_PLATFORM\">AT_BASE_PLATFORM</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a>)(unsigned long)<a class=\"id\" href=\"#u_base_platform\">u_base_platform</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#interp_flags\">interp_flags</a> &amp; <a class=\"id\" href=\"#BINPRM_FLAGS_EXECFD\">BINPRM_FLAGS_EXECFD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>(<a class=\"id\" href=\"#AT_EXECFD\">AT_EXECFD</a>, <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#interp_data\">interp_data</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#NEW_AUX_ENT\">NEW_AUX_ENT</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* AT_NULL is zero; clear the rest too */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#elf_info\">elf_info</a>[<a class=\"id\" href=\"#ei_index\">ei_index</a>], 0,", 
"<span class=\"ts\"/>       sizeof <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#saved_auxv\">saved_auxv</a> - <a class=\"id\" href=\"#ei_index\">ei_index</a> * sizeof <a class=\"id\" href=\"#elf_info\">elf_info</a>[0]);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* And advance past the AT_NULL entry.  */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei_index\">ei_index</a> += 2;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#STACK_ADD\">STACK_ADD</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#ei_index\">ei_index</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#items\">items</a> = (<a class=\"id\" href=\"#argc\">argc</a> + 1) + (<a class=\"id\" href=\"#envc\">envc</a> + 1) + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#STACK_ROUND\">STACK_ROUND</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#items\">items</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Point sp at the lowest address on the stack */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_STACK_GROWSUP\">CONFIG_STACK_GROWSUP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a> = (<a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a> <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a> - <a class=\"id\" href=\"#items\">items</a> - <a class=\"id\" href=\"#ei_index\">ei_index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#exec\">exec</a> = (unsigned long)<a class=\"id\" href=\"#sp\">sp</a>; <span class=\"comment\">/* XXX: PARISC HACK */</span>", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a> = (<a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a> <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Grow the stack manually; some architectures have a limit on how</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * far ahead a user-space access may be in order to grow the stack.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_extend_vma\">find_extend_vma</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now, let's put argc (and argv, envp if appropriate) on the stack */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__put_user\">__put_user</a>(<a class=\"id\" href=\"#argc\">argc</a>, <a class=\"id\" href=\"#sp\">sp</a>++))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#argv\">argv</a> = <a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#envp\">envp</a> = <a class=\"id\" href=\"#argv\">argv</a> + <a class=\"id\" href=\"#argc\">argc</a> + 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Populate argv and envp */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#arg_end\">arg_end</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#arg_start\">arg_start</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#argc\">argc</a>-- &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__put_user\">__put_user</a>((<a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a>)<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#argv\">argv</a>++))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strnlen_user\">strnlen_user</a>((void <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#MAX_ARG_STRLEN\">MAX_ARG_STRLEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#len\">len</a> || <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#MAX_ARG_STRLEN\">MAX_ARG_STRLEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__put_user\">__put_user</a>(0, <a class=\"id\" href=\"#argv\">argv</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#arg_end\">arg_end</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#env_start\">env_start</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#envc\">envc</a>-- &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__put_user\">__put_user</a>((<a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a>)<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#envp\">envp</a>++))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strnlen_user\">strnlen_user</a>((void <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#MAX_ARG_STRLEN\">MAX_ARG_STRLEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#len\">len</a> || <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#MAX_ARG_STRLEN\">MAX_ARG_STRLEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__put_user\">__put_user</a>(0, <a class=\"id\" href=\"#envp\">envp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#env_end\">env_end</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Put the elf_info on the stack in the right place.  */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a> = (<a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a> <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#envp\">envp</a> + 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#elf_info\">elf_info</a>, <a class=\"id\" href=\"#ei_index\">ei_index</a> * sizeof(<a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#elf_map\">elf_map</a>", 
"", 
"static unsigned long <a class=\"id\" href=\"#elf_map\">elf_map</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filep\">filep</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a> *<a class=\"id\" href=\"#eppnt\">eppnt</a>, int <a class=\"id\" href=\"#prot\">prot</a>, int <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#total_size\">total_size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#map_addr\">map_addr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_filesz\">p_filesz</a> + <a class=\"id\" href=\"#ELF_PAGEOFFSET\">ELF_PAGEOFFSET</a>(<a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#off\">off</a> = <a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_offset\">p_offset</a> - <a class=\"id\" href=\"#ELF_PAGEOFFSET\">ELF_PAGEOFFSET</a>(<a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#ELF_PAGESTART\">ELF_PAGESTART</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#ELF_PAGEALIGN\">ELF_PAGEALIGN</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* mmap() will return -EINVAL if given a zero size, but a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * segment with zero filesize is perfectly valid */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/>* total_size is the size of the ELF (interpreter) image.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>* The _first_ mmap needs to know the full size, otherwise</span>", 
"<span class=\"comment\"><span class=\"ts\"/>* randomization might put this image into an overlapping</span>", 
"<span class=\"comment\"><span class=\"ts\"/>* position with the ELF binary image. (since size &lt; total_size)</span>", 
"<span class=\"comment\"><span class=\"ts\"/>* So we first map the 'big' image - and unmap the remainder at</span>", 
"<span class=\"comment\"><span class=\"ts\"/>* the end. (which unmap is needed for ELF images with holes.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#total_size\">total_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_size\">total_size</a> = <a class=\"id\" href=\"#ELF_PAGEALIGN\">ELF_PAGEALIGN</a>(<a class=\"id\" href=\"#total_size\">total_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_addr\">map_addr</a> = <a class=\"id\" href=\"#do_mmap\">do_mmap</a>(<a class=\"id\" href=\"#filep\">filep</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#total_size\">total_size</a>, <a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#off\">off</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#BAD_ADDR\">BAD_ADDR</a>(<a class=\"id\" href=\"#map_addr\">map_addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_munmap\">do_munmap</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#map_addr\">map_addr</a>+<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#total_size\">total_size</a>-<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_addr\">map_addr</a> = <a class=\"id\" href=\"#do_mmap\">do_mmap</a>(<a class=\"id\" href=\"#filep\">filep</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#off\">off</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>return(<a class=\"id\" href=\"#map_addr\">map_addr</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !elf_map */</span>", 
"", 
"static unsigned long <a class=\"id\" href=\"#total_mapping_size\">total_mapping_size</a>(struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a> *<a class=\"id\" href=\"#cmds\">cmds</a>, int <a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#first_idx\">first_idx</a> = -1, <a class=\"id\" href=\"#last_idx\">last_idx</a> = -1;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr\">nr</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cmds\">cmds</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#p_type\">p_type</a> == <a class=\"id\" href=\"#PT_LOAD\">PT_LOAD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_idx\">last_idx</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first_idx\">first_idx</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first_idx\">first_idx</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#first_idx\">first_idx</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cmds\">cmds</a>[<a class=\"id\" href=\"#last_idx\">last_idx</a>].<a class=\"id\" href=\"#p_vaddr\">p_vaddr</a> + <a class=\"id\" href=\"#cmds\">cmds</a>[<a class=\"id\" href=\"#last_idx\">last_idx</a>].<a class=\"id\" href=\"#p_memsz\">p_memsz</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ELF_PAGESTART\">ELF_PAGESTART</a>(<a class=\"id\" href=\"#cmds\">cmds</a>[<a class=\"id\" href=\"#first_idx\">first_idx</a>].<a class=\"id\" href=\"#p_vaddr\">p_vaddr</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/* This is much more generalized than the library routine read function,</span>", 
"<span class=\"comment\">   so we keep this separate.  Technically the library read function</span>", 
"<span class=\"comment\">   is only provided so that we can read a.out libraries that have</span>", 
"<span class=\"comment\">   an ELF header */</span>", 
"", 
"static unsigned long <a class=\"id\" href=\"#load_elf_interp\">load_elf_interp</a>(struct <a class=\"id\" href=\"#elfhdr\">elfhdr</a> *<a class=\"id\" href=\"#interp_elf_ex\">interp_elf_ex</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#interpreter\">interpreter</a>, unsigned long *<a class=\"id\" href=\"#interp_map_addr\">interp_map_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#no_base\">no_base</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a> *<a class=\"id\" href=\"#elf_phdata\">elf_phdata</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a> *<a class=\"id\" href=\"#eppnt\">eppnt</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#load_addr\">load_addr</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#load_addr_set\">load_addr_set</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#last_bss\">last_bss</a> = 0, <a class=\"id\" href=\"#elf_bss\">elf_bss</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#error\">error</a> = ~0UL;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#total_size\">total_size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First of all, some simple consistency checks */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#interp_elf_ex\">interp_elf_ex</a>-><a class=\"id\" href=\"#e_type\">e_type</a> != <a class=\"id\" href=\"#ET_EXEC\">ET_EXEC</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#interp_elf_ex\">interp_elf_ex</a>-><a class=\"id\" href=\"#e_type\">e_type</a> != <a class=\"id\" href=\"#ET_DYN\">ET_DYN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#elf_check_arch\">elf_check_arch</a>(<a class=\"id\" href=\"#interp_elf_ex\">interp_elf_ex</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#interpreter\">interpreter</a>-><a class=\"id\" href=\"#f_op\">f_op</a> || !<a class=\"id\" href=\"#interpreter\">interpreter</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#mmap\">mmap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the size of this structure has changed, then punt, since</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we will be doing the wrong thing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#interp_elf_ex\">interp_elf_ex</a>-><a class=\"id\" href=\"#e_phentsize\">e_phentsize</a> != sizeof(struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#interp_elf_ex\">interp_elf_ex</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a> &lt; 1 ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#interp_elf_ex\">interp_elf_ex</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a> &gt; 65536U / sizeof(struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now read in all of the header information */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a>) * <a class=\"id\" href=\"#interp_elf_ex\">interp_elf_ex</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#ELF_MIN_ALIGN\">ELF_MIN_ALIGN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_phdata\">elf_phdata</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#elf_phdata\">elf_phdata</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#kernel_read\">kernel_read</a>(<a class=\"id\" href=\"#interpreter\">interpreter</a>, <a class=\"id\" href=\"#interp_elf_ex\">interp_elf_ex</a>-><a class=\"id\" href=\"#e_phoff\">e_phoff</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     (char *)<a class=\"id\" href=\"#elf_phdata\">elf_phdata</a>,<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> != <a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#retval\">retval</a>;<span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_close\">out_close</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total_size\">total_size</a> = <a class=\"id\" href=\"#total_mapping_size\">total_mapping_size</a>(<a class=\"id\" href=\"#elf_phdata\">elf_phdata</a>, <a class=\"id\" href=\"#interp_elf_ex\">interp_elf_ex</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#total_size\">total_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_close\">out_close</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#eppnt\">eppnt</a> = <a class=\"id\" href=\"#elf_phdata\">elf_phdata</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#interp_elf_ex\">interp_elf_ex</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#eppnt\">eppnt</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_type\">p_type</a> == <a class=\"id\" href=\"#PT_LOAD\">PT_LOAD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#elf_type\">elf_type</a> = <a class=\"id\" href=\"#MAP_PRIVATE\">MAP_PRIVATE</a> | <a class=\"id\" href=\"#MAP_DENYWRITE\">MAP_DENYWRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#elf_prot\">elf_prot</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vaddr\">vaddr</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#map_addr\">map_addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_flags\">p_flags</a> &amp; <a class=\"id\" href=\"#PF_R\">PF_R</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_prot\">elf_prot</a> = <a class=\"id\" href=\"#PROT_READ\">PROT_READ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_flags\">p_flags</a> &amp; <a class=\"id\" href=\"#PF_W\">PF_W</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_prot\">elf_prot</a> |= <a class=\"id\" href=\"#PROT_WRITE\">PROT_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_flags\">p_flags</a> &amp; <a class=\"id\" href=\"#PF_X\">PF_X</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_prot\">elf_prot</a> |= <a class=\"id\" href=\"#PROT_EXEC\">PROT_EXEC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = <a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#interp_elf_ex\">interp_elf_ex</a>-><a class=\"id\" href=\"#e_type\">e_type</a> == <a class=\"id\" href=\"#ET_EXEC\">ET_EXEC</a> || <a class=\"id\" href=\"#load_addr_set\">load_addr_set</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_type\">elf_type</a> |= <a class=\"id\" href=\"#MAP_FIXED\">MAP_FIXED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#no_base\">no_base</a> && <a class=\"id\" href=\"#interp_elf_ex\">interp_elf_ex</a>-><a class=\"id\" href=\"#e_type\">e_type</a> == <a class=\"id\" href=\"#ET_DYN\">ET_DYN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_addr\">load_addr</a> = -<a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_addr\">map_addr</a> = <a class=\"id\" href=\"#elf_map\">elf_map</a>(<a class=\"id\" href=\"#interpreter\">interpreter</a>, <a class=\"id\" href=\"#load_addr\">load_addr</a> + <a class=\"id\" href=\"#vaddr\">vaddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eppnt\">eppnt</a>, <a class=\"id\" href=\"#elf_prot\">elf_prot</a>, <a class=\"id\" href=\"#elf_type\">elf_type</a>, <a class=\"id\" href=\"#total_size\">total_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_size\">total_size</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#interp_map_addr\">interp_map_addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#interp_map_addr\">interp_map_addr</a> = <a class=\"id\" href=\"#map_addr\">map_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#map_addr\">map_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#BAD_ADDR\">BAD_ADDR</a>(<a class=\"id\" href=\"#map_addr\">map_addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_close\">out_close</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#load_addr_set\">load_addr_set</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#interp_elf_ex\">interp_elf_ex</a>-><a class=\"id\" href=\"#e_type\">e_type</a> == <a class=\"id\" href=\"#ET_DYN\">ET_DYN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_addr\">load_addr</a> = <a class=\"id\" href=\"#map_addr\">map_addr</a> - <a class=\"id\" href=\"#ELF_PAGESTART\">ELF_PAGESTART</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_addr_set\">load_addr_set</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Check to see if the section's size will overflow the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * allowed task size. Note that p_filesz must always be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * &lt;= p_memsize so it's only necessary to check p_memsz.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#load_addr\">load_addr</a> + <a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#BAD_ADDR\">BAD_ADDR</a>(<a class=\"id\" href=\"#k\">k</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_filesz\">p_filesz</a> &gt; <a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a> &gt; <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a> - <a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a> &lt; <a class=\"id\" href=\"#k\">k</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_close\">out_close</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Find the end of the file mapping for this phdr, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * keep track of the largest address we see for this.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#load_addr\">load_addr</a> + <a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a> + <a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_filesz\">p_filesz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#k\">k</a> &gt; <a class=\"id\" href=\"#elf_bss\">elf_bss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_bss\">elf_bss</a> = <a class=\"id\" href=\"#k\">k</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Do the same thing for the memory mapping - between</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * elf_bss and last_bss is the bss section.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#load_addr\">load_addr</a> + <a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a> + <a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#k\">k</a> &gt; <a class=\"id\" href=\"#last_bss\">last_bss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_bss\">last_bss</a> = <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#last_bss\">last_bss</a> &gt; <a class=\"id\" href=\"#elf_bss\">elf_bss</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Now fill out the bss section.  First pad the last page up</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to the page boundary, and then perform a mmap to make sure</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that there are zero-mapped pages up to and including the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * last bss page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#padzero\">padzero</a>(<a class=\"id\" href=\"#elf_bss\">elf_bss</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_close\">out_close</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* What we have mapped so far */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_bss\">elf_bss</a> = <a class=\"id\" href=\"#ELF_PAGESTART\">ELF_PAGESTART</a>(<a class=\"id\" href=\"#elf_bss\">elf_bss</a> + <a class=\"id\" href=\"#ELF_MIN_ALIGN\">ELF_MIN_ALIGN</a> - 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Map the last of the bss segment */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#do_brk\">do_brk</a>(<a class=\"id\" href=\"#elf_bss\">elf_bss</a>, <a class=\"id\" href=\"#last_bss\">last_bss</a> - <a class=\"id\" href=\"#elf_bss\">elf_bss</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#BAD_ADDR\">BAD_ADDR</a>(<a class=\"id\" href=\"#error\">error</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_close\">out_close</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#load_addr\">load_addr</a>;", 
"", 
"<a class=\"id\" href=\"#out_close\">out_close</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#elf_phdata\">elf_phdata</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These are the functions used to load ELF style executables and shared</span>", 
"<span class=\"comment\"> * libraries.  There is no binary dependent code anywhere else.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INTERPRETER_NONE\">INTERPRETER_NONE</a> 0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INTERPRETER_ELF\">INTERPRETER_ELF</a> 2", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#STACK_RND_MASK\">STACK_RND_MASK</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STACK_RND_MASK\">STACK_RND_MASK</a> (0x7ff >> (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> - 12))<span class=\"ts\"/><span class=\"comment\">/* 8MB of VA */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static unsigned long <a class=\"id\" href=\"#randomize_stack_top\">randomize_stack_top</a>(unsigned long <a class=\"id\" href=\"#stack_top\">stack_top</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#random_variable\">random_variable</a> = 0;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_RANDOMIZE\">PF_RANDOMIZE</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>!(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#personality\">personality</a> &amp; <a class=\"id\" href=\"#ADDR_NO_RANDOMIZE\">ADDR_NO_RANDOMIZE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#random_variable\">random_variable</a> = <a class=\"id\" href=\"#get_random_int\">get_random_int</a>() &amp; <a class=\"id\" href=\"#STACK_RND_MASK\">STACK_RND_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#random_variable\">random_variable</a> <<= <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_STACK_GROWSUP\">CONFIG_STACK_GROWSUP</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#stack_top\">stack_top</a>) + <a class=\"id\" href=\"#random_variable\">random_variable</a>;", 
"#else", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#stack_top\">stack_top</a>) - <a class=\"id\" href=\"#random_variable\">random_variable</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static int <a class=\"id\" href=\"#load_elf_binary\">load_elf_binary</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#interpreter\">interpreter</a> = <a class=\"id\" href=\"#NULL\">NULL</a>; <span class=\"comment\">/* to shut gcc up */</span>", 
" <span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#load_addr\">load_addr</a> = 0, <a class=\"id\" href=\"#load_bias\">load_bias</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#load_addr_set\">load_addr_set</a> = 0;", 
"<span class=\"ts\"/>char * <a class=\"id\" href=\"#elf_interpreter\">elf_interpreter</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a> *<a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>, *<a class=\"id\" href=\"#elf_phdata\">elf_phdata</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#elf_bss\">elf_bss</a>, <a class=\"id\" href=\"#elf_brk\">elf_brk</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#elf_entry\">elf_entry</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#interp_load_addr\">interp_load_addr</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_code\">start_code</a>, <a class=\"id\" href=\"#end_code\">end_code</a>, <a class=\"id\" href=\"#start_data\">start_data</a>, <a class=\"id\" href=\"#end_data\">end_data</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#reloc_func_desc\">reloc_func_desc</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#executable_stack\">executable_stack</a> = <a class=\"id\" href=\"#EXSTACK_DEFAULT\">EXSTACK_DEFAULT</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#def_flags\">def_flags</a> = 0;", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#elfhdr\">elfhdr</a> <a class=\"id\" href=\"#elf_ex\">elf_ex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#elfhdr\">elfhdr</a> <a class=\"id\" href=\"#interp_elf_ex\">interp_elf_ex</a>;", 
"<span class=\"ts\"/>} *<a class=\"id\" href=\"#loc\">loc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loc\">loc</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#loc\">loc</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#loc\">loc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_ret\">out_ret</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the exec-header */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a> = *((struct <a class=\"id\" href=\"#elfhdr\">elfhdr</a> *)<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#buf\">buf</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* First of all, some simple consistency checks */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_ident\">e_ident</a>, <a class=\"id\" href=\"#ELFMAG\">ELFMAG</a>, <a class=\"id\" href=\"#SELFMAG\">SELFMAG</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_type\">e_type</a> != <a class=\"id\" href=\"#ET_EXEC\">ET_EXEC</a> && <a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_type\">e_type</a> != <a class=\"id\" href=\"#ET_DYN\">ET_DYN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#elf_check_arch\">elf_check_arch</a>(&amp;<a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>||!<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#mmap\">mmap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now read in all of the header information */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_phentsize\">e_phentsize</a> != sizeof(struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_phnum\">e_phnum</a> &lt; 1 ||", 
"<span class=\"ts\"/> <span class=\"ts\"/><a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_phnum\">e_phnum</a> &gt; 65536U / sizeof(struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_phnum\">e_phnum</a> * sizeof(struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_phdata\">elf_phdata</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#elf_phdata\">elf_phdata</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#kernel_read\">kernel_read</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_phoff\">e_phoff</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     (char *)<a class=\"id\" href=\"#elf_phdata\">elf_phdata</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> != <a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_ph\">out_free_ph</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a> = <a class=\"id\" href=\"#elf_phdata\">elf_phdata</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_bss\">elf_bss</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_brk\">elf_brk</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_code\">start_code</a> = ~0UL;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_code\">end_code</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_data\">start_data</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_data\">end_data</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_phnum\">e_phnum</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_type\">p_type</a> == <a class=\"id\" href=\"#PT_INTERP\">PT_INTERP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is the program interpreter used for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * shared libraries - for now assume that this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * is an a.out format binary</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a>;", 
];
xr_frag_insert('l/2a/5a2f489f693466c4d828d204169d3a3f344993.xr', __xr_tmp);
