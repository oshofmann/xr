var __xr_tmp = [
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#locks_remove_flock\">locks_remove_flock</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#posix_test_lock\">posix_test_lock</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#posix_lock_file\">posix_lock_file</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#conflock\">conflock</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOLCK\">ENOLCK</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#posix_lock_file_wait\">posix_lock_file_wait</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOLCK\">ENOLCK</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#posix_unblock_lock\">posix_unblock_lock</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#waiter\">waiter</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#vfs_test_lock\">vfs_test_lock</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#vfs_lock_file\">vfs_lock_file</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#conf\">conf</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOLCK\">ENOLCK</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#vfs_cancel_lock\">vfs_cancel_lock</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#flock_lock_file_wait\">flock_lock_file_wait</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#request\">request</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOLCK\">ENOLCK</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__break_lease\">__break_lease</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#lease_get_mtime\">lease_get_mtime</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#time\">time</a>)", 
"{", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#generic_setlease\">generic_setlease</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, long <a class=\"id\" href=\"#arg\">arg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#file_lock\">file_lock</a> **<a class=\"id\" href=\"#flp\">flp</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#vfs_setlease\">vfs_setlease</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, long <a class=\"id\" href=\"#arg\">arg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#file_lock\">file_lock</a> **<a class=\"id\" href=\"#lease\">lease</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#lease_modify\">lease_modify</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> **<a class=\"id\" href=\"#before\">before</a>, int <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#lock_may_read\">lock_may_read</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#lock_may_write\">lock_may_write</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_FILE_LOCKING */</span>", 
"", 
"", 
"struct <a class=\"id\" href=\"#fasync_struct\">fasync_struct</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fa_lock\">fa_lock</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#magic\">magic</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fa_fd\">fa_fd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fasync_struct\">fasync_struct</a><span class=\"ts\"/>*<a class=\"id\" href=\"#fa_next\">fa_next</a>; <span class=\"comment\">/* singly linked list */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#fa_file\">fa_file</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fa_rcu\">fa_rcu</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FASYNC_MAGIC\">FASYNC_MAGIC</a> 0x4601", 
"", 
"<span class=\"comment\">/* SMP safe fasync helpers: */</span>", 
"extern int <a class=\"id\" href=\"#fasync_helper\">fasync_helper</a>(int, struct <a class=\"id\" href=\"#file\">file</a> *, int, struct <a class=\"id\" href=\"#fasync_struct\">fasync_struct</a> **);", 
"<span class=\"comment\">/* can be called from interrupts */</span>", 
"extern void <a class=\"id\" href=\"#kill_fasync\">kill_fasync</a>(struct <a class=\"id\" href=\"#fasync_struct\">fasync_struct</a> **, int, int);", 
"", 
"extern int <a class=\"id\" href=\"#__f_setown\">__f_setown</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#pid\">pid</a> *, enum <a class=\"id\" href=\"#pid_type\">pid_type</a>, int <a class=\"id\" href=\"#force\">force</a>);", 
"extern int <a class=\"id\" href=\"#f_setown\">f_setown</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>, int <a class=\"id\" href=\"#force\">force</a>);", 
"extern void <a class=\"id\" href=\"#f_delown\">f_delown</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>);", 
"extern <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#f_getown\">f_getown</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>);", 
"extern int <a class=\"id\" href=\"#send_sigurg\">send_sigurg</a>(struct <a class=\"id\" href=\"#fown_struct\">fown_struct</a> *<a class=\"id\" href=\"#fown\">fown</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Umount options</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MNT_FORCE\">MNT_FORCE</a><span class=\"ts\"/>0x00000001<span class=\"ts\"/><span class=\"comment\">/* Attempt to forcibily umount */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MNT_DETACH\">MNT_DETACH</a><span class=\"ts\"/>0x00000002<span class=\"ts\"/><span class=\"comment\">/* Just detach from the tree */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MNT_EXPIRE\">MNT_EXPIRE</a><span class=\"ts\"/>0x00000004<span class=\"ts\"/><span class=\"comment\">/* Mark for expiry */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UMOUNT_NOFOLLOW\">UMOUNT_NOFOLLOW</a><span class=\"ts\"/>0x00000008<span class=\"ts\"/><span class=\"comment\">/* Don't follow symlink on umount */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UMOUNT_UNUSED\">UMOUNT_UNUSED</a><span class=\"ts\"/>0x80000000<span class=\"ts\"/><span class=\"comment\">/* Flag guaranteed to be unused */</span>", 
"", 
"extern struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#super_blocks\">super_blocks</a>;", 
"extern <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#sb_lock\">sb_lock</a>;", 
"", 
"struct <a class=\"id\" href=\"#super_block\">super_block</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#s_list\">s_list</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Keep this first */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_t\">dev_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_dev\">s_dev</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* search index; _not_ kdev_t */</span>", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_dirt\">s_dirt</a>;", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_maxbytes\">s_maxbytes</a>;<span class=\"ts\"/><span class=\"comment\">/* Max file size */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a><span class=\"ts\"/>*<a class=\"id\" href=\"#s_type\">s_type</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#super_operations\">super_operations</a><span class=\"ts\"/>*<a class=\"id\" href=\"#s_op\">s_op</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#dquot_operations\">dquot_operations</a><span class=\"ts\"/>*<a class=\"id\" href=\"#dq_op\">dq_op</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#quotactl_ops\">quotactl_ops</a><span class=\"ts\"/>*<a class=\"id\" href=\"#s_qcop\">s_qcop</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#export_operations\">export_operations</a> *<a class=\"id\" href=\"#s_export_op\">s_export_op</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_flags\">s_flags</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_magic\">s_magic</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s_root\">s_root</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a><span class=\"ts\"/><a class=\"id\" href=\"#s_umount\">s_umount</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_lock\">s_lock</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_count\">s_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_active\">s_active</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SECURITY\">CONFIG_SECURITY</a>", 
"<span class=\"ts\"/>void                    *<a class=\"id\" href=\"#s_security\">s_security</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#xattr_handler\">xattr_handler</a> **<a class=\"id\" href=\"#s_xattr\">s_xattr</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#s_inodes\">s_inodes</a>;<span class=\"ts\"/><span class=\"comment\">/* all inodes */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a><span class=\"ts\"/><a class=\"id\" href=\"#s_anon\">s_anon</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* anonymous dentries for (nfs) exporting */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#s_files\">s_files</a>;", 
"#else", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#s_files\">s_files</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* s_dentry_lru and s_nr_dentry_unused are protected by dcache_lock */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#s_dentry_lru\">s_dentry_lru</a>;<span class=\"ts\"/><span class=\"comment\">/* unused dentry lru */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_nr_dentry_unused\">s_nr_dentry_unused</a>;<span class=\"ts\"/><span class=\"comment\">/* # of dentry on lru */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#s_bdev\">s_bdev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#s_bdi\">s_bdi</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mtd_info\">mtd_info</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s_mtd\">s_mtd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#s_instances\">s_instances</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#quota_info\">quota_info</a><span class=\"ts\"/><a class=\"id\" href=\"#s_dquot\">s_dquot</a>;<span class=\"ts\"/><span class=\"comment\">/* Diskquota specific options */</span>", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_frozen\">s_frozen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a><span class=\"ts\"/><a class=\"id\" href=\"#s_wait_unfrozen\">s_wait_unfrozen</a>;", 
"", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#s_id\">s_id</a>[32];<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Informational name */</span>", 
"", 
"<span class=\"ts\"/>void <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s_fs_info\">s_fs_info</a>;<span class=\"ts\"/><span class=\"comment\">/* Filesystem private info */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fmode_t\">fmode_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_mode\">s_mode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Granularity of c/m/atime in ns.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   Cannot be worse than a second */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#s_time_gran\">s_time_gran</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The next field is for VFS *only*. No filesystems have any business</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * even looking at it. You had been warned.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#s_vfs_rename_mutex\">s_vfs_rename_mutex</a>;<span class=\"ts\"/><span class=\"comment\">/* Kludge */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Filesystem subtype.  If non-empty the filesystem type field</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in /proc/mounts will be \"type.subtype\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#s_subtype\">s_subtype</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Saved mount options for lazy filesystems using</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * generic_show_options()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#s_options\">s_options</a>;", 
"};", 
"", 
"extern struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#current_fs_time\">current_fs_time</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Snapshotting support.</span>", 
"<span class=\"comment\"> */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SB_UNFROZEN\">SB_UNFROZEN</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SB_FREEZE_WRITE\">SB_FREEZE_WRITE</a><span class=\"ts\"/>= 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SB_FREEZE_TRANS\">SB_FREEZE_TRANS</a> = 2,", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#vfs_check_frozen\">vfs_check_frozen</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#level\">level</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_event\">wait_event</a>((<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_wait_unfrozen\">s_wait_unfrozen</a>, ((<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_frozen\">s_frozen</a> &lt; (<a class=\"id\" href=\"#level\">level</a>)))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_fs_excl\">get_fs_excl</a>() <a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#fs_excl\">fs_excl</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#put_fs_excl\">put_fs_excl</a>() <a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#fs_excl\">fs_excl</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#has_fs_excl\">has_fs_excl</a>() <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#fs_excl\">fs_excl</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#is_owner_or_cap\">is_owner_or_cap</a>(<a class=\"id\" href=\"#inode\">inode</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#current_fsuid\">current_fsuid</a>() == (<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_uid\">i_uid</a>) || <a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_FOWNER\">CAP_FOWNER</a>))", 
"", 
"<span class=\"comment\">/* not quite ready to be deprecated, but... */</span>", 
"extern void <a class=\"id\" href=\"#lock_super\">lock_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *);", 
"extern void <a class=\"id\" href=\"#unlock_super\">unlock_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * VFS helper functions..</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#vfs_create\">vfs_create</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *, int, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *);", 
"extern int <a class=\"id\" href=\"#vfs_mkdir\">vfs_mkdir</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *, int);", 
"extern int <a class=\"id\" href=\"#vfs_mknod\">vfs_mknod</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *, int, <a class=\"id\" href=\"#dev_t\">dev_t</a>);", 
"extern int <a class=\"id\" href=\"#vfs_symlink\">vfs_symlink</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *, const char *);", 
"extern int <a class=\"id\" href=\"#vfs_link\">vfs_link</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"extern int <a class=\"id\" href=\"#vfs_rmdir\">vfs_rmdir</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"extern int <a class=\"id\" href=\"#vfs_unlink\">vfs_unlink</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"extern int <a class=\"id\" href=\"#vfs_rename\">vfs_rename</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * VFS dentry helper functions.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#dentry_unhash\">dentry_unhash</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * VFS file helper functions.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#file_permission\">file_permission</a>(struct <a class=\"id\" href=\"#file\">file</a> *, int);", 
"extern void <a class=\"id\" href=\"#inode_init_owner\">inode_init_owner</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, const struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * VFS FS_IOC_FIEMAP helper definitions.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#fiemap_extent_info\">fiemap_extent_info</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#fi_flags\">fi_flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Flags as passed from user */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#fi_extents_mapped\">fi_extents_mapped</a>;<span class=\"ts\"/><span class=\"comment\">/* Number of mapped extents */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#fi_extents_max\">fi_extents_max</a>;<span class=\"ts\"/><span class=\"comment\">/* Size of fiemap_extent array */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fiemap_extent\">fiemap_extent</a> *<a class=\"id\" href=\"#fi_extents_start\">fi_extents_start</a>; <span class=\"comment\">/* Start of fiemap_extent</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * array */</span>", 
"};", 
"int <a class=\"id\" href=\"#fiemap_fill_next_extent\">fiemap_fill_next_extent</a>(struct <a class=\"id\" href=\"#fiemap_extent_info\">fiemap_extent_info</a> *<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#logical\">logical</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>);", 
"int <a class=\"id\" href=\"#fiemap_check_flags\">fiemap_check_flags</a>(struct <a class=\"id\" href=\"#fiemap_extent_info\">fiemap_extent_info</a> *<a class=\"id\" href=\"#fieinfo\">fieinfo</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#fs_flags\">fs_flags</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * File types</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE! These match bits 12..15 of stat.st_mode</span>", 
"<span class=\"comment\"> * (ie \"(i_mode &gt;&gt; 12) &amp; 15\").</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DT_UNKNOWN\">DT_UNKNOWN</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DT_FIFO\">DT_FIFO</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DT_CHR\">DT_CHR</a><span class=\"ts\"/><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DT_DIR\">DT_DIR</a><span class=\"ts\"/><span class=\"ts\"/>4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DT_BLK\">DT_BLK</a><span class=\"ts\"/><span class=\"ts\"/>6", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DT_REG\">DT_REG</a><span class=\"ts\"/><span class=\"ts\"/>8", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DT_LNK\">DT_LNK</a><span class=\"ts\"/><span class=\"ts\"/>10", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DT_SOCK\">DT_SOCK</a><span class=\"ts\"/><span class=\"ts\"/>12", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DT_WHT\">DT_WHT</a><span class=\"ts\"/><span class=\"ts\"/>14", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the \"filldir\" function type, used by readdir() to let</span>", 
"<span class=\"comment\"> * the kernel specify what kind of dirent layout it wants to have.</span>", 
"<span class=\"comment\"> * This allows the kernel to read directories into kernel space or</span>", 
"<span class=\"comment\"> * to have different dirent layouts depending on the binary type.</span>", 
"<span class=\"comment\"> */</span>", 
"typedef int (*<a class=\"id\" href=\"#filldir_t\">filldir_t</a>)(void *, const char *, int, <a class=\"id\" href=\"#loff_t\">loff_t</a>, <a class=\"id\" href=\"#u64\">u64</a>, unsigned);", 
"struct <a class=\"id\" href=\"#block_device_operations\">block_device_operations</a>;", 
"", 
"<span class=\"comment\">/* These macros are for out of kernel modules to test that</span>", 
"<span class=\"comment\"> * the kernel supports the unlocked_ioctl and compat_ioctl</span>", 
"<span class=\"comment\"> * fields in struct file_operations. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HAVE_COMPAT_IOCTL\">HAVE_COMPAT_IOCTL</a> 1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HAVE_UNLOCKED_IOCTL\">HAVE_UNLOCKED_IOCTL</a> 1", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NOTE:</span>", 
"<span class=\"comment\"> * all file operations except setlease can be called without</span>", 
"<span class=\"comment\"> * the big kernel lock held in all filesystems.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#file_operations\">file_operations</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> (*<a class=\"id\" href=\"#llseek\">llseek</a>) (struct <a class=\"id\" href=\"#file\">file</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a>, int);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#read\">read</a>) (struct <a class=\"id\" href=\"#file\">file</a> *, char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#write\">write</a>) (struct <a class=\"id\" href=\"#file\">file</a> *, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#aio_read\">aio_read</a>) (struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *, unsigned long, <a class=\"id\" href=\"#loff_t\">loff_t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#aio_write\">aio_write</a>) (struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *, unsigned long, <a class=\"id\" href=\"#loff_t\">loff_t</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#readdir\">readdir</a>) (struct <a class=\"id\" href=\"#file\">file</a> *, void *, <a class=\"id\" href=\"#filldir_t\">filldir_t</a>);", 
"<span class=\"ts\"/>unsigned int (*<a class=\"id\" href=\"#poll\">poll</a>) (struct <a class=\"id\" href=\"#file\">file</a> *, struct <a class=\"id\" href=\"#poll_table_struct\">poll_table_struct</a> *);", 
"<span class=\"ts\"/>long (*<a class=\"id\" href=\"#unlocked_ioctl\">unlocked_ioctl</a>) (struct <a class=\"id\" href=\"#file\">file</a> *, unsigned int, unsigned long);", 
"<span class=\"ts\"/>long (*<a class=\"id\" href=\"#compat_ioctl\">compat_ioctl</a>) (struct <a class=\"id\" href=\"#file\">file</a> *, unsigned int, unsigned long);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#mmap\">mmap</a>) (struct <a class=\"id\" href=\"#file\">file</a> *, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#open\">open</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#file\">file</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#flush\">flush</a>) (struct <a class=\"id\" href=\"#file\">file</a> *, <a class=\"id\" href=\"#fl_owner_t\">fl_owner_t</a> <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#release\">release</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#file\">file</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#fsync\">fsync</a>) (struct <a class=\"id\" href=\"#file\">file</a> *, int <a class=\"id\" href=\"#datasync\">datasync</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#aio_fsync\">aio_fsync</a>) (struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *, int <a class=\"id\" href=\"#datasync\">datasync</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#fasync\">fasync</a>) (int, struct <a class=\"id\" href=\"#file\">file</a> *, int);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#lock\">lock</a>) (struct <a class=\"id\" href=\"#file\">file</a> *, int, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#sendpage\">sendpage</a>) (struct <a class=\"id\" href=\"#file\">file</a> *, struct <a class=\"id\" href=\"#page\">page</a> *, int, <a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *, int);", 
"<span class=\"ts\"/>unsigned long (*<a class=\"id\" href=\"#get_unmapped_area\">get_unmapped_area</a>)(struct <a class=\"id\" href=\"#file\">file</a> *, unsigned long, unsigned long, unsigned long, unsigned long);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#check_flags\">check_flags</a>)(int);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#flock\">flock</a>) (struct <a class=\"id\" href=\"#file\">file</a> *, int, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#splice_write\">splice_write</a>)(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *, struct <a class=\"id\" href=\"#file\">file</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>, unsigned int);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#splice_read\">splice_read</a>)(struct <a class=\"id\" href=\"#file\">file</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> *, struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>, unsigned int);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#setlease\">setlease</a>)(struct <a class=\"id\" href=\"#file\">file</a> *, long, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> **);", 
"};", 
"", 
"struct <a class=\"id\" href=\"#inode_operations\">inode_operations</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#create\">create</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *,struct <a class=\"id\" href=\"#dentry\">dentry</a> *,int, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> * (*<a class=\"id\" href=\"#lookup\">lookup</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *,struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#link\">link</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *,struct <a class=\"id\" href=\"#inode\">inode</a> *,struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#unlink\">unlink</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *,struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#symlink\">symlink</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *,struct <a class=\"id\" href=\"#dentry\">dentry</a> *,const char *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#mkdir\">mkdir</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *,struct <a class=\"id\" href=\"#dentry\">dentry</a> *,int);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#rmdir\">rmdir</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *,struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#mknod\">mknod</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *,struct <a class=\"id\" href=\"#dentry\">dentry</a> *,int,<a class=\"id\" href=\"#dev_t\">dev_t</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#rename\">rename</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#readlink\">readlink</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *, char <a class=\"id\" href=\"#__user\">__user</a> *,int);", 
"<span class=\"ts\"/>void * (*<a class=\"id\" href=\"#follow_link\">follow_link</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#put_link\">put_link</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *, void *);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#truncate\">truncate</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#permission\">permission</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *, int);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#check_acl\">check_acl</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, int);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#setattr\">setattr</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#iattr\">iattr</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#getattr\">getattr</a>) (struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#kstat\">kstat</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#setxattr\">setxattr</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *, const char *,const void *,<a class=\"id\" href=\"#size_t\">size_t</a>,int);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#getxattr\">getxattr</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *, const char *, void *, <a class=\"id\" href=\"#size_t\">size_t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#listxattr\">listxattr</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *, char *, <a class=\"id\" href=\"#size_t\">size_t</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#removexattr\">removexattr</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *, const char *);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#truncate_range\">truncate_range</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a>);", 
"<span class=\"ts\"/>long (*<a class=\"id\" href=\"#fallocate\">fallocate</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#fiemap\">fiemap</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#fiemap_extent_info\">fiemap_extent_info</a> *, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#len\">len</a>);", 
"};", 
"", 
"struct <a class=\"id\" href=\"#seq_file\">seq_file</a>;", 
"", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#rw_copy_check_uvector\">rw_copy_check_uvector</a>(int <a class=\"id\" href=\"#type\">type</a>, const struct <a class=\"id\" href=\"#iovec\">iovec</a> <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#uvector\">uvector</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, unsigned long <a class=\"id\" href=\"#fast_segs\">fast_segs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#fast_pointer\">fast_pointer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#iovec\">iovec</a> **<a class=\"id\" href=\"#ret_pointer\">ret_pointer</a>);", 
"", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#vfs_read\">vfs_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *, char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *);", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#vfs_write\">vfs_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *);", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#vfs_readv\">vfs_readv</a>(struct <a class=\"id\" href=\"#file\">file</a> *, const struct <a class=\"id\" href=\"#iovec\">iovec</a> <a class=\"id\" href=\"#__user\">__user</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long, <a class=\"id\" href=\"#loff_t\">loff_t</a> *);", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#vfs_writev\">vfs_writev</a>(struct <a class=\"id\" href=\"#file\">file</a> *, const struct <a class=\"id\" href=\"#iovec\">iovec</a> <a class=\"id\" href=\"#__user\">__user</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long, <a class=\"id\" href=\"#loff_t\">loff_t</a> *);", 
"", 
"struct <a class=\"id\" href=\"#super_operations\">super_operations</a> {", 
"   <span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *(*<a class=\"id\" href=\"#alloc_inode\">alloc_inode</a>)(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#destroy_inode\">destroy_inode</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"", 
"   <span class=\"ts\"/>void (*<a class=\"id\" href=\"#dirty_inode\">dirty_inode</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#write_inode\">write_inode</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#drop_inode\">drop_inode</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#evict_inode\">evict_inode</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#put_super\">put_super</a>) (struct <a class=\"id\" href=\"#super_block\">super_block</a> *);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#write_super\">write_super</a>) (struct <a class=\"id\" href=\"#super_block\">super_block</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#sync_fs\">sync_fs</a>)(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#freeze_fs\">freeze_fs</a>) (struct <a class=\"id\" href=\"#super_block\">super_block</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#unfreeze_fs\">unfreeze_fs</a>) (struct <a class=\"id\" href=\"#super_block\">super_block</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#statfs\">statfs</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#kstatfs\">kstatfs</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#remount_fs\">remount_fs</a>) (struct <a class=\"id\" href=\"#super_block\">super_block</a> *, int *, char *);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#umount_begin\">umount_begin</a>) (struct <a class=\"id\" href=\"#super_block\">super_block</a> *);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#show_options\">show_options</a>)(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#show_stats\">show_stats</a>)(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_QUOTA\">CONFIG_QUOTA</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#quota_read\">quota_read</a>)(struct <a class=\"id\" href=\"#super_block\">super_block</a> *, int, char *, <a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#quota_write\">quota_write</a>)(struct <a class=\"id\" href=\"#super_block\">super_block</a> *, int, const char *, <a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#bdev_try_to_free_page\">bdev_try_to_free_page</a>)(struct <a class=\"id\" href=\"#super_block\">super_block</a>*, struct <a class=\"id\" href=\"#page\">page</a>*, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>);", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Inode state bits.  Protected by inode_lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Three bits determine the dirty state of the inode, I_DIRTY_SYNC,</span>", 
"<span class=\"comment\"> * I_DIRTY_DATASYNC and I_DIRTY_PAGES.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Four bits define the lifetime of an inode.  Initially, inodes are I_NEW,</span>", 
"<span class=\"comment\"> * until that flag is cleared.  I_WILL_FREE, I_FREEING and I_CLEAR are set at</span>", 
"<span class=\"comment\"> * various stages of removing an inode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Two bits are used for locking and completion notification, I_NEW and I_SYNC.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * I_DIRTY_SYNC<span class=\"ts\"/><span class=\"ts\"/>Inode is dirty, but doesn't have to be written on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>fdatasync().  i_atime is the usual cause.</span>", 
"<span class=\"comment\"> * I_DIRTY_DATASYNC<span class=\"ts\"/>Data-related inode changes pending. We keep track of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>these changes separately from I_DIRTY_SYNC so that we</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>don't have to write inode on fdatasync() when only</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>mtime has changed in it.</span>", 
"<span class=\"comment\"> * I_DIRTY_PAGES<span class=\"ts\"/>Inode has dirty pages.  Inode itself may be clean.</span>", 
"<span class=\"comment\"> * I_NEW<span class=\"ts\"/><span class=\"ts\"/>Serves as both a mutex and completion notification.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>New inodes set I_NEW.  If two processes both create</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>the same inode, one of them will release its inode and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>wait for I_NEW to be released before returning.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Inodes in I_WILL_FREE, I_FREEING or I_CLEAR state can</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>also cause waiting on I_NEW, without I_NEW actually</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>being set.  find_inode() uses this to prevent returning</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>nearly-dead inodes.</span>", 
"<span class=\"comment\"> * I_WILL_FREE<span class=\"ts\"/><span class=\"ts\"/>Must be set when calling write_inode_now() if i_count</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>is zero.  I_FREEING must be set when I_WILL_FREE is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>cleared.</span>", 
"<span class=\"comment\"> * I_FREEING<span class=\"ts\"/><span class=\"ts\"/>Set when inode is about to be freed but still has dirty</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>pages or buffers attached or the inode itself is still</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>dirty.</span>", 
"<span class=\"comment\"> * I_CLEAR<span class=\"ts\"/><span class=\"ts\"/>Added by end_writeback().  In this state the inode is clean</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>and can be destroyed.  Inode keeps I_FREEING.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Inodes that are I_WILL_FREE, I_FREEING or I_CLEAR are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>prohibited for many purposes.  iget() must wait for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>the inode to be completely released, then create it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>anew.  Other functions will just ignore such inodes,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if appropriate.  I_NEW is used for waiting.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * I_SYNC<span class=\"ts\"/><span class=\"ts\"/>Synchonized write of dirty inode data.  The bits is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>set during data writeback, and cleared with a wakeup</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>on the bit address once it is done.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Q: What is the difference between I_WILL_FREE and I_FREEING?</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I_DIRTY_SYNC\">I_DIRTY_SYNC</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I_DIRTY_DATASYNC\">I_DIRTY_DATASYNC</a><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I_DIRTY_PAGES\">I_DIRTY_PAGES</a><span class=\"ts\"/><span class=\"ts\"/>4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__I_NEW\">__I_NEW</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I_NEW\">I_NEW</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#__I_NEW\">__I_NEW</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I_WILL_FREE\">I_WILL_FREE</a><span class=\"ts\"/><span class=\"ts\"/>16", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I_FREEING\">I_FREEING</a><span class=\"ts\"/><span class=\"ts\"/>32", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I_CLEAR\">I_CLEAR</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>64", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__I_SYNC\">__I_SYNC</a><span class=\"ts\"/><span class=\"ts\"/>7", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I_SYNC\">I_SYNC</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#__I_SYNC\">__I_SYNC</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I_DIRTY\">I_DIRTY</a> (<a class=\"id\" href=\"#I_DIRTY_SYNC\">I_DIRTY_SYNC</a> | <a class=\"id\" href=\"#I_DIRTY_DATASYNC\">I_DIRTY_DATASYNC</a> | <a class=\"id\" href=\"#I_DIRTY_PAGES\">I_DIRTY_PAGES</a>)", 
"", 
"extern void <a class=\"id\" href=\"#__mark_inode_dirty\">__mark_inode_dirty</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, int);", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mark_inode_dirty\">__mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#I_DIRTY\">I_DIRTY</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mark_inode_dirty_sync\">mark_inode_dirty_sync</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mark_inode_dirty\">__mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#I_DIRTY_SYNC\">I_DIRTY_SYNC</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * inc_nlink - directly increment an inode's link count</span>", 
"<span class=\"comment\"> * @inode: inode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is a low-level filesystem helper to replace any</span>", 
"<span class=\"comment\"> * direct filesystem manipulation of i_nlink.  Currently,</span>", 
"<span class=\"comment\"> * it is only here for parity with dec_nlink().</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#inc_nlink\">inc_nlink</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a>++;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#inode_inc_link_count\">inode_inc_link_count</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_nlink\">inc_nlink</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * drop_nlink - directly drop an inode's link count</span>", 
"<span class=\"comment\"> * @inode: inode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is a low-level filesystem helper to replace any</span>", 
"<span class=\"comment\"> * direct filesystem manipulation of i_nlink.  In cases</span>", 
"<span class=\"comment\"> * where we are attempting to track writes to the</span>", 
"<span class=\"comment\"> * filesystem, a decrement to zero means an imminent</span>", 
"<span class=\"comment\"> * write when the file is truncated and actually unlinked</span>", 
"<span class=\"comment\"> * on the filesystem.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#drop_nlink\">drop_nlink</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a>--;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * clear_nlink - directly zero an inode's link count</span>", 
"<span class=\"comment\"> * @inode: inode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is a low-level filesystem helper to replace any</span>", 
"<span class=\"comment\"> * direct filesystem manipulation of i_nlink.  See</span>", 
"<span class=\"comment\"> * drop_nlink() for why we care about i_nlink hitting zero.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clear_nlink\">clear_nlink</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a> = 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#inode_dec_link_count\">inode_dec_link_count</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drop_nlink\">drop_nlink</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * inode_inc_iversion - increments i_version</span>", 
"<span class=\"comment\"> * @inode: inode that need to be updated</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Every time the inode is modified, the i_version field will be incremented.</span>", 
"<span class=\"comment\"> * The filesystem has to be mounted with i_version flag</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#inode_inc_iversion\">inode_inc_iversion</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"       <a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"       <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_version\">i_version</a>++;", 
"       <a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#touch_atime\">touch_atime</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#file_accessed\">file_accessed</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_NOATIME\">O_NOATIME</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_atime\">touch_atime</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#sync_inode\">sync_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>);", 
"", 
"struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> {", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fs_flags\">fs_flags</a>;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#get_sb\">get_sb</a>) (struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *, int,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const char *, void *, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#kill_sb\">kill_sb</a>) (struct <a class=\"id\" href=\"#super_block\">super_block</a> *);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> * <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#fs_supers\">fs_supers</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#s_lock_key\">s_lock_key</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#s_umount_key\">s_umount_key</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#s_vfs_rename_key\">s_vfs_rename_key</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#i_lock_key\">i_lock_key</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#i_mutex_key\">i_mutex_key</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#i_mutex_dir_key\">i_mutex_dir_key</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#i_alloc_sem_key\">i_alloc_sem_key</a>;", 
"};", 
"", 
"extern int <a class=\"id\" href=\"#get_sb_ns\">get_sb_ns</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs_type\">fs_type</a>, int <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#fill_super\">fill_super</a>)(struct <a class=\"id\" href=\"#super_block\">super_block</a> *, void *, int),", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"extern int <a class=\"id\" href=\"#get_sb_bdev\">get_sb_bdev</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs_type\">fs_type</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flags\">flags</a>, const char *<a class=\"id\" href=\"#dev_name\">dev_name</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#fill_super\">fill_super</a>)(struct <a class=\"id\" href=\"#super_block\">super_block</a> *, void *, int),", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"extern int <a class=\"id\" href=\"#get_sb_single\">get_sb_single</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs_type\">fs_type</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#fill_super\">fill_super</a>)(struct <a class=\"id\" href=\"#super_block\">super_block</a> *, void *, int),", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"extern int <a class=\"id\" href=\"#get_sb_nodev\">get_sb_nodev</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs_type\">fs_type</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#fill_super\">fill_super</a>)(struct <a class=\"id\" href=\"#super_block\">super_block</a> *, void *, int),", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"void <a class=\"id\" href=\"#generic_shutdown_super\">generic_shutdown_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>);", 
"void <a class=\"id\" href=\"#kill_block_super\">kill_block_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>);", 
"void <a class=\"id\" href=\"#kill_anon_super\">kill_anon_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>);", 
"void <a class=\"id\" href=\"#kill_litter_super\">kill_litter_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>);", 
"void <a class=\"id\" href=\"#deactivate_super\">deactivate_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>);", 
"void <a class=\"id\" href=\"#deactivate_locked_super\">deactivate_locked_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>);", 
"int <a class=\"id\" href=\"#set_anon_super\">set_anon_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sget\">sget</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#test\">test</a>)(struct <a class=\"id\" href=\"#super_block\">super_block</a> *,void *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#set\">set</a>)(struct <a class=\"id\" href=\"#super_block\">super_block</a> *,void *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>);", 
"extern int <a class=\"id\" href=\"#get_sb_pseudo\">get_sb_pseudo</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *, char *,", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#super_operations\">super_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>, unsigned long,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"extern void <a class=\"id\" href=\"#simple_set_mnt\">simple_set_mnt</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sb_mark_dirty\">sb_mark_dirty</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_dirt\">s_dirt</a> = 1;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sb_mark_clean\">sb_mark_clean</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_dirt\">s_dirt</a> = 0;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sb_is_dirty\">sb_is_dirty</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_dirt\">s_dirt</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Alas, no aliases. Too much hassle with bringing module.h everywhere */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#fops_get\">fops_get</a>(<a class=\"id\" href=\"#fops\">fops</a>) \\", 
"<span class=\"ts\"/>(((<a class=\"id\" href=\"#fops\">fops</a>) && <a class=\"id\" href=\"#try_module_get\">try_module_get</a>((<a class=\"id\" href=\"#fops\">fops</a>)-><a class=\"id\" href=\"#owner\">owner</a>) ? (<a class=\"id\" href=\"#fops\">fops</a>) : <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#fops_put\">fops_put</a>(<a class=\"id\" href=\"#fops\">fops</a>) \\", 
"<span class=\"ts\"/>do { if (<a class=\"id\" href=\"#fops\">fops</a>) <a class=\"id\" href=\"#module_put\">module_put</a>((<a class=\"id\" href=\"#fops\">fops</a>)-><a class=\"id\" href=\"#owner\">owner</a>); } while(0)", 
"", 
"extern int <a class=\"id\" href=\"#register_filesystem\">register_filesystem</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *);", 
"extern int <a class=\"id\" href=\"#unregister_filesystem\">unregister_filesystem</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *);", 
"extern struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#kern_mount_data\">kern_mount_data</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *, void *<a class=\"id\" href=\"#data\">data</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kern_mount\">kern_mount</a>(<a class=\"id\" href=\"#type\">type</a>) <a class=\"id\" href=\"#kern_mount_data\">kern_mount_data</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"extern int <a class=\"id\" href=\"#may_umount_tree\">may_umount_tree</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *);", 
"extern int <a class=\"id\" href=\"#may_umount\">may_umount</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *);", 
"extern long <a class=\"id\" href=\"#do_mount\">do_mount</a>(char *, char *, char *, unsigned long, void *);", 
"extern struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#collect_mounts\">collect_mounts</a>(struct <a class=\"id\" href=\"#path\">path</a> *);", 
"extern void <a class=\"id\" href=\"#drop_collected_mounts\">drop_collected_mounts</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *);", 
"extern int <a class=\"id\" href=\"#iterate_mounts\">iterate_mounts</a>(int (*)(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *, void *), void *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *);", 
"extern int <a class=\"id\" href=\"#vfs_statfs\">vfs_statfs</a>(struct <a class=\"id\" href=\"#path\">path</a> *, struct <a class=\"id\" href=\"#kstatfs\">kstatfs</a> *);", 
"extern int <a class=\"id\" href=\"#statfs_by_dentry\">statfs_by_dentry</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#kstatfs\">kstatfs</a> *);", 
"extern int <a class=\"id\" href=\"#freeze_super\">freeze_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#super\">super</a>);", 
"extern int <a class=\"id\" href=\"#thaw_super\">thaw_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#super\">super</a>);", 
"", 
"extern int <a class=\"id\" href=\"#current_umask\">current_umask</a>(void);", 
"", 
"<span class=\"comment\">/* /sys/fs */</span>", 
"extern struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#fs_kobj\">fs_kobj</a>;", 
"", 
"extern int <a class=\"id\" href=\"#rw_verify_area\">rw_verify_area</a>(int, struct <a class=\"id\" href=\"#file\">file</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLOCK_VERIFY_READ\">FLOCK_VERIFY_READ</a>  1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLOCK_VERIFY_WRITE\">FLOCK_VERIFY_WRITE</a> 2", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FILE_LOCKING\">CONFIG_FILE_LOCKING</a>", 
"extern int <a class=\"id\" href=\"#locks_mandatory_locked\">locks_mandatory_locked</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern int <a class=\"id\" href=\"#locks_mandatory_area\">locks_mandatory_area</a>(int, struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#file\">file</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a>, <a class=\"id\" href=\"#size_t\">size_t</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Candidates for mandatory locking have the setgid bit set</span>", 
"<span class=\"comment\"> * but no group execute bit -  an otherwise meaningless combination.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__mandatory_lock\">__mandatory_lock</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#ino\">ino</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ino\">ino</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> &amp; (<a class=\"id\" href=\"#S_ISGID\">S_ISGID</a> | <a class=\"id\" href=\"#S_IXGRP\">S_IXGRP</a>)) == <a class=\"id\" href=\"#S_ISGID\">S_ISGID</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ... and these candidates should be on MS_MANDLOCK mounted fs,</span>", 
"<span class=\"comment\"> * otherwise these will be advisory locks</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mandatory_lock\">mandatory_lock</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#ino\">ino</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#IS_MANDLOCK\">IS_MANDLOCK</a>(<a class=\"id\" href=\"#ino\">ino</a>) && <a class=\"id\" href=\"#__mandatory_lock\">__mandatory_lock</a>(<a class=\"id\" href=\"#ino\">ino</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#locks_verify_locked\">locks_verify_locked</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mandatory_lock\">mandatory_lock</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#locks_mandatory_locked\">locks_mandatory_locked</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#locks_verify_truncate\">locks_verify_truncate</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flock\">i_flock</a> && <a class=\"id\" href=\"#mandatory_lock\">mandatory_lock</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#locks_mandatory_area\">locks_mandatory_area</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FLOCK_VERIFY_WRITE\">FLOCK_VERIFY_WRITE</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> ? <a class=\"id\" href=\"#size\">size</a> : <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> ? <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> - <a class=\"id\" href=\"#size\">size</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> : <a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#break_lease\">break_lease</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flock\">i_flock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__break_lease\">__break_lease</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#else <span class=\"comment\">/* !CONFIG_FILE_LOCKING */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#locks_mandatory_locked\">locks_mandatory_locked</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#locks_mandatory_area\">locks_mandatory_area</a>(int <a class=\"id\" href=\"#rw\">rw</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__mandatory_lock\">__mandatory_lock</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mandatory_lock\">mandatory_lock</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#locks_verify_locked\">locks_verify_locked</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#locks_verify_truncate\">locks_verify_truncate</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#break_lease\">break_lease</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FILE_LOCKING */</span>", 
"", 
"<span class=\"comment\">/* fs/open.c */</span>", 
"", 
"extern int <a class=\"id\" href=\"#do_truncate\">do_truncate</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#start\">start</a>, unsigned int <a class=\"id\" href=\"#time_attrs\">time_attrs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>);", 
"extern int <a class=\"id\" href=\"#do_fallocate\">do_fallocate</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"extern long <a class=\"id\" href=\"#do_sys_open\">do_sys_open</a>(int <a class=\"id\" href=\"#dfd\">dfd</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#filename\">filename</a>, int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#mode\">mode</a>);", 
"extern struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp_open\">filp_open</a>(const char *, int, int);", 
"extern struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#dentry_open\">dentry_open</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *, int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#cred\">cred</a> *);", 
"extern int <a class=\"id\" href=\"#filp_close\">filp_close</a>(struct <a class=\"id\" href=\"#file\">file</a> *, <a class=\"id\" href=\"#fl_owner_t\">fl_owner_t</a> <a class=\"id\" href=\"#id\">id</a>);", 
"extern char * <a class=\"id\" href=\"#getname\">getname</a>(const char <a class=\"id\" href=\"#__user\">__user</a> *);", 
"", 
"<span class=\"comment\">/* fs/ioctl.c */</span>", 
"", 
"extern int <a class=\"id\" href=\"#ioctl_preallocate\">ioctl_preallocate</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#argp\">argp</a>);", 
"", 
"<span class=\"comment\">/* fs/dcache.c */</span>", 
"extern void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#vfs_caches_init_early\">vfs_caches_init_early</a>(void);", 
"extern void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#vfs_caches_init\">vfs_caches_init</a>(unsigned long);", 
"", 
"extern struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#names_cachep\">names_cachep</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__getname_gfp\">__getname_gfp</a>(<a class=\"id\" href=\"#gfp\">gfp</a>)<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#names_cachep\">names_cachep</a>, (<a class=\"id\" href=\"#gfp\">gfp</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__getname\">__getname</a>()<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__getname_gfp\">__getname_gfp</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__putname\">__putname</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#names_cachep\">names_cachep</a>, (void *)(<a class=\"id\" href=\"#name\">name</a>))", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_AUDITSYSCALL\">CONFIG_AUDITSYSCALL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#putname\">putname</a>(<a class=\"id\" href=\"#name\">name</a>)   <a class=\"id\" href=\"#__putname\">__putname</a>(<a class=\"id\" href=\"#name\">name</a>)", 
"#else", 
"extern void <a class=\"id\" href=\"#putname\">putname</a>(const char *<a class=\"id\" href=\"#name\">name</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLOCK\">CONFIG_BLOCK</a>", 
"extern int <a class=\"id\" href=\"#register_blkdev\">register_blkdev</a>(unsigned int, const char *);", 
"extern void <a class=\"id\" href=\"#unregister_blkdev\">unregister_blkdev</a>(unsigned int, const char *);", 
"extern struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdget\">bdget</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a>);", 
"extern struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdgrab\">bdgrab</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"extern void <a class=\"id\" href=\"#bd_set_size\">bd_set_size</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#size\">size</a>);", 
"extern void <a class=\"id\" href=\"#bd_forget\">bd_forget</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"extern void <a class=\"id\" href=\"#bdput\">bdput</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *);", 
"extern struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#open_by_devnum\">open_by_devnum</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a>, <a class=\"id\" href=\"#fmode_t\">fmode_t</a>);", 
"extern void <a class=\"id\" href=\"#invalidate_bdev\">invalidate_bdev</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *);", 
"extern int <a class=\"id\" href=\"#sync_blockdev\">sync_blockdev</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"extern struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#freeze_bdev\">freeze_bdev</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *);", 
"extern void <a class=\"id\" href=\"#emergency_thaw_all\">emergency_thaw_all</a>(void);", 
"extern int <a class=\"id\" href=\"#thaw_bdev\">thaw_bdev</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>);", 
"extern int <a class=\"id\" href=\"#fsync_bdev\">fsync_bdev</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#bd_forget\">bd_forget</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sync_blockdev\">sync_blockdev</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>) { return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#invalidate_bdev\">invalidate_bdev</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>) {}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#freeze_bdev\">freeze_bdev</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#thaw_bdev\">thaw_bdev</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"extern int <a class=\"id\" href=\"#sync_filesystem\">sync_filesystem</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *);", 
"extern const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#def_blk_fops\">def_blk_fops</a>;", 
"extern const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#def_chr_fops\">def_chr_fops</a>;", 
"extern const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#bad_sock_fops\">bad_sock_fops</a>;", 
"extern const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#def_fifo_fops\">def_fifo_fops</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLOCK\">CONFIG_BLOCK</a>", 
"extern int <a class=\"id\" href=\"#ioctl_by_bdev\">ioctl_by_bdev</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *, unsigned, unsigned long);", 
"extern int <a class=\"id\" href=\"#blkdev_ioctl\">blkdev_ioctl</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *, <a class=\"id\" href=\"#fmode_t\">fmode_t</a>, unsigned, unsigned long);", 
"extern long <a class=\"id\" href=\"#compat_blkdev_ioctl\">compat_blkdev_ioctl</a>(struct <a class=\"id\" href=\"#file\">file</a> *, unsigned, unsigned long);", 
"extern int <a class=\"id\" href=\"#blkdev_get\">blkdev_get</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *, <a class=\"id\" href=\"#fmode_t\">fmode_t</a>);", 
"extern int <a class=\"id\" href=\"#blkdev_put\">blkdev_put</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *, <a class=\"id\" href=\"#fmode_t\">fmode_t</a>);", 
"extern int <a class=\"id\" href=\"#bd_claim\">bd_claim</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *, void *);", 
"extern void <a class=\"id\" href=\"#bd_release\">bd_release</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSFS\">CONFIG_SYSFS</a>", 
"extern int <a class=\"id\" href=\"#bd_claim_by_disk\">bd_claim_by_disk</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *, void *, struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *);", 
"extern void <a class=\"id\" href=\"#bd_release_from_disk\">bd_release_from_disk</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *, struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *);", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bd_claim_by_disk\">bd_claim_by_disk</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#holder\">holder</a>, <a class=\"id\" href=\"#disk\">disk</a>)<span class=\"ts\"/><a class=\"id\" href=\"#bd_claim\">bd_claim</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#holder\">holder</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bd_release_from_disk\">bd_release_from_disk</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#disk\">disk</a>)<span class=\"ts\"/><a class=\"id\" href=\"#bd_release\">bd_release</a>(<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* fs/char_dev.c */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CHRDEV_MAJOR_HASH_SIZE\">CHRDEV_MAJOR_HASH_SIZE</a><span class=\"ts\"/>255", 
"extern int <a class=\"id\" href=\"#alloc_chrdev_region\">alloc_chrdev_region</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> *, unsigned, unsigned, const char *);", 
"extern int <a class=\"id\" href=\"#register_chrdev_region\">register_chrdev_region</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a>, unsigned, const char *);", 
"extern int <a class=\"id\" href=\"#__register_chrdev\">__register_chrdev</a>(unsigned int <a class=\"id\" href=\"#major\">major</a>, unsigned int <a class=\"id\" href=\"#baseminor\">baseminor</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#count\">count</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#fops\">fops</a>);", 
"extern void <a class=\"id\" href=\"#__unregister_chrdev\">__unregister_chrdev</a>(unsigned int <a class=\"id\" href=\"#major\">major</a>, unsigned int <a class=\"id\" href=\"#baseminor\">baseminor</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#count\">count</a>, const char *<a class=\"id\" href=\"#name\">name</a>);", 
"extern void <a class=\"id\" href=\"#unregister_chrdev_region\">unregister_chrdev_region</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a>, unsigned);", 
"extern void <a class=\"id\" href=\"#chrdev_show\">chrdev_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *,<a class=\"id\" href=\"#off_t\">off_t</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#register_chrdev\">register_chrdev</a>(unsigned int <a class=\"id\" href=\"#major\">major</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#fops\">fops</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__register_chrdev\">__register_chrdev</a>(<a class=\"id\" href=\"#major\">major</a>, 0, 256, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#fops\">fops</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#unregister_chrdev\">unregister_chrdev</a>(unsigned int <a class=\"id\" href=\"#major\">major</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__unregister_chrdev\">__unregister_chrdev</a>(<a class=\"id\" href=\"#major\">major</a>, 0, 256, <a class=\"id\" href=\"#name\">name</a>);", 
"}", 
"", 
"<span class=\"comment\">/* fs/block_dev.c */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a><span class=\"ts\"/>32<span class=\"ts\"/><span class=\"comment\">/* Largest string for a blockdev identifier */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BDEVT_SIZE\">BDEVT_SIZE</a><span class=\"ts\"/>10<span class=\"ts\"/><span class=\"comment\">/* Largest string for MAJ:MIN for blkdev */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLOCK\">CONFIG_BLOCK</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKDEV_MAJOR_HASH_SIZE\">BLKDEV_MAJOR_HASH_SIZE</a><span class=\"ts\"/>255", 
"extern const char *<a class=\"id\" href=\"#__bdevname\">__bdevname</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a>, char *<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"extern const char *<a class=\"id\" href=\"#bdevname\">bdevname</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, char *<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"extern struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#lookup_bdev\">lookup_bdev</a>(const char *);", 
"extern struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#open_bdev_exclusive\">open_bdev_exclusive</a>(const char *, <a class=\"id\" href=\"#fmode_t\">fmode_t</a>, void *);", 
"extern void <a class=\"id\" href=\"#close_bdev_exclusive\">close_bdev_exclusive</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *, <a class=\"id\" href=\"#fmode_t\">fmode_t</a>);", 
"extern void <a class=\"id\" href=\"#blkdev_show\">blkdev_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *,<a class=\"id\" href=\"#off_t\">off_t</a>);", 
"", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKDEV_MAJOR_HASH_SIZE\">BLKDEV_MAJOR_HASH_SIZE</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern void <a class=\"id\" href=\"#init_special_inode\">init_special_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, <a class=\"id\" href=\"#umode_t\">umode_t</a>, <a class=\"id\" href=\"#dev_t\">dev_t</a>);", 
"", 
"<span class=\"comment\">/* Invalid inode operations -- fs/bad_inode.c */</span>", 
"extern void <a class=\"id\" href=\"#make_bad_inode\">make_bad_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern int <a class=\"id\" href=\"#is_bad_inode\">is_bad_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"", 
"extern const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#read_pipefifo_fops\">read_pipefifo_fops</a>;", 
"extern const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#write_pipefifo_fops\">write_pipefifo_fops</a>;", 
"extern const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#rdwr_pipefifo_fops\">rdwr_pipefifo_fops</a>;", 
"", 
"extern int <a class=\"id\" href=\"#fs_may_remount_ro\">fs_may_remount_ro</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLOCK\">CONFIG_BLOCK</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * return READ, READA, or WRITE</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bio_rw\">bio_rw</a>(<a class=\"id\" href=\"#bio\">bio</a>)<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#bio\">bio</a>)-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; (<a class=\"id\" href=\"#RW_MASK\">RW_MASK</a> | <a class=\"id\" href=\"#RWA_MASK\">RWA_MASK</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * return data direction, READ or WRITE</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bio_data_dir\">bio_data_dir</a>(<a class=\"id\" href=\"#bio\">bio</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#bio\">bio</a>)-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; 1)", 
"", 
"extern void <a class=\"id\" href=\"#check_disk_size_change\">check_disk_size_change</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"extern int <a class=\"id\" href=\"#revalidate_disk\">revalidate_disk</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *);", 
"extern int <a class=\"id\" href=\"#check_disk_change\">check_disk_change</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *);", 
"extern int <a class=\"id\" href=\"#__invalidate_device\">__invalidate_device</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *);", 
"extern int <a class=\"id\" href=\"#invalidate_partition\">invalidate_partition</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *, int);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"extern int <a class=\"id\" href=\"#invalidate_inodes\">invalidate_inodes</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *);", 
"unsigned long <a class=\"id\" href=\"#invalidate_mapping_pages\">invalidate_mapping_pages</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#invalidate_remote_inode\">invalidate_remote_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) || <a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#S_ISLNK\">S_ISLNK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#invalidate_mapping_pages\">invalidate_mapping_pages</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>, 0, -1);", 
"}", 
"extern int <a class=\"id\" href=\"#invalidate_inode_pages2\">invalidate_inode_pages2</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"extern int <a class=\"id\" href=\"#invalidate_inode_pages2_range\">invalidate_inode_pages2_range</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#end\">end</a>);", 
"extern int <a class=\"id\" href=\"#write_inode_now\">write_inode_now</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, int);", 
"extern int <a class=\"id\" href=\"#filemap_fdatawrite\">filemap_fdatawrite</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *);", 
"extern int <a class=\"id\" href=\"#filemap_flush\">filemap_flush</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *);", 
"extern int <a class=\"id\" href=\"#filemap_fdatawait\">filemap_fdatawait</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *);", 
"extern int <a class=\"id\" href=\"#filemap_fdatawait_range\">filemap_fdatawait_range</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#lstart\">lstart</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#lend\">lend</a>);", 
"extern int <a class=\"id\" href=\"#filemap_write_and_wait\">filemap_write_and_wait</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"extern int <a class=\"id\" href=\"#filemap_write_and_wait_range\">filemap_write_and_wait_range</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>        <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#lstart\">lstart</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#lend\">lend</a>);", 
"extern int <a class=\"id\" href=\"#__filemap_fdatawrite_range\">__filemap_fdatawrite_range</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#end\">end</a>, int <a class=\"id\" href=\"#sync_mode\">sync_mode</a>);", 
"extern int <a class=\"id\" href=\"#filemap_fdatawrite_range\">filemap_fdatawrite_range</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"extern int <a class=\"id\" href=\"#vfs_fsync_range\">vfs_fsync_range</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#datasync\">datasync</a>);", 
"extern int <a class=\"id\" href=\"#vfs_fsync\">vfs_fsync</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#datasync\">datasync</a>);", 
"extern int <a class=\"id\" href=\"#generic_write_sync\">generic_write_sync</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#count\">count</a>);", 
"extern void <a class=\"id\" href=\"#sync_supers\">sync_supers</a>(void);", 
"extern void <a class=\"id\" href=\"#emergency_sync\">emergency_sync</a>(void);", 
"extern void <a class=\"id\" href=\"#emergency_remount\">emergency_remount</a>(void);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLOCK\">CONFIG_BLOCK</a>", 
"extern <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#bmap\">bmap</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, <a class=\"id\" href=\"#sector_t\">sector_t</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"extern int <a class=\"id\" href=\"#notify_change\">notify_change</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#iattr\">iattr</a> *);", 
"extern int <a class=\"id\" href=\"#inode_permission\">inode_permission</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, int);", 
"extern int <a class=\"id\" href=\"#generic_permission\">generic_permission</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, int,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#check_acl\">check_acl</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, int));", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#execute_ok\">execute_ok</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> &amp; <a class=\"id\" href=\"#S_IXUGO\">S_IXUGO</a>) || <a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>);", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#get_write_access\">get_write_access</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern int <a class=\"id\" href=\"#deny_write_access\">deny_write_access</a>(struct <a class=\"id\" href=\"#file\">file</a> *);", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#put_write_access\">put_write_access</a>(struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_writecount\">i_writecount</a>);", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#allow_write_access\">allow_write_access</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_writecount\">i_writecount</a>);", 
"}", 
"extern int <a class=\"id\" href=\"#do_pipe_flags\">do_pipe_flags</a>(int *, int);", 
"extern struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#create_read_pipe\">create_read_pipe</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"extern struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#create_write_pipe\">create_write_pipe</a>(int <a class=\"id\" href=\"#flags\">flags</a>);", 
"extern void <a class=\"id\" href=\"#free_write_pipe\">free_write_pipe</a>(struct <a class=\"id\" href=\"#file\">file</a> *);", 
"", 
"extern struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#do_filp_open\">do_filp_open</a>(int <a class=\"id\" href=\"#dfd\">dfd</a>, const char *<a class=\"id\" href=\"#pathname\">pathname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#open_flag\">open_flag</a>, int <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#acc_mode\">acc_mode</a>);", 
"extern int <a class=\"id\" href=\"#may_open\">may_open</a>(struct <a class=\"id\" href=\"#path\">path</a> *, int, int);", 
"", 
"extern int <a class=\"id\" href=\"#kernel_read\">kernel_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a>, char *, unsigned long);", 
"extern struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#open_exec\">open_exec</a>(const char *);", 
" ", 
"<span class=\"comment\">/* fs/dcache.c -- generic fs support functions */</span>", 
"extern int <a class=\"id\" href=\"#is_subdir\">is_subdir</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"extern int <a class=\"id\" href=\"#path_is_under\">path_is_under</a>(struct <a class=\"id\" href=\"#path\">path</a> *, struct <a class=\"id\" href=\"#path\">path</a> *);", 
"extern <a class=\"id\" href=\"#ino_t\">ino_t</a> <a class=\"id\" href=\"#find_inode_number\">find_inode_number</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#qstr\">qstr</a> *);", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* needed for stackable file system support */</span>", 
"extern <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#default_llseek\">default_llseek</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#origin\">origin</a>);", 
"", 
"extern <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#vfs_llseek\">vfs_llseek</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#origin\">origin</a>);", 
"", 
"extern int <a class=\"id\" href=\"#inode_init_always\">inode_init_always</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *, struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern void <a class=\"id\" href=\"#inode_init_once\">inode_init_once</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern void <a class=\"id\" href=\"#inode_add_to_lists\">inode_add_to_lists</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *, struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern void <a class=\"id\" href=\"#iput\">iput</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#igrab\">igrab</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern <a class=\"id\" href=\"#ino_t\">ino_t</a> <a class=\"id\" href=\"#iunique\">iunique</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *, <a class=\"id\" href=\"#ino_t\">ino_t</a>);", 
"extern int <a class=\"id\" href=\"#inode_needs_sync\">inode_needs_sync</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"extern int <a class=\"id\" href=\"#generic_delete_inode\">generic_delete_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"extern int <a class=\"id\" href=\"#generic_drop_inode\">generic_drop_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#ilookup5_nowait\">ilookup5_nowait</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#hashval\">hashval</a>, int (*<a class=\"id\" href=\"#test\">test</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, void *),", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>);", 
"extern struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#ilookup5\">ilookup5</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, unsigned long <a class=\"id\" href=\"#hashval\">hashval</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#test\">test</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, void *), void *<a class=\"id\" href=\"#data\">data</a>);", 
"extern struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#ilookup\">ilookup</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, unsigned long <a class=\"id\" href=\"#ino\">ino</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#iget5_locked\">iget5_locked</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *, unsigned long, int (*<a class=\"id\" href=\"#test\">test</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, void *), int (*<a class=\"id\" href=\"#set\">set</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, void *), void *);", 
"extern struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#iget_locked\">iget_locked</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *, unsigned long);", 
"extern int <a class=\"id\" href=\"#insert_inode_locked4\">insert_inode_locked4</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, unsigned long, int (*<a class=\"id\" href=\"#test\">test</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, void *), void *);", 
"extern int <a class=\"id\" href=\"#insert_inode_locked\">insert_inode_locked</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern void <a class=\"id\" href=\"#unlock_new_inode\">unlock_new_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"", 
"extern void <a class=\"id\" href=\"#__iget\">__iget</a>(struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a>);", 
"extern void <a class=\"id\" href=\"#iget_failed\">iget_failed</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern void <a class=\"id\" href=\"#end_writeback\">end_writeback</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern void <a class=\"id\" href=\"#destroy_inode\">destroy_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern void <a class=\"id\" href=\"#__destroy_inode\">__destroy_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#new_inode\">new_inode</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *);", 
"extern int <a class=\"id\" href=\"#should_remove_suid\">should_remove_suid</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"extern int <a class=\"id\" href=\"#file_remove_suid\">file_remove_suid</a>(struct <a class=\"id\" href=\"#file\">file</a> *);", 
"", 
"extern void <a class=\"id\" href=\"#__insert_inode_hash\">__insert_inode_hash</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, unsigned long <a class=\"id\" href=\"#hashval\">hashval</a>);", 
"extern void <a class=\"id\" href=\"#remove_inode_hash\">remove_inode_hash</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#insert_inode_hash\">insert_inode_hash</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__insert_inode_hash\">__insert_inode_hash</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLOCK\">CONFIG_BLOCK</a>", 
"extern void <a class=\"id\" href=\"#submit_bio\">submit_bio</a>(int, struct <a class=\"id\" href=\"#bio\">bio</a> *);", 
"extern int <a class=\"id\" href=\"#bdev_read_only\">bdev_read_only</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"extern int <a class=\"id\" href=\"#set_blocksize\">set_blocksize</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *, int);", 
"extern int <a class=\"id\" href=\"#sb_set_blocksize\">sb_set_blocksize</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *, int);", 
"extern int <a class=\"id\" href=\"#sb_min_blocksize\">sb_min_blocksize</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *, int);", 
"", 
"extern int <a class=\"id\" href=\"#generic_file_mmap\">generic_file_mmap</a>(struct <a class=\"id\" href=\"#file\">file</a> *, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *);", 
"extern int <a class=\"id\" href=\"#generic_file_readonly_mmap\">generic_file_readonly_mmap</a>(struct <a class=\"id\" href=\"#file\">file</a> *, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *);", 
"extern int <a class=\"id\" href=\"#file_read_actor\">file_read_actor</a>(<a class=\"id\" href=\"#read_descriptor_t\">read_descriptor_t</a> * <a class=\"id\" href=\"#desc\">desc</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#offset\">offset</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>);", 
"int <a class=\"id\" href=\"#generic_write_checks\">generic_write_checks</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#count\">count</a>, int <a class=\"id\" href=\"#isblk\">isblk</a>);", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#generic_file_aio_read\">generic_file_aio_read</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *, unsigned long, <a class=\"id\" href=\"#loff_t\">loff_t</a>);", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#__generic_file_aio_write\">__generic_file_aio_write</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *, unsigned long,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> *);", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#generic_file_aio_write\">generic_file_aio_write</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *, unsigned long, <a class=\"id\" href=\"#loff_t\">loff_t</a>);", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#generic_file_direct_write\">generic_file_direct_write</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *, <a class=\"id\" href=\"#loff_t\">loff_t</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#size_t\">size_t</a>);", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#generic_file_buffered_write\">generic_file_buffered_write</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long, <a class=\"id\" href=\"#loff_t\">loff_t</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#ssize_t\">ssize_t</a>);", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#do_sync_read\">do_sync_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>);", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#do_sync_write\">do_sync_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>);", 
"extern int <a class=\"id\" href=\"#generic_segment_checks\">generic_segment_checks</a>(const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#nr_segs\">nr_segs</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#count\">count</a>, int <a class=\"id\" href=\"#access_flags\">access_flags</a>);", 
"", 
"<span class=\"comment\">/* fs/block_dev.c */</span>", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#blkdev_aio_write\">blkdev_aio_write</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>);", 
"extern int <a class=\"id\" href=\"#blkdev_fsync\">blkdev_fsync</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, int <a class=\"id\" href=\"#datasync\">datasync</a>);", 
"", 
"<span class=\"comment\">/* fs/splice.c */</span>", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#generic_file_splice_read\">generic_file_splice_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>, unsigned int);", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#default_file_splice_read\">default_file_splice_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>, unsigned int);", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#generic_file_splice_write\">generic_file_splice_write</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>, unsigned int);", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#generic_splice_sendpage\">generic_splice_sendpage</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>);", 
"extern long <a class=\"id\" href=\"#do_splice_direct\">do_splice_direct</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#out\">out</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"extern void", 
"<a class=\"id\" href=\"#file_ra_state_init\">file_ra_state_init</a>(struct <a class=\"id\" href=\"#file_ra_state\">file_ra_state</a> *<a class=\"id\" href=\"#ra\">ra</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"extern <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#noop_llseek\">noop_llseek</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#origin\">origin</a>);", 
"extern <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#no_llseek\">no_llseek</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#origin\">origin</a>);", 
"extern <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#generic_file_llseek\">generic_file_llseek</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#origin\">origin</a>);", 
"extern <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#generic_file_llseek_unlocked\">generic_file_llseek_unlocked</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#origin\">origin</a>);", 
"extern int <a class=\"id\" href=\"#generic_file_open\">generic_file_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#filp\">filp</a>);", 
"extern int <a class=\"id\" href=\"#nonseekable_open\">nonseekable_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#filp\">filp</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FS_XIP\">CONFIG_FS_XIP</a>", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#xip_file_read\">xip_file_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>);", 
"extern int <a class=\"id\" href=\"#xip_file_mmap\">xip_file_mmap</a>(struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> * <a class=\"id\" href=\"#vma\">vma</a>);", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#xip_file_write\">xip_file_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>);", 
"extern int <a class=\"id\" href=\"#xip_truncate_page\">xip_truncate_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#from\">from</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#xip_truncate_page\">xip_truncate_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#from\">from</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLOCK\">CONFIG_BLOCK</a>", 
"typedef void (<a class=\"id\" href=\"#dio_submit_t\">dio_submit_t</a>)(int <a class=\"id\" href=\"#rw\">rw</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#file_offset\">file_offset</a>);", 
"", 
"enum {", 
"<span class=\"ts\"/><span class=\"comment\">/* need locking between buffered and direct access */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DIO_LOCKING\">DIO_LOCKING</a><span class=\"ts\"/>= 0x01,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* filesystem does not support filling holes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DIO_SKIP_HOLES\">DIO_SKIP_HOLES</a><span class=\"ts\"/>= 0x02,", 
"};", 
"", 
"void <a class=\"id\" href=\"#dio_end_io\">dio_end_io</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, int <a class=\"id\" href=\"#error\">error</a>);", 
"", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#__blockdev_direct_IO\">__blockdev_direct_IO</a>(int <a class=\"id\" href=\"#rw\">rw</a>, struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, <a class=\"id\" href=\"#get_block_t\">get_block_t</a> <a class=\"id\" href=\"#get_block\">get_block</a>, <a class=\"id\" href=\"#dio_iodone_t\">dio_iodone_t</a> <a class=\"id\" href=\"#end_io\">end_io</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio_submit_t\">dio_submit_t</a> <a class=\"id\" href=\"#submit_io\">submit_io</a>,<span class=\"ts\"/>int <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#blockdev_direct_IO\">blockdev_direct_IO</a>(int <a class=\"id\" href=\"#rw\">rw</a>, struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, <a class=\"id\" href=\"#get_block_t\">get_block_t</a> <a class=\"id\" href=\"#get_block\">get_block</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio_iodone_t\">dio_iodone_t</a> <a class=\"id\" href=\"#end_io\">end_io</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__blockdev_direct_IO\">__blockdev_direct_IO</a>(<a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, <a class=\"id\" href=\"#get_block\">get_block</a>, <a class=\"id\" href=\"#end_io\">end_io</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#DIO_LOCKING\">DIO_LOCKING</a> | <a class=\"id\" href=\"#DIO_SKIP_HOLES\">DIO_SKIP_HOLES</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#generic_ro_fops\">generic_ro_fops</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#special_file\">special_file</a>(<a class=\"id\" href=\"#m\">m</a>) (<a class=\"id\" href=\"#S_ISCHR\">S_ISCHR</a>(<a class=\"id\" href=\"#m\">m</a>)||<a class=\"id\" href=\"#S_ISBLK\">S_ISBLK</a>(<a class=\"id\" href=\"#m\">m</a>)||<a class=\"id\" href=\"#S_ISFIFO\">S_ISFIFO</a>(<a class=\"id\" href=\"#m\">m</a>)||<a class=\"id\" href=\"#S_ISSOCK\">S_ISSOCK</a>(<a class=\"id\" href=\"#m\">m</a>))", 
"", 
"extern int <a class=\"id\" href=\"#vfs_readlink\">vfs_readlink</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, char <a class=\"id\" href=\"#__user\">__user</a> *, int, const char *);", 
"extern int <a class=\"id\" href=\"#vfs_follow_link\">vfs_follow_link</a>(struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *, const char *);", 
"extern int <a class=\"id\" href=\"#page_readlink\">page_readlink</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, char <a class=\"id\" href=\"#__user\">__user</a> *, int);", 
"extern void *<a class=\"id\" href=\"#page_follow_link_light\">page_follow_link_light</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *);", 
"extern void <a class=\"id\" href=\"#page_put_link\">page_put_link</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *, void *);", 
"extern int <a class=\"id\" href=\"#__page_symlink\">__page_symlink</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, const char *<a class=\"id\" href=\"#symname\">symname</a>, int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nofs\">nofs</a>);", 
"extern int <a class=\"id\" href=\"#page_symlink\">page_symlink</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, const char *<a class=\"id\" href=\"#symname\">symname</a>, int <a class=\"id\" href=\"#len\">len</a>);", 
"extern const struct <a class=\"id\" href=\"#inode_operations\">inode_operations</a> <a class=\"id\" href=\"#page_symlink_inode_operations\">page_symlink_inode_operations</a>;", 
"extern int <a class=\"id\" href=\"#generic_readlink\">generic_readlink</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, char <a class=\"id\" href=\"#__user\">__user</a> *, int);", 
"extern void <a class=\"id\" href=\"#generic_fillattr\">generic_fillattr</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#kstat\">kstat</a> *);", 
"extern int <a class=\"id\" href=\"#vfs_getattr\">vfs_getattr</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#kstat\">kstat</a> *);", 
"void <a class=\"id\" href=\"#__inode_add_bytes\">__inode_add_bytes</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#bytes\">bytes</a>);", 
"void <a class=\"id\" href=\"#inode_add_bytes\">inode_add_bytes</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#bytes\">bytes</a>);", 
"void <a class=\"id\" href=\"#inode_sub_bytes\">inode_sub_bytes</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#bytes\">bytes</a>);", 
"<a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#inode_get_bytes\">inode_get_bytes</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"void <a class=\"id\" href=\"#inode_set_bytes\">inode_set_bytes</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#bytes\">bytes</a>);", 
"", 
"extern int <a class=\"id\" href=\"#vfs_readdir\">vfs_readdir</a>(struct <a class=\"id\" href=\"#file\">file</a> *, <a class=\"id\" href=\"#filldir_t\">filldir_t</a>, void *);", 
"", 
"extern int <a class=\"id\" href=\"#vfs_stat\">vfs_stat</a>(const char <a class=\"id\" href=\"#__user\">__user</a> *, struct <a class=\"id\" href=\"#kstat\">kstat</a> *);", 
"extern int <a class=\"id\" href=\"#vfs_lstat\">vfs_lstat</a>(const char <a class=\"id\" href=\"#__user\">__user</a> *, struct <a class=\"id\" href=\"#kstat\">kstat</a> *);", 
"extern int <a class=\"id\" href=\"#vfs_fstat\">vfs_fstat</a>(unsigned int, struct <a class=\"id\" href=\"#kstat\">kstat</a> *);", 
"extern int <a class=\"id\" href=\"#vfs_fstatat\">vfs_fstatat</a>(int , const char <a class=\"id\" href=\"#__user\">__user</a> *, struct <a class=\"id\" href=\"#kstat\">kstat</a> *, int);", 
"", 
"extern int <a class=\"id\" href=\"#do_vfs_ioctl\">do_vfs_ioctl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, unsigned int <a class=\"id\" href=\"#fd\">fd</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#arg\">arg</a>);", 
"extern int <a class=\"id\" href=\"#__generic_block_fiemap\">__generic_block_fiemap</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#fiemap_extent_info\">fiemap_extent_info</a> *<a class=\"id\" href=\"#fieinfo\">fieinfo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#get_block_t\">get_block_t</a> *<a class=\"id\" href=\"#get_block\">get_block</a>);", 
"extern int <a class=\"id\" href=\"#generic_block_fiemap\">generic_block_fiemap</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fiemap_extent_info\">fiemap_extent_info</a> *<a class=\"id\" href=\"#fieinfo\">fieinfo</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#get_block_t\">get_block_t</a> *<a class=\"id\" href=\"#get_block\">get_block</a>);", 
"", 
"extern void <a class=\"id\" href=\"#get_filesystem\">get_filesystem</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs\">fs</a>);", 
"extern void <a class=\"id\" href=\"#put_filesystem\">put_filesystem</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs\">fs</a>);", 
"extern struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#get_fs_type\">get_fs_type</a>(const char *<a class=\"id\" href=\"#name\">name</a>);", 
"extern struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#get_super\">get_super</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *);", 
"extern struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#get_active_super\">get_active_super</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"extern struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#user_get_super\">user_get_super</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a>);", 
"extern void <a class=\"id\" href=\"#drop_super\">drop_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>);", 
"extern void <a class=\"id\" href=\"#iterate_supers\">iterate_supers</a>(void (*)(struct <a class=\"id\" href=\"#super_block\">super_block</a> *, void *), void *);", 
"", 
"extern int <a class=\"id\" href=\"#dcache_dir_open\">dcache_dir_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#file\">file</a> *);", 
"extern int <a class=\"id\" href=\"#dcache_dir_close\">dcache_dir_close</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#file\">file</a> *);", 
"extern <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#dcache_dir_lseek\">dcache_dir_lseek</a>(struct <a class=\"id\" href=\"#file\">file</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a>, int);", 
"extern int <a class=\"id\" href=\"#dcache_readdir\">dcache_readdir</a>(struct <a class=\"id\" href=\"#file\">file</a> *, void *, <a class=\"id\" href=\"#filldir_t\">filldir_t</a>);", 
"extern int <a class=\"id\" href=\"#simple_setattr\">simple_setattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#iattr\">iattr</a> *);", 
"extern int <a class=\"id\" href=\"#simple_getattr\">simple_getattr</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#kstat\">kstat</a> *);", 
"extern int <a class=\"id\" href=\"#simple_statfs\">simple_statfs</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#kstatfs\">kstatfs</a> *);", 
"extern int <a class=\"id\" href=\"#simple_link\">simple_link</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"extern int <a class=\"id\" href=\"#simple_unlink\">simple_unlink</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"extern int <a class=\"id\" href=\"#simple_rmdir\">simple_rmdir</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"extern int <a class=\"id\" href=\"#simple_rename\">simple_rename</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"extern int <a class=\"id\" href=\"#noop_fsync\">noop_fsync</a>(struct <a class=\"id\" href=\"#file\">file</a> *, int);", 
"extern int <a class=\"id\" href=\"#simple_empty\">simple_empty</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"extern int <a class=\"id\" href=\"#simple_readpage\">simple_readpage</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"extern int <a class=\"id\" href=\"#simple_write_begin\">simple_write_begin</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pagep\">pagep</a>, void **<a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"extern int <a class=\"id\" href=\"#simple_write_end\">simple_write_end</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#copied\">copied</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, void *<a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#simple_lookup\">simple_lookup</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *);", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#generic_read_dir\">generic_read_dir</a>(struct <a class=\"id\" href=\"#file\">file</a> *, char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *);", 
"extern const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#simple_dir_operations\">simple_dir_operations</a>;", 
"extern const struct <a class=\"id\" href=\"#inode_operations\">inode_operations</a> <a class=\"id\" href=\"#simple_dir_inode_operations\">simple_dir_inode_operations</a>;", 
"struct <a class=\"id\" href=\"#tree_descr\">tree_descr</a> { char *<a class=\"id\" href=\"#name\">name</a>; const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>; int <a class=\"id\" href=\"#mode\">mode</a>; };", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_alloc_name\">d_alloc_name</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, const char *);", 
"extern int <a class=\"id\" href=\"#simple_fill_super\">simple_fill_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *, unsigned long, struct <a class=\"id\" href=\"#tree_descr\">tree_descr</a> *);", 
"extern int <a class=\"id\" href=\"#simple_pin_fs\">simple_pin_fs</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> **<a class=\"id\" href=\"#mount\">mount</a>, int *<a class=\"id\" href=\"#count\">count</a>);", 
"extern void <a class=\"id\" href=\"#simple_release_fs\">simple_release_fs</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> **<a class=\"id\" href=\"#mount\">mount</a>, int *<a class=\"id\" href=\"#count\">count</a>);", 
"", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#simple_read_from_buffer\">simple_read_from_buffer</a>(void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>, const void *<a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#available\">available</a>);", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#simple_write_to_buffer\">simple_write_to_buffer</a>(void *<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#available\">available</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"extern int <a class=\"id\" href=\"#generic_file_fsync\">generic_file_fsync</a>(struct <a class=\"id\" href=\"#file\">file</a> *, int);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MIGRATION\">CONFIG_MIGRATION</a>", 
"extern int <a class=\"id\" href=\"#buffer_migrate_page\">buffer_migrate_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *, struct <a class=\"id\" href=\"#page\">page</a> *);", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#buffer_migrate_page\">buffer_migrate_page</a> <a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern int <a class=\"id\" href=\"#inode_change_ok\">inode_change_ok</a>(const struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#iattr\">iattr</a> *);", 
"extern int <a class=\"id\" href=\"#inode_newsize_ok\">inode_newsize_ok</a>(const struct <a class=\"id\" href=\"#inode\">inode</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>);", 
"extern void <a class=\"id\" href=\"#setattr_copy\">setattr_copy</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, const struct <a class=\"id\" href=\"#iattr\">iattr</a> *<a class=\"id\" href=\"#attr\">attr</a>);", 
"", 
"extern void <a class=\"id\" href=\"#file_update_time\">file_update_time</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"", 
"extern int <a class=\"id\" href=\"#generic_show_options\">generic_show_options</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"extern void <a class=\"id\" href=\"#save_mount_options\">save_mount_options</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, char *<a class=\"id\" href=\"#options\">options</a>);", 
"extern void <a class=\"id\" href=\"#replace_mount_options\">replace_mount_options</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, char *<a class=\"id\" href=\"#options\">options</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#ino_t\">ino_t</a> <a class=\"id\" href=\"#parent_ino\">parent_ino</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ino_t\">ino_t</a> <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Transaction based IO helpers */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * An argresp is stored in an allocated page and holds the</span>", 
"<span class=\"comment\"> * size of the argument or response, along with its content</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#simple_transaction_argresp\">simple_transaction_argresp</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#data\">data</a>[0];", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SIMPLE_TRANSACTION_LIMIT\">SIMPLE_TRANSACTION_LIMIT</a> (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - sizeof(struct <a class=\"id\" href=\"#simple_transaction_argresp\">simple_transaction_argresp</a>))", 
"", 
"char *<a class=\"id\" href=\"#simple_transaction_get\">simple_transaction_get</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>);", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#simple_transaction_read\">simple_transaction_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>);", 
"int <a class=\"id\" href=\"#simple_transaction_release\">simple_transaction_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"", 
"void <a class=\"id\" href=\"#simple_transaction_set\">simple_transaction_set</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * simple attribute files</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These attributes behave similar to those in sysfs:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Writing to an attribute immediately sets a value, an open file can be</span>", 
"<span class=\"comment\"> * written to multiple times.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Reading from an attribute creates a buffer from the value that might get</span>", 
"<span class=\"comment\"> * read with multiple read calls. When the attribute has been read</span>", 
"<span class=\"comment\"> * completely, no further read calls are possible until the file is opened</span>", 
"<span class=\"comment\"> * again.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All attributes contain a text representation of a numeric value</span>", 
"<span class=\"comment\"> * that are accessed with the get() and set() functions.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#__fops\">__fops</a>, <a class=\"id\" href=\"#__get\">__get</a>, <a class=\"id\" href=\"#__set\">__set</a>, <a class=\"id\" href=\"#__fmt\">__fmt</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"static int <a class=\"id\" href=\"#__fops\">__fops</a> ## <a class=\"id\" href=\"#_open\">_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)<span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__simple_attr_check_format\">__simple_attr_check_format</a>(<a class=\"id\" href=\"#__fmt\">__fmt</a>, 0ull);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#simple_attr_open\">simple_attr_open</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#__get\">__get</a>, <a class=\"id\" href=\"#__set\">__set</a>, <a class=\"id\" href=\"#__fmt\">__fmt</a>);<span class=\"ts\"/>\\", 
"}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#__fops\">__fops</a> = {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a><span class=\"ts\"/> = <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/> = <a class=\"id\" href=\"#__fops\">__fops</a> ## <a class=\"id\" href=\"#_open\">_open</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#simple_attr_release\">simple_attr_release</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/> = <a class=\"id\" href=\"#simple_attr_read\">simple_attr_read</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/> = <a class=\"id\" href=\"#simple_attr_write\">simple_attr_write</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#format\">format</a>(<a class=\"id\" href=\"#printf\">printf</a>, 1, 2)))", 
"<a class=\"id\" href=\"#__simple_attr_check_format\">__simple_attr_check_format</a>(const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* don't do anything, just let the compiler check the arguments; */</span>", 
"}", 
"", 
"int <a class=\"id\" href=\"#simple_attr_open\">simple_attr_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     int (*<a class=\"id\" href=\"#get\">get</a>)(void *, <a class=\"id\" href=\"#u64\">u64</a> *), int (*<a class=\"id\" href=\"#set\">set</a>)(void *, <a class=\"id\" href=\"#u64\">u64</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>     const char *<a class=\"id\" href=\"#fmt\">fmt</a>);", 
"int <a class=\"id\" href=\"#simple_attr_release\">simple_attr_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#simple_attr_read\">simple_attr_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#simple_attr_write\">simple_attr_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>);", 
"", 
"struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a>;", 
"int <a class=\"id\" href=\"#proc_nr_files\">proc_nr_files</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>);", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#get_filesystem_list\">get_filesystem_list</a>(char *<a class=\"id\" href=\"#buf\">buf</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACC_MODE\">ACC_MODE</a>(<a class=\"id\" href=\"#x\">x</a>) (\"\\004\\002\\006\\006\"[(<a class=\"id\" href=\"#x\">x</a>)&amp;<a class=\"id\" href=\"#O_ACCMODE\">O_ACCMODE</a>])", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OPEN_FMODE\">OPEN_FMODE</a>(<a class=\"id\" href=\"#flag\">flag</a>) ((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#fmode_t\">fmode_t</a>)(((<a class=\"id\" href=\"#flag\">flag</a> + 1) &amp; <a class=\"id\" href=\"#O_ACCMODE\">O_ACCMODE</a>) | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#flag\">flag</a> &amp; <a class=\"id\" href=\"#FMODE_NONOTIFY\">FMODE_NONOTIFY</a>)))", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_FS_H */</span>", 
];
xr_frag_insert('l/2a/643521d29b606392e7f7c38d179a5c75874f36.xr', __xr_tmp);
