var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: dsmethod - Parser/Interpreter interface - control method parsing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"amlcode.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acdispat.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acinterp.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acnamesp.h\"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DISASSEMBLER\">ACPI_DISASSEMBLER</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acdisasm\">acdisasm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_DISPATCHER\">ACPI_DISPATCHER</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"dsmethod\")", 
"", 
"<span class=\"comment\">/* Local prototypes */</span>", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ds_create_method_mutex\">acpi_ds_create_method_mutex</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#method_desc\">method_desc</a>);", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ds_method_error</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Status          - Execution status</span>", 
"<span class=\"comment\"> *              walk_state      - Current state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Called on method error. Invoke the global exception handler if</span>", 
"<span class=\"comment\"> *              present, dump the method data if the disassembler is configured</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *              Note: Allows the exception handler to change the status code</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ds_method_error\">acpi_ds_method_error</a>(<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>, struct <a class=\"id\" href=\"#acpi_walk_state\">acpi_walk_state</a> *<a class=\"id\" href=\"#walk_state\">walk_state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ignore AE_OK and control exception codes */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>) || (<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#AE_CODE_CONTROL\">AE_CODE_CONTROL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Invoke the global exception handler */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_exception_handler\">acpi_gbl_exception_handler</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Exit the interpreter, allow handler to execute methods */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ex_exit_interpreter\">acpi_ex_exit_interpreter</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Handler can map the exception code to anything it wants, including</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * AE_OK, in which case the executing method will not be aborted.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_gbl_exception_handler\">acpi_gbl_exception_handler</a>(<a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#method_node\">method_node</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#method_node\">method_node</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#name\">name</a>.<a class=\"id\" href=\"#integer\">integer</a> : 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#opcode\">opcode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#aml_offset\">aml_offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ex_enter_interpreter\">acpi_ex_enter_interpreter</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ds_clear_implicit_return\">acpi_ds_clear_implicit_return</a>(<a class=\"id\" href=\"#walk_state\">walk_state</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ACPI_DISASSEMBLER\">ACPI_DISASSEMBLER</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Display method locals/args if disassembler is present */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_dm_dump_method_info\">acpi_dm_dump_method_info</a>(<a class=\"id\" href=\"#status\">status</a>, <a class=\"id\" href=\"#walk_state\">walk_state</a>, <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#op\">op</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ds_create_method_mutex</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  obj_desc            - The method object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Create a mutex object for a serialized control method</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ds_create_method_mutex\">acpi_ds_create_method_mutex</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#method_desc\">method_desc</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#mutex_desc\">mutex_desc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ds_create_method_mutex\">ds_create_method_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Create the new mutex object */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_desc\">mutex_desc</a> = <a class=\"id\" href=\"#acpi_ut_create_internal_object\">acpi_ut_create_internal_object</a>(<a class=\"id\" href=\"#ACPI_TYPE_MUTEX\">ACPI_TYPE_MUTEX</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mutex_desc\">mutex_desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Create the actual OS Mutex */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_os_create_mutex\">acpi_os_create_mutex</a>(&amp;<a class=\"id\" href=\"#mutex_desc\">mutex_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#os_mutex\">os_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_desc\">mutex_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#sync_level\">sync_level</a> = <a class=\"id\" href=\"#method_desc\">method_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#sync_level\">sync_level</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#method_desc\">method_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a> = <a class=\"id\" href=\"#mutex_desc\">mutex_desc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ds_begin_method_execution</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  method_node         - Node of the method</span>", 
"<span class=\"comment\"> *              obj_desc            - The method object</span>", 
"<span class=\"comment\"> *              walk_state          - current state, NULL if not yet executing</span>", 
"<span class=\"comment\"> *                                    a method.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Prepare a method for execution.  Parses the method if necessary,</span>", 
"<span class=\"comment\"> *              increments the thread count, and waits at the method semaphore</span>", 
"<span class=\"comment\"> *              for clearance to execute.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ds_begin_method_execution\">acpi_ds_begin_method_execution</a>(struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#method_node\">method_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc\">obj_desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#acpi_walk_state\">acpi_walk_state</a> *<a class=\"id\" href=\"#walk_state\">walk_state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE_PTR\">ACPI_FUNCTION_TRACE_PTR</a>(<a class=\"id\" href=\"#ds_begin_method_execution\">ds_begin_method_execution</a>, <a class=\"id\" href=\"#method_node\">method_node</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#method_node\">method_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NULL_ENTRY\">AE_NULL_ENTRY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Prevent wraparound of thread count */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#thread_count\">thread_count</a> == <a class=\"id\" href=\"#ACPI_UINT8_MAX\">ACPI_UINT8_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Method reached maximum reentrancy limit (255)\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_AML_METHOD_LIMIT\">AE_AML_METHOD_LIMIT</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this method is serialized, we need to acquire the method mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#method_flags\">method_flags</a> &amp; <a class=\"id\" href=\"#AML_METHOD_SERIALIZED\">AML_METHOD_SERIALIZED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Create a mutex for the method if it is defined to be Serialized</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and a mutex has not already been created. We defer the mutex creation</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * until a method is actually executed, to minimize the object count</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ds_create_method_mutex\">acpi_ds_create_method_mutex</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The current_sync_level (per-thread) must be less than or equal to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the sync level of the method. This mechanism provides some</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * deadlock prevention</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Top-level method invocation has no walk state at this point</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#walk_state\">walk_state</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#current_sync_level\">current_sync_level</a> &gt;", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#sync_level\">sync_level</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Cannot acquire Mutex for method [%4.4s], current SyncLevel is too large (%u)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_get_node_name\">acpi_ut_get_node_name</a>(<a class=\"id\" href=\"#method_node\">method_node</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#current_sync_level\">current_sync_level</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_AML_MUTEX_ORDER\">AE_AML_MUTEX_ORDER</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Obtain the method mutex if necessary. Do not acquire mutex for a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * recursive call.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#walk_state\">walk_state</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#thread_id\">thread_id</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#thread_id\">thread_id</a> !=", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#thread_id\">thread_id</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Acquire the method mutex. This releases the interpreter if we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * block (and reacquires it before it returns)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ex_system_wait_mutex\">acpi_ex_system_wait_mutex</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#os_mutex\">os_mutex</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ACPI_WAIT_FOREVER\">ACPI_WAIT_FOREVER</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Update the mutex and walk info and save the original sync_level */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#walk_state\">walk_state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#original_sync_level\">original_sync_level</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#current_sync_level\">current_sync_level</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#thread_id\">thread_id</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#thread_id\">thread_id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#current_sync_level\">current_sync_level</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#sync_level\">sync_level</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#original_sync_level\">original_sync_level</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#sync_level\">sync_level</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Always increase acquisition depth */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#acquisition_depth\">acquisition_depth</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allocate an Owner ID for this method, only if this is the first thread</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to begin concurrent execution. We only need one owner_id, even if the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * method is invoked recursively.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#owner_id\">owner_id</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_allocate_owner_id\">acpi_ut_allocate_owner_id</a>(&amp;<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#owner_id\">owner_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Increment the method parse tree thread count since it has been</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reentered one more time (even if it is the same thread)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#thread_count\">thread_count</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"", 
"      <a class=\"id\" href=\"#cleanup\">cleanup</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* On error, must release the method mutex (if present) */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_release_mutex\">acpi_os_release_mutex</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#os_mutex\">os_mutex</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ds_call_control_method</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Thread              - Info for this thread</span>", 
"<span class=\"comment\"> *              this_walk_state     - Current walk state</span>", 
"<span class=\"comment\"> *              Op                  - Current Op to be walked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Transfer execution to a called control method</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ds_call_control_method\">acpi_ds_call_control_method</a>(struct <a class=\"id\" href=\"#acpi_thread_state\">acpi_thread_state</a> *<a class=\"id\" href=\"#thread\">thread</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#acpi_walk_state\">acpi_walk_state</a> *<a class=\"id\" href=\"#this_walk_state\">this_walk_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#method_node\">method_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_walk_state\">acpi_walk_state</a> *<a class=\"id\" href=\"#next_walk_state\">next_walk_state</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc\">obj_desc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_evaluate_info\">acpi_evaluate_info</a> *<a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE_PTR\">ACPI_FUNCTION_TRACE_PTR</a>(<a class=\"id\" href=\"#ds_call_control_method\">ds_call_control_method</a>, <a class=\"id\" href=\"#this_walk_state\">this_walk_state</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_DISPATCH\">ACPI_DB_DISPATCH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Calling method %p, currentstate=%p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#this_walk_state\">this_walk_state</a>-><a class=\"id\" href=\"#prev_op\">prev_op</a>, <a class=\"id\" href=\"#this_walk_state\">this_walk_state</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get the namespace entry for the control method we are about to call</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#method_node\">method_node</a> = <a class=\"id\" href=\"#this_walk_state\">this_walk_state</a>-><a class=\"id\" href=\"#method_call_node\">method_call_node</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#method_node\">method_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NULL_ENTRY\">AE_NULL_ENTRY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a> = <a class=\"id\" href=\"#acpi_ns_get_attached_object\">acpi_ns_get_attached_object</a>(<a class=\"id\" href=\"#method_node\">method_node</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#obj_desc\">obj_desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NULL_OBJECT\">AE_NULL_OBJECT</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Init for new method, possibly wait on method mutex */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ds_begin_method_execution\">acpi_ds_begin_method_execution</a>(<a class=\"id\" href=\"#method_node\">method_node</a>, <a class=\"id\" href=\"#obj_desc\">obj_desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_walk_state\">this_walk_state</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Begin method parse/execution. Create a new walk state */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_walk_state\">next_walk_state</a> = <a class=\"id\" href=\"#acpi_ds_create_walk_state\">acpi_ds_create_walk_state</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#owner_id\">owner_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#obj_desc\">obj_desc</a>, <a class=\"id\" href=\"#thread\">thread</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#next_walk_state\">next_walk_state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The resolved arguments were put on the previous walk state's operand</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stack. Operands on the previous walk state stack always</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * start at index 0. Also, null terminate the list of arguments</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_walk_state\">this_walk_state</a>-><a class=\"id\" href=\"#operands\">operands</a>[<a class=\"id\" href=\"#this_walk_state\">this_walk_state</a>-><a class=\"id\" href=\"#num_operands\">num_operands</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allocate and initialize the evaluation information block</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TBD: this is somewhat inefficient, should change interface to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ds_init_aml_walk. For now, keeps this struct off the CPU stack</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#ACPI_ALLOCATE_ZEROED\">ACPI_ALLOCATE_ZEROED</a>(sizeof(struct <a class=\"id\" href=\"#acpi_evaluate_info\">acpi_evaluate_info</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#info\">info</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#parameters\">parameters</a> = &amp;<a class=\"id\" href=\"#this_walk_state\">this_walk_state</a>-><a class=\"id\" href=\"#operands\">operands</a>[0];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ds_init_aml_walk\">acpi_ds_init_aml_walk</a>(<a class=\"id\" href=\"#next_walk_state\">next_walk_state</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#method_node\">method_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#aml_start\">aml_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#aml_length\">aml_length</a>, <a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ACPI_IMODE_EXECUTE\">ACPI_IMODE_EXECUTE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Delete the operands on the previous walkstate operand stack</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (they were copied to new objects)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#param_count\">param_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_remove_reference\">acpi_ut_remove_reference</a>(<a class=\"id\" href=\"#this_walk_state\">this_walk_state</a>-><a class=\"id\" href=\"#operands\">operands</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_walk_state\">this_walk_state</a>-><a class=\"id\" href=\"#operands\">operands</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear the operand stack */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_walk_state\">this_walk_state</a>-><a class=\"id\" href=\"#num_operands\">num_operands</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_DISPATCH\">ACPI_DB_DISPATCH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"**** Begin nested execution of [%4.4s] **** WalkState=%p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#method_node\">method_node</a>-><a class=\"id\" href=\"#name\">name</a>.<a class=\"id\" href=\"#ascii\">ascii</a>, <a class=\"id\" href=\"#next_walk_state\">next_walk_state</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Invoke an internal method if necessary */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#method_flags\">method_flags</a> &amp; <a class=\"id\" href=\"#AML_METHOD_INTERNAL_ONLY\">AML_METHOD_INTERNAL_ONLY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#extra\">extra</a>.<a class=\"id\" href=\"#implementation\">implementation</a>(<a class=\"id\" href=\"#next_walk_state\">next_walk_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == <a class=\"id\" href=\"#AE_OK\">AE_OK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_CTRL_TERMINATE\">AE_CTRL_TERMINATE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"", 
"      <a class=\"id\" href=\"#cleanup\">cleanup</a>:", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* On error, we must terminate the method properly */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ds_terminate_control_method\">acpi_ds_terminate_control_method</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>, <a class=\"id\" href=\"#next_walk_state\">next_walk_state</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next_walk_state\">next_walk_state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ds_delete_walk_state\">acpi_ds_delete_walk_state</a>(<a class=\"id\" href=\"#next_walk_state\">next_walk_state</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ds_restart_control_method</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  walk_state          - State for preempted method (caller)</span>", 
"<span class=\"comment\"> *              return_desc         - Return value from the called method</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Restart a method that was preempted by another (nested) method</span>", 
"<span class=\"comment\"> *              invocation.  Handle the return value (if any) from the callee.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ds_restart_control_method\">acpi_ds_restart_control_method</a>(struct <a class=\"id\" href=\"#acpi_walk_state\">acpi_walk_state</a> *<a class=\"id\" href=\"#walk_state\">walk_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#return_desc\">return_desc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#same_as_implicit_return\">same_as_implicit_return</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE_PTR\">ACPI_FUNCTION_TRACE_PTR</a>(<a class=\"id\" href=\"#ds_restart_control_method\">ds_restart_control_method</a>, <a class=\"id\" href=\"#walk_state\">walk_state</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_DISPATCH\">ACPI_DB_DISPATCH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"****Restart [%4.4s] Op %p ReturnValueFromCallee %p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ut_get_node_name\">acpi_ut_get_node_name</a>(<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#method_node\">method_node</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#method_call_op\">method_call_op</a>, <a class=\"id\" href=\"#return_desc\">return_desc</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_DISPATCH\">ACPI_DB_DISPATCH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"    ReturnFromThisMethodUsed?=%X ResStack %p Walk %p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#return_used\">return_used</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#results\">results</a>, <a class=\"id\" href=\"#walk_state\">walk_state</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Did the called method return a value? */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#return_desc\">return_desc</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Is the implicit return object the same as the return desc? */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#same_as_implicit_return\">same_as_implicit_return</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#implicit_return_obj\">implicit_return_obj</a> == <a class=\"id\" href=\"#return_desc\">return_desc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Are we actually going to use the return value? */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#return_used\">return_used</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Save the return value from the previous method */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ds_result_push\">acpi_ds_result_push</a>(<a class=\"id\" href=\"#return_desc\">return_desc</a>, <a class=\"id\" href=\"#walk_state\">walk_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_remove_reference\">acpi_ut_remove_reference</a>(<a class=\"id\" href=\"#return_desc\">return_desc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Save as THIS method's return value in case it is returned</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * immediately to yet another method</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#return_desc\">return_desc</a> = <a class=\"id\" href=\"#return_desc\">return_desc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The following code is the optional support for the so-called</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * \"implicit return\". Some AML code assumes that the last value of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * method is \"implicitly\" returned to the caller, in the absence of an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * explicit return value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Just save the last result of the method as the return value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * NOTE: this is optional because the ASL language does not actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * support this behavior.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (!<a class=\"id\" href=\"#acpi_ds_do_implicit_return\">acpi_ds_do_implicit_return</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#return_desc\">return_desc</a>, <a class=\"id\" href=\"#walk_state\">walk_state</a>, <a class=\"id\" href=\"#FALSE\">FALSE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> || <a class=\"id\" href=\"#same_as_implicit_return\">same_as_implicit_return</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Delete the return value if it will not be used by the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * calling method or remove one reference if the explicit return</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * is the same as the implicit return value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_remove_reference\">acpi_ut_remove_reference</a>(<a class=\"id\" href=\"#return_desc\">return_desc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ds_terminate_control_method</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  method_desc         - Method object</span>", 
"<span class=\"comment\"> *              walk_state          - State associated with the method</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Terminate a control method.  Delete everything that the method</span>", 
"<span class=\"comment\"> *              created, delete all locals and arguments, and delete the parse</span>", 
"<span class=\"comment\"> *              tree if requested.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * MUTEX:       Interpreter is locked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void", 
"<a class=\"id\" href=\"#acpi_ds_terminate_control_method\">acpi_ds_terminate_control_method</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#method_desc\">method_desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#acpi_walk_state\">acpi_walk_state</a> *<a class=\"id\" href=\"#walk_state\">walk_state</a>)", 
"{", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE_PTR\">ACPI_FUNCTION_TRACE_PTR</a>(<a class=\"id\" href=\"#ds_terminate_control_method\">ds_terminate_control_method</a>, <a class=\"id\" href=\"#walk_state\">walk_state</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* method_desc is required, walk_state is optional */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#method_desc\">method_desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#walk_state\">walk_state</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Delete all arguments and locals */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ds_method_data_delete_all\">acpi_ds_method_data_delete_all</a>(<a class=\"id\" href=\"#walk_state\">walk_state</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If method is serialized, release the mutex and restore the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * current sync level for this thread</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#method_desc\">method_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Acquisition Depth handles recursive calls */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#method_desc\">method_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#acquisition_depth\">acquisition_depth</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#method_desc\">method_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#acquisition_depth\">acquisition_depth</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#current_sync_level\">current_sync_level</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#method_desc\">method_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#original_sync_level\">original_sync_level</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_release_mutex\">acpi_os_release_mutex</a>(<a class=\"id\" href=\"#method_desc\">method_desc</a>-><a class=\"id\" href=\"#method\">method</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#mutex\">mutex</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#os_mutex\">os_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#method_desc\">method_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#thread_id\">thread_id</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Delete any namespace objects created anywhere within the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * namespace by the execution of this method. Unless this method</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is a module-level executable code method, in which case we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * want make the objects permanent.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#method_desc\">method_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#AOPOBJ_MODULE_LEVEL\">AOPOBJ_MODULE_LEVEL</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Delete any direct children of (created by) this method */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ns_delete_namespace_subtree\">acpi_ns_delete_namespace_subtree</a>(<a class=\"id\" href=\"#walk_state\">walk_state</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#method_node\">method_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Delete any objects that were created by this method</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * elsewhere in the namespace (if any were created).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#method_desc\">method_desc</a>-><a class=\"id\" href=\"#method\">method</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#AOPOBJ_MODIFIED_NAMESPACE\">AOPOBJ_MODIFIED_NAMESPACE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ns_delete_namespace_by_owner\">acpi_ns_delete_namespace_by_owner</a>(<a class=\"id\" href=\"#method_desc\">method_desc</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#method\">method</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#owner_id\">owner_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Decrement the thread count on the method */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#method_desc\">method_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#thread_count\">thread_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#method_desc\">method_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#thread_count\">thread_count</a>--;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Invalid zero thread count in method\"));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Are there any other threads currently executing this method? */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#method_desc\">method_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#thread_count\">thread_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Additional threads. Do not release the owner_id in this case,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we immediately reuse it for the next thread executing this method</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_DISPATCH\">ACPI_DB_DISPATCH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"*** Completed execution of one thread, %u threads remaining\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#method_desc\">method_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#thread_count\">thread_count</a>));", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is the only executing thread for this method */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Support to dynamically change a method from not_serialized to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Serialized if it appears that the method is incorrectly written and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * does not support multiple thread execution. The best example of this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is if such a method creates namespace objects and blocks. A second</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * thread will fail with an AE_ALREADY_EXISTS exception</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This code is here because we must wait until the last thread exits</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * before creating the synchronization semaphore.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#method_desc\">method_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#method_flags\">method_flags</a> &amp; <a class=\"id\" href=\"#AML_METHOD_SERIALIZED\">AML_METHOD_SERIALIZED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    && (!<a class=\"id\" href=\"#method_desc\">method_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#mutex\">mutex</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ds_create_method_mutex\">acpi_ds_create_method_mutex</a>(<a class=\"id\" href=\"#method_desc\">method_desc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No more threads, we can free the owner_id */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#method_desc\">method_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#AOPOBJ_MODULE_LEVEL\">AOPOBJ_MODULE_LEVEL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_release_owner_id\">acpi_ut_release_owner_id</a>(&amp;<a class=\"id\" href=\"#method_desc\">method_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#owner_id\">owner_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"}", 
];
xr_frag_insert('l/2a/a2a106e9978d2d5cadfd9202ac94b0c822e343.xr', __xr_tmp);
