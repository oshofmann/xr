var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mm/readahead.c - address_space-level file readahead.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2002, Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 09Apr2002<span class=\"ts\"/>Andrew Morton</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Initial version.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#backing\">backing</a>-<a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#task_io_accounting_ops\">task_io_accounting_ops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagevec\">pagevec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialise a struct file's readahead state.  Assumes that the caller has</span>", 
"<span class=\"comment\"> * memset *ra to zero.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#file_ra_state_init\">file_ra_state_init</a>(struct <a class=\"id\" href=\"#file_ra_state\">file_ra_state</a> *<a class=\"id\" href=\"#ra\">ra</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#ra_pages\">ra_pages</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>-><a class=\"id\" href=\"#ra_pages\">ra_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#prev_pos\">prev_pos</a> = -1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#file_ra_state_init\">file_ra_state_init</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#list_to_page\">list_to_page</a>(<a class=\"id\" href=\"#head\">head</a>) (<a class=\"id\" href=\"#list_entry\">list_entry</a>((<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * see if a page needs releasing upon read_cache_pages() failure</span>", 
"<span class=\"comment\"> * - the caller of read_cache_pages() may have set PG_private or PG_fscache</span>", 
"<span class=\"comment\"> *   before calling, such as the NFS fs marking pages that are cached locally</span>", 
"<span class=\"comment\"> *   on disk, thus we need to give the fs a chance to clean up in the event of</span>", 
"<span class=\"comment\"> *   an error</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#read_cache_pages_invalidate_page\">read_cache_pages_invalidate_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_has_private\">page_has_private</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#trylock_page\">trylock_page</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_invalidatepage\">do_invalidatepage</a>(<a class=\"id\" href=\"#page\">page</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * release a list of pages, invalidating them first if need be</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#read_cache_pages_invalidate_pages\">read_cache_pages_invalidate_pages</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#victim\">victim</a>;", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#pages\">pages</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#victim\">victim</a> = <a class=\"id\" href=\"#list_to_page\">list_to_page</a>(<a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#victim\">victim</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_cache_pages_invalidate_page\">read_cache_pages_invalidate_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#victim\">victim</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * read_cache_pages - populate an address space with some pages &amp; start reads against them</span>", 
"<span class=\"comment\"> * @mapping: the address_space</span>", 
"<span class=\"comment\"> * @pages: The address of a list_head which contains the target pages.  These</span>", 
"<span class=\"comment\"> *   pages have their -&gt;index populated and are otherwise uninitialised.</span>", 
"<span class=\"comment\"> * @filler: callback routine for filling a single page.</span>", 
"<span class=\"comment\"> * @data: private data for the callback routine.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Hides the details of the LRU cache etc from the filesystems.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#read_cache_pages\">read_cache_pages</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pages\">pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#filler\">filler</a>)(void *, struct <a class=\"id\" href=\"#page\">page</a> *), void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#pages\">pages</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#list_to_page\">list_to_page</a>(<a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#add_to_page_cache_lru\">add_to_page_cache_lru</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_cache_pages_invalidate_page\">read_cache_pages_invalidate_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#filler\">filler</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_cache_pages_invalidate_pages\">read_cache_pages_invalidate_pages</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_io_account_read\">task_io_account_read</a>(<a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#read_cache_pages\">read_cache_pages</a>);", 
"", 
"static int <a class=\"id\" href=\"#read_pages\">read_pages</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pages\">pages</a>, unsigned <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#page_idx\">page_idx</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#readpages\">readpages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#readpages\">readpages</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Clean up the remaining pages */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_pages_list\">put_pages_list</a>(<a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#page_idx\">page_idx</a> = 0; <a class=\"id\" href=\"#page_idx\">page_idx</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#page_idx\">page_idx</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#list_to_page\">list_to_page</a>(<a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#add_to_page_cache_lru\">add_to_page_cache_lru</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#readpage\">readpage</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * __do_page_cache_readahead() actually reads a chunk of disk.  It allocates all</span>", 
"<span class=\"comment\"> * the pages first, then submits them all for I/O. This avoids the very bad</span>", 
"<span class=\"comment\"> * behaviour which would occur if page allocations are causing VM writeback.</span>", 
"<span class=\"comment\"> * We really don't want to intermingle reads and writes like that.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the number of pages requested, or the maximum amount of I/O allowed.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#__do_page_cache_readahead\">__do_page_cache_readahead</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, unsigned long <a class=\"id\" href=\"#nr_to_read\">nr_to_read</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#lookahead_size\">lookahead_size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end_index\">end_index</a>;<span class=\"ts\"/><span class=\"comment\">/* The last page we want to read */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#page_pool\">page_pool</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#page_idx\">page_idx</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#isize\">isize</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#isize\">isize</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_index\">end_index</a> = ((<a class=\"id\" href=\"#isize\">isize</a> - 1) >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Preallocate as many pages as we will need.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#page_idx\">page_idx</a> = 0; <a class=\"id\" href=\"#page_idx\">page_idx</a> &lt; <a class=\"id\" href=\"#nr_to_read\">nr_to_read</a>; <a class=\"id\" href=\"#page_idx\">page_idx</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#page_offset\">page_offset</a> = <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#page_idx\">page_idx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_offset\">page_offset</a> &gt; <a class=\"id\" href=\"#end_index\">end_index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#radix_tree_lookup\">radix_tree_lookup</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#page_tree\">page_tree</a>, <a class=\"id\" href=\"#page_offset\">page_offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#page_cache_alloc_cold\">page_cache_alloc_cold</a>(<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#page_offset\">page_offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#page_pool\">page_pool</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_idx\">page_idx</a> == <a class=\"id\" href=\"#nr_to_read\">nr_to_read</a> - <a class=\"id\" href=\"#lookahead_size\">lookahead_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageReadahead\">SetPageReadahead</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now start the IO.  We ignore I/O errors - if the page is not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * uptodate then the caller will launch readpage again, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will then handle the error.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_pages\">read_pages</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#filp\">filp</a>, &amp;<a class=\"id\" href=\"#page_pool\">page_pool</a>, <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#page_pool\">page_pool</a>));", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Chunk the readahead into 2 megabyte units, so that we don't pin too much</span>", 
"<span class=\"comment\"> * memory at once.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#force_page_cache_readahead\">force_page_cache_readahead</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, unsigned long <a class=\"id\" href=\"#nr_to_read\">nr_to_read</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#readpage\">readpage</a> && !<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#readpages\">readpages</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_to_read\">nr_to_read</a> = <a class=\"id\" href=\"#max_sane_readahead\">max_sane_readahead</a>(<a class=\"id\" href=\"#nr_to_read\">nr_to_read</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr_to_read\">nr_to_read</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#this_chunk\">this_chunk</a> = (2 * 1024 * 1024) / <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#this_chunk\">this_chunk</a> &gt; <a class=\"id\" href=\"#nr_to_read\">nr_to_read</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_chunk\">this_chunk</a> = <a class=\"id\" href=\"#nr_to_read\">nr_to_read</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__do_page_cache_readahead\">__do_page_cache_readahead</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#this_chunk\">this_chunk</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#this_chunk\">this_chunk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_to_read\">nr_to_read</a> -= <a class=\"id\" href=\"#this_chunk\">this_chunk</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Given a desired number of PAGE_CACHE_SIZE readahead pages, return a</span>", 
"<span class=\"comment\"> * sensible upper limit.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#max_sane_readahead\">max_sane_readahead</a>(unsigned long <a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#nr\">nr</a>, (<a class=\"id\" href=\"#node_page_state\">node_page_state</a>(<a class=\"id\" href=\"#numa_node_id\">numa_node_id</a>(), <a class=\"id\" href=\"#NR_INACTIVE_FILE\">NR_INACTIVE_FILE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#node_page_state\">node_page_state</a>(<a class=\"id\" href=\"#numa_node_id\">numa_node_id</a>(), <a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>)) / 2);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Submit IO for the read-ahead request in file_ra_state.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#ra_submit\">ra_submit</a>(struct <a class=\"id\" href=\"#file_ra_state\">file_ra_state</a> *<a class=\"id\" href=\"#ra\">ra</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#actual\">actual</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#actual\">actual</a> = <a class=\"id\" href=\"#__do_page_cache_readahead\">__do_page_cache_readahead</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#async_size\">async_size</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#actual\">actual</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set the initial window size, round to next power of 2 and square</span>", 
"<span class=\"comment\"> * for small size, x 4 for medium, and x 2 for large</span>", 
"<span class=\"comment\"> * for 128k (32 page) max ra</span>", 
"<span class=\"comment\"> * 1-8 page = 32k initial, &gt; 8 page = 128k initial</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#get_init_ra_size\">get_init_ra_size</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#max\">max</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#newsize\">newsize</a> = <a class=\"id\" href=\"#roundup_pow_of_two\">roundup_pow_of_two</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#newsize\">newsize</a> <= <a class=\"id\" href=\"#max\">max</a> / 32)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newsize\">newsize</a> = <a class=\"id\" href=\"#newsize\">newsize</a> * 4;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#newsize\">newsize</a> <= <a class=\"id\" href=\"#max\">max</a> / 4)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newsize\">newsize</a> = <a class=\"id\" href=\"#newsize\">newsize</a> * 2;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newsize\">newsize</a> = <a class=\"id\" href=\"#max\">max</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#newsize\">newsize</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Get the previous window size, ramp it up, and</span>", 
"<span class=\"comment\"> *  return it as the new window size.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#get_next_ra_size\">get_next_ra_size</a>(struct <a class=\"id\" href=\"#file_ra_state\">file_ra_state</a> *<a class=\"id\" href=\"#ra\">ra</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max\">max</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#newsize\">newsize</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a> &lt; <a class=\"id\" href=\"#max\">max</a> / 16)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newsize\">newsize</a> = 4 * <a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newsize\">newsize</a> = 2 * <a class=\"id\" href=\"#cur\">cur</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#newsize\">newsize</a>, <a class=\"id\" href=\"#max\">max</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * On-demand readahead design.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The fields in struct file_ra_state represent the most-recently-executed</span>", 
"<span class=\"comment\"> * readahead attempt:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *                        |&lt;----- async_size ---------|</span>", 
"<span class=\"comment\"> *     |------------------- size --------------------&gt;|</span>", 
"<span class=\"comment\"> *     |==================#===========================|</span>", 
"<span class=\"comment\"> *     ^start             ^page marked with PG_readahead</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To overlap application thinking time and disk I/O time, we do</span>", 
"<span class=\"comment\"> * `readahead pipelining': Do not wait until the application consumed all</span>", 
"<span class=\"comment\"> * readahead pages and stalled on the missing page at readahead_index;</span>", 
"<span class=\"comment\"> * Instead, submit an asynchronous readahead I/O as soon as there are</span>", 
"<span class=\"comment\"> * only async_size pages left in the readahead window. Normally async_size</span>", 
"<span class=\"comment\"> * will be equal to size, for maximum pipelining.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In interleaved sequential reads, concurrent streams on the same fd can</span>", 
"<span class=\"comment\"> * be invalidating each other's readahead state. So we flag the new readahead</span>", 
"<span class=\"comment\"> * page at (start+size-async_size) with PG_readahead, and use it as readahead</span>", 
"<span class=\"comment\"> * indicator. The flag won't be set on already cached pages, to avoid the</span>", 
"<span class=\"comment\"> * readahead-for-nothing fuss, saving pointless page cache lookups.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * prev_pos tracks the last visited byte in the _previous_ read request.</span>", 
"<span class=\"comment\"> * It should be maintained by the caller, and will be used for detecting</span>", 
"<span class=\"comment\"> * small random reads. Note that the readahead algorithm checks loosely</span>", 
"<span class=\"comment\"> * for sequential patterns. Hence interleaved reads might be served as</span>", 
"<span class=\"comment\"> * sequential ones.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There is a special-case: if the first page which the application tries to</span>", 
"<span class=\"comment\"> * read happens to be the first page of the file, it is assumed that a linear</span>", 
"<span class=\"comment\"> * read is about to happen and the window is immediately set to the initial size</span>", 
"<span class=\"comment\"> * based on I/O request size and the max_readahead.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The code ramps up the readahead size aggressively at first, but slow down as</span>", 
"<span class=\"comment\"> * it approaches max_readhead.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Count contiguously cached pages from @offset-1 to @offset-@max,</span>", 
"<span class=\"comment\"> * this count is a conservative estimation of</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>- length of the sequential read sequence, or</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>- thrashing threshold in memory tight systems</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#count_history_pages\">count_history_pages</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#file_ra_state\">file_ra_state</a> *<a class=\"id\" href=\"#ra\">ra</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, unsigned long <a class=\"id\" href=\"#max\">max</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#radix_tree_prev_hole\">radix_tree_prev_hole</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#page_tree\">page_tree</a>, <a class=\"id\" href=\"#offset\">offset</a> - 1, <a class=\"id\" href=\"#max\">max</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#offset\">offset</a> - 1 - <a class=\"id\" href=\"#head\">head</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * page cache context based read-ahead</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#try_context_readahead\">try_context_readahead</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#file_ra_state\">file_ra_state</a> *<a class=\"id\" href=\"#ra\">ra</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#req_size\">req_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#max\">max</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#count_history_pages\">count_history_pages</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#ra\">ra</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#max\">max</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no history pages:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it could be a random read</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * starts from beginning of file:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it is a strong indication of long-run stream (or whole-file-read)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> >= <a class=\"id\" href=\"#offset\">offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> *= 2;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#get_init_ra_size\">get_init_ra_size</a>(<a class=\"id\" href=\"#size\">size</a> + <a class=\"id\" href=\"#req_size\">req_size</a>, <a class=\"id\" href=\"#max\">max</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#async_size\">async_size</a> = <a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A minimal readahead algorithm for trivial sequential/random reads.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long", 
"<a class=\"id\" href=\"#ondemand_readahead\">ondemand_readahead</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#file_ra_state\">file_ra_state</a> *<a class=\"id\" href=\"#ra\">ra</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#hit_readahead_marker\">hit_readahead_marker</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#req_size\">req_size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#max_sane_readahead\">max_sane_readahead</a>(<a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#ra_pages\">ra_pages</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * start of file</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#offset\">offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#initial_readahead\">initial_readahead</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It's the expected callback offset, assume sequential access.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ramp up sizes, and push forward the readahead window.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#offset\">offset</a> == (<a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#async_size\">async_size</a>) ||", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#offset\">offset</a> == (<a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#size\">size</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#start\">start</a> += <a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#get_next_ra_size\">get_next_ra_size</a>(<a class=\"id\" href=\"#ra\">ra</a>, <a class=\"id\" href=\"#max\">max</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#async_size\">async_size</a> = <a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#readit\">readit</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Hit a marked page without valid readahead state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * E.g. interleaved reads.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Query the pagecache for async_size, which normally equals to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * readahead size. Ramp it up and use it as the new readahead size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hit_readahead_marker\">hit_readahead_marker</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#radix_tree_next_hole\">radix_tree_next_hole</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#page_tree\">page_tree</a>, <a class=\"id\" href=\"#offset\">offset</a>+1,<a class=\"id\" href=\"#max\">max</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#start\">start</a> || <a class=\"id\" href=\"#start\">start</a> - <a class=\"id\" href=\"#offset\">offset</a> &gt; <a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#start\">start</a> - <a class=\"id\" href=\"#offset\">offset</a>;<span class=\"ts\"/><span class=\"comment\">/* old async_size */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#req_size\">req_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#get_next_ra_size\">get_next_ra_size</a>(<a class=\"id\" href=\"#ra\">ra</a>, <a class=\"id\" href=\"#max\">max</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#async_size\">async_size</a> = <a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#readit\">readit</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * oversize read</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req_size\">req_size</a> &gt; <a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#initial_readahead\">initial_readahead</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sequential cache miss</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> - (<a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#prev_pos\">prev_pos</a> >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>) <= 1UL)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#initial_readahead\">initial_readahead</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Query the page cache and look for the traces(cached history pages)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that a sequential stream would leave behind.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#try_context_readahead\">try_context_readahead</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#ra\">ra</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#req_size\">req_size</a>, <a class=\"id\" href=\"#max\">max</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#readit\">readit</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * standalone, small random read</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Read as is, and do not pollute the readahead state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__do_page_cache_readahead\">__do_page_cache_readahead</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#req_size\">req_size</a>, 0);", 
"", 
"<a class=\"id\" href=\"#initial_readahead\">initial_readahead</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#get_init_ra_size\">get_init_ra_size</a>(<a class=\"id\" href=\"#req_size\">req_size</a>, <a class=\"id\" href=\"#max\">max</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#async_size\">async_size</a> = <a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#req_size\">req_size</a> ? <a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#req_size\">req_size</a> : <a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<a class=\"id\" href=\"#readit\">readit</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Will this read hit the readahead marker made by itself?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If so, trigger the readahead marker hit now, and merge</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the resulted next readahead window into the current one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> == <a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#start\">start</a> && <a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#size\">size</a> == <a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#async_size\">async_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#async_size\">async_size</a> = <a class=\"id\" href=\"#get_next_ra_size\">get_next_ra_size</a>(<a class=\"id\" href=\"#ra\">ra</a>, <a class=\"id\" href=\"#max\">max</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#async_size\">async_size</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ra_submit\">ra_submit</a>(<a class=\"id\" href=\"#ra\">ra</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#filp\">filp</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * page_cache_sync_readahead - generic file readahead</span>", 
"<span class=\"comment\"> * @mapping: address_space which holds the pagecache and I/O vectors</span>", 
"<span class=\"comment\"> * @ra: file_ra_state which holds the readahead state</span>", 
"<span class=\"comment\"> * @filp: passed on to -&gt;readpage() and -&gt;readpages()</span>", 
"<span class=\"comment\"> * @offset: start offset into @mapping, in pagecache page-sized units</span>", 
"<span class=\"comment\"> * @req_size: hint: total size of the read which the caller is performing in</span>", 
"<span class=\"comment\"> *            pagecache pages</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * page_cache_sync_readahead() should be called when a cache miss happened:</span>", 
"<span class=\"comment\"> * it will submit the read.  The readahead logic may decide to piggyback more</span>", 
"<span class=\"comment\"> * pages onto the read request if access patterns suggest it will improve</span>", 
"<span class=\"comment\"> * performance.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#page_cache_sync_readahead\">page_cache_sync_readahead</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#file_ra_state\">file_ra_state</a> *<a class=\"id\" href=\"#ra\">ra</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, unsigned long <a class=\"id\" href=\"#req_size\">req_size</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* no read-ahead */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#ra_pages\">ra_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* be dumb */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a> && (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_RANDOM\">FMODE_RANDOM</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_page_cache_readahead\">force_page_cache_readahead</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#req_size\">req_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do read-ahead */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ondemand_readahead\">ondemand_readahead</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#ra\">ra</a>, <a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#false\">false</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#req_size\">req_size</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#page_cache_sync_readahead\">page_cache_sync_readahead</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * page_cache_async_readahead - file readahead for marked pages</span>", 
"<span class=\"comment\"> * @mapping: address_space which holds the pagecache and I/O vectors</span>", 
"<span class=\"comment\"> * @ra: file_ra_state which holds the readahead state</span>", 
"<span class=\"comment\"> * @filp: passed on to -&gt;readpage() and -&gt;readpages()</span>", 
"<span class=\"comment\"> * @page: the page at @offset which has the PG_readahead flag set</span>", 
"<span class=\"comment\"> * @offset: start offset into @mapping, in pagecache page-sized units</span>", 
"<span class=\"comment\"> * @req_size: hint: total size of the read which the caller is performing in</span>", 
"<span class=\"comment\"> *            pagecache pages</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * page_cache_async_readahead() should be called when a page is used which</span>", 
"<span class=\"comment\"> * has the PG_readahead flag; this is a marker to suggest that the application</span>", 
"<span class=\"comment\"> * has used up enough of the readahead window that we should start pulling in</span>", 
"<span class=\"comment\"> * more pages.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#page_cache_async_readahead\">page_cache_async_readahead</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#file_ra_state\">file_ra_state</a> *<a class=\"id\" href=\"#ra\">ra</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#req_size\">req_size</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* no read-ahead */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#ra_pages\">ra_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Same bit is used for PG_readahead and PG_reclaim.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageWriteback\">PageWriteback</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ClearPageReadahead\">ClearPageReadahead</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Defer asynchronous read-ahead on IO congestion.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdi_read_congested\">bdi_read_congested</a>(<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do read-ahead */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ondemand_readahead\">ondemand_readahead</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#ra\">ra</a>, <a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#true\">true</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#req_size\">req_size</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLOCK\">CONFIG_BLOCK</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Normally the current page is !uptodate and lock_page() will be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * immediately called to implicitly unplug the device. However this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is not always true for RAID conifgurations, where data arrives</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not strictly in their submission order. In this case we need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * explicitly kick off the IO.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_run_backing_dev\">blk_run_backing_dev</a>(<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#page_cache_async_readahead\">page_cache_async_readahead</a>);", 
];
xr_frag_insert('l/2a/c8b6228b113ed246f2259c1b15e42f54137b6c.xr', __xr_tmp);
