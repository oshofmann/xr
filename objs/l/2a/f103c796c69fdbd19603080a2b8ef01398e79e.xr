var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_owner\">fl_owner</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_pid\">fl_pid</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#tgid\">tgid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a> = <a class=\"id\" href=\"#filp\">filp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> = <a class=\"id\" href=\"#FL_POSIX\">FL_POSIX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_ops\">fl_ops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#l_type\">l_type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_RDLCK\">F_RDLCK</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_WRLCK\">F_WRLCK</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> = <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#l_type\">l_type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (0);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* default lease lock manager operations */</span>", 
"static void <a class=\"id\" href=\"#lease_break_callback\">lease_break_callback</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kill_fasync\">kill_fasync</a>(&amp;<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_fasync\">fl_fasync</a>, <a class=\"id\" href=\"#SIGIO\">SIGIO</a>, <a class=\"id\" href=\"#POLL_MSG\">POLL_MSG</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#lease_release_private_callback\">lease_release_private_callback</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f_delown\">f_delown</a>(<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#signum\">signum</a> = 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#lease_mylease_callback\">lease_mylease_callback</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#try\">try</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a> == <a class=\"id\" href=\"#try\">try</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#lock_manager_operations\">lock_manager_operations</a> <a class=\"id\" href=\"#lease_manager_ops\">lease_manager_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fl_break\">fl_break</a> = <a class=\"id\" href=\"#lease_break_callback\">lease_break_callback</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fl_release_private\">fl_release_private</a> = <a class=\"id\" href=\"#lease_release_private_callback\">lease_release_private_callback</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fl_mylease\">fl_mylease</a> = <a class=\"id\" href=\"#lease_mylease_callback\">lease_mylease_callback</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fl_change\">fl_change</a> = <a class=\"id\" href=\"#lease_modify\">lease_modify</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize a lease, use the default lock manager operations</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#lease_init\">lease_init</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, int <a class=\"id\" href=\"#type\">type</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
" {", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#assign_type\">assign_type</a>(<a class=\"id\" href=\"#fl\">fl</a>, <a class=\"id\" href=\"#type\">type</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_owner\">fl_owner</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_pid\">fl_pid</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#tgid\">tgid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a> = <a class=\"id\" href=\"#filp\">filp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> = <a class=\"id\" href=\"#FL_LEASE\">FL_LEASE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> = <a class=\"id\" href=\"#OFFSET_MAX\">OFFSET_MAX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_ops\">fl_ops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a> = &amp;<a class=\"id\" href=\"#lease_manager_ops\">lease_manager_ops</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Allocate a file_lock initialised to this type of lease */</span>", 
"static struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#lease_alloc\">lease_alloc</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a> = <a class=\"id\" href=\"#locks_alloc_lock\">locks_alloc_lock</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#lease_init\">lease_init</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_free_lock\">locks_free_lock</a>(<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fl\">fl</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Check if two locks overlap each other.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#locks_overlap\">locks_overlap</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl1\">fl1</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl2\">fl2</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#fl1\">fl1</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> >= <a class=\"id\" href=\"#fl2\">fl2</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#fl2\">fl2</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> >= <a class=\"id\" href=\"#fl1\">fl1</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check whether two locks have the same owner.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#posix_same_owner\">posix_same_owner</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl1\">fl1</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl2\">fl2</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fl1\">fl1</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a> && <a class=\"id\" href=\"#fl1\">fl1</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a>-><a class=\"id\" href=\"#fl_compare_owner\">fl_compare_owner</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#fl2\">fl2</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a> == <a class=\"id\" href=\"#fl1\">fl1</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl1\">fl1</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a>-><a class=\"id\" href=\"#fl_compare_owner\">fl_compare_owner</a>(<a class=\"id\" href=\"#fl1\">fl1</a>, <a class=\"id\" href=\"#fl2\">fl2</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fl1\">fl1</a>-><a class=\"id\" href=\"#fl_owner\">fl_owner</a> == <a class=\"id\" href=\"#fl2\">fl2</a>-><a class=\"id\" href=\"#fl_owner\">fl_owner</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Remove waiter from blocker's block list.</span>", 
"<span class=\"comment\"> * When blocker ends up pointing to itself then the list is empty.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__locks_delete_block\">__locks_delete_block</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#waiter\">waiter</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#fl_block\">fl_block</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#fl_link\">fl_link</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#locks_delete_block\">locks_delete_block</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#waiter\">waiter</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__locks_delete_block\">__locks_delete_block</a>(<a class=\"id\" href=\"#waiter\">waiter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>();", 
"}", 
"", 
"<span class=\"comment\">/* Insert waiter into blocker's block list.</span>", 
"<span class=\"comment\"> * We use a circular list so that processes can be easily woken up in</span>", 
"<span class=\"comment\"> * the order they blocked. The documentation doesn't require this but</span>", 
"<span class=\"comment\"> * it seems like the reasonable thing to do.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#locks_insert_block\">locks_insert_block</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#blocker\">blocker</a>, ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#waiter\">waiter</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#fl_block\">fl_block</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#fl_block\">fl_block</a>, &amp;<a class=\"id\" href=\"#blocker\">blocker</a>-><a class=\"id\" href=\"#fl_block\">fl_block</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a> = <a class=\"id\" href=\"#blocker\">blocker</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_POSIX\">IS_POSIX</a>(<a class=\"id\" href=\"#blocker\">blocker</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#fl_link\">fl_link</a>, &amp;<a class=\"id\" href=\"#blocked_list\">blocked_list</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Wake up processes blocked waiting for blocker.</span>", 
"<span class=\"comment\"> * If told to wait then schedule the processes until the block list</span>", 
"<span class=\"comment\"> * is empty, otherwise empty the block list ourselves.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#locks_wake_up_blocks\">locks_wake_up_blocks</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#blocker\">blocker</a>)", 
"{", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#blocker\">blocker</a>-><a class=\"id\" href=\"#fl_block\">fl_block</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#waiter\">waiter</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#blocker\">blocker</a>-><a class=\"id\" href=\"#fl_block\">fl_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a>, <a class=\"id\" href=\"#fl_block\">fl_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__locks_delete_block\">__locks_delete_block</a>(<a class=\"id\" href=\"#waiter\">waiter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a> && <a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a>-><a class=\"id\" href=\"#fl_notify\">fl_notify</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a>-><a class=\"id\" href=\"#fl_notify\">fl_notify</a>(<a class=\"id\" href=\"#waiter\">waiter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#fl_wait\">fl_wait</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Insert file lock fl into an inode's lock list at the position indicated</span>", 
"<span class=\"comment\"> * by pos. At the same time add the lock to the global file lock list.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#locks_insert_lock\">locks_insert_lock</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> **<a class=\"id\" href=\"#pos\">pos</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_link\">fl_link</a>, &amp;<a class=\"id\" href=\"#file_lock_list\">file_lock_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_nspid\">fl_nspid</a> = <a class=\"id\" href=\"#get_pid\">get_pid</a>(<a class=\"id\" href=\"#task_tgid\">task_tgid</a>(<a class=\"id\" href=\"#current\">current</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* insert into file's list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a> = *<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#fl\">fl</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Delete a lock and then free it.</span>", 
"<span class=\"comment\"> * Wake up processes that are blocked waiting for this lock,</span>", 
"<span class=\"comment\"> * notify the FS that the lock has been cleared and</span>", 
"<span class=\"comment\"> * finally free the lock.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#locks_delete_lock\">locks_delete_lock</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> **<a class=\"id\" href=\"#thisfl_p\">thisfl_p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a> = *<a class=\"id\" href=\"#thisfl_p\">thisfl_p</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#thisfl_p\">thisfl_p</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_link\">fl_link</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fasync_helper\">fasync_helper</a>(0, <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a>, 0, &amp;<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_fasync\">fl_fasync</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_fasync\">fl_fasync</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"locks_delete_lock: fasync == %p\\n\", <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_fasync\">fl_fasync</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_fasync\">fl_fasync</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_nspid\">fl_nspid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_pid\">put_pid</a>(<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_nspid\">fl_nspid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_nspid\">fl_nspid</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locks_wake_up_blocks\">locks_wake_up_blocks</a>(<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locks_free_lock\">locks_free_lock</a>(<a class=\"id\" href=\"#fl\">fl</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Determine if lock sys_fl blocks lock caller_fl. Common functionality</span>", 
"<span class=\"comment\"> * checks for shared/exclusive status of overlapping locks.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#locks_conflict\">locks_conflict</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#caller_fl\">caller_fl</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#sys_fl\">sys_fl</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sys_fl\">sys_fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> == <a class=\"id\" href=\"#F_WRLCK\">F_WRLCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#caller_fl\">caller_fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> == <a class=\"id\" href=\"#F_WRLCK\">F_WRLCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Determine if lock sys_fl blocks lock caller_fl. POSIX specific</span>", 
"<span class=\"comment\"> * checking before calling the locks_conflict().</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#posix_locks_conflict\">posix_locks_conflict</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#caller_fl\">caller_fl</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#sys_fl\">sys_fl</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* POSIX locks owned by the same process do not conflict with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * each other.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_POSIX\">IS_POSIX</a>(<a class=\"id\" href=\"#sys_fl\">sys_fl</a>) || <a class=\"id\" href=\"#posix_same_owner\">posix_same_owner</a>(<a class=\"id\" href=\"#caller_fl\">caller_fl</a>, <a class=\"id\" href=\"#sys_fl\">sys_fl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return (0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check whether they overlap */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#locks_overlap\">locks_overlap</a>(<a class=\"id\" href=\"#caller_fl\">caller_fl</a>, <a class=\"id\" href=\"#sys_fl\">sys_fl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#locks_conflict\">locks_conflict</a>(<a class=\"id\" href=\"#caller_fl\">caller_fl</a>, <a class=\"id\" href=\"#sys_fl\">sys_fl</a>));", 
"}", 
"", 
"<span class=\"comment\">/* Determine if lock sys_fl blocks lock caller_fl. FLOCK specific</span>", 
"<span class=\"comment\"> * checking before calling the locks_conflict().</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#flock_locks_conflict\">flock_locks_conflict</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#caller_fl\">caller_fl</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#sys_fl\">sys_fl</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* FLOCK locks referring to the same filp do not conflict with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * each other.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_FLOCK\">IS_FLOCK</a>(<a class=\"id\" href=\"#sys_fl\">sys_fl</a>) || (<a class=\"id\" href=\"#caller_fl\">caller_fl</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a> == <a class=\"id\" href=\"#sys_fl\">sys_fl</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return (0);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#caller_fl\">caller_fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; <a class=\"id\" href=\"#LOCK_MAND\">LOCK_MAND</a>) || (<a class=\"id\" href=\"#sys_fl\">sys_fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; <a class=\"id\" href=\"#LOCK_MAND\">LOCK_MAND</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#locks_conflict\">locks_conflict</a>(<a class=\"id\" href=\"#caller_fl\">caller_fl</a>, <a class=\"id\" href=\"#sys_fl\">sys_fl</a>));", 
"}", 
"", 
"void", 
"<a class=\"id\" href=\"#posix_test_lock\">posix_test_lock</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#cfl\">cfl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>();", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cfl\">cfl</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_flock\">i_flock</a>; <a class=\"id\" href=\"#cfl\">cfl</a>; <a class=\"id\" href=\"#cfl\">cfl</a> = <a class=\"id\" href=\"#cfl\">cfl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_POSIX\">IS_POSIX</a>(<a class=\"id\" href=\"#cfl\">cfl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#posix_locks_conflict\">posix_locks_conflict</a>(<a class=\"id\" href=\"#fl\">fl</a>, <a class=\"id\" href=\"#cfl\">cfl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfl\">cfl</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__locks_copy_lock\">__locks_copy_lock</a>(<a class=\"id\" href=\"#fl\">fl</a>, <a class=\"id\" href=\"#cfl\">cfl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cfl\">cfl</a>-><a class=\"id\" href=\"#fl_nspid\">fl_nspid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_pid\">fl_pid</a> = <a class=\"id\" href=\"#pid_vnr\">pid_vnr</a>(<a class=\"id\" href=\"#cfl\">cfl</a>-><a class=\"id\" href=\"#fl_nspid\">fl_nspid</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> = <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>();", 
"<span class=\"ts\"/>return;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#posix_test_lock\">posix_test_lock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Deadlock detection:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We attempt to detect deadlocks that are due purely to posix file</span>", 
"<span class=\"comment\"> * locks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We assume that a task can be waiting for at most one lock at a time.</span>", 
"<span class=\"comment\"> * So for any acquired lock, the process holding that lock may be</span>", 
"<span class=\"comment\"> * waiting on at most one other lock.  That lock in turns may be held by</span>", 
"<span class=\"comment\"> * someone waiting for at most one other lock.  Given a requested lock</span>", 
"<span class=\"comment\"> * caller_fl which is about to wait for a conflicting lock block_fl, we</span>", 
"<span class=\"comment\"> * follow this chain of waiters to ensure we are not about to create a</span>", 
"<span class=\"comment\"> * cycle.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Since we do this before we ever put a process to sleep on a lock, we</span>", 
"<span class=\"comment\"> * are ensured that there is never a cycle; that is what guarantees that</span>", 
"<span class=\"comment\"> * the while() loop in posix_locks_deadlock() eventually completes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: the above assumption may not be true when handling lock</span>", 
"<span class=\"comment\"> * requests from a broken NFS client. It may also fail in the presence</span>", 
"<span class=\"comment\"> * of tasks (such as posix threads) sharing the same open file table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To handle those cases, we just bail out after a few iterations.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_DEADLK_ITERATIONS\">MAX_DEADLK_ITERATIONS</a> 10", 
"", 
"<span class=\"comment\">/* Find a lock that the owner of the given block_fl is blocking on. */</span>", 
"static struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#what_owner_is_waiting_for\">what_owner_is_waiting_for</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#block_fl\">block_fl</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#fl\">fl</a>, &amp;<a class=\"id\" href=\"#blocked_list\">blocked_list</a>, <a class=\"id\" href=\"#fl_link\">fl_link</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#posix_same_owner\">posix_same_owner</a>(<a class=\"id\" href=\"#fl\">fl</a>, <a class=\"id\" href=\"#block_fl\">block_fl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#posix_locks_deadlock\">posix_locks_deadlock</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#caller_fl\">caller_fl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#block_fl\">block_fl</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 0;", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#block_fl\">block_fl</a> = <a class=\"id\" href=\"#what_owner_is_waiting_for\">what_owner_is_waiting_for</a>(<a class=\"id\" href=\"#block_fl\">block_fl</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>++ &gt; <a class=\"id\" href=\"#MAX_DEADLK_ITERATIONS\">MAX_DEADLK_ITERATIONS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#posix_same_owner\">posix_same_owner</a>(<a class=\"id\" href=\"#caller_fl\">caller_fl</a>, <a class=\"id\" href=\"#block_fl\">block_fl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Try to create a FLOCK lock on filp. We always insert new FLOCK locks</span>", 
"<span class=\"comment\"> * after any leases, but before any posix locks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that if called with an FL_EXISTS argument, the caller may determine</span>", 
"<span class=\"comment\"> * whether or not a lock was successfully freed by testing the return</span>", 
"<span class=\"comment\"> * value for -ENOENT.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#flock_lock_file\">flock_lock_file</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#request\">request</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#new_fl\">new_fl</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> **<a class=\"id\" href=\"#before\">before</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#found\">found</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> &amp; <a class=\"id\" href=\"#FL_ACCESS\">FL_ACCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#find_conflict\">find_conflict</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> != <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_fl\">new_fl</a> = <a class=\"id\" href=\"#locks_alloc_lock\">locks_alloc_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_fl\">new_fl</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_lock\">for_each_lock</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#before\">before</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a> = *<a class=\"id\" href=\"#before\">before</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_POSIX\">IS_POSIX</a>(<a class=\"id\" href=\"#fl\">fl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_LEASE\">IS_LEASE</a>(<a class=\"id\" href=\"#fl\">fl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a> != <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> == <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_delete_lock\">locks_delete_lock</a>(<a class=\"id\" href=\"#before\">before</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> == <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> &amp; <a class=\"id\" href=\"#FL_EXISTS\">FL_EXISTS</a>) && !<a class=\"id\" href=\"#found\">found</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If a higher-priority process was blocked on the old file lock,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * give it the opportunity to lock the file.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#found\">found</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"", 
"<a class=\"id\" href=\"#find_conflict\">find_conflict</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_lock\">for_each_lock</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#before\">before</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a> = *<a class=\"id\" href=\"#before\">before</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_POSIX\">IS_POSIX</a>(<a class=\"id\" href=\"#fl\">fl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_LEASE\">IS_LEASE</a>(<a class=\"id\" href=\"#fl\">fl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#flock_locks_conflict\">flock_locks_conflict</a>(<a class=\"id\" href=\"#request\">request</a>, <a class=\"id\" href=\"#fl\">fl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> &amp; <a class=\"id\" href=\"#FL_SLEEP\">FL_SLEEP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#FILE_LOCK_DEFERRED\">FILE_LOCK_DEFERRED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_insert_block\">locks_insert_block</a>(<a class=\"id\" href=\"#fl\">fl</a>, <a class=\"id\" href=\"#request\">request</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> &amp; <a class=\"id\" href=\"#FL_ACCESS\">FL_ACCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locks_copy_lock\">locks_copy_lock</a>(<a class=\"id\" href=\"#new_fl\">new_fl</a>, <a class=\"id\" href=\"#request\">request</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locks_insert_lock\">locks_insert_lock</a>(<a class=\"id\" href=\"#before\">before</a>, <a class=\"id\" href=\"#new_fl\">new_fl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_fl\">new_fl</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_fl\">new_fl</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_free_lock\">locks_free_lock</a>(<a class=\"id\" href=\"#new_fl\">new_fl</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__posix_lock_file\">__posix_lock_file</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#request\">request</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#conflock\">conflock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#new_fl\">new_fl</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#new_fl2\">new_fl2</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#right\">right</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> **<a class=\"id\" href=\"#before\">before</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#added\">added</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We may need two file_lock structures for this operation,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so we get them in advance to avoid races.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In some cases we can be sure, that no new locks will be needed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> &amp; <a class=\"id\" href=\"#FL_ACCESS\">FL_ACCESS</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> != <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a> ||", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> != 0 || <a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> != <a class=\"id\" href=\"#OFFSET_MAX\">OFFSET_MAX</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_fl\">new_fl</a> = <a class=\"id\" href=\"#locks_alloc_lock\">locks_alloc_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_fl2\">new_fl2</a> = <a class=\"id\" href=\"#locks_alloc_lock\">locks_alloc_lock</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> != <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_lock\">for_each_lock</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#before\">before</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a> = *<a class=\"id\" href=\"#before\">before</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_POSIX\">IS_POSIX</a>(<a class=\"id\" href=\"#fl\">fl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#posix_locks_conflict\">posix_locks_conflict</a>(<a class=\"id\" href=\"#request\">request</a>, <a class=\"id\" href=\"#fl\">fl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#conflock\">conflock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__locks_copy_lock\">__locks_copy_lock</a>(<a class=\"id\" href=\"#conflock\">conflock</a>, <a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> &amp; <a class=\"id\" href=\"#FL_SLEEP\">FL_SLEEP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EDEADLK\">EDEADLK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#posix_locks_deadlock\">posix_locks_deadlock</a>(<a class=\"id\" href=\"#request\">request</a>, <a class=\"id\" href=\"#fl\">fl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#FILE_LOCK_DEFERRED\">FILE_LOCK_DEFERRED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_insert_block\">locks_insert_block</a>(<a class=\"id\" href=\"#fl\">fl</a>, <a class=\"id\" href=\"#request\">request</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"  <span class=\"ts\"/><span class=\"ts\"/>}", 
"  <span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we're just looking for a conflict, we're done. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> &amp; <a class=\"id\" href=\"#FL_ACCESS\">FL_ACCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Find the first old lock with the same owner as the new lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#before\">before</a> = &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flock\">i_flock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First skip locks owned by other processes.  */</span>", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#fl\">fl</a> = *<a class=\"id\" href=\"#before\">before</a>) && (!<a class=\"id\" href=\"#IS_POSIX\">IS_POSIX</a>(<a class=\"id\" href=\"#fl\">fl</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  !<a class=\"id\" href=\"#posix_same_owner\">posix_same_owner</a>(<a class=\"id\" href=\"#request\">request</a>, <a class=\"id\" href=\"#fl\">fl</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#before\">before</a> = &amp;<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Process locks with this owner.  */</span>", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#fl\">fl</a> = *<a class=\"id\" href=\"#before\">before</a>) && <a class=\"id\" href=\"#posix_same_owner\">posix_same_owner</a>(<a class=\"id\" href=\"#request\">request</a>, <a class=\"id\" href=\"#fl\">fl</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Detect adjacent or overlapping regions (if same lock type)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> == <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* In all comparisons of start vs end, use</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * \"start - 1\" rather than \"end + 1\". If end</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * is OFFSET_MAX, end + 1 will become negative.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> &lt; <a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next_lock\">next_lock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If the next lock in the list has entirely bigger</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * addresses than the new one, insert the lock here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> - 1 &gt; <a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we come here, the new and old lock are of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * same type and adjacent or overlapping. Make one</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * lock yielding from the lower start address of both</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * locks to the higher end address.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> &gt; <a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> = <a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> &lt; <a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> = <a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#added\">added</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_delete_lock\">locks_delete_lock</a>(<a class=\"id\" href=\"#before\">before</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request\">request</a> = <a class=\"id\" href=\"#fl\">fl</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#added\">added</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Processing for different lock types is a bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * more complex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> &lt; <a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next_lock\">next_lock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> &gt; <a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> == <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#added\">added</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> &lt; <a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#fl\">fl</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If the next lock in the list has a higher end</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * address than the new one, insert the new one here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> &gt; <a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#right\">right</a> = <a class=\"id\" href=\"#fl\">fl</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> >= <a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The new lock completely replaces an old</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * one (This may happen several times).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#added\">added</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_delete_lock\">locks_delete_lock</a>(<a class=\"id\" href=\"#before\">before</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Replace the old lock with the new one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Wake up anybody waiting for the old one,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * as the change in lock type might satisfy</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * their needs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_wake_up_blocks\">locks_wake_up_blocks</a>(<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> = <a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> = <a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> = <a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_release_private\">locks_release_private</a>(<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_copy_private\">locks_copy_private</a>(<a class=\"id\" href=\"#fl\">fl</a>, <a class=\"id\" href=\"#request\">request</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request\">request</a> = <a class=\"id\" href=\"#fl\">fl</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#added\">added</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Go on to next lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_lock\">next_lock</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#before\">before</a> = &amp;<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The above code only modifies existing locks in case of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * merging or replacing.  If new lock(s) need to be inserted</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * all modifications are done bellow this, so it's safe yet to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bail out.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOLCK\">ENOLCK</a>; <span class=\"comment\">/* \"no luck\" */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#right\">right</a> && <a class=\"id\" href=\"#left\">left</a> == <a class=\"id\" href=\"#right\">right</a> && !<a class=\"id\" href=\"#new_fl2\">new_fl2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#added\">added</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> == <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> &amp; <a class=\"id\" href=\"#FL_EXISTS\">FL_EXISTS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_fl\">new_fl</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOLCK\">ENOLCK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_copy_lock\">locks_copy_lock</a>(<a class=\"id\" href=\"#new_fl\">new_fl</a>, <a class=\"id\" href=\"#request\">request</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_insert_lock\">locks_insert_lock</a>(<a class=\"id\" href=\"#before\">before</a>, <a class=\"id\" href=\"#new_fl\">new_fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_fl\">new_fl</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#right\">right</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#left\">left</a> == <a class=\"id\" href=\"#right\">right</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The new lock breaks the old one in two pieces,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * so we have to use the second new lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#new_fl2\">new_fl2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_fl2\">new_fl2</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_copy_lock\">locks_copy_lock</a>(<a class=\"id\" href=\"#left\">left</a>, <a class=\"id\" href=\"#right\">right</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_insert_lock\">locks_insert_lock</a>(<a class=\"id\" href=\"#before\">before</a>, <a class=\"id\" href=\"#left\">left</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#right\">right</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> = <a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_wake_up_blocks\">locks_wake_up_blocks</a>(<a class=\"id\" href=\"#right\">right</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#left\">left</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> = <a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_wake_up_blocks\">locks_wake_up_blocks</a>(<a class=\"id\" href=\"#left\">left</a>);", 
"<span class=\"ts\"/>}", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Free any unused locks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_fl\">new_fl</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_free_lock\">locks_free_lock</a>(<a class=\"id\" href=\"#new_fl\">new_fl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_fl2\">new_fl2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_free_lock\">locks_free_lock</a>(<a class=\"id\" href=\"#new_fl2\">new_fl2</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * posix_lock_file - Apply a POSIX-style lock to a file</span>", 
"<span class=\"comment\"> * @filp: The file to apply the lock to</span>", 
"<span class=\"comment\"> * @fl: The lock to be applied</span>", 
"<span class=\"comment\"> * @conflock: Place to return a copy of the conflicting lock, if found.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Add a POSIX style lock to a file.</span>", 
"<span class=\"comment\"> * We merge adjacent &amp; overlapping locks whenever possible.</span>", 
"<span class=\"comment\"> * POSIX locks are sorted by owner task, then by starting address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that if called with an FL_EXISTS argument, the caller may determine</span>", 
"<span class=\"comment\"> * whether or not a lock was successfully freed by testing the return</span>", 
"<span class=\"comment\"> * value for -ENOENT.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#posix_lock_file\">posix_lock_file</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#conflock\">conflock</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__posix_lock_file\">__posix_lock_file</a>(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, <a class=\"id\" href=\"#fl\">fl</a>, <a class=\"id\" href=\"#conflock\">conflock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#posix_lock_file\">posix_lock_file</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * posix_lock_file_wait - Apply a POSIX-style lock to a file</span>", 
"<span class=\"comment\"> * @filp: The file to apply the lock to</span>", 
"<span class=\"comment\"> * @fl: The lock to be applied</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Add a POSIX style lock to a file.</span>", 
"<span class=\"comment\"> * We merge adjacent &amp; overlapping locks whenever possible.</span>", 
"<span class=\"comment\"> * POSIX locks are sorted by owner task, then by starting address</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#posix_lock_file_wait\">posix_lock_file_wait</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a> ();", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#posix_lock_file\">posix_lock_file</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#fl\">fl</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> != <a class=\"id\" href=\"#FILE_LOCK_DEFERRED\">FILE_LOCK_DEFERRED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#wait_event_interruptible\">wait_event_interruptible</a>(<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_wait\">fl_wait</a>, !<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_delete_block\">locks_delete_block</a>(<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#posix_lock_file_wait\">posix_lock_file_wait</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * locks_mandatory_locked - Check for an active lock</span>", 
"<span class=\"comment\"> * @inode: the file to check</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Searches the inode's list of locks to find any POSIX locks which conflict.</span>", 
"<span class=\"comment\"> * This function is called from locks_verify_locked() only.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#locks_mandatory_locked\">locks_mandatory_locked</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl_owner_t\">fl_owner_t</a> <a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Search the lock list for this inode for any POSIX locks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>();", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#fl\">fl</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flock\">i_flock</a>; <a class=\"id\" href=\"#fl\">fl</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#fl\">fl</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_POSIX\">IS_POSIX</a>(<a class=\"id\" href=\"#fl\">fl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_owner\">fl_owner</a> != <a class=\"id\" href=\"#owner\">owner</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fl\">fl</a> ? -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a> : 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * locks_mandatory_area - Check for a conflicting lock</span>", 
"<span class=\"comment\"> * @read_write: %FLOCK_VERIFY_WRITE for exclusive access, %FLOCK_VERIFY_READ</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>for shared</span>", 
"<span class=\"comment\"> * @inode:      the file to check</span>", 
"<span class=\"comment\"> * @filp:       how the file was opened (if it was)</span>", 
"<span class=\"comment\"> * @offset:     start of area to check</span>", 
"<span class=\"comment\"> * @count:      length of area to check</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Searches the inode's list of locks to find any POSIX locks which conflict.</span>", 
"<span class=\"comment\"> * This function is called from rw_verify_area() and</span>", 
"<span class=\"comment\"> * locks_verify_truncate().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#locks_mandatory_area\">locks_mandatory_area</a>(int <a class=\"id\" href=\"#read_write\">read_write</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> <a class=\"id\" href=\"#fl\">fl</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locks_init_lock\">locks_init_lock</a>(&amp;<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#fl_owner\">fl_owner</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#fl_pid\">fl_pid</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#tgid\">tgid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#fl_file\">fl_file</a> = <a class=\"id\" href=\"#filp\">filp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#fl_flags\">fl_flags</a> = <a class=\"id\" href=\"#FL_POSIX\">FL_POSIX</a> | <a class=\"id\" href=\"#FL_ACCESS\">FL_ACCESS</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a> && !(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#fl_flags\">fl_flags</a> |= <a class=\"id\" href=\"#FL_SLEEP\">FL_SLEEP</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#fl_type\">fl_type</a> = (<a class=\"id\" href=\"#read_write\">read_write</a> == <a class=\"id\" href=\"#FLOCK_VERIFY_WRITE\">FLOCK_VERIFY_WRITE</a>) ? <a class=\"id\" href=\"#F_WRLCK\">F_WRLCK</a> : <a class=\"id\" href=\"#F_RDLCK\">F_RDLCK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#fl_start\">fl_start</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#fl_end\">fl_end</a> = <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#count\">count</a> - 1;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#__posix_lock_file\">__posix_lock_file</a>(<a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#fl\">fl</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> != <a class=\"id\" href=\"#FILE_LOCK_DEFERRED\">FILE_LOCK_DEFERRED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#wait_event_interruptible\">wait_event_interruptible</a>(<a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#fl_wait\">fl_wait</a>, !<a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#fl_next\">fl_next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If we've been sleeping someone might have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * changed the permissions behind our back.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__mandatory_lock\">__mandatory_lock</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_delete_block\">locks_delete_block</a>(&amp;<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#locks_mandatory_area\">locks_mandatory_area</a>);", 
"", 
"<span class=\"comment\">/* We already had a lease on this file; just change its type */</span>", 
"int <a class=\"id\" href=\"#lease_modify\">lease_modify</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> **<a class=\"id\" href=\"#before\">before</a>, int <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a> = *<a class=\"id\" href=\"#before\">before</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#assign_type\">assign_type</a>(<a class=\"id\" href=\"#fl\">fl</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locks_wake_up_blocks\">locks_wake_up_blocks</a>(<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a> == <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_delete_lock\">locks_delete_lock</a>(<a class=\"id\" href=\"#before\">before</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#lease_modify\">lease_modify</a>);", 
"", 
"static void <a class=\"id\" href=\"#time_out_leases\">time_out_leases</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> **<a class=\"id\" href=\"#before\">before</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#before\">before</a> = &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flock\">i_flock</a>;", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#fl\">fl</a> = *<a class=\"id\" href=\"#before\">before</a>) && <a class=\"id\" href=\"#IS_LEASE\">IS_LEASE</a>(<a class=\"id\" href=\"#fl\">fl</a>) && (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; <a class=\"id\" href=\"#F_INPROGRESS\">F_INPROGRESS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_break_time\">fl_break_time</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>|| <a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_break_time\">fl_break_time</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#before\">before</a> = &amp;<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lease_modify\">lease_modify</a>(<a class=\"id\" href=\"#before\">before</a>, <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; ~<a class=\"id\" href=\"#F_INPROGRESS\">F_INPROGRESS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a> == *<a class=\"id\" href=\"#before\">before</a>)<span class=\"ts\"/><span class=\"comment\">/* lease_modify may have freed fl */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#before\">before</a> = &amp;<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__break_lease<span class=\"ts\"/>-<span class=\"ts\"/>revoke all outstanding leases on file</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: the inode of the file to return</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mode: the open mode (read or write)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>break_lease (inlined for speed) has checked there already is at least</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>some kind of lock (maybe a lease) on this file.  Leases are broken on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a call to open() or truncate().  This function can sleep unless you</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>specified %O_NONBLOCK to your open().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__break_lease\">__break_lease</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0, <a class=\"id\" href=\"#future\">future</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#new_fl\">new_fl</a>, *<a class=\"id\" href=\"#flock\">flock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#break_time\">break_time</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i_have_this_lease\">i_have_this_lease</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#want_write\">want_write</a> = (<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#O_ACCMODE\">O_ACCMODE</a>) != <a class=\"id\" href=\"#O_RDONLY\">O_RDONLY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_fl\">new_fl</a> = <a class=\"id\" href=\"#lease_alloc\">lease_alloc</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#want_write\">want_write</a> ? <a class=\"id\" href=\"#F_WRLCK\">F_WRLCK</a> : <a class=\"id\" href=\"#F_RDLCK\">F_RDLCK</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time_out_leases\">time_out_leases</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flock\">flock</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flock\">i_flock</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flock\">flock</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) || !<a class=\"id\" href=\"#IS_LEASE\">IS_LEASE</a>(<a class=\"id\" href=\"#flock\">flock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#fl\">fl</a> = <a class=\"id\" href=\"#flock\">flock</a>; <a class=\"id\" href=\"#fl\">fl</a> && <a class=\"id\" href=\"#IS_LEASE\">IS_LEASE</a>(<a class=\"id\" href=\"#fl\">fl</a>); <a class=\"id\" href=\"#fl\">fl</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_owner\">fl_owner</a> == <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_have_this_lease\">i_have_this_lease</a> = 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#want_write\">want_write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we want write access, we have to revoke any lease. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#future\">future</a> = <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a> | <a class=\"id\" href=\"#F_INPROGRESS\">F_INPROGRESS</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#flock\">flock</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; <a class=\"id\" href=\"#F_INPROGRESS\">F_INPROGRESS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If the lease is already being broken, we just leave it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#future\">future</a> = <a class=\"id\" href=\"#flock\">flock</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#flock\">flock</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; <a class=\"id\" href=\"#F_WRLCK\">F_WRLCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Downgrade the exclusive lease to a read-only lease. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#future\">future</a> = <a class=\"id\" href=\"#F_RDLCK\">F_RDLCK</a> | <a class=\"id\" href=\"#F_INPROGRESS\">F_INPROGRESS</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the existing lease was read-only, so we can read too. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#new_fl\">new_fl</a>) && !<a class=\"id\" href=\"#i_have_this_lease\">i_have_this_lease</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&& ((<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>) == 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#new_fl\">new_fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#break_time\">break_time</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lease_break_time\">lease_break_time</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#break_time\">break_time</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#lease_break_time\">lease_break_time</a> * <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#break_time\">break_time</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#break_time\">break_time</a>++;<span class=\"ts\"/><span class=\"comment\">/* so that 0 means no break time */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#fl\">fl</a> = <a class=\"id\" href=\"#flock\">flock</a>; <a class=\"id\" href=\"#fl\">fl</a> && <a class=\"id\" href=\"#IS_LEASE\">IS_LEASE</a>(<a class=\"id\" href=\"#fl\">fl</a>); <a class=\"id\" href=\"#fl\">fl</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> != <a class=\"id\" href=\"#future\">future</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> = <a class=\"id\" href=\"#future\">future</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_break_time\">fl_break_time</a> = <a class=\"id\" href=\"#break_time\">break_time</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* lease must have lmops break callback */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a>-><a class=\"id\" href=\"#fl_break\">fl_break</a>(<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i_have_this_lease\">i_have_this_lease</a> || (<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EWOULDBLOCK\">EWOULDBLOCK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#break_time\">break_time</a> = <a class=\"id\" href=\"#flock\">flock</a>-><a class=\"id\" href=\"#fl_break_time\">fl_break_time</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#break_time\">break_time</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#break_time\">break_time</a> -= <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#break_time\">break_time</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#break_time\">break_time</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locks_insert_block\">locks_insert_block</a>(<a class=\"id\" href=\"#flock\">flock</a>, <a class=\"id\" href=\"#new_fl\">new_fl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#wait_event_interruptible_timeout\">wait_event_interruptible_timeout</a>(<a class=\"id\" href=\"#new_fl\">new_fl</a>-><a class=\"id\" href=\"#fl_wait\">fl_wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#new_fl\">new_fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>, <a class=\"id\" href=\"#break_time\">break_time</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__locks_delete_block\">__locks_delete_block</a>(<a class=\"id\" href=\"#new_fl\">new_fl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#time_out_leases\">time_out_leases</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Wait for the next lease that has not been broken yet */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#flock\">flock</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flock\">i_flock</a>; <a class=\"id\" href=\"#flock\">flock</a> && <a class=\"id\" href=\"#IS_LEASE\">IS_LEASE</a>(<a class=\"id\" href=\"#flock\">flock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flock\">flock</a> = <a class=\"id\" href=\"#flock\">flock</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flock\">flock</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; <a class=\"id\" href=\"#F_INPROGRESS\">F_INPROGRESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#new_fl\">new_fl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_free_lock\">locks_free_lock</a>(<a class=\"id\" href=\"#new_fl\">new_fl</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__break_lease\">__break_lease</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>lease_get_mtime - get the last modified time of an inode</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: the inode</span>", 
"<span class=\"comment\"> *      @time:  pointer to a timespec which will contain the last modified time</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is to force NFS clients to flush their caches for files with</span>", 
"<span class=\"comment\"> * exclusive leases.  The justification is that if someone has an</span>", 
"<span class=\"comment\"> * exclusive lease, then they could be modifying it.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#lease_get_mtime\">lease_get_mtime</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#time\">time</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#flock\">flock</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flock\">i_flock</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flock\">flock</a> && <a class=\"id\" href=\"#IS_LEASE\">IS_LEASE</a>(<a class=\"id\" href=\"#flock\">flock</a>) && (<a class=\"id\" href=\"#flock\">flock</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; <a class=\"id\" href=\"#F_WRLCK\">F_WRLCK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#time\">time</a> = <a class=\"id\" href=\"#current_fs_time\">current_fs_time</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#time\">time</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mtime\">i_mtime</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#lease_get_mtime\">lease_get_mtime</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>fcntl_getlease - Enquire what lease is currently active</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@filp: the file</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The value returned by this function will be one of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(if no lease break is pending):</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%F_RDLCK to indicate a shared lease is held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%F_WRLCK to indicate an exclusive lease is held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%F_UNLCK to indicate no lease is held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(if a lease break is pending):</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%F_RDLCK to indicate an exclusive lease needs to be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>changed to a shared lease (or removed).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%F_UNLCK to indicate the lease needs to be removed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>XXX: sfr &amp; willy disagree over whether F_INPROGRESS</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>should be returned to userspace.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#fcntl_getlease\">fcntl_getlease</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time_out_leases\">time_out_leases</a>(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#fl\">fl</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_flock\">i_flock</a>; <a class=\"id\" href=\"#fl\">fl</a> && <a class=\"id\" href=\"#IS_LEASE\">IS_LEASE</a>(<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a> == <a class=\"id\" href=\"#filp\">filp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; ~<a class=\"id\" href=\"#F_INPROGRESS\">F_INPROGRESS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#type\">type</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>generic_setlease<span class=\"ts\"/>-<span class=\"ts\"/>sets a lease on an open file</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@filp: file pointer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@arg: type of lease to obtain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flp: input - file_lock to use, output - file_lock inserted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The (input) flp-&gt;fl_lmops-&gt;fl_break function is required</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>by break_lease().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called with kernel lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#generic_setlease\">generic_setlease</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, long <a class=\"id\" href=\"#arg\">arg</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> **<a class=\"id\" href=\"#flp\">flp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>, **<a class=\"id\" href=\"#before\">before</a>, **<a class=\"id\" href=\"#my_before\">my_before</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#lease\">lease</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#new_fl\">new_fl</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#rdlease_count\">rdlease_count</a> = 0, <a class=\"id\" href=\"#wrlease_count\">wrlease_count</a> = 0;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#current_fsuid\">current_fsuid</a>() != <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a>) && !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_LEASE\">CAP_LEASE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_file_lock\">security_file_lock</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time_out_leases\">time_out_leases</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(*<a class=\"id\" href=\"#flp\">flp</a>)-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a>-><a class=\"id\" href=\"#fl_break\">fl_break</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lease\">lease</a> = *<a class=\"id\" href=\"#flp\">flp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a> != <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_fl\">new_fl</a> = <a class=\"id\" href=\"#locks_alloc_lock\">locks_alloc_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_fl\">new_fl</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#arg\">arg</a> == <a class=\"id\" href=\"#F_RDLCK\">F_RDLCK</a>) && (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_writecount\">i_writecount</a>) &gt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#arg\">arg</a> == <a class=\"id\" href=\"#F_WRLCK\">F_WRLCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    && ((<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_count\">d_count</a>) &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>|| (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_count\">i_count</a>) &gt; 1)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At this point, we know that if there is an exclusive</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lease on this file, then we hold it on this filp</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (otherwise our open of this file would have blocked).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * And if we are trying to acquire an exclusive lease,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then the file is not open by anyone (including us)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * except for this filp.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#before\">before</a> = &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flock\">i_flock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#fl\">fl</a> = *<a class=\"id\" href=\"#before\">before</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>) && <a class=\"id\" href=\"#IS_LEASE\">IS_LEASE</a>(<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#before\">before</a> = &amp;<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lease\">lease</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a>-><a class=\"id\" href=\"#fl_mylease\">fl_mylease</a>(<a class=\"id\" href=\"#fl\">fl</a>, <a class=\"id\" href=\"#lease\">lease</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_before\">my_before</a> = <a class=\"id\" href=\"#before\">before</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> == (<a class=\"id\" href=\"#F_INPROGRESS\">F_INPROGRESS</a> | <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Someone is in the process of opening this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * file for writing so we may not take an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * exclusive lease on it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrlease_count\">wrlease_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdlease_count\">rdlease_count</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#arg\">arg</a> == <a class=\"id\" href=\"#F_RDLCK\">F_RDLCK</a> && (<a class=\"id\" href=\"#wrlease_count\">wrlease_count</a> &gt; 0)) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#arg\">arg</a> == <a class=\"id\" href=\"#F_WRLCK\">F_WRLCK</a> && ((<a class=\"id\" href=\"#rdlease_count\">rdlease_count</a> + <a class=\"id\" href=\"#wrlease_count\">wrlease_count</a>) &gt; 0)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#my_before\">my_before</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#flp\">flp</a> = *<a class=\"id\" href=\"#my_before\">my_before</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#lease\">lease</a>-><a class=\"id\" href=\"#fl_lmops\">fl_lmops</a>-><a class=\"id\" href=\"#fl_change\">fl_change</a>(<a class=\"id\" href=\"#my_before\">my_before</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a> == <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#leases_enable\">leases_enable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locks_copy_lock\">locks_copy_lock</a>(<a class=\"id\" href=\"#new_fl\">new_fl</a>, <a class=\"id\" href=\"#lease\">lease</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locks_insert_lock\">locks_insert_lock</a>(<a class=\"id\" href=\"#before\">before</a>, <a class=\"id\" href=\"#new_fl\">new_fl</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#flp\">flp</a> = <a class=\"id\" href=\"#new_fl\">new_fl</a>;", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_fl\">new_fl</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_free_lock\">locks_free_lock</a>(<a class=\"id\" href=\"#new_fl\">new_fl</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_setlease\">generic_setlease</a>);", 
"", 
" <span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vfs_setlease        -       sets a lease on an open file</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@filp: file pointer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@arg: type of lease to obtain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@lease: file_lock to use</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Call this to establish a lease on the file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The (*lease)-&gt;fl_lmops-&gt;fl_break operation must be set; if not,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>break_lease will oops!</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This will call the filesystem's setlease file method, if</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>defined.  Note that there is no getlease method; instead, the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>filesystem setlease method should call back to setlease() to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>add a lease to the inode's lease list, where fcntl_getlease() can</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>find it.  Since fcntl_getlease() only reports whether the current</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>task holds a lease, a cluster filesystem need only do this for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>leases held by processes on this node.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>There is also no break_lease method; filesystems that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>handle their own leases should break leases themselves from the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>filesystem's open, create, and (on truncate) setattr methods.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Warning: the only current setlease methods exist only to disable</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>leases in certain cases.  More vfs changes may be required to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>allow a full filesystem lease implementation.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#vfs_setlease\">vfs_setlease</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, long <a class=\"id\" href=\"#arg\">arg</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> **<a class=\"id\" href=\"#lease\">lease</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a> && <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#setlease\">setlease</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#setlease\">setlease</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#lease\">lease</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#generic_setlease\">generic_setlease</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#lease\">lease</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#vfs_setlease\">vfs_setlease</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>fcntl_setlease<span class=\"ts\"/>-<span class=\"ts\"/>sets a lease on an open file</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@fd: open file descriptor</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@filp: file pointer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@arg: type of lease to obtain</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Call this fcntl to establish a lease on the file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note that you also need to call %F_SETSIG to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>receive a signal when the lease is broken.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#fcntl_setlease\">fcntl_setlease</a>(unsigned int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> <a class=\"id\" href=\"#fl\">fl</a>, *<a class=\"id\" href=\"#flp\">flp</a> = &amp;<a class=\"id\" href=\"#fl\">fl</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locks_init_lock\">locks_init_lock</a>(&amp;<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#lease_init\">lease_init</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#arg\">arg</a>, &amp;<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#vfs_setlease\">vfs_setlease</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#arg\">arg</a>, &amp;<a class=\"id\" href=\"#flp\">flp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> || <a class=\"id\" href=\"#arg\">arg</a> == <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#fasync_helper\">fasync_helper</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#filp\">filp</a>, 1, &amp;<a class=\"id\" href=\"#flp\">flp</a>-><a class=\"id\" href=\"#fl_fasync\">fl_fasync</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* remove lease just inserted by setlease */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flp\">flp</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> = <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a> | <a class=\"id\" href=\"#F_INPROGRESS\">F_INPROGRESS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flp\">flp</a>-><a class=\"id\" href=\"#fl_break_time\">fl_break_time</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> - 10;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#time_out_leases\">time_out_leases</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#__f_setown\">__f_setown</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#task_pid\">task_pid</a>(<a class=\"id\" href=\"#current\">current</a>), <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>, 0);", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * flock_lock_file_wait - Apply a FLOCK-style lock to a file</span>", 
"<span class=\"comment\"> * @filp: The file to apply the lock to</span>", 
"<span class=\"comment\"> * @fl: The lock to be applied</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Add a FLOCK style lock to a file.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#flock_lock_file_wait\">flock_lock_file_wait</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#flock_lock_file\">flock_lock_file</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> != <a class=\"id\" href=\"#FILE_LOCK_DEFERRED\">FILE_LOCK_DEFERRED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#wait_event_interruptible\">wait_event_interruptible</a>(<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_wait\">fl_wait</a>, !<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_delete_block\">locks_delete_block</a>(<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#flock_lock_file_wait\">flock_lock_file_wait</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sys_flock: - flock() system call.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@fd: the file descriptor to lock.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd: the type of lock to apply.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Apply a %FL_FLOCK style lock to an open file descriptor.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The @cmd can be one of</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%LOCK_SH -- a shared lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%LOCK_EX -- an exclusive lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%LOCK_UN -- remove an existing lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%LOCK_MAND -- a `mandatory' flock.  This exists to emulate Windows Share Modes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%LOCK_MAND can be combined with %LOCK_READ or %LOCK_WRITE to allow other</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>processes read and write access respectively.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#flock\">flock</a>, unsigned int, <a class=\"id\" href=\"#fd\">fd</a>, unsigned int, <a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#can_sleep\">can_sleep</a>, <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a> = <a class=\"id\" href=\"#fget\">fget</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#filp\">filp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#can_sleep\">can_sleep</a> = !(<a class=\"id\" href=\"#cmd\">cmd</a> &amp; <a class=\"id\" href=\"#LOCK_NB\">LOCK_NB</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> &= ~<a class=\"id\" href=\"#LOCK_NB\">LOCK_NB</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock\">unlock</a> = (<a class=\"id\" href=\"#cmd\">cmd</a> == <a class=\"id\" href=\"#LOCK_UN\">LOCK_UN</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#unlock\">unlock</a> && !(<a class=\"id\" href=\"#cmd\">cmd</a> &amp; <a class=\"id\" href=\"#LOCK_MAND\">LOCK_MAND</a>) &&", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; (<a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>|<a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_putf\">out_putf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#flock_make_lock\">flock_make_lock</a>(<a class=\"id\" href=\"#filp\">filp</a>, &amp;<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_putf\">out_putf</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#can_sleep\">can_sleep</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> |= <a class=\"id\" href=\"#FL_SLEEP\">FL_SLEEP</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_file_lock\">security_file_lock</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a> && <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#flock\">flock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#flock\">flock</a>(<a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#can_sleep\">can_sleep</a>) ? <a class=\"id\" href=\"#F_SETLKW\">F_SETLKW</a> : <a class=\"id\" href=\"#F_SETLK\">F_SETLK</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#flock_lock_file_wait\">flock_lock_file_wait</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
" <a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locks_free_lock\">locks_free_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
" <a class=\"id\" href=\"#out_putf\">out_putf</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#filp\">filp</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vfs_test_lock - test file byte range lock</span>", 
"<span class=\"comment\"> * @filp: The file to test lock for</span>", 
"<span class=\"comment\"> * @fl: The lock to test; also used to hold result</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns -ERRNO on failure.  Indicates presence of conflicting lock by</span>", 
"<span class=\"comment\"> * setting conf-&gt;fl_type to something other than F_UNLCK.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#vfs_test_lock\">vfs_test_lock</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a> && <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#lock\">lock</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#F_GETLK\">F_GETLK</a>, <a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#posix_test_lock\">posix_test_lock</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#vfs_test_lock\">vfs_test_lock</a>);", 
"", 
"static int <a class=\"id\" href=\"#posix_lock_to_flock\">posix_lock_to_flock</a>(struct <a class=\"id\" href=\"#flock\">flock</a> *<a class=\"id\" href=\"#flock\">flock</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flock\">flock</a>-><a class=\"id\" href=\"#l_pid\">l_pid</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_pid\">fl_pid</a>;", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure we can represent the posix lock via</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * legacy 32bit flock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> &gt; <a class=\"id\" href=\"#OFFT_OFFSET_MAX\">OFFT_OFFSET_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOVERFLOW\">EOVERFLOW</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> != <a class=\"id\" href=\"#OFFSET_MAX\">OFFSET_MAX</a> && <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> &gt; <a class=\"id\" href=\"#OFFT_OFFSET_MAX\">OFFT_OFFSET_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOVERFLOW\">EOVERFLOW</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flock\">flock</a>-><a class=\"id\" href=\"#l_start\">l_start</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flock\">flock</a>-><a class=\"id\" href=\"#l_len\">l_len</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> == <a class=\"id\" href=\"#OFFSET_MAX\">OFFSET_MAX</a> ? 0 :", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> - <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flock\">flock</a>-><a class=\"id\" href=\"#l_whence\">l_whence</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flock\">flock</a>-><a class=\"id\" href=\"#l_type\">l_type</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"static void <a class=\"id\" href=\"#posix_lock_to_flock64\">posix_lock_to_flock64</a>(struct <a class=\"id\" href=\"#flock64\">flock64</a> *<a class=\"id\" href=\"#flock\">flock</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flock\">flock</a>-><a class=\"id\" href=\"#l_pid\">l_pid</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_pid\">fl_pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flock\">flock</a>-><a class=\"id\" href=\"#l_start\">l_start</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flock\">flock</a>-><a class=\"id\" href=\"#l_len\">l_len</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> == <a class=\"id\" href=\"#OFFSET_MAX\">OFFSET_MAX</a> ? 0 :", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> - <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flock\">flock</a>-><a class=\"id\" href=\"#l_whence\">l_whence</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flock\">flock</a>-><a class=\"id\" href=\"#l_type\">l_type</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Report the first existing lock that would conflict with l.</span>", 
"<span class=\"comment\"> * This implements the F_GETLK command of fcntl().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#fcntl_getlk\">fcntl_getlk</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#flock\">flock</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#l\">l</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> <a class=\"id\" href=\"#file_lock\">file_lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#flock\">flock</a> <a class=\"id\" href=\"#flock\">flock</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#flock\">flock</a>, <a class=\"id\" href=\"#l\">l</a>, sizeof(<a class=\"id\" href=\"#flock\">flock</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flock\">flock</a>.<a class=\"id\" href=\"#l_type\">l_type</a> != <a class=\"id\" href=\"#F_RDLCK\">F_RDLCK</a>) && (<a class=\"id\" href=\"#flock\">flock</a>.<a class=\"id\" href=\"#l_type\">l_type</a> != <a class=\"id\" href=\"#F_WRLCK\">F_WRLCK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#flock_to_posix_lock\">flock_to_posix_lock</a>(<a class=\"id\" href=\"#filp\">filp</a>, &amp;<a class=\"id\" href=\"#file_lock\">file_lock</a>, &amp;<a class=\"id\" href=\"#flock\">flock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#vfs_test_lock\">vfs_test_lock</a>(<a class=\"id\" href=\"#filp\">filp</a>, &amp;<a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
" ", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flock\">flock</a>.<a class=\"id\" href=\"#l_type\">l_type</a> = <a class=\"id\" href=\"#file_lock\">file_lock</a>.<a class=\"id\" href=\"#fl_type\">fl_type</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file_lock\">file_lock</a>.<a class=\"id\" href=\"#fl_type\">fl_type</a> != <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#posix_lock_to_flock\">posix_lock_to_flock</a>(&amp;<a class=\"id\" href=\"#flock\">flock</a>, &amp;<a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#l\">l</a>, &amp;<a class=\"id\" href=\"#flock\">flock</a>, sizeof(<a class=\"id\" href=\"#flock\">flock</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vfs_lock_file - file byte range lock</span>", 
"<span class=\"comment\"> * @filp: The file to apply the lock to</span>", 
"<span class=\"comment\"> * @cmd: type of locking operation (F_SETLK, F_GETLK, etc.)</span>", 
"<span class=\"comment\"> * @fl: The lock to be applied</span>", 
"<span class=\"comment\"> * @conf: Place to return a copy of the conflicting lock, if found.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A caller that doesn't care about the conflicting lock may pass NULL</span>", 
"<span class=\"comment\"> * as the final argument.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the filesystem defines a private -&gt;lock() method, then @conf will</span>", 
"<span class=\"comment\"> * be left unchanged; so a caller that cares should initialize it to</span>", 
"<span class=\"comment\"> * some acceptable default.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To avoid blocking kernel daemons, such as lockd, that need to acquire POSIX</span>", 
"<span class=\"comment\"> * locks, the -&gt;lock() interface may return asynchronously, before the lock has</span>", 
"<span class=\"comment\"> * been granted or denied by the underlying filesystem, if (and only if)</span>", 
"<span class=\"comment\"> * fl_grant is set. Callers expecting -&gt;lock() to return asynchronously</span>", 
"<span class=\"comment\"> * will only use F_SETLK, not F_SETLKW; they will set FL_SLEEP if (and only if)</span>", 
"<span class=\"comment\"> * the request is for a blocking lock. When -&gt;lock() does return asynchronously,</span>", 
"<span class=\"comment\"> * it must return FILE_LOCK_DEFERRED, and call -&gt;fl_grant() when the lock</span>", 
"<span class=\"comment\"> * request completes.</span>", 
"<span class=\"comment\"> * If the request is for non-blocking lock the file system should return</span>", 
"<span class=\"comment\"> * FILE_LOCK_DEFERRED then try to get the lock and call the callback routine</span>", 
"<span class=\"comment\"> * with the result. If the request timed out the callback routine will return a</span>", 
"<span class=\"comment\"> * nonzero return code and the file system should release the lock. The file</span>", 
"<span class=\"comment\"> * system is also responsible to keep a corresponding posix lock when it</span>", 
"<span class=\"comment\"> * grants a lock so the VFS can find out which locks are locally held and do</span>", 
"<span class=\"comment\"> * the correct lock cleanup when required.</span>", 
"<span class=\"comment\"> * The underlying filesystem must not drop the kernel lock or call</span>", 
"<span class=\"comment\"> * -&gt;fl_grant() before returning to the caller with a FILE_LOCK_DEFERRED</span>", 
"<span class=\"comment\"> * return code.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#vfs_lock_file\">vfs_lock_file</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#conf\">conf</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a> && <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#lock\">lock</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#posix_lock_file\">posix_lock_file</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#fl\">fl</a>, <a class=\"id\" href=\"#conf\">conf</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#vfs_lock_file\">vfs_lock_file</a>);", 
"", 
"static int <a class=\"id\" href=\"#do_lock_file_wait\">do_lock_file_wait</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_file_lock\">security_file_lock</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#vfs_lock_file\">vfs_lock_file</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#fl\">fl</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> != <a class=\"id\" href=\"#FILE_LOCK_DEFERRED\">FILE_LOCK_DEFERRED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#wait_event_interruptible\">wait_event_interruptible</a>(<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_wait\">fl_wait</a>, !<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_delete_block\">locks_delete_block</a>(<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Apply the lock described by l to an open file descriptor.</span>", 
"<span class=\"comment\"> * This implements both the F_SETLK and F_SETLKW commands of fcntl().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#fcntl_setlk\">fcntl_setlk</a>(unsigned int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#flock\">flock</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#l\">l</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#file_lock\">file_lock</a> = <a class=\"id\" href=\"#locks_alloc_lock\">locks_alloc_lock</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#flock\">flock</a> <a class=\"id\" href=\"#flock\">flock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file_lock\">file_lock</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOLCK\">ENOLCK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This might block, so we do it before checking the inode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#flock\">flock</a>, <a class=\"id\" href=\"#l\">l</a>, sizeof(<a class=\"id\" href=\"#flock\">flock</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't allow mandatory locks on files that may be memory mapped</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and shared.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mandatory_lock\">mandatory_lock</a>(<a class=\"id\" href=\"#inode\">inode</a>) && <a class=\"id\" href=\"#mapping_writably_mapped\">mapping_writably_mapped</a>(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#flock_to_posix_lock\">flock_to_posix_lock</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#file_lock\">file_lock</a>, &amp;<a class=\"id\" href=\"#flock\">flock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a> == <a class=\"id\" href=\"#F_SETLKW\">F_SETLKW</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file_lock\">file_lock</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> |= <a class=\"id\" href=\"#FL_SLEEP\">FL_SLEEP</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#flock\">flock</a>.<a class=\"id\" href=\"#l_type\">l_type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_RDLCK\">F_RDLCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_WRLCK\">F_WRLCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#do_lock_file_wait\">do_lock_file_wait</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Attempt to detect a close/fcntl race and recover by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * releasing the lock that was just acquired.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we need that spin_lock here - it prevents reordering between</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * update of inode-&gt;i_flock and check for it done in close().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * rcu_read_lock() wouldn't do.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#fcheck\">fcheck</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a> && <a class=\"id\" href=\"#f\">f</a> != <a class=\"id\" href=\"#filp\">filp</a> && <a class=\"id\" href=\"#flock\">flock</a>.<a class=\"id\" href=\"#l_type\">l_type</a> != <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flock\">flock</a>.<a class=\"id\" href=\"#l_type\">l_type</a> = <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locks_free_lock\">locks_free_lock</a>(<a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"<span class=\"comment\">/* Report the first existing lock that would conflict with l.</span>", 
"<span class=\"comment\"> * This implements the F_GETLK command of fcntl().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#fcntl_getlk64\">fcntl_getlk64</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#flock64\">flock64</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#l\">l</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> <a class=\"id\" href=\"#file_lock\">file_lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#flock64\">flock64</a> <a class=\"id\" href=\"#flock\">flock</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#flock\">flock</a>, <a class=\"id\" href=\"#l\">l</a>, sizeof(<a class=\"id\" href=\"#flock\">flock</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flock\">flock</a>.<a class=\"id\" href=\"#l_type\">l_type</a> != <a class=\"id\" href=\"#F_RDLCK\">F_RDLCK</a>) && (<a class=\"id\" href=\"#flock\">flock</a>.<a class=\"id\" href=\"#l_type\">l_type</a> != <a class=\"id\" href=\"#F_WRLCK\">F_WRLCK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#flock64_to_posix_lock\">flock64_to_posix_lock</a>(<a class=\"id\" href=\"#filp\">filp</a>, &amp;<a class=\"id\" href=\"#file_lock\">file_lock</a>, &amp;<a class=\"id\" href=\"#flock\">flock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#vfs_test_lock\">vfs_test_lock</a>(<a class=\"id\" href=\"#filp\">filp</a>, &amp;<a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flock\">flock</a>.<a class=\"id\" href=\"#l_type\">l_type</a> = <a class=\"id\" href=\"#file_lock\">file_lock</a>.<a class=\"id\" href=\"#fl_type\">fl_type</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file_lock\">file_lock</a>.<a class=\"id\" href=\"#fl_type\">fl_type</a> != <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#posix_lock_to_flock64\">posix_lock_to_flock64</a>(&amp;<a class=\"id\" href=\"#flock\">flock</a>, &amp;<a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#l\">l</a>, &amp;<a class=\"id\" href=\"#flock\">flock</a>, sizeof(<a class=\"id\" href=\"#flock\">flock</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"  ", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Apply the lock described by l to an open file descriptor.</span>", 
"<span class=\"comment\"> * This implements both the F_SETLK and F_SETLKW commands of fcntl().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#fcntl_setlk64\">fcntl_setlk64</a>(unsigned int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#flock64\">flock64</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#l\">l</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#file_lock\">file_lock</a> = <a class=\"id\" href=\"#locks_alloc_lock\">locks_alloc_lock</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#flock64\">flock64</a> <a class=\"id\" href=\"#flock\">flock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file_lock\">file_lock</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOLCK\">ENOLCK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This might block, so we do it before checking the inode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#flock\">flock</a>, <a class=\"id\" href=\"#l\">l</a>, sizeof(<a class=\"id\" href=\"#flock\">flock</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't allow mandatory locks on files that may be memory mapped</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and shared.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mandatory_lock\">mandatory_lock</a>(<a class=\"id\" href=\"#inode\">inode</a>) && <a class=\"id\" href=\"#mapping_writably_mapped\">mapping_writably_mapped</a>(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#flock64_to_posix_lock\">flock64_to_posix_lock</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#file_lock\">file_lock</a>, &amp;<a class=\"id\" href=\"#flock\">flock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a> == <a class=\"id\" href=\"#F_SETLKW64\">F_SETLKW64</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file_lock\">file_lock</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> |= <a class=\"id\" href=\"#FL_SLEEP\">FL_SLEEP</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#flock\">flock</a>.<a class=\"id\" href=\"#l_type\">l_type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_RDLCK\">F_RDLCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_WRLCK\">F_WRLCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#do_lock_file_wait\">do_lock_file_wait</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Attempt to detect a close/fcntl race and recover by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * releasing the lock that was just acquired.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#fcheck\">fcheck</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a> && <a class=\"id\" href=\"#f\">f</a> != <a class=\"id\" href=\"#filp\">filp</a> && <a class=\"id\" href=\"#flock\">flock</a>.<a class=\"id\" href=\"#l_type\">l_type</a> != <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flock\">flock</a>.<a class=\"id\" href=\"#l_type\">l_type</a> = <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locks_free_lock\">locks_free_lock</a>(<a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* BITS_PER_LONG == 32 */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function is called when the file is being removed</span>", 
"<span class=\"comment\"> * from the task's fd array.  POSIX locks belonging to this task</span>", 
"<span class=\"comment\"> * are deleted at this time.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#locks_remove_posix\">locks_remove_posix</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#fl_owner_t\">fl_owner_t</a> <a class=\"id\" href=\"#owner\">owner</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If there are no locks held on this file, we don't need to call</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * posix_lock_file().  Another process could be setting a lock on this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * file at the same time, but we wouldn't remove that lock anyway.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_flock\">i_flock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>.<a class=\"id\" href=\"#fl_type\">fl_type</a> = <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>.<a class=\"id\" href=\"#fl_flags\">fl_flags</a> = <a class=\"id\" href=\"#FL_POSIX\">FL_POSIX</a> | <a class=\"id\" href=\"#FL_CLOSE\">FL_CLOSE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>.<a class=\"id\" href=\"#fl_start\">fl_start</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>.<a class=\"id\" href=\"#fl_end\">fl_end</a> = <a class=\"id\" href=\"#OFFSET_MAX\">OFFSET_MAX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>.<a class=\"id\" href=\"#fl_owner\">fl_owner</a> = <a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>.<a class=\"id\" href=\"#fl_pid\">fl_pid</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#tgid\">tgid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>.<a class=\"id\" href=\"#fl_file\">fl_file</a> = <a class=\"id\" href=\"#filp\">filp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>.<a class=\"id\" href=\"#fl_ops\">fl_ops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>.<a class=\"id\" href=\"#fl_lmops\">fl_lmops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vfs_lock_file\">vfs_lock_file</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#F_SETLK\">F_SETLK</a>, &amp;<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lock\">lock</a>.<a class=\"id\" href=\"#fl_ops\">fl_ops</a> && <a class=\"id\" href=\"#lock\">lock</a>.<a class=\"id\" href=\"#fl_ops\">fl_ops</a>-><a class=\"id\" href=\"#fl_release_private\">fl_release_private</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>.<a class=\"id\" href=\"#fl_ops\">fl_ops</a>-><a class=\"id\" href=\"#fl_release_private\">fl_release_private</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#locks_remove_posix\">locks_remove_posix</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function is called on the last close of an open file.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#locks_remove_flock\">locks_remove_flock</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> **<a class=\"id\" href=\"#before\">before</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flock\">i_flock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a> && <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#flock\">flock</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> <a class=\"id\" href=\"#fl\">fl</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fl_pid\">fl_pid</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#tgid\">tgid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fl_file\">fl_file</a> = <a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fl_flags\">fl_flags</a> = <a class=\"id\" href=\"#FL_FLOCK\">FL_FLOCK</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fl_type\">fl_type</a> = <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fl_end\">fl_end</a> = <a class=\"id\" href=\"#OFFSET_MAX\">OFFSET_MAX</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#flock\">flock</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#F_SETLKW\">F_SETLKW</a>, &amp;<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#fl_ops\">fl_ops</a> && <a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#fl_ops\">fl_ops</a>-><a class=\"id\" href=\"#fl_release_private\">fl_release_private</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#fl_ops\">fl_ops</a>-><a class=\"id\" href=\"#fl_release_private\">fl_release_private</a>(&amp;<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#before\">before</a> = &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flock\">i_flock</a>;", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#fl\">fl</a> = *<a class=\"id\" href=\"#before\">before</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a> == <a class=\"id\" href=\"#filp\">filp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_FLOCK\">IS_FLOCK</a>(<a class=\"id\" href=\"#fl\">fl</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locks_delete_lock\">locks_delete_lock</a>(<a class=\"id\" href=\"#before\">before</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_LEASE\">IS_LEASE</a>(<a class=\"id\" href=\"#fl\">fl</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lease_modify\">lease_modify</a>(<a class=\"id\" href=\"#before\">before</a>, <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* What? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
" <span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#before\">before</a> = &amp;<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>posix_unblock_lock - stop waiting for a file lock</span>", 
"<span class=\"comment\"> *      @filp:   how the file was opened</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@waiter: the lock which was waiting</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>lockd needs to block waiting for locks.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#posix_unblock_lock\">posix_unblock_lock</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#waiter\">waiter</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status\">status</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__locks_delete_block\">__locks_delete_block</a>(<a class=\"id\" href=\"#waiter\">waiter</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#posix_unblock_lock\">posix_unblock_lock</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vfs_cancel_lock - file byte range unblock lock</span>", 
"<span class=\"comment\"> * @filp: The file to apply the unblock to</span>", 
"<span class=\"comment\"> * @fl: The lock to be unblocked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Used by lock managers to cancel blocked requests</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#vfs_cancel_lock\">vfs_cancel_lock</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a> && <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#lock\">lock</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#F_CANCELLK\">F_CANCELLK</a>, <a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#vfs_cancel_lock\">vfs_cancel_lock</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static void <a class=\"id\" href=\"#lock_get_status\">lock_get_status</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#f\">f</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#id\">id</a>, char *<a class=\"id\" href=\"#pfx\">pfx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#fl_pid\">fl_pid</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_nspid\">fl_nspid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl_pid\">fl_pid</a> = <a class=\"id\" href=\"#pid_vnr\">pid_vnr</a>(<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_nspid\">fl_nspid</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fl_pid\">fl_pid</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_pid\">fl_pid</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#f\">f</a>, \"%d:%s \", <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#pfx\">pfx</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_POSIX\">IS_POSIX</a>(<a class=\"id\" href=\"#fl\">fl</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#f\">f</a>, \"%6s %s \",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_flags\">fl_flags</a> &amp; <a class=\"id\" href=\"#FL_ACCESS\">FL_ACCESS</a>) ? \"ACCESS\" : \"POSIX \",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#inode\">inode</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) ? \"*NOINODE*\" :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#mandatory_lock\">mandatory_lock</a>(<a class=\"id\" href=\"#inode\">inode</a>) ? \"MANDATORY\" : \"ADVISORY \");", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#IS_FLOCK\">IS_FLOCK</a>(<a class=\"id\" href=\"#fl\">fl</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; <a class=\"id\" href=\"#LOCK_MAND\">LOCK_MAND</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#f\">f</a>, \"FLOCK  MSNFS     \");", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#f\">f</a>, \"FLOCK  ADVISORY  \");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#IS_LEASE\">IS_LEASE</a>(<a class=\"id\" href=\"#fl\">fl</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#f\">f</a>, \"LEASE  \");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; <a class=\"id\" href=\"#F_INPROGRESS\">F_INPROGRESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#f\">f</a>, \"BREAKING  \");", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_file\">fl_file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#f\">f</a>, \"ACTIVE    \");", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#f\">f</a>, \"BREAKER   \");", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#f\">f</a>, \"UNKNOWN UNKNOWN  \");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; <a class=\"id\" href=\"#LOCK_MAND\">LOCK_MAND</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#f\">f</a>, \"%s \",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; <a class=\"id\" href=\"#LOCK_READ\">LOCK_READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       ? (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; <a class=\"id\" href=\"#LOCK_WRITE\">LOCK_WRITE</a>) ? \"RW   \" : \"READ \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       : (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; <a class=\"id\" href=\"#LOCK_WRITE\">LOCK_WRITE</a>) ? \"WRITE\" : \"NONE \");", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#f\">f</a>, \"%s \",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; <a class=\"id\" href=\"#F_INPROGRESS\">F_INPROGRESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       ? (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; <a class=\"id\" href=\"#F_UNLCK\">F_UNLCK</a>) ? \"UNLCK\" : \"READ \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       : (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; <a class=\"id\" href=\"#F_WRLCK\">F_WRLCK</a>) ? \"WRITE\" : \"READ \");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#WE_CAN_BREAK_LSLK_NOW\">WE_CAN_BREAK_LSLK_NOW</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#f\">f</a>, \"%d %s:%ld \", <a class=\"id\" href=\"#fl_pid\">fl_pid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_id\">s_id</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>);", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* userspace relies on this representation of dev_t ;-( */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#f\">f</a>, \"%d %02x:%02x:%ld \", <a class=\"id\" href=\"#fl_pid\">fl_pid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_dev\">s_dev</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_dev\">s_dev</a>), <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#f\">f</a>, \"%d <none>:0 \", <a class=\"id\" href=\"#fl_pid\">fl_pid</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_POSIX\">IS_POSIX</a>(<a class=\"id\" href=\"#fl\">fl</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> == <a class=\"id\" href=\"#OFFSET_MAX\">OFFSET_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#f\">f</a>, \"%Ld EOF\\n\", <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#f\">f</a>, \"%Ld %Ld\\n\", <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a>, <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#f\">f</a>, \"0 EOF\\n\");", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#locks_show\">locks_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#f\">f</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>, *<a class=\"id\" href=\"#bfl\">bfl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl\">fl</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#v\">v</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a>, <a class=\"id\" href=\"#fl_link\">fl_link</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_get_status\">lock_get_status</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#fl\">fl</a>, (long)<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#private\">private</a>, \"\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#bfl\">bfl</a>, &amp;<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_block\">fl_block</a>, <a class=\"id\" href=\"#fl_block\">fl_block</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_get_status\">lock_get_status</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#bfl\">bfl</a>, (long)<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#private\">private</a>, \" ->\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#private\">private</a>++;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#locks_start\">locks_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#private\">private</a> = (void *)1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_list_start\">seq_list_start</a>(&amp;<a class=\"id\" href=\"#file_lock_list\">file_lock_list</a>, *<a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#locks_next\">locks_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#f\">f</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_list_next\">seq_list_next</a>(<a class=\"id\" href=\"#v\">v</a>, &amp;<a class=\"id\" href=\"#file_lock_list\">file_lock_list</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#locks_stop\">locks_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#f\">f</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>();", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#locks_seq_operations\">locks_seq_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a><span class=\"ts\"/>= <a class=\"id\" href=\"#locks_start\">locks_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a><span class=\"ts\"/>= <a class=\"id\" href=\"#locks_next\">locks_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a><span class=\"ts\"/>= <a class=\"id\" href=\"#locks_stop\">locks_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a><span class=\"ts\"/>= <a class=\"id\" href=\"#locks_show\">locks_show</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#locks_open\">locks_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#filp\">filp</a>, &amp;<a class=\"id\" href=\"#locks_seq_operations\">locks_seq_operations</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#proc_locks_operations\">proc_locks_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#locks_open\">locks_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_release\">seq_release</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#proc_locks_init\">proc_locks_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_create\">proc_create</a>(\"locks\", 0, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#proc_locks_operations\">proc_locks_operations</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#proc_locks_init\">proc_locks_init</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>lock_may_read - checks that the region is free of locks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: the inode that is being read</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@start: the first byte to read</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len: the number of bytes to read</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Emulates Windows locking requirements.  Whole-file</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>mandatory locks (share modes) can prohibit a read and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>byte-range POSIX locks can prohibit a read if they overlap.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>N.B. this function is only ever called</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from knfsd and ownership of locks is never checked.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#lock_may_read\">lock_may_read</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>();", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#fl\">fl</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flock\">i_flock</a>; <a class=\"id\" href=\"#fl\">fl</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#fl\">fl</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_POSIX\">IS_POSIX</a>(<a class=\"id\" href=\"#fl\">fl</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> == <a class=\"id\" href=\"#F_RDLCK\">F_RDLCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> &lt; <a class=\"id\" href=\"#start\">start</a>) || (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> &gt; (<a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#len\">len</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#IS_FLOCK\">IS_FLOCK</a>(<a class=\"id\" href=\"#fl\">fl</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; <a class=\"id\" href=\"#LOCK_MAND\">LOCK_MAND</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; <a class=\"id\" href=\"#LOCK_READ\">LOCK_READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#lock_may_read\">lock_may_read</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>lock_may_write - checks that the region is free of locks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: the inode that is being written</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@start: the first byte to write</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len: the number of bytes to write</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Emulates Windows locking requirements.  Whole-file</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>mandatory locks (share modes) can prohibit a write and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>byte-range POSIX locks can prohibit a write if they overlap.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>N.B. this function is only ever called</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from knfsd and ownership of locks is never checked.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#lock_may_write\">lock_may_write</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>();", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#fl\">fl</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flock\">i_flock</a>; <a class=\"id\" href=\"#fl\">fl</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#fl\">fl</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_next\">fl_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_POSIX\">IS_POSIX</a>(<a class=\"id\" href=\"#fl\">fl</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_end\">fl_end</a> &lt; <a class=\"id\" href=\"#start\">start</a>) || (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_start\">fl_start</a> &gt; (<a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#len\">len</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#IS_FLOCK\">IS_FLOCK</a>(<a class=\"id\" href=\"#fl\">fl</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; <a class=\"id\" href=\"#LOCK_MAND\">LOCK_MAND</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_type\">fl_type</a> &amp; <a class=\"id\" href=\"#LOCK_WRITE\">LOCK_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#lock_may_write\">lock_may_write</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#filelock_init\">filelock_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filelock_cache\">filelock_cache</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"file_lock_cache\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#file_lock\">file_lock</a>), 0, <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_once\">init_once</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#core_initcall\">core_initcall</a>(<a class=\"id\" href=\"#filelock_init\">filelock_init</a>);", 
];
xr_frag_insert('l/2a/f103c796c69fdbd19603080a2b8ef01398e79e.xr', __xr_tmp);
