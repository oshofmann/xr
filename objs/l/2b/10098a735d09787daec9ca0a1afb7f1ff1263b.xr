var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/kernel/posix-timers.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 2002-10-15  Posix Clocks &amp; timers</span>", 
"<span class=\"comment\"> *                           by George Anzinger george@mvista.com</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     Copyright (C) 2002 2003 by MontaVista Software.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 2004-06-01  Fix CLOCK_REALTIME clock/timer TIMER_ABSTIME bug.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     Copyright (C) 2004 Boris Hu</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or (at</span>", 
"<span class=\"comment\"> * your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful, but</span>", 
"<span class=\"comment\"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU</span>", 
"<span class=\"comment\"> * General Public License for more details.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * MontaVista Software | 1237 East Arques Avenue | Sunnyvale | CA 94085 | USA</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* These are all the functions necessary to implement</span>", 
"<span class=\"comment\"> * POSIX clocks &amp; timers</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#posix\">posix</a>-<a class=\"id\" href=\"#timers\">timers</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Management arrays for POSIX timers.<span class=\"ts\"/> Timers are kept in slab memory</span>", 
"<span class=\"comment\"> * Timer ids are allocated by an external routine that keeps track of the</span>", 
"<span class=\"comment\"> * id and the timer.  The external interface is:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * void *idr_find(struct idr *idp, int id);           to find timer_id &lt;id&gt;</span>", 
"<span class=\"comment\"> * int idr_get_new(struct idr *idp, void *ptr);       to get a new id and</span>", 
"<span class=\"comment\"> *                                                    related it to &lt;ptr&gt;</span>", 
"<span class=\"comment\"> * void idr_remove(struct idr *idp, int id);          to release &lt;id&gt;</span>", 
"<span class=\"comment\"> * void idr_init(struct idr *idp);                    to initialize &lt;idp&gt;</span>", 
"<span class=\"comment\"> *                                                    which we supply.</span>", 
"<span class=\"comment\"> * The idr_get_new *may* call slab for more memory so it must not be</span>", 
"<span class=\"comment\"> * called under a spin lock.  Likewise idr_remore may release memory</span>", 
"<span class=\"comment\"> * (but it may be ok to do this under a lock...).</span>", 
"<span class=\"comment\"> * idr_find is just a memory look up and is quite fast.  A -1 return</span>", 
"<span class=\"comment\"> * indicates that the requested id does not exist.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Lets keep our timers in a slab cache :-)</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#posix_timers_cache\">posix_timers_cache</a>;", 
"static struct <a class=\"id\" href=\"#idr\">idr</a> <a class=\"id\" href=\"#posix_timers_id\">posix_timers_id</a>;", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#idr_lock\">idr_lock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * we assume that the new SIGEV_THREAD_ID shares no bits with the other</span>", 
"<span class=\"comment\"> * SIGEV values.  Here we put out an error if this assumption fails.</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#SIGEV_THREAD_ID\">SIGEV_THREAD_ID</a> != (<a class=\"id\" href=\"#SIGEV_THREAD_ID\">SIGEV_THREAD_ID</a> &amp; \\", 
"                       ~(<a class=\"id\" href=\"#SIGEV_SIGNAL\">SIGEV_SIGNAL</a> | <a class=\"id\" href=\"#SIGEV_NONE\">SIGEV_NONE</a> | <a class=\"id\" href=\"#SIGEV_THREAD\">SIGEV_THREAD</a>))", 
"#<a class=\"id\" href=\"#error\">error</a> \"SIGEV_THREAD_ID must not share bit with other SIGEV values!\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The timer ID is turned into a timer address by idr_find().</span>", 
"<span class=\"comment\"> * Verifying a valid ID consists of:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * a) checking that idr_find() returns other than -1.</span>", 
"<span class=\"comment\"> * b) checking that the timer id matches the one in the timer itself.</span>", 
"<span class=\"comment\"> * c) that the timer owner is in the callers thread group.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * CLOCKs: The POSIX standard calls for a couple of clocks and allows us</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    to implement others.  This structure defines the various</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    clocks and allows the possibility of adding others.<span class=\"ts\"/> We</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    provide an interface to add clocks to the table and expect</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    the \"arch\" code to add at least one clock that is high</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    resolution.<span class=\"ts\"/> Here we define the standard CLOCK_REALTIME as a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    1/HZ resolution clock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RESOLUTION: Clock resolution is used to round up timer and interval</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    times, NOT to report clock times, which are reported with as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    much resolution as the system can muster.  In some cases this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    resolution may depend on the underlying clock hardware and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    may not be quantifiable until run time, and only then is the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    necessary code is written.<span class=\"ts\"/>The standard says we should say</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    something about this issue in the documentation...</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTIONS: The CLOCKs structure defines possible functions to handle</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    various clock functions.  For clocks that use the standard</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    system timer code these entries should be NULL.  This will</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    allow dispatch without the overhead of indirect function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    calls.  CLOCKS that depend on other sources (e.g. WWV or GPS)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    must supply functions here, even if the function just returns</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    ENOSYS.  The standard POSIX timer management code assumes the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    following: 1.) The k_itimer struct (sched.h) is used for the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    timer.  2.) The list, it_lock, it_clock, it_id and it_pid</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    fields are not modified by timer code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *          At this time all functions EXCEPT clock_nanosleep can be</span>", 
"<span class=\"comment\"> *          redirected by the CLOCKS structure.  Clock_nanosleep is in</span>", 
"<span class=\"comment\"> *          there, but the code ignores it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Permissions: It is assumed that the clock_settime() function defined</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    for each clock will take care of permission checks.<span class=\"ts\"/> Some</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    clocks may be set able by any user (i.e. local process</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    clocks) others not.<span class=\"ts\"/> Currently the only set able clock we</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    have is CLOCK_REALTIME and its high res counter part, both of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    which we beg off on and pass to do_sys_settimeofday().</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#k_clock\">k_clock</a> <a class=\"id\" href=\"#posix_clocks\">posix_clocks</a>[<a class=\"id\" href=\"#MAX_CLOCKS\">MAX_CLOCKS</a>];", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These ones are defined below.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#common_nsleep\">common_nsleep</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a>, int <a class=\"id\" href=\"#flags\">flags</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#t\">t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#rmtp\">rmtp</a>);", 
"static void <a class=\"id\" href=\"#common_timer_get\">common_timer_get</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *, struct <a class=\"id\" href=\"#itimerspec\">itimerspec</a> *);", 
"static int <a class=\"id\" href=\"#common_timer_set\">common_timer_set</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *, int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#itimerspec\">itimerspec</a> *, struct <a class=\"id\" href=\"#itimerspec\">itimerspec</a> *);", 
"static int <a class=\"id\" href=\"#common_timer_del\">common_timer_del</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#timer\">timer</a>);", 
"", 
"static enum <a class=\"id\" href=\"#hrtimer_restart\">hrtimer_restart</a> <a class=\"id\" href=\"#posix_timer_fn\">posix_timer_fn</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"static struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#lock_timer\">lock_timer</a>(<a class=\"id\" href=\"#timer_t\">timer_t</a> <a class=\"id\" href=\"#timer_id\">timer_id</a>, unsigned long *<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#unlock_timer\">unlock_timer</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#timr\">timr</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_lock\">it_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Call the k_clock hook function if non-null, or the default function.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLOCK_DISPATCH\">CLOCK_DISPATCH</a>(<a class=\"id\" href=\"#clock\">clock</a>, <a class=\"id\" href=\"#call\">call</a>, <a class=\"id\" href=\"#arglist\">arglist</a>) \\", 
" <span class=\"ts\"/>((<a class=\"id\" href=\"#clock\">clock</a>) &lt; 0 ? <a class=\"id\" href=\"#posix_cpu_\">posix_cpu_</a>##<a class=\"id\" href=\"#call\">call</a> <a class=\"id\" href=\"#arglist\">arglist</a> : \\", 
" <span class=\"ts\"/> (<a class=\"id\" href=\"#posix_clocks\">posix_clocks</a>[<a class=\"id\" href=\"#clock\">clock</a>].<a class=\"id\" href=\"#call\">call</a> != <a class=\"id\" href=\"#NULL\">NULL</a> \\", 
" <span class=\"ts\"/>  ? (*<a class=\"id\" href=\"#posix_clocks\">posix_clocks</a>[<a class=\"id\" href=\"#clock\">clock</a>].<a class=\"id\" href=\"#call\">call</a>) <a class=\"id\" href=\"#arglist\">arglist</a> : <a class=\"id\" href=\"#common_\">common_</a>##<a class=\"id\" href=\"#call\">call</a> <a class=\"id\" href=\"#arglist\">arglist</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Default clock hook functions when the struct k_clock passed</span>", 
"<span class=\"comment\"> * to register_posix_clock leaves a function pointer null.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function common_CALL is the default implementation for</span>", 
"<span class=\"comment\"> * the function pointer CALL in struct k_clock.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#common_clock_getres\">common_clock_getres</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = <a class=\"id\" href=\"#posix_clocks\">posix_clocks</a>[<a class=\"id\" href=\"#which_clock\">which_clock</a>].<a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get real time for posix timers</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#common_clock_get\">common_clock_get</a>(<a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_get_real_ts\">ktime_get_real_ts</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#common_clock_set\">common_clock_set</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_sys_settimeofday\">do_sys_settimeofday</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#common_timer_create\">common_timer_create</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#new_timer\">new_timer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_init\">hrtimer_init</a>(&amp;<a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#real\">real</a>.<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>, 0);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#no_timer_create\">no_timer_create</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#new_timer\">new_timer</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#no_nsleep\">no_nsleep</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>, int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tsave\">tsave</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#rmtp\">rmtp</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return nonzero if we know a priori this clockid_t value is bogus.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#invalid_clockid\">invalid_clockid</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#which_clock\">which_clock</a> &lt; 0)<span class=\"ts\"/><span class=\"comment\">/* CPU clock, posix_cpu_* will check it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if ((unsigned) <a class=\"id\" href=\"#which_clock\">which_clock</a> >= <a class=\"id\" href=\"#MAX_CLOCKS\">MAX_CLOCKS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#posix_clocks\">posix_clocks</a>[<a class=\"id\" href=\"#which_clock\">which_clock</a>].<a class=\"id\" href=\"#clock_getres\">clock_getres</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#posix_clocks\">posix_clocks</a>[<a class=\"id\" href=\"#which_clock\">which_clock</a>].<a class=\"id\" href=\"#res\">res</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get monotonic time for posix timers</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#posix_ktime_get_ts\">posix_ktime_get_ts</a>(<a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_get_ts\">ktime_get_ts</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get monotonic time for posix timers</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#posix_get_monotonic_raw\">posix_get_monotonic_raw</a>(<a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#getrawmonotonic\">getrawmonotonic</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"static int <a class=\"id\" href=\"#posix_get_realtime_coarse\">posix_get_realtime_coarse</a>(<a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#current_kernel_time\">current_kernel_time</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#posix_get_monotonic_coarse\">posix_get_monotonic_coarse</a>(<a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#get_monotonic_coarse\">get_monotonic_coarse</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#posix_get_coarse_res\">posix_get_coarse_res</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#ktime_to_timespec\">ktime_to_timespec</a>(<a class=\"id\" href=\"#KTIME_LOW_RES\">KTIME_LOW_RES</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize everything, well, just everything in Posix clocks/timers ;)</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#init_posix_timers\">init_posix_timers</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#k_clock\">k_clock</a> <a class=\"id\" href=\"#clock_realtime\">clock_realtime</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#clock_getres\">clock_getres</a> = <a class=\"id\" href=\"#hrtimer_get_res\">hrtimer_get_res</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#k_clock\">k_clock</a> <a class=\"id\" href=\"#clock_monotonic\">clock_monotonic</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#clock_getres\">clock_getres</a> = <a class=\"id\" href=\"#hrtimer_get_res\">hrtimer_get_res</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#clock_get\">clock_get</a> = <a class=\"id\" href=\"#posix_ktime_get_ts\">posix_ktime_get_ts</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#clock_set\">clock_set</a> = <a class=\"id\" href=\"#do_posix_clock_nosettime\">do_posix_clock_nosettime</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#k_clock\">k_clock</a> <a class=\"id\" href=\"#clock_monotonic_raw\">clock_monotonic_raw</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#clock_getres\">clock_getres</a> = <a class=\"id\" href=\"#hrtimer_get_res\">hrtimer_get_res</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#clock_get\">clock_get</a> = <a class=\"id\" href=\"#posix_get_monotonic_raw\">posix_get_monotonic_raw</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#clock_set\">clock_set</a> = <a class=\"id\" href=\"#do_posix_clock_nosettime\">do_posix_clock_nosettime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#timer_create\">timer_create</a> = <a class=\"id\" href=\"#no_timer_create\">no_timer_create</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nsleep\">nsleep</a> = <a class=\"id\" href=\"#no_nsleep\">no_nsleep</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#k_clock\">k_clock</a> <a class=\"id\" href=\"#clock_realtime_coarse\">clock_realtime_coarse</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#clock_getres\">clock_getres</a> = <a class=\"id\" href=\"#posix_get_coarse_res\">posix_get_coarse_res</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#clock_get\">clock_get</a> = <a class=\"id\" href=\"#posix_get_realtime_coarse\">posix_get_realtime_coarse</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#clock_set\">clock_set</a> = <a class=\"id\" href=\"#do_posix_clock_nosettime\">do_posix_clock_nosettime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#timer_create\">timer_create</a> = <a class=\"id\" href=\"#no_timer_create\">no_timer_create</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nsleep\">nsleep</a> = <a class=\"id\" href=\"#no_nsleep\">no_nsleep</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#k_clock\">k_clock</a> <a class=\"id\" href=\"#clock_monotonic_coarse\">clock_monotonic_coarse</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#clock_getres\">clock_getres</a> = <a class=\"id\" href=\"#posix_get_coarse_res\">posix_get_coarse_res</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#clock_get\">clock_get</a> = <a class=\"id\" href=\"#posix_get_monotonic_coarse\">posix_get_monotonic_coarse</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#clock_set\">clock_set</a> = <a class=\"id\" href=\"#do_posix_clock_nosettime\">do_posix_clock_nosettime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#timer_create\">timer_create</a> = <a class=\"id\" href=\"#no_timer_create\">no_timer_create</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nsleep\">nsleep</a> = <a class=\"id\" href=\"#no_nsleep\">no_nsleep</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_posix_clock\">register_posix_clock</a>(<a class=\"id\" href=\"#CLOCK_REALTIME\">CLOCK_REALTIME</a>, &amp;<a class=\"id\" href=\"#clock_realtime\">clock_realtime</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_posix_clock\">register_posix_clock</a>(<a class=\"id\" href=\"#CLOCK_MONOTONIC\">CLOCK_MONOTONIC</a>, &amp;<a class=\"id\" href=\"#clock_monotonic\">clock_monotonic</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_posix_clock\">register_posix_clock</a>(<a class=\"id\" href=\"#CLOCK_MONOTONIC_RAW\">CLOCK_MONOTONIC_RAW</a>, &amp;<a class=\"id\" href=\"#clock_monotonic_raw\">clock_monotonic_raw</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_posix_clock\">register_posix_clock</a>(<a class=\"id\" href=\"#CLOCK_REALTIME_COARSE\">CLOCK_REALTIME_COARSE</a>, &amp;<a class=\"id\" href=\"#clock_realtime_coarse\">clock_realtime_coarse</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_posix_clock\">register_posix_clock</a>(<a class=\"id\" href=\"#CLOCK_MONOTONIC_COARSE\">CLOCK_MONOTONIC_COARSE</a>, &amp;<a class=\"id\" href=\"#clock_monotonic_coarse\">clock_monotonic_coarse</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#posix_timers_cache\">posix_timers_cache</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"posix_timers_cache\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof (struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a>), 0, <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idr_init\">idr_init</a>(&amp;<a class=\"id\" href=\"#posix_timers_id\">posix_timers_id</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#__initcall\">__initcall</a>(<a class=\"id\" href=\"#init_posix_timers\">init_posix_timers</a>);", 
"", 
"static void <a class=\"id\" href=\"#schedule_next_timer\">schedule_next_timer</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#timr\">timr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a> = &amp;<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#real\">real</a>.<a class=\"id\" href=\"#timer\">timer</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#real\">real</a>.<a class=\"id\" href=\"#interval\">interval</a>.<a class=\"id\" href=\"#tv64\">tv64</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_overrun\">it_overrun</a> += (unsigned int) <a class=\"id\" href=\"#hrtimer_forward\">hrtimer_forward</a>(<a class=\"id\" href=\"#timer\">timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#get_time\">get_time</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#real\">real</a>.<a class=\"id\" href=\"#interval\">interval</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_overrun_last\">it_overrun_last</a> = <a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_overrun\">it_overrun</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_overrun\">it_overrun</a> = -1;", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_requeue_pending\">it_requeue_pending</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_restart\">hrtimer_restart</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function is exported for use by the signal deliver code.  It is</span>", 
"<span class=\"comment\"> * called just prior to the info block being released and passes that</span>", 
"<span class=\"comment\"> * block to us.  It's function is to update the overrun entry AND to</span>", 
"<span class=\"comment\"> * restart the timer.  It should only be called if the timer is to be</span>", 
"<span class=\"comment\"> * restarted (i.e. we have flagged this in the sys_private entry of the</span>", 
"<span class=\"comment\"> * info block).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To protect aginst the timer going away while the interrupt is queued,</span>", 
"<span class=\"comment\"> * we require that the it_requeue_pending flag be set.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#do_schedule_next_timer\">do_schedule_next_timer</a>(struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#timr\">timr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timr\">timr</a> = <a class=\"id\" href=\"#lock_timer\">lock_timer</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#si_tid\">si_tid</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timr\">timr</a> && <a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_requeue_pending\">it_requeue_pending</a> == <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#si_sys_private\">si_sys_private</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#posix_cpu_timer_schedule\">posix_cpu_timer_schedule</a>(<a class=\"id\" href=\"#timr\">timr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_next_timer\">schedule_next_timer</a>(<a class=\"id\" href=\"#timr\">timr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#si_overrun\">si_overrun</a> += <a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_overrun_last\">it_overrun_last</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timr\">timr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_timer\">unlock_timer</a>(<a class=\"id\" href=\"#timr\">timr</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#posix_timer_event\">posix_timer_event</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#timr\">timr</a>, int <a class=\"id\" href=\"#si_private\">si_private</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#shared\">shared</a>, <a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * FIXME: if -&gt;sigq is queued we can race with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dequeue_signal()-&gt;do_schedule_next_timer().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If dequeue_signal() sees the \"right\" value of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * si_sys_private it calls do_schedule_next_timer().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We re-queue -&gt;sigq and drop -&gt;it_lock().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do_schedule_next_timer() locks the timer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and re-schedules it while -&gt;sigq is pending.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Not really bad, but not that we want.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#sigq\">sigq</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_sys_private\">si_sys_private</a> = <a class=\"id\" href=\"#si_private\">si_private</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#pid_task\">pid_task</a>(<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_pid\">it_pid</a>, <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shared\">shared</a> = !(<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_sigev_notify\">it_sigev_notify</a> &amp; <a class=\"id\" href=\"#SIGEV_THREAD_ID\">SIGEV_THREAD_ID</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#send_sigqueue\">send_sigqueue</a>(<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#sigq\">sigq</a>, <a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#shared\">shared</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* If we failed to send the signal the timer stops. */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> &gt; 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#posix_timer_event\">posix_timer_event</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function gets called when a POSIX.1b interval timer expires.  It</span>", 
"<span class=\"comment\"> * is used as a callback from the kernel internal timer.  The</span>", 
"<span class=\"comment\"> * run_timer_list code ALWAYS calls with interrupts on.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"> * This code is for CLOCK_REALTIME* and CLOCK_MONOTONIC* timers.</span>", 
"<span class=\"comment\"> */</span>", 
"static enum <a class=\"id\" href=\"#hrtimer_restart\">hrtimer_restart</a> <a class=\"id\" href=\"#posix_timer_fn\">posix_timer_fn</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#timr\">timr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#si_private\">si_private</a> = 0;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#hrtimer_restart\">hrtimer_restart</a> <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#HRTIMER_NORESTART\">HRTIMER_NORESTART</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timr\">timr</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#timer\">timer</a>, struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a>, <a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#real\">real</a>.<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_lock\">it_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#real\">real</a>.<a class=\"id\" href=\"#interval\">interval</a>.<a class=\"id\" href=\"#tv64\">tv64</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#si_private\">si_private</a> = ++<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_requeue_pending\">it_requeue_pending</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#posix_timer_event\">posix_timer_event</a>(<a class=\"id\" href=\"#timr\">timr</a>, <a class=\"id\" href=\"#si_private\">si_private</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * signal was not sent because of sig_ignor</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we will not get a call back to restart it AND</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it should be restarted.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#real\">real</a>.<a class=\"id\" href=\"#interval\">interval</a>.<a class=\"id\" href=\"#tv64\">tv64</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#hrtimer_cb_get_time\">hrtimer_cb_get_time</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * FIXME: What we really want, is to stop this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * timer completely and restart it in case the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * SIG_IGN is removed. This is a non trivial</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * change which involves sighand locking</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * (sigh !), which we don't want to do late in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the release cycle.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * For now we just let timers with an interval</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * less than a jiffie expire every jiffie to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * avoid softirq starvation in case of SIG_IGN</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and a very small interval, which would put</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the timer right back on the softirq pending</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * list. By moving now ahead of time we trick</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * hrtimer_forward() to expire the timer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * later, while we still maintain the overrun</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * accuracy, but have some inconsistency in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the timer_gettime() case. This is at least</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * better than a starved softirq. A more</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * complex fix which solves also another related</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * inconsistency is already in the pipeline.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGH_RES_TIMERS\">CONFIG_HIGH_RES_TIMERS</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#kj\">kj</a> = <a class=\"id\" href=\"#ktime_set\">ktime_set</a>(0, <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> / <a class=\"id\" href=\"#HZ\">HZ</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#real\">real</a>.<a class=\"id\" href=\"#interval\">interval</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &lt; <a class=\"id\" href=\"#kj\">kj</a>.<a class=\"id\" href=\"#tv64\">tv64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#ktime_add\">ktime_add</a>(<a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#kj\">kj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_overrun\">it_overrun</a> += (unsigned int)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_forward\">hrtimer_forward</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#now\">now</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#real\">real</a>.<a class=\"id\" href=\"#interval\">interval</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#HRTIMER_RESTART\">HRTIMER_RESTART</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_requeue_pending\">it_requeue_pending</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_timer\">unlock_timer</a>(<a class=\"id\" href=\"#timr\">timr</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#good_sigevent\">good_sigevent</a>(<a class=\"id\" href=\"#sigevent_t\">sigevent_t</a> * <a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#sigev_notify\">sigev_notify</a> &amp; <a class=\"id\" href=\"#SIGEV_THREAD_ID\">SIGEV_THREAD_ID</a> ) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>(!(<a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#find_task_by_vpid\">find_task_by_vpid</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#sigev_notify_thread_id\">sigev_notify_thread_id</a>)) ||", 
"<span class=\"ts\"/><span class=\"ts\"/> !<a class=\"id\" href=\"#same_thread_group\">same_thread_group</a>(<a class=\"id\" href=\"#rtn\">rtn</a>, <a class=\"id\" href=\"#current\">current</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#sigev_notify\">sigev_notify</a> &amp; ~<a class=\"id\" href=\"#SIGEV_THREAD_ID\">SIGEV_THREAD_ID</a>) != <a class=\"id\" href=\"#SIGEV_SIGNAL\">SIGEV_SIGNAL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (((<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#sigev_notify\">sigev_notify</a> &amp; ~<a class=\"id\" href=\"#SIGEV_THREAD_ID\">SIGEV_THREAD_ID</a>) != <a class=\"id\" href=\"#SIGEV_NONE\">SIGEV_NONE</a>) &&", 
"<span class=\"ts\"/>    ((<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#sigev_signo\">sigev_signo</a> <= 0) || (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#sigev_signo\">sigev_signo</a> &gt; <a class=\"id\" href=\"#SIGRTMAX\">SIGRTMAX</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task_pid\">task_pid</a>(<a class=\"id\" href=\"#rtn\">rtn</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#register_posix_clock\">register_posix_clock</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#clock_id\">clock_id</a>, struct <a class=\"id\" href=\"#k_clock\">k_clock</a> *<a class=\"id\" href=\"#new_clock\">new_clock</a>)", 
"{", 
"<span class=\"ts\"/>if ((unsigned) <a class=\"id\" href=\"#clock_id\">clock_id</a> >= <a class=\"id\" href=\"#MAX_CLOCKS\">MAX_CLOCKS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"POSIX clock register failed for clock_id %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#clock_id\">clock_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#posix_clocks\">posix_clocks</a>[<a class=\"id\" href=\"#clock_id\">clock_id</a>] = *<a class=\"id\" href=\"#new_clock\">new_clock</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#register_posix_clock\">register_posix_clock</a>);", 
"", 
"static struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> * <a class=\"id\" href=\"#alloc_posix_timer\">alloc_posix_timer</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#tmr\">tmr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmr\">tmr</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#posix_timers_cache\">posix_timers_cache</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tmr\">tmr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tmr\">tmr</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#tmr\">tmr</a>-><a class=\"id\" href=\"#sigq\">sigq</a> = <a class=\"id\" href=\"#sigqueue_alloc\">sigqueue_alloc</a>()))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#posix_timers_cache\">posix_timers_cache</a>, <a class=\"id\" href=\"#tmr\">tmr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#tmr\">tmr</a>-><a class=\"id\" href=\"#sigq\">sigq</a>-><a class=\"id\" href=\"#info\">info</a>, 0, sizeof(<a class=\"id\" href=\"#siginfo_t\">siginfo_t</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tmr\">tmr</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IT_ID_SET\">IT_ID_SET</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IT_ID_NOT_SET\">IT_ID_NOT_SET</a><span class=\"ts\"/>0", 
"static void <a class=\"id\" href=\"#release_posix_timer\">release_posix_timer</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#tmr\">tmr</a>, int <a class=\"id\" href=\"#it_id_set\">it_id_set</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#it_id_set\">it_id_set</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#idr_lock\">idr_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idr_remove\">idr_remove</a>(&amp;<a class=\"id\" href=\"#posix_timers_id\">posix_timers_id</a>, <a class=\"id\" href=\"#tmr\">tmr</a>-><a class=\"id\" href=\"#it_id\">it_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#idr_lock\">idr_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_pid\">put_pid</a>(<a class=\"id\" href=\"#tmr\">tmr</a>-><a class=\"id\" href=\"#it_pid\">it_pid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigqueue_free\">sigqueue_free</a>(<a class=\"id\" href=\"#tmr\">tmr</a>-><a class=\"id\" href=\"#sigq\">sigq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#posix_timers_cache\">posix_timers_cache</a>, <a class=\"id\" href=\"#tmr\">tmr</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Create a POSIX.1b interval timer. */</span>", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE3\">SYSCALL_DEFINE3</a>(<a class=\"id\" href=\"#timer_create\">timer_create</a>, const <a class=\"id\" href=\"#clockid_t\">clockid_t</a>, <a class=\"id\" href=\"#which_clock\">which_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sigevent\">sigevent</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#timer_event_spec\">timer_event_spec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer_t\">timer_t</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#created_timer_id\">created_timer_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#new_timer\">new_timer</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#new_timer_id\">new_timer_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigevent_t\">sigevent_t</a> <a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#it_id_set\">it_id_set</a> = <a class=\"id\" href=\"#IT_ID_NOT_SET\">IT_ID_NOT_SET</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#invalid_clockid\">invalid_clockid</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_timer\">new_timer</a> = <a class=\"id\" href=\"#alloc_posix_timer\">alloc_posix_timer</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#new_timer\">new_timer</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#it_lock\">it_lock</a>);", 
" <a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#idr_pre_get\">idr_pre_get</a>(&amp;<a class=\"id\" href=\"#posix_timers_id\">posix_timers_id</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#idr_lock\">idr_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#idr_get_new\">idr_get_new</a>(&amp;<a class=\"id\" href=\"#posix_timers_id\">posix_timers_id</a>, <a class=\"id\" href=\"#new_timer\">new_timer</a>, &amp;<a class=\"id\" href=\"#new_timer_id\">new_timer_id</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#idr_lock\">idr_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Weird looking, but we return EAGAIN if the IDR is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * full (proper POSIX return value for this)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#it_id_set\">it_id_set</a> = <a class=\"id\" href=\"#IT_ID_SET\">IT_ID_SET</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#it_id\">it_id</a> = (<a class=\"id\" href=\"#timer_t\">timer_t</a>) <a class=\"id\" href=\"#new_timer_id\">new_timer_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a> = <a class=\"id\" href=\"#which_clock\">which_clock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#it_overrun\">it_overrun</a> = -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timer_event_spec\">timer_event_spec</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#timer_event_spec\">timer_event_spec</a>, sizeof (<a class=\"id\" href=\"#event\">event</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#it_pid\">it_pid</a> = <a class=\"id\" href=\"#get_pid\">get_pid</a>(<a class=\"id\" href=\"#good_sigevent\">good_sigevent</a>(&amp;<a class=\"id\" href=\"#event\">event</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#it_pid\">it_pid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#sigev_notify\">sigev_notify</a> = <a class=\"id\" href=\"#SIGEV_SIGNAL\">SIGEV_SIGNAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#sigev_signo\">sigev_signo</a> = <a class=\"id\" href=\"#SIGALRM\">SIGALRM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#sigev_value\">sigev_value</a>.<a class=\"id\" href=\"#sival_int\">sival_int</a> = <a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#it_id\">it_id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#it_pid\">it_pid</a> = <a class=\"id\" href=\"#get_pid\">get_pid</a>(<a class=\"id\" href=\"#task_tgid\">task_tgid</a>(<a class=\"id\" href=\"#current\">current</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#it_sigev_notify\">it_sigev_notify</a>     = <a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#sigev_notify\">sigev_notify</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#sigq\">sigq</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_signo\">si_signo</a> = <a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#sigev_signo\">sigev_signo</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#sigq\">sigq</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_value\">si_value</a> = <a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#sigev_value\">sigev_value</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#sigq\">sigq</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_tid\">si_tid</a>   = <a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#it_id\">it_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#sigq\">sigq</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_code\">si_code</a>  = <a class=\"id\" href=\"#SI_TIMER\">SI_TIMER</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#created_timer_id\">created_timer_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#new_timer_id\">new_timer_id</a>, sizeof (<a class=\"id\" href=\"#new_timer_id\">new_timer_id</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#CLOCK_DISPATCH\">CLOCK_DISPATCH</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>, <a class=\"id\" href=\"#timer_create\">timer_create</a>, (<a class=\"id\" href=\"#new_timer\">new_timer</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#it_signal\">it_signal</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#posix_timers\">posix_timers</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
" <span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In the case of the timer belonging to another task, after</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the task is unlocked, the timer is owned by the other task</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and may cease to exist at any time.  Don't use or modify</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * new_timer after the unlock call.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_posix_timer\">release_posix_timer</a>(<a class=\"id\" href=\"#new_timer\">new_timer</a>, <a class=\"id\" href=\"#it_id_set\">it_id_set</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Locking issues: We need to protect the result of the id look up until</span>", 
"<span class=\"comment\"> * we get the timer locked down so it is not deleted under us.  The</span>", 
"<span class=\"comment\"> * removal is done under the idr spinlock so we use that here to bridge</span>", 
"<span class=\"comment\"> * the find to the timer lock.  To avoid a dead lock, the timer id MUST</span>", 
"<span class=\"comment\"> * be release with out holding the timer lock.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#lock_timer\">lock_timer</a>(<a class=\"id\" href=\"#timer_t\">timer_t</a> <a class=\"id\" href=\"#timer_id\">timer_id</a>, unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#timr\">timr</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Watch out here.  We do a irqsave on the idr_lock and pass the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * flags part over to the timer lock.  Must not let interrupts in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * while we are moving the lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#idr_lock\">idr_lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timr\">timr</a> = <a class=\"id\" href=\"#idr_find\">idr_find</a>(&amp;<a class=\"id\" href=\"#posix_timers_id\">posix_timers_id</a>, (int)<a class=\"id\" href=\"#timer_id\">timer_id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timr\">timr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_lock\">it_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_signal\">it_signal</a> == <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#idr_lock\">idr_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#timr\">timr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_lock\">it_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#idr_lock\">idr_lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get the time remaining on a POSIX.1b interval timer.  This function</span>", 
"<span class=\"comment\"> * is ALWAYS called with spin_lock_irq on the timer, thus it must not</span>", 
"<span class=\"comment\"> * mess with irq.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We have a couple of messes to clean up here.  First there is the case</span>", 
"<span class=\"comment\"> * of a timer that has a requeue pending.  These timers should appear to</span>", 
"<span class=\"comment\"> * be in the timer list with an expiry as if we were to requeue them</span>", 
"<span class=\"comment\"> * now.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The second issue is the SIGEV_NONE timer which may be active but is</span>", 
"<span class=\"comment\"> * not really ever put in the timer list (to save system resources).</span>", 
"<span class=\"comment\"> * This timer may be expired, and if so, we will do it here.  Otherwise</span>", 
"<span class=\"comment\"> * it is the same as a requeue pending timer WRT to what we should</span>", 
"<span class=\"comment\"> * report.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#common_timer_get\">common_timer_get</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#timr\">timr</a>, struct <a class=\"id\" href=\"#itimerspec\">itimerspec</a> *<a class=\"id\" href=\"#cur_setting\">cur_setting</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#remaining\">remaining</a>, <a class=\"id\" href=\"#iv\">iv</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a> = &amp;<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#real\">real</a>.<a class=\"id\" href=\"#timer\">timer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#cur_setting\">cur_setting</a>, 0, sizeof(struct <a class=\"id\" href=\"#itimerspec\">itimerspec</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iv\">iv</a> = <a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#real\">real</a>.<a class=\"id\" href=\"#interval\">interval</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* interval timer ? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iv\">iv</a>.<a class=\"id\" href=\"#tv64\">tv64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur_setting\">cur_setting</a>-><a class=\"id\" href=\"#it_interval\">it_interval</a> = <a class=\"id\" href=\"#ktime_to_timespec\">ktime_to_timespec</a>(<a class=\"id\" href=\"#iv\">iv</a>);", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#hrtimer_active\">hrtimer_active</a>(<a class=\"id\" href=\"#timer\">timer</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_sigev_notify\">it_sigev_notify</a> &amp; ~<a class=\"id\" href=\"#SIGEV_THREAD_ID\">SIGEV_THREAD_ID</a>) != <a class=\"id\" href=\"#SIGEV_NONE\">SIGEV_NONE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#get_time\">get_time</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When a requeue is pending or this is a SIGEV_NONE</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * timer move the expiry time forward by intervals, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * expiry is &gt; now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iv\">iv</a>.<a class=\"id\" href=\"#tv64\">tv64</a> && (<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_requeue_pending\">it_requeue_pending</a> &amp; <a class=\"id\" href=\"#REQUEUE_PENDING\">REQUEUE_PENDING</a> ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_sigev_notify\">it_sigev_notify</a> &amp; ~<a class=\"id\" href=\"#SIGEV_THREAD_ID\">SIGEV_THREAD_ID</a>) == <a class=\"id\" href=\"#SIGEV_NONE\">SIGEV_NONE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_overrun\">it_overrun</a> += (unsigned int) <a class=\"id\" href=\"#hrtimer_forward\">hrtimer_forward</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#iv\">iv</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remaining\">remaining</a> = <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#hrtimer_get_expires\">hrtimer_get_expires</a>(<a class=\"id\" href=\"#timer\">timer</a>), <a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Return 0 only, when the timer is expired and not pending */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#remaining\">remaining</a>.<a class=\"id\" href=\"#tv64\">tv64</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * A single shot SIGEV_NONE timer must return 0, when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it is expired !</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_sigev_notify\">it_sigev_notify</a> &amp; ~<a class=\"id\" href=\"#SIGEV_THREAD_ID\">SIGEV_THREAD_ID</a>) != <a class=\"id\" href=\"#SIGEV_NONE\">SIGEV_NONE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur_setting\">cur_setting</a>-><a class=\"id\" href=\"#it_value\">it_value</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = 1;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur_setting\">cur_setting</a>-><a class=\"id\" href=\"#it_value\">it_value</a> = <a class=\"id\" href=\"#ktime_to_timespec\">ktime_to_timespec</a>(<a class=\"id\" href=\"#remaining\">remaining</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Get the time remaining on a POSIX.1b interval timer. */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#timer_gettime\">timer_gettime</a>, <a class=\"id\" href=\"#timer_t\">timer_t</a>, <a class=\"id\" href=\"#timer_id\">timer_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#itimerspec\">itimerspec</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#setting\">setting</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#timr\">timr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#itimerspec\">itimerspec</a> <a class=\"id\" href=\"#cur_setting\">cur_setting</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timr\">timr</a> = <a class=\"id\" href=\"#lock_timer\">lock_timer</a>(<a class=\"id\" href=\"#timer_id\">timer_id</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#timr\">timr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CLOCK_DISPATCH\">CLOCK_DISPATCH</a>(<a class=\"id\" href=\"#timr\">timr</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>, <a class=\"id\" href=\"#timer_get\">timer_get</a>, (<a class=\"id\" href=\"#timr\">timr</a>, &amp;<a class=\"id\" href=\"#cur_setting\">cur_setting</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_timer\">unlock_timer</a>(<a class=\"id\" href=\"#timr\">timr</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#setting\">setting</a>, &amp;<a class=\"id\" href=\"#cur_setting\">cur_setting</a>, sizeof (<a class=\"id\" href=\"#cur_setting\">cur_setting</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get the number of overruns of a POSIX.1b interval timer.  This is to</span>", 
];
xr_frag_insert('l/2b/10098a735d09787daec9ca0a1afb7f1ff1263b.xr', __xr_tmp);
