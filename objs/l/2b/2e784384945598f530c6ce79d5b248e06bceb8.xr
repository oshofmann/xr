var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_parse_aligned_timestamp\">tcp_parse_aligned_timestamp</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#th\">th</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_parse_options\">tcp_parse_options</a>(<a class=\"id\" href=\"#skb\">skb</a>, &amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>, <a class=\"id\" href=\"#hvpp\">hvpp</a>, 1);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TCP_MD5SIG\">CONFIG_TCP_MD5SIG</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Parse MD5 Signature option</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#tcp_parse_md5sig_option\">tcp_parse_md5sig_option</a>(struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a> *<a class=\"id\" href=\"#th\">th</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#length\">length</a> = (<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#doff\">doff</a> << 2) - sizeof (*<a class=\"id\" href=\"#th\">th</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ptr\">ptr</a> = (<a class=\"id\" href=\"#u8\">u8</a>*)(<a class=\"id\" href=\"#th\">th</a> + 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the TCP option is too short, we can short cut */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> &lt; <a class=\"id\" href=\"#TCPOLEN_MD5SIG\">TCPOLEN_MD5SIG</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#length\">length</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#opcode\">opcode</a> = *<a class=\"id\" href=\"#ptr\">ptr</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#opsize\">opsize</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch(<a class=\"id\" href=\"#opcode\">opcode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#TCPOPT_EOL\">TCPOPT_EOL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#TCPOPT_NOP\">TCPOPT_NOP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opsize\">opsize</a> = *<a class=\"id\" href=\"#ptr\">ptr</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#opsize\">opsize</a> &lt; 2 || <a class=\"id\" href=\"#opsize\">opsize</a> &gt; <a class=\"id\" href=\"#length\">length</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#opcode\">opcode</a> == <a class=\"id\" href=\"#TCPOPT_MD5SIG\">TCPOPT_MD5SIG</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#opsize\">opsize</a> == <a class=\"id\" href=\"#TCPOLEN_MD5SIG\">TCPOLEN_MD5SIG</a> ? <a class=\"id\" href=\"#ptr\">ptr</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> += <a class=\"id\" href=\"#opsize\">opsize</a> - 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> -= <a class=\"id\" href=\"#opsize\">opsize</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tcp_parse_md5sig_option\">tcp_parse_md5sig_option</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_store_ts_recent\">tcp_store_ts_recent</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#ts_recent\">ts_recent</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#rcv_tsval\">rcv_tsval</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#ts_recent_stamp\">ts_recent_stamp</a> = <a class=\"id\" href=\"#get_seconds\">get_seconds</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_replace_ts_recent\">tcp_replace_ts_recent</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#seq\">seq</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#saw_tstamp\">saw_tstamp</a> && !<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_wup\">rcv_wup</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* PAWS bug workaround wrt. ACK frames, the PAWS discard</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * extra check below makes sure this can only happen</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for pure ACK frames.  -DaveM</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Not only, also it occurs for expired timestamps.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_paws_check\">tcp_paws_check</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_store_ts_recent\">tcp_store_ts_recent</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Sorry, PAWS as specified is broken wrt. pure-ACKs -DaveM</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is not fatal. If this ACK does _not_ change critical state (seqs, window)</span>", 
"<span class=\"comment\"> * it can pass through stack. So, the following predicate verifies that</span>", 
"<span class=\"comment\"> * this segment is not used for anything but congestion avoidance or</span>", 
"<span class=\"comment\"> * fast retransmit. Moreover, we even are able to eliminate most of such</span>", 
"<span class=\"comment\"> * second order effects, if we apply some small \"replay\" window (~RTO)</span>", 
"<span class=\"comment\"> * to timestamp space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All these measures still do not guarantee that we reject wrapped ACKs</span>", 
"<span class=\"comment\"> * on networks with high bandwidth, when sequence space is recycled fastly,</span>", 
"<span class=\"comment\"> * but it guarantees that such events will be very rare and do not affect</span>", 
"<span class=\"comment\"> * connection seriously. This doesn't look nice, but alas, PAWS is really</span>", 
"<span class=\"comment\"> * buggy extension.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * [ Later note. Even worse! It is buggy for segments _with_ data. RFC</span>", 
"<span class=\"comment\"> * states that events when retransmit arrives after original data are rare.</span>", 
"<span class=\"comment\"> * It is a blatant lie. VJ forgot about fast retransmit! 8)8) It is</span>", 
"<span class=\"comment\"> * the biggest problem on large power networks even with minor reordering.</span>", 
"<span class=\"comment\"> * OK, let's give it small replay window. If peer clock is even 1hz, it is safe</span>", 
"<span class=\"comment\"> * up to bandwidth of 18Gigabit/sec. 8) ]</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#tcp_disordered_ack\">tcp_disordered_ack</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a> *<a class=\"id\" href=\"#th\">th</a> = <a class=\"id\" href=\"#tcp_hdr\">tcp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ack\">ack</a> = <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#ack_seq\">ack_seq</a>;", 
"", 
"<span class=\"ts\"/>return (<span class=\"comment\">/* 1. Pure ACK with correct sequence number. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#ack\">ack</a> && <a class=\"id\" href=\"#seq\">seq</a> == <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a> && <a class=\"id\" href=\"#seq\">seq</a> == <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_nxt\">rcv_nxt</a>) &&", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 2. ... and duplicate ACK. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ack\">ack</a> == <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a> &&", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 3. ... and does not update window. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#tcp_may_update_window\">tcp_may_update_window</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#ack\">ack</a>, <a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#window\">window</a>) << <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#snd_wscale\">snd_wscale</a>) &&", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 4. ... and sits in replay window. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#s32\">s32</a>)(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#ts_recent\">ts_recent</a> - <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#rcv_tsval\">rcv_tsval</a>) <= (<a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_rto\">icsk_rto</a> * 1024) / <a class=\"id\" href=\"#HZ\">HZ</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#tcp_paws_discard\">tcp_paws_discard</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#tcp_paws_check\">tcp_paws_check</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>, <a class=\"id\" href=\"#TCP_PAWS_WINDOW\">TCP_PAWS_WINDOW</a>) &&", 
"<span class=\"ts\"/>       !<a class=\"id\" href=\"#tcp_disordered_ack\">tcp_disordered_ack</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Check segment sequence number for validity.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Segment controls are considered valid, if the segment</span>", 
"<span class=\"comment\"> * fits to the window after truncation to the window. Acceptability</span>", 
"<span class=\"comment\"> * of data (and SYN, FIN, of course) is checked separately.</span>", 
"<span class=\"comment\"> * See tcp_data_queue(), for example.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Also, controls (RST is main one) are accepted using RCV.WUP instead</span>", 
"<span class=\"comment\"> * of RCV.NXT. Peer still did not advance his SND.UNA when we</span>", 
"<span class=\"comment\"> * delayed ACK, so that hisSND.UNA&lt;=ourRCV.WUP.</span>", 
"<span class=\"comment\"> * (borrowed from freebsd)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#tcp_sequence\">tcp_sequence</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#end_seq\">end_seq</a>)", 
"{", 
"<span class=\"ts\"/>return<span class=\"ts\"/>!<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_wup\">rcv_wup</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_nxt\">rcv_nxt</a> + <a class=\"id\" href=\"#tcp_receive_window\">tcp_receive_window</a>(<a class=\"id\" href=\"#tp\">tp</a>));", 
"}", 
"", 
"<span class=\"comment\">/* When we get a reset we do this. */</span>", 
"static void <a class=\"id\" href=\"#tcp_reset\">tcp_reset</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* We want the right error as BSD sees it (and indeed as we do). */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_state\">sk_state</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TCP_SYN_SENT\">TCP_SYN_SENT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_err\">sk_err</a> = <a class=\"id\" href=\"#ECONNREFUSED\">ECONNREFUSED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TCP_CLOSE_WAIT\">TCP_CLOSE_WAIT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_err\">sk_err</a> = <a class=\"id\" href=\"#EPIPE\">EPIPE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TCP_CLOSE\">TCP_CLOSE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_err\">sk_err</a> = <a class=\"id\" href=\"#ECONNRESET\">ECONNRESET</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* This barrier is coupled with smp_rmb() in tcp_poll() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_DEAD\">SOCK_DEAD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_error_report\">sk_error_report</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_done\">tcp_done</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Process the FIN bit. This now behaves as it is supposed to work</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and the FIN takes effect when it is validly part of sequence</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>space. Not before when we get holes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If we are ESTABLISHED, a received fin moves us to CLOSE-WAIT</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(and thence onto LAST-ACK and finally, CLOSE, we never enter</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>TIME-WAIT)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If we are in FINWAIT-1, a received FIN indicates simultaneous</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>close and we go into CLOSING (and later onto TIME-WAIT)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If we are in FINWAIT-2, a received FIN moves us to TIME-WAIT.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tcp_fin\">tcp_fin</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a> *<a class=\"id\" href=\"#th\">th</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet_csk_schedule_ack\">inet_csk_schedule_ack</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_shutdown\">sk_shutdown</a> |= <a class=\"id\" href=\"#RCV_SHUTDOWN\">RCV_SHUTDOWN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_set_flag\">sock_set_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_DONE\">SOCK_DONE</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_state\">sk_state</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TCP_SYN_RECV\">TCP_SYN_RECV</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TCP_ESTABLISHED\">TCP_ESTABLISHED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Move to CLOSE_WAIT */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_set_state\">tcp_set_state</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#TCP_CLOSE_WAIT\">TCP_CLOSE_WAIT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#pingpong\">pingpong</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TCP_CLOSE_WAIT\">TCP_CLOSE_WAIT</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TCP_CLOSING\">TCP_CLOSING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Received a retransmission of the FIN, do</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * nothing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TCP_LAST_ACK\">TCP_LAST_ACK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* RFC793: Remain in the LAST-ACK state. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TCP_FIN_WAIT1\">TCP_FIN_WAIT1</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This case occurs when a simultaneous close</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * happens, we must ack the received FIN and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * enter the CLOSING state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_send_ack\">tcp_send_ack</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_set_state\">tcp_set_state</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#TCP_CLOSING\">TCP_CLOSING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TCP_FIN_WAIT2\">TCP_FIN_WAIT2</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Received a FIN -- send ACK and enter TIME_WAIT. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_send_ack\">tcp_send_ack</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_time_wait\">tcp_time_wait</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#TCP_TIME_WAIT\">TCP_TIME_WAIT</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Only TCP_LISTEN and TCP_CLOSE are left, in these</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cases we should never reach this piece of code.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: Impossible, sk->sk_state=%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_state\">sk_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* It _is_ possible, that we have something out-of-order _after_ FIN.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Probably, we should reset in this case. For now drop them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_purge\">__skb_queue_purge</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#out_of_order_queue\">out_of_order_queue</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_is_sack\">tcp_is_sack</a>(<a class=\"id\" href=\"#tp\">tp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_sack_reset\">tcp_sack_reset</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_mem_reclaim\">sk_mem_reclaim</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_DEAD\">SOCK_DEAD</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_state_change\">sk_state_change</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Do not send POLL_HUP for half duplex close. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_shutdown\">sk_shutdown</a> == <a class=\"id\" href=\"#SHUTDOWN_MASK\">SHUTDOWN_MASK</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_state\">sk_state</a> == <a class=\"id\" href=\"#TCP_CLOSE\">TCP_CLOSE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_wake_async\">sk_wake_async</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_WAKE_WAITD\">SOCK_WAKE_WAITD</a>, <a class=\"id\" href=\"#POLL_HUP\">POLL_HUP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_wake_async\">sk_wake_async</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_WAKE_WAITD\">SOCK_WAKE_WAITD</a>, <a class=\"id\" href=\"#POLL_IN\">POLL_IN</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#tcp_sack_extend\">tcp_sack_extend</a>(struct <a class=\"id\" href=\"#tcp_sack_block\">tcp_sack_block</a> *<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#seq\">seq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#end_seq\">end_seq</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#end_seq\">end_seq</a>) && !<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#end_seq\">end_seq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#start_seq\">start_seq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#start_seq\">start_seq</a> = <a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#end_seq\">end_seq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#end_seq\">end_seq</a> = <a class=\"id\" href=\"#end_seq\">end_seq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tcp_dsack_set\">tcp_dsack_set</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#end_seq\">end_seq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_is_sack\">tcp_is_sack</a>(<a class=\"id\" href=\"#tp\">tp</a>) && <a class=\"id\" href=\"#sysctl_tcp_dsack\">sysctl_tcp_dsack</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#mib_idx\">mib_idx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_nxt\">rcv_nxt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mib_idx\">mib_idx</a> = <a class=\"id\" href=\"#LINUX_MIB_TCPDSACKOLDSENT\">LINUX_MIB_TCPDSACKOLDSENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mib_idx\">mib_idx</a> = <a class=\"id\" href=\"#LINUX_MIB_TCPDSACKOFOSENT\">LINUX_MIB_TCPDSACKOFOSENT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NET_INC_STATS_BH\">NET_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#mib_idx\">mib_idx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#dsack\">dsack</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#duplicate_sack\">duplicate_sack</a>[0].<a class=\"id\" href=\"#start_seq\">start_seq</a> = <a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#duplicate_sack\">duplicate_sack</a>[0].<a class=\"id\" href=\"#end_seq\">end_seq</a> = <a class=\"id\" href=\"#end_seq\">end_seq</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tcp_dsack_extend\">tcp_dsack_extend</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#end_seq\">end_seq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#dsack\">dsack</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_dsack_set\">tcp_dsack_set</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#end_seq\">end_seq</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_sack_extend\">tcp_sack_extend</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#duplicate_sack\">duplicate_sack</a>, <a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#end_seq\">end_seq</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tcp_send_dupack\">tcp_send_dupack</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a> != <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_nxt\">rcv_nxt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NET_INC_STATS_BH\">NET_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#LINUX_MIB_DELAYEDACKLOST\">LINUX_MIB_DELAYEDACKLOST</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_enter_quickack_mode\">tcp_enter_quickack_mode</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_is_sack\">tcp_is_sack</a>(<a class=\"id\" href=\"#tp\">tp</a>) && <a class=\"id\" href=\"#sysctl_tcp_dsack\">sysctl_tcp_dsack</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#end_seq\">end_seq</a> = <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_nxt\">rcv_nxt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_seq\">end_seq</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_nxt\">rcv_nxt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_dsack_set\">tcp_dsack_set</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#end_seq\">end_seq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_send_ack\">tcp_send_ack</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"}", 
"", 
"<span class=\"comment\">/* These routines update the SACK block as out-of-order packets arrive or</span>", 
"<span class=\"comment\"> * in-order packets close up the sequence space.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tcp_sack_maybe_coalesce\">tcp_sack_maybe_coalesce</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#this_sack\">this_sack</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sack_block\">tcp_sack_block</a> *<a class=\"id\" href=\"#sp\">sp</a> = &amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#selective_acks\">selective_acks</a>[0];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sack_block\">tcp_sack_block</a> *<a class=\"id\" href=\"#swalk\">swalk</a> = <a class=\"id\" href=\"#sp\">sp</a> + 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* See if the recent change to the first SACK eats into</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or hits the sequence space of other SACK blocks, if so coalesce.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#this_sack\">this_sack</a> = 1; <a class=\"id\" href=\"#this_sack\">this_sack</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#num_sacks\">num_sacks</a>;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_sack_extend\">tcp_sack_extend</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#swalk\">swalk</a>-><a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#swalk\">swalk</a>-><a class=\"id\" href=\"#end_seq\">end_seq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Zap SWALK, by moving every further SACK up by one slot.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Decrease num_sacks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#num_sacks\">num_sacks</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#this_sack\">this_sack</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#num_sacks\">num_sacks</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#sp\">sp</a>[<a class=\"id\" href=\"#i\">i</a> + 1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_sack\">this_sack</a>++, <a class=\"id\" href=\"#swalk\">swalk</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tcp_sack_new_ofo_skb\">tcp_sack_new_ofo_skb</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#end_seq\">end_seq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sack_block\">tcp_sack_block</a> *<a class=\"id\" href=\"#sp\">sp</a> = &amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#selective_acks\">selective_acks</a>[0];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cur_sacks\">cur_sacks</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#num_sacks\">num_sacks</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#this_sack\">this_sack</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cur_sacks\">cur_sacks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#new_sack\">new_sack</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#this_sack\">this_sack</a> = 0; <a class=\"id\" href=\"#this_sack\">this_sack</a> &lt; <a class=\"id\" href=\"#cur_sacks\">cur_sacks</a>; <a class=\"id\" href=\"#this_sack\">this_sack</a>++, <a class=\"id\" href=\"#sp\">sp</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_sack_extend\">tcp_sack_extend</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#end_seq\">end_seq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Rotate this_sack to the first one. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (; <a class=\"id\" href=\"#this_sack\">this_sack</a> &gt; 0; <a class=\"id\" href=\"#this_sack\">this_sack</a>--, <a class=\"id\" href=\"#sp\">sp</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap\">swap</a>(*<a class=\"id\" href=\"#sp\">sp</a>, *(<a class=\"id\" href=\"#sp\">sp</a> - 1));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur_sacks\">cur_sacks</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_sack_maybe_coalesce\">tcp_sack_maybe_coalesce</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Could not find an adjacent existing SACK, build a new one,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * put it at the front, and shift everyone else down.  We</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * always know there is at least one SACK present already here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the sack array is full, forget about the last one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#this_sack\">this_sack</a> >= <a class=\"id\" href=\"#TCP_NUM_SACKS\">TCP_NUM_SACKS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_sack\">this_sack</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#num_sacks\">num_sacks</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#this_sack\">this_sack</a> &gt; 0; <a class=\"id\" href=\"#this_sack\">this_sack</a>--, <a class=\"id\" href=\"#sp\">sp</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sp\">sp</a> = *(<a class=\"id\" href=\"#sp\">sp</a> - 1);", 
"", 
"<a class=\"id\" href=\"#new_sack\">new_sack</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Build the new head SACK, and we're done. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#start_seq\">start_seq</a> = <a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#end_seq\">end_seq</a> = <a class=\"id\" href=\"#end_seq\">end_seq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#num_sacks\">num_sacks</a>++;", 
"}", 
"", 
"<span class=\"comment\">/* RCV.NXT advances, some SACKs should be eaten. */</span>", 
"", 
"static void <a class=\"id\" href=\"#tcp_sack_remove\">tcp_sack_remove</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sack_block\">tcp_sack_block</a> *<a class=\"id\" href=\"#sp\">sp</a> = &amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#selective_acks\">selective_acks</a>[0];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num_sacks\">num_sacks</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#num_sacks\">num_sacks</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#this_sack\">this_sack</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Empty ofo queue, hence, all the SACKs are eaten. Clear. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_queue_empty\">skb_queue_empty</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#out_of_order_queue\">out_of_order_queue</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#num_sacks\">num_sacks</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#this_sack\">this_sack</a> = 0; <a class=\"id\" href=\"#this_sack\">this_sack</a> &lt; <a class=\"id\" href=\"#num_sacks\">num_sacks</a>;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check if the start of the sack is covered by RCV.NXT. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_nxt\">rcv_nxt</a>, <a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#start_seq\">start_seq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* RCV.NXT must cover all the block! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_nxt\">rcv_nxt</a>, <a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#end_seq\">end_seq</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Zap this SACK, by moving forward any other SACKS. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>=<a class=\"id\" href=\"#this_sack\">this_sack</a>+1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_sacks\">num_sacks</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#selective_acks\">selective_acks</a>[<a class=\"id\" href=\"#i\">i</a>-1] = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#selective_acks\">selective_acks</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_sacks\">num_sacks</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_sack\">this_sack</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#num_sacks\">num_sacks</a> = <a class=\"id\" href=\"#num_sacks\">num_sacks</a>;", 
"}", 
"", 
"<span class=\"comment\">/* This one checks to see if we can put data from the</span>", 
"<span class=\"comment\"> * out_of_order queue into the receive_queue.</span>", 
];
xr_frag_insert('l/2b/2e784384945598f530c6ce79d5b248e06bceb8.xr', __xr_tmp);
