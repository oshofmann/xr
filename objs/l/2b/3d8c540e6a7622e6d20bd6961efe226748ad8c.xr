var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_KTHREAD_H\">_LINUX_KTHREAD_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_KTHREAD_H\">_LINUX_KTHREAD_H</a>", 
"<span class=\"comment\">/* Simple interface for creating and stopping kernel threads without mess. */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#kthread_create\">kthread_create</a>(int (*<a class=\"id\" href=\"#threadfn\">threadfn</a>)(void *<a class=\"id\" href=\"#data\">data</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const char <a class=\"id\" href=\"#namefmt\">namefmt</a>[], ...)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#format\">format</a>(<a class=\"id\" href=\"#printf\">printf</a>, 3, 4)));", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kthread_run - create and wake a thread.</span>", 
"<span class=\"comment\"> * @threadfn: the function to run until signal_pending(current).</span>", 
"<span class=\"comment\"> * @data: data ptr for @threadfn.</span>", 
"<span class=\"comment\"> * @namefmt: printf-style name for the thread.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Convenient wrapper for kthread_create() followed by</span>", 
"<span class=\"comment\"> * wake_up_process().  Returns the kthread or ERR_PTR(-ENOMEM).</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kthread_run\">kthread_run</a>(<a class=\"id\" href=\"#threadfn\">threadfn</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#namefmt\">namefmt</a>, ...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#__k\">__k</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \\", 
"<span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#kthread_create\">kthread_create</a>(<a class=\"id\" href=\"#threadfn\">threadfn</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#namefmt\">namefmt</a>, ## <a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>); \\", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#__k\">__k</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#__k\">__k</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__k\">__k</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \\", 
"})", 
"", 
"void <a class=\"id\" href=\"#kthread_bind\">kthread_bind</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#k\">k</a>, unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"int <a class=\"id\" href=\"#kthread_stop\">kthread_stop</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#k\">k</a>);", 
"int <a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>(void);", 
"void *<a class=\"id\" href=\"#kthread_data\">kthread_data</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#k\">k</a>);", 
"", 
"int <a class=\"id\" href=\"#kthreadd\">kthreadd</a>(void *<a class=\"id\" href=\"#unused\">unused</a>);", 
"extern struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#kthreadd_task\">kthreadd_task</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Simple work processor based on kthread.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This provides easier way to make use of kthreads.  A kthread_work</span>", 
"<span class=\"comment\"> * can be queued and flushed using queue/flush_kthread_work()</span>", 
"<span class=\"comment\"> * respectively.  Queued kthread_works are processed by a kthread</span>", 
"<span class=\"comment\"> * running kthread_worker_fn().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A kthread_work can't be freed while it is executing.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#kthread_work\">kthread_work</a>;", 
"typedef void (*<a class=\"id\" href=\"#kthread_work_func_t\">kthread_work_func_t</a>)(struct <a class=\"id\" href=\"#kthread_work\">kthread_work</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"", 
"struct <a class=\"id\" href=\"#kthread_worker\">kthread_worker</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#work_list\">work_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a><span class=\"ts\"/>*<a class=\"id\" href=\"#task\">task</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#kthread_work\">kthread_work</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kthread_work_func_t\">kthread_work_func_t</a><span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a><span class=\"ts\"/><a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flushing\">flushing</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_seq\">queue_seq</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#done_seq\">done_seq</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KTHREAD_WORKER_INIT\">KTHREAD_WORKER_INIT</a>(<a class=\"id\" href=\"#worker\">worker</a>)<span class=\"ts\"/>{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#lock\">lock</a> = <a class=\"id\" href=\"#SPIN_LOCK_UNLOCKED\">SPIN_LOCK_UNLOCKED</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#work_list\">work_list</a> = <a class=\"id\" href=\"#LIST_HEAD_INIT\">LIST_HEAD_INIT</a>((<a class=\"id\" href=\"#worker\">worker</a>).<a class=\"id\" href=\"#work_list\">work_list</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KTHREAD_WORK_INIT\">KTHREAD_WORK_INIT</a>(<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#fn\">fn</a>)<span class=\"ts\"/>{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#LIST_HEAD_INIT\">LIST_HEAD_INIT</a>((<a class=\"id\" href=\"#work\">work</a>).<a class=\"id\" href=\"#node\">node</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#func\">func</a> = (<a class=\"id\" href=\"#fn\">fn</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#done\">done</a> = <a class=\"id\" href=\"#__WAIT_QUEUE_HEAD_INITIALIZER\">__WAIT_QUEUE_HEAD_INITIALIZER</a>((<a class=\"id\" href=\"#work\">work</a>).<a class=\"id\" href=\"#done\">done</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#flushing\">flushing</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_KTHREAD_WORKER\">DEFINE_KTHREAD_WORKER</a>(<a class=\"id\" href=\"#worker\">worker</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kthread_worker\">kthread_worker</a> <a class=\"id\" href=\"#worker\">worker</a> = <a class=\"id\" href=\"#KTHREAD_WORKER_INIT\">KTHREAD_WORKER_INIT</a>(<a class=\"id\" href=\"#worker\">worker</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_KTHREAD_WORK\">DEFINE_KTHREAD_WORK</a>(<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#fn\">fn</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kthread_work\">kthread_work</a> <a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#KTHREAD_WORK_INIT\">KTHREAD_WORK_INIT</a>(<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#fn\">fn</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_kthread_worker\">init_kthread_worker</a>(struct <a class=\"id\" href=\"#kthread_worker\">kthread_worker</a> *<a class=\"id\" href=\"#worker\">worker</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#worker\">worker</a> = (struct <a class=\"id\" href=\"#kthread_worker\">kthread_worker</a>)<a class=\"id\" href=\"#KTHREAD_WORKER_INIT\">KTHREAD_WORKER_INIT</a>(*<a class=\"id\" href=\"#worker\">worker</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_kthread_work\">init_kthread_work</a>(struct <a class=\"id\" href=\"#kthread_work\">kthread_work</a> *<a class=\"id\" href=\"#work\">work</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#kthread_work_func_t\">kthread_work_func_t</a> <a class=\"id\" href=\"#fn\">fn</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#work\">work</a> = (struct <a class=\"id\" href=\"#kthread_work\">kthread_work</a>)<a class=\"id\" href=\"#KTHREAD_WORK_INIT\">KTHREAD_WORK_INIT</a>(*<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#fn\">fn</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#kthread_worker_fn\">kthread_worker_fn</a>(void *<a class=\"id\" href=\"#worker_ptr\">worker_ptr</a>);", 
"", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#queue_kthread_work\">queue_kthread_work</a>(struct <a class=\"id\" href=\"#kthread_worker\">kthread_worker</a> *<a class=\"id\" href=\"#worker\">worker</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kthread_work\">kthread_work</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"void <a class=\"id\" href=\"#flush_kthread_work\">flush_kthread_work</a>(struct <a class=\"id\" href=\"#kthread_work\">kthread_work</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"void <a class=\"id\" href=\"#flush_kthread_worker\">flush_kthread_worker</a>(struct <a class=\"id\" href=\"#kthread_worker\">kthread_worker</a> *<a class=\"id\" href=\"#worker\">worker</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_KTHREAD_H */</span>", 
];
xr_frag_insert('l/2b/3d8c540e6a7622e6d20bd6961efe226748ad8c.xr', __xr_tmp);
