var __xr_tmp = [
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Multicasts and broadcasts go to each listener.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note: called only from the BH handler context.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__udp4_lib_mcast_deliver\">__udp4_lib_mcast_deliver</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#udphdr\">udphdr</a>  *<a class=\"id\" href=\"#uh\">uh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#udp_table\">udp_table</a> *<a class=\"id\" href=\"#udptable\">udptable</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, *<a class=\"id\" href=\"#stack\">stack</a>[256 / sizeof(struct <a class=\"id\" href=\"#sock\">sock</a> *)];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_hslot\">udp_hslot</a> *<a class=\"id\" href=\"#hslot\">hslot</a> = <a class=\"id\" href=\"#udp_hashslot\">udp_hashslot</a>(<a class=\"id\" href=\"#udptable\">udptable</a>, <a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#dest\">dest</a>));", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dif\">dif</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#sk_nulls_head\">sk_nulls_head</a>(&amp;<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dif\">dif</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#udp_v4_mcast_next\">udp_v4_mcast_next</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#source\">source</a>, <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#dif\">dif</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#sk\">sk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#count\">count</a>++] = <a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#udp_v4_mcast_next\">udp_v4_mcast_next</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#sk_nulls_next\">sk_nulls_next</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#dest\">dest</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#source\">source</a>, <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#dif\">dif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#count\">count</a> == <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#stack\">stack</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sk\">sk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_stack\">flush_stack</a>(<a class=\"id\" href=\"#stack\">stack</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#skb\">skb</a>, ~0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before releasing chain lock, we must take a reference on sockets</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_hold\">sock_hold</a>(<a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do the slow work with no lock held</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_stack\">flush_stack</a>(<a class=\"id\" href=\"#stack\">stack</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#count\">count</a> - 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_put\">sock_put</a>(<a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Initialize UDP checksum. If exited with zero value (success),</span>", 
"<span class=\"comment\"> * CHECKSUM_UNNECESSARY means, that no more checks are required.</span>", 
"<span class=\"comment\"> * Otherwise, csum completion requires chacksumming packet body,</span>", 
"<span class=\"comment\"> * including udp header and folding it to skb-&gt;csum.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#udp4_csum_init\">udp4_csum_init</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#udphdr\">udphdr</a> *<a class=\"id\" href=\"#uh\">uh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#proto\">proto</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#UDP_SKB_CB\">UDP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#partial_cov\">partial_cov</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#UDP_SKB_CB\">UDP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#cscov\">cscov</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#proto\">proto</a> == <a class=\"id\" href=\"#IPPROTO_UDPLITE\">IPPROTO_UDPLITE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#udplite_checksum_init\">udplite_checksum_init</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#uh\">uh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iph\">iph</a> = <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#check\">check</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_UNNECESSARY\">CHECKSUM_UNNECESSARY</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> == <a class=\"id\" href=\"#CHECKSUM_COMPLETE\">CHECKSUM_COMPLETE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#csum_tcpudp_magic\">csum_tcpudp_magic</a>(<a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#proto\">proto</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum\">csum</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_UNNECESSARY\">CHECKSUM_UNNECESSARY</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb_csum_unnecessary\">skb_csum_unnecessary</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_tcpudp_nofold\">csum_tcpudp_nofold</a>(<a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#daddr\">daddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#proto\">proto</a>, 0);", 
"<span class=\"ts\"/><span class=\"comment\">/* Probably, we should checksum udp header (it should be in cache</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in any case) and data in tiny packets (&lt; rx copybreak).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>All we need to do is get the socket, and then do a checksum.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#__udp4_lib_rcv\">__udp4_lib_rcv</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#udp_table\">udp_table</a> *<a class=\"id\" href=\"#udptable\">udptable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#proto\">proto</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udphdr\">udphdr</a> *<a class=\"id\" href=\"#uh\">uh</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#ulen\">ulen</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#rt\">rt</a> = <a class=\"id\" href=\"#skb_rtable\">skb_rtable</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#daddr\">daddr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  Validate the packet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, sizeof(struct <a class=\"id\" href=\"#udphdr\">udphdr</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No space for header. */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uh\">uh</a>   = <a class=\"id\" href=\"#udp_hdr\">udp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ulen\">ulen</a> = <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#saddr\">saddr</a> = <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#saddr\">saddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#daddr\">daddr</a> = <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#daddr\">daddr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ulen\">ulen</a> &gt; <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#short_packet\">short_packet</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#proto\">proto</a> == <a class=\"id\" href=\"#IPPROTO_UDP\">IPPROTO_UDP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* UDP validates ulen. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ulen\">ulen</a> &lt; sizeof(*<a class=\"id\" href=\"#uh\">uh</a>) || <a class=\"id\" href=\"#pskb_trim_rcsum\">pskb_trim_rcsum</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#ulen\">ulen</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#short_packet\">short_packet</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uh\">uh</a> = <a class=\"id\" href=\"#udp_hdr\">udp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#udp4_csum_init\">udp4_csum_init</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#uh\">uh</a>, <a class=\"id\" href=\"#proto\">proto</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#csum_error\">csum_error</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#rt_flags\">rt_flags</a> &amp; (<a class=\"id\" href=\"#RTCF_BROADCAST\">RTCF_BROADCAST</a>|<a class=\"id\" href=\"#RTCF_MULTICAST\">RTCF_MULTICAST</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__udp4_lib_mcast_deliver\">__udp4_lib_mcast_deliver</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#uh\">uh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#udptable\">udptable</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#__udp4_lib_lookup_skb\">__udp4_lib_lookup_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#source\">source</a>, <a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#udptable\">udptable</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#udp_queue_rcv_skb\">udp_queue_rcv_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_put\">sock_put</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* a return value &gt; 0 means to resubmit the input, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it wants the return to be -protocol, or 0</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#xfrm4_policy_check\">xfrm4_policy_check</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#XFRM_POLICY_IN\">XFRM_POLICY_IN</a>, <a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf_reset\">nf_reset</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No socket. Drop packet silently, if checksum is wrong */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#udp_lib_checksum_complete\">udp_lib_checksum_complete</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#csum_error\">csum_error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#UDP_INC_STATS_BH\">UDP_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#UDP_MIB_NOPORTS\">UDP_MIB_NOPORTS</a>, <a class=\"id\" href=\"#proto\">proto</a> == <a class=\"id\" href=\"#IPPROTO_UDPLITE\">IPPROTO_UDPLITE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icmp_send\">icmp_send</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#ICMP_DEST_UNREACH\">ICMP_DEST_UNREACH</a>, <a class=\"id\" href=\"#ICMP_PORT_UNREACH\">ICMP_PORT_UNREACH</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Hmm.  We got an UDP packet to a port to which we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * don't wanna listen.  Ignore it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#short_packet\">short_packet</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIMIT_NETDEBUG\">LIMIT_NETDEBUG</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"UDP%s: short packet: From %pI4:%u %d/%d to %pI4:%u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#proto\">proto</a> == <a class=\"id\" href=\"#IPPROTO_UDPLITE\">IPPROTO_UDPLITE</a> ? \"-Lite\" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#saddr\">saddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#source\">source</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ulen\">ulen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#daddr\">daddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#dest\">dest</a>));", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"", 
"<a class=\"id\" href=\"#csum_error\">csum_error</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * RFC1122: OK.  Discards the bad packet silently (as far as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the network is concerned, anyway) as per 4.1.3.4 (MUST).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIMIT_NETDEBUG\">LIMIT_NETDEBUG</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"UDP%s: bad checksum. From %pI4:%u to %pI4:%u ulen %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#proto\">proto</a> == <a class=\"id\" href=\"#IPPROTO_UDPLITE\">IPPROTO_UDPLITE</a> ? \"-Lite\" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#saddr\">saddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#source\">source</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#daddr\">daddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#dest\">dest</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ulen\">ulen</a>);", 
"<a class=\"id\" href=\"#drop\">drop</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#UDP_INC_STATS_BH\">UDP_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#UDP_MIB_INERRORS\">UDP_MIB_INERRORS</a>, <a class=\"id\" href=\"#proto\">proto</a> == <a class=\"id\" href=\"#IPPROTO_UDPLITE\">IPPROTO_UDPLITE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#udp_rcv\">udp_rcv</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__udp4_lib_rcv\">__udp4_lib_rcv</a>(<a class=\"id\" href=\"#skb\">skb</a>, &amp;<a class=\"id\" href=\"#udp_table\">udp_table</a>, <a class=\"id\" href=\"#IPPROTO_UDP\">IPPROTO_UDP</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#udp_destroy_sock\">udp_destroy_sock</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#slow\">slow</a> = <a class=\"id\" href=\"#lock_sock_fast\">lock_sock_fast</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udp_flush_pending_frames\">udp_flush_pending_frames</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_sock_fast\">unlock_sock_fast</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#slow\">slow</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Socket option code for UDP</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#udp_lib_setsockopt\">udp_lib_setsockopt</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#level\">level</a>, int <a class=\"id\" href=\"#optname\">optname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optval\">optval</a>, unsigned int <a class=\"id\" href=\"#optlen\">optlen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       int (*<a class=\"id\" href=\"#push_pending_frames\">push_pending_frames</a>)(struct <a class=\"id\" href=\"#sock\">sock</a> *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_sock\">udp_sock</a> *<a class=\"id\" href=\"#up\">up</a> = <a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_udplite\">is_udplite</a> = <a class=\"id\" href=\"#IS_UDPLITE\">IS_UDPLITE</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#optlen\">optlen</a> &lt; sizeof(int))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#val\">val</a>, (int <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#optval\">optval</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#optname\">optname</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UDP_CORK\">UDP_CORK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#corkflag\">corkflag</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#corkflag\">corkflag</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_sock\">lock_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#push_pending_frames\">push_pending_frames</a>)(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_sock\">release_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UDP_ENCAP\">UDP_ENCAP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#val\">val</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#UDP_ENCAP_ESPINUDP\">UDP_ENCAP_ESPINUDP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#UDP_ENCAP_ESPINUDP_NON_IKE\">UDP_ENCAP_ESPINUDP_NON_IKE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#encap_rcv\">encap_rcv</a> = <a class=\"id\" href=\"#xfrm4_udp_encap_rcv\">xfrm4_udp_encap_rcv</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FALLTHROUGH */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#UDP_ENCAP_L2TPINUDP\">UDP_ENCAP_L2TPINUDP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#encap_type\">encap_type</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOPROTOOPT\">ENOPROTOOPT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * <span class=\"ts\"/>UDP-Lite's partial checksum coverage (RFC 3828).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* The sender sets actual checksum coverage length via this option.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The case coverage &gt; packet length is handled by send module. */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UDPLITE_SEND_CSCOV\">UDPLITE_SEND_CSCOV</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_udplite\">is_udplite</a>)         <span class=\"comment\">/* Disable the option on UDP sockets */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOPROTOOPT\">ENOPROTOOPT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> != 0 && <a class=\"id\" href=\"#val\">val</a> &lt; 8) <span class=\"comment\">/* Illegal coverage: use default (8) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = 8;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#val\">val</a> &gt; <a class=\"id\" href=\"#USHRT_MAX\">USHRT_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#USHRT_MAX\">USHRT_MAX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pcslen\">pcslen</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pcflag\">pcflag</a> |= <a class=\"id\" href=\"#UDPLITE_SEND_CC\">UDPLITE_SEND_CC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The receiver specifies a minimum checksum coverage value. To make</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sense, this should be set to at least 8 (as done below). If zero is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * used, this again means full checksum coverage.                     */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UDPLITE_RECV_CSCOV\">UDPLITE_RECV_CSCOV</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_udplite\">is_udplite</a>)         <span class=\"comment\">/* Disable the option on UDP sockets */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOPROTOOPT\">ENOPROTOOPT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> != 0 && <a class=\"id\" href=\"#val\">val</a> &lt; 8) <span class=\"comment\">/* Avoid silly minimal values.       */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = 8;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#val\">val</a> &gt; <a class=\"id\" href=\"#USHRT_MAX\">USHRT_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#USHRT_MAX\">USHRT_MAX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pcrlen\">pcrlen</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pcflag\">pcflag</a> |= <a class=\"id\" href=\"#UDPLITE_RECV_CC\">UDPLITE_RECV_CC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOPROTOOPT\">ENOPROTOOPT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#udp_lib_setsockopt\">udp_lib_setsockopt</a>);", 
"", 
"int <a class=\"id\" href=\"#udp_setsockopt\">udp_setsockopt</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#level\">level</a>, int <a class=\"id\" href=\"#optname\">optname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optval\">optval</a>, unsigned int <a class=\"id\" href=\"#optlen\">optlen</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> == <a class=\"id\" href=\"#SOL_UDP\">SOL_UDP</a>  ||  <a class=\"id\" href=\"#level\">level</a> == <a class=\"id\" href=\"#SOL_UDPLITE\">SOL_UDPLITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#udp_lib_setsockopt\">udp_lib_setsockopt</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#optname\">optname</a>, <a class=\"id\" href=\"#optval\">optval</a>, <a class=\"id\" href=\"#optlen\">optlen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#udp_push_pending_frames\">udp_push_pending_frames</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ip_setsockopt\">ip_setsockopt</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#optname\">optname</a>, <a class=\"id\" href=\"#optval\">optval</a>, <a class=\"id\" href=\"#optlen\">optlen</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"int <a class=\"id\" href=\"#compat_udp_setsockopt\">compat_udp_setsockopt</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#level\">level</a>, int <a class=\"id\" href=\"#optname\">optname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optval\">optval</a>, unsigned int <a class=\"id\" href=\"#optlen\">optlen</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> == <a class=\"id\" href=\"#SOL_UDP\">SOL_UDP</a>  ||  <a class=\"id\" href=\"#level\">level</a> == <a class=\"id\" href=\"#SOL_UDPLITE\">SOL_UDPLITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#udp_lib_setsockopt\">udp_lib_setsockopt</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#optname\">optname</a>, <a class=\"id\" href=\"#optval\">optval</a>, <a class=\"id\" href=\"#optlen\">optlen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#udp_push_pending_frames\">udp_push_pending_frames</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#compat_ip_setsockopt\">compat_ip_setsockopt</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#optname\">optname</a>, <a class=\"id\" href=\"#optval\">optval</a>, <a class=\"id\" href=\"#optlen\">optlen</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"int <a class=\"id\" href=\"#udp_lib_getsockopt\">udp_lib_getsockopt</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#level\">level</a>, int <a class=\"id\" href=\"#optname\">optname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optval\">optval</a>, int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optlen\">optlen</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_sock\">udp_sock</a> *<a class=\"id\" href=\"#up\">up</a> = <a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#optlen\">optlen</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned int, <a class=\"id\" href=\"#len\">len</a>, sizeof(int));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#optname\">optname</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UDP_CORK\">UDP_CORK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#corkflag\">corkflag</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UDP_ENCAP\">UDP_ENCAP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#encap_type\">encap_type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The following two cannot be changed on UDP sockets, the return is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * always 0 (which corresponds to the full checksum coverage of UDP). */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UDPLITE_SEND_CSCOV\">UDPLITE_SEND_CSCOV</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pcslen\">pcslen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UDPLITE_RECV_CSCOV\">UDPLITE_RECV_CSCOV</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pcrlen\">pcrlen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOPROTOOPT\">ENOPROTOOPT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#optlen\">optlen</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#optval\">optval</a>, &amp;<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#udp_lib_getsockopt\">udp_lib_getsockopt</a>);", 
"", 
"int <a class=\"id\" href=\"#udp_getsockopt\">udp_getsockopt</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#level\">level</a>, int <a class=\"id\" href=\"#optname\">optname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optval\">optval</a>, int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optlen\">optlen</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> == <a class=\"id\" href=\"#SOL_UDP\">SOL_UDP</a>  ||  <a class=\"id\" href=\"#level\">level</a> == <a class=\"id\" href=\"#SOL_UDPLITE\">SOL_UDPLITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#udp_lib_getsockopt\">udp_lib_getsockopt</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#optname\">optname</a>, <a class=\"id\" href=\"#optval\">optval</a>, <a class=\"id\" href=\"#optlen\">optlen</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ip_getsockopt\">ip_getsockopt</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#optname\">optname</a>, <a class=\"id\" href=\"#optval\">optval</a>, <a class=\"id\" href=\"#optlen\">optlen</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"int <a class=\"id\" href=\"#compat_udp_getsockopt\">compat_udp_getsockopt</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#level\">level</a>, int <a class=\"id\" href=\"#optname\">optname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optval\">optval</a>, int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optlen\">optlen</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> == <a class=\"id\" href=\"#SOL_UDP\">SOL_UDP</a>  ||  <a class=\"id\" href=\"#level\">level</a> == <a class=\"id\" href=\"#SOL_UDPLITE\">SOL_UDPLITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#udp_lib_getsockopt\">udp_lib_getsockopt</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#optname\">optname</a>, <a class=\"id\" href=\"#optval\">optval</a>, <a class=\"id\" href=\"#optlen\">optlen</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#compat_ip_getsockopt\">compat_ip_getsockopt</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#optname\">optname</a>, <a class=\"id\" href=\"#optval\">optval</a>, <a class=\"id\" href=\"#optlen\">optlen</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>udp_poll - wait for a UDP event.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@file - file struct</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock - socket</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@wait - poll table</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is same as datagram poll, except for the special case of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>blocking sockets. If application is using a blocking fd</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and a packet with checksum error is in the queue;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>then it could get return from select indicating data available</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>but then block when reading it. Add special case code</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to work around these arguably broken applications.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#udp_poll\">udp_poll</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#poll_table\">poll_table</a> *<a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#datagram_poll\">datagram_poll</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#sk\">sk</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for false positives due to checksum errors */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#POLLRDNORM\">POLLRDNORM</a>) && !(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>) &&", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_shutdown\">sk_shutdown</a> &amp; <a class=\"id\" href=\"#RCV_SHUTDOWN\">RCV_SHUTDOWN</a>) && !<a class=\"id\" href=\"#first_packet_length\">first_packet_length</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> &= ~(<a class=\"id\" href=\"#POLLIN\">POLLIN</a> | <a class=\"id\" href=\"#POLLRDNORM\">POLLRDNORM</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#udp_poll\">udp_poll</a>);", 
"", 
"struct <a class=\"id\" href=\"#proto\">proto</a> <a class=\"id\" href=\"#udp_prot\">udp_prot</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>   = \"UDP\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a><span class=\"ts\"/><span class=\"ts\"/>   = <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#close\">close</a><span class=\"ts\"/><span class=\"ts\"/>   = <a class=\"id\" href=\"#udp_lib_close\">udp_lib_close</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#connect\">connect</a><span class=\"ts\"/>   = <a class=\"id\" href=\"#ip4_datagram_connect\">ip4_datagram_connect</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#disconnect\">disconnect</a><span class=\"ts\"/>   = <a class=\"id\" href=\"#udp_disconnect\">udp_disconnect</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ioctl\">ioctl</a><span class=\"ts\"/><span class=\"ts\"/>   = <a class=\"id\" href=\"#udp_ioctl\">udp_ioctl</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#destroy\">destroy</a><span class=\"ts\"/>   = <a class=\"id\" href=\"#udp_destroy_sock\">udp_destroy_sock</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#setsockopt\">setsockopt</a><span class=\"ts\"/>   = <a class=\"id\" href=\"#udp_setsockopt\">udp_setsockopt</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#getsockopt\">getsockopt</a><span class=\"ts\"/>   = <a class=\"id\" href=\"#udp_getsockopt\">udp_getsockopt</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sendmsg\">sendmsg</a><span class=\"ts\"/>   = <a class=\"id\" href=\"#udp_sendmsg\">udp_sendmsg</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#recvmsg\">recvmsg</a><span class=\"ts\"/>   = <a class=\"id\" href=\"#udp_recvmsg\">udp_recvmsg</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sendpage\">sendpage</a><span class=\"ts\"/>   = <a class=\"id\" href=\"#udp_sendpage\">udp_sendpage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#backlog_rcv\">backlog_rcv</a><span class=\"ts\"/>   = <a class=\"id\" href=\"#__udp_queue_rcv_skb\">__udp_queue_rcv_skb</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#hash\">hash</a><span class=\"ts\"/><span class=\"ts\"/>   = <a class=\"id\" href=\"#udp_lib_hash\">udp_lib_hash</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unhash\">unhash</a><span class=\"ts\"/><span class=\"ts\"/>   = <a class=\"id\" href=\"#udp_lib_unhash\">udp_lib_unhash</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#rehash\">rehash</a><span class=\"ts\"/><span class=\"ts\"/>   = <a class=\"id\" href=\"#udp_v4_rehash\">udp_v4_rehash</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_port\">get_port</a><span class=\"ts\"/>   = <a class=\"id\" href=\"#udp_v4_get_port\">udp_v4_get_port</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#memory_allocated\">memory_allocated</a>  = &amp;<a class=\"id\" href=\"#udp_memory_allocated\">udp_memory_allocated</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sysctl_mem\">sysctl_mem</a><span class=\"ts\"/>   = <a class=\"id\" href=\"#sysctl_udp_mem\">sysctl_udp_mem</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sysctl_wmem\">sysctl_wmem</a><span class=\"ts\"/>   = &amp;<a class=\"id\" href=\"#sysctl_udp_wmem_min\">sysctl_udp_wmem_min</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sysctl_rmem\">sysctl_rmem</a><span class=\"ts\"/>   = &amp;<a class=\"id\" href=\"#sysctl_udp_rmem_min\">sysctl_udp_rmem_min</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#obj_size\">obj_size</a><span class=\"ts\"/>   = sizeof(struct <a class=\"id\" href=\"#udp_sock\">udp_sock</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#slab_flags\">slab_flags</a><span class=\"ts\"/>   = <a class=\"id\" href=\"#SLAB_DESTROY_BY_RCU\">SLAB_DESTROY_BY_RCU</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#h\">h</a>.<a class=\"id\" href=\"#udp_table\">udp_table</a><span class=\"ts\"/>   = &amp;<a class=\"id\" href=\"#udp_table\">udp_table</a>,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#compat_setsockopt\">compat_setsockopt</a> = <a class=\"id\" href=\"#compat_udp_setsockopt\">compat_udp_setsockopt</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#compat_getsockopt\">compat_getsockopt</a> = <a class=\"id\" href=\"#compat_udp_getsockopt\">compat_udp_getsockopt</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#udp_prot\">udp_prot</a>);", 
"", 
"<span class=\"comment\">/* ------------------------------------------------------------------------ */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"", 
"static struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#udp_get_first\">udp_get_first</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, int <a class=\"id\" href=\"#start\">start</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_iter_state\">udp_iter_state</a> *<a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#seq_file_net\">seq_file_net</a>(<a class=\"id\" href=\"#seq\">seq</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bucket\">bucket</a> = <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bucket\">bucket</a> <= <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#udp_table\">udp_table</a>-><a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>     ++<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bucket\">bucket</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_hslot\">udp_hslot</a> *<a class=\"id\" href=\"#hslot\">hslot</a> = &amp;<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#udp_table\">udp_table</a>-><a class=\"id\" href=\"#hash\">hash</a>[<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bucket\">bucket</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hlist_nulls_empty\">hlist_nulls_empty</a>(&amp;<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#head\">head</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_nulls_for_each\">sk_nulls_for_each</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#net_eq\">net_eq</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#net\">net</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a> == <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#family\">family</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sk\">sk</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#udp_get_next\">udp_get_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_iter_state\">udp_iter_state</a> *<a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#seq_file_net\">seq_file_net</a>(<a class=\"id\" href=\"#seq\">seq</a>);", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#sk_nulls_next\">sk_nulls_next</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#sk\">sk</a> && (!<a class=\"id\" href=\"#net_eq\">net_eq</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#net\">net</a>) || <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a> != <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#family\">family</a>));", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sk\">sk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bucket\">bucket</a> <= <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#udp_table\">udp_table</a>-><a class=\"id\" href=\"#mask\">mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#udp_table\">udp_table</a>-><a class=\"id\" href=\"#hash\">hash</a>[<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bucket\">bucket</a>].<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#udp_get_first\">udp_get_first</a>(<a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bucket\">bucket</a> + 1);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sk\">sk</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#udp_get_idx\">udp_get_idx</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#udp_get_first\">udp_get_first</a>(<a class=\"id\" href=\"#seq\">seq</a>, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#pos\">pos</a> && (<a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#udp_get_next\">udp_get_next</a>(<a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#sk\">sk</a>)) != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pos\">pos</a> ? <a class=\"id\" href=\"#NULL\">NULL</a> : <a class=\"id\" href=\"#sk\">sk</a>;", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#udp_seq_start\">udp_seq_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_iter_state\">udp_iter_state</a> *<a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bucket\">bucket</a> = <a class=\"id\" href=\"#MAX_UDP_PORTS\">MAX_UDP_PORTS</a>;", 
"", 
"<span class=\"ts\"/>return *<a class=\"id\" href=\"#pos\">pos</a> ? <a class=\"id\" href=\"#udp_get_idx\">udp_get_idx</a>(<a class=\"id\" href=\"#seq\">seq</a>, *<a class=\"id\" href=\"#pos\">pos</a>-1) : <a class=\"id\" href=\"#SEQ_START_TOKEN\">SEQ_START_TOKEN</a>;", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#udp_seq_next\">udp_seq_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a> == <a class=\"id\" href=\"#SEQ_START_TOKEN\">SEQ_START_TOKEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#udp_get_idx\">udp_get_idx</a>(<a class=\"id\" href=\"#seq\">seq</a>, 0);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#udp_get_next\">udp_get_next</a>(<a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#v\">v</a>);", 
"", 
"<span class=\"ts\"/>++*<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sk\">sk</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#udp_seq_stop\">udp_seq_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_iter_state\">udp_iter_state</a> *<a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bucket\">bucket</a> <= <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#udp_table\">udp_table</a>-><a class=\"id\" href=\"#mask\">mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#udp_table\">udp_table</a>-><a class=\"id\" href=\"#hash\">hash</a>[<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bucket\">bucket</a>].<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#udp_seq_open\">udp_seq_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_seq_afinfo\">udp_seq_afinfo</a> *<a class=\"id\" href=\"#afinfo\">afinfo</a> = <a class=\"id\" href=\"#PDE\">PDE</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_iter_state\">udp_iter_state</a> *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#seq_open_net\">seq_open_net</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#afinfo\">afinfo</a>-><a class=\"id\" href=\"#seq_ops\">seq_ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   sizeof(struct <a class=\"id\" href=\"#udp_iter_state\">udp_iter_state</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = ((struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *)<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>)-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#family\">family</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#afinfo\">afinfo</a>-><a class=\"id\" href=\"#family\">family</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#udp_table\">udp_table</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#afinfo\">afinfo</a>-><a class=\"id\" href=\"#udp_table\">udp_table</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/* ------------------------------------------------------------------------ */</span>", 
"int <a class=\"id\" href=\"#udp_proc_register\">udp_proc_register</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#udp_seq_afinfo\">udp_seq_afinfo</a> *<a class=\"id\" href=\"#afinfo\">afinfo</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#afinfo\">afinfo</a>-><a class=\"id\" href=\"#seq_fops\">seq_fops</a>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#udp_seq_open\">udp_seq_open</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#afinfo\">afinfo</a>-><a class=\"id\" href=\"#seq_fops\">seq_fops</a>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#afinfo\">afinfo</a>-><a class=\"id\" href=\"#seq_fops\">seq_fops</a>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#afinfo\">afinfo</a>-><a class=\"id\" href=\"#seq_fops\">seq_fops</a>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_release_net\">seq_release_net</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#afinfo\">afinfo</a>-><a class=\"id\" href=\"#seq_ops\">seq_ops</a>.<a class=\"id\" href=\"#start\">start</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#udp_seq_start\">udp_seq_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#afinfo\">afinfo</a>-><a class=\"id\" href=\"#seq_ops\">seq_ops</a>.<a class=\"id\" href=\"#next\">next</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#udp_seq_next\">udp_seq_next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#afinfo\">afinfo</a>-><a class=\"id\" href=\"#seq_ops\">seq_ops</a>.<a class=\"id\" href=\"#stop\">stop</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#udp_seq_stop\">udp_seq_stop</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#proc_create_data\">proc_create_data</a>(<a class=\"id\" href=\"#afinfo\">afinfo</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#proc_net\">proc_net</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#afinfo\">afinfo</a>-><a class=\"id\" href=\"#seq_fops\">seq_fops</a>, <a class=\"id\" href=\"#afinfo\">afinfo</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#udp_proc_register\">udp_proc_register</a>);", 
"", 
"void <a class=\"id\" href=\"#udp_proc_unregister\">udp_proc_unregister</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#udp_seq_afinfo\">udp_seq_afinfo</a> *<a class=\"id\" href=\"#afinfo\">afinfo</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_net_remove\">proc_net_remove</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#afinfo\">afinfo</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#udp_proc_unregister\">udp_proc_unregister</a>);", 
"", 
"<span class=\"comment\">/* ------------------------------------------------------------------------ */</span>", 
"static void <a class=\"id\" href=\"#udp4_format_sock\">udp4_format_sock</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sp\">sp</a>, struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#f\">f</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#bucket\">bucket</a>, int *<a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_sock\">inet_sock</a> *<a class=\"id\" href=\"#inet\">inet</a> = <a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sp\">sp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#dest\">dest</a> = <a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_daddr\">inet_daddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#src\">src</a>  = <a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_rcv_saddr\">inet_rcv_saddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#destp\">destp</a><span class=\"ts\"/>  = <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_dport\">inet_dport</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#srcp\">srcp</a><span class=\"ts\"/>  = <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_sport\">inet_sport</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#f\">f</a>, \"%5d: %08X:%04X %08X:%04X\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\" %02X %08X:%08X %02X:%08lX %08X %5d %8d %lu %d %p %d%n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bucket\">bucket</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#srcp\">srcp</a>, <a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#destp\">destp</a>, <a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#sk_state\">sk_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_wmem_alloc_get\">sk_wmem_alloc_get</a>(<a class=\"id\" href=\"#sp\">sp</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_rmem_alloc_get\">sk_rmem_alloc_get</a>(<a class=\"id\" href=\"#sp\">sp</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>0, 0L, 0, <a class=\"id\" href=\"#sock_i_uid\">sock_i_uid</a>(<a class=\"id\" href=\"#sp\">sp</a>), 0, <a class=\"id\" href=\"#sock_i_ino\">sock_i_ino</a>(<a class=\"id\" href=\"#sp\">sp</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#sk_refcnt\">sk_refcnt</a>), <a class=\"id\" href=\"#sp\">sp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#sk_drops\">sk_drops</a>), <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#udp4_seq_show\">udp4_seq_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a> == <a class=\"id\" href=\"#SEQ_START_TOKEN\">SEQ_START_TOKEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"%-127s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"  sl  local_address rem_address   st tx_queue \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"rx_queue tr tm->when retrnsmt   uid  timeout \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"inode ref pointer drops\");", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_iter_state\">udp_iter_state</a> *<a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udp4_format_sock\">udp4_format_sock</a>(<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bucket\">bucket</a>, &amp;<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"%*s\\n\", 127 - <a class=\"id\" href=\"#len\">len</a>, \"\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* ------------------------------------------------------------------------ */</span>", 
"static struct <a class=\"id\" href=\"#udp_seq_afinfo\">udp_seq_afinfo</a> <a class=\"id\" href=\"#udp4_seq_afinfo\">udp4_seq_afinfo</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"udp\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#family\">family</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#AF_INET\">AF_INET</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#udp_table\">udp_table</a><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#udp_table\">udp_table</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#seq_fops\">seq_fops</a><span class=\"ts\"/>= {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a><span class=\"ts\"/>=<span class=\"ts\"/><a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#seq_ops\">seq_ops</a><span class=\"ts\"/>= {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#udp4_seq_show\">udp4_seq_show</a>,", 
"<span class=\"ts\"/>},", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__net_init\">__net_init</a> <a class=\"id\" href=\"#udp4_proc_init_net\">udp4_proc_init_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#udp_proc_register\">udp_proc_register</a>(<a class=\"id\" href=\"#net\">net</a>, &amp;<a class=\"id\" href=\"#udp4_seq_afinfo\">udp4_seq_afinfo</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__net_exit\">__net_exit</a> <a class=\"id\" href=\"#udp4_proc_exit_net\">udp4_proc_exit_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udp_proc_unregister\">udp_proc_unregister</a>(<a class=\"id\" href=\"#net\">net</a>, &amp;<a class=\"id\" href=\"#udp4_seq_afinfo\">udp4_seq_afinfo</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> <a class=\"id\" href=\"#udp4_net_ops\">udp4_net_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#init\">init</a> = <a class=\"id\" href=\"#udp4_proc_init_net\">udp4_proc_init_net</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#exit\">exit</a> = <a class=\"id\" href=\"#udp4_proc_exit_net\">udp4_proc_exit_net</a>,", 
"};", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#udp4_proc_init\">udp4_proc_init</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#register_pernet_subsys\">register_pernet_subsys</a>(&amp;<a class=\"id\" href=\"#udp4_net_ops\">udp4_net_ops</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#udp4_proc_exit\">udp4_proc_exit</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_pernet_subsys\">unregister_pernet_subsys</a>(&amp;<a class=\"id\" href=\"#udp4_net_ops\">udp4_net_ops</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PROC_FS */</span>", 
"", 
"static <a class=\"id\" href=\"#__initdata\">__initdata</a> unsigned long <a class=\"id\" href=\"#uhash_entries\">uhash_entries</a>;", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_uhash_entries\">set_uhash_entries</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#str\">str</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uhash_entries\">uhash_entries</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#str\">str</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uhash_entries\">uhash_entries</a> && <a class=\"id\" href=\"#uhash_entries\">uhash_entries</a> &lt; <a class=\"id\" href=\"#UDP_HTABLE_SIZE_MIN\">UDP_HTABLE_SIZE_MIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uhash_entries\">uhash_entries</a> = <a class=\"id\" href=\"#UDP_HTABLE_SIZE_MIN\">UDP_HTABLE_SIZE_MIN</a>;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"uhash_entries=\", <a class=\"id\" href=\"#set_uhash_entries\">set_uhash_entries</a>);", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#udp_table_init\">udp_table_init</a>(struct <a class=\"id\" href=\"#udp_table\">udp_table</a> *<a class=\"id\" href=\"#table\">table</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#CONFIG_BASE_SMALL\">CONFIG_BASE_SMALL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#alloc_large_system_hash\">alloc_large_system_hash</a>(<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>2 * sizeof(struct <a class=\"id\" href=\"#udp_hslot\">udp_hslot</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uhash_entries\">uhash_entries</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>21, <span class=\"comment\">/* one slot per 2 MB */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#log\">log</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>64 * 1024);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure hash table has the minimum size</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#CONFIG_BASE_SMALL\">CONFIG_BASE_SMALL</a> || <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#mask\">mask</a> &lt; <a class=\"id\" href=\"#UDP_HTABLE_SIZE_MIN\">UDP_HTABLE_SIZE_MIN</a> - 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#UDP_HTABLE_SIZE_MIN\">UDP_HTABLE_SIZE_MIN</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      2 * sizeof(struct <a class=\"id\" href=\"#udp_hslot\">udp_hslot</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#hash\">hash</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#log\">log</a> = <a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#UDP_HTABLE_SIZE_MIN\">UDP_HTABLE_SIZE_MIN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#UDP_HTABLE_SIZE_MIN\">UDP_HTABLE_SIZE_MIN</a> - 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#hash2\">hash2</a> = <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#hash\">hash</a> + (<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#mask\">mask</a> + 1);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#mask\">mask</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_NULLS_HEAD\">INIT_HLIST_NULLS_HEAD</a>(&amp;<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#hash\">hash</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#hash\">hash</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#hash\">hash</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#mask\">mask</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_NULLS_HEAD\">INIT_HLIST_NULLS_HEAD</a>(&amp;<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#hash2\">hash2</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#hash2\">hash2</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#hash2\">hash2</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#udp_init\">udp_init</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#limit\">limit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udp_table_init\">udp_table_init</a>(&amp;<a class=\"id\" href=\"#udp_table\">udp_table</a>, \"UDP\");", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the pressure threshold up by the same strategy of TCP. It is a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fraction of global memory that is up to 1/2 at 256 MB, decreasing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * toward zero with the amount of memory, with a floor of 128 pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#totalram_pages\">totalram_pages</a> - <a class=\"id\" href=\"#totalhigh_pages\">totalhigh_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>, 1UL<<(28-<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)) >> (20-<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = (<a class=\"id\" href=\"#limit\">limit</a> * (<a class=\"id\" href=\"#nr_pages\">nr_pages</a> >> (20-<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))) >> (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>-11);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#limit\">limit</a>, 128UL);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_udp_mem\">sysctl_udp_mem</a>[0] = <a class=\"id\" href=\"#limit\">limit</a> / 4 * 3;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_udp_mem\">sysctl_udp_mem</a>[1] = <a class=\"id\" href=\"#limit\">limit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_udp_mem\">sysctl_udp_mem</a>[2] = <a class=\"id\" href=\"#sysctl_udp_mem\">sysctl_udp_mem</a>[0] * 2;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_udp_rmem_min\">sysctl_udp_rmem_min</a> = <a class=\"id\" href=\"#SK_MEM_QUANTUM\">SK_MEM_QUANTUM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_udp_wmem_min\">sysctl_udp_wmem_min</a> = <a class=\"id\" href=\"#SK_MEM_QUANTUM\">SK_MEM_QUANTUM</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#udp4_ufo_send_check\">udp4_ufo_send_check</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udphdr\">udphdr</a> *<a class=\"id\" href=\"#uh\">uh</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, sizeof(*<a class=\"id\" href=\"#uh\">uh</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iph\">iph</a> = <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uh\">uh</a> = <a class=\"id\" href=\"#udp_hdr\">udp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#check\">check</a> = ~<a class=\"id\" href=\"#csum_tcpudp_magic\">csum_tcpudp_magic</a>(<a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#IPPROTO_UDP\">IPPROTO_UDP</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum_start\">csum_start</a> = <a class=\"id\" href=\"#skb_transport_header\">skb_transport_header</a>(<a class=\"id\" href=\"#skb\">skb</a>) - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum_offset\">csum_offset</a> = <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#udphdr\">udphdr</a>, <a class=\"id\" href=\"#check\">check</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_PARTIAL\">CHECKSUM_PARTIAL</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#udp4_ufo_fragment\">udp4_ufo_fragment</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#features\">features</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#segs\">segs</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mss\">mss</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum\">csum</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mss\">mss</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#gso_size\">gso_size</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> <= <a class=\"id\" href=\"#mss\">mss</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_gso_ok\">skb_gso_ok</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#features\">features</a> | <a class=\"id\" href=\"#NETIF_F_GSO_ROBUST\">NETIF_F_GSO_ROBUST</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Packet is from an untrusted source, reset gso_segs. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#gso_type\">gso_type</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#type\">type</a> &amp; ~(<a class=\"id\" href=\"#SKB_GSO_UDP\">SKB_GSO_UDP</a> | <a class=\"id\" href=\"#SKB_GSO_DODGY\">SKB_GSO_DODGY</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     !(<a class=\"id\" href=\"#type\">type</a> &amp; (<a class=\"id\" href=\"#SKB_GSO_UDP\">SKB_GSO_UDP</a>))))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#gso_segs\">gso_segs</a> = <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#mss\">mss</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#segs\">segs</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do software UFO. Complete and fill in the UDP checksum as HW cannot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do checksum of UDP packets sent as multiple IP fragments.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum_start\">csum_start</a> - <a class=\"id\" href=\"#skb_headroom\">skb_headroom</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#skb_checksum\">skb_checksum</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#offset\">offset</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum_offset\">csum_offset</a>;", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#__sum16\">__sum16</a> *)(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#offset\">offset</a>) = <a class=\"id\" href=\"#csum_fold\">csum_fold</a>(<a class=\"id\" href=\"#csum\">csum</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_NONE\">CHECKSUM_NONE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Fragment the skb. IP headers of the fragments are updated in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inet_gso_segment()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#segs\">segs</a> = <a class=\"id\" href=\"#skb_segment\">skb_segment</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#features\">features</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#segs\">segs</a>;", 
"}", 
"", 
];
xr_frag_insert('l/2b/c6b482b07c8fa48d1ae05fcebec2548ed021ee.xr', __xr_tmp);
