var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (c) 2008 Intel Corporation</span>", 
"<span class=\"comment\"> * Author: Matthew Wilcox &lt;willy@linux.intel.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Distributed under the terms of the GNU GPL, version 2</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file implements counting semaphores.</span>", 
"<span class=\"comment\"> * A counting semaphore may be acquired 'n' times before sleeping.</span>", 
"<span class=\"comment\"> * See mutex.c for single-acquisition sleeping locks which enforce</span>", 
"<span class=\"comment\"> * rules which allow code to be debugged more easily.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some notes on the implementation:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The spinlock controls access to the other members of the semaphore.</span>", 
"<span class=\"comment\"> * down_trylock() and up() can be called from interrupt context, so we</span>", 
"<span class=\"comment\"> * have to disable interrupts when taking the lock.  It turns out various</span>", 
"<span class=\"comment\"> * parts of the kernel expect to be able to use down() on a semaphore in</span>", 
"<span class=\"comment\"> * interrupt context when they know it will succeed, so we have to use</span>", 
"<span class=\"comment\"> * irqsave variants for down(), down_interruptible() and down_killable()</span>", 
"<span class=\"comment\"> * too.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The -&gt;count variable represents how many more tasks can acquire this</span>", 
"<span class=\"comment\"> * semaphore.  If it's zero, there may be tasks waiting on the wait_list.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#semaphore\">semaphore</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ftrace\">ftrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> void <a class=\"id\" href=\"#__down\">__down</a>(struct <a class=\"id\" href=\"#semaphore\">semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>);", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> int <a class=\"id\" href=\"#__down_interruptible\">__down_interruptible</a>(struct <a class=\"id\" href=\"#semaphore\">semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>);", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> int <a class=\"id\" href=\"#__down_killable\">__down_killable</a>(struct <a class=\"id\" href=\"#semaphore\">semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>);", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> int <a class=\"id\" href=\"#__down_timeout\">__down_timeout</a>(struct <a class=\"id\" href=\"#semaphore\">semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>, long <a class=\"id\" href=\"#jiffies\">jiffies</a>);", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> void <a class=\"id\" href=\"#__up\">__up</a>(struct <a class=\"id\" href=\"#semaphore\">semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * down - acquire the semaphore</span>", 
"<span class=\"comment\"> * @sem: the semaphore to be acquired</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Acquires the semaphore.  If no more tasks are allowed to acquire the</span>", 
"<span class=\"comment\"> * semaphore, calling this function will put the task to sleep until the</span>", 
"<span class=\"comment\"> * semaphore is released.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Use of this function is deprecated, please use down_interruptible() or</span>", 
"<span class=\"comment\"> * down_killable() instead.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#down\">down</a>(struct <a class=\"id\" href=\"#semaphore\">semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#count\">count</a> &gt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__down\">__down</a>(<a class=\"id\" href=\"#sem\">sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#down\">down</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * down_interruptible - acquire the semaphore unless interrupted</span>", 
"<span class=\"comment\"> * @sem: the semaphore to be acquired</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Attempts to acquire the semaphore.  If no more tasks are allowed to</span>", 
"<span class=\"comment\"> * acquire the semaphore, calling this function will put the task to sleep.</span>", 
"<span class=\"comment\"> * If the sleep is interrupted by a signal, this function will return -EINTR.</span>", 
"<span class=\"comment\"> * If the semaphore is successfully acquired, this function returns 0.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#down_interruptible\">down_interruptible</a>(struct <a class=\"id\" href=\"#semaphore\">semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#count\">count</a> &gt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#__down_interruptible\">__down_interruptible</a>(<a class=\"id\" href=\"#sem\">sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#down_interruptible\">down_interruptible</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * down_killable - acquire the semaphore unless killed</span>", 
"<span class=\"comment\"> * @sem: the semaphore to be acquired</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Attempts to acquire the semaphore.  If no more tasks are allowed to</span>", 
"<span class=\"comment\"> * acquire the semaphore, calling this function will put the task to sleep.</span>", 
"<span class=\"comment\"> * If the sleep is interrupted by a fatal signal, this function will return</span>", 
"<span class=\"comment\"> * -EINTR.  If the semaphore is successfully acquired, this function returns</span>", 
"<span class=\"comment\"> * 0.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#down_killable\">down_killable</a>(struct <a class=\"id\" href=\"#semaphore\">semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#count\">count</a> &gt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#__down_killable\">__down_killable</a>(<a class=\"id\" href=\"#sem\">sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#down_killable\">down_killable</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * down_trylock - try to acquire the semaphore, without waiting</span>", 
"<span class=\"comment\"> * @sem: the semaphore to be acquired</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Try to acquire the semaphore atomically.  Returns 0 if the mutex has</span>", 
"<span class=\"comment\"> * been acquired successfully or 1 if it it cannot be acquired.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: This return value is inverted from both spin_trylock and</span>", 
"<span class=\"comment\"> * mutex_trylock!  Be careful about this when converting code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unlike mutex_trylock, this function can be used from interrupt context,</span>", 
"<span class=\"comment\"> * and the semaphore can be released by any task or interrupt.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#down_trylock\">down_trylock</a>(struct <a class=\"id\" href=\"#semaphore\">semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#count\">count</a> - 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#count\">count</a> >= 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#count\">count</a> &lt; 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#down_trylock\">down_trylock</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * down_timeout - acquire the semaphore within a specified time</span>", 
"<span class=\"comment\"> * @sem: the semaphore to be acquired</span>", 
"<span class=\"comment\"> * @jiffies: how long to wait before failing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Attempts to acquire the semaphore.  If no more tasks are allowed to</span>", 
"<span class=\"comment\"> * acquire the semaphore, calling this function will put the task to sleep.</span>", 
"<span class=\"comment\"> * If the semaphore is not released within the specified number of jiffies,</span>", 
"<span class=\"comment\"> * this function returns -ETIME.  It returns 0 if the semaphore was acquired.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#down_timeout\">down_timeout</a>(struct <a class=\"id\" href=\"#semaphore\">semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>, long <a class=\"id\" href=\"#jiffies\">jiffies</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#count\">count</a> &gt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#__down_timeout\">__down_timeout</a>(<a class=\"id\" href=\"#sem\">sem</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#down_timeout\">down_timeout</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * up - release the semaphore</span>", 
"<span class=\"comment\"> * @sem: the semaphore to release</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Release the semaphore.  Unlike mutexes, up() may be called from any</span>", 
"<span class=\"comment\"> * context and even by tasks which have never called down().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#up\">up</a>(struct <a class=\"id\" href=\"#semaphore\">semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__up\">__up</a>(<a class=\"id\" href=\"#sem\">sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"", 
"<span class=\"comment\">/* Functions for the contended case */</span>", 
"", 
"struct <a class=\"id\" href=\"#semaphore_waiter\">semaphore_waiter</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#up\">up</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Because this function is inlined, the 'state' parameter will be</span>", 
"<span class=\"comment\"> * constant, and thus optimised away by the compiler.  Likewise the</span>", 
"<span class=\"comment\"> * 'timeout' parameter for the cases without timeouts.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#__down_common\">__down_common</a>(struct <a class=\"id\" href=\"#semaphore\">semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>, long <a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#semaphore_waiter\">semaphore_waiter</a> <a class=\"id\" href=\"#waiter\">waiter</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>.<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>.<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>.<a class=\"id\" href=\"#up\">up</a> = 0;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending_state\">signal_pending_state</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#task\">task</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#interrupted\">interrupted</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timeout\">timeout</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#timed_out\">timed_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_task_state\">__set_task_state</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(<a class=\"id\" href=\"#timeout\">timeout</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#waiter\">waiter</a>.<a class=\"id\" href=\"#up\">up</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#timed_out\">timed_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>.<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ETIME\">ETIME</a>;", 
"", 
" <a class=\"id\" href=\"#interrupted\">interrupted</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>.<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> void <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#__down\">__down</a>(struct <a class=\"id\" href=\"#semaphore\">semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__down_common\">__down_common</a>(<a class=\"id\" href=\"#sem\">sem</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>, <a class=\"id\" href=\"#MAX_SCHEDULE_TIMEOUT\">MAX_SCHEDULE_TIMEOUT</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> int <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#__down_interruptible\">__down_interruptible</a>(struct <a class=\"id\" href=\"#semaphore\">semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__down_common\">__down_common</a>(<a class=\"id\" href=\"#sem\">sem</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>, <a class=\"id\" href=\"#MAX_SCHEDULE_TIMEOUT\">MAX_SCHEDULE_TIMEOUT</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> int <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#__down_killable\">__down_killable</a>(struct <a class=\"id\" href=\"#semaphore\">semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__down_common\">__down_common</a>(<a class=\"id\" href=\"#sem\">sem</a>, <a class=\"id\" href=\"#TASK_KILLABLE\">TASK_KILLABLE</a>, <a class=\"id\" href=\"#MAX_SCHEDULE_TIMEOUT\">MAX_SCHEDULE_TIMEOUT</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> int <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#__down_timeout\">__down_timeout</a>(struct <a class=\"id\" href=\"#semaphore\">semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>, long <a class=\"id\" href=\"#jiffies\">jiffies</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__down_common\">__down_common</a>(<a class=\"id\" href=\"#sem\">sem</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> void <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#__up\">__up</a>(struct <a class=\"id\" href=\"#semaphore\">semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#semaphore_waiter\">semaphore_waiter</a> *<a class=\"id\" href=\"#waiter\">waiter</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#semaphore_waiter\">semaphore_waiter</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#up\">up</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#task\">task</a>);", 
"}", 
];
xr_frag_insert('l/2b/e579a9227492e33b405bc94c67b5cfcc522e5e.xr', __xr_tmp);
