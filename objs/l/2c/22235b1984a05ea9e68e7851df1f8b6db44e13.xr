var __xr_tmp = [
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sc_semmsl\">sc_semmsl</a><span class=\"ts\"/><a class=\"id\" href=\"#sem_ctls\">sem_ctls</a>[0]", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sc_semmns\">sc_semmns</a><span class=\"ts\"/><a class=\"id\" href=\"#sem_ctls\">sem_ctls</a>[1]", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sc_semopm\">sc_semopm</a><span class=\"ts\"/><a class=\"id\" href=\"#sem_ctls\">sem_ctls</a>[2]", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sc_semmni\">sc_semmni</a><span class=\"ts\"/><a class=\"id\" href=\"#sem_ctls\">sem_ctls</a>[3]", 
"", 
"void <a class=\"id\" href=\"#sem_init_ns\">sem_init_ns</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#sc_semmsl\">sc_semmsl</a> = <a class=\"id\" href=\"#SEMMSL\">SEMMSL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#sc_semmns\">sc_semmns</a> = <a class=\"id\" href=\"#SEMMNS\">SEMMNS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#sc_semopm\">sc_semopm</a> = <a class=\"id\" href=\"#SEMOPM\">SEMOPM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#sc_semmni\">sc_semmni</a> = <a class=\"id\" href=\"#SEMMNI\">SEMMNI</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#used_sems\">used_sems</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipc_init_ids\">ipc_init_ids</a>(&amp;<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#ids\">ids</a>[<a class=\"id\" href=\"#IPC_SEM_IDS\">IPC_SEM_IDS</a>]);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IPC_NS\">CONFIG_IPC_NS</a>", 
"void <a class=\"id\" href=\"#sem_exit_ns\">sem_exit_ns</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_ipcs\">free_ipcs</a>(<a class=\"id\" href=\"#ns\">ns</a>, &amp;<a class=\"id\" href=\"#sem_ids\">sem_ids</a>(<a class=\"id\" href=\"#ns\">ns</a>), <a class=\"id\" href=\"#freeary\">freeary</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idr_destroy\">idr_destroy</a>(&amp;<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#ids\">ids</a>[<a class=\"id\" href=\"#IPC_SEM_IDS\">IPC_SEM_IDS</a>].<a class=\"id\" href=\"#ipcs_idr\">ipcs_idr</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sem_init\">sem_init</a> (void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_init_ns\">sem_init_ns</a>(&amp;<a class=\"id\" href=\"#init_ipc_ns\">init_ipc_ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipc_init_proc_interface\">ipc_init_proc_interface</a>(\"sysvipc/sem\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"       key      semid perms      nsems   uid   gid  cuid  cgid      otime      ctime\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#IPC_SEM_IDS\">IPC_SEM_IDS</a>, <a class=\"id\" href=\"#sysvipc_sem_proc_show\">sysvipc_sem_proc_show</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sem_lock_(check_) routines are called in the paths where the rw_mutex</span>", 
"<span class=\"comment\"> * is not held.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sem_lock\">sem_lock</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>, int <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipcp\">ipcp</a> = <a class=\"id\" href=\"#ipc_lock\">ipc_lock</a>(&amp;<a class=\"id\" href=\"#sem_ids\">sem_ids</a>(<a class=\"id\" href=\"#ns\">ns</a>), <a class=\"id\" href=\"#id\">id</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return (struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *)<a class=\"id\" href=\"#ipcp\">ipcp</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>, struct <a class=\"id\" href=\"#sem_array\">sem_array</a>, <a class=\"id\" href=\"#sem_perm\">sem_perm</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sem_lock_check\">sem_lock_check</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipcp\">ipcp</a> = <a class=\"id\" href=\"#ipc_lock_check\">ipc_lock_check</a>(&amp;<a class=\"id\" href=\"#sem_ids\">sem_ids</a>(<a class=\"id\" href=\"#ns\">ns</a>), <a class=\"id\" href=\"#id\">id</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return (struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *)<a class=\"id\" href=\"#ipcp\">ipcp</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>, struct <a class=\"id\" href=\"#sem_array\">sem_array</a>, <a class=\"id\" href=\"#sem_perm\">sem_perm</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sem_lock_and_putref\">sem_lock_and_putref</a>(struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipc_lock_by_ptr\">ipc_lock_by_ptr</a>(&amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipc_rcu_putref\">ipc_rcu_putref</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sem_getref_and_unlock\">sem_getref_and_unlock</a>(struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipc_rcu_getref\">ipc_rcu_getref</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipc_unlock\">ipc_unlock</a>(&amp;(<a class=\"id\" href=\"#sma\">sma</a>)-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sem_putref\">sem_putref</a>(struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipc_lock_by_ptr\">ipc_lock_by_ptr</a>(&amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipc_rcu_putref\">ipc_rcu_putref</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipc_unlock\">ipc_unlock</a>(&amp;(<a class=\"id\" href=\"#sma\">sma</a>)-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sem_rmid\">sem_rmid</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>, struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipc_rmid\">ipc_rmid</a>(&amp;<a class=\"id\" href=\"#sem_ids\">sem_ids</a>(<a class=\"id\" href=\"#ns\">ns</a>), &amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Lockless wakeup algorithm:</span>", 
"<span class=\"comment\"> * Without the check/retry algorithm a lockless wakeup is possible:</span>", 
"<span class=\"comment\"> * - queue.status is initialized to -EINTR before blocking.</span>", 
"<span class=\"comment\"> * - wakeup is performed by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* unlinking the queue entry from sma-&gt;sem_pending</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* setting queue.status to IN_WAKEUP</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  This is the notification for the blocked thread that a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  result value is imminent.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* call wake_up_process</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* set queue.status to the final value.</span>", 
"<span class=\"comment\"> * - the previously blocked thread checks queue.status:</span>", 
"<span class=\"comment\"> *   <span class=\"ts\"/>* if it's IN_WAKEUP, then it must wait until the value changes</span>", 
"<span class=\"comment\"> *   <span class=\"ts\"/>* if it's not -EINTR, then the operation was completed by</span>", 
"<span class=\"comment\"> *   <span class=\"ts\"/>  update_queue. semtimedop can return queue.status without</span>", 
"<span class=\"comment\"> *   <span class=\"ts\"/>  performing any operation on the sem array.</span>", 
"<span class=\"comment\"> *   <span class=\"ts\"/>* otherwise it must acquire the spinlock and check what's up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The two-stage algorithm is necessary to protect against the following</span>", 
"<span class=\"comment\"> * races:</span>", 
"<span class=\"comment\"> * - if queue.status is set after wake_up_process, then the woken up idle</span>", 
"<span class=\"comment\"> *   thread could race forward and try (and fail) to acquire sma-&gt;lock</span>", 
"<span class=\"comment\"> *   before update_queue had a chance to set queue.status</span>", 
"<span class=\"comment\"> * - if queue.status is written before wake_up_process and if the</span>", 
"<span class=\"comment\"> *   blocked process is woken up by a signal between writing</span>", 
];
xr_frag_insert('l/2c/22235b1984a05ea9e68e7851df1f8b6db44e13.xr', __xr_tmp);
