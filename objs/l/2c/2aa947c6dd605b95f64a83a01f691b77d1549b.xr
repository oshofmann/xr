var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/ipc/util.h</span>", 
"<span class=\"comment\"> * Copyright (C) 1999 Christoph Rohland</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ipc helper functions (c) 1999 Manfred Spraul &lt;manfred@colorfullife.com&gt;</span>", 
"<span class=\"comment\"> * namespaces support.      2006 OpenVZ, SWsoft Inc.</span>", 
"<span class=\"comment\"> *                               Pavel Emelianov &lt;xemul@openvz.org&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_IPC_UTIL_H\">_IPC_UTIL_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_IPC_UTIL_H\">_IPC_UTIL_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#unistd\">unistd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEQ_MULTIPLIER\">SEQ_MULTIPLIER</a><span class=\"ts\"/>(<a class=\"id\" href=\"#IPCMNI\">IPCMNI</a>)", 
"", 
"void <a class=\"id\" href=\"#sem_init\">sem_init</a> (void);", 
"void <a class=\"id\" href=\"#msg_init\">msg_init</a> (void);", 
"void <a class=\"id\" href=\"#shm_init\">shm_init</a> (void);", 
"", 
"struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_POSIX_MQUEUE\">CONFIG_POSIX_MQUEUE</a>", 
"extern void <a class=\"id\" href=\"#mq_clear_sbinfo\">mq_clear_sbinfo</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>);", 
"extern void <a class=\"id\" href=\"#mq_put_mnt\">mq_put_mnt</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mq_clear_sbinfo\">mq_clear_sbinfo</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mq_put_mnt\">mq_put_mnt</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>) { }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSVIPC\">CONFIG_SYSVIPC</a>", 
"void <a class=\"id\" href=\"#sem_init_ns\">sem_init_ns</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>);", 
"void <a class=\"id\" href=\"#msg_init_ns\">msg_init_ns</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>);", 
"void <a class=\"id\" href=\"#shm_init_ns\">shm_init_ns</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>);", 
"", 
"void <a class=\"id\" href=\"#sem_exit_ns\">sem_exit_ns</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>);", 
"void <a class=\"id\" href=\"#msg_exit_ns\">msg_exit_ns</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>);", 
"void <a class=\"id\" href=\"#shm_exit_ns\">shm_exit_ns</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sem_init_ns\">sem_init_ns</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#msg_init_ns\">msg_init_ns</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#shm_init_ns\">shm_init_ns</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>) { }", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sem_exit_ns\">sem_exit_ns</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#msg_exit_ns\">msg_exit_ns</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#shm_exit_ns\">shm_exit_ns</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>) { }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Structure that holds the parameters needed by the ipc operations</span>", 
"<span class=\"comment\"> * (see after)</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ipc_params\">ipc_params</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_t\">key_t</a> <a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flg\">flg</a>;", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>;<span class=\"ts\"/><span class=\"comment\">/* for shared memories */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nsems\">nsems</a>;<span class=\"ts\"/><span class=\"comment\">/* for semaphores */</span>", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#u\">u</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* holds the getnew() specific param */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Structure that holds some ipc operations. This structure is used to unify</span>", 
"<span class=\"comment\"> * the calls to sys_msgget(), sys_semget(), sys_shmget()</span>", 
"<span class=\"comment\"> *      . routine to call to create a new ipc object. Can be one of newque,</span>", 
"<span class=\"comment\"> *        newary, newseg</span>", 
"<span class=\"comment\"> *      . routine to call to check permissions for a new ipc object.</span>", 
"<span class=\"comment\"> *        Can be one of security_msg_associate, security_sem_associate,</span>", 
"<span class=\"comment\"> *        security_shm_associate</span>", 
"<span class=\"comment\"> *      . routine to call for an extra check if needed</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ipc_ops\">ipc_ops</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#getnew\">getnew</a>) (struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *, struct <a class=\"id\" href=\"#ipc_params\">ipc_params</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#associate\">associate</a>) (struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *, int);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#more_checks\">more_checks</a>) (struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *, struct <a class=\"id\" href=\"#ipc_params\">ipc_params</a> *);", 
"};", 
"", 
"struct <a class=\"id\" href=\"#seq_file\">seq_file</a>;", 
"struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a>;", 
"", 
"void <a class=\"id\" href=\"#ipc_init_ids\">ipc_init_ids</a>(struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a> *);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ipc_init_proc_interface\">ipc_init_proc_interface</a>(const char *<a class=\"id\" href=\"#path\">path</a>, const char *<a class=\"id\" href=\"#header\">header</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ids\">ids</a>, int (*<a class=\"id\" href=\"#show\">show</a>)(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *, void *));", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ipc_init_proc_interface\">ipc_init_proc_interface</a>(<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#header\">header</a>, <a class=\"id\" href=\"#ids\">ids</a>, <a class=\"id\" href=\"#show\">show</a>) do {} while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IPC_SEM_IDS\">IPC_SEM_IDS</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IPC_MSG_IDS\">IPC_MSG_IDS</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IPC_SHM_IDS\">IPC_SHM_IDS</a><span class=\"ts\"/>2", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ipcid_to_idx\">ipcid_to_idx</a>(<a class=\"id\" href=\"#id\">id</a>) ((<a class=\"id\" href=\"#id\">id</a>) % <a class=\"id\" href=\"#SEQ_MULTIPLIER\">SEQ_MULTIPLIER</a>)", 
"", 
"<span class=\"comment\">/* must be called with ids-&gt;rw_mutex acquired for writing */</span>", 
"int <a class=\"id\" href=\"#ipc_addid\">ipc_addid</a>(struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a> *, struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *, int);", 
"", 
"<span class=\"comment\">/* must be called with ids-&gt;rw_mutex acquired for reading */</span>", 
"int <a class=\"id\" href=\"#ipc_get_maxid\">ipc_get_maxid</a>(struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a> *);", 
"", 
"<span class=\"comment\">/* must be called with both locks acquired. */</span>", 
"void <a class=\"id\" href=\"#ipc_rmid\">ipc_rmid</a>(struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a> *, struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *);", 
"", 
"<span class=\"comment\">/* must be called with ipcp locked */</span>", 
"int <a class=\"id\" href=\"#ipcperms\">ipcperms</a>(struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipcp\">ipcp</a>, short <a class=\"id\" href=\"#flg\">flg</a>);", 
"", 
"<span class=\"comment\">/* for rare, potentially huge allocations.</span>", 
"<span class=\"comment\"> * both function can sleep</span>", 
"<span class=\"comment\"> */</span>", 
"void* <a class=\"id\" href=\"#ipc_alloc\">ipc_alloc</a>(int <a class=\"id\" href=\"#size\">size</a>);", 
"void <a class=\"id\" href=\"#ipc_free\">ipc_free</a>(void* <a class=\"id\" href=\"#ptr\">ptr</a>, int <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For allocation that need to be freed by RCU.</span>", 
"<span class=\"comment\"> * Objects are reference counted, they start with reference count 1.</span>", 
"<span class=\"comment\"> * getref increases the refcount, the putref call that reduces the recount</span>", 
"<span class=\"comment\"> * to 0 schedules the rcu destruction. Caller must guarantee locking.</span>", 
"<span class=\"comment\"> */</span>", 
"void* <a class=\"id\" href=\"#ipc_rcu_alloc\">ipc_rcu_alloc</a>(int <a class=\"id\" href=\"#size\">size</a>);", 
"void <a class=\"id\" href=\"#ipc_rcu_getref\">ipc_rcu_getref</a>(void *<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"void <a class=\"id\" href=\"#ipc_rcu_putref\">ipc_rcu_putref</a>(void *<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"", 
"struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipc_lock\">ipc_lock</a>(struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a> *, int);", 
"", 
"void <a class=\"id\" href=\"#kernel_to_ipc64_perm\">kernel_to_ipc64_perm</a>(struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#in\">in</a>, struct <a class=\"id\" href=\"#ipc64_perm\">ipc64_perm</a> *<a class=\"id\" href=\"#out\">out</a>);", 
"void <a class=\"id\" href=\"#ipc64_perm_to_ipc_perm\">ipc64_perm_to_ipc_perm</a>(struct <a class=\"id\" href=\"#ipc64_perm\">ipc64_perm</a> *<a class=\"id\" href=\"#in\">in</a>, struct <a class=\"id\" href=\"#ipc_perm\">ipc_perm</a> *<a class=\"id\" href=\"#out\">out</a>);", 
"void <a class=\"id\" href=\"#ipc_update_perm\">ipc_update_perm</a>(struct <a class=\"id\" href=\"#ipc64_perm\">ipc64_perm</a> *<a class=\"id\" href=\"#in\">in</a>, struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#out\">out</a>);", 
"struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipcctl_pre_down\">ipcctl_pre_down</a>(struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a> *<a class=\"id\" href=\"#ids\">ids</a>, int <a class=\"id\" href=\"#id\">id</a>, int <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ipc64_perm\">ipc64_perm</a> *<a class=\"id\" href=\"#perm\">perm</a>, int <a class=\"id\" href=\"#extra_perm\">extra_perm</a>);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ARCH_WANT_IPC_PARSE_VERSION\">__ARCH_WANT_IPC_PARSE_VERSION</a>", 
"  <span class=\"comment\">/* On IA-64, we always use the \"64-bit version\" of the IPC structures.  */</span> ", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ipc_parse_version\">ipc_parse_version</a>(<a class=\"id\" href=\"#cmd\">cmd</a>)<span class=\"ts\"/><a class=\"id\" href=\"#IPC_64\">IPC_64</a>", 
"#else", 
"int <a class=\"id\" href=\"#ipc_parse_version\">ipc_parse_version</a> (int *<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern void <a class=\"id\" href=\"#free_msg\">free_msg</a>(struct <a class=\"id\" href=\"#msg_msg\">msg_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>);", 
"extern struct <a class=\"id\" href=\"#msg_msg\">msg_msg</a> *<a class=\"id\" href=\"#load_msg\">load_msg</a>(const void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#src\">src</a>, int <a class=\"id\" href=\"#len\">len</a>);", 
"extern int <a class=\"id\" href=\"#store_msg\">store_msg</a>(void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#dest\">dest</a>, struct <a class=\"id\" href=\"#msg_msg\">msg_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>, int <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"extern void <a class=\"id\" href=\"#recompute_msgmni\">recompute_msgmni</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ipc_buildid\">ipc_buildid</a>(int <a class=\"id\" href=\"#id\">id</a>, int <a class=\"id\" href=\"#seq\">seq</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#SEQ_MULTIPLIER\">SEQ_MULTIPLIER</a> * <a class=\"id\" href=\"#seq\">seq</a> + <a class=\"id\" href=\"#id\">id</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Must be called with ipcp locked</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ipc_checkid\">ipc_checkid</a>(struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipcp\">ipcp</a>, int <a class=\"id\" href=\"#uid\">uid</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uid\">uid</a> / <a class=\"id\" href=\"#SEQ_MULTIPLIER\">SEQ_MULTIPLIER</a> != <a class=\"id\" href=\"#ipcp\">ipcp</a>-><a class=\"id\" href=\"#seq\">seq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ipc_lock_by_ptr\">ipc_lock_by_ptr</a>(struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#perm\">perm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#perm\">perm</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
];
xr_frag_insert('l/2c/2aa947c6dd605b95f64a83a01f691b77d1549b.xr', __xr_tmp);
