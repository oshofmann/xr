var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * menu.c - the menu idle governor</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2006-2007 Adam Belay &lt;abelay@novell.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2009 Intel Corporation</span>", 
"<span class=\"comment\"> * Author:</span>", 
"<span class=\"comment\"> *        Arjan van de Ven &lt;arjan@linux.intel.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This code is licenced under the GPL version 2 as described</span>", 
"<span class=\"comment\"> * in the COPYING file that acompanies the Linux Kernel.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpuidle\">cpuidle</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm_qos_params\">pm_qos_params</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ktime\">ktime</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hrtimer\">hrtimer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tick\">tick</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#math64\">math64</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BUCKETS\">BUCKETS</a> 12", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INTERVALS\">INTERVALS</a> 8", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RESOLUTION\">RESOLUTION</a> 1024", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECAY\">DECAY</a> 8", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_INTERESTING\">MAX_INTERESTING</a> 50000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STDDEV_THRESH\">STDDEV_THRESH</a> 400", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Concepts and ideas behind the menu governor</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For the menu governor, there are 3 decision factors for picking a C</span>", 
"<span class=\"comment\"> * state:</span>", 
"<span class=\"comment\"> * 1) Energy break even point</span>", 
"<span class=\"comment\"> * 2) Performance impact</span>", 
"<span class=\"comment\"> * 3) Latency tolerance (from pmqos infrastructure)</span>", 
"<span class=\"comment\"> * These these three factors are treated independently.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Energy break even point</span>", 
"<span class=\"comment\"> * -----------------------</span>", 
"<span class=\"comment\"> * C state entry and exit have an energy cost, and a certain amount of time in</span>", 
"<span class=\"comment\"> * the  C state is required to actually break even on this cost. CPUIDLE</span>", 
"<span class=\"comment\"> * provides us this duration in the \"target_residency\" field. So all that we</span>", 
"<span class=\"comment\"> * need is a good prediction of how long we'll be idle. Like the traditional</span>", 
"<span class=\"comment\"> * menu governor, we start with the actual known \"next timer event\" time.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Since there are other source of wakeups (interrupts for example) than</span>", 
"<span class=\"comment\"> * the next timer event, this estimation is rather optimistic. To get a</span>", 
"<span class=\"comment\"> * more realistic estimate, a correction factor is applied to the estimate,</span>", 
"<span class=\"comment\"> * that is based on historic behavior. For example, if in the past the actual</span>", 
"<span class=\"comment\"> * duration always was 50% of the next timer tick, the correction factor will</span>", 
"<span class=\"comment\"> * be 0.5.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * menu uses a running average for this correction factor, however it uses a</span>", 
"<span class=\"comment\"> * set of factors, not just a single factor. This stems from the realization</span>", 
"<span class=\"comment\"> * that the ratio is dependent on the order of magnitude of the expected</span>", 
"<span class=\"comment\"> * duration; if we expect 500 milliseconds of idle time the likelihood of</span>", 
"<span class=\"comment\"> * getting an interrupt very early is much higher than if we expect 50 micro</span>", 
"<span class=\"comment\"> * seconds of idle time. A second independent factor that has big impact on</span>", 
"<span class=\"comment\"> * the actual factor is if there is (disk) IO outstanding or not.</span>", 
"<span class=\"comment\"> * (as a special twist, we consider every sleep longer than 50 milliseconds</span>", 
"<span class=\"comment\"> * as perfect; there are no power gains for sleeping longer than this)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For these two reasons we keep an array of 12 independent factors, that gets</span>", 
"<span class=\"comment\"> * indexed based on the magnitude of the expected duration as well as the</span>", 
"<span class=\"comment\"> * \"is IO outstanding\" property.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Repeatable-interval-detector</span>", 
"<span class=\"comment\"> * ----------------------------</span>", 
"<span class=\"comment\"> * There are some cases where \"next timer\" is a completely unusable predictor:</span>", 
"<span class=\"comment\"> * Those cases where the interval is fixed, for example due to hardware</span>", 
"<span class=\"comment\"> * interrupt mitigation, but also due to fixed transfer rate devices such as</span>", 
"<span class=\"comment\"> * mice.</span>", 
"<span class=\"comment\"> * For this, we use a different predictor: We track the duration of the last 8</span>", 
"<span class=\"comment\"> * intervals and if the stand deviation of these 8 intervals is below a</span>", 
"<span class=\"comment\"> * threshold value, we use the average of these intervals as prediction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Limiting Performance Impact</span>", 
"<span class=\"comment\"> * ---------------------------</span>", 
"<span class=\"comment\"> * C states, especially those with large exit latencies, can have a real</span>", 
"<span class=\"comment\"> * noticeable impact on workloads, which is not acceptable for most sysadmins,</span>", 
"<span class=\"comment\"> * and in addition, less performance has a power price of its own.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * As a general rule of thumb, menu assumes that the following heuristic</span>", 
"<span class=\"comment\"> * holds:</span>", 
"<span class=\"comment\"> *     The busier the system, the less impact of C states is acceptable</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This rule-of-thumb is implemented using a performance-multiplier:</span>", 
"<span class=\"comment\"> * If the exit latency times the performance multiplier is longer than</span>", 
"<span class=\"comment\"> * the predicted duration, the C state is not considered a candidate</span>", 
"<span class=\"comment\"> * for selection due to a too high performance impact. So the higher</span>", 
"<span class=\"comment\"> * this multiplier is, the longer we need to be idle to pick a deep C</span>", 
"<span class=\"comment\"> * state, and thus the less likely a busy CPU will hit such a deep</span>", 
"<span class=\"comment\"> * C state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Two factors are used in determing this multiplier:</span>", 
"<span class=\"comment\"> * a value of 10 is added for each point of \"per cpu load average\" we have.</span>", 
"<span class=\"comment\"> * a value of 5 points is added for each process that is waiting for</span>", 
"<span class=\"comment\"> * IO on this CPU.</span>", 
"<span class=\"comment\"> * (these values are experimentally determined)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The load average factor gives a longer term (few seconds) input to the</span>", 
"<span class=\"comment\"> * decision, while the iowait value gives a cpu local instantanious input.</span>", 
"<span class=\"comment\"> * The iowait factor may look low, but realize that this is also already</span>", 
"<span class=\"comment\"> * represented in the system load average.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#menu_device\">menu_device</a> {", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_state_idx\">last_state_idx</a>;", 
"<span class=\"ts\"/>int             <a class=\"id\" href=\"#needs_update\">needs_update</a>;", 
"", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#expected_us\">expected_us</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#predicted_us\">predicted_us</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#exit_us\">exit_us</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#bucket\">bucket</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#correction_factor\">correction_factor</a>[<a class=\"id\" href=\"#BUCKETS\">BUCKETS</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#intervals\">intervals</a>[<a class=\"id\" href=\"#INTERVALS\">INTERVALS</a>];", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#interval_ptr\">interval_ptr</a>;", 
"};", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOAD_INT\">LOAD_INT</a>(<a class=\"id\" href=\"#x\">x</a>) ((<a class=\"id\" href=\"#x\">x</a>) >> <a class=\"id\" href=\"#FSHIFT\">FSHIFT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOAD_FRAC\">LOAD_FRAC</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#LOAD_INT\">LOAD_INT</a>(((<a class=\"id\" href=\"#x\">x</a>) &amp; (<a class=\"id\" href=\"#FIXED_1\">FIXED_1</a>-1)) * 100)", 
"", 
"static int <a class=\"id\" href=\"#get_loadavg\">get_loadavg</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#this_cpu_load\">this_cpu_load</a>();", 
"", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#LOAD_INT\">LOAD_INT</a>(<a class=\"id\" href=\"#this\">this</a>) * 10 + <a class=\"id\" href=\"#LOAD_FRAC\">LOAD_FRAC</a>(<a class=\"id\" href=\"#this\">this</a>) / 10;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#which_bucket\">which_bucket</a>(unsigned int <a class=\"id\" href=\"#duration\">duration</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bucket\">bucket</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We keep two groups of stats; one with no</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * IO pending, one without.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This allows us to calculate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * E(duration)|iowait</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_iowait_cpu\">nr_iowait_cpu</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bucket\">bucket</a> = <a class=\"id\" href=\"#BUCKETS\">BUCKETS</a>/2;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#duration\">duration</a> &lt; 10)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bucket\">bucket</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#duration\">duration</a> &lt; 100)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bucket\">bucket</a> + 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#duration\">duration</a> &lt; 1000)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bucket\">bucket</a> + 2;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#duration\">duration</a> &lt; 10000)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bucket\">bucket</a> + 3;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#duration\">duration</a> &lt; 100000)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bucket\">bucket</a> + 4;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bucket\">bucket</a> + 5;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return a multiplier for the exit latency that is intended</span>", 
"<span class=\"comment\"> * to take performance requirements into account.</span>", 
"<span class=\"comment\"> * The more performance critical we estimate the system</span>", 
"<span class=\"comment\"> * to be, the higher this multiplier, and thus the higher</span>", 
"<span class=\"comment\"> * the barrier to go to an expensive C state.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#performance_multiplier\">performance_multiplier</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mult\">mult</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* for higher loadavg, we are more reluctant */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mult\">mult</a> += 2 * <a class=\"id\" href=\"#get_loadavg\">get_loadavg</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* for IO wait tasks (per cpu!) we add 5x each */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mult\">mult</a> += 10 * <a class=\"id\" href=\"#nr_iowait_cpu\">nr_iowait_cpu</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mult\">mult</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#menu_device\">menu_device</a>, <a class=\"id\" href=\"#menu_devices\">menu_devices</a>);", 
"", 
"static void <a class=\"id\" href=\"#menu_update\">menu_update</a>(struct <a class=\"id\" href=\"#cpuidle_device\">cpuidle_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"comment\">/* This implements DIV_ROUND_CLOSEST but avoids 64 bit division */</span>", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#div_round64\">div_round64</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#dividend\">dividend</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#divisor\">divisor</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#div_u64\">div_u64</a>(<a class=\"id\" href=\"#dividend\">dividend</a> + (<a class=\"id\" href=\"#divisor\">divisor</a> / 2), <a class=\"id\" href=\"#divisor\">divisor</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Try detecting repeating patterns by keeping track of the last 8</span>", 
"<span class=\"comment\"> * intervals, and checking if the standard deviation of that set</span>", 
"<span class=\"comment\"> * of points is below a threshold. If it is... then use the</span>", 
"<span class=\"comment\"> * average of these 8 points as the estimated value.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#detect_repeating_patterns\">detect_repeating_patterns</a>(struct <a class=\"id\" href=\"#menu_device\">menu_device</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#avg\">avg</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#stddev\">stddev</a> = 0; <span class=\"comment\">/* contains the square of the std deviation */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* first calculate average and standard deviation of the past */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#INTERVALS\">INTERVALS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avg\">avg</a> += <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#intervals\">intervals</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avg\">avg</a> = <a class=\"id\" href=\"#avg\">avg</a> / <a class=\"id\" href=\"#INTERVALS\">INTERVALS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if the avg is beyond the known next tick, it's worthless */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#avg\">avg</a> &gt; <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#expected_us\">expected_us</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#INTERVALS\">INTERVALS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stddev\">stddev</a> += (<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#intervals\">intervals</a>[<a class=\"id\" href=\"#i\">i</a>] - <a class=\"id\" href=\"#avg\">avg</a>) *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#intervals\">intervals</a>[<a class=\"id\" href=\"#i\">i</a>] - <a class=\"id\" href=\"#avg\">avg</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stddev\">stddev</a> = <a class=\"id\" href=\"#stddev\">stddev</a> / <a class=\"id\" href=\"#INTERVALS\">INTERVALS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * now.. if stddev is small.. then assume we have a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * repeating pattern and predict we keep doing this.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#avg\">avg</a> && <a class=\"id\" href=\"#stddev\">stddev</a> &lt; <a class=\"id\" href=\"#STDDEV_THRESH\">STDDEV_THRESH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#predicted_us\">predicted_us</a> = <a class=\"id\" href=\"#avg\">avg</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * menu_select - selects the next idle state to enter</span>", 
"<span class=\"comment\"> * @dev: the CPU</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#menu_select\">menu_select</a>(struct <a class=\"id\" href=\"#cpuidle_device\">cpuidle_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#menu_device\">menu_device</a> *<a class=\"id\" href=\"#data\">data</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#menu_devices\">menu_devices</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#latency_req\">latency_req</a> = <a class=\"id\" href=\"#pm_qos_request\">pm_qos_request</a>(<a class=\"id\" href=\"#PM_QOS_CPU_DMA_LATENCY\">PM_QOS_CPU_DMA_LATENCY</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#power_usage\">power_usage</a> = -1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#multiplier\">multiplier</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#needs_update\">needs_update</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#menu_update\">menu_update</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#needs_update\">needs_update</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#last_state_idx\">last_state_idx</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#exit_us\">exit_us</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Special case when user has set very strict latency requirement */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#latency_req\">latency_req</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* determine the expected residency time, round up */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#expected_us\">expected_us</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>((<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#tick_nohz_get_sleep_length\">tick_nohz_get_sleep_length</a>()), 1000);", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#bucket\">bucket</a> = <a class=\"id\" href=\"#which_bucket\">which_bucket</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#expected_us\">expected_us</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#multiplier\">multiplier</a> = <a class=\"id\" href=\"#performance_multiplier\">performance_multiplier</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the correction factor is 0 (eg first time init or cpu hotplug</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * etc), we actually want to start out with a unity factor.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#correction_factor\">correction_factor</a>[<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#bucket\">bucket</a>] == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#correction_factor\">correction_factor</a>[<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#bucket\">bucket</a>] = <a class=\"id\" href=\"#RESOLUTION\">RESOLUTION</a> * <a class=\"id\" href=\"#DECAY\">DECAY</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure to round up for half microseconds */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#predicted_us\">predicted_us</a> = <a class=\"id\" href=\"#div_round64\">div_round64</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#expected_us\">expected_us</a> * <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#correction_factor\">correction_factor</a>[<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#bucket\">bucket</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#RESOLUTION\">RESOLUTION</a> * <a class=\"id\" href=\"#DECAY\">DECAY</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#detect_repeating_patterns\">detect_repeating_patterns</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We want to default to C1 (hlt), not to busy polling</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unless the timer is happening really really soon.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#expected_us\">expected_us</a> &gt; 5)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#last_state_idx\">last_state_idx</a> = <a class=\"id\" href=\"#CPUIDLE_DRIVER_STATE_START\">CPUIDLE_DRIVER_STATE_START</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Find the idle state with the lowest power while satisfying</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * our constraints.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#CPUIDLE_DRIVER_STATE_START\">CPUIDLE_DRIVER_STATE_START</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state_count\">state_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuidle_state\">cpuidle_state</a> *<a class=\"id\" href=\"#s\">s</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CPUIDLE_FLAG_IGNORE\">CPUIDLE_FLAG_IGNORE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#target_residency\">target_residency</a> &gt; <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#predicted_us\">predicted_us</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#exit_latency\">exit_latency</a> &gt; <a class=\"id\" href=\"#latency_req\">latency_req</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#exit_latency\">exit_latency</a> * <a class=\"id\" href=\"#multiplier\">multiplier</a> &gt; <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#predicted_us\">predicted_us</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#power_usage\">power_usage</a> &lt; <a class=\"id\" href=\"#power_usage\">power_usage</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#power_usage\">power_usage</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#power_usage\">power_usage</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#last_state_idx\">last_state_idx</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#exit_us\">exit_us</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#exit_latency\">exit_latency</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#last_state_idx\">last_state_idx</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * menu_reflect - records that data structures need update</span>", 
"<span class=\"comment\"> * @dev: the CPU</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: it's important to be fast here because this operation will add to</span>", 
"<span class=\"comment\"> *       the overall exit latency.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#menu_reflect\">menu_reflect</a>(struct <a class=\"id\" href=\"#cpuidle_device\">cpuidle_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#menu_device\">menu_device</a> *<a class=\"id\" href=\"#data\">data</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#menu_devices\">menu_devices</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#needs_update\">needs_update</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * menu_update - attempts to guess what happened after entry</span>", 
"<span class=\"comment\"> * @dev: the CPU</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#menu_update\">menu_update</a>(struct <a class=\"id\" href=\"#cpuidle_device\">cpuidle_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#menu_device\">menu_device</a> *<a class=\"id\" href=\"#data\">data</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#menu_devices\">menu_devices</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#last_idx\">last_idx</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#last_state_idx\">last_state_idx</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#last_idle_us\">last_idle_us</a> = <a class=\"id\" href=\"#cpuidle_get_last_residency\">cpuidle_get_last_residency</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuidle_state\">cpuidle_state</a> *<a class=\"id\" href=\"#target\">target</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#last_idx\">last_idx</a>];", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#measured_us\">measured_us</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#new_factor\">new_factor</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ugh, this idle state doesn't support residency measurements, so we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are basically lost in the dark.  As a compromise, assume we slept</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for the whole expected time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#target\">target</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CPUIDLE_FLAG_TIME_VALID\">CPUIDLE_FLAG_TIME_VALID</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_idle_us\">last_idle_us</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#expected_us\">expected_us</a>;", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#measured_us\">measured_us</a> = <a class=\"id\" href=\"#last_idle_us\">last_idle_us</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We correct for the exit latency; we are assuming here that the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * exit latency happens after the event that we're interested in.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#measured_us\">measured_us</a> &gt; <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#exit_us\">exit_us</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#measured_us\">measured_us</a> -= <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#exit_us\">exit_us</a>;", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* update our correction ratio */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_factor\">new_factor</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#correction_factor\">correction_factor</a>[<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#bucket\">bucket</a>]", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>* (<a class=\"id\" href=\"#DECAY\">DECAY</a> - 1) / <a class=\"id\" href=\"#DECAY\">DECAY</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#expected_us\">expected_us</a> &gt; 0 && <a class=\"id\" href=\"#measured_us\">measured_us</a> &lt; <a class=\"id\" href=\"#MAX_INTERESTING\">MAX_INTERESTING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_factor\">new_factor</a> += <a class=\"id\" href=\"#RESOLUTION\">RESOLUTION</a> * <a class=\"id\" href=\"#measured_us\">measured_us</a> / <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#expected_us\">expected_us</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we were idle so long that we count it as a perfect</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * prediction</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_factor\">new_factor</a> += <a class=\"id\" href=\"#RESOLUTION\">RESOLUTION</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We don't want 0 as factor; we always want at least</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a tiny bit of estimated time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_factor\">new_factor</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_factor\">new_factor</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#correction_factor\">correction_factor</a>[<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#bucket\">bucket</a>] = <a class=\"id\" href=\"#new_factor\">new_factor</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* update the repeating-pattern data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#intervals\">intervals</a>[<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#interval_ptr\">interval_ptr</a>++] = <a class=\"id\" href=\"#last_idle_us\">last_idle_us</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#interval_ptr\">interval_ptr</a> >= <a class=\"id\" href=\"#INTERVALS\">INTERVALS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#interval_ptr\">interval_ptr</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * menu_enable_device - scans a CPU's states and does setup</span>", 
"<span class=\"comment\"> * @dev: the CPU</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#menu_enable_device\">menu_enable_device</a>(struct <a class=\"id\" href=\"#cpuidle_device\">cpuidle_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#menu_device\">menu_device</a> *<a class=\"id\" href=\"#data\">data</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#menu_devices\">menu_devices</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#data\">data</a>, 0, sizeof(struct <a class=\"id\" href=\"#menu_device\">menu_device</a>));", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#cpuidle_governor\">cpuidle_governor</a> <a class=\"id\" href=\"#menu_governor\">menu_governor</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> =<span class=\"ts\"/><span class=\"ts\"/>\"menu\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#rating\">rating</a> =<span class=\"ts\"/>20,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#enable\">enable</a> =<span class=\"ts\"/><a class=\"id\" href=\"#menu_enable_device\">menu_enable_device</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#select\">select</a> =<span class=\"ts\"/><a class=\"id\" href=\"#menu_select\">menu_select</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#reflect\">reflect</a> =<span class=\"ts\"/><a class=\"id\" href=\"#menu_reflect\">menu_reflect</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a> =<span class=\"ts\"/><a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * init_menu - initializes the governor</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_menu\">init_menu</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpuidle_register_governor\">cpuidle_register_governor</a>(&amp;<a class=\"id\" href=\"#menu_governor\">menu_governor</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * exit_menu - exits the governor</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#exit_menu\">exit_menu</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuidle_unregister_governor\">cpuidle_unregister_governor</a>(&amp;<a class=\"id\" href=\"#menu_governor\">menu_governor</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#init_menu\">init_menu</a>);", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#exit_menu\">exit_menu</a>);", 
];
xr_frag_insert('l/2c/3ba4357e3e3d264a4a3a1bd5c231d9703840fa.xr', __xr_tmp);
