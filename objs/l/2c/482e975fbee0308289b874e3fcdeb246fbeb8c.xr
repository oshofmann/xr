var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Code for replacing ftrace calls with jumps.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2007-2008 Steven Rostedt &lt;srostedt@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Thanks goes to Ingo Molnar, for suggesting the idea.</span>", 
"<span class=\"comment\"> * Mathieu Desnoyers, for suggesting postponing the modifications.</span>", 
"<span class=\"comment\"> * Arjan van de Ven, for keeping me straight, and explaining to me</span>", 
"<span class=\"comment\"> * the dangers of modifying code on the run.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>) <a class=\"id\" href=\"#KBUILD_MODNAME\">KBUILD_MODNAME</a> \": \" <a class=\"id\" href=\"#fmt\">fmt</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ftrace\">ftrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#syscall\">syscall</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cacheflush\">cacheflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#ftrace\">ftrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#nops\">nops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#nmi\">nmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DYNAMIC_FTRACE\">CONFIG_DYNAMIC_FTRACE</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * modifying_code is set to notify NMIs that they need to use</span>", 
"<span class=\"comment\"> * memory barriers when entering or exiting. But we don't want</span>", 
"<span class=\"comment\"> * to burden NMIs with unnecessary memory barriers when code</span>", 
"<span class=\"comment\"> * modification is not being done (which is most of the time).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A mutex is already held when ftrace_arch_code_modify_prepare</span>", 
"<span class=\"comment\"> * and post_process are called. No locks need to be taken here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Stop machine will make sure currently running NMIs are done</span>", 
"<span class=\"comment\"> * and new NMIs will see the updated variable before we need</span>", 
"<span class=\"comment\"> * to worry about NMIs doing memory barriers.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#modifying_code\">modifying_code</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(int, <a class=\"id\" href=\"#save_modifying_code\">save_modifying_code</a>);", 
"", 
"int <a class=\"id\" href=\"#ftrace_arch_code_modify_prepare\">ftrace_arch_code_modify_prepare</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_kernel_text_rw\">set_kernel_text_rw</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#modifying_code\">modifying_code</a> = 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#ftrace_arch_code_modify_post_process\">ftrace_arch_code_modify_post_process</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#modifying_code\">modifying_code</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_kernel_text_ro\">set_kernel_text_ro</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"union <a class=\"id\" href=\"#ftrace_code_union\">ftrace_code_union</a> {", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#code\">code</a>[<a class=\"id\" href=\"#MCOUNT_INSN_SIZE\">MCOUNT_INSN_SIZE</a>];", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#e8\">e8</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#packed\">packed</a>));", 
"};", 
"", 
"static int <a class=\"id\" href=\"#ftrace_calc_offset\">ftrace_calc_offset</a>(long <a class=\"id\" href=\"#ip\">ip</a>, long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return (int)(<a class=\"id\" href=\"#addr\">addr</a> - <a class=\"id\" href=\"#ip\">ip</a>);", 
"}", 
"", 
"static unsigned char *<a class=\"id\" href=\"#ftrace_call_replace\">ftrace_call_replace</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>static union <a class=\"id\" href=\"#ftrace_code_union\">ftrace_code_union</a> <a class=\"id\" href=\"#calc\">calc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#calc\">calc</a>.<a class=\"id\" href=\"#e8\">e8</a><span class=\"ts\"/><span class=\"ts\"/>= 0xe8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#calc\">calc</a>.<a class=\"id\" href=\"#offset\">offset</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ftrace_calc_offset\">ftrace_calc_offset</a>(<a class=\"id\" href=\"#ip\">ip</a> + <a class=\"id\" href=\"#MCOUNT_INSN_SIZE\">MCOUNT_INSN_SIZE</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No locking needed, this must be called via kstop_machine</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which in essence is like running on a uniprocessor machine.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#calc\">calc</a>.<a class=\"id\" href=\"#code\">code</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Modifying code must take extra care. On an SMP machine, if</span>", 
"<span class=\"comment\"> * the code being modified is also being executed on another CPU</span>", 
"<span class=\"comment\"> * that CPU will have undefined results and possibly take a GPF.</span>", 
"<span class=\"comment\"> * We use kstop_machine to stop other CPUS from exectuing code.</span>", 
"<span class=\"comment\"> * But this does not stop NMIs from happening. We still need</span>", 
"<span class=\"comment\"> * to protect against that. We separate out the modification of</span>", 
"<span class=\"comment\"> * the code to take care of this.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Two buffers are added: An IP buffer and a \"code\" buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1) Put the instruction pointer into the IP buffer</span>", 
"<span class=\"comment\"> *    and the new code into the \"code\" buffer.</span>", 
"<span class=\"comment\"> * 2) Wait for any running NMIs to finish and set a flag that says</span>", 
"<span class=\"comment\"> *    we are modifying code, it is done in an atomic operation.</span>", 
"<span class=\"comment\"> * 3) Write the code</span>", 
"<span class=\"comment\"> * 4) clear the flag.</span>", 
"<span class=\"comment\"> * 5) Wait for any running NMIs to finish.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If an NMI is executed, the first thing it does is to call</span>", 
"<span class=\"comment\"> * \"ftrace_nmi_enter\". This will check if the flag is set to write</span>", 
"<span class=\"comment\"> * and if it is, it will write what is in the IP and \"code\" buffers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The trick is, it does not matter if everyone is writing the same</span>", 
"<span class=\"comment\"> * content to the code location. Also, if a CPU is executing code</span>", 
"<span class=\"comment\"> * it is OK to write to that code location if the contents being written</span>", 
"<span class=\"comment\"> * are the same as what exists.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MOD_CODE_WRITE_FLAG\">MOD_CODE_WRITE_FLAG</a> (1 << 31)<span class=\"ts\"/><span class=\"comment\">/* set when NMI should do the write */</span>", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#nmi_running\">nmi_running</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0);", 
"static int <a class=\"id\" href=\"#mod_code_status\">mod_code_status</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* holds return value of text write */</span>", 
"static void *<a class=\"id\" href=\"#mod_code_ip\">mod_code_ip</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* holds the IP to write to */</span>", 
"static void *<a class=\"id\" href=\"#mod_code_newcode\">mod_code_newcode</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* holds the text to write to the IP */</span>", 
"", 
"static unsigned <a class=\"id\" href=\"#nmi_wait_count\">nmi_wait_count</a>;", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#nmi_update_count\">nmi_update_count</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0);", 
"", 
"int <a class=\"id\" href=\"#ftrace_arch_read_dyn_info\">ftrace_arch_read_dyn_info</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size\">size</a>, \"%u %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#nmi_wait_count\">nmi_wait_count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nmi_update_count\">nmi_update_count</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#clear_mod_flag\">clear_mod_flag</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nmi_running\">nmi_running</a>);", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#old\">old</a> &amp; ~<a class=\"id\" href=\"#MOD_CODE_WRITE_FLAG\">MOD_CODE_WRITE_FLAG</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a> == <a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#atomic_cmpxchg\">atomic_cmpxchg</a>(&amp;<a class=\"id\" href=\"#nmi_running\">nmi_running</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ftrace_mod_code\">ftrace_mod_code</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Yes, more than one CPU process can be writing to mod_code_status.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    (and the code itself)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But if one were to fail, then they all should, and if one were</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to succeed, then they all should.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod_code_status\">mod_code_status</a> = <a class=\"id\" href=\"#probe_kernel_write\">probe_kernel_write</a>(<a class=\"id\" href=\"#mod_code_ip\">mod_code_ip</a>, <a class=\"id\" href=\"#mod_code_newcode\">mod_code_newcode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#MCOUNT_INSN_SIZE\">MCOUNT_INSN_SIZE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if we fail, then kill any new writers */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mod_code_status\">mod_code_status</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_mod_flag\">clear_mod_flag</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#ftrace_nmi_enter\">ftrace_nmi_enter</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#save_modifying_code\">save_modifying_code</a>) = <a class=\"id\" href=\"#modifying_code\">modifying_code</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#save_modifying_code\">save_modifying_code</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#nmi_running\">nmi_running</a>) &amp; <a class=\"id\" href=\"#MOD_CODE_WRITE_FLAG\">MOD_CODE_WRITE_FLAG</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_mod_code\">ftrace_mod_code</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#nmi_update_count\">nmi_update_count</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Must have previous changes seen before executions */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#ftrace_nmi_exit\">ftrace_nmi_exit</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#save_modifying_code\">save_modifying_code</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Finish all executions before clearing nmi_running */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#nmi_running\">nmi_running</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#wait_for_nmi_and_set_mod_flag\">wait_for_nmi_and_set_mod_flag</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_cmpxchg\">atomic_cmpxchg</a>(&amp;<a class=\"id\" href=\"#nmi_running\">nmi_running</a>, 0, <a class=\"id\" href=\"#MOD_CODE_WRITE_FLAG\">MOD_CODE_WRITE_FLAG</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#atomic_cmpxchg\">atomic_cmpxchg</a>(&amp;<a class=\"id\" href=\"#nmi_running\">nmi_running</a>, 0, <a class=\"id\" href=\"#MOD_CODE_WRITE_FLAG\">MOD_CODE_WRITE_FLAG</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nmi_wait_count\">nmi_wait_count</a>++;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#wait_for_nmi\">wait_for_nmi</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nmi_running\">nmi_running</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nmi_running\">nmi_running</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nmi_wait_count\">nmi_wait_count</a>++;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#within\">within</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#start\">start</a> && <a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#end\">end</a>;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#do_ftrace_mod_code\">do_ftrace_mod_code</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>, void *<a class=\"id\" href=\"#new_code\">new_code</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * On x86_64, kernel text mappings are mapped read-only with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CONFIG_DEBUG_RODATA. So we use the kernel identity mapping instead</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the kernel text mapping to modify the kernel text.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For 32bit kernels, these mappings are same and we can use</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kernel identity mapping to modify code.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#within\">within</a>(<a class=\"id\" href=\"#ip\">ip</a>, (unsigned long)<a class=\"id\" href=\"#_text\">_text</a>, (unsigned long)<a class=\"id\" href=\"#_etext\">_etext</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a> = (unsigned long)<a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#ip\">ip</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod_code_ip\">mod_code_ip</a> = (void *)<a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod_code_newcode\">mod_code_newcode</a> = <a class=\"id\" href=\"#new_code\">new_code</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The buffers need to be visible before we let NMIs write them */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_nmi_and_set_mod_flag\">wait_for_nmi_and_set_mod_flag</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure all running NMIs have finished before we write the code */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_mod_code\">ftrace_mod_code</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure the write happens before clearing the bit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_mod_flag\">clear_mod_flag</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_nmi\">wait_for_nmi</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mod_code_status\">mod_code_status</a>;", 
"}", 
"", 
"", 
"", 
"", 
"static unsigned char <a class=\"id\" href=\"#ftrace_nop\">ftrace_nop</a>[<a class=\"id\" href=\"#MCOUNT_INSN_SIZE\">MCOUNT_INSN_SIZE</a>];", 
"", 
"static unsigned char *<a class=\"id\" href=\"#ftrace_nop_replace\">ftrace_nop_replace</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ftrace_nop\">ftrace_nop</a>;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ftrace_modify_code\">ftrace_modify_code</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>, unsigned char *<a class=\"id\" href=\"#old_code\">old_code</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   unsigned char *<a class=\"id\" href=\"#new_code\">new_code</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#replaced\">replaced</a>[<a class=\"id\" href=\"#MCOUNT_INSN_SIZE\">MCOUNT_INSN_SIZE</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note: Due to modules and __init, code can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  disappear and change, we need to protect against faulting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  as well as code changing. We do this by using the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  probe_kernel_* functions.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No real locking needed, this code is run through</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kstop_machine, or before SMP starts.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* read the text we want to modify */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#probe_kernel_read\">probe_kernel_read</a>(<a class=\"id\" href=\"#replaced\">replaced</a>, (void *)<a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#MCOUNT_INSN_SIZE\">MCOUNT_INSN_SIZE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure it is what we expect it to be */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#replaced\">replaced</a>, <a class=\"id\" href=\"#old_code\">old_code</a>, <a class=\"id\" href=\"#MCOUNT_INSN_SIZE\">MCOUNT_INSN_SIZE</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* replace the text with the new text */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#do_ftrace_mod_code\">do_ftrace_mod_code</a>(<a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#new_code\">new_code</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sync_core\">sync_core</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#ftrace_make_nop\">ftrace_make_nop</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#dyn_ftrace\">dyn_ftrace</a> *<a class=\"id\" href=\"#rec\">rec</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#new\">new</a>, *<a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#ip\">ip</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#ftrace_call_replace\">ftrace_call_replace</a>(<a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#ftrace_nop_replace\">ftrace_nop_replace</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ftrace_modify_code\">ftrace_modify_code</a>(<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#ftrace_make_call\">ftrace_make_call</a>(struct <a class=\"id\" href=\"#dyn_ftrace\">dyn_ftrace</a> *<a class=\"id\" href=\"#rec\">rec</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#new\">new</a>, *<a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#ip\">ip</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#ftrace_nop_replace\">ftrace_nop_replace</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#ftrace_call_replace\">ftrace_call_replace</a>(<a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ftrace_modify_code\">ftrace_modify_code</a>(<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#ftrace_update_ftrace_func\">ftrace_update_ftrace_func</a>(<a class=\"id\" href=\"#ftrace_func_t\">ftrace_func_t</a> <a class=\"id\" href=\"#func\">func</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ip\">ip</a> = (unsigned long)(&amp;<a class=\"id\" href=\"#ftrace_call\">ftrace_call</a>);", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#old\">old</a>[<a class=\"id\" href=\"#MCOUNT_INSN_SIZE\">MCOUNT_INSN_SIZE</a>], *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#old\">old</a>, &amp;<a class=\"id\" href=\"#ftrace_call\">ftrace_call</a>, <a class=\"id\" href=\"#MCOUNT_INSN_SIZE\">MCOUNT_INSN_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#ftrace_call_replace\">ftrace_call_replace</a>(<a class=\"id\" href=\"#ip\">ip</a>, (unsigned long)<a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ftrace_modify_code\">ftrace_modify_code</a>(<a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ftrace_dyn_arch_init\">ftrace_dyn_arch_init</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>extern const unsigned char <a class=\"id\" href=\"#ftrace_test_p6nop\">ftrace_test_p6nop</a>[];", 
"<span class=\"ts\"/>extern const unsigned char <a class=\"id\" href=\"#ftrace_test_nop5\">ftrace_test_nop5</a>[];", 
"<span class=\"ts\"/>extern const unsigned char <a class=\"id\" href=\"#ftrace_test_jmp\">ftrace_test_jmp</a>[];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#faulted\">faulted</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There is no good nop for all x86 archs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We will default to using the P6_NOP5, but first we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will test to make sure that the nop will actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * work on this CPU. If it faults, we will then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * go to a lesser efficient 5 byte nop. If that fails</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we then just use a jmp as our nop. This isn't the most</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * efficient nop, but we can not use a multi part nop</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * since we would then risk being preempted in the middle</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of that nop, and if we enabled tracing then, it might</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cause a system crash.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TODO: check the cpuid to determine the best nop.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile (", 
"<span class=\"ts\"/><span class=\"ts\"/>\"ftrace_test_jmp:\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"jmp ftrace_test_p6nop\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"nop\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"nop\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"nop\\n\"  <span class=\"comment\">/* 2 byte jmp + 3 bytes */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"ftrace_test_p6nop:\"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#P6_NOP5\">P6_NOP5</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"jmp 1f\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"ftrace_test_nop5:\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\".byte 0x66,0x66,0x66,0x66,0x90\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"1:\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\".section .fixup, \\\"ax\\\"\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"2: movl $1, %0\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\" jmp ftrace_test_nop5\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"3: movl $2, %0\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\" jmp 1b\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\".previous\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_ASM_EXTABLE\">_ASM_EXTABLE</a>(<a class=\"id\" href=\"#ftrace_test_p6nop\">ftrace_test_p6nop</a>, 2<a class=\"id\" href=\"#b\">b</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_ASM_EXTABLE\">_ASM_EXTABLE</a>(<a class=\"id\" href=\"#ftrace_test_nop5\">ftrace_test_nop5</a>, 3<a class=\"id\" href=\"#b\">b</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>: \"=r\"(<a class=\"id\" href=\"#faulted\">faulted</a>) : \"0\" (<a class=\"id\" href=\"#faulted\">faulted</a>));", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#faulted\">faulted</a>) {", 
"<span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"converting mcount calls to 0f 1f 44 00 00\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#ftrace_nop\">ftrace_nop</a>, <a class=\"id\" href=\"#ftrace_test_p6nop\">ftrace_test_p6nop</a>, <a class=\"id\" href=\"#MCOUNT_INSN_SIZE\">MCOUNT_INSN_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"converting mcount calls to 66 66 66 66 90\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#ftrace_nop\">ftrace_nop</a>, <a class=\"id\" href=\"#ftrace_test_nop5\">ftrace_test_nop5</a>, <a class=\"id\" href=\"#MCOUNT_INSN_SIZE\">MCOUNT_INSN_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"converting mcount calls to jmp . + 5\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#ftrace_nop\">ftrace_nop</a>, <a class=\"id\" href=\"#ftrace_test_jmp\">ftrace_test_jmp</a>, <a class=\"id\" href=\"#MCOUNT_INSN_SIZE\">MCOUNT_INSN_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The return code is retured via data */</span>", 
"<span class=\"ts\"/>*(unsigned long *)<a class=\"id\" href=\"#data\">data</a> = 0;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FUNCTION_GRAPH_TRACER\">CONFIG_FUNCTION_GRAPH_TRACER</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DYNAMIC_FTRACE\">CONFIG_DYNAMIC_FTRACE</a>", 
"extern void <a class=\"id\" href=\"#ftrace_graph_call\">ftrace_graph_call</a>(void);", 
"", 
"static int <a class=\"id\" href=\"#ftrace_mod_jmp\">ftrace_mod_jmp</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#old_offset\">old_offset</a>, int <a class=\"id\" href=\"#new_offset\">new_offset</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#code\">code</a>[<a class=\"id\" href=\"#MCOUNT_INSN_SIZE\">MCOUNT_INSN_SIZE</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#probe_kernel_read\">probe_kernel_read</a>(<a class=\"id\" href=\"#code\">code</a>, (void *)<a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#MCOUNT_INSN_SIZE\">MCOUNT_INSN_SIZE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#code\">code</a>[0] != 0xe9 || <a class=\"id\" href=\"#old_offset\">old_offset</a> != *(int *)(&amp;<a class=\"id\" href=\"#code\">code</a>[1]))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>*(int *)(&amp;<a class=\"id\" href=\"#code\">code</a>[1]) = <a class=\"id\" href=\"#new_offset\">new_offset</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#do_ftrace_mod_code\">do_ftrace_mod_code</a>(<a class=\"id\" href=\"#ip\">ip</a>, &amp;<a class=\"id\" href=\"#code\">code</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#ftrace_enable_ftrace_graph_caller\">ftrace_enable_ftrace_graph_caller</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ip\">ip</a> = (unsigned long)(&amp;<a class=\"id\" href=\"#ftrace_graph_call\">ftrace_graph_call</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old_offset\">old_offset</a>, <a class=\"id\" href=\"#new_offset\">new_offset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_offset\">old_offset</a> = (unsigned long)(&amp;<a class=\"id\" href=\"#ftrace_stub\">ftrace_stub</a>) - (<a class=\"id\" href=\"#ip\">ip</a> + <a class=\"id\" href=\"#MCOUNT_INSN_SIZE\">MCOUNT_INSN_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_offset\">new_offset</a> = (unsigned long)(&amp;<a class=\"id\" href=\"#ftrace_graph_caller\">ftrace_graph_caller</a>) - (<a class=\"id\" href=\"#ip\">ip</a> + <a class=\"id\" href=\"#MCOUNT_INSN_SIZE\">MCOUNT_INSN_SIZE</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ftrace_mod_jmp\">ftrace_mod_jmp</a>(<a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#old_offset\">old_offset</a>, <a class=\"id\" href=\"#new_offset\">new_offset</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#ftrace_disable_ftrace_graph_caller\">ftrace_disable_ftrace_graph_caller</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ip\">ip</a> = (unsigned long)(&amp;<a class=\"id\" href=\"#ftrace_graph_call\">ftrace_graph_call</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old_offset\">old_offset</a>, <a class=\"id\" href=\"#new_offset\">new_offset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_offset\">old_offset</a> = (unsigned long)(&amp;<a class=\"id\" href=\"#ftrace_graph_caller\">ftrace_graph_caller</a>) - (<a class=\"id\" href=\"#ip\">ip</a> + <a class=\"id\" href=\"#MCOUNT_INSN_SIZE\">MCOUNT_INSN_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_offset\">new_offset</a> = (unsigned long)(&amp;<a class=\"id\" href=\"#ftrace_stub\">ftrace_stub</a>) - (<a class=\"id\" href=\"#ip\">ip</a> + <a class=\"id\" href=\"#MCOUNT_INSN_SIZE\">MCOUNT_INSN_SIZE</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ftrace_mod_jmp\">ftrace_mod_jmp</a>(<a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#old_offset\">old_offset</a>, <a class=\"id\" href=\"#new_offset\">new_offset</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_DYNAMIC_FTRACE */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Hook the return address and push it in the stack of return addrs</span>", 
"<span class=\"comment\"> * in current thread info.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#prepare_ftrace_return\">prepare_ftrace_return</a>(unsigned long *<a class=\"id\" href=\"#parent\">parent</a>, unsigned long <a class=\"id\" href=\"#self_addr\">self_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#frame_pointer\">frame_pointer</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#faulted\">faulted</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_graph_ent\">ftrace_graph_ent</a> <a class=\"id\" href=\"#trace\">trace</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#return_hooker\">return_hooker</a> = (unsigned long)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#return_to_handler\">return_to_handler</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#tracing_graph_pause\">tracing_graph_pause</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Protect against fault, even if it shouldn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * happen. This tool is too much intrusive to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ignore such a protection.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(", 
"<span class=\"ts\"/><span class=\"ts\"/>\"1: \" <a class=\"id\" href=\"#_ASM_MOV\">_ASM_MOV</a> \" (%[parent]), %[old]\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"2: \" <a class=\"id\" href=\"#_ASM_MOV\">_ASM_MOV</a> \" %[return_hooker], (%[parent])\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"   movl $0, %[faulted]\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"3:\\n\"", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>\".section .fixup, \\\"ax\\\"\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"4: movl $1, %[faulted]\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"   jmp 3b\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\".previous\\n\"", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_ASM_EXTABLE\">_ASM_EXTABLE</a>(1<a class=\"id\" href=\"#b\">b</a>, 4<a class=\"id\" href=\"#b\">b</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_ASM_EXTABLE\">_ASM_EXTABLE</a>(2<a class=\"id\" href=\"#b\">b</a>, 4<a class=\"id\" href=\"#b\">b</a>)", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>: [<a class=\"id\" href=\"#old\">old</a>] \"=&r\" (<a class=\"id\" href=\"#old\">old</a>), [<a class=\"id\" href=\"#faulted\">faulted</a>] \"=r\" (<a class=\"id\" href=\"#faulted\">faulted</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>: [<a class=\"id\" href=\"#parent\">parent</a>] \"r\" (<a class=\"id\" href=\"#parent\">parent</a>), [<a class=\"id\" href=\"#return_hooker\">return_hooker</a>] \"r\" (<a class=\"id\" href=\"#return_hooker\">return_hooker</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>: \"memory\"", 
"<span class=\"ts\"/>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#faulted\">faulted</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_graph_stop\">ftrace_graph_stop</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_push_return_trace\">ftrace_push_return_trace</a>(<a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#self_addr\">self_addr</a>, &amp;<a class=\"id\" href=\"#trace\">trace</a>.<a class=\"id\" href=\"#depth\">depth</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#frame_pointer\">frame_pointer</a>) == -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace\">trace</a>.<a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#self_addr\">self_addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only trace if the calling function expects to */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ftrace_graph_entry\">ftrace_graph_entry</a>(&amp;<a class=\"id\" href=\"#trace\">trace</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#curr_ret_stack\">curr_ret_stack</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FUNCTION_GRAPH_TRACER */</span>", 
];
xr_frag_insert('l/2c/482e975fbee0308289b874e3fcdeb246fbeb8c.xr', __xr_tmp);
