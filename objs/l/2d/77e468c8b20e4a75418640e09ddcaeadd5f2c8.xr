var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/namespace.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) Copyright Al Viro 2000, 2001</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Released under GPL v2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on code from fs/super.c, copyright Linus Torvalds and others.</span>", 
"<span class=\"comment\"> * Heavily rewritten.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp_lock\">smp_lock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acct\">acct</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpumask\">cpumask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysfs\">sysfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mnt_namespace\">mnt_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#namei\">namei</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nsproxy\">nsproxy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ramfs\">ramfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#log2\">log2</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs_struct\">fs_struct</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fsnotify\">fsnotify</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#unistd\">unistd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"pnode.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HASH_SHIFT\">HASH_SHIFT</a> <a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> / sizeof(struct <a class=\"id\" href=\"#list_head\">list_head</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HASH_SIZE\">HASH_SIZE</a> (1UL << <a class=\"id\" href=\"#HASH_SHIFT\">HASH_SHIFT</a>)", 
"", 
"static int <a class=\"id\" href=\"#event\">event</a>;", 
"static <a class=\"id\" href=\"#DEFINE_IDA\">DEFINE_IDA</a>(<a class=\"id\" href=\"#mnt_id_ida\">mnt_id_ida</a>);", 
"static <a class=\"id\" href=\"#DEFINE_IDA\">DEFINE_IDA</a>(<a class=\"id\" href=\"#mnt_group_ida\">mnt_group_ida</a>);", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#mnt_id_lock\">mnt_id_lock</a>);", 
"static int <a class=\"id\" href=\"#mnt_id_start\">mnt_id_start</a> = 0;", 
"static int <a class=\"id\" href=\"#mnt_group_start\">mnt_group_start</a> = 1;", 
"", 
"static struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#mount_hashtable\">mount_hashtable</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#mnt_cache\">mnt_cache</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> <a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>;", 
"", 
"<span class=\"comment\">/* /sys/fs */</span>", 
"struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#fs_kobj\">fs_kobj</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#fs_kobj\">fs_kobj</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * vfsmount lock may be taken for read to prevent changes to the</span>", 
"<span class=\"comment\"> * vfsmount hash, ie. during mountpoint lookups or walking back</span>", 
"<span class=\"comment\"> * up the tree.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It should be taken for write in all cases where the vfsmount</span>", 
"<span class=\"comment\"> * tree or hash is modified or when a vfsmount structure is modified.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#DEFINE_BRLOCK\">DEFINE_BRLOCK</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#hash\">hash</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tmp\">tmp</a> = ((unsigned long)<a class=\"id\" href=\"#mnt\">mnt</a> / <a class=\"id\" href=\"#L1_CACHE_BYTES\">L1_CACHE_BYTES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> += ((unsigned long)<a class=\"id\" href=\"#dentry\">dentry</a> / <a class=\"id\" href=\"#L1_CACHE_BYTES\">L1_CACHE_BYTES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#tmp\">tmp</a> + (<a class=\"id\" href=\"#tmp\">tmp</a> >> <a class=\"id\" href=\"#HASH_SHIFT\">HASH_SHIFT</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tmp\">tmp</a> &amp; (<a class=\"id\" href=\"#HASH_SIZE\">HASH_SIZE</a> - 1);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MNT_WRITER_UNDERFLOW_LIMIT\">MNT_WRITER_UNDERFLOW_LIMIT</a> -(1<<16)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * allocation is serialized by namespace_sem, but we need the spinlock to</span>", 
"<span class=\"comment\"> * serialize with freeing.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mnt_alloc_id\">mnt_alloc_id</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ida_pre_get\">ida_pre_get</a>(&amp;<a class=\"id\" href=\"#mnt_id_ida\">mnt_id_ida</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mnt_id_lock\">mnt_id_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#ida_get_new_above\">ida_get_new_above</a>(&amp;<a class=\"id\" href=\"#mnt_id_ida\">mnt_id_ida</a>, <a class=\"id\" href=\"#mnt_id_start\">mnt_id_start</a>, &amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_id\">mnt_id</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt_id_start\">mnt_id_start</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_id\">mnt_id</a> + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mnt_id_lock\">mnt_id_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mnt_free_id\">mnt_free_id</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_id\">mnt_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mnt_id_lock\">mnt_id_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ida_remove\">ida_remove</a>(&amp;<a class=\"id\" href=\"#mnt_id_ida\">mnt_id_ida</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt_id_start\">mnt_id_start</a> &gt; <a class=\"id\" href=\"#id\">id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt_id_start\">mnt_id_start</a> = <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mnt_id_lock\">mnt_id_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate a new peer group ID</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * mnt_group_ida is protected by namespace_sem</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mnt_alloc_group_id\">mnt_alloc_group_id</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ida_pre_get\">ida_pre_get</a>(&amp;<a class=\"id\" href=\"#mnt_group_ida\">mnt_group_ida</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#ida_get_new_above\">ida_get_new_above</a>(&amp;<a class=\"id\" href=\"#mnt_group_ida\">mnt_group_ida</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt_group_start\">mnt_group_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_group_id\">mnt_group_id</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt_group_start\">mnt_group_start</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_group_id\">mnt_group_id</a> + 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Release a peer group ID</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mnt_release_group_id\">mnt_release_group_id</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_group_id\">mnt_group_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ida_remove\">ida_remove</a>(&amp;<a class=\"id\" href=\"#mnt_group_ida\">mnt_group_ida</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt_group_start\">mnt_group_start</a> &gt; <a class=\"id\" href=\"#id\">id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt_group_start\">mnt_group_start</a> = <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_group_id\">mnt_group_id</a> = 0;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#alloc_vfsmnt\">alloc_vfsmnt</a>(const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#mnt_cache\">mnt_cache</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt\">mnt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#mnt_alloc_id\">mnt_alloc_id</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_cache\">out_free_cache</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#name\">name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_devname\">mnt_devname</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_devname\">mnt_devname</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_id\">out_free_id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_count\">mnt_count</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_hash\">mnt_hash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_child\">mnt_child</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_mounts\">mnt_mounts</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_list\">mnt_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_expire\">mnt_expire</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_share\">mnt_share</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_slave_list\">mnt_slave_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_slave\">mnt_slave</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FSNOTIFY\">CONFIG_FSNOTIFY</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_fsnotify_marks\">mnt_fsnotify_marks</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_writers\">mnt_writers</a> = <a class=\"id\" href=\"#alloc_percpu\">alloc_percpu</a>(int);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_writers\">mnt_writers</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_devname\">out_free_devname</a>;", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_writers\">mnt_writers</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mnt\">mnt</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<a class=\"id\" href=\"#out_free_devname\">out_free_devname</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_devname\">mnt_devname</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<a class=\"id\" href=\"#out_free_id\">out_free_id</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt_free_id\">mnt_free_id</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<a class=\"id\" href=\"#out_free_cache\">out_free_cache</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#mnt_cache\">mnt_cache</a>, <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Most r/o checks on a fs are for operations that take</span>", 
"<span class=\"comment\"> * discrete amounts of time, like a write() or unlink().</span>", 
"<span class=\"comment\"> * We must keep track of when those operations start</span>", 
"<span class=\"comment\"> * (for permission checks) and when they end, so that</span>", 
"<span class=\"comment\"> * we can determine when writes are able to occur to</span>", 
"<span class=\"comment\"> * a filesystem.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * __mnt_is_readonly: check whether a mount is read-only</span>", 
"<span class=\"comment\"> * @mnt: the mount to check for its write status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This shouldn't be used directly ouside of the VFS.</span>", 
"<span class=\"comment\"> * It does not guarantee that the filesystem will stay</span>", 
"<span class=\"comment\"> * r/w, just that it is right *now*.  This can not and</span>", 
"<span class=\"comment\"> * should not be used in place of IS_RDONLY(inode).</span>", 
"<span class=\"comment\"> * mnt_want/drop_write() will _keep_ the filesystem</span>", 
"<span class=\"comment\"> * r/w.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__mnt_is_readonly\">__mnt_is_readonly</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &amp; <a class=\"id\" href=\"#MNT_READONLY\">MNT_READONLY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__mnt_is_readonly\">__mnt_is_readonly</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#inc_mnt_writers\">inc_mnt_writers</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_writers\">mnt_writers</a>, <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()))++;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_writers\">mnt_writers</a>++;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dec_mnt_writers\">dec_mnt_writers</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_writers\">mnt_writers</a>, <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()))--;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_writers\">mnt_writers</a>--;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#count_mnt_writers\">count_mnt_writers</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += *<a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_writers\">mnt_writers</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"#else", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_writers\">mnt_writers</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Most r/o checks on a fs are for operations that take</span>", 
"<span class=\"comment\"> * discrete amounts of time, like a write() or unlink().</span>", 
"<span class=\"comment\"> * We must keep track of when those operations start</span>", 
"<span class=\"comment\"> * (for permission checks) and when they end, so that</span>", 
"<span class=\"comment\"> * we can determine when writes are able to occur to</span>", 
"<span class=\"comment\"> * a filesystem.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mnt_want_write - get write access to a mount</span>", 
"<span class=\"comment\"> * @mnt: the mount on which to take a write</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This tells the low-level filesystem that a write is</span>", 
"<span class=\"comment\"> * about to be performed to it, and makes sure that</span>", 
"<span class=\"comment\"> * writes are allowed before returning success.  When</span>", 
"<span class=\"comment\"> * the write operation is finished, mnt_drop_write()</span>", 
"<span class=\"comment\"> * must be called.  This is effectively a refcount.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mnt_want_write\">mnt_want_write</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_mnt_writers\">inc_mnt_writers</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The store to inc_mnt_writers must be visible before we pass</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * MNT_WRITE_HOLD loop below, so that the slowpath can see our</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * incremented count after it has set MNT_WRITE_HOLD.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &amp; <a class=\"id\" href=\"#MNT_WRITE_HOLD\">MNT_WRITE_HOLD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * After the slowpath clears MNT_WRITE_HOLD, mnt_is_readonly will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be set to match its requirements. So we must not load that until</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * MNT_WRITE_HOLD is cleared.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__mnt_is_readonly\">__mnt_is_readonly</a>(<a class=\"id\" href=\"#mnt\">mnt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dec_mnt_writers\">dec_mnt_writers</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EROFS\">EROFS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#mnt_want_write\">mnt_want_write</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mnt_clone_write - get write access to a mount</span>", 
"<span class=\"comment\"> * @mnt: the mount on which to take a write</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is effectively like mnt_want_write, except</span>", 
"<span class=\"comment\"> * it must only be used to take an extra write reference</span>", 
"<span class=\"comment\"> * on a mountpoint that we already know has a write reference</span>", 
"<span class=\"comment\"> * on it. This allows some optimisation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After finished, mnt_drop_write must be called as usual to</span>", 
"<span class=\"comment\"> * drop the reference.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mnt_clone_write\">mnt_clone_write</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* superblock may be r/o */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__mnt_is_readonly\">__mnt_is_readonly</a>(<a class=\"id\" href=\"#mnt\">mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EROFS\">EROFS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_mnt_writers\">inc_mnt_writers</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#mnt_clone_write\">mnt_clone_write</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mnt_want_write_file - get write access to a file's mount</span>", 
"<span class=\"comment\"> * @file: the file who's mount on which to take a write</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is like mnt_want_write, but it takes a file and can</span>", 
"<span class=\"comment\"> * do some optimisations if the file is open for write already</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mnt_want_write_file\">mnt_want_write_file</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_dentry\">f_dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>) || <a class=\"id\" href=\"#special_file\">special_file</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#mnt_want_write\">mnt_want_write</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#mnt_clone_write\">mnt_clone_write</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#mnt_want_write_file\">mnt_want_write_file</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mnt_drop_write - give up write access to a mount</span>", 
"<span class=\"comment\"> * @mnt: the mount on which to give up write access</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Tells the low-level filesystem that we are done</span>", 
"<span class=\"comment\"> * performing writes to it.  Must be matched with</span>", 
"<span class=\"comment\"> * mnt_want_write() call above.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mnt_drop_write\">mnt_drop_write</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dec_mnt_writers\">dec_mnt_writers</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#mnt_drop_write\">mnt_drop_write</a>);", 
"", 
"static int <a class=\"id\" href=\"#mnt_make_readonly\">mnt_make_readonly</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_lock\">br_write_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> |= <a class=\"id\" href=\"#MNT_WRITE_HOLD\">MNT_WRITE_HOLD</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * After storing MNT_WRITE_HOLD, we'll read the counters. This store</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * should be visible before we do.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * With writers on hold, if this value is zero, then there are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * definitely no active writers (although held writers may subsequently</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * increment the count, they'll have to wait, and decrement it after</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * seeing MNT_READONLY).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is OK to have counter incremented on one CPU and decremented on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * another: the sum will add up correctly. The danger would be when we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sum up each counter, if we read a counter before it is incremented,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but then read another CPU's count which it has been subsequently</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * decremented from -- we would see more decrements than we should.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * MNT_WRITE_HOLD protects against this scenario, because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mnt_want_write first increments count, then smp_mb, then spins on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * MNT_WRITE_HOLD, so it can't be decremented by another CPU while</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we're counting up here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count_mnt_writers\">count_mnt_writers</a>(<a class=\"id\" href=\"#mnt\">mnt</a>) &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> |= <a class=\"id\" href=\"#MNT_READONLY\">MNT_READONLY</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * MNT_READONLY must become visible before ~MNT_WRITE_HOLD, so writers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that become unheld will see MNT_READONLY.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &= ~<a class=\"id\" href=\"#MNT_WRITE_HOLD\">MNT_WRITE_HOLD</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_unlock\">br_write_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__mnt_unmake_readonly\">__mnt_unmake_readonly</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_lock\">br_write_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &= ~<a class=\"id\" href=\"#MNT_READONLY\">MNT_READONLY</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_unlock\">br_write_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#simple_set_mnt\">simple_set_mnt</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a> = <a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a> = <a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_set_mnt\">simple_set_mnt</a>);", 
"", 
"void <a class=\"id\" href=\"#free_vfsmnt\">free_vfsmnt</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_devname\">mnt_devname</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt_free_id\">mnt_free_id</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_writers\">mnt_writers</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#mnt_cache\">mnt_cache</a>, <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * find the first or last mount at @dentry on vfsmount @mnt depending on</span>", 
"<span class=\"comment\"> * @dir. If @dir is set return the first mount else return the last mount.</span>", 
"<span class=\"comment\"> * vfsmount_lock must be held for read or write.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#__lookup_mnt\">__lookup_mnt</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#mount_hashtable\">mount_hashtable</a> + <a class=\"id\" href=\"#hash\">hash</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#found\">found</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#dir\">dir</a> ? <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#next\">next</a> : <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> == <a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a>, <a class=\"id\" href=\"#mnt_hash\">mnt_hash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a> == <a class=\"id\" href=\"#mnt\">mnt</a> && <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_mountpoint\">mnt_mountpoint</a> == <a class=\"id\" href=\"#dentry\">dentry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#found\">found</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * lookup_mnt increments the ref count before returning</span>", 
"<span class=\"comment\"> * the vfsmount struct.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#lookup_mnt\">lookup_mnt</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#child_mnt\">child_mnt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_read_lock\">br_read_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#child_mnt\">child_mnt</a> = <a class=\"id\" href=\"#__lookup_mnt\">__lookup_mnt</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>, 1)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mntget\">mntget</a>(<a class=\"id\" href=\"#child_mnt\">child_mnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_read_unlock\">br_read_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#child_mnt\">child_mnt</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#check_mnt\">check_mnt</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_ns\">mnt_ns</a> == <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>-><a class=\"id\" href=\"#mnt_ns\">mnt_ns</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * vfsmount lock must be held for write</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#touch_mnt_namespace\">touch_mnt_namespace</a>(struct <a class=\"id\" href=\"#mnt_namespace\">mnt_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ns\">ns</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#event\">event</a> = ++<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#poll\">poll</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * vfsmount lock must be held for write</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__touch_mnt_namespace\">__touch_mnt_namespace</a>(struct <a class=\"id\" href=\"#mnt_namespace\">mnt_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ns\">ns</a> && <a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#event\">event</a> != <a class=\"id\" href=\"#event\">event</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#poll\">poll</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * vfsmount lock must be held for write</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#detach_mnt\">detach_mnt</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#old_path\">old_path</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_path\">old_path</a>-><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_mountpoint\">mnt_mountpoint</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_path\">old_path</a>-><a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a> = <a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_mountpoint\">mnt_mountpoint</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_child\">mnt_child</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_hash\">mnt_hash</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_path\">old_path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_mounted\">d_mounted</a>--;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * vfsmount lock must be held for write</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mnt_set_mountpoint\">mnt_set_mountpoint</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
];
xr_frag_insert('l/2d/77e468c8b20e4a75418640e09ddcaeadd5f2c8.xr', __xr_tmp);
