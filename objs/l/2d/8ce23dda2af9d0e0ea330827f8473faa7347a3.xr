var __xr_tmp = [
"<span class=\"comment\"> *    after it is inserted to @q, it should be checked against @q before</span>", 
"<span class=\"comment\"> *    the insertion using this generic function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    This function should also be useful for request stacking drivers</span>", 
"<span class=\"comment\"> *    in some cases below, so export this fuction.</span>", 
"<span class=\"comment\"> *    Request stacking drivers like request-based dm may change the queue</span>", 
"<span class=\"comment\"> *    limits while requests are in the queue (e.g. dm's table swapping).</span>", 
"<span class=\"comment\"> *    Such request stacking drivers should check those requests agaist</span>", 
"<span class=\"comment\"> *    the new queue limits again when they dispatch those requests,</span>", 
"<span class=\"comment\"> *    although such checkings are also done against the old queue limits</span>", 
"<span class=\"comment\"> *    when submitting requests.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#blk_rq_check_limits\">blk_rq_check_limits</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_DISCARD\">REQ_DISCARD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_rq_sectors\">blk_rq_sectors</a>(<a class=\"id\" href=\"#rq\">rq</a>) &gt; <a class=\"id\" href=\"#queue_max_sectors\">queue_max_sectors</a>(<a class=\"id\" href=\"#q\">q</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#rq\">rq</a>) &gt; <a class=\"id\" href=\"#queue_max_hw_sectors\">queue_max_hw_sectors</a>(<a class=\"id\" href=\"#q\">q</a>) << 9) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: over max size limit.\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * queue's settings related to segment counting like q-&gt;bounce_pfn</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * may differ from that of other stacking queues.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Recalculate it to check the request correctly on this queue's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * limitation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_recalc_rq_segments\">blk_recalc_rq_segments</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_phys_segments\">nr_phys_segments</a> &gt; <a class=\"id\" href=\"#queue_max_segments\">queue_max_segments</a>(<a class=\"id\" href=\"#q\">q</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: over max segments limit.\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blk_rq_check_limits\">blk_rq_check_limits</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_insert_cloned_request - Helper for stacking drivers to submit a request</span>", 
"<span class=\"comment\"> * @q:  the queue to submit the request</span>", 
"<span class=\"comment\"> * @rq: the request being queued</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#blk_insert_cloned_request\">blk_insert_cloned_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_rq_check_limits\">blk_rq_check_limits</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIL_MAKE_REQUEST\">CONFIG_FAIL_MAKE_REQUEST</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a> && <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a>-><a class=\"id\" href=\"#part0\">part0</a>.<a class=\"id\" href=\"#make_it_fail\">make_it_fail</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#should_fail\">should_fail</a>(&amp;<a class=\"id\" href=\"#fail_make_request\">fail_make_request</a>, <a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#rq\">rq</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Submitting request must be dequeued before calling this function</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because it will be linked to another request_queue</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#blk_queued_rq\">blk_queued_rq</a>(<a class=\"id\" href=\"#rq\">rq</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drive_stat_acct\">drive_stat_acct</a>(<a class=\"id\" href=\"#rq\">rq</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__elv_add_request\">__elv_add_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#ELEVATOR_INSERT_BACK\">ELEVATOR_INSERT_BACK</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blk_insert_cloned_request\">blk_insert_cloned_request</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_rq_err_bytes - determine number of bytes till the next failure boundary</span>", 
"<span class=\"comment\"> * @rq: request to examine</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     A request could be merge of IOs which require different failure</span>", 
"<span class=\"comment\"> *     handling.  This function determines the number of bytes which</span>", 
"<span class=\"comment\"> *     can be failed from the beginning of the request without</span>", 
"<span class=\"comment\"> *     crossing into area which need to be retried further.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:</span>", 
"<span class=\"comment\"> *     The number of bytes to fail.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Context:</span>", 
"<span class=\"comment\"> *     queue_lock must be held.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#blk_rq_err_bytes\">blk_rq_err_bytes</a>(const struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ff\">ff</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_FAILFAST_MASK\">REQ_FAILFAST_MASK</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bytes\">bytes</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_MIXED_MERGE\">REQ_MIXED_MERGE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Currently the only 'mixing' which can happen is between</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * different fastfail types.  We can safely fail portions</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which have all the failfast bits that the first one has -</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the ones which are at least as eager to fail as the first</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#bio\">bio</a>; <a class=\"id\" href=\"#bio\">bio</a>; <a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_next\">bi_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#ff\">ff</a>) != <a class=\"id\" href=\"#ff\">ff</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> += <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* this could lead to infinite loop */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#rq\">rq</a>) && !<a class=\"id\" href=\"#bytes\">bytes</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blk_rq_err_bytes\">blk_rq_err_bytes</a>);", 
"", 
"static void <a class=\"id\" href=\"#blk_account_io_completion\">blk_account_io_completion</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>, unsigned int <a class=\"id\" href=\"#bytes\">bytes</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_do_io_stat\">blk_do_io_stat</a>(<a class=\"id\" href=\"#req\">req</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const int <a class=\"id\" href=\"#rw\">rw</a> = <a class=\"id\" href=\"#rq_data_dir\">rq_data_dir</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#part\">part</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#part_stat_lock\">part_stat_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#disk_map_sector_rcu\">disk_map_sector_rcu</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a>, <a class=\"id\" href=\"#blk_rq_pos\">blk_rq_pos</a>(<a class=\"id\" href=\"#req\">req</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part_stat_add\">part_stat_add</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#part\">part</a>, <a class=\"id\" href=\"#sectors\">sectors</a>[<a class=\"id\" href=\"#rw\">rw</a>], <a class=\"id\" href=\"#bytes\">bytes</a> >> 9);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part_stat_unlock\">part_stat_unlock</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#blk_account_io_done\">blk_account_io_done</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Account IO completion.  bar_rq isn't accounted as a normal</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * IO on queueing nor completion.  Accounting the containing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * request is enough.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_do_io_stat\">blk_do_io_stat</a>(<a class=\"id\" href=\"#req\">req</a>) && <a class=\"id\" href=\"#req\">req</a> != &amp;<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#bar_rq\">bar_rq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#duration\">duration</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> - <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#start_time\">start_time</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>const int <a class=\"id\" href=\"#rw\">rw</a> = <a class=\"id\" href=\"#rq_data_dir\">rq_data_dir</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#part\">part</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#part_stat_lock\">part_stat_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#disk_map_sector_rcu\">disk_map_sector_rcu</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a>, <a class=\"id\" href=\"#blk_rq_pos\">blk_rq_pos</a>(<a class=\"id\" href=\"#req\">req</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part_stat_inc\">part_stat_inc</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#part\">part</a>, <a class=\"id\" href=\"#ios\">ios</a>[<a class=\"id\" href=\"#rw\">rw</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part_stat_add\">part_stat_add</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#part\">part</a>, <a class=\"id\" href=\"#ticks\">ticks</a>[<a class=\"id\" href=\"#rw\">rw</a>], <a class=\"id\" href=\"#duration\">duration</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part_round_stats\">part_round_stats</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#part\">part</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part_dec_in_flight\">part_dec_in_flight</a>(<a class=\"id\" href=\"#part\">part</a>, <a class=\"id\" href=\"#rw\">rw</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part_stat_unlock\">part_stat_unlock</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_peek_request - peek at the top of a request queue</span>", 
"<span class=\"comment\"> * @q: request queue to peek at</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Return the request at the top of @q.  The returned request</span>", 
"<span class=\"comment\"> *     should be started using blk_start_request() before LLD starts</span>", 
"<span class=\"comment\"> *     processing it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:</span>", 
"<span class=\"comment\"> *     Pointer to the request at the top of @q if available.  Null</span>", 
"<span class=\"comment\"> *     otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Context:</span>", 
"<span class=\"comment\"> *     queue_lock must be held.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#blk_peek_request\">blk_peek_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#__elv_next_request\">__elv_next_request</a>(<a class=\"id\" href=\"#q\">q</a>)) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_STARTED\">REQ_STARTED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This is the first time the device driver</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * sees this request (possibly after</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * requeueing).  Notify IO scheduler.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_SORTED\">REQ_SORTED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elv_activate_rq\">elv_activate_rq</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * just mark as started even if we don't start</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * it, a request that has been delayed should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * not be passed by new incoming requests</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#REQ_STARTED\">REQ_STARTED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_block_rq_issue\">trace_block_rq_issue</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#boundary_rq\">boundary_rq</a> || <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#boundary_rq\">boundary_rq</a> == <a class=\"id\" href=\"#rq\">rq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#end_sector\">end_sector</a> = <a class=\"id\" href=\"#rq_end_sector\">rq_end_sector</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#boundary_rq\">boundary_rq</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_DONTPREP\">REQ_DONTPREP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_drain_size\">dma_drain_size</a> && <a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#rq\">rq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * make sure space for the drain appears we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * know we can do this because max_hw_segments</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * has been adjusted to be one fewer than the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * device can handle</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_phys_segments\">nr_phys_segments</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#prep_rq_fn\">prep_rq_fn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#prep_rq_fn\">prep_rq_fn</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#BLKPREP_OK\">BLKPREP_OK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#BLKPREP_DEFER\">BLKPREP_DEFER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the request may have been (partially) prepped.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we need to keep this request in the front to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * avoid resource deadlock.  REQ_STARTED will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * prevent other fs requests from passing this one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_drain_size\">dma_drain_size</a> && <a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#rq\">rq</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_DONTPREP\">REQ_DONTPREP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * remove the space for the drain we added</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * so that we don't add it again</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_phys_segments\">nr_phys_segments</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#BLKPREP_KILL\">BLKPREP_KILL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#REQ_QUIET\">REQ_QUIET</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Mark this request as started so we don't trigger</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * any debug logic in the end I/O path.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_start_request\">blk_start_request</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__blk_end_request_all\">__blk_end_request_all</a>(<a class=\"id\" href=\"#rq\">rq</a>, -<a class=\"id\" href=\"#EIO\">EIO</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: bad return=%d\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rq\">rq</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_peek_request\">blk_peek_request</a>);", 
"", 
"void <a class=\"id\" href=\"#blk_dequeue_request\">blk_dequeue_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#queuelist\">queuelist</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ELV_ON_HASH\">ELV_ON_HASH</a>(<a class=\"id\" href=\"#rq\">rq</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#queuelist\">queuelist</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the time frame between a request being removed from the lists</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and to it is freed is accounted as io that is in progress at</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the driver side.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_account_rq\">blk_account_rq</a>(<a class=\"id\" href=\"#rq\">rq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#in_flight\">in_flight</a>[<a class=\"id\" href=\"#rq_is_sync\">rq_is_sync</a>(<a class=\"id\" href=\"#rq\">rq</a>)]++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_io_start_time_ns\">set_io_start_time_ns</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/>}", 
];
xr_frag_insert('l/2d/8ce23dda2af9d0e0ea330827f8473faa7347a3.xr', __xr_tmp);
