var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_LIST_NULLS_H\">_LINUX_LIST_NULLS_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_LIST_NULLS_H\">_LINUX_LIST_NULLS_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Special version of lists, where end of list is not a NULL pointer,</span>", 
"<span class=\"comment\"> * but a 'nulls' marker, which can have many different values.</span>", 
"<span class=\"comment\"> * (up to 2^31 different values guaranteed on all platforms)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In the standard hlist, termination of a list is the NULL pointer.</span>", 
"<span class=\"comment\"> * In this special 'nulls' variant, we use the fact that objects stored in</span>", 
"<span class=\"comment\"> * a list are aligned on a word (4 or 8 bytes alignment).</span>", 
"<span class=\"comment\"> * We therefore use the last significant bit of 'ptr' :</span>", 
"<span class=\"comment\"> * Set to 1 : This is a 'nulls' end-of-list marker (ptr &gt;&gt; 1)</span>", 
"<span class=\"comment\"> * Set to 0 : This is a pointer to some object (ptr)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#hlist_nulls_head\">hlist_nulls_head</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *<a class=\"id\" href=\"#first\">first</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *<a class=\"id\" href=\"#next\">next</a>, **<a class=\"id\" href=\"#pprev\">pprev</a>;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_HLIST_NULLS_HEAD\">INIT_HLIST_NULLS_HEAD</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#nulls\">nulls</a>) \\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#ptr\">ptr</a>)-><a class=\"id\" href=\"#first\">first</a> = (struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *) (1UL | (((long)<a class=\"id\" href=\"#nulls\">nulls</a>) << 1)))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hlist_nulls_entry\">hlist_nulls_entry</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#member\">member</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ptr\">ptr</a>,<a class=\"id\" href=\"#type\">type</a>,<a class=\"id\" href=\"#member\">member</a>)", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ptr_is_a_nulls - Test if a ptr is a nulls</span>", 
"<span class=\"comment\"> * @ptr: ptr to be tested</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_a_nulls\">is_a_nulls</a>(const struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>return ((unsigned long)<a class=\"id\" href=\"#ptr\">ptr</a> &amp; 1);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_nulls_value - Get the 'nulls' value of the end of chain</span>", 
"<span class=\"comment\"> * @ptr: end of chain</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Should be called only if is_a_nulls(ptr);</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#get_nulls_value\">get_nulls_value</a>(const struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>return ((unsigned long)<a class=\"id\" href=\"#ptr\">ptr</a>) >> 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#hlist_nulls_unhashed\">hlist_nulls_unhashed</a>(const struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *<a class=\"id\" href=\"#h\">h</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#pprev\">pprev</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#hlist_nulls_empty\">hlist_nulls_empty</a>(const struct <a class=\"id\" href=\"#hlist_nulls_head\">hlist_nulls_head</a> *<a class=\"id\" href=\"#h\">h</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#is_a_nulls\">is_a_nulls</a>(<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#first\">first</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hlist_nulls_add_head\">hlist_nulls_add_head</a>(struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *<a class=\"id\" href=\"#n\">n</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_nulls_head\">hlist_nulls_head</a> *<a class=\"id\" href=\"#h\">h</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *<a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#first\">first</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = &amp;<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_a_nulls\">is_a_nulls</a>(<a class=\"id\" href=\"#first\">first</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__hlist_nulls_del\">__hlist_nulls_del</a>(struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> **<a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#pprev\">pprev</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_a_nulls\">is_a_nulls</a>(<a class=\"id\" href=\"#next\">next</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#pprev\">pprev</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hlist_nulls_del\">hlist_nulls_del</a>(struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__hlist_nulls_del\">__hlist_nulls_del</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#LIST_POISON2\">LIST_POISON2</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hlist_nulls_for_each_entry<span class=\"ts\"/>- iterate over list of given type</span>", 
"<span class=\"comment\"> * @tpos:<span class=\"ts\"/>the type * to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the &amp;struct hlist_node to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the hlist_node within the struct.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hlist_nulls_for_each_entry\">hlist_nulls_for_each_entry</a>(<a class=\"id\" href=\"#tpos\">tpos</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#member\">member</a>)<span class=\"ts\"/><span class=\"ts\"/>       \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = (<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#first\">first</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \\", 
"<span class=\"ts\"/>     (!<a class=\"id\" href=\"#is_a_nulls\">is_a_nulls</a>(<a class=\"id\" href=\"#pos\">pos</a>)) &&<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \\", 
"<span class=\"ts\"/><span class=\"ts\"/>({ <a class=\"id\" href=\"#tpos\">tpos</a> = <a class=\"id\" href=\"#hlist_nulls_entry\">hlist_nulls_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#tpos\">tpos</a>), <a class=\"id\" href=\"#member\">member</a>); 1;}); \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hlist_nulls_for_each_entry_from - iterate over a hlist continuing from current point</span>", 
"<span class=\"comment\"> * @tpos:<span class=\"ts\"/>the type * to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the &amp;struct hlist_node to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the hlist_node within the struct.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hlist_nulls_for_each_entry_from\">hlist_nulls_for_each_entry_from</a>(<a class=\"id\" href=\"#tpos\">tpos</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#member\">member</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (; (!<a class=\"id\" href=\"#is_a_nulls\">is_a_nulls</a>(<a class=\"id\" href=\"#pos\">pos</a>)) && <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>({ <a class=\"id\" href=\"#tpos\">tpos</a> = <a class=\"id\" href=\"#hlist_nulls_entry\">hlist_nulls_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#tpos\">tpos</a>), <a class=\"id\" href=\"#member\">member</a>); 1;}); \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/2d/cc576b7bc89f3c8ccb151819e69c32960681a3.xr', __xr_tmp);
