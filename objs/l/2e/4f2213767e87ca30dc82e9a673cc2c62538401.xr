var __xr_tmp = [
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#sched_init_debug\">sched_init_debug</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sched_feat\">sched_feat</a>(<a class=\"id\" href=\"#x\">x</a>) (<a class=\"id\" href=\"#sysctl_sched_features\">sysctl_sched_features</a> &amp; (1UL << <a class=\"id\" href=\"#__SCHED_FEAT_\">__SCHED_FEAT_</a>##<a class=\"id\" href=\"#x\">x</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Number of tasks to iterate in a single balance run.</span>", 
"<span class=\"comment\"> * Limited because this is done with IRQs disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#const_debug\">const_debug</a> unsigned int <a class=\"id\" href=\"#sysctl_sched_nr_migrate\">sysctl_sched_nr_migrate</a> = 32;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ratelimit for updating the group shares.</span>", 
"<span class=\"comment\"> * default: 0.25ms</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#sysctl_sched_shares_ratelimit\">sysctl_sched_shares_ratelimit</a> = 250000;", 
"unsigned int <a class=\"id\" href=\"#normalized_sysctl_sched_shares_ratelimit\">normalized_sysctl_sched_shares_ratelimit</a> = 250000;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Inject some fuzzyness into changing the per-cpu group shares</span>", 
"<span class=\"comment\"> * this avoids remote rq-locks at the expense of fairness.</span>", 
"<span class=\"comment\"> * default: 4</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#sysctl_sched_shares_thresh\">sysctl_sched_shares_thresh</a> = 4;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * period over which we average the RT time consumption, measured</span>", 
"<span class=\"comment\"> * in ms.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * default: 1s</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#const_debug\">const_debug</a> unsigned int <a class=\"id\" href=\"#sysctl_sched_time_avg\">sysctl_sched_time_avg</a> = <a class=\"id\" href=\"#MSEC_PER_SEC\">MSEC_PER_SEC</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * period over which we measure -rt task cpu usage in us.</span>", 
"<span class=\"comment\"> * default: 1s</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#sysctl_sched_rt_period\">sysctl_sched_rt_period</a> = 1000000;", 
"", 
"static <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> int <a class=\"id\" href=\"#scheduler_running\">scheduler_running</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * part of the period that we allow rt tasks to run in us.</span>", 
"<span class=\"comment\"> * default: 0.95s</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sysctl_sched_rt_runtime\">sysctl_sched_rt_runtime</a> = 950000;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#global_rt_period\">global_rt_period</a>(void)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#sysctl_sched_rt_period\">sysctl_sched_rt_period</a> * <a class=\"id\" href=\"#NSEC_PER_USEC\">NSEC_PER_USEC</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#global_rt_runtime\">global_rt_runtime</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_sched_rt_runtime\">sysctl_sched_rt_runtime</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RUNTIME_INF\">RUNTIME_INF</a>;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#sysctl_sched_rt_runtime\">sysctl_sched_rt_runtime</a> * <a class=\"id\" href=\"#NSEC_PER_USEC\">NSEC_PER_USEC</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#prepare_arch_switch\">prepare_arch_switch</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#prepare_arch_switch\">prepare_arch_switch</a>(<a class=\"id\" href=\"#next\">next</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#finish_arch_switch\">finish_arch_switch</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#finish_arch_switch\">finish_arch_switch</a>(<a class=\"id\" href=\"#prev\">prev</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#task_current\">task_current</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a> == <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ARCH_WANT_UNLOCKED_CTXSW\">__ARCH_WANT_UNLOCKED_CTXSW</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#task_running\">task_running</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task_current\">task_current</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#prepare_lock_switch\">prepare_lock_switch</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#finish_lock_switch\">finish_lock_switch</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SPINLOCK\">CONFIG_DEBUG_SPINLOCK</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* this is a valid case when another task releases the spinlock */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>.<a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we are tracking spinlock dependencies then we have to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fix up the runqueue lock - which gets 'carried over' from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * prev into current:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_acquire\">spin_acquire</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>.<a class=\"id\" href=\"#dep_map\">dep_map</a>, 0, 0, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"#else <span class=\"comment\">/* __ARCH_WANT_UNLOCKED_CTXSW */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#task_running\">task_running</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#oncpu\">oncpu</a>;", 
"#else", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task_current\">task_current</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#prepare_lock_switch\">prepare_lock_switch</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can optimise this out completely for !SMP, because the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * SMP rebalancing from interrupt is the only thing that cares</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#oncpu\">oncpu</a> = 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__ARCH_WANT_INTERRUPTS_ON_CTXSW\">__ARCH_WANT_INTERRUPTS_ON_CTXSW</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
];
xr_frag_insert('l/2e/4f2213767e87ca30dc82e9a673cc2c62538401.xr', __xr_tmp);
