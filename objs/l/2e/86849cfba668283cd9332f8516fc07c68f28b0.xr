var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * XDR standard data types and function declarations</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 1995-1997 Olaf Kirch &lt;okir@monad.swb.de&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on:</span>", 
"<span class=\"comment\"> *   RFC 4506 \"XDR: External Data Representation Standard\", May 2006</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_SUNRPC_XDR_H_\">_SUNRPC_XDR_H_</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_SUNRPC_XDR_H_\">_SUNRPC_XDR_H_</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uio\">uio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#byteorder\">byteorder</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#unaligned\">unaligned</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#scatterlist\">scatterlist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Buffer adjustment</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XDR_QUADLEN\">XDR_QUADLEN</a>(<a class=\"id\" href=\"#l\">l</a>)<span class=\"ts\"/><span class=\"ts\"/>(((<a class=\"id\" href=\"#l\">l</a>) + 3) >> 2)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generic opaque `network object.' At the kernel level, this type</span>", 
"<span class=\"comment\"> * is used only by lockd.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XDR_MAX_NETOBJ\">XDR_MAX_NETOBJ</a><span class=\"ts\"/><span class=\"ts\"/>1024", 
"struct <a class=\"id\" href=\"#xdr_netobj\">xdr_netobj</a> {", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the generic XDR function. rqstp is either a rpc_rqst (client</span>", 
"<span class=\"comment\"> * side) or svc_rqst pointer (server side).</span>", 
"<span class=\"comment\"> * Encode functions always assume there's enough room in the buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"typedef int<span class=\"ts\"/>(*<a class=\"id\" href=\"#kxdrproc_t\">kxdrproc_t</a>)(void *<a class=\"id\" href=\"#rqstp\">rqstp</a>, <a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#data\">data</a>, void *<a class=\"id\" href=\"#obj\">obj</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Basic structure for transmission/reception of a client XDR message.</span>", 
"<span class=\"comment\"> * Features a header (for a linear buffer containing RPC headers</span>", 
"<span class=\"comment\"> * and the data payload for short messages), and then an array of</span>", 
"<span class=\"comment\"> * pages.</span>", 
"<span class=\"comment\"> * The tail iovec allows you to append data after the page array. Its</span>", 
"<span class=\"comment\"> * main interest is for appending padding to the pages in order to</span>", 
"<span class=\"comment\"> * satisfy the int_32-alignment requirements in RFC1832.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For the future, we might want to string several of these together</span>", 
"<span class=\"comment\"> * in a list if anybody wants to make use of NFSv4 COMPOUND</span>", 
"<span class=\"comment\"> * operations and/or has a need for scatter/gather involving pages.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kvec\">kvec</a><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>[1],<span class=\"ts\"/><span class=\"comment\">/* RPC header + non-page data */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a>[1];<span class=\"ts\"/><span class=\"comment\">/* Appended after page data */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Array of contiguous pages */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#page_base\">page_base</a>,<span class=\"ts\"/><span class=\"comment\">/* Start of page data */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_len\">page_len</a>,<span class=\"ts\"/><span class=\"comment\">/* Length of page data */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Flags for data disposition */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XDRBUF_READ\">XDRBUF_READ</a><span class=\"ts\"/><span class=\"ts\"/>0x01<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* target of file read */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XDRBUF_WRITE\">XDRBUF_WRITE</a><span class=\"ts\"/><span class=\"ts\"/>0x02<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* source of file write */</span>", 
"", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#buflen\">buflen</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Total length of storage buffer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Length of XDR encoded message */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * pre-xdr'ed macros.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#xdr_zero\">xdr_zero</a><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(0)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#xdr_one\">xdr_one</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(1)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#xdr_two\">xdr_two</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(2)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#rpc_success\">rpc_success</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#RPC_SUCCESS\">RPC_SUCCESS</a>)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#rpc_prog_unavail\">rpc_prog_unavail</a><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#RPC_PROG_UNAVAIL\">RPC_PROG_UNAVAIL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#rpc_prog_mismatch\">rpc_prog_mismatch</a><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#RPC_PROG_MISMATCH\">RPC_PROG_MISMATCH</a>)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#rpc_proc_unavail\">rpc_proc_unavail</a><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#RPC_PROC_UNAVAIL\">RPC_PROC_UNAVAIL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#rpc_garbage_args\">rpc_garbage_args</a><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#RPC_GARBAGE_ARGS\">RPC_GARBAGE_ARGS</a>)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#rpc_system_err\">rpc_system_err</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#RPC_SYSTEM_ERR\">RPC_SYSTEM_ERR</a>)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#rpc_drop_reply\">rpc_drop_reply</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#RPC_DROP_REPLY\">RPC_DROP_REPLY</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#rpc_auth_ok\">rpc_auth_ok</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#RPC_AUTH_OK\">RPC_AUTH_OK</a>)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#rpc_autherr_badcred\">rpc_autherr_badcred</a><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#RPC_AUTH_BADCRED\">RPC_AUTH_BADCRED</a>)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#rpc_autherr_rejectedcred\">rpc_autherr_rejectedcred</a> <a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#RPC_AUTH_REJECTEDCRED\">RPC_AUTH_REJECTEDCRED</a>)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#rpc_autherr_badverf\">rpc_autherr_badverf</a><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#RPC_AUTH_BADVERF\">RPC_AUTH_BADVERF</a>)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#rpc_autherr_rejectedverf\">rpc_autherr_rejectedverf</a> <a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#RPC_AUTH_REJECTEDVERF\">RPC_AUTH_REJECTEDVERF</a>)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#rpc_autherr_tooweak\">rpc_autherr_tooweak</a><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#RPC_AUTH_TOOWEAK\">RPC_AUTH_TOOWEAK</a>)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#rpcsec_gsserr_credproblem\">rpcsec_gsserr_credproblem</a><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#RPCSEC_GSS_CREDPROBLEM\">RPCSEC_GSS_CREDPROBLEM</a>)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#rpcsec_gsserr_ctxproblem\">rpcsec_gsserr_ctxproblem</a><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#RPCSEC_GSS_CTXPROBLEM\">RPCSEC_GSS_CTXPROBLEM</a>)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#rpc_autherr_oldseqnum\">rpc_autherr_oldseqnum</a><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(101)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Miscellaneous XDR helper functions</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#xdr_encode_opaque_fixed\">xdr_encode_opaque_fixed</a>(<a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#p\">p</a>, const void *<a class=\"id\" href=\"#ptr\">ptr</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"<a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#xdr_encode_opaque\">xdr_encode_opaque</a>(<a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#p\">p</a>, const void *<a class=\"id\" href=\"#ptr\">ptr</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"<a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#xdr_encode_string\">xdr_encode_string</a>(<a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#p\">p</a>, const char *<a class=\"id\" href=\"#s\">s</a>);", 
"<a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#xdr_decode_string_inplace\">xdr_decode_string_inplace</a>(<a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#p\">p</a>, char **<a class=\"id\" href=\"#sp\">sp</a>, unsigned int *<a class=\"id\" href=\"#lenp\">lenp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#maxlen\">maxlen</a>);", 
"<a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#xdr_encode_netobj\">xdr_encode_netobj</a>(<a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#p\">p</a>, const struct <a class=\"id\" href=\"#xdr_netobj\">xdr_netobj</a> *);", 
"<a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#xdr_decode_netobj\">xdr_decode_netobj</a>(<a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#xdr_netobj\">xdr_netobj</a> *);", 
"", 
"void<span class=\"ts\"/><a class=\"id\" href=\"#xdr_encode_pages\">xdr_encode_pages</a>(struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a> *, struct <a class=\"id\" href=\"#page\">page</a> **, unsigned int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int);", 
"void<span class=\"ts\"/><a class=\"id\" href=\"#xdr_inline_pages\">xdr_inline_pages</a>(struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a> *, unsigned int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#page\">page</a> **, unsigned int, unsigned int);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#xdr_encode_array\">xdr_encode_array</a>(<a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#p\">p</a>, const void *<a class=\"id\" href=\"#s\">s</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#xdr_encode_opaque\">xdr_encode_opaque</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Decode 64bit quantities (NFSv3 support)</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__be32\">__be32</a> *", 
"<a class=\"id\" href=\"#xdr_encode_hyper\">xdr_encode_hyper</a>(<a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#__u64\">__u64</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_unaligned_be64\">put_unaligned_be64</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a> + 2;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__be32\">__be32</a> *", 
"<a class=\"id\" href=\"#xdr_decode_hyper\">xdr_decode_hyper</a>(<a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#__u64\">__u64</a> *<a class=\"id\" href=\"#valp\">valp</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#valp\">valp</a> = <a class=\"id\" href=\"#get_unaligned_be64\">get_unaligned_be64</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a> + 2;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Adjust kvec to reflect end of xdr'ed data (RPC client XDR)</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#xdr_adjust_iovec\">xdr_adjust_iovec</a>(struct <a class=\"id\" href=\"#kvec\">kvec</a> *<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a> = ((<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#p\">p</a> - (<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * XDR buffer helper functions</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#xdr_shift_buf\">xdr_shift_buf</a>(struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>);", 
"extern void <a class=\"id\" href=\"#xdr_buf_from_iov\">xdr_buf_from_iov</a>(struct <a class=\"id\" href=\"#kvec\">kvec</a> *, struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a> *);", 
"extern int <a class=\"id\" href=\"#xdr_buf_subsegment\">xdr_buf_subsegment</a>(struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a> *, struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a> *, unsigned int, unsigned int);", 
"extern int <a class=\"id\" href=\"#xdr_buf_read_netobj\">xdr_buf_read_netobj</a>(struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a> *, struct <a class=\"id\" href=\"#xdr_netobj\">xdr_netobj</a> *, unsigned int);", 
"extern int <a class=\"id\" href=\"#read_bytes_from_xdr_buf\">read_bytes_from_xdr_buf</a>(struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a> *, unsigned int, void *, unsigned int);", 
"extern int <a class=\"id\" href=\"#write_bytes_to_xdr_buf\">write_bytes_to_xdr_buf</a>(struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a> *, unsigned int, void *, unsigned int);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Helper structure for copying from an sk_buff.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#xdr_skb_reader\">xdr_skb_reader</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a><span class=\"ts\"/>*<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wsum\">__wsum</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a>;", 
"};", 
"", 
"typedef <a class=\"id\" href=\"#size_t\">size_t</a> (*<a class=\"id\" href=\"#xdr_skb_read_actor\">xdr_skb_read_actor</a>)(struct <a class=\"id\" href=\"#xdr_skb_reader\">xdr_skb_reader</a> *<a class=\"id\" href=\"#desc\">desc</a>, void *<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#xdr_skb_read_bits\">xdr_skb_read_bits</a>(struct <a class=\"id\" href=\"#xdr_skb_reader\">xdr_skb_reader</a> *<a class=\"id\" href=\"#desc\">desc</a>, void *<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"extern int <a class=\"id\" href=\"#csum_partial_copy_to_xdr\">csum_partial_copy_to_xdr</a>(struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a> *, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *);", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#xdr_partial_copy_from_skb\">xdr_partial_copy_from_skb</a>(struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a> *, unsigned int,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#xdr_skb_reader\">xdr_skb_reader</a> *, <a class=\"id\" href=\"#xdr_skb_read_actor\">xdr_skb_read_actor</a>);", 
"", 
"extern int <a class=\"id\" href=\"#xdr_encode_word\">xdr_encode_word</a>(struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a> *, unsigned int, <a class=\"id\" href=\"#u32\">u32</a>);", 
"extern int <a class=\"id\" href=\"#xdr_decode_word\">xdr_decode_word</a>(struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a> *, unsigned int, <a class=\"id\" href=\"#u32\">u32</a> *);", 
"", 
"struct <a class=\"id\" href=\"#xdr_array2_desc\">xdr_array2_desc</a>;", 
"typedef int (*<a class=\"id\" href=\"#xdr_xcode_elem_t\">xdr_xcode_elem_t</a>)(struct <a class=\"id\" href=\"#xdr_array2_desc\">xdr_array2_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>, void *<a class=\"id\" href=\"#elem\">elem</a>);", 
"struct <a class=\"id\" href=\"#xdr_array2_desc\">xdr_array2_desc</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#elem_size\">elem_size</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#array_len\">array_len</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#array_maxlen\">array_maxlen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xdr_xcode_elem_t\">xdr_xcode_elem_t</a> <a class=\"id\" href=\"#xcode\">xcode</a>;", 
"};", 
"", 
"extern int <a class=\"id\" href=\"#xdr_decode_array2\">xdr_decode_array2</a>(struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#base\">base</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#xdr_array2_desc\">xdr_array2_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>);", 
"extern int <a class=\"id\" href=\"#xdr_encode_array2\">xdr_encode_array2</a>(struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#base\">base</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#xdr_array2_desc\">xdr_array2_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Provide some simple tools for XDR buffer overflow-checking etc.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#xdr_stream\">xdr_stream</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#p\">p</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* start of available buffer */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>;<span class=\"ts\"/><span class=\"comment\">/* XDR buffer to read/write */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#end\">end</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* end of available buffer space */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kvec\">kvec</a> *<a class=\"id\" href=\"#iov\">iov</a>;<span class=\"ts\"/><span class=\"comment\">/* pointer to the current kvec */</span>", 
"};", 
"", 
"extern void <a class=\"id\" href=\"#xdr_init_encode\">xdr_init_encode</a>(struct <a class=\"id\" href=\"#xdr_stream\">xdr_stream</a> *<a class=\"id\" href=\"#xdr\">xdr</a>, struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"extern <a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#xdr_reserve_space\">xdr_reserve_space</a>(struct <a class=\"id\" href=\"#xdr_stream\">xdr_stream</a> *<a class=\"id\" href=\"#xdr\">xdr</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>);", 
"extern void <a class=\"id\" href=\"#xdr_write_pages\">xdr_write_pages</a>(struct <a class=\"id\" href=\"#xdr_stream\">xdr_stream</a> *<a class=\"id\" href=\"#xdr\">xdr</a>, struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#base\">base</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"extern void <a class=\"id\" href=\"#xdr_init_decode\">xdr_init_decode</a>(struct <a class=\"id\" href=\"#xdr_stream\">xdr_stream</a> *<a class=\"id\" href=\"#xdr\">xdr</a>, struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"extern <a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#xdr_inline_decode\">xdr_inline_decode</a>(struct <a class=\"id\" href=\"#xdr_stream\">xdr_stream</a> *<a class=\"id\" href=\"#xdr\">xdr</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>);", 
"extern void <a class=\"id\" href=\"#xdr_read_pages\">xdr_read_pages</a>(struct <a class=\"id\" href=\"#xdr_stream\">xdr_stream</a> *<a class=\"id\" href=\"#xdr\">xdr</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"extern void <a class=\"id\" href=\"#xdr_enter_page\">xdr_enter_page</a>(struct <a class=\"id\" href=\"#xdr_stream\">xdr_stream</a> *<a class=\"id\" href=\"#xdr\">xdr</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"extern int <a class=\"id\" href=\"#xdr_process_buf\">xdr_process_buf</a>(struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a> *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#offset\">offset</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>, int (*<a class=\"id\" href=\"#actor\">actor</a>)(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *, void *), void *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _SUNRPC_XDR_H_ */</span>", 
];
xr_frag_insert('l/2e/86849cfba668283cd9332f8516fc07c68f28b0.xr', __xr_tmp);
