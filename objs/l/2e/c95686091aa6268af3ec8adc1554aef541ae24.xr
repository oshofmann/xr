var __xr_tmp = [
"<span class=\"comment\"> * @max_low_pfn: The highest PFN that will be passed to free_bootmem_node</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If an architecture guarantees that all ranges registered with</span>", 
"<span class=\"comment\"> * add_active_ranges() contain no holes and may be freed, this</span>", 
"<span class=\"comment\"> * this function may be used instead of calling free_bootmem() manually.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#free_bootmem_with_active_regions\">free_bootmem_with_active_regions</a>(int <a class=\"id\" href=\"#nid\">nid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max_low_pfn\">max_low_pfn</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_active_range_index_in_nid\">for_each_active_range_index_in_nid</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nid\">nid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size_pages\">size_pages</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a> = <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a> >= <a class=\"id\" href=\"#max_low_pfn\">max_low_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end_pfn\">end_pfn</a> &gt; <a class=\"id\" href=\"#max_low_pfn\">max_low_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_pfn\">end_pfn</a> = <a class=\"id\" href=\"#max_low_pfn\">max_low_pfn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_pages\">size_pages</a> = <a class=\"id\" href=\"#end_pfn\">end_pfn</a> - <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_bootmem_node\">free_bootmem_node</a>(<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#nid\">nid</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PFN_PHYS\">PFN_PHYS</a>(<a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_pages\">size_pages</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#add_from_early_node_map\">add_from_early_node_map</a>(struct <a class=\"id\" href=\"#range\">range</a> *<a class=\"id\" href=\"#range\">range</a>, int <a class=\"id\" href=\"#az\">az</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#nr_range\">nr_range</a>, int <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* need to go over early_node_map to find out good range for node */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_active_range_index_in_nid\">for_each_active_range_index_in_nid</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nid\">nid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_range\">nr_range</a> = <a class=\"id\" href=\"#add_range\">add_range</a>(<a class=\"id\" href=\"#range\">range</a>, <a class=\"id\" href=\"#az\">az</a>, <a class=\"id\" href=\"#nr_range\">nr_range</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_range\">nr_range</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"void * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__alloc_memory_core_early\">__alloc_memory_core_early</a>(int <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#limit\">limit</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#limit\">limit</a> &gt; <a class=\"id\" href=\"#get_max_mapped\">get_max_mapped</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#get_max_mapped\">get_max_mapped</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* need to go over early_node_map to find out good range for node */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_active_range_index_in_nid\">for_each_active_range_index_in_nid</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nid\">nid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ei_start\">ei_start</a>, <a class=\"id\" href=\"#ei_last\">ei_last</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei_last\">ei_last</a> = <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei_last\">ei_last</a> <<= <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei_start\">ei_start</a> = <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei_start\">ei_start</a> <<= <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#find_early_area\">find_early_area</a>(<a class=\"id\" href=\"#ei_start\">ei_start</a>, <a class=\"id\" href=\"#ei_last\">ei_last</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#limit\">limit</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> == -1ULL)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"#if 0", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"alloc (nid=%d %llx - %llx) (%llx - %llx) %llx %llx => %llx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei_start\">ei_start</a>, <a class=\"id\" href=\"#ei_last\">ei_last</a>, <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#limit\">limit</a>, <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, 0, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reserve_early_without_check\">reserve_early_without_check</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a>, \"BOOTMEM\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The min_count is set to 0 so that bootmem allocated blocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * are never reported as leaks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_alloc\">kmemleak_alloc</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#size\">size</a>, 0, 0);", 
];
xr_frag_insert('l/2e/c95686091aa6268af3ec8adc1554aef541ae24.xr', __xr_tmp);
