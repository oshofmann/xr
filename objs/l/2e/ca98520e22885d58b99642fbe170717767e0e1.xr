var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_PVCLOCK_ABI_H\">_ASM_X86_PVCLOCK_ABI_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_PVCLOCK_ABI_H\">_ASM_X86_PVCLOCK_ABI_H</a>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These structs MUST NOT be changed.</span>", 
"<span class=\"comment\"> * They are the ABI between hypervisor and guest OS.</span>", 
"<span class=\"comment\"> * Both Xen and KVM are using this.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * pvclock_vcpu_time_info holds the system time and the tsc timestamp</span>", 
"<span class=\"comment\"> * of the last update. So the guest can use the tsc delta to get a</span>", 
"<span class=\"comment\"> * more precise system time.  There is one per virtual cpu.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * pvclock_wall_clock references the point in time when the system</span>", 
"<span class=\"comment\"> * time was zero (usually boot time), thus the guest calculates the</span>", 
"<span class=\"comment\"> * current wall clock by adding the system time.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Protocol for the \"version\" fields is: hypervisor raises it (making</span>", 
"<span class=\"comment\"> * it uneven) before it starts updating the fields and raises it again</span>", 
"<span class=\"comment\"> * (making it even) when it is done.  Thus the guest can make sure the</span>", 
"<span class=\"comment\"> * time values it got are consistent by checking the version before</span>", 
"<span class=\"comment\"> * and after reading them.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#pvclock_vcpu_time_info\">pvclock_vcpu_time_info</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a>   <a class=\"id\" href=\"#version\">version</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a>   <a class=\"id\" href=\"#pad0\">pad0</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a>   <a class=\"id\" href=\"#tsc_timestamp\">tsc_timestamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a>   <a class=\"id\" href=\"#system_time\">system_time</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a>   <a class=\"id\" href=\"#tsc_to_system_mul\">tsc_to_system_mul</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s8\">s8</a>    <a class=\"id\" href=\"#tsc_shift\">tsc_shift</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a>    <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a>    <a class=\"id\" href=\"#pad\">pad</a>[2];", 
"} <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#__packed__\">__packed__</a>)); <span class=\"comment\">/* 32 bytes */</span>", 
"", 
"struct <a class=\"id\" href=\"#pvclock_wall_clock\">pvclock_wall_clock</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a>   <a class=\"id\" href=\"#version\">version</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a>   <a class=\"id\" href=\"#sec\">sec</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a>   <a class=\"id\" href=\"#nsec\">nsec</a>;", 
"} <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#__packed__\">__packed__</a>));", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVCLOCK_TSC_STABLE_BIT\">PVCLOCK_TSC_STABLE_BIT</a><span class=\"ts\"/>(1 << 0)", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __ASSEMBLY__ */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_PVCLOCK_ABI_H */</span>", 
];
xr_frag_insert('l/2e/ca98520e22885d58b99642fbe170717767e0e1.xr', __xr_tmp);
