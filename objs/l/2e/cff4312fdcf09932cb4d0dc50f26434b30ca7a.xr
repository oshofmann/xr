var __xr_tmp = [
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#atomic_long_read\">atomic_long_read</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a> &amp; <a class=\"id\" href=\"#WORK_STRUCT_CWQ\">WORK_STRUCT_CWQ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return ((struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#data\">data</a> &amp; <a class=\"id\" href=\"#WORK_STRUCT_WQ_DATA_MASK\">WORK_STRUCT_WQ_DATA_MASK</a>))-><a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#data\">data</a> >> <a class=\"id\" href=\"#WORK_STRUCT_FLAG_BITS\">WORK_STRUCT_FLAG_BITS</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#WORK_CPU_NONE\">WORK_CPU_NONE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cpu\">cpu</a> >= <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> && <a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#WORK_CPU_UNBOUND\">WORK_CPU_UNBOUND</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#get_gcwq\">get_gcwq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Policy functions.  These define the policies on how the global</span>", 
"<span class=\"comment\"> * worker pool is managed.  Unless noted otherwise, these functions</span>", 
"<span class=\"comment\"> * assume that they're being called with gcwq-&gt;lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__need_more_worker\">__need_more_worker</a>(struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(<a class=\"id\" href=\"#get_gcwq_nr_running\">get_gcwq_nr_running</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>)) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GCWQ_HIGHPRI_PENDING\">GCWQ_HIGHPRI_PENDING</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Need to wake up a worker?  Called from anything but currently</span>", 
"<span class=\"comment\"> * running workers.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#need_more_worker\">need_more_worker</a>(struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#worklist\">worklist</a>) && <a class=\"id\" href=\"#__need_more_worker\">__need_more_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Can I start working?  Called from busy but !running workers. */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#may_start_working\">may_start_working</a>(struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#nr_idle\">nr_idle</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Do I need to keep working?  Called from currently running workers. */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#keep_working\">keep_working</a>(struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#nr_running\">nr_running</a> = <a class=\"id\" href=\"#get_gcwq_nr_running\">get_gcwq_nr_running</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#worklist\">worklist</a>) && <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(<a class=\"id\" href=\"#nr_running\">nr_running</a>) <= 1;", 
"}", 
"", 
"<span class=\"comment\">/* Do we need a new worker?  Called from manager. */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#need_to_create_worker\">need_to_create_worker</a>(struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#need_more_worker\">need_more_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>) && !<a class=\"id\" href=\"#may_start_working\">may_start_working</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Do I need to be the manager? */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#need_to_manage_workers\">need_to_manage_workers</a>(struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#need_to_create_worker\">need_to_create_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>) || <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GCWQ_MANAGE_WORKERS\">GCWQ_MANAGE_WORKERS</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Do we have too many workers and should some go away? */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#too_many_workers\">too_many_workers</a>(struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#managing\">managing</a> = <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GCWQ_MANAGING_WORKERS\">GCWQ_MANAGING_WORKERS</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_idle\">nr_idle</a> = <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#nr_idle\">nr_idle</a> + <a class=\"id\" href=\"#managing\">managing</a>; <span class=\"comment\">/* manager is considered idle */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_busy\">nr_busy</a> = <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#nr_workers\">nr_workers</a> - <a class=\"id\" href=\"#nr_idle\">nr_idle</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_idle\">nr_idle</a> &gt; 2 && (<a class=\"id\" href=\"#nr_idle\">nr_idle</a> - 2) * <a class=\"id\" href=\"#MAX_IDLE_WORKERS_RATIO\">MAX_IDLE_WORKERS_RATIO</a> >= <a class=\"id\" href=\"#nr_busy\">nr_busy</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wake up functions.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Return the first worker.  Safe with preemption disabled */</span>", 
"static struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#first_worker\">first_worker</a>(struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#idle_list\">idle_list</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#idle_list\">idle_list</a>, struct <a class=\"id\" href=\"#worker\">worker</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wake_up_worker - wake up an idle worker</span>", 
"<span class=\"comment\"> * @gcwq: gcwq to wake worker for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Wake up the first idle worker of @gcwq.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock).</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#wake_up_worker\">wake_up_worker</a>(struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a> = <a class=\"id\" href=\"#first_worker\">first_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#worker\">worker</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#task\">task</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wq_worker_waking_up - a worker is waking up</span>", 
"<span class=\"comment\"> * @task: task waking up</span>", 
"<span class=\"comment\"> * @cpu: CPU @task is waking up to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called during try_to_wake_up() when a worker is</span>", 
"<span class=\"comment\"> * being awoken.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(rq-&gt;lock)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#wq_worker_waking_up\">wq_worker_waking_up</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a> = <a class=\"id\" href=\"#kthread_data\">kthread_data</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!(<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WORKER_NOT_RUNNING\">WORKER_NOT_RUNNING</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(<a class=\"id\" href=\"#get_gcwq_nr_running\">get_gcwq_nr_running</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wq_worker_sleeping - a worker is going to sleep</span>", 
"<span class=\"comment\"> * @task: task going to sleep</span>", 
"<span class=\"comment\"> * @cpu: CPU in question, must be the current CPU number</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called during schedule() when a busy worker is</span>", 
"<span class=\"comment\"> * going to sleep.  Worker on the same cpu can be woken up by</span>", 
"<span class=\"comment\"> * returning pointer to its task.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(rq-&gt;lock)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Worker task on @cpu to wake up, %NULL if none.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#wq_worker_sleeping\">wq_worker_sleeping</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a> = <a class=\"id\" href=\"#kthread_data\">kthread_data</a>(<a class=\"id\" href=\"#task\">task</a>), *<a class=\"id\" href=\"#to_wakeup\">to_wakeup</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#get_gcwq\">get_gcwq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#nr_running\">nr_running</a> = <a class=\"id\" href=\"#get_gcwq_nr_running\">get_gcwq_nr_running</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WORKER_NOT_RUNNING\">WORKER_NOT_RUNNING</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* this can only happen on the local cpu */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>());", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The counterpart of the following dec_and_test, implied mb,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * worklist not empty test sequence is in insert_work().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Please read comment there.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOT_RUNNING is clear.  This means that trustee is not in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * charge and we're running on the local cpu w/ rq lock held</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and preemption disabled, which in turn means that none else</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * could be manipulating idle_list, so dereferencing idle_list</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * without gcwq lock is safe.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(<a class=\"id\" href=\"#nr_running\">nr_running</a>) && !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#worklist\">worklist</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_wakeup\">to_wakeup</a> = <a class=\"id\" href=\"#first_worker\">first_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#to_wakeup\">to_wakeup</a> ? <a class=\"id\" href=\"#to_wakeup\">to_wakeup</a>-><a class=\"id\" href=\"#task\">task</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * worker_set_flags - set worker flags and adjust nr_running accordingly</span>", 
"<span class=\"comment\"> * @worker: self</span>", 
"<span class=\"comment\"> * @flags: flags to set</span>", 
"<span class=\"comment\"> * @wakeup: wakeup an idle worker if necessary</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Set @flags in @worker-&gt;flags and adjust nr_running accordingly.  If</span>", 
"<span class=\"comment\"> * nr_running becomes zero and @wakeup is %true, an idle worker is</span>", 
"<span class=\"comment\"> * woken up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock)</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#worker_set_flags\">worker_set_flags</a>(struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#wakeup\">wakeup</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#task\">task</a> != <a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If transitioning into NOT_RUNNING, adjust nr_running and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wake up an idle worker as necessary if requested by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @wakeup.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WORKER_NOT_RUNNING\">WORKER_NOT_RUNNING</a>) &&", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WORKER_NOT_RUNNING\">WORKER_NOT_RUNNING</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#nr_running\">nr_running</a> = <a class=\"id\" href=\"#get_gcwq_nr_running\">get_gcwq_nr_running</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wakeup\">wakeup</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(<a class=\"id\" href=\"#nr_running\">nr_running</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#worklist\">worklist</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_worker\">wake_up_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(<a class=\"id\" href=\"#nr_running\">nr_running</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#flags\">flags</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * worker_clr_flags - clear worker flags and adjust nr_running accordingly</span>", 
"<span class=\"comment\"> * @worker: self</span>", 
"<span class=\"comment\"> * @flags: flags to clear</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Clear @flags in @worker-&gt;flags and adjust nr_running accordingly.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock)</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#worker_clr_flags\">worker_clr_flags</a>(struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#oflags\">oflags</a> = <a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#task\">task</a> != <a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if transitioning out of NOT_RUNNING, increment nr_running */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WORKER_NOT_RUNNING\">WORKER_NOT_RUNNING</a>) && (<a class=\"id\" href=\"#oflags\">oflags</a> &amp; <a class=\"id\" href=\"#WORKER_NOT_RUNNING\">WORKER_NOT_RUNNING</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WORKER_NOT_RUNNING\">WORKER_NOT_RUNNING</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(<a class=\"id\" href=\"#get_gcwq_nr_running\">get_gcwq_nr_running</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * busy_worker_head - return the busy hash head for a work</span>", 
"<span class=\"comment\"> * @gcwq: gcwq of interest</span>", 
"<span class=\"comment\"> * @work: work to be hashed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return hash head of @gcwq for @work.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Pointer to the hash head.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#busy_worker_head\">busy_worker_head</a>(struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#base_shift\">base_shift</a> = <a class=\"id\" href=\"#ilog2\">ilog2</a>(sizeof(struct <a class=\"id\" href=\"#work_struct\">work_struct</a>));", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#v\">v</a> = (unsigned long)<a class=\"id\" href=\"#work\">work</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* simple shift and fold hash, do we need something better? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> >>= <a class=\"id\" href=\"#base_shift\">base_shift</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> += <a class=\"id\" href=\"#v\">v</a> >> <a class=\"id\" href=\"#BUSY_WORKER_HASH_ORDER\">BUSY_WORKER_HASH_ORDER</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> &= <a class=\"id\" href=\"#BUSY_WORKER_HASH_MASK\">BUSY_WORKER_HASH_MASK</a>;", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#busy_hash\">busy_hash</a>[<a class=\"id\" href=\"#v\">v</a>];", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __find_worker_executing_work - find worker which is executing a work</span>", 
"<span class=\"comment\"> * @gcwq: gcwq of interest</span>", 
"<span class=\"comment\"> * @bwh: hash head as returned by busy_worker_head()</span>", 
"<span class=\"comment\"> * @work: work to find worker for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find a worker which is executing @work on @gcwq.  @bwh should be</span>", 
"<span class=\"comment\"> * the hash head obtained by calling busy_worker_head() with the same</span>", 
"<span class=\"comment\"> * work.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Pointer to worker which is executing @work if found, NULL</span>", 
"<span class=\"comment\"> * otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#__find_worker_executing_work\">__find_worker_executing_work</a>(struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#bwh\">bwh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#worker\">worker</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#bwh\">bwh</a>, <a class=\"id\" href=\"#hentry\">hentry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#current_work\">current_work</a> == <a class=\"id\" href=\"#work\">work</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#worker\">worker</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_worker_executing_work - find worker which is executing a work</span>", 
"<span class=\"comment\"> * @gcwq: gcwq of interest</span>", 
"<span class=\"comment\"> * @work: work to find worker for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find a worker which is executing @work on @gcwq.  This function is</span>", 
"<span class=\"comment\"> * identical to __find_worker_executing_work() except that this</span>", 
"<span class=\"comment\"> * function calculates @bwh itself.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Pointer to worker which is executing @work if found, NULL</span>", 
"<span class=\"comment\"> * otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#find_worker_executing_work\">find_worker_executing_work</a>(struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__find_worker_executing_work\">__find_worker_executing_work</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>, <a class=\"id\" href=\"#busy_worker_head\">busy_worker_head</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>, <a class=\"id\" href=\"#work\">work</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#work\">work</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * gcwq_determine_ins_pos - find insertion position</span>", 
"<span class=\"comment\"> * @gcwq: gcwq of interest</span>", 
"<span class=\"comment\"> * @cwq: cwq a work is being queued for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A work for @cwq is about to be queued on @gcwq, determine insertion</span>", 
"<span class=\"comment\"> * position for the work.  If @cwq is for HIGHPRI wq, the work is</span>", 
"<span class=\"comment\"> * queued at the head of the queue but in FIFO order with respect to</span>", 
"<span class=\"comment\"> * other HIGHPRI works; otherwise, at the end of the queue.  This</span>", 
"<span class=\"comment\"> * function also sets GCWQ_HIGHPRI_PENDING flag to hint @gcwq that</span>", 
"<span class=\"comment\"> * there are HIGHPRI works pending.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Pointer to inserstion position.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#gcwq_determine_ins_pos\">gcwq_determine_ins_pos</a>(struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#cwq\">cwq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#twork\">twork</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!(<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_HIGHPRI\">WQ_HIGHPRI</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#worklist\">worklist</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#twork\">twork</a>, &amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#worklist\">worklist</a>, <a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#tcwq\">tcwq</a> = <a class=\"id\" href=\"#get_work_cwq\">get_work_cwq</a>(<a class=\"id\" href=\"#twork\">twork</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#tcwq\">tcwq</a>-><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_HIGHPRI\">WQ_HIGHPRI</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#GCWQ_HIGHPRI_PENDING\">GCWQ_HIGHPRI_PENDING</a>;", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#twork\">twork</a>-><a class=\"id\" href=\"#entry\">entry</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * insert_work - insert a work into gcwq</span>", 
"<span class=\"comment\"> * @cwq: cwq @work belongs to</span>", 
"<span class=\"comment\"> * @work: work to insert</span>", 
"<span class=\"comment\"> * @head: insertion point</span>", 
"<span class=\"comment\"> * @extra_flags: extra WORK_STRUCT_* flags to set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Insert @work which belongs to @cwq into @gcwq after @head.</span>", 
"<span class=\"comment\"> * @extra_flags is or'd to work_struct flags.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock).</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#insert_work\">insert_work</a>(struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#cwq\">cwq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#extra_flags\">extra_flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we own @work, set data and link */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_work_cwq\">set_work_cwq</a>(<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#cwq\">cwq</a>, <a class=\"id\" href=\"#extra_flags\">extra_flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ensure that we get the right work-&gt;data if we see the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * result of list_add() below, see try_to_grab_pending().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ensure either worker_sched_deactivated() sees the above</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * list_add_tail() or we see zero nr_running to avoid workers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lying around lazily while there are works to be processed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__need_more_worker\">__need_more_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_worker\">wake_up_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__queue_work\">__queue_work</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#cwq\">cwq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#worklist\">worklist</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#work_flags\">work_flags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_work_activate\">debug_work_activate</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_DYING\">WQ_DYING</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* determine gcwq to use */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_UNBOUND\">WQ_UNBOUND</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#last_gcwq\">last_gcwq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#WORK_CPU_UNBOUND\">WORK_CPU_UNBOUND</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It's multi cpu.  If @wq is non-reentrant and @work</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * was previously on a different cpu, it might still</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be running there, in which case the work needs to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be queued on that cpu to guarantee non-reentrance.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#get_gcwq\">get_gcwq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_NON_REENTRANT\">WQ_NON_REENTRANT</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#last_gcwq\">last_gcwq</a> = <a class=\"id\" href=\"#get_work_gcwq\">get_work_gcwq</a>(<a class=\"id\" href=\"#work\">work</a>)) && <a class=\"id\" href=\"#last_gcwq\">last_gcwq</a> != <a class=\"id\" href=\"#gcwq\">gcwq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#last_gcwq\">last_gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a> = <a class=\"id\" href=\"#find_worker_executing_work\">find_worker_executing_work</a>(<a class=\"id\" href=\"#last_gcwq\">last_gcwq</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#worker\">worker</a> && <a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#current_cwq\">current_cwq</a>-><a class=\"id\" href=\"#wq\">wq</a> == <a class=\"id\" href=\"#wq\">wq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#last_gcwq\">last_gcwq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* meh... not running there, queue here */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#last_gcwq\">last_gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#get_gcwq\">get_gcwq</a>(<a class=\"id\" href=\"#WORK_CPU_UNBOUND\">WORK_CPU_UNBOUND</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* gcwq determined, get cwq and queue */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cwq\">cwq</a> = <a class=\"id\" href=\"#get_cwq\">get_cwq</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#wq\">wq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#entry\">entry</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#nr_in_flight\">nr_in_flight</a>[<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#work_color\">work_color</a>]++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#work_flags\">work_flags</a> = <a class=\"id\" href=\"#work_color_to_flags\">work_color_to_flags</a>(<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#work_color\">work_color</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#nr_active\">nr_active</a> &lt; <a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#max_active\">max_active</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#nr_active\">nr_active</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worklist\">worklist</a> = <a class=\"id\" href=\"#gcwq_determine_ins_pos\">gcwq_determine_ins_pos</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>, <a class=\"id\" href=\"#cwq\">cwq</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work_flags\">work_flags</a> |= <a class=\"id\" href=\"#WORK_STRUCT_DELAYED\">WORK_STRUCT_DELAYED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worklist\">worklist</a> = &amp;<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#delayed_works\">delayed_works</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insert_work\">insert_work</a>(<a class=\"id\" href=\"#cwq\">cwq</a>, <a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#worklist\">worklist</a>, <a class=\"id\" href=\"#work_flags\">work_flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * queue_work - queue work on a workqueue</span>", 
"<span class=\"comment\"> * @wq: workqueue to use</span>", 
"<span class=\"comment\"> * @work: work to queue</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if @work was already on a queue, non-zero otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We queue the work to the CPU on which it was submitted, but if the CPU dies</span>", 
"<span class=\"comment\"> * it can be processed by another CPU.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#queue_work\">queue_work</a>(struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>, struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#queue_work_on\">queue_work_on</a>(<a class=\"id\" href=\"#get_cpu\">get_cpu</a>(), <a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#queue_work\">queue_work</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * queue_work_on - queue work on specific cpu</span>", 
"<span class=\"comment\"> * @cpu: CPU number to execute work on</span>", 
"<span class=\"comment\"> * @wq: workqueue to use</span>", 
"<span class=\"comment\"> * @work: work to queue</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if @work was already on a queue, non-zero otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We queue the work to a specific CPU, the caller must ensure it</span>", 
"<span class=\"comment\"> * can't go away.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#queue_work_on\">queue_work_on</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>, struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#WORK_STRUCT_PENDING_BIT\">WORK_STRUCT_PENDING_BIT</a>, <a class=\"id\" href=\"#work_data_bits\">work_data_bits</a>(<a class=\"id\" href=\"#work\">work</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__queue_work\">__queue_work</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#queue_work_on\">queue_work_on</a>);", 
"", 
"static void <a class=\"id\" href=\"#delayed_work_timer_fn\">delayed_work_timer_fn</a>(unsigned long <a class=\"id\" href=\"#__data\">__data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *<a class=\"id\" href=\"#dwork\">dwork</a> = (struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *)<a class=\"id\" href=\"#__data\">__data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#cwq\">cwq</a> = <a class=\"id\" href=\"#get_work_cwq\">get_work_cwq</a>(&amp;<a class=\"id\" href=\"#dwork\">dwork</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__queue_work\">__queue_work</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(), <a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#dwork\">dwork</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * queue_delayed_work - queue work on a workqueue after delay</span>", 
"<span class=\"comment\"> * @wq: workqueue to use</span>", 
"<span class=\"comment\"> * @dwork: delayable work to queue</span>", 
"<span class=\"comment\"> * @delay: number of jiffies to wait before queueing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if @work was already on a queue, non-zero otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#queue_delayed_work\">queue_delayed_work</a>(struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *<a class=\"id\" href=\"#dwork\">dwork</a>, unsigned long <a class=\"id\" href=\"#delay\">delay</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delay\">delay</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#queue_work\">queue_work</a>(<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#dwork\">dwork</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#queue_delayed_work_on\">queue_delayed_work_on</a>(-1, <a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#dwork\">dwork</a>, <a class=\"id\" href=\"#delay\">delay</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#queue_delayed_work\">queue_delayed_work</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * queue_delayed_work_on - queue work on specific CPU after delay</span>", 
"<span class=\"comment\"> * @cpu: CPU number to execute work on</span>", 
"<span class=\"comment\"> * @wq: workqueue to use</span>", 
"<span class=\"comment\"> * @dwork: work to queue</span>", 
"<span class=\"comment\"> * @delay: number of jiffies to wait before queueing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if @work was already on a queue, non-zero otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#queue_delayed_work_on\">queue_delayed_work_on</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *<a class=\"id\" href=\"#dwork\">dwork</a>, unsigned long <a class=\"id\" href=\"#delay\">delay</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a> = &amp;<a class=\"id\" href=\"#dwork\">dwork</a>-><a class=\"id\" href=\"#timer\">timer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a> = &amp;<a class=\"id\" href=\"#dwork\">dwork</a>-><a class=\"id\" href=\"#work\">work</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#WORK_STRUCT_PENDING_BIT\">WORK_STRUCT_PENDING_BIT</a>, <a class=\"id\" href=\"#work_data_bits\">work_data_bits</a>(<a class=\"id\" href=\"#work\">work</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#lcpu\">lcpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#timer_pending\">timer_pending</a>(<a class=\"id\" href=\"#timer\">timer</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#entry\">entry</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer_stats_timer_set_start_info\">timer_stats_timer_set_start_info</a>(&amp;<a class=\"id\" href=\"#dwork\">dwork</a>-><a class=\"id\" href=\"#timer\">timer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This stores cwq for the moment, for the timer_fn.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note that the work's gcwq is preserved to allow</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reentrance detection for delayed works.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_UNBOUND\">WQ_UNBOUND</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#get_work_gcwq\">get_work_gcwq</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#gcwq\">gcwq</a> && <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#WORK_CPU_UNBOUND\">WORK_CPU_UNBOUND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lcpu\">lcpu</a> = <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lcpu\">lcpu</a> = <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lcpu\">lcpu</a> = <a class=\"id\" href=\"#WORK_CPU_UNBOUND\">WORK_CPU_UNBOUND</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_work_cwq\">set_work_cwq</a>(<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#get_cwq\">get_cwq</a>(<a class=\"id\" href=\"#lcpu\">lcpu</a>, <a class=\"id\" href=\"#wq\">wq</a>), 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#delay\">delay</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#data\">data</a> = (unsigned long)<a class=\"id\" href=\"#dwork\">dwork</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#function\">function</a> = <a class=\"id\" href=\"#delayed_work_timer_fn\">delayed_work_timer_fn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cpu\">cpu</a> >= 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_timer_on\">add_timer_on</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_timer\">add_timer</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#queue_delayed_work_on\">queue_delayed_work_on</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * worker_enter_idle - enter idle state</span>", 
"<span class=\"comment\"> * @worker: worker which is entering idle state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @worker is entering idle state.  Update stats and idle timer if</span>", 
"<span class=\"comment\"> * necessary.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock).</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#worker_enter_idle\">worker_enter_idle</a>(struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WORKER_IDLE\">WORKER_IDLE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#entry\">entry</a>) &&", 
"<span class=\"ts\"/>       (<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#hentry\">hentry</a>.<a class=\"id\" href=\"#next\">next</a> || <a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#hentry\">hentry</a>.<a class=\"id\" href=\"#pprev\">pprev</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* can't use worker_set_flags(), also called from start_worker() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#WORKER_IDLE\">WORKER_IDLE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#nr_idle\">nr_idle</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#last_active\">last_active</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* idle_list is LIFO */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#entry\">entry</a>, &amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#idle_list\">idle_list</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!(<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WORKER_ROGUE\">WORKER_ROGUE</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#too_many_workers\">too_many_workers</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>) && !<a class=\"id\" href=\"#timer_pending\">timer_pending</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#idle_timer\">idle_timer</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#idle_timer\">idle_timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#IDLE_WORKER_TIMEOUT\">IDLE_WORKER_TIMEOUT</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_all\">wake_up_all</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_wait\">trustee_wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* sanity check nr_running */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#nr_workers\">nr_workers</a> == <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#nr_idle\">nr_idle</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(<a class=\"id\" href=\"#get_gcwq_nr_running\">get_gcwq_nr_running</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>)));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * worker_leave_idle - leave idle state</span>", 
"<span class=\"comment\"> * @worker: worker which is leaving idle state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @worker is leaving idle state.  Update stats.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock).</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#worker_leave_idle\">worker_leave_idle</a>(struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WORKER_IDLE\">WORKER_IDLE</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker_clr_flags\">worker_clr_flags</a>(<a class=\"id\" href=\"#worker\">worker</a>, <a class=\"id\" href=\"#WORKER_IDLE\">WORKER_IDLE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#nr_idle\">nr_idle</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#entry\">entry</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * worker_maybe_bind_and_lock - bind worker to its cpu if possible and lock gcwq</span>", 
"<span class=\"comment\"> * @worker: self</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Works which are scheduled while the cpu is online must at least be</span>", 
"<span class=\"comment\"> * scheduled to a worker which is bound to the cpu so that if they are</span>", 
"<span class=\"comment\"> * flushed from cpu callbacks while cpu is going down, they are</span>", 
"<span class=\"comment\"> * guaranteed to execute on the cpu.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is to be used by rogue workers and rescuers to bind</span>", 
"<span class=\"comment\"> * themselves to the target cpu and may race with cpu going down or</span>", 
"<span class=\"comment\"> * coming online.  kthread_bind() can't be used because it may put the</span>", 
"<span class=\"comment\"> * worker to already dead cpu and set_cpus_allowed_ptr() can't be used</span>", 
"<span class=\"comment\"> * verbatim as it's best effort and blocking and gcwq may be</span>", 
"<span class=\"comment\"> * [dis]associated in the meantime.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function tries set_cpus_allowed() and locks gcwq and verifies</span>", 
"<span class=\"comment\"> * the binding against GCWQ_DISASSOCIATED which is set during</span>", 
"<span class=\"comment\"> * CPU_DYING and cleared during CPU_ONLINE, so if the worker enters</span>", 
"<span class=\"comment\"> * idle state or fetches works without dropping lock, it can guarantee</span>", 
"<span class=\"comment\"> * the scheduling requirement described in the first paragraph.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Might sleep.  Called without any lock but returns with gcwq-&gt;lock</span>", 
"<span class=\"comment\"> * held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * %true if the associated gcwq is online (@worker is successfully</span>", 
"<span class=\"comment\"> * bound), %false if offline.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#worker_maybe_bind_and_lock\">worker_maybe_bind_and_lock</a>(struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a>)", 
"<a class=\"id\" href=\"#__acquires\">__acquires</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#task\">task</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#true\">true</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The following call may fail, succeed or succeed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * without actually migrating the task to the cpu if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it races with cpu hotunplug operation.  Verify</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * against GCWQ_DISASSOCIATED.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GCWQ_DISASSOCIATED\">GCWQ_DISASSOCIATED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpus_allowed_ptr\">set_cpus_allowed_ptr</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#get_cpu_mask\">get_cpu_mask</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GCWQ_DISASSOCIATED\">GCWQ_DISASSOCIATED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#task\">task</a>) == <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cpumask_equal\">cpumask_equal</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#get_cpu_mask\">get_cpu_mask</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* CPU has come up inbetween, retry migration */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function for worker-&gt;rebind_work used to rebind rogue busy workers</span>", 
"<span class=\"comment\"> * to the associated cpu which is coming back online.  This is</span>", 
"<span class=\"comment\"> * scheduled by cpu up but can race with other cpu hotplug operations</span>", 
"<span class=\"comment\"> * and may be executed twice without intervening cpu down.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#worker_rebind_fn\">worker_rebind_fn</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#worker\">worker</a>, <a class=\"id\" href=\"#rebind_work\">rebind_work</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#worker_maybe_bind_and_lock\">worker_maybe_bind_and_lock</a>(<a class=\"id\" href=\"#worker\">worker</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker_clr_flags\">worker_clr_flags</a>(<a class=\"id\" href=\"#worker\">worker</a>, <a class=\"id\" href=\"#WORKER_REBIND\">WORKER_REBIND</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#alloc_worker\">alloc_worker</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#worker\">worker</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#worker\">worker</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#scheduled\">scheduled</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#rebind_work\">rebind_work</a>, <a class=\"id\" href=\"#worker_rebind_fn\">worker_rebind_fn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* on creation a worker is in !idle &amp;&amp; prep state */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#WORKER_PREP\">WORKER_PREP</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#worker\">worker</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * create_worker - create a new workqueue worker</span>", 
"<span class=\"comment\"> * @gcwq: gcwq the new worker will belong to</span>", 
"<span class=\"comment\"> * @bind: whether to set affinity to @cpu or not</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Create a new worker which is bound to @gcwq.  The returned worker</span>", 
"<span class=\"comment\"> * can be started by calling start_worker() or destroyed using</span>", 
"<span class=\"comment\"> * destroy_worker().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Might sleep.  Does GFP_KERNEL allocations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Pointer to the newly created worker.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#create_worker\">create_worker</a>(struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#bind\">bind</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#on_unbound_cpu\">on_unbound_cpu</a> = <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#WORK_CPU_UNBOUND\">WORK_CPU_UNBOUND</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#id\">id</a> = -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#ida_get_new\">ida_get_new</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#worker_ida\">worker_ida</a>, &amp;<a class=\"id\" href=\"#id\">id</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ida_pre_get\">ida_pre_get</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#worker_ida\">worker_ida</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a> = <a class=\"id\" href=\"#alloc_worker\">alloc_worker</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#worker\">worker</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#on_unbound_cpu\">on_unbound_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#kthread_create\">kthread_create</a>(<a class=\"id\" href=\"#worker_thread\">worker_thread</a>, <a class=\"id\" href=\"#worker\">worker</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"kworker/%u:%d\", <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#kthread_create\">kthread_create</a>(<a class=\"id\" href=\"#worker_thread\">worker_thread</a>, <a class=\"id\" href=\"#worker\">worker</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"kworker/u:%d\", <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#task\">task</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A rogue worker will become a regular one if CPU comes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * online later on.  Make sure every worker has</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PF_THREAD_BOUND set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bind\">bind</a> && !<a class=\"id\" href=\"#on_unbound_cpu\">on_unbound_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kthread_bind\">kthread_bind</a>(<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_THREAD_BOUND\">PF_THREAD_BOUND</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#on_unbound_cpu\">on_unbound_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#WORKER_UNBOUND\">WORKER_UNBOUND</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#worker\">worker</a>;", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ida_remove\">ida_remove</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#worker_ida\">worker_ida</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#worker\">worker</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * start_worker - start a newly created worker</span>", 
"<span class=\"comment\"> * @worker: worker to start</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Make the gcwq aware of @worker and start it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock).</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#start_worker\">start_worker</a>(struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#WORKER_STARTED\">WORKER_STARTED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#nr_workers\">nr_workers</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker_enter_idle\">worker_enter_idle</a>(<a class=\"id\" href=\"#worker\">worker</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#task\">task</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * destroy_worker - destroy a workqueue worker</span>", 
"<span class=\"comment\"> * @worker: worker to be destroyed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Destroy @worker and adjust @gcwq stats accordingly.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock) which is released and regrabbed.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#destroy_worker\">destroy_worker</a>(struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* sanity check frenzy */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#current_work\">current_work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#scheduled\">scheduled</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WORKER_STARTED\">WORKER_STARTED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#nr_workers\">nr_workers</a>--;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WORKER_IDLE\">WORKER_IDLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#nr_idle\">nr_idle</a>--;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#WORKER_DIE\">WORKER_DIE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kthread_stop\">kthread_stop</a>(<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#worker\">worker</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ida_remove\">ida_remove</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#worker_ida\">worker_ida</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#idle_worker_timeout\">idle_worker_timeout</a>(unsigned long <a class=\"id\" href=\"#__gcwq\">__gcwq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = (void *)<a class=\"id\" href=\"#__gcwq\">__gcwq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#too_many_workers\">too_many_workers</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#expires\">expires</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* idle_list is kept in LIFO order, check the last one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#idle_list\">idle_list</a>.<a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#worker\">worker</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#last_active\">last_active</a> + <a class=\"id\" href=\"#IDLE_WORKER_TIMEOUT\">IDLE_WORKER_TIMEOUT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#expires\">expires</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#idle_timer\">idle_timer</a>, <a class=\"id\" href=\"#expires\">expires</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* it's been idle for too long, wake up manager */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#GCWQ_MANAGE_WORKERS\">GCWQ_MANAGE_WORKERS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_worker\">wake_up_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#send_mayday\">send_mayday</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#cwq\">cwq</a> = <a class=\"id\" href=\"#get_work_cwq\">get_work_cwq</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a> = <a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#wq\">wq</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_RESCUER\">WQ_RESCUER</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* mayday mayday mayday */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* WORK_CPU_UNBOUND can't be set in cpumask, use cpu 0 instead */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#WORK_CPU_UNBOUND\">WORK_CPU_UNBOUND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mayday_test_and_set_cpu\">mayday_test_and_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#mayday_mask\">mayday_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#rescuer\">rescuer</a>-><a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#gcwq_mayday_timeout\">gcwq_mayday_timeout</a>(unsigned long <a class=\"id\" href=\"#__gcwq\">__gcwq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = (void *)<a class=\"id\" href=\"#__gcwq\">__gcwq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_to_create_worker\">need_to_create_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We've been trying to create a new worker but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * haven't been successful.  We might be hitting an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allocation deadlock.  Send distress signals to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * rescuers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#work\">work</a>, &amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#worklist\">worklist</a>, <a class=\"id\" href=\"#entry\">entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_mayday\">send_mayday</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#mayday_timer\">mayday_timer</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#MAYDAY_INTERVAL\">MAYDAY_INTERVAL</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * maybe_create_worker - create a new worker if necessary</span>", 
"<span class=\"comment\"> * @gcwq: gcwq to create a new worker for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Create a new worker for @gcwq if necessary.  @gcwq is guaranteed to</span>", 
"<span class=\"comment\"> * have at least one idle worker on return from this function.  If</span>", 
"<span class=\"comment\"> * creating a new worker takes longer than MAYDAY_INTERVAL, mayday is</span>", 
"<span class=\"comment\"> * sent to all rescuers with works scheduled on @gcwq to resolve</span>", 
"<span class=\"comment\"> * possible allocation deadlock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On return, need_to_create_worker() is guaranteed to be false and</span>", 
"<span class=\"comment\"> * may_start_working() true.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock) which may be released and regrabbed</span>", 
"<span class=\"comment\"> * multiple times.  Does GFP_KERNEL allocations.  Called only from</span>", 
"<span class=\"comment\"> * manager.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * false if no action was taken and gcwq-&gt;lock stayed locked, true</span>", 
"<span class=\"comment\"> * otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#maybe_create_worker\">maybe_create_worker</a>(struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>)", 
"<a class=\"id\" href=\"#__releases\">__releases</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"<a class=\"id\" href=\"#__acquires\">__acquires</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#need_to_create_worker\">need_to_create_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if we don't make progress in MAYDAY_INITIAL_TIMEOUT, call for help */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#mayday_timer\">mayday_timer</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#MAYDAY_INITIAL_TIMEOUT\">MAYDAY_INITIAL_TIMEOUT</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#true\">true</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a> = <a class=\"id\" href=\"#create_worker\">create_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#worker\">worker</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#del_timer_sync\">del_timer_sync</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#mayday_timer\">mayday_timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_worker\">start_worker</a>(<a class=\"id\" href=\"#worker\">worker</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#need_to_create_worker\">need_to_create_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#need_to_create_worker\">need_to_create_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(<a class=\"id\" href=\"#CREATE_COOLDOWN\">CREATE_COOLDOWN</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#need_to_create_worker\">need_to_create_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_timer_sync\">del_timer_sync</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#mayday_timer\">mayday_timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_to_create_worker\">need_to_create_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * maybe_destroy_worker - destroy workers which have been idle for a while</span>", 
"<span class=\"comment\"> * @gcwq: gcwq to destroy workers for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Destroy @gcwq workers which have been idle for longer than</span>", 
"<span class=\"comment\"> * IDLE_WORKER_TIMEOUT.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock) which may be released and regrabbed</span>", 
"<span class=\"comment\"> * multiple times.  Called only from manager.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * false if no action was taken and gcwq-&gt;lock stayed locked, true</span>", 
"<span class=\"comment\"> * otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#maybe_destroy_workers\">maybe_destroy_workers</a>(struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#too_many_workers\">too_many_workers</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#expires\">expires</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#idle_list\">idle_list</a>.<a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#worker\">worker</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#last_active\">last_active</a> + <a class=\"id\" href=\"#IDLE_WORKER_TIMEOUT\">IDLE_WORKER_TIMEOUT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#expires\">expires</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#idle_timer\">idle_timer</a>, <a class=\"id\" href=\"#expires\">expires</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#destroy_worker\">destroy_worker</a>(<a class=\"id\" href=\"#worker\">worker</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * manage_workers - manage worker pool</span>", 
"<span class=\"comment\"> * @worker: self</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Assume the manager role and manage gcwq worker pool @worker belongs</span>", 
"<span class=\"comment\"> * to.  At any given time, there can be only zero or one manager per</span>", 
"<span class=\"comment\"> * gcwq.  The exclusion is handled automatically by this function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller can safely start processing works on false return.  On</span>", 
"<span class=\"comment\"> * true return, it's guaranteed that need_to_create_worker() is false</span>", 
"<span class=\"comment\"> * and may_start_working() is true.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock) which may be released and regrabbed</span>", 
"<span class=\"comment\"> * multiple times.  Does GFP_KERNEL allocations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * false if no action was taken and gcwq-&gt;lock stayed locked, true if</span>", 
"<span class=\"comment\"> * some action was taken.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#manage_workers\">manage_workers</a>(struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GCWQ_MANAGING_WORKERS\">GCWQ_MANAGING_WORKERS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#GCWQ_MANAGE_WORKERS\">GCWQ_MANAGE_WORKERS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#GCWQ_MANAGING_WORKERS\">GCWQ_MANAGING_WORKERS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Destroy and then create so that may_start_working() is true</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on return.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> |= <a class=\"id\" href=\"#maybe_destroy_workers\">maybe_destroy_workers</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> |= <a class=\"id\" href=\"#maybe_create_worker\">maybe_create_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#GCWQ_MANAGING_WORKERS\">GCWQ_MANAGING_WORKERS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The trustee might be waiting to take over the manager</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * position, tell it we're done.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee\">trustee</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_all\">wake_up_all</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_wait\">trustee_wait</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * move_linked_works - move linked works to a list</span>", 
"<span class=\"comment\"> * @work: start of series of works to be scheduled</span>", 
"<span class=\"comment\"> * @head: target list to append @work to</span>", 
"<span class=\"comment\"> * @nextp: out paramter for nested worklist walking</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Schedule linked works starting from @work to @head.  Work series to</span>", 
"<span class=\"comment\"> * be scheduled starts at @work and includes any consecutive work with</span>", 
"<span class=\"comment\"> * WORK_STRUCT_LINKED set in its predecessor.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @nextp is not NULL, it's updated to point to the next work of</span>", 
"<span class=\"comment\"> * the last scheduled work.  This allows move_linked_works() to be</span>", 
"<span class=\"comment\"> * nested inside outer list_for_each_entry_safe().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock).</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#move_linked_works\">move_linked_works</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#work_struct\">work_struct</a> **<a class=\"id\" href=\"#nextp\">nextp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Linked worklist will always end before the end of the list,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * use NULL for list head.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe_from\">list_for_each_entry_safe_from</a>(<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(*<a class=\"id\" href=\"#work_data_bits\">work_data_bits</a>(<a class=\"id\" href=\"#work\">work</a>) &amp; <a class=\"id\" href=\"#WORK_STRUCT_LINKED\">WORK_STRUCT_LINKED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we're already inside safe list traversal and have moved</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * multiple works to the scheduled queue, the next position</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * needs to be updated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nextp\">nextp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nextp\">nextp</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cwq_activate_first_delayed\">cwq_activate_first_delayed</a>(struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#cwq\">cwq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#delayed_works\">delayed_works</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#work_struct\">work_struct</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#gcwq_determine_ins_pos\">gcwq_determine_ins_pos</a>(<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#gcwq\">gcwq</a>, <a class=\"id\" href=\"#cwq\">cwq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#move_linked_works\">move_linked_works</a>(<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#WORK_STRUCT_DELAYED_BIT\">WORK_STRUCT_DELAYED_BIT</a>, <a class=\"id\" href=\"#work_data_bits\">work_data_bits</a>(<a class=\"id\" href=\"#work\">work</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#nr_active\">nr_active</a>++;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cwq_dec_nr_in_flight - decrement cwq's nr_in_flight</span>", 
"<span class=\"comment\"> * @cwq: cwq of interest</span>", 
"<span class=\"comment\"> * @color: color of work which left the queue</span>", 
"<span class=\"comment\"> * @delayed: for a delayed work</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A work either has completed or is removed from pending queue,</span>", 
"<span class=\"comment\"> * decrement nr_in_flight of its cwq and handle workqueue flushing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock).</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cwq_dec_nr_in_flight\">cwq_dec_nr_in_flight</a>(struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#cwq\">cwq</a>, int <a class=\"id\" href=\"#color\">color</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#delayed\">delayed</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* ignore uncolored works */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#color\">color</a> == <a class=\"id\" href=\"#WORK_NO_COLOR\">WORK_NO_COLOR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#nr_in_flight\">nr_in_flight</a>[<a class=\"id\" href=\"#color\">color</a>]--;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#delayed\">delayed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#nr_active\">nr_active</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#delayed_works\">delayed_works</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* one down, submit a delayed one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#nr_active\">nr_active</a> &lt; <a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#max_active\">max_active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cwq_activate_first_delayed\">cwq_activate_first_delayed</a>(<a class=\"id\" href=\"#cwq\">cwq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* is flush in progress and are we at the flushing tip? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a> != <a class=\"id\" href=\"#color\">color</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* are there still in-flight works? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#nr_in_flight\">nr_in_flight</a>[<a class=\"id\" href=\"#color\">color</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* this cwq is done, clear flush_color */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a> = -1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this was the last cwq, wake up the first flusher.  It</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will handle the rest.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#nr_cwqs_to_flush\">nr_cwqs_to_flush</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#first_flusher\">first_flusher</a>-><a class=\"id\" href=\"#done\">done</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * process_one_work - process single work</span>", 
"<span class=\"comment\"> * @worker: self</span>", 
"<span class=\"comment\"> * @work: work to process</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Process @work.  This function contains all the logics necessary to</span>", 
"<span class=\"comment\"> * process a single work including synchronization against and</span>", 
"<span class=\"comment\"> * interaction with other workers on the same cpu, queueing and</span>", 
"<span class=\"comment\"> * flushing.  As long as context requirement is met, any worker can</span>", 
"<span class=\"comment\"> * call this function to process a work.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock) which is released and regrabbed.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#process_one_work\">process_one_work</a>(struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a>, struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"<a class=\"id\" href=\"#__releases\">__releases</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"<a class=\"id\" href=\"#__acquires\">__acquires</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#cwq\">cwq</a> = <a class=\"id\" href=\"#get_work_cwq\">get_work_cwq</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#bwh\">bwh</a> = <a class=\"id\" href=\"#busy_worker_head\">busy_worker_head</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#cpu_intensive\">cpu_intensive</a> = <a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_CPU_INTENSIVE\">WQ_CPU_INTENSIVE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#work_func_t\">work_func_t</a> <a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#func\">func</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#work_color\">work_color</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#collision\">collision</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKDEP\">CONFIG_LOCKDEP</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is permissible to free the struct work_struct from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inside the function that is called from it, this we need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * take into account for lockdep too.  To avoid bogus \"held</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lock freed\" warnings as well as problems when looking into</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * work-&gt;lockdep_map, make a copy and use that here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> = <a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A single work shouldn't be executed concurrently by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * multiple workers on a single cpu.  Check whether anyone is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * already processing the work.  If so, defer the work to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * currently executing one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#collision\">collision</a> = <a class=\"id\" href=\"#__find_worker_executing_work\">__find_worker_executing_work</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>, <a class=\"id\" href=\"#bwh\">bwh</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#collision\">collision</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#move_linked_works\">move_linked_works</a>(<a class=\"id\" href=\"#work\">work</a>, &amp;<a class=\"id\" href=\"#collision\">collision</a>-><a class=\"id\" href=\"#scheduled\">scheduled</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* claim and process */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_work_deactivate\">debug_work_deactivate</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#hentry\">hentry</a>, <a class=\"id\" href=\"#bwh\">bwh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#current_work\">current_work</a> = <a class=\"id\" href=\"#work\">work</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#current_cwq\">current_cwq</a> = <a class=\"id\" href=\"#cwq\">cwq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#work_color\">work_color</a> = <a class=\"id\" href=\"#get_work_color\">get_work_color</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* record the current cpu number in the work data and dequeue */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_work_cpu\">set_work_cpu</a>(<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If HIGHPRI_PENDING, check the next work, and, if HIGHPRI,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wake up another worker; otherwise, clear HIGHPRI_PENDING.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
];
xr_frag_insert('l/2e/cff4312fdcf09932cb4d0dc50f26434b30ca7a.xr', __xr_tmp);
