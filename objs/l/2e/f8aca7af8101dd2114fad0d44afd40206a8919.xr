var __xr_tmp = [
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Yes, this forcably breaks the klist abstraction temporarily.  It</span>", 
"<span class=\"comment\"> * just wants to sort the klist, not change reference counts and</span>", 
"<span class=\"comment\"> * take/drop locks rapidly in the process.  It does all this while</span>", 
"<span class=\"comment\"> * holding the lock for the list, so objects can't otherwise be</span>", 
"<span class=\"comment\"> * added/removed while we're swizzling.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#device_insertion_sort_klist\">device_insertion_sort_klist</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#compare\">compare</a>)(const struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#a\">a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#b\">b</a>))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_private\">device_private</a> *<a class=\"id\" href=\"#dev_prv\">dev_prv</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#b\">b</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each\">list_for_each</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#pos\">pos</a>, struct <a class=\"id\" href=\"#klist_node\">klist_node</a>, <a class=\"id\" href=\"#n_node\">n_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_prv\">dev_prv</a> = <a class=\"id\" href=\"#to_device_private_bus\">to_device_private_bus</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#dev_prv\">dev_prv</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#compare\">compare</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>) <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#knode_bus\">knode_bus</a>.<a class=\"id\" href=\"#n_node\">n_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#knode_bus\">knode_bus</a>.<a class=\"id\" href=\"#n_node\">n_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#knode_bus\">knode_bus</a>.<a class=\"id\" href=\"#n_node\">n_node</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#bus_sort_breadthfirst\">bus_sort_breadthfirst</a>(struct <a class=\"id\" href=\"#bus_type\">bus_type</a> *<a class=\"id\" href=\"#bus\">bus</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int (*<a class=\"id\" href=\"#compare\">compare</a>)(const struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#a\">a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#b\">b</a>))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#sorted_devices\">sorted_devices</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pos\">pos</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_private\">device_private</a> *<a class=\"id\" href=\"#dev_prv\">dev_prv</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#klist\">klist</a> *<a class=\"id\" href=\"#device_klist\">device_klist</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_klist\">device_klist</a> = <a class=\"id\" href=\"#bus_get_device_klist\">bus_get_device_klist</a>(<a class=\"id\" href=\"#bus\">bus</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#device_klist\">device_klist</a>-><a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_safe\">list_for_each_safe</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#device_klist\">device_klist</a>-><a class=\"id\" href=\"#k_list\">k_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#pos\">pos</a>, struct <a class=\"id\" href=\"#klist_node\">klist_node</a>, <a class=\"id\" href=\"#n_node\">n_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_prv\">dev_prv</a> = <a class=\"id\" href=\"#to_device_private_bus\">to_device_private_bus</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev_prv\">dev_prv</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_insertion_sort_klist\">device_insertion_sort_klist</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#sorted_devices\">sorted_devices</a>, <a class=\"id\" href=\"#compare\">compare</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_splice\">list_splice</a>(&amp;<a class=\"id\" href=\"#sorted_devices\">sorted_devices</a>, &amp;<a class=\"id\" href=\"#device_klist\">device_klist</a>-><a class=\"id\" href=\"#k_list\">k_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#device_klist\">device_klist</a>-><a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#bus_sort_breadthfirst\">bus_sort_breadthfirst</a>);", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#buses_init\">buses_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus_kset\">bus_kset</a> = <a class=\"id\" href=\"#kset_create_and_add\">kset_create_and_add</a>(\"bus\", &amp;<a class=\"id\" href=\"#bus_uevent_ops\">bus_uevent_ops</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bus_kset\">bus_kset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/2e/f8aca7af8101dd2114fad0d44afd40206a8919.xr', __xr_tmp);
