var __xr_tmp = [
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct usb_interface - what usb device drivers talk to</span>", 
"<span class=\"comment\"> * @altsetting: array of interface structures, one for each alternate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>setting that may be selected.  Each one includes a set of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>endpoint configurations.  They will be in no particular order.</span>", 
"<span class=\"comment\"> * @cur_altsetting: the current altsetting.</span>", 
"<span class=\"comment\"> * @num_altsetting: number of altsettings defined.</span>", 
"<span class=\"comment\"> * @intf_assoc: interface association descriptor</span>", 
"<span class=\"comment\"> * @minor: the minor number assigned to this interface, if this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interface is bound to a driver that uses the USB major number.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If this interface does not use the USB major, this field should</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be unused.  The driver should set this value in the probe()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>function of the driver, after it has been assigned a minor</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>number from the USB core by calling usb_register_dev().</span>", 
"<span class=\"comment\"> * @condition: binding state of the interface: not bound, binding</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(in probe()), bound to a driver, or unbinding (in disconnect())</span>", 
"<span class=\"comment\"> * @sysfs_files_created: sysfs attributes exist</span>", 
"<span class=\"comment\"> * @ep_devs_created: endpoint child pseudo-devices exist</span>", 
"<span class=\"comment\"> * @unregistering: flag set when the interface is being unregistered</span>", 
"<span class=\"comment\"> * @needs_remote_wakeup: flag set when the driver requires remote-wakeup</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>capability during autosuspend.</span>", 
"<span class=\"comment\"> * @needs_altsetting0: flag set when a set-interface request for altsetting 0</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>has been deferred.</span>", 
"<span class=\"comment\"> * @needs_binding: flag set when the driver should be re-probed or unbound</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>following a reset or suspend operation it doesn't support.</span>", 
"<span class=\"comment\"> * @dev: driver model's view of this device</span>", 
"<span class=\"comment\"> * @usb_dev: if an interface is bound to the USB major, this will point</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to the sysfs representation for that device.</span>", 
"<span class=\"comment\"> * @pm_usage_cnt: PM usage counter for this interface</span>", 
"<span class=\"comment\"> * @reset_ws: Used for scheduling resets from atomic context.</span>", 
"<span class=\"comment\"> * @reset_running: set to 1 if the interface is currently running a</span>", 
"<span class=\"comment\"> *      queued reset so that usb_cancel_queued_reset() doesn't try to</span>", 
"<span class=\"comment\"> *      remove from the workqueue when running inside the worker</span>", 
"<span class=\"comment\"> *      thread. See __usb_queue_reset_device().</span>", 
"<span class=\"comment\"> * @resetting_device: USB core reset the device, so use alt setting 0 as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>current; needs bandwidth alloc after reset.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * USB device drivers attach to interfaces on a physical device.  Each</span>", 
"<span class=\"comment\"> * interface encapsulates a single high level function, such as feeding</span>", 
"<span class=\"comment\"> * an audio stream to a speaker or reporting a change in a volume control.</span>", 
"<span class=\"comment\"> * Many USB devices only have one interface.  The protocol used to talk to</span>", 
"<span class=\"comment\"> * an interface's endpoints can be defined in a usb \"class\" specification,</span>", 
"<span class=\"comment\"> * or by a product's vendor.  The (default) control endpoint is part of</span>", 
"<span class=\"comment\"> * every interface, but is never listed among the interface's descriptors.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The driver that is bound to the interface can use standard driver model</span>", 
"<span class=\"comment\"> * calls such as dev_get_drvdata() on the dev member of this structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Each interface may have alternate settings.  The initial configuration</span>", 
"<span class=\"comment\"> * of a device sets altsetting 0, but the device driver can change</span>", 
"<span class=\"comment\"> * that setting using usb_set_interface().  Alternate settings are often</span>", 
"<span class=\"comment\"> * used to control the use of periodic endpoints, such as by having</span>", 
"<span class=\"comment\"> * different endpoints use different amounts of reserved USB bandwidth.</span>", 
"<span class=\"comment\"> * All standards-conformant USB devices that use isochronous endpoints</span>", 
"<span class=\"comment\"> * will use them in non-default settings.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The USB specification says that alternate setting numbers must run from</span>", 
"<span class=\"comment\"> * 0 to one less than the total number of alternate settings.  But some</span>", 
"<span class=\"comment\"> * devices manage to mess this up, and the structures aren't necessarily</span>", 
"<span class=\"comment\"> * stored in numerical order anyhow.  Use usb_altnum_to_altsetting() to</span>", 
"<span class=\"comment\"> * look up an alternate setting in the altsetting array based on its number.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* array of alternate settings for this interface,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stored in no particular order */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_host_interface\">usb_host_interface</a> *<a class=\"id\" href=\"#altsetting\">altsetting</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_host_interface\">usb_host_interface</a> *<a class=\"id\" href=\"#cur_altsetting\">cur_altsetting</a>;<span class=\"ts\"/><span class=\"comment\">/* the currently</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * active alternate setting */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#num_altsetting\">num_altsetting</a>;<span class=\"ts\"/><span class=\"comment\">/* number of alternate settings */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If there is an interface association descriptor then it will list</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the associated interfaces */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_interface_assoc_descriptor\">usb_interface_assoc_descriptor</a> *<a class=\"id\" href=\"#intf_assoc\">intf_assoc</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#minor\">minor</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* minor number this interface is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * bound to */</span>", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#usb_interface_condition\">usb_interface_condition</a> <a class=\"id\" href=\"#condition\">condition</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* state of binding */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#sysfs_files_created\">sysfs_files_created</a>:1;<span class=\"ts\"/><span class=\"comment\">/* the sysfs attributes exist */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#ep_devs_created\">ep_devs_created</a>:1;<span class=\"ts\"/><span class=\"comment\">/* endpoint \"devices\" exist */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#unregistering\">unregistering</a>:1;<span class=\"ts\"/><span class=\"comment\">/* unregistration is in progress */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#needs_remote_wakeup\">needs_remote_wakeup</a>:1;<span class=\"ts\"/><span class=\"comment\">/* driver requires remote wakeup */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#needs_altsetting0\">needs_altsetting0</a>:1;<span class=\"ts\"/><span class=\"comment\">/* switch to altsetting 0 is pending */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#needs_binding\">needs_binding</a>:1;<span class=\"ts\"/><span class=\"comment\">/* needs delayed unbind/rebind */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#reset_running\">reset_running</a>:1;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#resetting_device\">resetting_device</a>:1;<span class=\"ts\"/><span class=\"comment\">/* true: bandwidth alloc after reset */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> <a class=\"id\" href=\"#dev\">dev</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* interface specific device info */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#usb_dev\">usb_dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#pm_usage_cnt\">pm_usage_cnt</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* usage counter for autosuspend */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> <a class=\"id\" href=\"#reset_ws\">reset_ws</a>;<span class=\"ts\"/><span class=\"comment\">/* for resets in atomic context */</span>", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#to_usb_interface\">to_usb_interface</a>(<a class=\"id\" href=\"#d\">d</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#d\">d</a>, struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a>, <a class=\"id\" href=\"#dev\">dev</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#usb_get_intfdata\">usb_get_intfdata</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(&amp;<a class=\"id\" href=\"#intf\">intf</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#usb_set_intfdata\">usb_set_intfdata</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_drvdata\">dev_set_drvdata</a>(&amp;<a class=\"id\" href=\"#intf\">intf</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#usb_get_intf\">usb_get_intf</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>);", 
"void <a class=\"id\" href=\"#usb_put_intf\">usb_put_intf</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>);", 
"", 
"<span class=\"comment\">/* this maximum is arbitrary */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_MAXINTERFACES\">USB_MAXINTERFACES</a><span class=\"ts\"/>32", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_MAXIADS\">USB_MAXIADS</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#USB_MAXINTERFACES\">USB_MAXINTERFACES</a>/2)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct usb_interface_cache - long-term representation of a device interface</span>", 
"<span class=\"comment\"> * @num_altsetting: number of altsettings defined.</span>", 
"<span class=\"comment\"> * @ref: reference counter.</span>", 
"<span class=\"comment\"> * @altsetting: variable-length array of interface structures, one for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>each alternate setting that may be selected.  Each one includes a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>set of endpoint configurations.  They will be in no particular order.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These structures persist for the lifetime of a usb_device, unlike</span>", 
"<span class=\"comment\"> * struct usb_interface (which persists only as long as its configuration</span>", 
"<span class=\"comment\"> * is installed).  The altsetting arrays can be accessed through these</span>", 
"<span class=\"comment\"> * structures at any time, permitting comparison of configurations and</span>", 
"<span class=\"comment\"> * providing support for the /proc/bus/usb/devices pseudo-file.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#usb_interface_cache\">usb_interface_cache</a> {", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#num_altsetting\">num_altsetting</a>;<span class=\"ts\"/><span class=\"comment\">/* number of alternate settings */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kref\">kref</a> <a class=\"id\" href=\"#ref\">ref</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* reference counter */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* variable-length array of alternate settings for this interface,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stored in no particular order */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_host_interface\">usb_host_interface</a> <a class=\"id\" href=\"#altsetting\">altsetting</a>[0];", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#ref_to_usb_interface_cache\">ref_to_usb_interface_cache</a>(<a class=\"id\" href=\"#r\">r</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#r\">r</a>, struct <a class=\"id\" href=\"#usb_interface_cache\">usb_interface_cache</a>, <a class=\"id\" href=\"#ref\">ref</a>)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#altsetting_to_usb_interface_cache\">altsetting_to_usb_interface_cache</a>(<a class=\"id\" href=\"#a\">a</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#usb_interface_cache\">usb_interface_cache</a>, <a class=\"id\" href=\"#altsetting\">altsetting</a>[0])", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct usb_host_config - representation of a device's configuration</span>", 
"<span class=\"comment\"> * @desc: the device's configuration descriptor.</span>", 
"<span class=\"comment\"> * @string: pointer to the cached version of the iConfiguration string, if</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>present for this configuration.</span>", 
"<span class=\"comment\"> * @intf_assoc: list of any interface association descriptors in this config</span>", 
"<span class=\"comment\"> * @interface: array of pointers to usb_interface structures, one for each</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interface in the configuration.  The number of interfaces is stored</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in desc.bNumInterfaces.  These pointers are valid only while the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the configuration is active.</span>", 
"<span class=\"comment\"> * @intf_cache: array of pointers to usb_interface_cache structures, one</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for each interface in the configuration.  These structures exist</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for the entire life of the device.</span>", 
"<span class=\"comment\"> * @extra: pointer to buffer containing all extra descriptors associated</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>with this configuration (those preceding the first interface</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>descriptor).</span>", 
"<span class=\"comment\"> * @extralen: length of the extra descriptors buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * USB devices may have multiple configurations, but only one can be active</span>", 
"<span class=\"comment\"> * at any time.  Each encapsulates a different operational environment;</span>", 
"<span class=\"comment\"> * for example, a dual-speed device would have separate configurations for</span>", 
"<span class=\"comment\"> * full-speed and high-speed operation.  The number of configurations</span>", 
"<span class=\"comment\"> * available is stored in the device descriptor as bNumConfigurations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A configuration can contain multiple interfaces.  Each corresponds to</span>", 
"<span class=\"comment\"> * a different function of the USB device, and all are available whenever</span>", 
"<span class=\"comment\"> * the configuration is active.  The USB standard says that interfaces</span>", 
"<span class=\"comment\"> * are supposed to be numbered from 0 to desc.bNumInterfaces-1, but a lot</span>", 
"<span class=\"comment\"> * of devices get this wrong.  In addition, the interface array is not</span>", 
"<span class=\"comment\"> * guaranteed to be sorted in numerical order.  Use usb_ifnum_to_if() to</span>", 
"<span class=\"comment\"> * look up an interface entry based on its number.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Device drivers should not attempt to activate configurations.  The choice</span>", 
"<span class=\"comment\"> * of which configuration to install is a policy decision based on such</span>", 
"<span class=\"comment\"> * considerations as available power, functionality provided, and the user's</span>", 
"<span class=\"comment\"> * desires (expressed through userspace tools).  However, drivers can call</span>", 
"<span class=\"comment\"> * usb_reset_configuration() to reinitialize the current configuration and</span>", 
"<span class=\"comment\"> * all its interfaces.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#usb_host_config\">usb_host_config</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_config_descriptor\">usb_config_descriptor</a><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>;", 
"", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#string\">string</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* iConfiguration string, if present */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* List of any Interface Association Descriptors in this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * configuration. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_interface_assoc_descriptor\">usb_interface_assoc_descriptor</a> *<a class=\"id\" href=\"#intf_assoc\">intf_assoc</a>[<a class=\"id\" href=\"#USB_MAXIADS\">USB_MAXIADS</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the interfaces associated with this configuration,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stored in no particular order */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#interface\">interface</a>[<a class=\"id\" href=\"#USB_MAXINTERFACES\">USB_MAXINTERFACES</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Interface information available even when this is not the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * active configuration */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_interface_cache\">usb_interface_cache</a> *<a class=\"id\" href=\"#intf_cache\">intf_cache</a>[<a class=\"id\" href=\"#USB_MAXINTERFACES\">USB_MAXINTERFACES</a>];", 
"", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#extra\">extra</a>;   <span class=\"comment\">/* Extra descriptors */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#extralen\">extralen</a>;", 
"};", 
"", 
"int <a class=\"id\" href=\"#__usb_get_extra_descriptor\">__usb_get_extra_descriptor</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, unsigned <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#type\">type</a>, void **<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_get_extra_descriptor\">usb_get_extra_descriptor</a>(<a class=\"id\" href=\"#ifpoint\">ifpoint</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#ptr\">ptr</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__usb_get_extra_descriptor\">__usb_get_extra_descriptor</a>((<a class=\"id\" href=\"#ifpoint\">ifpoint</a>)-><a class=\"id\" href=\"#extra\">extra</a>, \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ifpoint\">ifpoint</a>)-><a class=\"id\" href=\"#extralen\">extralen</a>, \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>, (void **)<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"", 
"<span class=\"comment\">/* ----------------------------------------------------------------------- */</span>", 
"", 
"<span class=\"comment\">/* USB device number allocation bitmap */</span>", 
"struct <a class=\"id\" href=\"#usb_devmap\">usb_devmap</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#devicemap\">devicemap</a>[128 / (8*sizeof(unsigned long))];", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocated per bus (tree of devices) we have:</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#usb_bus\">usb_bus</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#controller\">controller</a>;<span class=\"ts\"/><span class=\"comment\">/* host/master side hardware */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#busnum\">busnum</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Bus number (in order of reg) */</span>", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#bus_name\">bus_name</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* stable id (PCI slot_name etc) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#uses_dma\">uses_dma</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Does the host controller use DMA? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#otg_port\">otg_port</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0, or number of OTG/HNP port */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#is_b_host\">is_b_host</a>:1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* true during some HNP roleswitches */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#b_hnp_enable\">b_hnp_enable</a>:1;<span class=\"ts\"/><span class=\"comment\">/* OTG: did A-Host enable HNP? */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#sg_tablesize\">sg_tablesize</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0 or largest number of sg list entries */</span>", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#devnum_next\">devnum_next</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Next open device number in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * round-robin allocation */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_devmap\">usb_devmap</a> <a class=\"id\" href=\"#devmap\">devmap</a>;<span class=\"ts\"/><span class=\"comment\">/* device address allocation map */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#root_hub\">root_hub</a>;<span class=\"ts\"/><span class=\"comment\">/* Root hub */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_bus\">usb_bus</a> *<a class=\"id\" href=\"#hs_companion\">hs_companion</a>;<span class=\"ts\"/><span class=\"comment\">/* Companion EHCI bus, if any */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#bus_list\">bus_list</a>;<span class=\"ts\"/><span class=\"comment\">/* list of busses */</span>", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bandwidth_allocated\">bandwidth_allocated</a>;<span class=\"ts\"/><span class=\"comment\">/* on this bus: how much of the time</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * reserved for periodic (intr/iso)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * requests is used, on average?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Units: microseconds/frame.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Limits: Full/low speed reserve 90%,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * while high speed reserves 80%.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bandwidth_int_reqs\">bandwidth_int_reqs</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* number of Interrupt requests */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bandwidth_isoc_reqs\">bandwidth_isoc_reqs</a>;<span class=\"ts\"/><span class=\"comment\">/* number of Isoc. requests */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_USB_DEVICEFS\">CONFIG_USB_DEVICEFS</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#usbfs_dentry\">usbfs_dentry</a>;<span class=\"ts\"/><span class=\"comment\">/* usbfs dentry entry for the bus */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_USB_MON\">CONFIG_USB_MON</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_USB_MON_MODULE\">CONFIG_USB_MON_MODULE</a>)", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mon_bus\">mon_bus</a> *<a class=\"id\" href=\"#mon_bus\">mon_bus</a>;<span class=\"ts\"/><span class=\"comment\">/* non-null when associated */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#monitored\">monitored</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* non-zero when monitored */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"<span class=\"comment\">/* ----------------------------------------------------------------------- */</span>", 
"", 
"<span class=\"comment\">/* This is arbitrary.</span>", 
"<span class=\"comment\"> * From USB 2.0 spec Table 11-13, offset 7, a hub can</span>", 
"<span class=\"comment\"> * have up to 255 ports. The most yet reported is 10.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Current Wireless USB host hardware (Intel i1480 for example) allows</span>", 
"<span class=\"comment\"> * up to 22 devices to connect. Upcoming hardware might raise that</span>", 
"<span class=\"comment\"> * limit. Because the arrays need to add a bit for hub status data, we</span>", 
"<span class=\"comment\"> * do 31, so plus one evens out to four bytes.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_MAXCHILDREN\">USB_MAXCHILDREN</a><span class=\"ts\"/><span class=\"ts\"/>(31)", 
"", 
"struct <a class=\"id\" href=\"#usb_tt\">usb_tt</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct usb_device - kernel's representation of a USB device</span>", 
"<span class=\"comment\"> * @devnum: device number; address on a USB bus</span>", 
"<span class=\"comment\"> * @devpath: device ID string for use in messages (e.g., /port/...)</span>", 
"<span class=\"comment\"> * @route: tree topology hex string for use with xHCI</span>", 
"<span class=\"comment\"> * @state: device state: configured, not attached, etc.</span>", 
"<span class=\"comment\"> * @speed: device speed: high/full/low (or error)</span>", 
"<span class=\"comment\"> * @tt: Transaction Translator info; used with low/full speed dev, highspeed hub</span>", 
"<span class=\"comment\"> * @ttport: device port on that tt hub</span>", 
"<span class=\"comment\"> * @toggle: one bit for each endpoint, with ([0] = IN, [1] = OUT) endpoints</span>", 
"<span class=\"comment\"> * @parent: our hub, unless we're the root</span>", 
"<span class=\"comment\"> * @bus: bus we're part of</span>", 
"<span class=\"comment\"> * @ep0: endpoint 0 data (default control pipe)</span>", 
"<span class=\"comment\"> * @dev: generic device interface</span>", 
"<span class=\"comment\"> * @descriptor: USB device descriptor</span>", 
"<span class=\"comment\"> * @config: all of the device's configs</span>", 
"<span class=\"comment\"> * @actconfig: the active configuration</span>", 
"<span class=\"comment\"> * @ep_in: array of IN endpoints</span>", 
"<span class=\"comment\"> * @ep_out: array of OUT endpoints</span>", 
"<span class=\"comment\"> * @rawdescriptors: raw descriptors for each config</span>", 
"<span class=\"comment\"> * @bus_mA: Current available from the bus</span>", 
"<span class=\"comment\"> * @portnum: parent port number (origin 1)</span>", 
"<span class=\"comment\"> * @level: number of USB hub ancestors</span>", 
"<span class=\"comment\"> * @can_submit: URBs may be submitted</span>", 
"<span class=\"comment\"> * @persist_enabled:  USB_PERSIST enabled for this device</span>", 
"<span class=\"comment\"> * @have_langid: whether string_langid is valid</span>", 
"<span class=\"comment\"> * @authorized: policy has said we can use it;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(user space) policy determines if we authorize this device to be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>used or not. By default, wired USB devices are authorized.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>WUSB devices are not, until we authorize them from user space.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>FIXME -- complete doc</span>", 
"<span class=\"comment\"> * @authenticated: Crypto authentication passed</span>", 
"<span class=\"comment\"> * @wusb: device is Wireless USB</span>", 
"<span class=\"comment\"> * @string_langid: language ID for strings</span>", 
"<span class=\"comment\"> * @product: iProduct string, if present (static)</span>", 
"<span class=\"comment\"> * @manufacturer: iManufacturer string, if present (static)</span>", 
"<span class=\"comment\"> * @serial: iSerialNumber string, if present (static)</span>", 
"<span class=\"comment\"> * @filelist: usbfs files that are open to this device</span>", 
"<span class=\"comment\"> * @usb_classdev: USB class device that was created for usbfs device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>access from userspace</span>", 
"<span class=\"comment\"> * @usbfs_dentry: usbfs dentry entry for the device</span>", 
"<span class=\"comment\"> * @maxchild: number of ports if hub</span>", 
"<span class=\"comment\"> * @children: child devices - USB devices that are attached to this hub</span>", 
"<span class=\"comment\"> * @quirks: quirks of the whole device</span>", 
"<span class=\"comment\"> * @urbnum: number of URBs submitted for the whole device</span>", 
"<span class=\"comment\"> * @active_duration: total time device is not suspended</span>", 
"<span class=\"comment\"> * @last_busy: time of last use</span>", 
"<span class=\"comment\"> * @autosuspend_delay: in jiffies</span>", 
"<span class=\"comment\"> * @connect_time: time device was first connected</span>", 
"<span class=\"comment\"> * @do_remote_wakeup:  remote wakeup should be enabled</span>", 
"<span class=\"comment\"> * @reset_resume: needs reset instead of resume</span>", 
"<span class=\"comment\"> * @wusb_dev: if this is a Wireless USB device, link to the WUSB</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>specific data for the device.</span>", 
"<span class=\"comment\"> * @slot_id: Slot ID assigned by xHCI</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> * Usbcore drivers should not set usbdev-&gt;state directly.  Instead use</span>", 
"<span class=\"comment\"> * usb_set_device_state().</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#usb_device\">usb_device</a> {", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devnum\">devnum</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devpath\">devpath</a>[16];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#route\">route</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#usb_device_state\">usb_device_state</a><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#usb_device_speed\">usb_device_speed</a><span class=\"ts\"/><a class=\"id\" href=\"#speed\">speed</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_tt\">usb_tt</a><span class=\"ts\"/>*<a class=\"id\" href=\"#tt\">tt</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ttport\">ttport</a>;", 
"", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#toggle\">toggle</a>[2];", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_bus\">usb_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_host_endpoint\">usb_host_endpoint</a> <a class=\"id\" href=\"#ep0\">ep0</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> <a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_device_descriptor\">usb_device_descriptor</a> <a class=\"id\" href=\"#descriptor\">descriptor</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_host_config\">usb_host_config</a> *<a class=\"id\" href=\"#config\">config</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_host_config\">usb_host_config</a> *<a class=\"id\" href=\"#actconfig\">actconfig</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_host_endpoint\">usb_host_endpoint</a> *<a class=\"id\" href=\"#ep_in\">ep_in</a>[16];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_host_endpoint\">usb_host_endpoint</a> *<a class=\"id\" href=\"#ep_out\">ep_out</a>[16];", 
"", 
"<span class=\"ts\"/>char **<a class=\"id\" href=\"#rawdescriptors\">rawdescriptors</a>;", 
"", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#bus_mA\">bus_mA</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#portnum\">portnum</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#level\">level</a>;", 
"", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#can_submit\">can_submit</a>:1;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#persist_enabled\">persist_enabled</a>:1;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#have_langid\">have_langid</a>:1;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#authorized\">authorized</a>:1;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#authenticated\">authenticated</a>:1;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#wusb\">wusb</a>:1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#string_langid\">string_langid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* static strings from the device */</span>", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#product\">product</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#manufacturer\">manufacturer</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#serial\">serial</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#filelist\">filelist</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_USB_DEVICE_CLASS\">CONFIG_USB_DEVICE_CLASS</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#usb_classdev\">usb_classdev</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_USB_DEVICEFS\">CONFIG_USB_DEVICEFS</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#usbfs_dentry\">usbfs_dentry</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#maxchild\">maxchild</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#children\">children</a>[<a class=\"id\" href=\"#USB_MAXCHILDREN\">USB_MAXCHILDREN</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#quirks\">quirks</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#urbnum\">urbnum</a>;", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#active_duration\">active_duration</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM\">CONFIG_PM</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#last_busy\">last_busy</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#autosuspend_delay\">autosuspend_delay</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#connect_time\">connect_time</a>;", 
"", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#do_remote_wakeup\">do_remote_wakeup</a>:1;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#reset_resume\">reset_resume</a>:1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wusb_dev\">wusb_dev</a> *<a class=\"id\" href=\"#wusb_dev\">wusb_dev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#slot_id\">slot_id</a>;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#to_usb_device\">to_usb_device</a>(<a class=\"id\" href=\"#d\">d</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#d\">d</a>, struct <a class=\"id\" href=\"#usb_device\">usb_device</a>, <a class=\"id\" href=\"#dev\">dev</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#interface_to_usbdev\">interface_to_usbdev</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#to_usb_device\">to_usb_device</a>(<a class=\"id\" href=\"#intf\">intf</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>);", 
"}", 
"", 
"extern struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#usb_get_dev\">usb_get_dev</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"extern void <a class=\"id\" href=\"#usb_put_dev\">usb_put_dev</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"comment\">/* USB device locking */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_lock_device\">usb_lock_device</a>(<a class=\"id\" href=\"#udev\">udev</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_lock\">device_lock</a>(&amp;(<a class=\"id\" href=\"#udev\">udev</a>)-><a class=\"id\" href=\"#dev\">dev</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_unlock_device\">usb_unlock_device</a>(<a class=\"id\" href=\"#udev\">udev</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_unlock\">device_unlock</a>(&amp;(<a class=\"id\" href=\"#udev\">udev</a>)-><a class=\"id\" href=\"#dev\">dev</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#usb_trylock_device\">usb_trylock_device</a>(<a class=\"id\" href=\"#udev\">udev</a>)<span class=\"ts\"/><a class=\"id\" href=\"#device_trylock\">device_trylock</a>(&amp;(<a class=\"id\" href=\"#udev\">udev</a>)-><a class=\"id\" href=\"#dev\">dev</a>)", 
"extern int <a class=\"id\" href=\"#usb_lock_device_for_reset\">usb_lock_device_for_reset</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#udev\">udev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#iface\">iface</a>);", 
"", 
"<span class=\"comment\">/* USB port reset for device reinitialization */</span>", 
"extern int <a class=\"id\" href=\"#usb_reset_device\">usb_reset_device</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"extern void <a class=\"id\" href=\"#usb_queue_reset_device\">usb_queue_reset_device</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"", 
"<span class=\"comment\">/* USB autosuspend and autoresume */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_USB_SUSPEND\">CONFIG_USB_SUSPEND</a>", 
"extern void <a class=\"id\" href=\"#usb_enable_autosuspend\">usb_enable_autosuspend</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#udev\">udev</a>);", 
"extern void <a class=\"id\" href=\"#usb_disable_autosuspend\">usb_disable_autosuspend</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#udev\">udev</a>);", 
"", 
"extern int <a class=\"id\" href=\"#usb_autopm_get_interface\">usb_autopm_get_interface</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>);", 
"extern void <a class=\"id\" href=\"#usb_autopm_put_interface\">usb_autopm_put_interface</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>);", 
"extern int <a class=\"id\" href=\"#usb_autopm_get_interface_async\">usb_autopm_get_interface_async</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>);", 
"extern void <a class=\"id\" href=\"#usb_autopm_put_interface_async\">usb_autopm_put_interface_async</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>);", 
"extern void <a class=\"id\" href=\"#usb_autopm_get_interface_no_resume\">usb_autopm_get_interface_no_resume</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>);", 
"extern void <a class=\"id\" href=\"#usb_autopm_put_interface_no_suspend\">usb_autopm_put_interface_no_suspend</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#usb_mark_last_busy\">usb_mark_last_busy</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#udev\">udev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udev\">udev</a>-><a class=\"id\" href=\"#last_busy\">last_busy</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"}", 
"", 
"#else", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_enable_autosuspend\">usb_enable_autosuspend</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#udev\">udev</a>)", 
"{ return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_disable_autosuspend\">usb_disable_autosuspend</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#udev\">udev</a>)", 
"{ return 0; }", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_autopm_get_interface\">usb_autopm_get_interface</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>)", 
"{ return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_autopm_get_interface_async\">usb_autopm_get_interface_async</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>)", 
"{ return 0; }", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#usb_autopm_put_interface\">usb_autopm_put_interface</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>)", 
"{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#usb_autopm_put_interface_async\">usb_autopm_put_interface_async</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>)", 
"{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#usb_autopm_get_interface_no_resume\">usb_autopm_get_interface_no_resume</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>)", 
"{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#usb_autopm_put_interface_no_suspend\">usb_autopm_put_interface_no_suspend</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>)", 
"{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#usb_mark_last_busy\">usb_mark_last_busy</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#udev\">udev</a>)", 
"{ }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*-------------------------------------------------------------------------*/</span>", 
"", 
"<span class=\"comment\">/* for drivers using iso endpoints */</span>", 
"extern int <a class=\"id\" href=\"#usb_get_current_frame_number\">usb_get_current_frame_number</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#usb_dev\">usb_dev</a>);", 
"", 
"<span class=\"comment\">/* Sets up a group of bulk endpoints to support multiple stream IDs. */</span>", 
"extern int <a class=\"id\" href=\"#usb_alloc_streams\">usb_alloc_streams</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#interface\">interface</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_host_endpoint\">usb_host_endpoint</a> **<a class=\"id\" href=\"#eps\">eps</a>, unsigned int <a class=\"id\" href=\"#num_eps\">num_eps</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_streams\">num_streams</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#mem_flags\">mem_flags</a>);", 
"", 
"<span class=\"comment\">/* Reverts a group of bulk endpoints back to not using stream IDs. */</span>", 
"extern void <a class=\"id\" href=\"#usb_free_streams\">usb_free_streams</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#interface\">interface</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_host_endpoint\">usb_host_endpoint</a> **<a class=\"id\" href=\"#eps\">eps</a>, unsigned int <a class=\"id\" href=\"#num_eps\">num_eps</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#mem_flags\">mem_flags</a>);", 
"", 
"<span class=\"comment\">/* used these for multi-interface device registration */</span>", 
"extern int <a class=\"id\" href=\"#usb_driver_claim_interface\">usb_driver_claim_interface</a>(struct <a class=\"id\" href=\"#usb_driver\">usb_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#iface\">iface</a>, void *<a class=\"id\" href=\"#priv\">priv</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_interface_claimed - returns true iff an interface is claimed</span>", 
"<span class=\"comment\"> * @iface: the interface being checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true (nonzero) iff the interface is claimed, else false (zero).</span>", 
"<span class=\"comment\"> * Callers must own the driver model's usb bus readlock.  So driver</span>", 
"<span class=\"comment\"> * probe() entries don't need extra locking, but other call contexts</span>", 
"<span class=\"comment\"> * may need to explicitly claim that lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_interface_claimed\">usb_interface_claimed</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#iface\">iface</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#driver\">driver</a> != <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#usb_driver_release_interface\">usb_driver_release_interface</a>(struct <a class=\"id\" href=\"#usb_driver\">usb_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#iface\">iface</a>);", 
"const struct <a class=\"id\" href=\"#usb_device_id\">usb_device_id</a> *<a class=\"id\" href=\"#usb_match_id\">usb_match_id</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#interface\">interface</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#usb_device_id\">usb_device_id</a> *<a class=\"id\" href=\"#id\">id</a>);", 
"extern int <a class=\"id\" href=\"#usb_match_one_id\">usb_match_one_id</a>(struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#interface\">interface</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#usb_device_id\">usb_device_id</a> *<a class=\"id\" href=\"#id\">id</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#usb_find_interface\">usb_find_interface</a>(struct <a class=\"id\" href=\"#usb_driver\">usb_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#minor\">minor</a>);", 
"extern struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#usb_ifnum_to_if\">usb_ifnum_to_if</a>(const struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#ifnum\">ifnum</a>);", 
"extern struct <a class=\"id\" href=\"#usb_host_interface\">usb_host_interface</a> *<a class=\"id\" href=\"#usb_altnum_to_altsetting\">usb_altnum_to_altsetting</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#usb_interface\">usb_interface</a> *<a class=\"id\" href=\"#intf\">intf</a>, unsigned int <a class=\"id\" href=\"#altnum\">altnum</a>);", 
"extern struct <a class=\"id\" href=\"#usb_host_interface\">usb_host_interface</a> *<a class=\"id\" href=\"#usb_find_alt_setting\">usb_find_alt_setting</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_host_config\">usb_host_config</a> *<a class=\"id\" href=\"#config\">config</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#iface_num\">iface_num</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#alt_num\">alt_num</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_make_path - returns stable device path in the usb tree</span>", 
"<span class=\"comment\"> * @dev: the device whose path is being constructed</span>", 
"<span class=\"comment\"> * @buf: where to put the string</span>", 
"<span class=\"comment\"> * @size: how big is \"buf\"?</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns length of the string (&gt; 0) or negative if size was too small.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This identifier is intended to be \"stable\", reflecting physical paths in</span>", 
"<span class=\"comment\"> * hardware such as physical bus addresses for host controllers or ports on</span>", 
"<span class=\"comment\"> * USB hubs.  That makes it stay the same until systems are physically</span>", 
"<span class=\"comment\"> * reconfigured, by re-cabling a tree of USB devices or by moving USB host</span>", 
"<span class=\"comment\"> * controllers.  Adding and removing devices, including virtual root hubs</span>", 
"<span class=\"comment\"> * in host controller driver modules, does not change these path identifers;</span>", 
"<span class=\"comment\"> * neither does rebooting or re-enumerating.  These are more useful identifiers</span>", 
"<span class=\"comment\"> * than changeable (\"unstable\") ones like bus numbers or device addresses.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * With a partial exception for devices connected to USB 2.0 root hubs, these</span>", 
"<span class=\"comment\"> * identifiers are also predictable.  So long as the device tree isn't changed,</span>", 
"<span class=\"comment\"> * plugging any USB device into a given hub port always gives it the same path.</span>", 
"<span class=\"comment\"> * Because of the use of \"companion\" controllers, devices connected to ports on</span>", 
"<span class=\"comment\"> * USB 2.0 root hubs (EHCI host controllers) will get one path ID if they are</span>", 
"<span class=\"comment\"> * high speed, and a different one if they are full or low speed.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_make_path\">usb_make_path</a>(struct <a class=\"id\" href=\"#usb_device\">usb_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#actual\">actual</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#actual\">actual</a> = <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size\">size</a>, \"usb-%s-%s\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#bus_name\">bus_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devpath\">devpath</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#actual\">actual</a> >= (int)<a class=\"id\" href=\"#size\">size</a>) ? -1 : <a class=\"id\" href=\"#actual\">actual</a>;", 
"}", 
"", 
"<span class=\"comment\">/*-------------------------------------------------------------------------*/</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_DEVICE\">USB_DEVICE_ID_MATCH_DEVICE</a> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_VENDOR\">USB_DEVICE_ID_MATCH_VENDOR</a> | <a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_PRODUCT\">USB_DEVICE_ID_MATCH_PRODUCT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_DEV_RANGE\">USB_DEVICE_ID_MATCH_DEV_RANGE</a> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_DEV_LO\">USB_DEVICE_ID_MATCH_DEV_LO</a> | <a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_DEV_HI\">USB_DEVICE_ID_MATCH_DEV_HI</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_DEVICE_AND_VERSION\">USB_DEVICE_ID_MATCH_DEVICE_AND_VERSION</a> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_DEVICE\">USB_DEVICE_ID_MATCH_DEVICE</a> | <a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_DEV_RANGE\">USB_DEVICE_ID_MATCH_DEV_RANGE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_DEV_INFO\">USB_DEVICE_ID_MATCH_DEV_INFO</a> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_DEV_CLASS\">USB_DEVICE_ID_MATCH_DEV_CLASS</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_DEV_SUBCLASS\">USB_DEVICE_ID_MATCH_DEV_SUBCLASS</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_DEV_PROTOCOL\">USB_DEVICE_ID_MATCH_DEV_PROTOCOL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_INT_INFO\">USB_DEVICE_ID_MATCH_INT_INFO</a> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_INT_CLASS\">USB_DEVICE_ID_MATCH_INT_CLASS</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_INT_SUBCLASS\">USB_DEVICE_ID_MATCH_INT_SUBCLASS</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_INT_PROTOCOL\">USB_DEVICE_ID_MATCH_INT_PROTOCOL</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * USB_DEVICE - macro used to describe a specific usb device</span>", 
"<span class=\"comment\"> * @vend: the 16 bit USB Vendor ID</span>", 
"<span class=\"comment\"> * @prod: the 16 bit USB Product ID</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro is used to create a struct usb_device_id that matches a</span>", 
"<span class=\"comment\"> * specific device.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_DEVICE\">USB_DEVICE</a>(<a class=\"id\" href=\"#vend\">vend</a>, <a class=\"id\" href=\"#prod\">prod</a>) \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#match_flags\">match_flags</a> = <a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_DEVICE\">USB_DEVICE_ID_MATCH_DEVICE</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#idVendor\">idVendor</a> = (<a class=\"id\" href=\"#vend\">vend</a>), \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#idProduct\">idProduct</a> = (<a class=\"id\" href=\"#prod\">prod</a>)", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * USB_DEVICE_VER - describe a specific usb device with a version range</span>", 
"<span class=\"comment\"> * @vend: the 16 bit USB Vendor ID</span>", 
"<span class=\"comment\"> * @prod: the 16 bit USB Product ID</span>", 
"<span class=\"comment\"> * @lo: the bcdDevice_lo value</span>", 
"<span class=\"comment\"> * @hi: the bcdDevice_hi value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro is used to create a struct usb_device_id that matches a</span>", 
"<span class=\"comment\"> * specific device, with a version range.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_DEVICE_VER\">USB_DEVICE_VER</a>(<a class=\"id\" href=\"#vend\">vend</a>, <a class=\"id\" href=\"#prod\">prod</a>, <a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#hi\">hi</a>) \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#match_flags\">match_flags</a> = <a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_DEVICE_AND_VERSION\">USB_DEVICE_ID_MATCH_DEVICE_AND_VERSION</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#idVendor\">idVendor</a> = (<a class=\"id\" href=\"#vend\">vend</a>), \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#idProduct\">idProduct</a> = (<a class=\"id\" href=\"#prod\">prod</a>), \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bcdDevice_lo\">bcdDevice_lo</a> = (<a class=\"id\" href=\"#lo\">lo</a>), \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bcdDevice_hi\">bcdDevice_hi</a> = (<a class=\"id\" href=\"#hi\">hi</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * USB_DEVICE_INTERFACE_PROTOCOL - describe a usb device with a specific interface protocol</span>", 
"<span class=\"comment\"> * @vend: the 16 bit USB Vendor ID</span>", 
"<span class=\"comment\"> * @prod: the 16 bit USB Product ID</span>", 
"<span class=\"comment\"> * @pr: bInterfaceProtocol value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro is used to create a struct usb_device_id that matches a</span>", 
"<span class=\"comment\"> * specific interface protocol of devices.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_DEVICE_INTERFACE_PROTOCOL\">USB_DEVICE_INTERFACE_PROTOCOL</a>(<a class=\"id\" href=\"#vend\">vend</a>, <a class=\"id\" href=\"#prod\">prod</a>, <a class=\"id\" href=\"#pr\">pr</a>) \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#match_flags\">match_flags</a> = <a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_DEVICE\">USB_DEVICE_ID_MATCH_DEVICE</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_INT_PROTOCOL\">USB_DEVICE_ID_MATCH_INT_PROTOCOL</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#idVendor\">idVendor</a> = (<a class=\"id\" href=\"#vend\">vend</a>), \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#idProduct\">idProduct</a> = (<a class=\"id\" href=\"#prod\">prod</a>), \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bInterfaceProtocol\">bInterfaceProtocol</a> = (<a class=\"id\" href=\"#pr\">pr</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * USB_DEVICE_INFO - macro used to describe a class of usb devices</span>", 
"<span class=\"comment\"> * @cl: bDeviceClass value</span>", 
"<span class=\"comment\"> * @sc: bDeviceSubClass value</span>", 
"<span class=\"comment\"> * @pr: bDeviceProtocol value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro is used to create a struct usb_device_id that matches a</span>", 
"<span class=\"comment\"> * specific class of devices.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_DEVICE_INFO\">USB_DEVICE_INFO</a>(<a class=\"id\" href=\"#cl\">cl</a>, <a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#pr\">pr</a>) \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#match_flags\">match_flags</a> = <a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_DEV_INFO\">USB_DEVICE_ID_MATCH_DEV_INFO</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bDeviceClass\">bDeviceClass</a> = (<a class=\"id\" href=\"#cl\">cl</a>), \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bDeviceSubClass\">bDeviceSubClass</a> = (<a class=\"id\" href=\"#sc\">sc</a>), \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bDeviceProtocol\">bDeviceProtocol</a> = (<a class=\"id\" href=\"#pr\">pr</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * USB_INTERFACE_INFO - macro used to describe a class of usb interfaces</span>", 
"<span class=\"comment\"> * @cl: bInterfaceClass value</span>", 
"<span class=\"comment\"> * @sc: bInterfaceSubClass value</span>", 
"<span class=\"comment\"> * @pr: bInterfaceProtocol value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro is used to create a struct usb_device_id that matches a</span>", 
"<span class=\"comment\"> * specific class of interfaces.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_INTERFACE_INFO\">USB_INTERFACE_INFO</a>(<a class=\"id\" href=\"#cl\">cl</a>, <a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#pr\">pr</a>) \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#match_flags\">match_flags</a> = <a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_INT_INFO\">USB_DEVICE_ID_MATCH_INT_INFO</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bInterfaceClass\">bInterfaceClass</a> = (<a class=\"id\" href=\"#cl\">cl</a>), \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bInterfaceSubClass\">bInterfaceSubClass</a> = (<a class=\"id\" href=\"#sc\">sc</a>), \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bInterfaceProtocol\">bInterfaceProtocol</a> = (<a class=\"id\" href=\"#pr\">pr</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * USB_DEVICE_AND_INTERFACE_INFO - describe a specific usb device with a class of usb interfaces</span>", 
"<span class=\"comment\"> * @vend: the 16 bit USB Vendor ID</span>", 
"<span class=\"comment\"> * @prod: the 16 bit USB Product ID</span>", 
"<span class=\"comment\"> * @cl: bInterfaceClass value</span>", 
"<span class=\"comment\"> * @sc: bInterfaceSubClass value</span>", 
"<span class=\"comment\"> * @pr: bInterfaceProtocol value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro is used to create a struct usb_device_id that matches a</span>", 
"<span class=\"comment\"> * specific device with a specific class of interfaces.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is especially useful when explicitly matching devices that have</span>", 
"<span class=\"comment\"> * vendor specific bDeviceClass values, but standards-compliant interfaces.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_DEVICE_AND_INTERFACE_INFO\">USB_DEVICE_AND_INTERFACE_INFO</a>(<a class=\"id\" href=\"#vend\">vend</a>, <a class=\"id\" href=\"#prod\">prod</a>, <a class=\"id\" href=\"#cl\">cl</a>, <a class=\"id\" href=\"#sc\">sc</a>, <a class=\"id\" href=\"#pr\">pr</a>) \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#match_flags\">match_flags</a> = <a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_INT_INFO\">USB_DEVICE_ID_MATCH_INT_INFO</a> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>| <a class=\"id\" href=\"#USB_DEVICE_ID_MATCH_DEVICE\">USB_DEVICE_ID_MATCH_DEVICE</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#idVendor\">idVendor</a> = (<a class=\"id\" href=\"#vend\">vend</a>), \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#idProduct\">idProduct</a> = (<a class=\"id\" href=\"#prod\">prod</a>), \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bInterfaceClass\">bInterfaceClass</a> = (<a class=\"id\" href=\"#cl\">cl</a>), \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bInterfaceSubClass\">bInterfaceSubClass</a> = (<a class=\"id\" href=\"#sc\">sc</a>), \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bInterfaceProtocol\">bInterfaceProtocol</a> = (<a class=\"id\" href=\"#pr\">pr</a>)", 
"", 
"<span class=\"comment\">/* ----------------------------------------------------------------------- */</span>", 
"", 
"<span class=\"comment\">/* Stuff for dynamic usb ids */</span>", 
"struct <a class=\"id\" href=\"#usb_dynids\">usb_dynids</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#usb_dynid\">usb_dynid</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#usb_device_id\">usb_device_id</a> <a class=\"id\" href=\"#id\">id</a>;", 
"};", 
"", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#usb_store_new_id\">usb_store_new_id</a>(struct <a class=\"id\" href=\"#usb_dynids\">usb_dynids</a> *<a class=\"id\" href=\"#dynids\">dynids</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct usbdrv_wrap - wrapper for driver-model structure</span>", 
"<span class=\"comment\"> * @driver: The driver-model core driver structure.</span>", 
"<span class=\"comment\"> * @for_devices: Non-zero for device drivers, 0 for interface drivers.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#usbdrv_wrap\">usbdrv_wrap</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_driver\">device_driver</a> <a class=\"id\" href=\"#driver\">driver</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#for_devices\">for_devices</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct usb_driver - identifies USB interface driver to usbcore</span>", 
"<span class=\"comment\"> * @name: The driver name should be unique among USB drivers,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and should normally be the same as the module name.</span>", 
"<span class=\"comment\"> * @probe: Called to see if the driver is willing to manage a particular</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interface on a device.  If it is, probe returns zero and uses</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>usb_set_intfdata() to associate driver-specific data with the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interface.  It may also use usb_set_interface() to specify the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>appropriate altsetting.  If unwilling to manage the interface,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>return -ENODEV, if genuine IO errors occured, an appropriate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>negative errno value.</span>", 
"<span class=\"comment\"> * @disconnect: Called when the interface is no longer accessible, usually</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>because its device has been (or is being) disconnected or the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>driver module is being unloaded.</span>", 
"<span class=\"comment\"> * @ioctl: Used for drivers that want to talk to userspace through</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the \"usbfs\" filesystem.  This lets devices provide ways to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>expose information to user space regardless of where they</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>do (or don't) show up otherwise in the filesystem.</span>", 
"<span class=\"comment\"> * @suspend: Called when the device is going to be suspended by the system.</span>", 
"<span class=\"comment\"> * @resume: Called when the device is being resumed by the system.</span>", 
"<span class=\"comment\"> * @reset_resume: Called when the suspended device has been reset instead</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of being resumed.</span>", 
"<span class=\"comment\"> * @pre_reset: Called by usb_reset_device() when the device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is about to be reset.</span>", 
"<span class=\"comment\"> * @post_reset: Called by usb_reset_device() after the device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>has been reset</span>", 
"<span class=\"comment\"> * @id_table: USB drivers use ID table to support hotplugging.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Export this with MODULE_DEVICE_TABLE(usb,...).  This must be set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or your driver's probe function will never get called.</span>", 
"<span class=\"comment\"> * @dynids: used internally to hold the list of dynamically added device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ids for this driver.</span>", 
"<span class=\"comment\"> * @drvwrap: Driver-model core structure wrapper.</span>", 
"<span class=\"comment\"> * @no_dynamic_id: if set to 1, the USB core will not allow dynamic ids to be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>added to this driver by preventing the sysfs file from being created.</span>", 
"<span class=\"comment\"> * @supports_autosuspend: if set to 0, the USB core will not allow autosuspend</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for interfaces bound to this driver.</span>", 
"<span class=\"comment\"> * @soft_unbind: if set to 1, the USB core will not kill URBs and disable</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>endpoints before calling the driver's disconnect method.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * USB interface drivers must provide a name, probe() and disconnect()</span>", 
"<span class=\"comment\"> * methods, and an id_table.  Other driver fields are optional.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The id_table is used in hotplugging.  It holds a set of descriptors,</span>", 
"<span class=\"comment\"> * and specialized data may be associated with each entry.  That table</span>", 
"<span class=\"comment\"> * is used by both user and kernel mode hotplugging support.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The probe() and disconnect() methods are called in a context where</span>", 
"<span class=\"comment\"> * they can sleep, but they should avoid abusing the privilege.  Most</span>", 
"<span class=\"comment\"> * work to connect to a device should be done when the device is opened,</span>", 
"<span class=\"comment\"> * and undone at the last close.  The disconnect code needs to address</span>", 
"<span class=\"comment\"> * concurrency issues with respect to open() and close() methods, as</span>", 
"<span class=\"comment\"> * well as forcing all pending I/O requests to complete (by unlinking</span>", 
"<span class=\"comment\"> * them as necessary, and blocking until the unlinks complete).</span>", 
];
xr_frag_insert('l/2f/705de45eee86f853a6c5f7fc2f3b3247838bce.xr', __xr_tmp);
