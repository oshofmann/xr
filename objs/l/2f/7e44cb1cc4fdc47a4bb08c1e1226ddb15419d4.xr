var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/ipc/namespace.c</span>", 
"<span class=\"comment\"> * Copyright (C) 2006 Pavel Emelyanov &lt;xemul@openvz.org&gt; OpenVZ, SWsoft Inc.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nsproxy\">nsproxy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"util.h\"", 
"", 
"static struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#create_ipc_ns\">create_ipc_ns</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ns\">ns</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#count\">count</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#mq_init_ns\">mq_init_ns</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#nr_ipc_ns\">nr_ipc_ns</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_init_ns\">sem_init_ns</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg_init_ns\">msg_init_ns</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shm_init_ns\">shm_init_ns</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * msgmni has already been computed for the new ipc ns.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Thus, do the ipcns creation notification before registering that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * new ipcns in the chain.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipcns_notify\">ipcns_notify</a>(<a class=\"id\" href=\"#IPCNS_CREATED\">IPCNS_CREATED</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_ipcns_notifier\">register_ipcns_notifier</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ns\">ns</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#copy_ipcs\">copy_ipcs</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>, struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CLONE_NEWIPC\">CLONE_NEWIPC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#get_ipc_ns\">get_ipc_ns</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#create_ipc_ns\">create_ipc_ns</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * free_ipcs - free all ipcs of one type</span>", 
"<span class=\"comment\"> * @ns:   the namespace to remove the ipcs from</span>", 
"<span class=\"comment\"> * @ids:  the table of ipcs to free</span>", 
"<span class=\"comment\"> * @free: the function called to free each individual ipc</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called for each kind of ipc when an ipc_namespace exits.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#free_ipcs\">free_ipcs</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>, struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a> *<a class=\"id\" href=\"#ids\">ids</a>,", 
"<span class=\"ts\"/>       void (*<a class=\"id\" href=\"#free\">free</a>)(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *, struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#perm\">perm</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#next_id\">next_id</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#total\">total</a>, <a class=\"id\" href=\"#in_use\">in_use</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#rw_mutex\">rw_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_use\">in_use</a> = <a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#in_use\">in_use</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#total\">total</a> = 0, <a class=\"id\" href=\"#next_id\">next_id</a> = 0; <a class=\"id\" href=\"#total\">total</a> &lt; <a class=\"id\" href=\"#in_use\">in_use</a>; <a class=\"id\" href=\"#next_id\">next_id</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perm\">perm</a> = <a class=\"id\" href=\"#idr_find\">idr_find</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#ipcs_idr\">ipcs_idr</a>, <a class=\"id\" href=\"#next_id\">next_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#perm\">perm</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc_lock_by_ptr\">ipc_lock_by_ptr</a>(<a class=\"id\" href=\"#perm\">perm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#perm\">perm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#rw_mutex\">rw_mutex</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_ipc_ns\">free_ipc_ns</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Unregistering the hotplug notifier at the beginning guarantees</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that the ipc namespace won't be freed while we are inside the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * callback routine. Since the blocking_notifier_chain_XXX routines</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hold a rw lock on the notifier list, unregister_ipcns_notifier()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * won't take the rw lock before blocking_notifier_call_chain() has</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * released the rd lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_ipcns_notifier\">unregister_ipcns_notifier</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_exit_ns\">sem_exit_ns</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg_exit_ns\">msg_exit_ns</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shm_exit_ns\">shm_exit_ns</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#nr_ipc_ns\">nr_ipc_ns</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do the ipcns removal notification after decrementing nr_ipc_ns in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * order to have a correct value when recomputing msgmni.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipcns_notify\">ipcns_notify</a>(<a class=\"id\" href=\"#IPCNS_REMOVED\">IPCNS_REMOVED</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * put_ipc_ns - drop a reference to an ipc namespace.</span>", 
"<span class=\"comment\"> * @ns: the namespace to put</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If this is the last task in the namespace exiting, and</span>", 
"<span class=\"comment\"> * it is dropping the refcount to 0, then it can race with</span>", 
"<span class=\"comment\"> * a task in another ipc namespace but in a mounts namespace</span>", 
"<span class=\"comment\"> * which has this ipcns's mqueuefs mounted, doing some action</span>", 
"<span class=\"comment\"> * with one of the mqueuefs files.  That can raise the refcount.</span>", 
"<span class=\"comment\"> * So dropping the refcount, and raising the refcount when</span>", 
"<span class=\"comment\"> * accessing it through the VFS, are protected with mq_lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (Clearly, a task raising the refcount on its own ipc_ns</span>", 
"<span class=\"comment\"> * needn't take mq_lock since it can't race with the last task</span>", 
"<span class=\"comment\"> * in the ipcns exiting).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#put_ipc_ns\">put_ipc_ns</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_lock\">atomic_dec_and_lock</a>(&amp;<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#count\">count</a>, &amp;<a class=\"id\" href=\"#mq_lock\">mq_lock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mq_clear_sbinfo\">mq_clear_sbinfo</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mq_lock\">mq_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mq_put_mnt\">mq_put_mnt</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_ipc_ns\">free_ipc_ns</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/>}", 
"}", 
];
xr_frag_insert('l/2f/7e44cb1cc4fdc47a4bb08c1e1226ddb15419d4.xr', __xr_tmp);
