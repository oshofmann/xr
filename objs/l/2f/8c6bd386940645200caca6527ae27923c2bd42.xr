var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#random\">random</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#elf\">elf</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static unsigned int <a class=\"id\" href=\"#stack_maxrandom_size\">stack_maxrandom_size</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#max\">max</a> = 0;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_RANDOMIZE\">PF_RANDOMIZE</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>!(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#personality\">personality</a> &amp; <a class=\"id\" href=\"#ADDR_NO_RANDOMIZE\">ADDR_NO_RANDOMIZE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = ((-1U) &amp; <a class=\"id\" href=\"#STACK_RND_MASK\">STACK_RND_MASK</a>) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#max\">max</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Top of mmap area (just below the process stack).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Leave an at least ~128 MB hole with possible stack randomization.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MIN_GAP\">MIN_GAP</a> (128*1024*1024UL + <a class=\"id\" href=\"#stack_maxrandom_size\">stack_maxrandom_size</a>())", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_GAP\">MAX_GAP</a> (<a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a>/6*5)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * True on X86_32 or when emulating IA32 on X86_64</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mmap_is_ia32\">mmap_is_ia32</a>(void)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>return 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IA32_EMULATION\">CONFIG_IA32_EMULATION</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_thread_flag\">test_thread_flag</a>(<a class=\"id\" href=\"#TIF_IA32\">TIF_IA32</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mmap_is_legacy\">mmap_is_legacy</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#personality\">personality</a> &amp; <a class=\"id\" href=\"#ADDR_COMPAT_LAYOUT\">ADDR_COMPAT_LAYOUT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rlimit\">rlimit</a>(<a class=\"id\" href=\"#RLIMIT_STACK\">RLIMIT_STACK</a>) == <a class=\"id\" href=\"#RLIM_INFINITY\">RLIM_INFINITY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sysctl_legacy_va_layout\">sysctl_legacy_va_layout</a>;", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#mmap_rnd\">mmap_rnd</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rnd\">rnd</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/>*  8 bits of randomness in 32bit mmaps, 20 address space bits</span>", 
"<span class=\"comment\"><span class=\"ts\"/>* 28 bits of randomness in 64bit mmaps, 40 address space bits</span>", 
"<span class=\"comment\"><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_RANDOMIZE\">PF_RANDOMIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mmap_is_ia32\">mmap_is_ia32</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnd\">rnd</a> = (long)<a class=\"id\" href=\"#get_random_int\">get_random_int</a>() % (1<<8);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnd\">rnd</a> = (long)(<a class=\"id\" href=\"#get_random_int\">get_random_int</a>() % (1<<28));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rnd\">rnd</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#mmap_base\">mmap_base</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#gap\">gap</a> = <a class=\"id\" href=\"#rlimit\">rlimit</a>(<a class=\"id\" href=\"#RLIMIT_STACK\">RLIMIT_STACK</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gap\">gap</a> &lt; <a class=\"id\" href=\"#MIN_GAP\">MIN_GAP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gap\">gap</a> = <a class=\"id\" href=\"#MIN_GAP\">MIN_GAP</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#gap\">gap</a> &gt; <a class=\"id\" href=\"#MAX_GAP\">MAX_GAP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gap\">gap</a> = <a class=\"id\" href=\"#MAX_GAP\">MAX_GAP</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a> - <a class=\"id\" href=\"#gap\">gap</a> - <a class=\"id\" href=\"#mmap_rnd\">mmap_rnd</a>());", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Bottom-up (legacy) layout on X86_32 did not support randomization, X86_64</span>", 
"<span class=\"comment\"> * does, but not when emulating X86_32</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#mmap_legacy_base\">mmap_legacy_base</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mmap_is_ia32\">mmap_is_ia32</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TASK_UNMAPPED_BASE\">TASK_UNMAPPED_BASE</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TASK_UNMAPPED_BASE\">TASK_UNMAPPED_BASE</a> + <a class=\"id\" href=\"#mmap_rnd\">mmap_rnd</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function, called very early during the creation of a new</span>", 
"<span class=\"comment\"> * process VM image, sets up which VM layout function to use:</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#arch_pick_mmap_layout\">arch_pick_mmap_layout</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mmap_is_legacy\">mmap_is_legacy</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_base\">mmap_base</a> = <a class=\"id\" href=\"#mmap_legacy_base\">mmap_legacy_base</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#get_unmapped_area\">get_unmapped_area</a> = <a class=\"id\" href=\"#arch_get_unmapped_area\">arch_get_unmapped_area</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#unmap_area\">unmap_area</a> = <a class=\"id\" href=\"#arch_unmap_area\">arch_unmap_area</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_base\">mmap_base</a> = <a class=\"id\" href=\"#mmap_base\">mmap_base</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#get_unmapped_area\">get_unmapped_area</a> = <a class=\"id\" href=\"#arch_get_unmapped_area_topdown\">arch_get_unmapped_area_topdown</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#unmap_area\">unmap_area</a> = <a class=\"id\" href=\"#arch_unmap_area_topdown\">arch_unmap_area_topdown</a>;", 
"<span class=\"ts\"/>}", 
"}", 
];
xr_frag_insert('l/2f/8c6bd386940645200caca6527ae27923c2bd42.xr', __xr_tmp);
