var __xr_tmp = [
"<span class=\"comment\"> * 4) KSM never flushes the stable tree, which means that even if it were to</span>", 
"<span class=\"comment\"> *    take 10 attempts to find a page in the unstable tree, once it is found,</span>", 
"<span class=\"comment\"> *    it is secured in the stable tree.  (When we scan a new page, we first</span>", 
"<span class=\"comment\"> *    compare it against the stable tree, and then against the unstable tree.)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct mm_slot - ksm information per mm that is being scanned</span>", 
"<span class=\"comment\"> * @link: link to the mm_slots hash list</span>", 
"<span class=\"comment\"> * @mm_list: link into the mm_slots list, rooted in ksm_mm_head</span>", 
"<span class=\"comment\"> * @rmap_list: head for this mm_slot's singly-linked list of rmap_items</span>", 
"<span class=\"comment\"> * @mm: the mm that this information is valid for</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mm_slot\">mm_slot</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> <a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#mm_list\">mm_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#rmap_list\">rmap_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct ksm_scan - cursor for scanning</span>", 
"<span class=\"comment\"> * @mm_slot: the current mm_slot we are scanning</span>", 
"<span class=\"comment\"> * @address: the next address inside that to be scanned</span>", 
"<span class=\"comment\"> * @rmap_list: link to the next rmap to be scanned in the rmap_list</span>", 
"<span class=\"comment\"> * @seqnr: count of completed full scans (needed when removing unstable node)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There is only the one ksm_scan instance of this cursor structure.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ksm_scan\">ksm_scan</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_slot\">mm_slot</a> *<a class=\"id\" href=\"#mm_slot\">mm_slot</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> **<a class=\"id\" href=\"#rmap_list\">rmap_list</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#seqnr\">seqnr</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct stable_node - node of the stable rbtree</span>", 
"<span class=\"comment\"> * @node: rb node of this ksm page in the stable tree</span>", 
"<span class=\"comment\"> * @hlist: hlist head of rmap_items using this ksm page</span>", 
"<span class=\"comment\"> * @kpfn: page frame number of this ksm page</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#stable_node\">stable_node</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> <a class=\"id\" href=\"#hlist\">hlist</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#kpfn\">kpfn</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct rmap_item - reverse mapping item for virtual addresses</span>", 
"<span class=\"comment\"> * @rmap_list: next rmap_item in mm_slot's singly-linked rmap_list</span>", 
"<span class=\"comment\"> * @anon_vma: pointer to anon_vma for this mm,address, when in stable tree</span>", 
"<span class=\"comment\"> * @mm: the memory structure this rmap_item is pointing into</span>", 
"<span class=\"comment\"> * @address: the virtual address this rmap_item tracks (+ flags in low bits)</span>", 
"<span class=\"comment\"> * @oldchecksum: previous checksum of the page at that virtual address</span>", 
"<span class=\"comment\"> * @node: rb node of this rmap_item in the unstable tree</span>", 
"<span class=\"comment\"> * @head: pointer to stable_node heading this list in the stable tree</span>", 
"<span class=\"comment\"> * @hlist: link into hlist of rmap_items hanging off that stable_node</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#rmap_list\">rmap_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>;<span class=\"ts\"/><span class=\"comment\">/* when stable */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* + low bits used for flags below */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#oldchecksum\">oldchecksum</a>;<span class=\"ts\"/><span class=\"comment\">/* when unstable */</span>", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> <a class=\"id\" href=\"#node\">node</a>;<span class=\"ts\"/><span class=\"comment\">/* when node of unstable tree */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct {<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* when listed from stable tree */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#stable_node\">stable_node</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> <a class=\"id\" href=\"#hlist\">hlist</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"<span class=\"ts\"/>};", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEQNR_MASK\">SEQNR_MASK</a><span class=\"ts\"/>0x0ff<span class=\"ts\"/><span class=\"comment\">/* low bits of unstable tree seqnr */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UNSTABLE_FLAG\">UNSTABLE_FLAG</a><span class=\"ts\"/>0x100<span class=\"ts\"/><span class=\"comment\">/* is a node of the unstable tree */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STABLE_FLAG\">STABLE_FLAG</a><span class=\"ts\"/>0x200<span class=\"ts\"/><span class=\"comment\">/* is listed from the stable tree */</span>", 
"", 
"<span class=\"comment\">/* The stable and unstable tree heads */</span>", 
"static struct <a class=\"id\" href=\"#rb_root\">rb_root</a> <a class=\"id\" href=\"#root_stable_tree\">root_stable_tree</a> = <a class=\"id\" href=\"#RB_ROOT\">RB_ROOT</a>;", 
"static struct <a class=\"id\" href=\"#rb_root\">rb_root</a> <a class=\"id\" href=\"#root_unstable_tree\">root_unstable_tree</a> = <a class=\"id\" href=\"#RB_ROOT\">RB_ROOT</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MM_SLOTS_HASH_SHIFT\">MM_SLOTS_HASH_SHIFT</a> 10", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MM_SLOTS_HASH_HEADS\">MM_SLOTS_HASH_HEADS</a> (1 << <a class=\"id\" href=\"#MM_SLOTS_HASH_SHIFT\">MM_SLOTS_HASH_SHIFT</a>)", 
"static struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> <a class=\"id\" href=\"#mm_slots_hash\">mm_slots_hash</a>[<a class=\"id\" href=\"#MM_SLOTS_HASH_HEADS\">MM_SLOTS_HASH_HEADS</a>];", 
"", 
"static struct <a class=\"id\" href=\"#mm_slot\">mm_slot</a> <a class=\"id\" href=\"#ksm_mm_head\">ksm_mm_head</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mm_list\">mm_list</a> = <a class=\"id\" href=\"#LIST_HEAD_INIT\">LIST_HEAD_INIT</a>(<a class=\"id\" href=\"#ksm_mm_head\">ksm_mm_head</a>.<a class=\"id\" href=\"#mm_list\">mm_list</a>),", 
"};", 
"static struct <a class=\"id\" href=\"#ksm_scan\">ksm_scan</a> <a class=\"id\" href=\"#ksm_scan\">ksm_scan</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mm_slot\">mm_slot</a> = &amp;<a class=\"id\" href=\"#ksm_mm_head\">ksm_mm_head</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#rmap_item_cache\">rmap_item_cache</a>;", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#stable_node_cache\">stable_node_cache</a>;", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#mm_slot_cache\">mm_slot_cache</a>;", 
"", 
"<span class=\"comment\">/* The number of nodes in the stable tree */</span>", 
"static unsigned long <a class=\"id\" href=\"#ksm_pages_shared\">ksm_pages_shared</a>;", 
"", 
"<span class=\"comment\">/* The number of page slots additionally sharing those nodes */</span>", 
"static unsigned long <a class=\"id\" href=\"#ksm_pages_sharing\">ksm_pages_sharing</a>;", 
"", 
"<span class=\"comment\">/* The number of nodes in the unstable tree */</span>", 
"static unsigned long <a class=\"id\" href=\"#ksm_pages_unshared\">ksm_pages_unshared</a>;", 
"", 
"<span class=\"comment\">/* The number of rmap_items in use: to calculate pages_volatile */</span>", 
"static unsigned long <a class=\"id\" href=\"#ksm_rmap_items\">ksm_rmap_items</a>;", 
"", 
"<span class=\"comment\">/* Number of pages ksmd should scan in one batch */</span>", 
"static unsigned int <a class=\"id\" href=\"#ksm_thread_pages_to_scan\">ksm_thread_pages_to_scan</a> = 100;", 
"", 
"<span class=\"comment\">/* Milliseconds ksmd should sleep between batches */</span>", 
"static unsigned int <a class=\"id\" href=\"#ksm_thread_sleep_millisecs\">ksm_thread_sleep_millisecs</a> = 20;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KSM_RUN_STOP\">KSM_RUN_STOP</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KSM_RUN_MERGE\">KSM_RUN_MERGE</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KSM_RUN_UNMERGE\">KSM_RUN_UNMERGE</a><span class=\"ts\"/>2", 
"static unsigned int <a class=\"id\" href=\"#ksm_run\">ksm_run</a> = <a class=\"id\" href=\"#KSM_RUN_STOP\">KSM_RUN_STOP</a>;", 
"", 
"static <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#ksm_thread_wait\">ksm_thread_wait</a>);", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#ksm_thread_mutex\">ksm_thread_mutex</a>);", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#ksm_mmlist_lock\">ksm_mmlist_lock</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KSM_KMEM_CACHE\">KSM_KMEM_CACHE</a>(<a class=\"id\" href=\"#__struct\">__struct</a>, <a class=\"id\" href=\"#__flags\">__flags</a>) <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"ksm_\"#<a class=\"id\" href=\"#__struct\">__struct</a>,\\", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#__struct\">__struct</a>), <a class=\"id\" href=\"#__alignof__\">__alignof__</a>(struct <a class=\"id\" href=\"#__struct\">__struct</a>),\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__flags\">__flags</a>), <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ksm_slab_init\">ksm_slab_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rmap_item_cache\">rmap_item_cache</a> = <a class=\"id\" href=\"#KSM_KMEM_CACHE\">KSM_KMEM_CACHE</a>(<a class=\"id\" href=\"#rmap_item\">rmap_item</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rmap_item_cache\">rmap_item_cache</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stable_node_cache\">stable_node_cache</a> = <a class=\"id\" href=\"#KSM_KMEM_CACHE\">KSM_KMEM_CACHE</a>(<a class=\"id\" href=\"#stable_node\">stable_node</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#stable_node_cache\">stable_node_cache</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free1\">out_free1</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_slot_cache\">mm_slot_cache</a> = <a class=\"id\" href=\"#KSM_KMEM_CACHE\">KSM_KMEM_CACHE</a>(<a class=\"id\" href=\"#mm_slot\">mm_slot</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm_slot_cache\">mm_slot_cache</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free2\">out_free2</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_free2\">out_free2</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#stable_node_cache\">stable_node_cache</a>);", 
"<a class=\"id\" href=\"#out_free1\">out_free1</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#rmap_item_cache\">rmap_item_cache</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ksm_slab_free\">ksm_slab_free</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#mm_slot_cache\">mm_slot_cache</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#stable_node_cache\">stable_node_cache</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#rmap_item_cache\">rmap_item_cache</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_slot_cache\">mm_slot_cache</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#alloc_rmap_item\">alloc_rmap_item</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#rmap_item\">rmap_item</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rmap_item\">rmap_item</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#rmap_item_cache\">rmap_item_cache</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rmap_item\">rmap_item</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_rmap_items\">ksm_rmap_items</a>++;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rmap_item\">rmap_item</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#free_rmap_item\">free_rmap_item</a>(struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#rmap_item\">rmap_item</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ksm_rmap_items\">ksm_rmap_items</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"comment\">/* debug safety */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#rmap_item_cache\">rmap_item_cache</a>, <a class=\"id\" href=\"#rmap_item\">rmap_item</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#stable_node\">stable_node</a> *<a class=\"id\" href=\"#alloc_stable_node\">alloc_stable_node</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#stable_node_cache\">stable_node_cache</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#free_stable_node\">free_stable_node</a>(struct <a class=\"id\" href=\"#stable_node\">stable_node</a> *<a class=\"id\" href=\"#stable_node\">stable_node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#stable_node_cache\">stable_node_cache</a>, <a class=\"id\" href=\"#stable_node\">stable_node</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#mm_slot\">mm_slot</a> *<a class=\"id\" href=\"#alloc_mm_slot\">alloc_mm_slot</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm_slot_cache\">mm_slot_cache</a>)<span class=\"ts\"/><span class=\"comment\">/* initialization failed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#mm_slot_cache\">mm_slot_cache</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#free_mm_slot\">free_mm_slot</a>(struct <a class=\"id\" href=\"#mm_slot\">mm_slot</a> *<a class=\"id\" href=\"#mm_slot\">mm_slot</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#mm_slot_cache\">mm_slot_cache</a>, <a class=\"id\" href=\"#mm_slot\">mm_slot</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#mm_slot\">mm_slot</a> *<a class=\"id\" href=\"#get_mm_slot\">get_mm_slot</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_slot\">mm_slot</a> *<a class=\"id\" href=\"#mm_slot\">mm_slot</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#bucket\">bucket</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bucket\">bucket</a> = &amp;<a class=\"id\" href=\"#mm_slots_hash\">mm_slots_hash</a>[<a class=\"id\" href=\"#hash_ptr\">hash_ptr</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#MM_SLOTS_HASH_SHIFT\">MM_SLOTS_HASH_SHIFT</a>)];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#mm_slot\">mm_slot</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#bucket\">bucket</a>, <a class=\"id\" href=\"#link\">link</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a> == <a class=\"id\" href=\"#mm_slot\">mm_slot</a>-><a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#mm_slot\">mm_slot</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#insert_to_mm_slots_hash\">insert_to_mm_slots_hash</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#mm_slot\">mm_slot</a> *<a class=\"id\" href=\"#mm_slot\">mm_slot</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#bucket\">bucket</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bucket\">bucket</a> = &amp;<a class=\"id\" href=\"#mm_slots_hash\">mm_slots_hash</a>[<a class=\"id\" href=\"#hash_ptr\">hash_ptr</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#MM_SLOTS_HASH_SHIFT\">MM_SLOTS_HASH_SHIFT</a>)];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_slot\">mm_slot</a>-><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#mm_slot\">mm_slot</a>-><a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#bucket\">bucket</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#in_stable_tree\">in_stable_tree</a>(struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#rmap_item\">rmap_item</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#address\">address</a> &amp; <a class=\"id\" href=\"#STABLE_FLAG\">STABLE_FLAG</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#hold_anon_vma\">hold_anon_vma</a>(struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#rmap_item\">rmap_item</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_anon_vma\">get_anon_vma</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ksm_drop_anon_vma\">ksm_drop_anon_vma</a>(struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#rmap_item\">rmap_item</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drop_anon_vma\">drop_anon_vma</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ksmd, and unmerge_and_remove_all_rmap_items(), must not touch an mm's</span>", 
"<span class=\"comment\"> * page tables after it has passed through ksm_exit() - which, if necessary,</span>", 
"<span class=\"comment\"> * takes mmap_sem briefly to serialize against them.  ksm_exit() does not set</span>", 
"<span class=\"comment\"> * a special flag: they can just back out as soon as mm_users goes to zero.</span>", 
"<span class=\"comment\"> * ksm_test_exit() is used throughout to make this test for exit: in some</span>", 
"<span class=\"comment\"> * places for correctness, in some places just to avoid unnecessary work.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ksm_test_exit\">ksm_test_exit</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_users\">mm_users</a>) == 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We use break_ksm to break COW on a ksm page: it's a stripped down</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if (get_user_pages(current, mm, addr, 1, 1, 1, &amp;page, NULL) == 1)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>put_page(page);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * but taking great care only to touch a ksm page, in a VM_MERGEABLE vma,</span>", 
"<span class=\"comment\"> * in case the application has unmapped and remapped mm,addr meanwhile.</span>", 
"<span class=\"comment\"> * Could a ksm page appear anywhere else?  Actually yes, in a VM_PFNMAP</span>", 
"<span class=\"comment\"> * mmap of /dev/mem or /dev/kmem, where we would not want to touch it.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#break_ksm\">break_ksm</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#follow_page\">follow_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#FOLL_GET\">FOLL_GET</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR_OR_NULL\">IS_ERR_OR_NULL</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageKsm\">PageKsm</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#handle_mm_fault\">handle_mm_fault</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_WRITE\">VM_FAULT_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>} while (!(<a class=\"id\" href=\"#ret\">ret</a> &amp; (<a class=\"id\" href=\"#VM_FAULT_WRITE\">VM_FAULT_WRITE</a> | <a class=\"id\" href=\"#VM_FAULT_SIGBUS\">VM_FAULT_SIGBUS</a> | <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>)));", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We must loop because handle_mm_fault() may back out if there's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any difficulty e.g. if pte accessed bit gets updated concurrently.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * VM_FAULT_WRITE is what we have been hoping for: it indicates that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * COW has been broken, even if the vma does not permit VM_WRITE;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but note that a concurrent fault might break PageKsm for us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * VM_FAULT_SIGBUS could occur if we race with truncation of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * backing file, which also invalidates anonymous pages: that's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * okay, that truncation will have unmapped the PageKsm for us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * VM_FAULT_OOM: at the time of writing (late July 2009), setting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * aside mem_cgroup limits, VM_FAULT_OOM would only be set if the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * current task has TIF_MEMDIE set, and will be OOM killed on return</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to user; and ksmd, having no mm, would never be chosen for that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But if the mm is in a limited mem_cgroup, then the fault may fail</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with VM_FAULT_OOM even if the current task is not TIF_MEMDIE; and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * even ksmd can fail in this way - though it's usually breaking ksm</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * just to undo a merge it made a moment before, so unlikely to oom.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * That's a pity: we might therefore have more kernel pages allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * than we're counting as nodes in the stable tree; but ksm_do_scan</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will retry to break_cow on each pass, so should recover the page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in due course.  The important thing is to not let VM_MERGEABLE</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be cleared while any such pages might remain in the area.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ret\">ret</a> &amp; <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>) ? -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a> : 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#break_cow\">break_cow</a>(struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#rmap_item\">rmap_item</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is not an accident that whenever we want to break COW</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to undo, we also need to drop a reference to the anon_vma.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ksm_drop_anon_vma\">ksm_drop_anon_vma</a>(<a class=\"id\" href=\"#rmap_item\">rmap_item</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ksm_test_exit\">ksm_test_exit</a>(<a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma\">find_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a> || <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &gt; <a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_MERGEABLE\">VM_MERGEABLE</a>) || !<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#break_ksm\">break_ksm</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#get_mergeable_page\">get_mergeable_page</a>(struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#rmap_item\">rmap_item</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ksm_test_exit\">ksm_test_exit</a>(<a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma\">find_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a> || <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &gt; <a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_MERGEABLE\">VM_MERGEABLE</a>) || !<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#follow_page\">follow_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#FOLL_GET\">FOLL_GET</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR_OR_NULL\">IS_ERR_OR_NULL</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_anon_page\">flush_anon_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_dcache_page\">flush_dcache_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#remove_node_from_stable_tree\">remove_node_from_stable_tree</a>(struct <a class=\"id\" href=\"#stable_node\">stable_node</a> *<a class=\"id\" href=\"#stable_node\">stable_node</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#rmap_item\">rmap_item</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#hlist\">hlist</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#rmap_item\">rmap_item</a>, <a class=\"id\" href=\"#hlist\">hlist</a>, &amp;<a class=\"id\" href=\"#stable_node\">stable_node</a>-><a class=\"id\" href=\"#hlist\">hlist</a>, <a class=\"id\" href=\"#hlist\">hlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#hlist\">hlist</a>.<a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_pages_sharing\">ksm_pages_sharing</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_pages_shared\">ksm_pages_shared</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_drop_anon_vma\">ksm_drop_anon_vma</a>(<a class=\"id\" href=\"#rmap_item\">rmap_item</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#address\">address</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_erase\">rb_erase</a>(&amp;<a class=\"id\" href=\"#stable_node\">stable_node</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#root_stable_tree\">root_stable_tree</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_stable_node\">free_stable_node</a>(<a class=\"id\" href=\"#stable_node\">stable_node</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * get_ksm_page: checks if the page indicated by the stable node</span>", 
"<span class=\"comment\"> * is still its ksm page, despite having held no reference to it.</span>", 
"<span class=\"comment\"> * In which case we can trust the content of the page, and it</span>", 
"<span class=\"comment\"> * returns the gotten page; but if the page has now been zapped,</span>", 
"<span class=\"comment\"> * remove the stale node from the stable tree and return NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You would expect the stable_node to hold a reference to the ksm page.</span>", 
"<span class=\"comment\"> * But if it increments the page's count, swapping out has to wait for</span>", 
"<span class=\"comment\"> * ksmd to come around again before it can free the page, which may take</span>", 
"<span class=\"comment\"> * seconds or even minutes: much too unresponsive.  So instead we use a</span>", 
"<span class=\"comment\"> * \"keyhole reference\": access to the ksm page from the stable node peeps</span>", 
"<span class=\"comment\"> * out through its keyhole to see if that page still holds the right key,</span>", 
"<span class=\"comment\"> * pointing back to this stable node.  This relies on freeing a PageAnon</span>", 
"<span class=\"comment\"> * page to reset its page-&gt;mapping to NULL, and relies on no other use of</span>", 
"<span class=\"comment\"> * a page to put something that might look like our key in page-&gt;mapping.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * include/linux/pagemap.h page_cache_get_speculative() is a good reference,</span>", 
"<span class=\"comment\"> * but this is different - made simpler by ksm_thread_mutex being held, but</span>", 
"<span class=\"comment\"> * interesting for assuming that no other use of the struct page could ever</span>", 
"<span class=\"comment\"> * put our expected_mapping into page-&gt;mapping (or a field of the union which</span>", 
"<span class=\"comment\"> * coincides with page-&gt;mapping).  The RCU calls are not for KSM at all, but</span>", 
"<span class=\"comment\"> * to keep the page_count protocol described with page_cache_get_speculative.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: it is possible that get_ksm_page() will return NULL one moment,</span>", 
"<span class=\"comment\"> * then page the next, if the page is in between page_freeze_refs() and</span>", 
"<span class=\"comment\"> * page_unfreeze_refs(): this shouldn't be a problem anywhere, the page</span>", 
"<span class=\"comment\"> * is on its way to being freed; but it is an anomaly to bear in mind.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#get_ksm_page\">get_ksm_page</a>(struct <a class=\"id\" href=\"#stable_node\">stable_node</a> *<a class=\"id\" href=\"#stable_node\">stable_node</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#expected_mapping\">expected_mapping</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#stable_node\">stable_node</a>-><a class=\"id\" href=\"#kpfn\">kpfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#expected_mapping\">expected_mapping</a> = (void *)<a class=\"id\" href=\"#stable_node\">stable_node</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#PAGE_MAPPING_ANON\">PAGE_MAPPING_ANON</a> | <a class=\"id\" href=\"#PAGE_MAPPING_KSM\">PAGE_MAPPING_KSM</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> != <a class=\"id\" href=\"#expected_mapping\">expected_mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#stale\">stale</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#get_page_unless_zero\">get_page_unless_zero</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#stale\">stale</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> != <a class=\"id\" href=\"#expected_mapping\">expected_mapping</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#stale\">stale</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"<a class=\"id\" href=\"#stale\">stale</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remove_node_from_stable_tree\">remove_node_from_stable_tree</a>(<a class=\"id\" href=\"#stable_node\">stable_node</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Removing rmap_item from stable or unstable tree.</span>", 
"<span class=\"comment\"> * This function will clean the information from the stable/unstable tree.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#remove_rmap_item_from_tree\">remove_rmap_item_from_tree</a>(struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#rmap_item\">rmap_item</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#address\">address</a> &amp; <a class=\"id\" href=\"#STABLE_FLAG\">STABLE_FLAG</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#stable_node\">stable_node</a> *<a class=\"id\" href=\"#stable_node\">stable_node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stable_node\">stable_node</a> = <a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#get_ksm_page\">get_ksm_page</a>(<a class=\"id\" href=\"#stable_node\">stable_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del\">hlist_del</a>(&amp;<a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#stable_node\">stable_node</a>-><a class=\"id\" href=\"#hlist\">hlist</a>.<a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_pages_sharing\">ksm_pages_sharing</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_pages_shared\">ksm_pages_shared</a>--;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_drop_anon_vma\">ksm_drop_anon_vma</a>(<a class=\"id\" href=\"#rmap_item\">rmap_item</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#address\">address</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#address\">address</a> &amp; <a class=\"id\" href=\"#UNSTABLE_FLAG\">UNSTABLE_FLAG</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#age\">age</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Usually ksmd can and must skip the rb_erase, because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * root_unstable_tree was already reset to RB_ROOT.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * But be careful when an mm is exiting: do the rb_erase</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if this rmap_item was inserted by this scan, rather</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * than left over from before.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#age\">age</a> = (unsigned char)(<a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#seqnr\">seqnr</a> - <a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#age\">age</a> &gt; 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#age\">age</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_erase\">rb_erase</a>(&amp;<a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#root_unstable_tree\">root_unstable_tree</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_pages_unshared\">ksm_pages_unshared</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#address\">address</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we're called from many long loops */</span>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#remove_trailing_rmap_items\">remove_trailing_rmap_items</a>(struct <a class=\"id\" href=\"#mm_slot\">mm_slot</a> *<a class=\"id\" href=\"#mm_slot\">mm_slot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> **<a class=\"id\" href=\"#rmap_list\">rmap_list</a>)", 
"{", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#rmap_list\">rmap_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#rmap_item\">rmap_item</a> = *<a class=\"id\" href=\"#rmap_list\">rmap_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rmap_list\">rmap_list</a> = <a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#rmap_list\">rmap_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_rmap_item_from_tree\">remove_rmap_item_from_tree</a>(<a class=\"id\" href=\"#rmap_item\">rmap_item</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_rmap_item\">free_rmap_item</a>(<a class=\"id\" href=\"#rmap_item\">rmap_item</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Though it's very tempting to unmerge in_stable_tree(rmap_item)s rather</span>", 
"<span class=\"comment\"> * than check every pte of a given vma, the locking doesn't quite work for</span>", 
"<span class=\"comment\"> * that - an rmap_item is assigned to the stable tree after inserting ksm</span>", 
"<span class=\"comment\"> * page and upping mmap_sem.  Nor does it fit with the way we skip dup'ing</span>", 
"<span class=\"comment\"> * rmap_items from parent to child at fork time (so as not to waste time</span>", 
"<span class=\"comment\"> * if exit comes before the next scan reaches it).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Similarly, although we'd like to remove rmap_items (so updating counts</span>", 
"<span class=\"comment\"> * and freeing memory) when unmerging an area, it's easier to leave that</span>", 
"<span class=\"comment\"> * to the next pass of ksmd - consider, for example, how ksmd might be</span>", 
"<span class=\"comment\"> * in cmp_and_merge_page on one of the rmap_items we would be removing.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#unmerge_ksm_pages\">unmerge_ksm_pages</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#end\">end</a> && !<a class=\"id\" href=\"#err\">err</a>; <a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ksm_test_exit\">ksm_test_exit</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#break_ksm\">break_ksm</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSFS\">CONFIG_SYSFS</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Only called through the sysfs control interface:</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#unmerge_and_remove_all_rmap_items\">unmerge_and_remove_all_rmap_items</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_slot\">mm_slot</a> *<a class=\"id\" href=\"#mm_slot\">mm_slot</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#ksm_mmlist_lock\">ksm_mmlist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#mm_slot\">mm_slot</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#ksm_mm_head\">ksm_mm_head</a>.<a class=\"id\" href=\"#mm_list\">mm_list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_slot\">mm_slot</a>, <a class=\"id\" href=\"#mm_list\">mm_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#ksm_mmlist_lock\">ksm_mmlist_lock</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#mm_slot\">mm_slot</a> = <a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#mm_slot\">mm_slot</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm_slot\">mm_slot</a> != &amp;<a class=\"id\" href=\"#ksm_mm_head\">ksm_mm_head</a>; <a class=\"id\" href=\"#mm_slot\">mm_slot</a> = <a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#mm_slot\">mm_slot</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#mm_slot\">mm_slot</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a>; <a class=\"id\" href=\"#vma\">vma</a>; <a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ksm_test_exit\">ksm_test_exit</a>(<a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_MERGEABLE\">VM_MERGEABLE</a>) || !<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#unmerge_ksm_pages\">unmerge_ksm_pages</a>(<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_trailing_rmap_items\">remove_trailing_rmap_items</a>(<a class=\"id\" href=\"#mm_slot\">mm_slot</a>, &amp;<a class=\"id\" href=\"#mm_slot\">mm_slot</a>-><a class=\"id\" href=\"#rmap_list\">rmap_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#ksm_mmlist_lock\">ksm_mmlist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#mm_slot\">mm_slot</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#mm_slot\">mm_slot</a>-><a class=\"id\" href=\"#mm_list\">mm_list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_slot\">mm_slot</a>, <a class=\"id\" href=\"#mm_list\">mm_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ksm_test_exit\">ksm_test_exit</a>(<a class=\"id\" href=\"#mm\">mm</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del\">hlist_del</a>(&amp;<a class=\"id\" href=\"#mm_slot\">mm_slot</a>-><a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#mm_slot\">mm_slot</a>-><a class=\"id\" href=\"#mm_list\">mm_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#ksm_mmlist_lock\">ksm_mmlist_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_mm_slot\">free_mm_slot</a>(<a class=\"id\" href=\"#mm_slot\">mm_slot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#MMF_VM_MERGEABLE\">MMF_VM_MERGEABLE</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmdrop\">mmdrop</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#ksm_mmlist_lock\">ksm_mmlist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#seqnr\">seqnr</a> = 0;", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#ksm_mmlist_lock\">ksm_mmlist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#mm_slot\">mm_slot</a> = &amp;<a class=\"id\" href=\"#ksm_mm_head\">ksm_mm_head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#ksm_mmlist_lock\">ksm_mmlist_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SYSFS */</span>", 
"", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#calc_checksum\">calc_checksum</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#checksum\">checksum</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#checksum\">checksum</a> = <a class=\"id\" href=\"#jhash2\">jhash2</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> / 4, 17);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#checksum\">checksum</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#memcmp_pages\">memcmp_pages</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page1\">page1</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page2\">page2</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#addr1\">addr1</a>, *<a class=\"id\" href=\"#addr2\">addr2</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr1\">addr1</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page1\">page1</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr2\">addr2</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page2\">page2</a>, <a class=\"id\" href=\"#KM_USER1\">KM_USER1</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#addr1\">addr1</a>, <a class=\"id\" href=\"#addr2\">addr2</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#addr2\">addr2</a>, <a class=\"id\" href=\"#KM_USER1\">KM_USER1</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#addr1\">addr1</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pages_identical\">pages_identical</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page1\">page1</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page2\">page2</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#memcmp_pages\">memcmp_pages</a>(<a class=\"id\" href=\"#page1\">page1</a>, <a class=\"id\" href=\"#page2\">page2</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#write_protect_page\">write_protect_page</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#orig_pte\">orig_pte</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#swapped\">swapped</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#page_address_in_vma\">page_address_in_vma</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> == -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptep\">ptep</a> = <a class=\"id\" href=\"#page_check_address\">page_check_address</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ptep\">ptep</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_write\">pte_write</a>(*<a class=\"id\" href=\"#ptep\">ptep</a>) || <a class=\"id\" href=\"#pte_dirty\">pte_dirty</a>(*<a class=\"id\" href=\"#ptep\">ptep</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swapped\">swapped</a> = <a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_cache_page\">flush_cache_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Ok this is tricky, when get_user_pages_fast() run it doesnt</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * take any lock, therefore the check that we are going to make</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * with the pagecount against the mapcount is racey and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * O_DIRECT can happen right after the check.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * So we clear the pte and flush the tlb before the check</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * this assure us that no O_DIRECT can happen after the check</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * or in the middle of the check.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#ptep_clear_flush\">ptep_clear_flush</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Check that no O_DIRECT or similar I/O is in progress on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_mapcount\">page_mapcount</a>(<a class=\"id\" href=\"#page\">page</a>) + 1 + <a class=\"id\" href=\"#swapped\">swapped</a> != <a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_dirty\">pte_dirty</a>(<a class=\"id\" href=\"#entry\">entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#pte_mkclean\">pte_mkclean</a>(<a class=\"id\" href=\"#pte_wrprotect\">pte_wrprotect</a>(<a class=\"id\" href=\"#entry\">entry</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at_notify\">set_pte_at_notify</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#orig_pte\">orig_pte</a> = *<a class=\"id\" href=\"#ptep\">ptep</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * replace_page - replace page in vma by new ksm page</span>", 
"<span class=\"comment\"> * @vma:      vma that holds the pte pointing to page</span>", 
"<span class=\"comment\"> * @page:     the page we are replacing by kpage</span>", 
"<span class=\"comment\"> * @kpage:    the ksm page we replace page by</span>", 
"<span class=\"comment\"> * @orig_pte: the original value of the pte</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, -EFAULT on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#replace_page\">replace_page</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#kpage\">kpage</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#orig_pte\">orig_pte</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#page_address_in_vma\">page_address_in_vma</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> == -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgd_offset\">pgd_offset</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pgd_present\">pgd_present</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pud_present\">pud_present</a>(*<a class=\"id\" href=\"#pud\">pud</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pmd_present\">pmd_present</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptep\">ptep</a> = <a class=\"id\" href=\"#pte_offset_map_lock\">pte_offset_map_lock</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_same\">pte_same</a>(*<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#orig_pte\">orig_pte</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#kpage\">kpage</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_add_anon_rmap\">page_add_anon_rmap</a>(<a class=\"id\" href=\"#kpage\">kpage</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_cache_page\">flush_cache_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(*<a class=\"id\" href=\"#ptep\">ptep</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptep_clear_flush\">ptep_clear_flush</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at_notify\">set_pte_at_notify</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#mk_pte\">mk_pte</a>(<a class=\"id\" href=\"#kpage\">kpage</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_remove_rmap\">page_remove_rmap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * try_to_merge_one_page - take two pages and merge them into one</span>", 
"<span class=\"comment\"> * @vma: the vma that holds the pte pointing to page</span>", 
"<span class=\"comment\"> * @page: the PageAnon page that we want to replace with kpage</span>", 
"<span class=\"comment\"> * @kpage: the PageKsm page that we want to map instead of page,</span>", 
"<span class=\"comment\"> *         or NULL the first time when we want to use page as kpage.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function returns 0 if the pages were merged, -EFAULT otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#try_to_merge_one_page\">try_to_merge_one_page</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#kpage\">kpage</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#orig_pte\">orig_pte</a> = <a class=\"id\" href=\"#__pte\">__pte</a>(0);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#kpage\">kpage</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ksm page forked */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_MERGEABLE\">VM_MERGEABLE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need the page lock to read a stable PageSwapCache in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * write_protect_page().  We use trylock_page() instead of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lock_page() because we don't want to wait here - we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * prefer to continue scanning and merging different pages,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then come back to this page when it is unlocked.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#trylock_page\">trylock_page</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this anonymous page is mapped only here, its pte may need</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to be write-protected.  If it's mapped elsewhere, all of its</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ptes are necessarily already write-protected.  But in either</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * case, we need to lock and check page_count is not raised.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write_protect_page\">write_protect_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#orig_pte\">orig_pte</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#kpage\">kpage</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * While we hold page lock, upgrade page from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * PageAnon+anon_vma to PageKsm+NULL stable_node:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * stable_tree_insert() will update stable_node.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_stable_node\">set_page_stable_node</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_page_accessed\">mark_page_accessed</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#pages_identical\">pages_identical</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#kpage\">kpage</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#replace_page\">replace_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#kpage\">kpage</a>, <a class=\"id\" href=\"#orig_pte\">orig_pte</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>) && <a class=\"id\" href=\"#kpage\">kpage</a> && !<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#munlock_vma_page\">munlock_vma_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageMlocked\">PageMlocked</a>(<a class=\"id\" href=\"#kpage\">kpage</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#kpage\">kpage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mlock_vma_page\">mlock_vma_page</a>(<a class=\"id\" href=\"#kpage\">kpage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#kpage\">kpage</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for final unlock */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * try_to_merge_with_ksm_page - like try_to_merge_two_pages,</span>", 
"<span class=\"comment\"> * but no new kernel page is allocated: kpage must already be a ksm page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function returns 0 if the pages were merged, -EFAULT otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#try_to_merge_with_ksm_page\">try_to_merge_with_ksm_page</a>(struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#rmap_item\">rmap_item</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#kpage\">kpage</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ksm_test_exit\">ksm_test_exit</a>(<a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma\">find_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a> || <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &gt; <a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#address\">address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#try_to_merge_one_page\">try_to_merge_one_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#kpage\">kpage</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Must get reference to anon_vma while still holding mmap_sem */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hold_anon_vma\">hold_anon_vma</a>(<a class=\"id\" href=\"#rmap_item\">rmap_item</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * try_to_merge_two_pages - take two identical pages and prepare them</span>", 
"<span class=\"comment\"> * to be merged into one page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function returns the kpage if we successfully merged two identical</span>", 
"<span class=\"comment\"> * pages into one ksm page, NULL otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that this function upgrades page to ksm page: if one of the pages</span>", 
"<span class=\"comment\"> * is already a ksm page, try_to_merge_with_ksm_page should be used.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#try_to_merge_two_pages\">try_to_merge_two_pages</a>(struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#rmap_item\">rmap_item</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#tree_rmap_item\">tree_rmap_item</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#tree_page\">tree_page</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#try_to_merge_with_ksm_page\">try_to_merge_with_ksm_page</a>(<a class=\"id\" href=\"#rmap_item\">rmap_item</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#try_to_merge_with_ksm_page\">try_to_merge_with_ksm_page</a>(<a class=\"id\" href=\"#tree_rmap_item\">tree_rmap_item</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tree_page\">tree_page</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If that fails, we have a ksm page with only one pte</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pointing to it: so break it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#break_cow\">break_cow</a>(<a class=\"id\" href=\"#rmap_item\">rmap_item</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a> ? <a class=\"id\" href=\"#NULL\">NULL</a> : <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * stable_tree_search - search for page inside the stable tree</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function checks if there is a page inside the stable tree</span>", 
"<span class=\"comment\"> * with identical content to the page that we are scanning right now.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function returns the stable tree node of identical content if found,</span>", 
"<span class=\"comment\"> * NULL otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#stable_tree_search\">stable_tree_search</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#root_stable_tree\">root_stable_tree</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stable_node\">stable_node</a> *<a class=\"id\" href=\"#stable_node\">stable_node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stable_node\">stable_node</a> = <a class=\"id\" href=\"#page_stable_node\">page_stable_node</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#stable_node\">stable_node</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ksm page forked */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#tree_page\">tree_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stable_node\">stable_node</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#stable_node\">stable_node</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tree_page\">tree_page</a> = <a class=\"id\" href=\"#get_ksm_page\">get_ksm_page</a>(<a class=\"id\" href=\"#stable_node\">stable_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tree_page\">tree_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#memcmp_pages\">memcmp_pages</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#tree_page\">tree_page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#tree_page\">tree_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#tree_page\">tree_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tree_page\">tree_page</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * stable_tree_insert - insert rmap_item pointing to new ksm page</span>", 
"<span class=\"comment\"> * into the stable tree.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function returns the stable tree node just allocated on success,</span>", 
"<span class=\"comment\"> * NULL otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#stable_node\">stable_node</a> *<a class=\"id\" href=\"#stable_tree_insert\">stable_tree_insert</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#kpage\">kpage</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> **<a class=\"id\" href=\"#new\">new</a> = &amp;<a class=\"id\" href=\"#root_stable_tree\">root_stable_tree</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stable_node\">stable_node</a> *<a class=\"id\" href=\"#stable_node\">stable_node</a>;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#new\">new</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#tree_page\">tree_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stable_node\">stable_node</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(*<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#stable_node\">stable_node</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tree_page\">tree_page</a> = <a class=\"id\" href=\"#get_ksm_page\">get_ksm_page</a>(<a class=\"id\" href=\"#stable_node\">stable_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tree_page\">tree_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#memcmp_pages\">memcmp_pages</a>(<a class=\"id\" href=\"#kpage\">kpage</a>, <a class=\"id\" href=\"#tree_page\">tree_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#tree_page\">tree_page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * It is not a bug that stable_tree_search() didn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * find this node: because at that time our page was</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * not yet write-protected, so may have changed since.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stable_node\">stable_node</a> = <a class=\"id\" href=\"#alloc_stable_node\">alloc_stable_node</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#stable_node\">stable_node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_link_node\">rb_link_node</a>(&amp;<a class=\"id\" href=\"#stable_node\">stable_node</a>-><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_insert_color\">rb_insert_color</a>(&amp;<a class=\"id\" href=\"#stable_node\">stable_node</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#root_stable_tree\">root_stable_tree</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#stable_node\">stable_node</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stable_node\">stable_node</a>-><a class=\"id\" href=\"#kpfn\">kpfn</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#kpage\">kpage</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_stable_node\">set_page_stable_node</a>(<a class=\"id\" href=\"#kpage\">kpage</a>, <a class=\"id\" href=\"#stable_node\">stable_node</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#stable_node\">stable_node</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * unstable_tree_search_insert - search for identical page,</span>", 
"<span class=\"comment\"> * else insert rmap_item into the unstable tree.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function searches for a page in the unstable tree identical to the</span>", 
"<span class=\"comment\"> * page currently being scanned; and if no identical page is found in the</span>", 
"<span class=\"comment\"> * tree, we insert rmap_item as a new object into the unstable tree.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function returns pointer to rmap_item found to be identical</span>", 
"<span class=\"comment\"> * to the currently scanned page, NULL otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function does both searching and inserting, because they share</span>", 
"<span class=\"comment\"> * the same walking algorithm in an rbtree.</span>", 
"<span class=\"comment\"> */</span>", 
"static", 
"struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#unstable_tree_search_insert\">unstable_tree_search_insert</a>(struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#rmap_item\">rmap_item</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#tree_pagep\">tree_pagep</a>)", 
"", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> **<a class=\"id\" href=\"#new\">new</a> = &amp;<a class=\"id\" href=\"#root_unstable_tree\">root_unstable_tree</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#new\">new</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#tree_rmap_item\">tree_rmap_item</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#tree_page\">tree_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tree_rmap_item\">tree_rmap_item</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(*<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tree_page\">tree_page</a> = <a class=\"id\" href=\"#get_mergeable_page\">get_mergeable_page</a>(<a class=\"id\" href=\"#tree_rmap_item\">tree_rmap_item</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR_OR_NULL\">IS_ERR_OR_NULL</a>(<a class=\"id\" href=\"#tree_page\">tree_page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't substitute a ksm page for a forked page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#tree_page\">tree_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#tree_page\">tree_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#memcmp_pages\">memcmp_pages</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#tree_page\">tree_page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#tree_page\">tree_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#tree_page\">tree_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tree_pagep\">tree_pagep</a> = <a class=\"id\" href=\"#tree_page\">tree_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tree_rmap_item\">tree_rmap_item</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#address\">address</a> |= <a class=\"id\" href=\"#UNSTABLE_FLAG\">UNSTABLE_FLAG</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#address\">address</a> |= (<a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#seqnr\">seqnr</a> &amp; <a class=\"id\" href=\"#SEQNR_MASK\">SEQNR_MASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_link_node\">rb_link_node</a>(&amp;<a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_insert_color\">rb_insert_color</a>(&amp;<a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#root_unstable_tree\">root_unstable_tree</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ksm_pages_unshared\">ksm_pages_unshared</a>++;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * stable_tree_append - add another rmap_item to the linked list of</span>", 
"<span class=\"comment\"> * rmap_items hanging off a given node of the stable tree, all sharing</span>", 
"<span class=\"comment\"> * the same ksm page.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#stable_tree_append\">stable_tree_append</a>(struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#rmap_item\">rmap_item</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#stable_node\">stable_node</a> *<a class=\"id\" href=\"#stable_node\">stable_node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#stable_node\">stable_node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#address\">address</a> |= <a class=\"id\" href=\"#STABLE_FLAG\">STABLE_FLAG</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#hlist\">hlist</a>, &amp;<a class=\"id\" href=\"#stable_node\">stable_node</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#hlist\">hlist</a>.<a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_pages_sharing\">ksm_pages_sharing</a>++;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_pages_shared\">ksm_pages_shared</a>++;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cmp_and_merge_page - first see if page can be merged into the stable tree;</span>", 
"<span class=\"comment\"> * if not, compare checksum to previous and if it's the same, see if page can</span>", 
"<span class=\"comment\"> * be inserted into the unstable tree, or merged with a page already there and</span>", 
"<span class=\"comment\"> * both transferred to the stable tree.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @page: the page that we are searching identical page to.</span>", 
"<span class=\"comment\"> * @rmap_item: the reverse mapping into the virtual address of this page</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cmp_and_merge_page\">cmp_and_merge_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#rmap_item\">rmap_item</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#tree_rmap_item\">tree_rmap_item</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#tree_page\">tree_page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stable_node\">stable_node</a> *<a class=\"id\" href=\"#stable_node\">stable_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#kpage\">kpage</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#checksum\">checksum</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remove_rmap_item_from_tree\">remove_rmap_item_from_tree</a>(<a class=\"id\" href=\"#rmap_item\">rmap_item</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We first start with searching the page inside the stable tree */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kpage\">kpage</a> = <a class=\"id\" href=\"#stable_tree_search\">stable_tree_search</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kpage\">kpage</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#try_to_merge_with_ksm_page\">try_to_merge_with_ksm_page</a>(<a class=\"id\" href=\"#rmap_item\">rmap_item</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#kpage\">kpage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The page was successfully merged:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * add its rmap_item to the stable tree.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#kpage\">kpage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stable_tree_append\">stable_tree_append</a>(<a class=\"id\" href=\"#rmap_item\">rmap_item</a>, <a class=\"id\" href=\"#page_stable_node\">page_stable_node</a>(<a class=\"id\" href=\"#kpage\">kpage</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#kpage\">kpage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#kpage\">kpage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the hash value of the page has changed from the last time</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we calculated it, this page is changing frequently: therefore we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * don't want to insert it in the unstable tree, and we don't want</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to waste our time searching for something identical to it there.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#checksum\">checksum</a> = <a class=\"id\" href=\"#calc_checksum\">calc_checksum</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#oldchecksum\">oldchecksum</a> != <a class=\"id\" href=\"#checksum\">checksum</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#oldchecksum\">oldchecksum</a> = <a class=\"id\" href=\"#checksum\">checksum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tree_rmap_item\">tree_rmap_item</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unstable_tree_search_insert\">unstable_tree_search_insert</a>(<a class=\"id\" href=\"#rmap_item\">rmap_item</a>, <a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#tree_page\">tree_page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tree_rmap_item\">tree_rmap_item</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kpage\">kpage</a> = <a class=\"id\" href=\"#try_to_merge_two_pages\">try_to_merge_two_pages</a>(<a class=\"id\" href=\"#rmap_item\">rmap_item</a>, <a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tree_rmap_item\">tree_rmap_item</a>, <a class=\"id\" href=\"#tree_page\">tree_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#tree_page\">tree_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * As soon as we merge this page, we want to remove the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * rmap_item of the page we have merged with from the unstable</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * tree, and insert it instead as new node in the stable tree.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kpage\">kpage</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_rmap_item_from_tree\">remove_rmap_item_from_tree</a>(<a class=\"id\" href=\"#tree_rmap_item\">tree_rmap_item</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#kpage\">kpage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stable_node\">stable_node</a> = <a class=\"id\" href=\"#stable_tree_insert\">stable_tree_insert</a>(<a class=\"id\" href=\"#kpage\">kpage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#stable_node\">stable_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stable_tree_append\">stable_tree_append</a>(<a class=\"id\" href=\"#tree_rmap_item\">tree_rmap_item</a>, <a class=\"id\" href=\"#stable_node\">stable_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stable_tree_append\">stable_tree_append</a>(<a class=\"id\" href=\"#rmap_item\">rmap_item</a>, <a class=\"id\" href=\"#stable_node\">stable_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#kpage\">kpage</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If we fail to insert the page into the stable tree,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we will have 2 virtual addresses that are pointing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to a ksm page left outside the stable tree,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * in which case we need to break_cow on both.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#stable_node\">stable_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#break_cow\">break_cow</a>(<a class=\"id\" href=\"#tree_rmap_item\">tree_rmap_item</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#break_cow\">break_cow</a>(<a class=\"id\" href=\"#rmap_item\">rmap_item</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#get_next_rmap_item\">get_next_rmap_item</a>(struct <a class=\"id\" href=\"#mm_slot\">mm_slot</a> *<a class=\"id\" href=\"#mm_slot\">mm_slot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> **<a class=\"id\" href=\"#rmap_list\">rmap_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#rmap_item\">rmap_item</a>;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#rmap_list\">rmap_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rmap_item\">rmap_item</a> = *<a class=\"id\" href=\"#rmap_list\">rmap_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#address\">address</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>) == <a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rmap_item\">rmap_item</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#address\">address</a> &gt; <a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rmap_list\">rmap_list</a> = <a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#rmap_list\">rmap_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_rmap_item_from_tree\">remove_rmap_item_from_tree</a>(<a class=\"id\" href=\"#rmap_item\">rmap_item</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_rmap_item\">free_rmap_item</a>(<a class=\"id\" href=\"#rmap_item\">rmap_item</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rmap_item\">rmap_item</a> = <a class=\"id\" href=\"#alloc_rmap_item\">alloc_rmap_item</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rmap_item\">rmap_item</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* It has already been zeroed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#mm_slot\">mm_slot</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#rmap_list\">rmap_list</a> = *<a class=\"id\" href=\"#rmap_list\">rmap_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rmap_list\">rmap_list</a> = <a class=\"id\" href=\"#rmap_item\">rmap_item</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rmap_item\">rmap_item</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#scan_get_next_rmap_item\">scan_get_next_rmap_item</a>(struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_slot\">mm_slot</a> *<a class=\"id\" href=\"#slot\">slot</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#rmap_item\">rmap_item</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ksm_mm_head\">ksm_mm_head</a>.<a class=\"id\" href=\"#mm_list\">mm_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#mm_slot\">mm_slot</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slot\">slot</a> == &amp;<a class=\"id\" href=\"#ksm_mm_head\">ksm_mm_head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root_unstable_tree\">root_unstable_tree</a> = <a class=\"id\" href=\"#RB_ROOT\">RB_ROOT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#ksm_mmlist_lock\">ksm_mmlist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#mm_list\">mm_list</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#mm_slot\">mm_slot</a>, <a class=\"id\" href=\"#mm_list\">mm_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#mm_slot\">mm_slot</a> = <a class=\"id\" href=\"#slot\">slot</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#ksm_mmlist_lock\">ksm_mmlist_lock</a>);", 
"<a class=\"id\" href=\"#next_mm\">next_mm</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#address\">address</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#rmap_list\">rmap_list</a> = &amp;<a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#rmap_list\">rmap_list</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ksm_test_exit\">ksm_test_exit</a>(<a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma\">find_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#vma\">vma</a>; <a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_MERGEABLE\">VM_MERGEABLE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#address\">address</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#address\">address</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ksm_test_exit\">ksm_test_exit</a>(<a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#follow_page\">follow_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#FOLL_GET\">FOLL_GET</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR_OR_NULL\">IS_ERR_OR_NULL</a>(*<a class=\"id\" href=\"#page\">page</a>) && <a class=\"id\" href=\"#PageAnon\">PageAnon</a>(*<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_anon_page\">flush_anon_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, *<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_dcache_page\">flush_dcache_page</a>(*<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rmap_item\">rmap_item</a> = <a class=\"id\" href=\"#get_next_rmap_item\">get_next_rmap_item</a>(<a class=\"id\" href=\"#slot\">slot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#rmap_list\">rmap_list</a>, <a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rmap_item\">rmap_item</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#rmap_list\">rmap_list</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#rmap_item\">rmap_item</a>-><a class=\"id\" href=\"#rmap_list\">rmap_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#address\">address</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(*<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rmap_item\">rmap_item</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR_OR_NULL\">IS_ERR_OR_NULL</a>(*<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(*<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#address\">address</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ksm_test_exit\">ksm_test_exit</a>(<a class=\"id\" href=\"#mm\">mm</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#address\">address</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#rmap_list\">rmap_list</a> = &amp;<a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#rmap_list\">rmap_list</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Nuke all the rmap_items that are above this current rmap:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because there were no VM_MERGEABLE vmas with such addresses.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remove_trailing_rmap_items\">remove_trailing_rmap_items</a>(<a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#rmap_list\">rmap_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#ksm_mmlist_lock\">ksm_mmlist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#mm_slot\">mm_slot</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#mm_list\">mm_list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_slot\">mm_slot</a>, <a class=\"id\" href=\"#mm_list\">mm_list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#address\">address</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We've completed a full scan of all vmas, holding mmap_sem</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * throughout, and found no VM_MERGEABLE: so do the same as</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * __ksm_exit does to remove this mm from all our lists now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This applies either when cleaning up after __ksm_exit</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (but beware: we can reach here even before __ksm_exit),</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * or when all VM_MERGEABLE areas have been unmapped (and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mmap_sem then protects against race with MADV_MERGEABLE).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del\">hlist_del</a>(&amp;<a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#mm_list\">mm_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#ksm_mmlist_lock\">ksm_mmlist_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_mm_slot\">free_mm_slot</a>(<a class=\"id\" href=\"#slot\">slot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#MMF_VM_MERGEABLE\">MMF_VM_MERGEABLE</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmdrop\">mmdrop</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#ksm_mmlist_lock\">ksm_mmlist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Repeat until we've completed scanning the whole list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#mm_slot\">mm_slot</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slot\">slot</a> != &amp;<a class=\"id\" href=\"#ksm_mm_head\">ksm_mm_head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next_mm\">next_mm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#seqnr\">seqnr</a>++;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ksm_do_scan  - the ksm scanner main worker function.</span>", 
"<span class=\"comment\"> * @scan_npages - number of pages we want to scan before we return.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ksm_do_scan\">ksm_do_scan</a>(unsigned int <a class=\"id\" href=\"#scan_npages\">scan_npages</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rmap_item\">rmap_item</a> *<a class=\"id\" href=\"#rmap_item\">rmap_item</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#scan_npages\">scan_npages</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rmap_item\">rmap_item</a> = <a class=\"id\" href=\"#scan_get_next_rmap_item\">scan_get_next_rmap_item</a>(&amp;<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rmap_item\">rmap_item</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageKsm\">PageKsm</a>(<a class=\"id\" href=\"#page\">page</a>) || !<a class=\"id\" href=\"#in_stable_tree\">in_stable_tree</a>(<a class=\"id\" href=\"#rmap_item\">rmap_item</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmp_and_merge_page\">cmp_and_merge_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#rmap_item\">rmap_item</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ksmd_should_run\">ksmd_should_run</a>(void)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ksm_run\">ksm_run</a> &amp; <a class=\"id\" href=\"#KSM_RUN_MERGE\">KSM_RUN_MERGE</a>) && !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ksm_mm_head\">ksm_mm_head</a>.<a class=\"id\" href=\"#mm_list\">mm_list</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ksm_scan_thread\">ksm_scan_thread</a>(void *<a class=\"id\" href=\"#nothing\">nothing</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_user_nice\">set_user_nice</a>(<a class=\"id\" href=\"#current\">current</a>, 5);", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ksm_thread_mutex\">ksm_thread_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ksmd_should_run\">ksmd_should_run</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_do_scan\">ksm_do_scan</a>(<a class=\"id\" href=\"#ksm_thread_pages_to_scan\">ksm_thread_pages_to_scan</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ksm_thread_mutex\">ksm_thread_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ksmd_should_run\">ksmd_should_run</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_timeout_interruptible\">schedule_timeout_interruptible</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#ksm_thread_sleep_millisecs\">ksm_thread_sleep_millisecs</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_event_interruptible\">wait_event_interruptible</a>(<a class=\"id\" href=\"#ksm_thread_wait\">ksm_thread_wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksmd_should_run\">ksmd_should_run</a>() || <a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#ksm_madvise\">ksm_madvise</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>, int <a class=\"id\" href=\"#advice\">advice</a>, unsigned long *<a class=\"id\" href=\"#vm_flags\">vm_flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#advice\">advice</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MADV_MERGEABLE\">MADV_MERGEABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Be somewhat over-protective for now!</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; (<a class=\"id\" href=\"#VM_MERGEABLE\">VM_MERGEABLE</a> | <a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a>  | <a class=\"id\" href=\"#VM_MAYSHARE\">VM_MAYSHARE</a>   |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#VM_PFNMAP\">VM_PFNMAP</a>    | <a class=\"id\" href=\"#VM_IO\">VM_IO</a>      | <a class=\"id\" href=\"#VM_DONTEXPAND\">VM_DONTEXPAND</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#VM_RESERVED\">VM_RESERVED</a>  | <a class=\"id\" href=\"#VM_HUGETLB\">VM_HUGETLB</a> | <a class=\"id\" href=\"#VM_INSERTPAGE\">VM_INSERTPAGE</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#VM_NONLINEAR\">VM_NONLINEAR</a> | <a class=\"id\" href=\"#VM_MIXEDMAP\">VM_MIXEDMAP</a> | <a class=\"id\" href=\"#VM_SAO\">VM_SAO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* just ignore the advice */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#MMF_VM_MERGEABLE\">MMF_VM_MERGEABLE</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__ksm_enter\">__ksm_enter</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#vm_flags\">vm_flags</a> |= <a class=\"id\" href=\"#VM_MERGEABLE\">VM_MERGEABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MADV_UNMERGEABLE\">MADV_UNMERGEABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(*<a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_MERGEABLE\">VM_MERGEABLE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* just ignore the advice */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#unmerge_ksm_pages\">unmerge_ksm_pages</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#vm_flags\">vm_flags</a> &= ~<a class=\"id\" href=\"#VM_MERGEABLE\">VM_MERGEABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__ksm_enter\">__ksm_enter</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_slot\">mm_slot</a> *<a class=\"id\" href=\"#mm_slot\">mm_slot</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#needs_wakeup\">needs_wakeup</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_slot\">mm_slot</a> = <a class=\"id\" href=\"#alloc_mm_slot\">alloc_mm_slot</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm_slot\">mm_slot</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check ksm_run too?  Would need tighter locking */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#needs_wakeup\">needs_wakeup</a> = <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ksm_mm_head\">ksm_mm_head</a>.<a class=\"id\" href=\"#mm_list\">mm_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#ksm_mmlist_lock\">ksm_mmlist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insert_to_mm_slots_hash\">insert_to_mm_slots_hash</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#mm_slot\">mm_slot</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Insert just behind the scanning cursor, to let the area settle</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * down a little; when fork is followed by immediate exec, we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * want ksmd to waste time setting up and tearing down an rmap_list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#mm_slot\">mm_slot</a>-><a class=\"id\" href=\"#mm_list\">mm_list</a>, &amp;<a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#mm_slot\">mm_slot</a>-><a class=\"id\" href=\"#mm_list\">mm_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#ksm_mmlist_lock\">ksm_mmlist_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#MMF_VM_MERGEABLE\">MMF_VM_MERGEABLE</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_count\">mm_count</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#needs_wakeup\">needs_wakeup</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#ksm_thread_wait\">ksm_thread_wait</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__ksm_exit\">__ksm_exit</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_slot\">mm_slot</a> *<a class=\"id\" href=\"#mm_slot\">mm_slot</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#easy_to_free\">easy_to_free</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This process is exiting: if it's straightforward (as is the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * case when ksmd was never running), free mm_slot immediately.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But if it's at the cursor or has rmap_items linked to it, use</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mmap_sem to synchronize with any break_cows before pagetables</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are freed, and leave the mm_slot on the list for ksmd to free.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Beware: ksm may already have noticed it exiting and freed the slot.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#ksm_mmlist_lock\">ksm_mmlist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_slot\">mm_slot</a> = <a class=\"id\" href=\"#get_mm_slot\">get_mm_slot</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm_slot\">mm_slot</a> && <a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#mm_slot\">mm_slot</a> != <a class=\"id\" href=\"#mm_slot\">mm_slot</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm_slot\">mm_slot</a>-><a class=\"id\" href=\"#rmap_list\">rmap_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del\">hlist_del</a>(&amp;<a class=\"id\" href=\"#mm_slot\">mm_slot</a>-><a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#mm_slot\">mm_slot</a>-><a class=\"id\" href=\"#mm_list\">mm_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#easy_to_free\">easy_to_free</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#mm_slot\">mm_slot</a>-><a class=\"id\" href=\"#mm_list\">mm_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#ksm_scan\">ksm_scan</a>.<a class=\"id\" href=\"#mm_slot\">mm_slot</a>-><a class=\"id\" href=\"#mm_list\">mm_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
];
xr_frag_insert('l/30/219d4fd782e499baf5af776e8683a8c6be14ab.xr', __xr_tmp);
