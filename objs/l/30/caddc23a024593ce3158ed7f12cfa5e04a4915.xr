var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"#if 0", 
"<span class=\"ts\"/><span class=\"comment\">/* shows regressions, re-enable for 2.6.29 */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * run any timers that can be run now, at this point</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before calculating the idle duration etc.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_peek_ahead_timers\">hrtimer_peek_ahead_timers</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Call the device's prepare function before calling the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * governor's select function.  -&gt;prepare gives the device's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cpuidle driver a chance to update any dynamic information</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of its cpuidle states for the current idle period, e.g.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * state availability, latencies, residencies, etc.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#prepare\">prepare</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#prepare\">prepare</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ask the governor for the next state */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_state\">next_state</a> = <a class=\"id\" href=\"#cpuidle_curr_governor\">cpuidle_curr_governor</a>-><a class=\"id\" href=\"#select\">select</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_resched\">need_resched</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#target_state\">target_state</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#next_state\">next_state</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* enter the state and update stats */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#last_state\">last_state</a> = <a class=\"id\" href=\"#target_state\">target_state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#last_residency\">last_residency</a> = <a class=\"id\" href=\"#target_state\">target_state</a>-><a class=\"id\" href=\"#enter\">enter</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#target_state\">target_state</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#last_state\">last_state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#target_state\">target_state</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#last_state\">last_state</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#target_state\">target_state</a>-><a class=\"id\" href=\"#time\">time</a> += (unsigned long long)<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#last_residency\">last_residency</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#target_state\">target_state</a>-><a class=\"id\" href=\"#usage\">usage</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* give the governor an opportunity to reflect on the outcome */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuidle_curr_governor\">cpuidle_curr_governor</a>-><a class=\"id\" href=\"#reflect\">reflect</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuidle_curr_governor\">cpuidle_curr_governor</a>-><a class=\"id\" href=\"#reflect\">reflect</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_power_end\">trace_power_end</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpuidle_install_idle_handler - installs the cpuidle idle loop handler</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cpuidle_install_idle_handler\">cpuidle_install_idle_handler</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#enabled_devices\">enabled_devices</a> && (<a class=\"id\" href=\"#pm_idle\">pm_idle</a> != <a class=\"id\" href=\"#cpuidle_idle_call\">cpuidle_idle_call</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make sure all changes finished before we switch to new idle */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_idle\">pm_idle</a> = <a class=\"id\" href=\"#cpuidle_idle_call\">cpuidle_idle_call</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpuidle_uninstall_idle_handler - uninstalls the cpuidle idle loop handler</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cpuidle_uninstall_idle_handler\">cpuidle_uninstall_idle_handler</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#enabled_devices\">enabled_devices</a> && <a class=\"id\" href=\"#pm_idle_old\">pm_idle_old</a> && (<a class=\"id\" href=\"#pm_idle\">pm_idle</a> != <a class=\"id\" href=\"#pm_idle_old\">pm_idle_old</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_idle\">pm_idle</a> = <a class=\"id\" href=\"#pm_idle_old\">pm_idle_old</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuidle_kick_cpus\">cpuidle_kick_cpus</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpuidle_pause_and_lock - temporarily disables CPUIDLE</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cpuidle_pause_and_lock\">cpuidle_pause_and_lock</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cpuidle_lock\">cpuidle_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuidle_uninstall_idle_handler\">cpuidle_uninstall_idle_handler</a>();", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#cpuidle_pause_and_lock\">cpuidle_pause_and_lock</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpuidle_resume_and_unlock - resumes CPUIDLE operation</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cpuidle_resume_and_unlock\">cpuidle_resume_and_unlock</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuidle_install_idle_handler\">cpuidle_install_idle_handler</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cpuidle_lock\">cpuidle_lock</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#cpuidle_resume_and_unlock\">cpuidle_resume_and_unlock</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpuidle_enable_device - enables idle PM for a CPU</span>", 
"<span class=\"comment\"> * @dev: the CPU</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function must be called between cpuidle_pause_and_lock and</span>", 
"<span class=\"comment\"> * cpuidle_resume_and_unlock when used externally.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cpuidle_enable_device\">cpuidle_enable_device</a>(struct <a class=\"id\" href=\"#cpuidle_device\">cpuidle_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#enabled\">enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpuidle_get_driver\">cpuidle_get_driver</a>() || !<a class=\"id\" href=\"#cpuidle_curr_governor\">cpuidle_curr_governor</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state_count\">state_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#registered\">registered</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__cpuidle_register_device\">__cpuidle_register_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cpuidle_add_state_sysfs\">cpuidle_add_state_sysfs</a>(<a class=\"id\" href=\"#dev\">dev</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuidle_curr_governor\">cpuidle_curr_governor</a>-><a class=\"id\" href=\"#enable\">enable</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cpuidle_curr_governor\">cpuidle_curr_governor</a>-><a class=\"id\" href=\"#enable\">enable</a>(<a class=\"id\" href=\"#dev\">dev</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_sysfs\">fail_sysfs</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state_count\">state_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#usage\">usage</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#time\">time</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#last_residency\">last_residency</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#last_state\">last_state</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#enabled\">enabled</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enabled_devices\">enabled_devices</a>++;", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#fail_sysfs\">fail_sysfs</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuidle_remove_state_sysfs\">cpuidle_remove_state_sysfs</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#cpuidle_enable_device\">cpuidle_enable_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpuidle_disable_device - disables idle PM for a CPU</span>", 
"<span class=\"comment\"> * @dev: the CPU</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function must be called between cpuidle_pause_and_lock and</span>", 
"<span class=\"comment\"> * cpuidle_resume_and_unlock when used externally.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cpuidle_disable_device\">cpuidle_disable_device</a>(struct <a class=\"id\" href=\"#cpuidle_device\">cpuidle_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#enabled\">enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpuidle_get_driver\">cpuidle_get_driver</a>() || !<a class=\"id\" href=\"#cpuidle_curr_governor\">cpuidle_curr_governor</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#enabled\">enabled</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuidle_curr_governor\">cpuidle_curr_governor</a>-><a class=\"id\" href=\"#disable\">disable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuidle_curr_governor\">cpuidle_curr_governor</a>-><a class=\"id\" href=\"#disable\">disable</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuidle_remove_state_sysfs\">cpuidle_remove_state_sysfs</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enabled_devices\">enabled_devices</a>--;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#cpuidle_disable_device\">cpuidle_disable_device</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ARCH_HAS_CPU_RELAX\">CONFIG_ARCH_HAS_CPU_RELAX</a>", 
"static int <a class=\"id\" href=\"#poll_idle\">poll_idle</a>(struct <a class=\"id\" href=\"#cpuidle_device\">cpuidle_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#cpuidle_state\">cpuidle_state</a> *<a class=\"id\" href=\"#st\">st</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a><span class=\"ts\"/><a class=\"id\" href=\"#t1\">t1</a>, <a class=\"id\" href=\"#t2\">t2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#diff\">diff</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t1\">t1</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#need_resched\">need_resched</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t2\">t2</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#diff\">diff</a> = <a class=\"id\" href=\"#ktime_to_us\">ktime_to_us</a>(<a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#t2\">t2</a>, <a class=\"id\" href=\"#t1\">t1</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#diff\">diff</a> &gt; <a class=\"id\" href=\"#INT_MAX\">INT_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#diff\">diff</a> = <a class=\"id\" href=\"#INT_MAX\">INT_MAX</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (int) <a class=\"id\" href=\"#diff\">diff</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#poll_idle_init\">poll_idle_init</a>(struct <a class=\"id\" href=\"#cpuidle_device\">cpuidle_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuidle_state\">cpuidle_state</a> *<a class=\"id\" href=\"#state\">state</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#states\">states</a>[0];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuidle_set_statedata\">cpuidle_set_statedata</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#CPUIDLE_NAME_LEN\">CPUIDLE_NAME_LEN</a>, \"C0\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#CPUIDLE_DESC_LEN\">CPUIDLE_DESC_LEN</a>, \"CPUIDLE CORE POLL IDLE\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#exit_latency\">exit_latency</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#target_residency\">target_residency</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#power_usage\">power_usage</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#CPUIDLE_FLAG_POLL\">CPUIDLE_FLAG_POLL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#enter\">enter</a> = <a class=\"id\" href=\"#poll_idle\">poll_idle</a>;", 
"}", 
"#else", 
"static void <a class=\"id\" href=\"#poll_idle_init\">poll_idle_init</a>(struct <a class=\"id\" href=\"#cpuidle_device\">cpuidle_device</a> *<a class=\"id\" href=\"#dev\">dev</a>) {}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_ARCH_HAS_CPU_RELAX */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __cpuidle_register_device - internal register function called before register</span>", 
"<span class=\"comment\"> * and enable routines</span>", 
"<span class=\"comment\"> * @dev: the cpu</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cpuidle_lock mutex must be held before this is called</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__cpuidle_register_device\">__cpuidle_register_device</a>(struct <a class=\"id\" href=\"#cpuidle_device\">cpuidle_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#sys_dev\">sys_dev</a> = <a class=\"id\" href=\"#get_cpu_sysdev\">get_cpu_sysdev</a>((unsigned long)<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuidle_driver\">cpuidle_driver</a> *<a class=\"id\" href=\"#cpuidle_driver\">cpuidle_driver</a> = <a class=\"id\" href=\"#cpuidle_get_driver\">cpuidle_get_driver</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sys_dev\">sys_dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#cpuidle_driver\">cpuidle_driver</a>-><a class=\"id\" href=\"#owner\">owner</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#kobj_unregister\">kobj_unregister</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#poll_idle_init\">poll_idle_init</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cpuidle driver should set the dev-&gt;power_specified bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before registering the device if the driver provides</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * power_usage numbers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For those devices whose -&gt;power_specified is not set,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we fill in power_usage with decreasing values as the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cpuidle code has an implicit assumption that state Cn</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * uses less power than C(n-1).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * With CONFIG_ARCH_HAS_CPU_RELAX, C0 is already assigned</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * an power value of -1.  So we use -2, -3, etc, for other</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * c-states.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#power_specified\">power_specified</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#CPUIDLE_DRIVER_STATE_START\">CPUIDLE_DRIVER_STATE_START</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state_count\">state_count</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#power_usage\">power_usage</a> = -1 - <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpuidle_devices\">cpuidle_devices</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device_list\">device_list</a>, &amp;<a class=\"id\" href=\"#cpuidle_detected_devices\">cpuidle_detected_devices</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cpuidle_add_sysfs\">cpuidle_add_sysfs</a>(<a class=\"id\" href=\"#sys_dev\">sys_dev</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#cpuidle_driver\">cpuidle_driver</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#registered\">registered</a> = 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpuidle_register_device - registers a CPU's idle PM feature</span>", 
"<span class=\"comment\"> * @dev: the cpu</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cpuidle_register_device\">cpuidle_register_device</a>(struct <a class=\"id\" href=\"#cpuidle_device\">cpuidle_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cpuidle_lock\">cpuidle_lock</a>);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__cpuidle_register_device\">__cpuidle_register_device</a>(<a class=\"id\" href=\"#dev\">dev</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cpuidle_lock\">cpuidle_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuidle_enable_device\">cpuidle_enable_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuidle_install_idle_handler\">cpuidle_install_idle_handler</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cpuidle_lock\">cpuidle_lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#cpuidle_register_device\">cpuidle_register_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpuidle_unregister_device - unregisters a CPU's idle PM feature</span>", 
"<span class=\"comment\"> * @dev: the cpu</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cpuidle_unregister_device\">cpuidle_unregister_device</a>(struct <a class=\"id\" href=\"#cpuidle_device\">cpuidle_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#sys_dev\">sys_dev</a> = <a class=\"id\" href=\"#get_cpu_sysdev\">get_cpu_sysdev</a>((unsigned long)<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuidle_driver\">cpuidle_driver</a> *<a class=\"id\" href=\"#cpuidle_driver\">cpuidle_driver</a> = <a class=\"id\" href=\"#cpuidle_get_driver\">cpuidle_get_driver</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#registered\">registered</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuidle_pause_and_lock\">cpuidle_pause_and_lock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuidle_disable_device\">cpuidle_disable_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuidle_remove_sysfs\">cpuidle_remove_sysfs</a>(<a class=\"id\" href=\"#sys_dev\">sys_dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device_list\">device_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#kobj_unregister\">kobj_unregister</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpuidle_devices\">cpuidle_devices</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuidle_resume_and_unlock\">cpuidle_resume_and_unlock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#cpuidle_driver\">cpuidle_driver</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#cpuidle_unregister_device\">cpuidle_unregister_device</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"static void <a class=\"id\" href=\"#smp_callback\">smp_callback</a>(void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* we already woke the CPU up, nothing more to do */</span>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function gets called when a part of the kernel has a new latency</span>", 
"<span class=\"comment\"> * requirement.  This means we need to get all processors out of their C-state,</span>", 
"<span class=\"comment\"> * and then recalculate a new suitable C-state. Just do a cross-cpu IPI; that</span>", 
"<span class=\"comment\"> * wakes them all right up.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cpuidle_latency_notify\">cpuidle_latency_notify</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#b\">b</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#l\">l</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function\">smp_call_function</a>(<a class=\"id\" href=\"#smp_callback\">smp_callback</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#cpuidle_latency_notifier\">cpuidle_latency_notifier</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#cpuidle_latency_notify\">cpuidle_latency_notify</a>,", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#latency_notifier_init\">latency_notifier_init</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm_qos_add_notifier\">pm_qos_add_notifier</a>(<a class=\"id\" href=\"#PM_QOS_CPU_DMA_LATENCY\">PM_QOS_CPU_DMA_LATENCY</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"}", 
"", 
"#else <span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#latency_notifier_init\">latency_notifier_init</a>(<a class=\"id\" href=\"#x\">x</a>) do { } while (0)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpuidle_init - core initializer</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#cpuidle_init\">cpuidle_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm_idle_old\">pm_idle_old</a> = <a class=\"id\" href=\"#pm_idle\">pm_idle</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cpuidle_add_class_sysfs\">cpuidle_add_class_sysfs</a>(&amp;<a class=\"id\" href=\"#cpu_sysdev_class\">cpu_sysdev_class</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#latency_notifier_init\">latency_notifier_init</a>(&amp;<a class=\"id\" href=\"#cpuidle_latency_notifier\">cpuidle_latency_notifier</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#core_initcall\">core_initcall</a>(<a class=\"id\" href=\"#cpuidle_init\">cpuidle_init</a>);", 
];
xr_frag_insert('l/30/caddc23a024593ce3158ed7f12cfa5e04a4915.xr', __xr_tmp);
