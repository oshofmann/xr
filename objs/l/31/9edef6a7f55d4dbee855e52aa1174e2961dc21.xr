var __xr_tmp = [
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't hold on to start_mm if it looks like exiting.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#start_mm\">start_mm</a>-><a class=\"id\" href=\"#mm_users\">mm_users</a>) == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmput\">mmput</a>(<a class=\"id\" href=\"#start_mm\">start_mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_mm\">start_mm</a> = &amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>.<a class=\"id\" href=\"#mm_users\">mm_users</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Wait for and lock page.  When do_swap_page races with</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * try_to_unuse, do_swap_page can handle the fault much</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * faster than try_to_unuse can locate the entry.  This</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * apparently redundant \"wait_on_page_locked\" lets try_to_unuse</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * defer to do_swap_page in such a case - in some tests,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * do_swap_page and try_to_unuse repeatedly compete.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_page_locked\">wait_on_page_locked</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_page_writeback\">wait_on_page_writeback</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_page_writeback\">wait_on_page_writeback</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Remove all references to entry.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swcount\">swcount</a> = *<a class=\"id\" href=\"#swap_map\">swap_map</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#swap_count\">swap_count</a>(<a class=\"id\" href=\"#swcount\">swcount</a>) == <a class=\"id\" href=\"#SWAP_MAP_SHMEM\">SWAP_MAP_SHMEM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#shmem_unuse\">shmem_unuse</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* page has already been unlocked and released */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#swap_count\">swap_count</a>(<a class=\"id\" href=\"#swcount\">swcount</a>) && <a class=\"id\" href=\"#start_mm\">start_mm</a> != &amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#unuse_mm\">unuse_mm</a>(<a class=\"id\" href=\"#start_mm\">start_mm</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#swap_count\">swap_count</a>(*<a class=\"id\" href=\"#swap_map\">swap_map</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#set_start_mm\">set_start_mm</a> = (*<a class=\"id\" href=\"#swap_map\">swap_map</a> >= <a class=\"id\" href=\"#swcount\">swcount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#start_mm\">start_mm</a>-><a class=\"id\" href=\"#mmlist\">mmlist</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#new_start_mm\">new_start_mm</a> = <a class=\"id\" href=\"#start_mm\">start_mm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#prev_mm\">prev_mm</a> = <a class=\"id\" href=\"#start_mm\">start_mm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#new_start_mm\">new_start_mm</a>-><a class=\"id\" href=\"#mm_users\">mm_users</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#prev_mm\">prev_mm</a>-><a class=\"id\" href=\"#mm_users\">mm_users</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mmlist_lock\">mmlist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#swap_count\">swap_count</a>(*<a class=\"id\" href=\"#swap_map\">swap_map</a>) && !<a class=\"id\" href=\"#retval\">retval</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#next\">next</a>) != &amp;<a class=\"id\" href=\"#start_mm\">start_mm</a>-><a class=\"id\" href=\"#mmlist\">mmlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a>, <a class=\"id\" href=\"#mmlist\">mmlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_inc_not_zero\">atomic_inc_not_zero</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_users\">mm_users</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mmlist_lock\">mmlist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmput\">mmput</a>(<a class=\"id\" href=\"#prev_mm\">prev_mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev_mm\">prev_mm</a> = <a class=\"id\" href=\"#mm\">mm</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swcount\">swcount</a> = *<a class=\"id\" href=\"#swap_map\">swap_map</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#swap_count\">swap_count</a>(<a class=\"id\" href=\"#swcount\">swcount</a>)) <span class=\"comment\">/* any usage ? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#mm\">mm</a> == &amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_start_mm\">set_start_mm</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#unuse_mm\">unuse_mm</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#set_start_mm\">set_start_mm</a> && *<a class=\"id\" href=\"#swap_map\">swap_map</a> &lt; <a class=\"id\" href=\"#swcount\">swcount</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmput\">mmput</a>(<a class=\"id\" href=\"#new_start_mm\">new_start_mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_users\">mm_users</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_start_mm\">new_start_mm</a> = <a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_start_mm\">set_start_mm</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mmlist_lock\">mmlist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mmlist_lock\">mmlist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmput\">mmput</a>(<a class=\"id\" href=\"#prev_mm\">prev_mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmput\">mmput</a>(<a class=\"id\" href=\"#start_mm\">start_mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_mm\">start_mm</a> = <a class=\"id\" href=\"#new_start_mm\">new_start_mm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If a reference remains (rare), we would like to leave</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the page in the swap cache; but try_to_unmap could</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * then re-duplicate the entry once we drop page lock,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so we might loop indefinitely; also, that page could</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * not be swapped out to other storage meanwhile.  So:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * delete from cache even if there's another reference,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * after ensuring that the data has been saved to disk -</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * since if the reference remains (rarer), it will be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * read from disk into another page.  Splitting into two</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pages would be incorrect if swap supported \"shared</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * private\" pages, but they are handled by tmpfs files.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Given how unuse_vma() targets one particular offset</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in an anon_vma, once the anon_vma has been determined,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * this splitting happens to be just what is needed to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * handle where KSM pages have been swapped out: re-reading</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is unnecessarily slow, but we can fix that later on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#swap_count\">swap_count</a>(*<a class=\"id\" href=\"#swap_map\">swap_map</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#page\">page</a>) && <a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> <a class=\"id\" href=\"#wbc\">wbc</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#sync_mode\">sync_mode</a> = <a class=\"id\" href=\"#WB_SYNC_NONE\">WB_SYNC_NONE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_writepage\">swap_writepage</a>(<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_page_writeback\">wait_on_page_writeback</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It is conceivable that a racing task removed this page from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * swap cache just before we acquired the page lock at the top,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * or while we dropped it in unuse_mm().  The page might even</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be back in swap cache on another swap area: that we must not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * delete, since it may not have been written out to swap yet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#page\">page</a>) == <a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#val\">val</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delete_from_swap_cache\">delete_from_swap_cache</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * So we could skip searching mms once swap count went</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to 1, we did not mark any present ptes as dirty: must</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mark page dirty so shrink_page_list will preserve it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageDirty\">SetPageDirty</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Make sure that we aren't completely killing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * interactive performance.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmput\">mmput</a>(<a class=\"id\" href=\"#start_mm\">start_mm</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * After a successful try_to_unuse, if no swap is now in use, we know</span>", 
"<span class=\"comment\"> * we can empty the mmlist.  swap_lock must be held on entry and exit.</span>", 
"<span class=\"comment\"> * Note that mmlist_lock nests inside swap_lock, and an mm must be</span>", 
"<span class=\"comment\"> * added to the mmlist just after page_duplicate - before would be racy.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#drain_mmlist\">drain_mmlist</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#type\">type</a> = 0; <a class=\"id\" href=\"#type\">type</a> &lt; <a class=\"id\" href=\"#nr_swapfiles\">nr_swapfiles</a>; <a class=\"id\" href=\"#type\">type</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#type\">type</a>]-><a class=\"id\" href=\"#inuse_pages\">inuse_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mmlist_lock\">mmlist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_safe\">list_for_each_safe</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>.<a class=\"id\" href=\"#mmlist\">mmlist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mmlist_lock\">mmlist_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Use this swapdev's extent info to locate the (PAGE_SIZE) block which</span>", 
"<span class=\"comment\"> * corresponds to page offset for the specified swap entry.</span>", 
"<span class=\"comment\"> * Note that the type of this function is sector_t, but it returns page offset</span>", 
"<span class=\"comment\"> * into the bdev, not sector offset.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#map_swap_entry\">map_swap_entry</a>(<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#block_device\">block_device</a> **<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#sis\">sis</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_extent\">swap_extent</a> *<a class=\"id\" href=\"#start_se\">start_se</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_extent\">swap_extent</a> *<a class=\"id\" href=\"#se\">se</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sis\">sis</a> = <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#swp_type\">swp_type</a>(<a class=\"id\" href=\"#entry\">entry</a>)];", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#bdev\">bdev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#swp_offset\">swp_offset</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_se\">start_se</a> = <a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#curr_swap_extent\">curr_swap_extent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a> = <a class=\"id\" href=\"#start_se\">start_se</a>;", 
"", 
"<span class=\"ts\"/>for ( ; ; ) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#lh\">lh</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#start_page\">start_page</a> <= <a class=\"id\" href=\"#offset\">offset</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> &lt; (<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#start_page\">start_page</a> + <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#start_block\">start_block</a> + (<a class=\"id\" href=\"#offset\">offset</a> - <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#start_page\">start_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lh\">lh</a> = <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#lh\">lh</a>, struct <a class=\"id\" href=\"#swap_extent\">swap_extent</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#curr_swap_extent\">curr_swap_extent</a> = <a class=\"id\" href=\"#se\">se</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#se\">se</a> == <a class=\"id\" href=\"#start_se\">start_se</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* It *must* be present */</span>", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns the page offset into bdev for the specified page's swap entry.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#map_swap_page\">map_swap_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#block_device\">block_device</a> **<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#map_swap_entry\">map_swap_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#bdev\">bdev</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Free all of a swapdev's extent information</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#destroy_swap_extents\">destroy_swap_extents</a>(struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#sis\">sis</a>)", 
"{", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#first_swap_extent\">first_swap_extent</a>.<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_extent\">swap_extent</a> *<a class=\"id\" href=\"#se\">se</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#first_swap_extent\">first_swap_extent</a>.<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_extent\">swap_extent</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add a block range (and the corresponding page range) into this swapdev's</span>", 
"<span class=\"comment\"> * extent list.  The extent list is kept sorted in page order.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function rather assumes that it is called in ascending page order.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#add_swap_extent\">add_swap_extent</a>(struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#sis\">sis</a>, unsigned long <a class=\"id\" href=\"#start_page\">start_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#start_block\">start_block</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_extent\">swap_extent</a> *<a class=\"id\" href=\"#se\">se</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_extent\">swap_extent</a> *<a class=\"id\" href=\"#new_se\">new_se</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#lh\">lh</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start_page\">start_page</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a> = &amp;<a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#first_swap_extent\">first_swap_extent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#curr_swap_extent\">curr_swap_extent</a> = <a class=\"id\" href=\"#se\">se</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#start_page\">start_page</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#start_block\">start_block</a> = <a class=\"id\" href=\"#start_block\">start_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lh\">lh</a> = <a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#first_swap_extent\">first_swap_extent</a>.<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#prev\">prev</a>;<span class=\"ts\"/><span class=\"comment\">/* Highest extent */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#lh\">lh</a>, struct <a class=\"id\" href=\"#swap_extent\">swap_extent</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#start_page\">start_page</a> + <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a> != <a class=\"id\" href=\"#start_page\">start_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#start_block\">start_block</a> + <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a> == <a class=\"id\" href=\"#start_block\">start_block</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Merge it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a> += <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No merge.  Insert a new extent, preserving ordering.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_se\">new_se</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#se\">se</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_se\">new_se</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_se\">new_se</a>-><a class=\"id\" href=\"#start_page\">start_page</a> = <a class=\"id\" href=\"#start_page\">start_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_se\">new_se</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_se\">new_se</a>-><a class=\"id\" href=\"#start_block\">start_block</a> = <a class=\"id\" href=\"#start_block\">start_block</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#new_se\">new_se</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#first_swap_extent\">first_swap_extent</a>.<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A `swap extent' is a simple thing which maps a contiguous range of pages</span>", 
"<span class=\"comment\"> * onto a contiguous range of disk blocks.  An ordered list of swap extents</span>", 
"<span class=\"comment\"> * is built at swapon time and is then used at swap_writepage/swap_readpage</span>", 
"<span class=\"comment\"> * time for locating where on disk a page belongs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the swapfile is an S_ISBLK block device, a single extent is installed.</span>", 
"<span class=\"comment\"> * This is done so that the main operating code can treat S_ISBLK and S_ISREG</span>", 
"<span class=\"comment\"> * swap files identically.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Whether the swapdev is an S_ISREG file or an S_ISBLK blockdev, the swap</span>", 
"<span class=\"comment\"> * extent list operates in PAGE_SIZE disk blocks.  Both S_ISREG and S_ISBLK</span>", 
"<span class=\"comment\"> * swapfiles are handled *identically* after swapon time.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For S_ISREG swapfiles, setup_swap_extents() will walk all the file's blocks</span>", 
"<span class=\"comment\"> * and will parse them into an ordered extent list, in PAGE_SIZE chunks.  If</span>", 
"<span class=\"comment\"> * some stray blocks are found which do not fall within the PAGE_SIZE alignment</span>", 
"<span class=\"comment\"> * requirements, they are simply tossed out - we will never use those blocks</span>", 
"<span class=\"comment\"> * for swapping.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For S_ISREG swapfiles we set S_SWAPFILE across the life of the swapon.  This</span>", 
"<span class=\"comment\"> * prevents root from shooting her foot off by ftruncating an in-use swapfile,</span>", 
"<span class=\"comment\"> * which will scribble on the fs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The amount of disk space which a single swap extent represents varies.</span>", 
"<span class=\"comment\"> * Typically it is in the 1-4 megabyte range.  So we can have hundreds of</span>", 
"<span class=\"comment\"> * extents in the list.  To avoid much list walking, we cache the previous</span>", 
"<span class=\"comment\"> * search location in `curr_swap_extent', and start new searches from there.</span>", 
"<span class=\"comment\"> * This is extremely effective.  The average number of iterations in</span>", 
"<span class=\"comment\"> * map_swap_page() has been measured at about 0.3 per page.  - akpm.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#setup_swap_extents\">setup_swap_extents</a>(struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#sis\">sis</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> *<a class=\"id\" href=\"#span\">span</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#page_no\">page_no</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#probe_block\">probe_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#last_block\">last_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#lowest_block\">lowest_block</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#highest_block\">highest_block</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_extents\">nr_extents</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#swap_file\">swap_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISBLK\">S_ISBLK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#add_swap_extent\">add_swap_extent</a>(<a class=\"id\" href=\"#sis\">sis</a>, 0, <a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#max\">max</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#span\">span</a> = <a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blkbits\">blkbits</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> >> <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Map all the blocks into the extent list.  This code doesn't try</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to be very smart.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#probe_block\">probe_block</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_no\">page_no</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_block\">last_block</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#inode\">inode</a>) >> <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#probe_block\">probe_block</a> + <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>) <= <a class=\"id\" href=\"#last_block\">last_block</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_no\">page_no</a> &lt; <a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#max\">max</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#block_in_page\">block_in_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#first_block\">first_block</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first_block\">first_block</a> = <a class=\"id\" href=\"#bmap\">bmap</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#probe_block\">probe_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first_block\">first_block</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_bmap\">bad_bmap</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It must be PAGE_SIZE aligned on-disk</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first_block\">first_block</a> &amp; (<a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a> - 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#probe_block\">probe_block</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#reprobe\">reprobe</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#block_in_page\">block_in_page</a> = 1; <a class=\"id\" href=\"#block_in_page\">block_in_page</a> &lt; <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_in_page\">block_in_page</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#bmap\">bmap</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#probe_block\">probe_block</a> + <a class=\"id\" href=\"#block_in_page\">block_in_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#block\">block</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_bmap\">bad_bmap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#block\">block</a> != <a class=\"id\" href=\"#first_block\">first_block</a> + <a class=\"id\" href=\"#block_in_page\">block_in_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Discontiguity */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#probe_block\">probe_block</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#reprobe\">reprobe</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first_block\">first_block</a> >>= (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> - <a class=\"id\" href=\"#blkbits\">blkbits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_no\">page_no</a>) {<span class=\"ts\"/><span class=\"comment\">/* exclude the header page */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first_block\">first_block</a> &lt; <a class=\"id\" href=\"#lowest_block\">lowest_block</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lowest_block\">lowest_block</a> = <a class=\"id\" href=\"#first_block\">first_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first_block\">first_block</a> &gt; <a class=\"id\" href=\"#highest_block\">highest_block</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#highest_block\">highest_block</a> = <a class=\"id\" href=\"#first_block\">first_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We found a PAGE_SIZE-length, PAGE_SIZE-aligned run of blocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#add_swap_extent\">add_swap_extent</a>(<a class=\"id\" href=\"#sis\">sis</a>, <a class=\"id\" href=\"#page_no\">page_no</a>, 1, <a class=\"id\" href=\"#first_block\">first_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_extents\">nr_extents</a> += <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_no\">page_no</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#probe_block\">probe_block</a> += <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"<a class=\"id\" href=\"#reprobe\">reprobe</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#nr_extents\">nr_extents</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#span\">span</a> = 1 + <a class=\"id\" href=\"#highest_block\">highest_block</a> - <a class=\"id\" href=\"#lowest_block\">lowest_block</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_no\">page_no</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_no\">page_no</a> = 1;<span class=\"ts\"/><span class=\"comment\">/* force Empty message */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#page_no\">page_no</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#page_no\">page_no</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#highest_bit\">highest_bit</a> = <a class=\"id\" href=\"#page_no\">page_no</a> - 1;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<a class=\"id\" href=\"#bad_bmap\">bad_bmap</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"swapon: swapfile has holes\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#swapoff\">swapoff</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#specialfile\">specialfile</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#swap_map\">swap_map</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#swap_file\">swap_file</a>, *<a class=\"id\" href=\"#victim\">victim</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#pathname\">pathname</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pathname\">pathname</a> = <a class=\"id\" href=\"#getname\">getname</a>(<a class=\"id\" href=\"#specialfile\">specialfile</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#pathname\">pathname</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#pathname\">pathname</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#victim\">victim</a> = <a class=\"id\" href=\"#filp_open\">filp_open</a>(<a class=\"id\" href=\"#pathname\">pathname</a>, <a class=\"id\" href=\"#O_RDWR\">O_RDWR</a>|<a class=\"id\" href=\"#O_LARGEFILE\">O_LARGEFILE</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#putname\">putname</a>(<a class=\"id\" href=\"#pathname\">pathname</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#victim\">victim</a>);", 
];
xr_frag_insert('l/31/9edef6a7f55d4dbee855e52aa1174e2961dc21.xr', __xr_tmp);
