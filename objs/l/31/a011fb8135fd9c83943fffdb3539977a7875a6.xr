var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/ipc/util.c</span>", 
"<span class=\"comment\"> * Copyright (C) 1992 Krishna Balasubramanian</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sep 1997 - Call suser() last after \"normal\" permission checks so we</span>", 
"<span class=\"comment\"> *            get BSD style process accounting right.</span>", 
"<span class=\"comment\"> *            Occurs in several places in the IPC code.</span>", 
"<span class=\"comment\"> *            Chris Evans, &lt;chris@ferret.lmh.ox.ac.uk&gt;</span>", 
"<span class=\"comment\"> * Nov 1999 - ipc helper functions, unified SMP locking</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>      Manfred Spraul &lt;manfred@colorfullife.com&gt;</span>", 
"<span class=\"comment\"> * Oct 2002 - One lock per IPC id. RCU ipc_free for lock-free grow_ary().</span>", 
"<span class=\"comment\"> *            Mingming Cao &lt;cmm@us.ibm.com&gt;</span>", 
"<span class=\"comment\"> * Mar 2006 - support for audit of ipc object properties</span>", 
"<span class=\"comment\"> *            Dustin Kirkland &lt;dustin.kirkland@us.ibm.com&gt;</span>", 
"<span class=\"comment\"> * Jun 2006 - namespaces ssupport</span>", 
"<span class=\"comment\"> *            OpenVZ, SWsoft Inc.</span>", 
"<span class=\"comment\"> *            Pavel Emelianov &lt;xemul@openvz.org&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#shm\">shm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highuid\">highuid</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nsproxy\">nsproxy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rwsem\">rwsem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#memory\">memory</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#unistd\">unistd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"util.h\"", 
"", 
"struct <a class=\"id\" href=\"#ipc_proc_iface\">ipc_proc_iface</a> {", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#header\">header</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ids\">ids</a>;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#show\">show</a>)(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *, void *);", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_HOTPLUG\">CONFIG_MEMORY_HOTPLUG</a>", 
"", 
"static void <a class=\"id\" href=\"#ipc_memory_notifier\">ipc_memory_notifier</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipcns_notify\">ipcns_notify</a>(<a class=\"id\" href=\"#IPCNS_MEMCHANGED\">IPCNS_MEMCHANGED</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#DECLARE_WORK\">DECLARE_WORK</a>(<a class=\"id\" href=\"#ipc_memory_wq\">ipc_memory_wq</a>, <a class=\"id\" href=\"#ipc_memory_notifier\">ipc_memory_notifier</a>);", 
"", 
"", 
"static int <a class=\"id\" href=\"#ipc_memory_callback\">ipc_memory_callback</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_ONLINE\">MEM_ONLINE</a>:    <span class=\"comment\">/* memory successfully brought online */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_OFFLINE\">MEM_OFFLINE</a>:   <span class=\"comment\">/* or offline: it's time to recompute msgmni */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is done by invoking the ipcns notifier chain with the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * IPC_MEMCHANGED event.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In order not to keep the lock on the hotplug memory chain</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for too long, queue a work item that will, when waken up,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * activate the ipcns notification chain.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * No need to keep several ipc work items on the queue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#work_pending\">work_pending</a>(&amp;<a class=\"id\" href=\"#ipc_memory_wq\">ipc_memory_wq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#ipc_memory_wq\">ipc_memory_wq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_GOING_ONLINE\">MEM_GOING_ONLINE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_GOING_OFFLINE\">MEM_GOING_OFFLINE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_CANCEL_ONLINE\">MEM_CANCEL_ONLINE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_CANCEL_OFFLINE\">MEM_CANCEL_OFFLINE</a>:", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MEMORY_HOTPLUG */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ipc_init<span class=\"ts\"/>-<span class=\"ts\"/>initialise IPC subsystem</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The various system5 IPC resources (semaphores, messages and shared</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>memory) are initialised</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>A callback routine is registered into the memory hotplug notifier</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>chain: since msgmni scales to lowmem this callback routine will be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>called upon successful memory add / remove to recompute msmgni.</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ipc_init\">ipc_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_init\">sem_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg_init\">msg_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shm_init\">shm_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hotplug_memory_notifier\">hotplug_memory_notifier</a>(<a class=\"id\" href=\"#ipc_memory_callback\">ipc_memory_callback</a>, <a class=\"id\" href=\"#IPC_CALLBACK_PRI\">IPC_CALLBACK_PRI</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_ipcns_notifier\">register_ipcns_notifier</a>(&amp;<a class=\"id\" href=\"#init_ipc_ns\">init_ipc_ns</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#__initcall\">__initcall</a>(<a class=\"id\" href=\"#ipc_init\">ipc_init</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ipc_init_ids<span class=\"ts\"/><span class=\"ts\"/>-<span class=\"ts\"/>initialise IPC identifiers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ids: Identifier set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Set up the sequence range to use for the ipc identifier range (limited</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>below IPCMNI) then initialise the ids idr.</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"void <a class=\"id\" href=\"#ipc_init_ids\">ipc_init_ids</a>(struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a> *<a class=\"id\" href=\"#ids\">ids</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_rwsem\">init_rwsem</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#rw_mutex\">rw_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#in_use\">in_use</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#seq\">seq</a> = 0;", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#seq_limit\">seq_limit</a> = <a class=\"id\" href=\"#INT_MAX\">INT_MAX</a>/<a class=\"id\" href=\"#SEQ_MULTIPLIER\">SEQ_MULTIPLIER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#seq_limit\">seq_limit</a> &gt; <a class=\"id\" href=\"#USHRT_MAX\">USHRT_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#seq_max\">seq_max</a> = <a class=\"id\" href=\"#USHRT_MAX\">USHRT_MAX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/> else", 
"<span class=\"ts\"/><span class=\"ts\"/> <span class=\"ts\"/><a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#seq_max\">seq_max</a> = <a class=\"id\" href=\"#seq_limit\">seq_limit</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idr_init\">idr_init</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#ipcs_idr\">ipcs_idr</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#sysvipc_proc_fops\">sysvipc_proc_fops</a>;", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ipc_init_proc_interface<span class=\"ts\"/>-  Create a proc interface for sysipc types using a seq_file interface.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@path: Path in procfs</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@header: Banner to be printed at the beginning of the file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ids: ipc id table to iterate.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@show: show routine.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ipc_init_proc_interface\">ipc_init_proc_interface</a>(const char *<a class=\"id\" href=\"#path\">path</a>, const char *<a class=\"id\" href=\"#header\">header</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ids\">ids</a>, int (*<a class=\"id\" href=\"#show\">show</a>)(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *, void *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#pde\">pde</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_proc_iface\">ipc_proc_iface</a> *<a class=\"id\" href=\"#iface\">iface</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iface\">iface</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#iface\">iface</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#iface\">iface</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#path\">path</a><span class=\"ts\"/>= <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#header\">header</a><span class=\"ts\"/>= <a class=\"id\" href=\"#header\">header</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#ids\">ids</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ids\">ids</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#show\">show</a><span class=\"ts\"/>= <a class=\"id\" href=\"#show\">show</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pde\">pde</a> = <a class=\"id\" href=\"#proc_create_data\">proc_create_data</a>(<a class=\"id\" href=\"#path\">path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>,        <span class=\"comment\">/* world readable */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#NULL\">NULL</a>,           <span class=\"comment\">/* parent dir */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#sysvipc_proc_fops\">sysvipc_proc_fops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#iface\">iface</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pde\">pde</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#iface\">iface</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ipc_findkey<span class=\"ts\"/>-<span class=\"ts\"/>find a key in an ipc identifier set<span class=\"ts\"/></span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ids: Identifier set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@key: The key to find</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/></span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Requires ipc_ids.rw_mutex locked.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns the LOCKED pointer to the ipc structure if found or NULL</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if not.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If key is found ipc points to the owning ipc structure</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"static struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipc_findkey\">ipc_findkey</a>(struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a> *<a class=\"id\" href=\"#ids\">ids</a>, <a class=\"id\" href=\"#key_t\">key_t</a> <a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipc\">ipc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#next_id\">next_id</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#total\">total</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#total\">total</a> = 0, <a class=\"id\" href=\"#next_id\">next_id</a> = 0; <a class=\"id\" href=\"#total\">total</a> &lt; <a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#in_use\">in_use</a>; <a class=\"id\" href=\"#next_id\">next_id</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc\">ipc</a> = <a class=\"id\" href=\"#idr_find\">idr_find</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#ipcs_idr\">ipcs_idr</a>, <a class=\"id\" href=\"#next_id\">next_id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ipc\">ipc</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ipc\">ipc</a>-><a class=\"id\" href=\"#key\">key</a> != <a class=\"id\" href=\"#key\">key</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc_lock_by_ptr\">ipc_lock_by_ptr</a>(<a class=\"id\" href=\"#ipc\">ipc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ipc\">ipc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ipc_get_maxid <span class=\"ts\"/>-<span class=\"ts\"/>get the last assigned id</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ids: IPC identifier set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called with ipc_ids.rw_mutex held.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#ipc_get_maxid\">ipc_get_maxid</a>(struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a> *<a class=\"id\" href=\"#ids\">ids</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipc\">ipc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_id\">max_id</a> = -1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#total\">total</a>, <a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#in_use\">in_use</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#in_use\">in_use</a> == <a class=\"id\" href=\"#IPCMNI\">IPCMNI</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#IPCMNI\">IPCMNI</a> - 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Look for the last assigned id */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#id\">id</a> = 0; <a class=\"id\" href=\"#id\">id</a> &lt; <a class=\"id\" href=\"#IPCMNI\">IPCMNI</a> && <a class=\"id\" href=\"#total\">total</a> &lt; <a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#in_use\">in_use</a>; <a class=\"id\" href=\"#id\">id</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc\">ipc</a> = <a class=\"id\" href=\"#idr_find\">idr_find</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#ipcs_idr\">ipcs_idr</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ipc\">ipc</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_id\">max_id</a> = <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#max_id\">max_id</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ipc_addid <span class=\"ts\"/>-<span class=\"ts\"/>add an IPC identifier</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ids: IPC identifier set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new: new IPC permission set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size: limit for the number of used ids</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Add an entry 'new' to the IPC ids idr. The permissions object is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>initialised and the first free entry is set up and the id assigned</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is returned. The 'new' entry is returned in a locked state on success.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>On failure the entry is not locked and a negative err-code is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called with ipc_ids.rw_mutex held as a writer.</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"int <a class=\"id\" href=\"#ipc_addid\">ipc_addid</a>(struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a>* <a class=\"id\" href=\"#ids\">ids</a>, struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a>* <a class=\"id\" href=\"#new\">new</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#euid\">euid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gid_t\">gid_t</a> <a class=\"id\" href=\"#egid\">egid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#IPCMNI\">IPCMNI</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#IPCMNI\">IPCMNI</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#in_use\">in_use</a> >= <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#deleted\">deleted</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#idr_get_new\">idr_get_new</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#ipcs_idr\">ipcs_idr</a>, <a class=\"id\" href=\"#new\">new</a>, &amp;<a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#in_use\">in_use</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current_euid_egid\">current_euid_egid</a>(&amp;<a class=\"id\" href=\"#euid\">euid</a>, &amp;<a class=\"id\" href=\"#egid\">egid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cuid\">cuid</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#uid\">uid</a> = <a class=\"id\" href=\"#euid\">euid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#gid\">gid</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cgid\">cgid</a> = <a class=\"id\" href=\"#egid\">egid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#seq\">seq</a>++;", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#seq\">seq</a> &gt; <a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#seq_max\">seq_max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#seq\">seq</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#ipc_buildid\">ipc_buildid</a>(<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#seq\">seq</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#id\">id</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ipcget_new<span class=\"ts\"/>-<span class=\"ts\"/>create a new ipc object</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ns: namespace</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ids: IPC identifer set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ops: the actual creation routine to call</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@params: its parameters</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This routine is called by sys_msgget, sys_semget() and sys_shmget()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>when the key is IPC_PRIVATE.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ipcget_new\">ipcget_new</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>, struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a> *<a class=\"id\" href=\"#ids\">ids</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_ops\">ipc_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>, struct <a class=\"id\" href=\"#ipc_params\">ipc_params</a> *<a class=\"id\" href=\"#params\">params</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#idr_pre_get\">idr_pre_get</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#ipcs_idr\">ipcs_idr</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#rw_mutex\">rw_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#getnew\">getnew</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#params\">params</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#rw_mutex\">rw_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ipc_check_perms<span class=\"ts\"/>-<span class=\"ts\"/>check security and permissions for an IPC</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ipcp: ipc permission set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ops: the actual security routine to call</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@params: its parameters</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This routine is called by sys_msgget(), sys_semget() and sys_shmget()</span>", 
"<span class=\"comment\"> *      when the key is not IPC_PRIVATE and that key already exists in the</span>", 
"<span class=\"comment\"> *      ids IDR.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>On success, the IPC id is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>It is called with ipc_ids.rw_mutex and ipcp-&gt;lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ipc_check_perms\">ipc_check_perms</a>(struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipcp\">ipcp</a>, struct <a class=\"id\" href=\"#ipc_ops\">ipc_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_params\">ipc_params</a> *<a class=\"id\" href=\"#params\">params</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ipcperms\">ipcperms</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>, <a class=\"id\" href=\"#params\">params</a>-><a class=\"id\" href=\"#flg\">flg</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#associate\">associate</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>, <a class=\"id\" href=\"#params\">params</a>-><a class=\"id\" href=\"#flg\">flg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ipcp\">ipcp</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ipcget_public<span class=\"ts\"/>-<span class=\"ts\"/>get an ipc object or create a new one</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ns: namespace</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ids: IPC identifer set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ops: the actual creation routine to call</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@params: its parameters</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This routine is called by sys_msgget, sys_semget() and sys_shmget()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>when the key is not IPC_PRIVATE.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>It adds a new entry if the key is not found and does some permission</span>", 
"<span class=\"comment\"> *      / security checkings if the key is found.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>On success, the ipc id is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ipcget_public\">ipcget_public</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>, struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a> *<a class=\"id\" href=\"#ids\">ids</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_ops\">ipc_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>, struct <a class=\"id\" href=\"#ipc_params\">ipc_params</a> *<a class=\"id\" href=\"#params\">params</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipcp\">ipcp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flg\">flg</a> = <a class=\"id\" href=\"#params\">params</a>-><a class=\"id\" href=\"#flg\">flg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#idr_pre_get\">idr_pre_get</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#ipcs_idr\">ipcs_idr</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Take the lock as a writer since we are potentially going to add</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a new entry + read locks are not \"upgradable\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#rw_mutex\">rw_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipcp\">ipcp</a> = <a class=\"id\" href=\"#ipc_findkey\">ipc_findkey</a>(<a class=\"id\" href=\"#ids\">ids</a>, <a class=\"id\" href=\"#params\">params</a>-><a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ipcp\">ipcp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* key not used */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flg\">flg</a> &amp; <a class=\"id\" href=\"#IPC_CREAT\">IPC_CREAT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#getnew\">getnew</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#params\">params</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ipc object has been locked by ipc_findkey() */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flg\">flg</a> &amp; <a class=\"id\" href=\"#IPC_CREAT\">IPC_CREAT</a> && <a class=\"id\" href=\"#flg\">flg</a> &amp; <a class=\"id\" href=\"#IPC_EXCL\">IPC_EXCL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#more_checks\">more_checks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#more_checks\">more_checks</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>, <a class=\"id\" href=\"#params\">params</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ipc_check_perms returns the IPC id on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * success</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ipc_check_perms\">ipc_check_perms</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>, <a class=\"id\" href=\"#ops\">ops</a>, <a class=\"id\" href=\"#params\">params</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc_unlock\">ipc_unlock</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#rw_mutex\">rw_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ipc_rmid<span class=\"ts\"/>-<span class=\"ts\"/>remove an IPC identifier</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ids: IPC identifier set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ipcp: ipc perm structure containing the identifier to remove</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ipc_ids.rw_mutex (as a writer) and the spinlock for this ID are held</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>before this function is called, and remain locked on the exit.</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"void <a class=\"id\" href=\"#ipc_rmid\">ipc_rmid</a>(struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a> *<a class=\"id\" href=\"#ids\">ids</a>, struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipcp\">ipcp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lid\">lid</a> = <a class=\"id\" href=\"#ipcid_to_idx\">ipcid_to_idx</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idr_remove\">idr_remove</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#ipcs_idr\">ipcs_idr</a>, <a class=\"id\" href=\"#lid\">lid</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#in_use\">in_use</a>--;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipcp\">ipcp</a>-><a class=\"id\" href=\"#deleted\">deleted</a> = 1;", 
"", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ipc_alloc<span class=\"ts\"/>-<span class=\"ts\"/>allocate ipc space</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size: size desired</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate memory from the appropriate pools and return a pointer to it.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NULL is returned if the allocation fails</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"void* <a class=\"id\" href=\"#ipc_alloc\">ipc_alloc</a>(int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>void* <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a> = <a class=\"id\" href=\"#vmalloc\">vmalloc</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ipc_free        -       free ipc space</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ptr: pointer returned by ipc_alloc</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size: size of block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Free a block created with ipc_alloc(). The caller must know the size</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>used in the allocation call.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#ipc_free\">ipc_free</a>(void* <a class=\"id\" href=\"#ptr\">ptr</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * rcu allocations:</span>", 
"<span class=\"comment\"> * There are three headers that are prepended to the actual allocation:</span>", 
"<span class=\"comment\"> * - during use: ipc_rcu_hdr.</span>", 
"<span class=\"comment\"> * - during the rcu grace period: ipc_rcu_grace.</span>", 
"<span class=\"comment\"> * - [only if vmalloc]: ipc_rcu_sched.</span>", 
"<span class=\"comment\"> * Their lifetime doesn't overlap, thus the headers share the same memory.</span>", 
"<span class=\"comment\"> * Unlike a normal union, they are right-aligned, thus some container_of</span>", 
"<span class=\"comment\"> * forward/backward casting is necessary:</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ipc_rcu_hdr\">ipc_rcu_hdr</a>", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#refcount\">refcount</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_vmalloc\">is_vmalloc</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>[0];", 
"};", 
"", 
"", 
"struct <a class=\"id\" href=\"#ipc_rcu_grace\">ipc_rcu_grace</a>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#rcu\">rcu</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* \"void *\" makes sure alignment of following data is sane. */</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>[0];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ipc_rcu_sched\">ipc_rcu_sched</a>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> <a class=\"id\" href=\"#work\">work</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* \"void *\" makes sure alignment of following data is sane. */</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>[0];", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HDRLEN_KMALLOC\">HDRLEN_KMALLOC</a><span class=\"ts\"/><span class=\"ts\"/>(sizeof(struct <a class=\"id\" href=\"#ipc_rcu_grace\">ipc_rcu_grace</a>) &gt; sizeof(struct <a class=\"id\" href=\"#ipc_rcu_hdr\">ipc_rcu_hdr</a>) ? \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#ipc_rcu_grace\">ipc_rcu_grace</a>) : sizeof(struct <a class=\"id\" href=\"#ipc_rcu_hdr\">ipc_rcu_hdr</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HDRLEN_VMALLOC\">HDRLEN_VMALLOC</a><span class=\"ts\"/><span class=\"ts\"/>(sizeof(struct <a class=\"id\" href=\"#ipc_rcu_sched\">ipc_rcu_sched</a>) &gt; <a class=\"id\" href=\"#HDRLEN_KMALLOC\">HDRLEN_KMALLOC</a> ? \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#ipc_rcu_sched\">ipc_rcu_sched</a>) : <a class=\"id\" href=\"#HDRLEN_KMALLOC\">HDRLEN_KMALLOC</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#rcu_use_vmalloc\">rcu_use_vmalloc</a>(int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Too big for a single page? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#HDRLEN_KMALLOC\">HDRLEN_KMALLOC</a> + <a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ipc_rcu_alloc<span class=\"ts\"/>-<span class=\"ts\"/>allocate ipc and rcu space </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size: size desired</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate memory for the rcu header structure +  the object.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns the pointer to the object.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NULL is returned if the allocation fails. </span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"void* <a class=\"id\" href=\"#ipc_rcu_alloc\">ipc_rcu_alloc</a>(int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>void* <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We prepend the allocation with the rcu struct, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * workqueue if necessary (for vmalloc). </span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rcu_use_vmalloc\">rcu_use_vmalloc</a>(<a class=\"id\" href=\"#size\">size</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a> = <a class=\"id\" href=\"#vmalloc\">vmalloc</a>(<a class=\"id\" href=\"#HDRLEN_VMALLOC\">HDRLEN_VMALLOC</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#out\">out</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a> += <a class=\"id\" href=\"#HDRLEN_VMALLOC\">HDRLEN_VMALLOC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#out\">out</a>, struct <a class=\"id\" href=\"#ipc_rcu_hdr\">ipc_rcu_hdr</a>, <a class=\"id\" href=\"#data\">data</a>)-><a class=\"id\" href=\"#is_vmalloc\">is_vmalloc</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#out\">out</a>, struct <a class=\"id\" href=\"#ipc_rcu_hdr\">ipc_rcu_hdr</a>, <a class=\"id\" href=\"#data\">data</a>)-><a class=\"id\" href=\"#refcount\">refcount</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#HDRLEN_KMALLOC\">HDRLEN_KMALLOC</a> + <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#out\">out</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a> += <a class=\"id\" href=\"#HDRLEN_KMALLOC\">HDRLEN_KMALLOC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#out\">out</a>, struct <a class=\"id\" href=\"#ipc_rcu_hdr\">ipc_rcu_hdr</a>, <a class=\"id\" href=\"#data\">data</a>)-><a class=\"id\" href=\"#is_vmalloc\">is_vmalloc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#out\">out</a>, struct <a class=\"id\" href=\"#ipc_rcu_hdr\">ipc_rcu_hdr</a>, <a class=\"id\" href=\"#data\">data</a>)-><a class=\"id\" href=\"#refcount\">refcount</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#ipc_rcu_getref\">ipc_rcu_getref</a>(void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, struct <a class=\"id\" href=\"#ipc_rcu_hdr\">ipc_rcu_hdr</a>, <a class=\"id\" href=\"#data\">data</a>)-><a class=\"id\" href=\"#refcount\">refcount</a>++;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ipc_do_vfree\">ipc_do_vfree</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#ipc_rcu_sched\">ipc_rcu_sched</a>, <a class=\"id\" href=\"#work\">work</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ipc_schedule_free - free ipc + rcu space</span>", 
"<span class=\"comment\"> * @head: RCU callback structure for queued work</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * Since RCU callback function is called in bh,</span>", 
"<span class=\"comment\"> * we need to defer the vfree to schedule_work().</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ipc_schedule_free\">ipc_schedule_free</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_rcu_grace\">ipc_rcu_grace</a> *<a class=\"id\" href=\"#grace\">grace</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_rcu_sched\">ipc_rcu_sched</a> *<a class=\"id\" href=\"#sched\">sched</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grace\">grace</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#ipc_rcu_grace\">ipc_rcu_grace</a>, <a class=\"id\" href=\"#rcu\">rcu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched\">sched</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(&amp;(<a class=\"id\" href=\"#grace\">grace</a>-><a class=\"id\" href=\"#data\">data</a>[0]), struct <a class=\"id\" href=\"#ipc_rcu_sched\">ipc_rcu_sched</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>[0]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;<a class=\"id\" href=\"#sched\">sched</a>-><a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#ipc_do_vfree\">ipc_do_vfree</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#sched\">sched</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ipc_immediate_free - free ipc + rcu space</span>", 
"<span class=\"comment\"> * @head: RCU callback structure that contains pointer to be freed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Free from the RCU callback context.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ipc_immediate_free\">ipc_immediate_free</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_rcu_grace\">ipc_rcu_grace</a> *<a class=\"id\" href=\"#free\">free</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#ipc_rcu_grace\">ipc_rcu_grace</a>, <a class=\"id\" href=\"#rcu\">rcu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#free\">free</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#ipc_rcu_putref\">ipc_rcu_putref</a>(void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>if (--<a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, struct <a class=\"id\" href=\"#ipc_rcu_hdr\">ipc_rcu_hdr</a>, <a class=\"id\" href=\"#data\">data</a>)-><a class=\"id\" href=\"#refcount\">refcount</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, struct <a class=\"id\" href=\"#ipc_rcu_hdr\">ipc_rcu_hdr</a>, <a class=\"id\" href=\"#data\">data</a>)-><a class=\"id\" href=\"#is_vmalloc\">is_vmalloc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, struct <a class=\"id\" href=\"#ipc_rcu_grace\">ipc_rcu_grace</a>, <a class=\"id\" href=\"#data\">data</a>)-><a class=\"id\" href=\"#rcu\">rcu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc_schedule_free\">ipc_schedule_free</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, struct <a class=\"id\" href=\"#ipc_rcu_grace\">ipc_rcu_grace</a>, <a class=\"id\" href=\"#data\">data</a>)-><a class=\"id\" href=\"#rcu\">rcu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc_immediate_free\">ipc_immediate_free</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ipcperms<span class=\"ts\"/>-<span class=\"ts\"/>check IPC permissions</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ipcp: IPC permission set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flag: desired permission set.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check user, group, other permissions for access</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to ipc resources. return 0 if allowed</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"int <a class=\"id\" href=\"#ipcperms\">ipcperms</a> (struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipcp\">ipcp</a>, short <a class=\"id\" href=\"#flag\">flag</a>)", 
"{<span class=\"ts\"/><span class=\"comment\">/* flag will most probably be 0 or S_...UGO from &lt;linux/stat.h&gt; */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#euid\">euid</a> = <a class=\"id\" href=\"#current_euid\">current_euid</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#requested_mode\">requested_mode</a>, <a class=\"id\" href=\"#granted_mode\">granted_mode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_ipc_obj\">audit_ipc_obj</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#requested_mode\">requested_mode</a> = (<a class=\"id\" href=\"#flag\">flag</a> >> 6) | (<a class=\"id\" href=\"#flag\">flag</a> >> 3) | <a class=\"id\" href=\"#flag\">flag</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#granted_mode\">granted_mode</a> = <a class=\"id\" href=\"#ipcp\">ipcp</a>-><a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#euid\">euid</a> == <a class=\"id\" href=\"#ipcp\">ipcp</a>-><a class=\"id\" href=\"#cuid\">cuid</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#euid\">euid</a> == <a class=\"id\" href=\"#ipcp\">ipcp</a>-><a class=\"id\" href=\"#uid\">uid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#granted_mode\">granted_mode</a> >>= 6;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#in_group_p\">in_group_p</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>-><a class=\"id\" href=\"#cgid\">cgid</a>) || <a class=\"id\" href=\"#in_group_p\">in_group_p</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>-><a class=\"id\" href=\"#gid\">gid</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#granted_mode\">granted_mode</a> >>= 3;", 
"<span class=\"ts\"/><span class=\"comment\">/* is there some bit set in requested_mode but not in granted_mode? */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#requested_mode\">requested_mode</a> &amp; ~<a class=\"id\" href=\"#granted_mode\">granted_mode</a> &amp; 0007) && ", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_IPC_OWNER\">CAP_IPC_OWNER</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#security_ipc_permission\">security_ipc_permission</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>, <a class=\"id\" href=\"#flag\">flag</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Functions to convert between the kern_ipc_perm structure and the</span>", 
"<span class=\"comment\"> * old/new ipc_perm structures</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kernel_to_ipc64_perm<span class=\"ts\"/>-<span class=\"ts\"/>convert kernel ipc permissions to user</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@in: kernel permissions</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@out: new style IPC permissions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Turn the kernel object @in into a set of permissions descriptions</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for returning to userspace (@out).</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"", 
"void <a class=\"id\" href=\"#kernel_to_ipc64_perm\">kernel_to_ipc64_perm</a> (struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#in\">in</a>, struct <a class=\"id\" href=\"#ipc64_perm\">ipc64_perm</a> *<a class=\"id\" href=\"#out\">out</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#key\">key</a><span class=\"ts\"/>= <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#uid\">uid</a><span class=\"ts\"/>= <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#uid\">uid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#gid\">gid</a><span class=\"ts\"/>= <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#gid\">gid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#cuid\">cuid</a><span class=\"ts\"/>= <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#cuid\">cuid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#cgid\">cgid</a><span class=\"ts\"/>= <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#cgid\">cgid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/>= <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#seq\">seq</a><span class=\"ts\"/>= <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#seq\">seq</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ipc64_perm_to_ipc_perm<span class=\"ts\"/>-<span class=\"ts\"/>convert new ipc permissions to old</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@in: new style IPC permissions</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@out: old style IPC permissions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Turn the new style permissions object @in into a compatibility</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>object and store it into the @out pointer.</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"void <a class=\"id\" href=\"#ipc64_perm_to_ipc_perm\">ipc64_perm_to_ipc_perm</a> (struct <a class=\"id\" href=\"#ipc64_perm\">ipc64_perm</a> *<a class=\"id\" href=\"#in\">in</a>, struct <a class=\"id\" href=\"#ipc_perm\">ipc_perm</a> *<a class=\"id\" href=\"#out\">out</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#key\">key</a><span class=\"ts\"/>= <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SET_UID\">SET_UID</a>(<a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#uid\">uid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SET_GID\">SET_GID</a>(<a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#gid\">gid</a>, <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#gid\">gid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SET_UID\">SET_UID</a>(<a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#cuid\">cuid</a>, <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#cuid\">cuid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SET_GID\">SET_GID</a>(<a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#cgid\">cgid</a>, <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#cgid\">cgid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/>= <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#seq\">seq</a><span class=\"ts\"/>= <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#seq\">seq</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ipc_lock - Lock an ipc structure without rw_mutex held</span>", 
"<span class=\"comment\"> * @ids: IPC identifier set</span>", 
"<span class=\"comment\"> * @id: ipc id to look for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Look for an id in the ipc ids idr and lock the associated ipc object.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The ipc object is locked on exit.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipc_lock\">ipc_lock</a>(struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a> *<a class=\"id\" href=\"#ids\">ids</a>, int <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lid\">lid</a> = <a class=\"id\" href=\"#ipcid_to_idx\">ipcid_to_idx</a>(<a class=\"id\" href=\"#id\">id</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a> = <a class=\"id\" href=\"#idr_find\">idr_find</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#ipcs_idr\">ipcs_idr</a>, <a class=\"id\" href=\"#lid\">lid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#out\">out</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"comment\">/* ipc_rmid() may have already freed the ID while ipc_lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * was spinning: here verify that the structure is still valid</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#deleted\">deleted</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipc_lock_check\">ipc_lock_check</a>(struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a> *<a class=\"id\" href=\"#ids\">ids</a>, int <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a> = <a class=\"id\" href=\"#ipc_lock\">ipc_lock</a>(<a class=\"id\" href=\"#ids\">ids</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#out\">out</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ipc_checkid\">ipc_checkid</a>(<a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#id\">id</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc_unlock\">ipc_unlock</a>(<a class=\"id\" href=\"#out\">out</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EIDRM\">EIDRM</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ipcget - Common sys_*get() code</span>", 
"<span class=\"comment\"> * @ns : namsepace</span>", 
"<span class=\"comment\"> * @ids : IPC identifier set</span>", 
"<span class=\"comment\"> * @ops : operations to be called on ipc object creation, permission checks</span>", 
"<span class=\"comment\"> *        and further checks</span>", 
"<span class=\"comment\"> * @params : the parameters needed by the previous operations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Common routine called by sys_msgget(), sys_semget() and sys_shmget().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ipcget\">ipcget</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>, struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a> *<a class=\"id\" href=\"#ids\">ids</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_ops\">ipc_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>, struct <a class=\"id\" href=\"#ipc_params\">ipc_params</a> *<a class=\"id\" href=\"#params\">params</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#params\">params</a>-><a class=\"id\" href=\"#key\">key</a> == <a class=\"id\" href=\"#IPC_PRIVATE\">IPC_PRIVATE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ipcget_new\">ipcget_new</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#ids\">ids</a>, <a class=\"id\" href=\"#ops\">ops</a>, <a class=\"id\" href=\"#params\">params</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ipcget_public\">ipcget_public</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#ids\">ids</a>, <a class=\"id\" href=\"#ops\">ops</a>, <a class=\"id\" href=\"#params\">params</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ipc_update_perm - update the permissions of an IPC.</span>", 
"<span class=\"comment\"> * @in:  the permission given as input.</span>", 
"<span class=\"comment\"> * @out: the permission of the ipc to set.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ipc_update_perm\">ipc_update_perm</a>(struct <a class=\"id\" href=\"#ipc64_perm\">ipc64_perm</a> *<a class=\"id\" href=\"#in\">in</a>, struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#out\">out</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#uid\">uid</a> = <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#uid\">uid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#gid\">gid</a> = <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#gid\">gid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#mode\">mode</a> = (<a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#mode\">mode</a> &amp; ~<a class=\"id\" href=\"#S_IRWXUGO\">S_IRWXUGO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>| (<a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IRWXUGO\">S_IRWXUGO</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ipcctl_pre_down - retrieve an ipc and check permissions for some IPC_XXX cmd</span>", 
"<span class=\"comment\"> * @ids:  the table of ids where to look for the ipc</span>", 
"<span class=\"comment\"> * @id:   the id of the ipc to retrieve</span>", 
"<span class=\"comment\"> * @cmd:  the cmd to check</span>", 
"<span class=\"comment\"> * @perm: the permission to set</span>", 
"<span class=\"comment\"> * @extra_perm: one extra permission parameter used by msq</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function does some common audit and permissions check for some IPC_XXX</span>", 
"<span class=\"comment\"> * cmd and is called from semctl_down, shmctl_down and msgctl_down.</span>", 
"<span class=\"comment\"> * It must be called without any lock held and</span>", 
"<span class=\"comment\"> *  - retrieves the ipc with the given id in the given table.</span>", 
"<span class=\"comment\"> *  - performs some audit and permission check, depending on the given cmd</span>", 
"<span class=\"comment\"> *  - returns the ipc with both ipc and rw_mutex locks held in case of success</span>", 
"<span class=\"comment\"> *    or an err-code without any lock held otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipcctl_pre_down\">ipcctl_pre_down</a>(struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a> *<a class=\"id\" href=\"#ids\">ids</a>, int <a class=\"id\" href=\"#id\">id</a>, int <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ipc64_perm\">ipc64_perm</a> *<a class=\"id\" href=\"#perm\">perm</a>, int <a class=\"id\" href=\"#extra_perm\">extra_perm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipcp\">ipcp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#euid\">euid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#rw_mutex\">rw_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipcp\">ipcp</a> = <a class=\"id\" href=\"#ipc_lock_check\">ipc_lock_check</a>(<a class=\"id\" href=\"#ids\">ids</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_up\">out_up</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_ipc_obj\">audit_ipc_obj</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a> == <a class=\"id\" href=\"#IPC_SET\">IPC_SET</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_ipc_set_perm\">audit_ipc_set_perm</a>(<a class=\"id\" href=\"#extra_perm\">extra_perm</a>, <a class=\"id\" href=\"#perm\">perm</a>-><a class=\"id\" href=\"#uid\">uid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#perm\">perm</a>-><a class=\"id\" href=\"#gid\">gid</a>, <a class=\"id\" href=\"#perm\">perm</a>-><a class=\"id\" href=\"#mode\">mode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#euid\">euid</a> = <a class=\"id\" href=\"#current_euid\">current_euid</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#euid\">euid</a> == <a class=\"id\" href=\"#ipcp\">ipcp</a>-><a class=\"id\" href=\"#cuid\">cuid</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#euid\">euid</a> == <a class=\"id\" href=\"#ipcp\">ipcp</a>-><a class=\"id\" href=\"#uid\">uid</a>  || <a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ipcp\">ipcp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipc_unlock\">ipc_unlock</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>);", 
"<a class=\"id\" href=\"#out_up\">out_up</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#rw_mutex\">rw_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__ARCH_WANT_IPC_PARSE_VERSION\">__ARCH_WANT_IPC_PARSE_VERSION</a>", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ipc_parse_version<span class=\"ts\"/>-<span class=\"ts\"/>IPC call version</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd: pointer to command</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return IPC_64 for new style IPC and IPC_OLD for old style IPC. </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The @cmd value is turned from an encoding command and version into</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>just the command code.</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"int <a class=\"id\" href=\"#ipc_parse_version\">ipc_parse_version</a> (int *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#cmd\">cmd</a> &amp; <a class=\"id\" href=\"#IPC_64\">IPC_64</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cmd\">cmd</a> ^= <a class=\"id\" href=\"#IPC_64\">IPC_64</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#IPC_64\">IPC_64</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#IPC_OLD\">IPC_OLD</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __ARCH_WANT_IPC_PARSE_VERSION */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"struct <a class=\"id\" href=\"#ipc_proc_iter\">ipc_proc_iter</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_proc_iface\">ipc_proc_iface</a> *<a class=\"id\" href=\"#iface\">iface</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This routine locks the ipc structure found at least at position pos.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#sysvipc_find_ipc\">sysvipc_find_ipc</a>(struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a> *<a class=\"id\" href=\"#ids\">ids</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#new_pos\">new_pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipc\">ipc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#total\">total</a>, <a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#id\">id</a> = 0; <a class=\"id\" href=\"#id\">id</a> &lt; <a class=\"id\" href=\"#pos\">pos</a> && <a class=\"id\" href=\"#total\">total</a> &lt; <a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#in_use\">in_use</a>; <a class=\"id\" href=\"#id\">id</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc\">ipc</a> = <a class=\"id\" href=\"#idr_find\">idr_find</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#ipcs_idr\">ipcs_idr</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ipc\">ipc</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#total\">total</a> >= <a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#in_use\">in_use</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>for ( ; <a class=\"id\" href=\"#pos\">pos</a> &lt; <a class=\"id\" href=\"#IPCMNI\">IPCMNI</a>; <a class=\"id\" href=\"#pos\">pos</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc\">ipc</a> = <a class=\"id\" href=\"#idr_find\">idr_find</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#ipcs_idr\">ipcs_idr</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ipc\">ipc</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#new_pos\">new_pos</a> = <a class=\"id\" href=\"#pos\">pos</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc_lock_by_ptr\">ipc_lock_by_ptr</a>(<a class=\"id\" href=\"#ipc\">ipc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ipc\">ipc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Out of range - return NULL to terminate iteration */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#sysvipc_proc_next\">sysvipc_proc_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#it\">it</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_proc_iter\">ipc_proc_iter</a> *<a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_proc_iface\">ipc_proc_iface</a> *<a class=\"id\" href=\"#iface\">iface</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#iface\">iface</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipc\">ipc</a> = <a class=\"id\" href=\"#it\">it</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we had an ipc id locked before, unlock it */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ipc\">ipc</a> && <a class=\"id\" href=\"#ipc\">ipc</a> != <a class=\"id\" href=\"#SEQ_START_TOKEN\">SEQ_START_TOKEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc_unlock\">ipc_unlock</a>(<a class=\"id\" href=\"#ipc\">ipc</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sysvipc_find_ipc\">sysvipc_find_ipc</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#ids\">ids</a>[<a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#ids\">ids</a>], *<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * File positions: pos 0 -&gt; header, pos n -&gt; ipc id = n - 1.</span>", 
"<span class=\"comment\"> * SeqFile iterator: iterator value locked ipc pointer or SEQ_TOKEN_START.</span>", 
"<span class=\"comment\"> */</span>", 
"static void *<a class=\"id\" href=\"#sysvipc_proc_start\">sysvipc_proc_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_proc_iter\">ipc_proc_iter</a> *<a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_proc_iface\">ipc_proc_iface</a> *<a class=\"id\" href=\"#iface\">iface</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#iface\">iface</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a> *<a class=\"id\" href=\"#ids\">ids</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ids\">ids</a> = &amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#ids\">ids</a>[<a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#ids\">ids</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Take the lock - this will be released by the corresponding</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * call to stop().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#rw_mutex\">rw_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* pos &lt; 0 is invalid */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#pos\">pos</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* pos == 0 means header */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#pos\">pos</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SEQ_START_TOKEN\">SEQ_START_TOKEN</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find the (pos-1)th ipc */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sysvipc_find_ipc\">sysvipc_find_ipc</a>(<a class=\"id\" href=\"#ids\">ids</a>, *<a class=\"id\" href=\"#pos\">pos</a> - 1, <a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sysvipc_proc_stop\">sysvipc_proc_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#it\">it</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipc\">ipc</a> = <a class=\"id\" href=\"#it\">it</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_proc_iter\">ipc_proc_iter</a> *<a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_proc_iface\">ipc_proc_iface</a> *<a class=\"id\" href=\"#iface\">iface</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#iface\">iface</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_ids\">ipc_ids</a> *<a class=\"id\" href=\"#ids\">ids</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we had a locked structure, release it */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ipc\">ipc</a> && <a class=\"id\" href=\"#ipc\">ipc</a> != <a class=\"id\" href=\"#SEQ_START_TOKEN\">SEQ_START_TOKEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc_unlock\">ipc_unlock</a>(<a class=\"id\" href=\"#ipc\">ipc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ids\">ids</a> = &amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#ids\">ids</a>[<a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#ids\">ids</a>];", 
"<span class=\"ts\"/><span class=\"comment\">/* Release the lock we took in start() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#rw_mutex\">rw_mutex</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sysvipc_proc_show\">sysvipc_proc_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#it\">it</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_proc_iter\">ipc_proc_iter</a> *<a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_proc_iface\">ipc_proc_iface</a> *<a class=\"id\" href=\"#iface\">iface</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#iface\">iface</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#it\">it</a> == <a class=\"id\" href=\"#SEQ_START_TOKEN\">SEQ_START_TOKEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#header\">header</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#show\">show</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#it\">it</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#sysvipc_proc_seqops\">sysvipc_proc_seqops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#sysvipc_proc_start\">sysvipc_proc_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a>  = <a class=\"id\" href=\"#sysvipc_proc_stop\">sysvipc_proc_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a>  = <a class=\"id\" href=\"#sysvipc_proc_next\">sysvipc_proc_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a>  = <a class=\"id\" href=\"#sysvipc_proc_show\">sysvipc_proc_show</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#sysvipc_proc_open\">sysvipc_proc_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_proc_iter\">ipc_proc_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#iter\">iter</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#iter\">iter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#sysvipc_proc_seqops\">sysvipc_proc_seqops</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_kfree\">out_kfree</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#iface\">iface</a> = <a class=\"id\" href=\"#PDE\">PDE</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#ns\">ns</a>    = <a class=\"id\" href=\"#get_ipc_ns\">get_ipc_ns</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>-><a class=\"id\" href=\"#ipc_ns\">ipc_ns</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<a class=\"id\" href=\"#out_kfree\">out_kfree</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sysvipc_proc_release\">sysvipc_proc_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_proc_iter\">ipc_proc_iter</a> *<a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_ipc_ns\">put_ipc_ns</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_release_private\">seq_release_private</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#sysvipc_proc_fops\">sysvipc_proc_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a>    = <a class=\"id\" href=\"#sysvipc_proc_open\">sysvipc_proc_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a>    = <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a>  = <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#sysvipc_proc_release\">sysvipc_proc_release</a>,", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PROC_FS */</span>", 
];
xr_frag_insert('l/31/a011fb8135fd9c83943fffdb3539977a7875a6.xr', __xr_tmp);
