var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * direct.c - Low-level direct PCI config space access</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dmi\">dmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pci_x86\">pci_x86</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Functions for accessing PCI base (first 256 bytes) and extended</span>", 
"<span class=\"comment\"> * (4096 bytes per PCI function) configuration space with type 1</span>", 
"<span class=\"comment\"> * accesses.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PCI_CONF1_ADDRESS\">PCI_CONF1_ADDRESS</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#reg\">reg</a>) \\", 
"<span class=\"ts\"/>(0x80000000 | ((<a class=\"id\" href=\"#reg\">reg</a> &amp; 0xF00) << 16) | (<a class=\"id\" href=\"#bus\">bus</a> << 16) \\", 
"<span class=\"ts\"/>| (<a class=\"id\" href=\"#devfn\">devfn</a> << 8) | (<a class=\"id\" href=\"#reg\">reg</a> &amp; 0xFC))", 
"", 
"static int <a class=\"id\" href=\"#pci_conf1_read\">pci_conf1_read</a>(unsigned int <a class=\"id\" href=\"#seg\">seg</a>, unsigned int <a class=\"id\" href=\"#bus\">bus</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#devfn\">devfn</a>, int <a class=\"id\" href=\"#reg\">reg</a>, int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#bus\">bus</a> &gt; 255) || (<a class=\"id\" href=\"#devfn\">devfn</a> &gt; 255) || (<a class=\"id\" href=\"#reg\">reg</a> &gt; 4095)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#value\">value</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pci_config_lock\">pci_config_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outl\">outl</a>(<a class=\"id\" href=\"#PCI_CONF1_ADDRESS\">PCI_CONF1_ADDRESS</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#reg\">reg</a>), 0xCF8);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#inb\">inb</a>(0xCFC + (<a class=\"id\" href=\"#reg\">reg</a> &amp; 3));", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#inw\">inw</a>(0xCFC + (<a class=\"id\" href=\"#reg\">reg</a> &amp; 2));", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 4:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#inl\">inl</a>(0xCFC);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pci_config_lock\">pci_config_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#pci_conf1_write\">pci_conf1_write</a>(unsigned int <a class=\"id\" href=\"#seg\">seg</a>, unsigned int <a class=\"id\" href=\"#bus\">bus</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#devfn\">devfn</a>, int <a class=\"id\" href=\"#reg\">reg</a>, int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#bus\">bus</a> &gt; 255) || (<a class=\"id\" href=\"#devfn\">devfn</a> &gt; 255) || (<a class=\"id\" href=\"#reg\">reg</a> &gt; 4095))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pci_config_lock\">pci_config_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outl\">outl</a>(<a class=\"id\" href=\"#PCI_CONF1_ADDRESS\">PCI_CONF1_ADDRESS</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#reg\">reg</a>), 0xCF8);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>((<a class=\"id\" href=\"#u8\">u8</a>)<a class=\"id\" href=\"#value\">value</a>, 0xCFC + (<a class=\"id\" href=\"#reg\">reg</a> &amp; 3));", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outw\">outw</a>((<a class=\"id\" href=\"#u16\">u16</a>)<a class=\"id\" href=\"#value\">value</a>, 0xCFC + (<a class=\"id\" href=\"#reg\">reg</a> &amp; 2));", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 4:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outl\">outl</a>((<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#value\">value</a>, 0xCFC);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pci_config_lock\">pci_config_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#PCI_CONF1_ADDRESS\">PCI_CONF1_ADDRESS</a>", 
"", 
"struct <a class=\"id\" href=\"#pci_raw_ops\">pci_raw_ops</a> <a class=\"id\" href=\"#pci_direct_conf1\">pci_direct_conf1</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> =<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_conf1_read\">pci_conf1_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a> =<span class=\"ts\"/><a class=\"id\" href=\"#pci_conf1_write\">pci_conf1_write</a>,", 
"};", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Functions for accessing PCI configuration space with type 2 accesses</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PCI_CONF2_ADDRESS\">PCI_CONF2_ADDRESS</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#reg\">reg</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#u16\">u16</a>)(0xC000 | (<a class=\"id\" href=\"#dev\">dev</a> << 8) | <a class=\"id\" href=\"#reg\">reg</a>)", 
"", 
"static int <a class=\"id\" href=\"#pci_conf2_read\">pci_conf2_read</a>(unsigned int <a class=\"id\" href=\"#seg\">seg</a>, unsigned int <a class=\"id\" href=\"#bus\">bus</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#devfn\">devfn</a>, int <a class=\"id\" href=\"#reg\">reg</a>, int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#fn\">fn</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#bus\">bus</a> &gt; 255) || (<a class=\"id\" href=\"#devfn\">devfn</a> &gt; 255) || (<a class=\"id\" href=\"#reg\">reg</a> &gt; 255)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#value\">value</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#PCI_SLOT\">PCI_SLOT</a>(<a class=\"id\" href=\"#devfn\">devfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#PCI_FUNC\">PCI_FUNC</a>(<a class=\"id\" href=\"#devfn\">devfn</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a> &amp; 0x10) ", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PCIBIOS_DEVICE_NOT_FOUND\">PCIBIOS_DEVICE_NOT_FOUND</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pci_config_lock\">pci_config_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>((<a class=\"id\" href=\"#u8\">u8</a>)(0xF0 | (<a class=\"id\" href=\"#fn\">fn</a> << 1)), 0xCF8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>((<a class=\"id\" href=\"#u8\">u8</a>)<a class=\"id\" href=\"#bus\">bus</a>, 0xCFA);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#inb\">inb</a>(<a class=\"id\" href=\"#PCI_CONF2_ADDRESS\">PCI_CONF2_ADDRESS</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#reg\">reg</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#inw\">inw</a>(<a class=\"id\" href=\"#PCI_CONF2_ADDRESS\">PCI_CONF2_ADDRESS</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#reg\">reg</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 4:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#inl\">inl</a>(<a class=\"id\" href=\"#PCI_CONF2_ADDRESS\">PCI_CONF2_ADDRESS</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#reg\">reg</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(0, 0xCF8);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pci_config_lock\">pci_config_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#pci_conf2_write\">pci_conf2_write</a>(unsigned int <a class=\"id\" href=\"#seg\">seg</a>, unsigned int <a class=\"id\" href=\"#bus\">bus</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#devfn\">devfn</a>, int <a class=\"id\" href=\"#reg\">reg</a>, int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#fn\">fn</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#bus\">bus</a> &gt; 255) || (<a class=\"id\" href=\"#devfn\">devfn</a> &gt; 255) || (<a class=\"id\" href=\"#reg\">reg</a> &gt; 255)) ", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#PCI_SLOT\">PCI_SLOT</a>(<a class=\"id\" href=\"#devfn\">devfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#PCI_FUNC\">PCI_FUNC</a>(<a class=\"id\" href=\"#devfn\">devfn</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a> &amp; 0x10) ", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PCIBIOS_DEVICE_NOT_FOUND\">PCIBIOS_DEVICE_NOT_FOUND</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pci_config_lock\">pci_config_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>((<a class=\"id\" href=\"#u8\">u8</a>)(0xF0 | (<a class=\"id\" href=\"#fn\">fn</a> << 1)), 0xCF8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>((<a class=\"id\" href=\"#u8\">u8</a>)<a class=\"id\" href=\"#bus\">bus</a>, 0xCFA);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>((<a class=\"id\" href=\"#u8\">u8</a>)<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#PCI_CONF2_ADDRESS\">PCI_CONF2_ADDRESS</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#reg\">reg</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outw\">outw</a>((<a class=\"id\" href=\"#u16\">u16</a>)<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#PCI_CONF2_ADDRESS\">PCI_CONF2_ADDRESS</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#reg\">reg</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 4:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outl\">outl</a>((<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#PCI_CONF2_ADDRESS\">PCI_CONF2_ADDRESS</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#reg\">reg</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(0, 0xCF8);    ", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pci_config_lock\">pci_config_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#PCI_CONF2_ADDRESS\">PCI_CONF2_ADDRESS</a>", 
"", 
"struct <a class=\"id\" href=\"#pci_raw_ops\">pci_raw_ops</a> <a class=\"id\" href=\"#pci_direct_conf2\">pci_direct_conf2</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> =<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_conf2_read\">pci_conf2_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a> =<span class=\"ts\"/><a class=\"id\" href=\"#pci_conf2_write\">pci_conf2_write</a>,", 
"};", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Before we decide to use direct hardware access mechanisms, we try to do some</span>", 
"<span class=\"comment\"> * trivial checks to ensure it at least _seems_ to be working -- we just test</span>", 
"<span class=\"comment\"> * whether bus 00 contains a host bridge (this is similar to checking</span>", 
"<span class=\"comment\"> * techniques used in XFree86, but ours should be more reliable since we</span>", 
"<span class=\"comment\"> * attempt to make use of direct access hints provided by the PCI BIOS).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This should be close to trivial, but it isn't, because there are buggy</span>", 
"<span class=\"comment\"> * chipsets (yes, you guessed it, by Intel and Compaq) that have no class ID.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pci_sanity_check\">pci_sanity_check</a>(struct <a class=\"id\" href=\"#pci_raw_ops\">pci_raw_ops</a> *<a class=\"id\" href=\"#o\">o</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#x\">x</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#year\">year</a>, <a class=\"id\" href=\"#devfn\">devfn</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_probe\">pci_probe</a> &amp; <a class=\"id\" href=\"#PCI_NO_CHECKS\">PCI_NO_CHECKS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"comment\">/* Assume Type 1 works for newer systems.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   This handles machines that don't have anything on PCI Bus 0. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmi_get_date\">dmi_get_date</a>(<a class=\"id\" href=\"#DMI_BIOS_DATE\">DMI_BIOS_DATE</a>, &amp;<a class=\"id\" href=\"#year\">year</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#year\">year</a> >= 2001)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#devfn\">devfn</a> = 0; <a class=\"id\" href=\"#devfn\">devfn</a> &lt; 0x100; <a class=\"id\" href=\"#devfn\">devfn</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#o\">o</a>-><a class=\"id\" href=\"#read\">read</a>(0, 0, <a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#PCI_CLASS_DEVICE\">PCI_CLASS_DEVICE</a>, 2, &amp;<a class=\"id\" href=\"#x\">x</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#x\">x</a> == <a class=\"id\" href=\"#PCI_CLASS_BRIDGE_HOST\">PCI_CLASS_BRIDGE_HOST</a> || <a class=\"id\" href=\"#x\">x</a> == <a class=\"id\" href=\"#PCI_CLASS_DISPLAY_VGA\">PCI_CLASS_DISPLAY_VGA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#o\">o</a>-><a class=\"id\" href=\"#read\">read</a>(0, 0, <a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#PCI_VENDOR_ID\">PCI_VENDOR_ID</a>, 2, &amp;<a class=\"id\" href=\"#x\">x</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#x\">x</a> == <a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a> || <a class=\"id\" href=\"#x\">x</a> == <a class=\"id\" href=\"#PCI_VENDOR_ID_COMPAQ\">PCI_VENDOR_ID_COMPAQ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DBG\">DBG</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"PCI: Sanity check failed\\n\");", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pci_check_type1\">pci_check_type1</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#works\">works</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(0x01, 0xCFB);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#inl\">inl</a>(0xCF8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outl\">outl</a>(0x80000000, 0xCF8);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inl\">inl</a>(0xCF8) == 0x80000000 && <a class=\"id\" href=\"#pci_sanity_check\">pci_sanity_check</a>(&amp;<a class=\"id\" href=\"#pci_direct_conf1\">pci_direct_conf1</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#works\">works</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outl\">outl</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, 0xCF8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#works\">works</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pci_check_type2\">pci_check_type2</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#works\">works</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
];
xr_frag_insert('l/31/a6af9898468f4373153e5270f0a7a6aaf6ea5e.xr', __xr_tmp);
