var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: psutils - Parser miscellaneous utilities (Parser only)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acparser.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"amlcode.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_PARSER\">ACPI_PARSER</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"psutils\")", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ps_create_scope_op</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      A new Scope object, null on failure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Create a Scope and associated namepath op with the root name</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#acpi_ps_create_scope_op\">acpi_ps_create_scope_op</a>(void)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#scope_op\">scope_op</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scope_op\">scope_op</a> = <a class=\"id\" href=\"#acpi_ps_alloc_op\">acpi_ps_alloc_op</a>(<a class=\"id\" href=\"#AML_SCOPE_OP\">AML_SCOPE_OP</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scope_op\">scope_op</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scope_op\">scope_op</a>-><a class=\"id\" href=\"#named\">named</a>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#ACPI_ROOT_NAME\">ACPI_ROOT_NAME</a>;", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#scope_op\">scope_op</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ps_init_op</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Op              - A newly allocated Op object</span>", 
"<span class=\"comment\"> *              Opcode          - Opcode to store in the Op</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Initialize a parse (Op) object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ps_init_op\">acpi_ps_init_op</a>(union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#opcode\">opcode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#descriptor_type\">descriptor_type</a> = <a class=\"id\" href=\"#ACPI_DESC_TYPE_PARSER\">ACPI_DESC_TYPE_PARSER</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a> = <a class=\"id\" href=\"#opcode\">opcode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DISASM_ONLY_MEMBERS\">ACPI_DISASM_ONLY_MEMBERS</a>(<a class=\"id\" href=\"#ACPI_STRNCPY\">ACPI_STRNCPY</a>(<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_op_name\">aml_op_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      (<a class=\"id\" href=\"#acpi_ps_get_opcode_info\">acpi_ps_get_opcode_info</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#opcode\">opcode</a>))-><a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      sizeof(<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_op_name\">aml_op_name</a>)));", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ps_alloc_op</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Opcode          - Opcode that will be stored in the new Op</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Pointer to the new Op, null on failure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Allocate an acpi_op, choose op type (and thus size) based on</span>", 
"<span class=\"comment\"> *              opcode.  A cache of opcodes is available for the pure</span>", 
"<span class=\"comment\"> *              GENERIC_OP, since this is by far the most commonly used.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#acpi_ps_alloc_op\">acpi_ps_alloc_op</a>(<a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#opcode\">opcode</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#op\">op</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#acpi_opcode_info\">acpi_opcode_info</a> *<a class=\"id\" href=\"#op_info\">op_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#ACPI_PARSEOP_GENERIC\">ACPI_PARSEOP_GENERIC</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op_info\">op_info</a> = <a class=\"id\" href=\"#acpi_ps_get_opcode_info\">acpi_ps_get_opcode_info</a>(<a class=\"id\" href=\"#opcode\">opcode</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Determine type of parse_op required */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op_info\">op_info</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#AML_DEFER\">AML_DEFER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#ACPI_PARSEOP_DEFERRED\">ACPI_PARSEOP_DEFERRED</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#op_info\">op_info</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#AML_NAMED\">AML_NAMED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#ACPI_PARSEOP_NAMED\">ACPI_PARSEOP_NAMED</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#opcode\">opcode</a> == <a class=\"id\" href=\"#AML_INT_BYTELIST_OP\">AML_INT_BYTELIST_OP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#ACPI_PARSEOP_BYTELIST\">ACPI_PARSEOP_BYTELIST</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate the minimum required size object */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> == <a class=\"id\" href=\"#ACPI_PARSEOP_GENERIC\">ACPI_PARSEOP_GENERIC</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The generic op (default) is by far the most common (16 to 1) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#acpi_os_acquire_object\">acpi_os_acquire_object</a>(<a class=\"id\" href=\"#acpi_gbl_ps_node_cache\">acpi_gbl_ps_node_cache</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Extended parseop */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#acpi_os_acquire_object\">acpi_os_acquire_object</a>(<a class=\"id\" href=\"#acpi_gbl_ps_node_ext_cache\">acpi_gbl_ps_node_ext_cache</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize the Op */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ps_init_op\">acpi_ps_init_op</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#opcode\">opcode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#op\">op</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ps_free_op</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Op              - Op to be freed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Free an Op object.  Either put it on the GENERIC_OP cache list</span>", 
"<span class=\"comment\"> *              or actually free it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ps_free_op\">acpi_ps_free_op</a>(union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_NAME\">ACPI_FUNCTION_NAME</a>(<a class=\"id\" href=\"#ps_free_op\">ps_free_op</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a> == <a class=\"id\" href=\"#AML_INT_RETURN_VALUE_OP\">AML_INT_RETURN_VALUE_OP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_ALLOCATIONS\">ACPI_DB_ALLOCATIONS</a>, \"Free retval op: %p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#op\">op</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_PARSEOP_GENERIC\">ACPI_PARSEOP_GENERIC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_os_release_object\">acpi_os_release_object</a>(<a class=\"id\" href=\"#acpi_gbl_ps_node_cache\">acpi_gbl_ps_node_cache</a>, <a class=\"id\" href=\"#op\">op</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_os_release_object\">acpi_os_release_object</a>(<a class=\"id\" href=\"#acpi_gbl_ps_node_ext_cache\">acpi_gbl_ps_node_ext_cache</a>, <a class=\"id\" href=\"#op\">op</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    Utility functions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Low level character and object functions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Is \"c\" a namestring lead character?</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#acpi_ps_is_leading_char\">acpi_ps_is_leading_char</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#u8\">u8</a>) (<a class=\"id\" href=\"#c\">c</a> == '_' || (<a class=\"id\" href=\"#c\">c</a> >= 'A' && <a class=\"id\" href=\"#c\">c</a> <= 'Z')));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Is \"c\" a namestring prefix character?</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#acpi_ps_is_prefix_char\">acpi_ps_is_prefix_char</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#u8\">u8</a>) (<a class=\"id\" href=\"#c\">c</a> == '\\\\' || <a class=\"id\" href=\"#c\">c</a> == '^'));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get op's name (4-byte name segment) or 0 if unnamed</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ACPI_FUTURE_USAGE\">ACPI_FUTURE_USAGE</a>", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#acpi_ps_get_name\">acpi_ps_get_name</a>(union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> * <a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The \"generic\" object has no name associated with it */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_PARSEOP_GENERIC\">ACPI_PARSEOP_GENERIC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only the \"Extended\" parse objects have a name */</span>", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#named\">named</a>.<a class=\"id\" href=\"#name\">name</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  ACPI_FUTURE_USAGE  */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set op's name</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#acpi_ps_set_name\">acpi_ps_set_name</a>(union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The \"generic\" object has no name associated with it */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_PARSEOP_GENERIC\">ACPI_PARSEOP_GENERIC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#named\">named</a>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"}", 
];
xr_frag_insert('l/31/b850132d565d688c48c4b30bd627fe6b806078.xr', __xr_tmp);
