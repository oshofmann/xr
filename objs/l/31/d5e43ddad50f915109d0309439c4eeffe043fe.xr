var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  fs/anon_inodes.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2007  Davide Libenzi &lt;davidel@xmailserver.org&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Thanks to Arnd Bergmann for code review and suggestions.</span>", 
"<span class=\"comment\"> *  More changes for Thomas Gleixner suggestions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cred\">cred</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#magic\">magic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#anon_inodes\">anon_inodes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#anon_inode_mnt\">anon_inode_mnt</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#anon_inode_inode\">anon_inode_inode</a>;", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#anon_inode_fops\">anon_inode_fops</a>;", 
"", 
"static int <a class=\"id\" href=\"#anon_inodefs_get_sb\">anon_inodefs_get_sb</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs_type\">fs_type</a>, int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const char *<a class=\"id\" href=\"#dev_name\">dev_name</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#get_sb_pseudo\">get_sb_pseudo</a>(<a class=\"id\" href=\"#fs_type\">fs_type</a>, \"anon_inode:\", <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#ANON_INODE_FS_MAGIC\">ANON_INODE_FS_MAGIC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * anon_inodefs_dname() is called from d_path().</span>", 
"<span class=\"comment\"> */</span>", 
"static char *<a class=\"id\" href=\"#anon_inodefs_dname\">anon_inodefs_dname</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, char *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dynamic_dname\">dynamic_dname</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, \"anon_inode:%s\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#name\">name</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> <a class=\"id\" href=\"#anon_inode_fs_type\">anon_inode_fs_type</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"anon_inodefs\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_sb\">get_sb</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#anon_inodefs_get_sb\">anon_inodefs_get_sb</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#kill_sb\">kill_sb</a><span class=\"ts\"/>= <a class=\"id\" href=\"#kill_anon_super\">kill_anon_super</a>,", 
"};", 
"static const struct <a class=\"id\" href=\"#dentry_operations\">dentry_operations</a> <a class=\"id\" href=\"#anon_inodefs_dentry_operations\">anon_inodefs_dentry_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#d_dname\">d_dname</a><span class=\"ts\"/>= <a class=\"id\" href=\"#anon_inodefs_dname\">anon_inodefs_dname</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * nop .set_page_dirty method so that people can use .page_mkwrite on</span>", 
"<span class=\"comment\"> * anon inodes.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#anon_set_page_dirty\">anon_set_page_dirty</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#address_space_operations\">address_space_operations</a> <a class=\"id\" href=\"#anon_aops\">anon_aops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a> = <a class=\"id\" href=\"#anon_set_page_dirty\">anon_set_page_dirty</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * anon_inode_getfd - creates a new file instance by hooking it up to an</span>", 
"<span class=\"comment\"> *                    anonymous inode, and a dentry that describe the \"class\"</span>", 
"<span class=\"comment\"> *                    of the file</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @name:    [in]    name of the \"class\" of the new file</span>", 
"<span class=\"comment\"> * @fops:    [in]    file operations for the new file</span>", 
"<span class=\"comment\"> * @priv:    [in]    private data for the new file (will be file's private_data)</span>", 
"<span class=\"comment\"> * @flags:   [in]    flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Creates a new file by hooking it on a single inode. This is useful for files</span>", 
"<span class=\"comment\"> * that do not need to have a full-fledged inode in order to operate correctly.</span>", 
"<span class=\"comment\"> * All the files created with anon_inode_getfile() will share a single inode,</span>", 
"<span class=\"comment\"> * hence saving memory and avoiding code duplication for the file/inode/dentry</span>", 
"<span class=\"comment\"> * setup.  Returns the newly created file* or an error pointer.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#anon_inode_getfile\">anon_inode_getfile</a>(const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#fops\">fops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#priv\">priv</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#qstr\">qstr</a> <a class=\"id\" href=\"#this\">this</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#anon_inode_inode\">anon_inode_inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENODEV\">ENODEV</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fops\">fops</a>-><a class=\"id\" href=\"#owner\">owner</a> && !<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#fops\">fops</a>-><a class=\"id\" href=\"#owner\">owner</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOENT\">ENOENT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Link the inode to a directory entry by creating a unique name</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * using the inode sequence number.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#hash\">hash</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#d_alloc\">d_alloc</a>(<a class=\"id\" href=\"#anon_inode_mnt\">anon_inode_mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>, &amp;<a class=\"id\" href=\"#this\">this</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_module\">err_module</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#mntget\">mntget</a>(<a class=\"id\" href=\"#anon_inode_mnt\">anon_inode_mnt</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We know the anon_inode inode count is always greater than zero,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so we can avoid doing an igrab() and we can use an open-coded</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * atomic_inc().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#anon_inode_inode\">anon_inode_inode</a>-><a class=\"id\" href=\"#i_count\">i_count</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_op\">d_op</a> = &amp;<a class=\"id\" href=\"#anon_inodefs_dentry_operations\">anon_inodefs_dentry_operations</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d_instantiate\">d_instantiate</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#anon_inode_inode\">anon_inode_inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENFILE\">ENFILE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#alloc_file\">alloc_file</a>(&amp;<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#OPEN_FMODE\">OPEN_FMODE</a>(<a class=\"id\" href=\"#flags\">flags</a>), <a class=\"id\" href=\"#fops\">fops</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_dput\">err_dput</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a> = <a class=\"id\" href=\"#anon_inode_inode\">anon_inode_inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> = <a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#O_ACCMODE\">O_ACCMODE</a> | <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_version\">f_version</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a> = <a class=\"id\" href=\"#priv\">priv</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#file\">file</a>;", 
"", 
"<a class=\"id\" href=\"#err_dput\">err_dput</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<a class=\"id\" href=\"#err_module\">err_module</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#fops\">fops</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#anon_inode_getfile\">anon_inode_getfile</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * anon_inode_getfd - creates a new file instance by hooking it up to an</span>", 
"<span class=\"comment\"> *                    anonymous inode, and a dentry that describe the \"class\"</span>", 
"<span class=\"comment\"> *                    of the file</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @name:    [in]    name of the \"class\" of the new file</span>", 
"<span class=\"comment\"> * @fops:    [in]    file operations for the new file</span>", 
"<span class=\"comment\"> * @priv:    [in]    private data for the new file (will be file's private_data)</span>", 
"<span class=\"comment\"> * @flags:   [in]    flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Creates a new file by hooking it on a single inode. This is useful for files</span>", 
"<span class=\"comment\"> * that do not need to have a full-fledged inode in order to operate correctly.</span>", 
"<span class=\"comment\"> * All the files created with anon_inode_getfd() will share a single inode,</span>", 
"<span class=\"comment\"> * hence saving memory and avoiding code duplication for the file/inode/dentry</span>", 
"<span class=\"comment\"> * setup.  Returns new descriptor or an error code.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#anon_inode_getfd\">anon_inode_getfd</a>(const char *<a class=\"id\" href=\"#name\">name</a>, const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#fops\">fops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     void *<a class=\"id\" href=\"#priv\">priv</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#fd\">fd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#get_unused_fd_flags\">get_unused_fd_flags</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fd\">fd</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#anon_inode_getfile\">anon_inode_getfile</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#fops\">fops</a>, <a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#file\">file</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_put_unused_fd\">err_put_unused_fd</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fd_install\">fd_install</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fd\">fd</a>;", 
"", 
"<a class=\"id\" href=\"#err_put_unused_fd\">err_put_unused_fd</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_unused_fd\">put_unused_fd</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#anon_inode_getfd\">anon_inode_getfd</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A single inode exists for all anon_inode files. Contrary to pipes,</span>", 
"<span class=\"comment\"> * anon_inode inodes have no associated per-instance data, so we need</span>", 
"<span class=\"comment\"> * only allocate one of them.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#anon_inode_mkinode\">anon_inode_mkinode</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#new_inode\">new_inode</a>(<a class=\"id\" href=\"#anon_inode_mnt\">anon_inode_mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = &amp;<a class=\"id\" href=\"#anon_inode_fops\">anon_inode_fops</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a> = &amp;<a class=\"id\" href=\"#anon_aops\">anon_aops</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Mark the inode dirty from the very beginning,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that way it will never be moved to the dirty</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * list because mark_inode_dirty() will think</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that it already _is_ on the dirty list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> = <a class=\"id\" href=\"#I_DIRTY\">I_DIRTY</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> = <a class=\"id\" href=\"#S_IRUSR\">S_IRUSR</a> | <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a> = <a class=\"id\" href=\"#current_fsuid\">current_fsuid</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a> = <a class=\"id\" href=\"#current_fsgid\">current_fsgid</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> |= <a class=\"id\" href=\"#S_PRIVATE\">S_PRIVATE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_atime\">i_atime</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mtime\">i_mtime</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a> = <a class=\"id\" href=\"#CURRENT_TIME\">CURRENT_TIME</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#anon_inode_init\">anon_inode_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#register_filesystem\">register_filesystem</a>(&amp;<a class=\"id\" href=\"#anon_inode_fs_type\">anon_inode_fs_type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_exit\">err_exit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_inode_mnt\">anon_inode_mnt</a> = <a class=\"id\" href=\"#kern_mount\">kern_mount</a>(&amp;<a class=\"id\" href=\"#anon_inode_fs_type\">anon_inode_fs_type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#anon_inode_mnt\">anon_inode_mnt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#anon_inode_mnt\">anon_inode_mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_unregister_filesystem\">err_unregister_filesystem</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_inode_inode\">anon_inode_inode</a> = <a class=\"id\" href=\"#anon_inode_mkinode\">anon_inode_mkinode</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#anon_inode_inode\">anon_inode_inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#anon_inode_inode\">anon_inode_inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_mntput\">err_mntput</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#err_mntput\">err_mntput</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mntput\">mntput</a>(<a class=\"id\" href=\"#anon_inode_mnt\">anon_inode_mnt</a>);", 
"<a class=\"id\" href=\"#err_unregister_filesystem\">err_unregister_filesystem</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_filesystem\">unregister_filesystem</a>(&amp;<a class=\"id\" href=\"#anon_inode_fs_type\">anon_inode_fs_type</a>);", 
"<a class=\"id\" href=\"#err_exit\">err_exit</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"anon_inode_init() failed (%d)\\n\", <a class=\"id\" href=\"#error\">error</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#fs_initcall\">fs_initcall</a>(<a class=\"id\" href=\"#anon_inode_init\">anon_inode_init</a>);", 
"", 
];
xr_frag_insert('l/31/d5e43ddad50f915109d0309439c4eeffe043fe.xr', __xr_tmp);
