var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>linux/kernel/softirq.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Copyright (C) 1992 Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Distribute under GPLv2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Rewritten. Old one was good in 2.2, but in 2.3 it was immoral. --ANK (990903)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Remote softirq infrastructure is by Jens Axboe.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel_stat\">kernel_stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#freezer\">freezer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kthread\">kthread</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ftrace\">ftrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tick\">tick</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CREATE_TRACE_POINTS\">CREATE_TRACE_POINTS</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#irq\">irq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#irq\">irq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">   - No shared variables, all the data are CPU local.</span>", 
"<span class=\"comment\">   - If a softirq needs serialization, let it serialize itself</span>", 
"<span class=\"comment\">     by its own spinlocks.</span>", 
"<span class=\"comment\">   - Even if softirq is serialized, only local cpu is marked for</span>", 
"<span class=\"comment\">     execution. Hence, we get something sort of weak cpu binding.</span>", 
"<span class=\"comment\">     Though it is still not clear, will it result in better locality</span>", 
"<span class=\"comment\">     or will not.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   Examples:</span>", 
"<span class=\"comment\">   - NET RX softirq. It is multithreaded and does not require</span>", 
"<span class=\"comment\">     any global serialization.</span>", 
"<span class=\"comment\">   - NET TX softirq. It kicks software netdevice queues, hence</span>", 
"<span class=\"comment\">     it is logically serialized per device, but this serialization</span>", 
"<span class=\"comment\">     is invisible to common code.</span>", 
"<span class=\"comment\">   - Tasklets: serialized wrt itself.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ARCH_IRQ_STAT\">__ARCH_IRQ_STAT</a>", 
"<a class=\"id\" href=\"#irq_cpustat_t\">irq_cpustat_t</a> <a class=\"id\" href=\"#irq_stat\">irq_stat</a>[<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>] <a class=\"id\" href=\"#____cacheline_aligned\">____cacheline_aligned</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#irq_stat\">irq_stat</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static struct <a class=\"id\" href=\"#softirq_action\">softirq_action</a> <a class=\"id\" href=\"#softirq_vec\">softirq_vec</a>[<a class=\"id\" href=\"#NR_SOFTIRQS\">NR_SOFTIRQS</a>] <a class=\"id\" href=\"#__cacheline_aligned_in_smp\">__cacheline_aligned_in_smp</a>;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *, <a class=\"id\" href=\"#ksoftirqd\">ksoftirqd</a>);", 
"", 
"char *<a class=\"id\" href=\"#softirq_to_name\">softirq_to_name</a>[<a class=\"id\" href=\"#NR_SOFTIRQS\">NR_SOFTIRQS</a>] = {", 
"<span class=\"ts\"/>\"HI\", \"TIMER\", \"NET_TX\", \"NET_RX\", \"BLOCK\", \"BLOCK_IOPOLL\",", 
"<span class=\"ts\"/>\"TASKLET\", \"SCHED\", \"HRTIMER\",<span class=\"ts\"/>\"RCU\"", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * we cannot loop indefinitely here to avoid userspace starvation,</span>", 
"<span class=\"comment\"> * but we also don't want to introduce a worst case 1/HZ latency</span>", 
"<span class=\"comment\"> * to the pending events, so lets the scheduler to balance</span>", 
"<span class=\"comment\"> * the softirq load for us.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#wakeup_softirqd\">wakeup_softirqd</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Interrupts are disabled: no need to stop preemption */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#ksoftirqd\">ksoftirqd</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a> && <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This one is for softirq.c-internal use,</span>", 
"<span class=\"comment\"> * where hardirqs are disabled legitimately:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACE_IRQFLAGS\">CONFIG_TRACE_IRQFLAGS</a>", 
"static void <a class=\"id\" href=\"#__local_bh_disable\">__local_bh_disable</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#in_irq\">in_irq</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_local_irq_save\">raw_local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The preempt tracer hooks into add_preempt_count and will break</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lockdep because it calls back into lockdep after SOFTIRQ_OFFSET</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is set and before current-&gt;softirq_enabled is cleared.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We must manually increment preempt_count here and manually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * call the trace_preempt_off later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_count\">preempt_count</a>() += <a class=\"id\" href=\"#SOFTIRQ_OFFSET\">SOFTIRQ_OFFSET</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
];
xr_frag_insert('l/32/251c0375b7e76e945caf81436d235d7df86fd2.xr', __xr_tmp);
