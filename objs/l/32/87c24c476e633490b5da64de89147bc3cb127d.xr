var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_VM86_H\">_ASM_X86_VM86_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_VM86_H\">_ASM_X86_VM86_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * I'm guessing at the VIF/VIP flag usage, but hope that this is how</span>", 
"<span class=\"comment\"> * the Pentium uses them. Linux will return from vm86 mode when both</span>", 
"<span class=\"comment\"> * VIF and VIP is set.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On a Pentium, we could probably optimize the virtual flags directly</span>", 
"<span class=\"comment\"> * in the eflags register instead of doing it \"by hand\" in vflags...</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Linus</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>-<a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BIOSSEG\">BIOSSEG</a><span class=\"ts\"/><span class=\"ts\"/>0x0f000", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPU_086\">CPU_086</a><span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPU_186\">CPU_186</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPU_286\">CPU_286</a><span class=\"ts\"/><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPU_386\">CPU_386</a><span class=\"ts\"/><span class=\"ts\"/>3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPU_486\">CPU_486</a><span class=\"ts\"/><span class=\"ts\"/>4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPU_586\">CPU_586</a><span class=\"ts\"/><span class=\"ts\"/>5", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return values for the 'vm86()' system call</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM86_TYPE\">VM86_TYPE</a>(<a class=\"id\" href=\"#retval\">retval</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#retval\">retval</a>) &amp; 0xff)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM86_ARG\">VM86_ARG</a>(<a class=\"id\" href=\"#retval\">retval</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#retval\">retval</a>) >> 8)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM86_SIGNAL\">VM86_SIGNAL</a><span class=\"ts\"/>0<span class=\"ts\"/><span class=\"comment\">/* return due to signal */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM86_UNKNOWN\">VM86_UNKNOWN</a><span class=\"ts\"/>1<span class=\"ts\"/><span class=\"comment\">/* unhandled GP fault</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   - IO-instruction or similar */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM86_INTx\">VM86_INTx</a><span class=\"ts\"/>2<span class=\"ts\"/><span class=\"comment\">/* int3/int x instruction (ARG = x) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM86_STI\">VM86_STI</a><span class=\"ts\"/>3<span class=\"ts\"/><span class=\"comment\">/* sti/popf/iret instruction enabled</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   virtual interrupts */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Additional return values when invoking new vm86()</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM86_PICRETURN\">VM86_PICRETURN</a><span class=\"ts\"/>4<span class=\"ts\"/><span class=\"comment\">/* return due to pending PIC request */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM86_TRAP\">VM86_TRAP</a><span class=\"ts\"/>6<span class=\"ts\"/><span class=\"comment\">/* return due to DOS-debugger request */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * function codes when invoking new vm86()</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM86_PLUS_INSTALL_CHECK\">VM86_PLUS_INSTALL_CHECK</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM86_ENTER\">VM86_ENTER</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM86_ENTER_NO_BYPASS\">VM86_ENTER_NO_BYPASS</a><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#VM86_REQUEST_IRQ\">VM86_REQUEST_IRQ</a><span class=\"ts\"/>3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM86_FREE_IRQ\">VM86_FREE_IRQ</a><span class=\"ts\"/><span class=\"ts\"/>4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM86_GET_IRQ_BITS\">VM86_GET_IRQ_BITS</a><span class=\"ts\"/>5", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM86_GET_AND_RESET_IRQ\">VM86_GET_AND_RESET_IRQ</a><span class=\"ts\"/>6", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the stack-layout seen by the user space program when we have</span>", 
"<span class=\"comment\"> * done a translation of \"SAVE_ALL\" from vm86 mode. The real kernel layout</span>", 
"<span class=\"comment\"> * is 'kernel_vm86_regs' (see below).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#vm86_regs\">vm86_regs</a> {", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * normal regs, with special meaning for the segment descriptors..</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ebx\">ebx</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ecx\">ecx</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#edx\">edx</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#esi\">esi</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#edi\">edi</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ebp\">ebp</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#eax\">eax</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#__null_ds\">__null_ds</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#__null_es\">__null_es</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#__null_fs\">__null_fs</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#__null_gs\">__null_gs</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#orig_eax\">orig_eax</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#eip\">eip</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#__csh\">__csh</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#eflags\">eflags</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#esp\">esp</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#__ssh\">__ssh</a>;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * these are specific to v86 mode:</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#es\">es</a>, <a class=\"id\" href=\"#__esh\">__esh</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#ds\">ds</a>, <a class=\"id\" href=\"#__dsh\">__dsh</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#fs\">fs</a>, <a class=\"id\" href=\"#__fsh\">__fsh</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#gs\">gs</a>, <a class=\"id\" href=\"#__gsh\">__gsh</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#revectored_struct\">revectored_struct</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__map\">__map</a>[8];<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 256 bits */</span>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#vm86_struct\">vm86_struct</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm86_regs\">vm86_regs</a> <a class=\"id\" href=\"#regs\">regs</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#screen_bitmap\">screen_bitmap</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cpu_type\">cpu_type</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#revectored_struct\">revectored_struct</a> <a class=\"id\" href=\"#int_revectored\">int_revectored</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#revectored_struct\">revectored_struct</a> <a class=\"id\" href=\"#int21_revectored\">int21_revectored</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * flags masks</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM86_SCREEN_BITMAP\">VM86_SCREEN_BITMAP</a><span class=\"ts\"/>0x0001", 
"", 
"struct <a class=\"id\" href=\"#vm86plus_info_struct\">vm86plus_info_struct</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#force_return_for_pic\">force_return_for_pic</a>:1;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vm86dbg_active\">vm86dbg_active</a>:1;       <span class=\"comment\">/* for debugger */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vm86dbg_TFpendig\">vm86dbg_TFpendig</a>:1;     <span class=\"comment\">/* for debugger */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#unused\">unused</a>:28;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#is_vm86pus\">is_vm86pus</a>:1;<span class=\"ts\"/>      <span class=\"comment\">/* for vm86 internal use */</span>", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#vm86dbg_intxxtab\">vm86dbg_intxxtab</a>[32];   <span class=\"comment\">/* for debugger */</span>", 
"};", 
"struct <a class=\"id\" href=\"#vm86plus_struct\">vm86plus_struct</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm86_regs\">vm86_regs</a> <a class=\"id\" href=\"#regs\">regs</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#screen_bitmap\">screen_bitmap</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cpu_type\">cpu_type</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#revectored_struct\">revectored_struct</a> <a class=\"id\" href=\"#int_revectored\">int_revectored</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#revectored_struct\">revectored_struct</a> <a class=\"id\" href=\"#int21_revectored\">int21_revectored</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm86plus_info_struct\">vm86plus_info_struct</a> <a class=\"id\" href=\"#vm86plus\">vm86plus</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#ptrace\">ptrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the (kernel) stack-layout when we have done a \"SAVE_ALL\" from vm86</span>", 
"<span class=\"comment\"> * mode - the main change is that the old segment descriptors aren't</span>", 
"<span class=\"comment\"> * useful any more and are forced to be zero by the kernel (and the</span>", 
"<span class=\"comment\"> * hardware when a trap occurs), and the real segment descriptors are</span>", 
"<span class=\"comment\"> * at the end of the structure. Look at ptrace.h to see the \"normal\"</span>", 
"<span class=\"comment\"> * setup. For user space layout see 'struct vm86_regs' above.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#kernel_vm86_regs\">kernel_vm86_regs</a> {", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * normal regs, with special meaning for the segment descriptors..</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> <a class=\"id\" href=\"#pt\">pt</a>;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * these are specific to v86 mode:</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#es\">es</a>, <a class=\"id\" href=\"#__esh\">__esh</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#ds\">ds</a>, <a class=\"id\" href=\"#__dsh\">__dsh</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#fs\">fs</a>, <a class=\"id\" href=\"#__fsh\">__fsh</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#gs\">gs</a>, <a class=\"id\" href=\"#__gsh\">__gsh</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#kernel_vm86_struct\">kernel_vm86_struct</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kernel_vm86_regs\">kernel_vm86_regs</a> <a class=\"id\" href=\"#regs\">regs</a>;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * the below part remains on the kernel stack while we are in VM86 mode.</span>", 
"<span class=\"comment\"> * 'tss.esp0' then contains the address of VM86_TSS_ESP0 below, and when we</span>", 
"<span class=\"comment\"> * get forced back from VM86, the CPU and \"SAVE_ALL\" will restore the above</span>", 
"<span class=\"comment\"> * 'struct kernel_vm86_regs' with the then actual values.</span>", 
"<span class=\"comment\"> * Therefore, pt_regs in fact points to a complete 'kernel_vm86_struct'</span>", 
"<span class=\"comment\"> * in kernelspace, hence we need not reget the data from userspace.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM86_TSS_ESP0\">VM86_TSS_ESP0</a> <a class=\"id\" href=\"#flags\">flags</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#screen_bitmap\">screen_bitmap</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cpu_type\">cpu_type</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#revectored_struct\">revectored_struct</a> <a class=\"id\" href=\"#int_revectored\">int_revectored</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#revectored_struct\">revectored_struct</a> <a class=\"id\" href=\"#int21_revectored\">int21_revectored</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm86plus_info_struct\">vm86plus_info_struct</a> <a class=\"id\" href=\"#vm86plus\">vm86plus</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs32\">regs32</a>;   <span class=\"comment\">/* here we save the pointer to the old regs */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The below is not part of the structure, but the stack layout continues</span>", 
"<span class=\"comment\"> * this way. In front of 'return-eip' may be some data, depending on</span>", 
"<span class=\"comment\"> * compilation, so we don't rely on this and save the pointer to 'oldregs'</span>", 
"<span class=\"comment\"> * in 'regs32' above.</span>", 
"<span class=\"comment\"> * However, with GCC-2.7.2 and the current CFLAGS you see exactly this:</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>long return-eip;        from call to vm86()</span>", 
"<span class=\"comment\"><span class=\"ts\"/>struct pt_regs oldregs;  user space registers as saved by syscall</span>", 
"<span class=\"comment\"> */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_VM86\">CONFIG_VM86</a>", 
"", 
"void <a class=\"id\" href=\"#handle_vm86_fault\">handle_vm86_fault</a>(struct <a class=\"id\" href=\"#kernel_vm86_regs\">kernel_vm86_regs</a> *, long);", 
"int <a class=\"id\" href=\"#handle_vm86_trap\">handle_vm86_trap</a>(struct <a class=\"id\" href=\"#kernel_vm86_regs\">kernel_vm86_regs</a> *, long, int);", 
"struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#save_v86_state\">save_v86_state</a>(struct <a class=\"id\" href=\"#kernel_vm86_regs\">kernel_vm86_regs</a> *);", 
"", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a>;", 
"void <a class=\"id\" href=\"#release_vm86_irqs\">release_vm86_irqs</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"", 
"#else", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#handle_vm86_fault\">handle_vm86_fault</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#release_vm86_irqs\">release_vm86_irqs</a>(<a class=\"id\" href=\"#a\">a</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#handle_vm86_trap\">handle_vm86_trap</a>(struct <a class=\"id\" href=\"#kernel_vm86_regs\">kernel_vm86_regs</a> *<a class=\"id\" href=\"#a\">a</a>, long <a class=\"id\" href=\"#b\">b</a>, int <a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_VM86 */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_VM86_H */</span>", 
];
xr_frag_insert('l/32/87c24c476e633490b5da64de89147bc3cb127d.xr', __xr_tmp);
