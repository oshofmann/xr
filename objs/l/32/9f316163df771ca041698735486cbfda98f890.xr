var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * processor_idle - idle state submodule to the ACPI processor driver</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2001, 2002 Andy Grover &lt;andrew.grover@intel.com&gt;</span>", 
"<span class=\"comment\"> *  Copyright (C) 2001, 2002 Paul Diefenbaugh &lt;paul.s.diefenbaugh@intel.com&gt;</span>", 
"<span class=\"comment\"> *  Copyright (C) 2004, 2005 Dominik Brodowski &lt;linux@brodo.de&gt;</span>", 
"<span class=\"comment\"> *  Copyright (C) 2004  Anil S Keshavamurthy &lt;anil.s.keshavamurthy@intel.com&gt;</span>", 
"<span class=\"comment\"> *  <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>- Added processor hotplug support</span>", 
"<span class=\"comment\"> *  Copyright (C) 2005  Venkatesh Pallipadi &lt;venkatesh.pallipadi@intel.com&gt;</span>", 
"<span class=\"comment\"> *  <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>- Added support for C3 on SMP</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *  it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *  the Free Software Foundation; either version 2 of the License, or (at</span>", 
"<span class=\"comment\"> *  your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is distributed in the hope that it will be useful, but</span>", 
"<span class=\"comment\"> *  WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>", 
"<span class=\"comment\"> *  General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  You should have received a copy of the GNU General Public License along</span>", 
"<span class=\"comment\"> *  with this program; if not, write to the Free Software Foundation, Inc.,</span>", 
"<span class=\"comment\"> *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpufreq\">cpufreq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dmi\">dmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#moduleparam\">moduleparam</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"comment\">/* need_resched() */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm_qos_params\">pm_qos_params</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#clockchips\">clockchips</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpuidle\">cpuidle</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#irqflags\">irqflags</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Include the apic definitions for x86 to have the APIC timer related defines</span>", 
"<span class=\"comment\"> * available also for UP (on SMP it gets magically included via linux/smp.h).</span>", 
"<span class=\"comment\"> * asm/acpi.h is not an option, as it would require more include magic. Also</span>", 
"<span class=\"comment\"> * creating an empty asm-ia64/apic.h would just trade pest vs. cholera.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86\">CONFIG_X86</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apic\">apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi_bus\">acpi_bus</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PREFIX\">PREFIX</a> \"ACPI: \"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACPI_PROCESSOR_CLASS\">ACPI_PROCESSOR_CLASS</a>            \"processor\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>              <a class=\"id\" href=\"#ACPI_PROCESSOR_COMPONENT\">ACPI_PROCESSOR_COMPONENT</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"processor_idle\");", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACPI_PROCESSOR_FILE_POWER\">ACPI_PROCESSOR_FILE_POWER</a><span class=\"ts\"/>\"power\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_TIMER_TICK_NS\">PM_TIMER_TICK_NS</a><span class=\"ts\"/><span class=\"ts\"/>(1000000000ULL/<a class=\"id\" href=\"#PM_TIMER_FREQUENCY\">PM_TIMER_FREQUENCY</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#C2_OVERHEAD\">C2_OVERHEAD</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1<span class=\"ts\"/><span class=\"comment\">/* 1us */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#C3_OVERHEAD\">C3_OVERHEAD</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1<span class=\"ts\"/><span class=\"comment\">/* 1us */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_TIMER_TICKS_TO_US\">PM_TIMER_TICKS_TO_US</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/><span class=\"ts\"/>(((<a class=\"id\" href=\"#p\">p</a>) * 1000)/(<a class=\"id\" href=\"#PM_TIMER_FREQUENCY\">PM_TIMER_FREQUENCY</a>/1000))", 
"", 
"static unsigned int <a class=\"id\" href=\"#max_cstate\">max_cstate</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#ACPI_PROCESSOR_MAX_POWER\">ACPI_PROCESSOR_MAX_POWER</a>;", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#max_cstate\">max_cstate</a>, <a class=\"id\" href=\"#uint\">uint</a>, 0000);", 
"static unsigned int <a class=\"id\" href=\"#nocst\">nocst</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#nocst\">nocst</a>, <a class=\"id\" href=\"#uint\">uint</a>, 0000);", 
"static int <a class=\"id\" href=\"#bm_check_disable\">bm_check_disable</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#bm_check_disable\">bm_check_disable</a>, <a class=\"id\" href=\"#uint\">uint</a>, 0000);", 
"", 
"static unsigned int <a class=\"id\" href=\"#latency_factor\">latency_factor</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 2;", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#latency_factor\">latency_factor</a>, <a class=\"id\" href=\"#uint\">uint</a>, 0644);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * IBM ThinkPad R40e crashes mysteriously when going into C2 or C3.</span>", 
"<span class=\"comment\"> * For now disable this. Probably a bug somewhere else.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To skip this limit, boot/load with a large max_cstate limit.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#set_max_cstate\">set_max_cstate</a>(const struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_cstate\">max_cstate</a> &gt; <a class=\"id\" href=\"#ACPI_PROCESSOR_MAX_POWER\">ACPI_PROCESSOR_MAX_POWER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> <a class=\"id\" href=\"#PREFIX\">PREFIX</a> \"%s detected - limiting to C%ld max_cstate.\"", 
"<span class=\"ts\"/>       \" Override with \\\"processor.max_cstate=%d\\\"\\n\", <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#ident\">ident</a>,", 
"<span class=\"ts\"/>       (long)<a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#driver_data\">driver_data</a>, <a class=\"id\" href=\"#ACPI_PROCESSOR_MAX_POWER\">ACPI_PROCESSOR_MAX_POWER</a> + 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_cstate\">max_cstate</a> = (long)<a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#driver_data\">driver_data</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Actually this shouldn't be __cpuinitdata, would be better to fix the</span>", 
"<span class=\"comment\">   callers to only run once -AK */</span>", 
"static struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> <a class=\"id\" href=\"#processor_power_dmi_table\">processor_power_dmi_table</a>[] = {", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#set_max_cstate\">set_max_cstate</a>, \"Clevo 5600D\", {", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_BIOS_VENDOR\">DMI_BIOS_VENDOR</a>,\"Phoenix Technologies LTD\"),", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_BIOS_VERSION\">DMI_BIOS_VERSION</a>,\"SHE845M0.86C.0013.D.0302131307\")},", 
"<span class=\"ts\"/> (void *)2},", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#set_max_cstate\">set_max_cstate</a>, \"Pavilion zv5000\", {", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_SYS_VENDOR\">DMI_SYS_VENDOR</a>, \"Hewlett-Packard\"),", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_PRODUCT_NAME\">DMI_PRODUCT_NAME</a>,\"Pavilion zv5000 (DS502A#ABA)\")},", 
"<span class=\"ts\"/> (void *)1},", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#set_max_cstate\">set_max_cstate</a>, \"Asus L8400B\", {", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_SYS_VENDOR\">DMI_SYS_VENDOR</a>, \"ASUSTeK Computer Inc.\"),", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_PRODUCT_NAME\">DMI_PRODUCT_NAME</a>,\"L8400B series Notebook PC\")},", 
"<span class=\"ts\"/> (void *)1},", 
"<span class=\"ts\"/>{},", 
"};", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Callers should disable interrupts before the call and enable</span>", 
"<span class=\"comment\"> * interrupts after return.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#acpi_safe_halt\">acpi_safe_halt</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#status\">status</a> &= ~<a class=\"id\" href=\"#TS_POLLING\">TS_POLLING</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TS_POLLING-cleared state must be visible before we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * test NEED_RESCHED:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#need_resched\">need_resched</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#safe_halt\">safe_halt</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#status\">status</a> |= <a class=\"id\" href=\"#TS_POLLING\">TS_POLLING</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ARCH_APICTIMER_STOPS_ON_C3\">ARCH_APICTIMER_STOPS_ON_C3</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some BIOS implementations switch to C3 in the published C2 state.</span>", 
"<span class=\"comment\"> * This seems to be a common problem on AMD boxen, but other vendors</span>", 
"<span class=\"comment\"> * are affected too. We pick the most conservative approach: we assume</span>", 
"<span class=\"comment\"> * that the local APIC stops in both C2 and C3.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#lapic_timer_check_state\">lapic_timer_check_state</a>(int <a class=\"id\" href=\"#state\">state</a>, struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *<a class=\"id\" href=\"#pr\">pr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#acpi_processor_cx\">acpi_processor_cx</a> *<a class=\"id\" href=\"#cx\">cx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_processor_power\">acpi_processor_power</a> *<a class=\"id\" href=\"#pwr\">pwr</a> = &amp;<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#local_apic_timer_c2_ok\">local_apic_timer_c2_ok</a> ? <a class=\"id\" href=\"#ACPI_STATE_C3\">ACPI_STATE_C3</a> : <a class=\"id\" href=\"#ACPI_STATE_C2\">ACPI_STATE_C2</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(&amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#id\">id</a>), <a class=\"id\" href=\"#X86_FEATURE_ARAT\">X86_FEATURE_ARAT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c1e_detected\">c1e_detected</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ACPI_STATE_C1\">ACPI_STATE_C1</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check, if one of the previous states already marked the lapic</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unstable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pwr\">pwr</a>-><a class=\"id\" href=\"#timer_broadcast_on_state\">timer_broadcast_on_state</a> &lt; <a class=\"id\" href=\"#state\">state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#type\">type</a> >= <a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#timer_broadcast_on_state\">timer_broadcast_on_state</a> = <a class=\"id\" href=\"#state\">state</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__lapic_timer_propagate_broadcast\">__lapic_timer_propagate_broadcast</a>(void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *<a class=\"id\" href=\"#pr\">pr</a> = (struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *) <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#reason\">reason</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reason\">reason</a> = <a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#timer_broadcast_on_state\">timer_broadcast_on_state</a> &lt; <a class=\"id\" href=\"#INT_MAX\">INT_MAX</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_BROADCAST_ON\">CLOCK_EVT_NOTIFY_BROADCAST_ON</a> : <a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_BROADCAST_OFF\">CLOCK_EVT_NOTIFY_BROADCAST_OFF</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clockevents_notify\">clockevents_notify</a>(<a class=\"id\" href=\"#reason\">reason</a>, &amp;<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#lapic_timer_propagate_broadcast\">lapic_timer_propagate_broadcast</a>(struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *<a class=\"id\" href=\"#pr\">pr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function_single\">smp_call_function_single</a>(<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#__lapic_timer_propagate_broadcast\">__lapic_timer_propagate_broadcast</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (void *)<a class=\"id\" href=\"#pr\">pr</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/* Power(C) State timer broadcast control */</span>", 
"static void <a class=\"id\" href=\"#lapic_timer_state_broadcast\">lapic_timer_state_broadcast</a>(struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *<a class=\"id\" href=\"#pr\">pr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#acpi_processor_cx\">acpi_processor_cx</a> *<a class=\"id\" href=\"#cx\">cx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#broadcast\">broadcast</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#cx\">cx</a> - <a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a> >= <a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#timer_broadcast_on_state\">timer_broadcast_on_state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#reason\">reason</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reason\">reason</a> = <a class=\"id\" href=\"#broadcast\">broadcast</a> ?  <a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_BROADCAST_ENTER\">CLOCK_EVT_NOTIFY_BROADCAST_ENTER</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_BROADCAST_EXIT\">CLOCK_EVT_NOTIFY_BROADCAST_EXIT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clockevents_notify\">clockevents_notify</a>(<a class=\"id\" href=\"#reason\">reason</a>, &amp;<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#else", 
"", 
"static void <a class=\"id\" href=\"#lapic_timer_check_state\">lapic_timer_check_state</a>(int <a class=\"id\" href=\"#state\">state</a>, struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *<a class=\"id\" href=\"#pr\">pr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#acpi_processor_cx\">acpi_processor_cx</a> *<a class=\"id\" href=\"#cstate\">cstate</a>) { }", 
"static void <a class=\"id\" href=\"#lapic_timer_propagate_broadcast\">lapic_timer_propagate_broadcast</a>(struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *<a class=\"id\" href=\"#pr\">pr</a>) { }", 
"static void <a class=\"id\" href=\"#lapic_timer_state_broadcast\">lapic_timer_state_broadcast</a>(struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *<a class=\"id\" href=\"#pr\">pr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#acpi_processor_cx\">acpi_processor_cx</a> *<a class=\"id\" href=\"#cx\">cx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#broadcast\">broadcast</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Suspend / resume control</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#acpi_idle_suspend\">acpi_idle_suspend</a>;", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#saved_bm_rld\">saved_bm_rld</a>;", 
"", 
"static void <a class=\"id\" href=\"#acpi_idle_bm_rld_save\">acpi_idle_bm_rld_save</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_read_bit_register\">acpi_read_bit_register</a>(<a class=\"id\" href=\"#ACPI_BITREG_BUS_MASTER_RLD\">ACPI_BITREG_BUS_MASTER_RLD</a>, &amp;<a class=\"id\" href=\"#saved_bm_rld\">saved_bm_rld</a>);", 
"}", 
"static void <a class=\"id\" href=\"#acpi_idle_bm_rld_restore\">acpi_idle_bm_rld_restore</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#resumed_bm_rld\">resumed_bm_rld</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_read_bit_register\">acpi_read_bit_register</a>(<a class=\"id\" href=\"#ACPI_BITREG_BUS_MASTER_RLD\">ACPI_BITREG_BUS_MASTER_RLD</a>, &amp;<a class=\"id\" href=\"#resumed_bm_rld\">resumed_bm_rld</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#resumed_bm_rld\">resumed_bm_rld</a> != <a class=\"id\" href=\"#saved_bm_rld\">saved_bm_rld</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_write_bit_register\">acpi_write_bit_register</a>(<a class=\"id\" href=\"#ACPI_BITREG_BUS_MASTER_RLD\">ACPI_BITREG_BUS_MASTER_RLD</a>, <a class=\"id\" href=\"#saved_bm_rld\">saved_bm_rld</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#acpi_processor_suspend\">acpi_processor_suspend</a>(struct <a class=\"id\" href=\"#acpi_device\">acpi_device</a> * <a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_idle_suspend\">acpi_idle_suspend</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_idle_bm_rld_save\">acpi_idle_bm_rld_save</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_idle_suspend\">acpi_idle_suspend</a> = 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#acpi_processor_resume\">acpi_processor_resume</a>(struct <a class=\"id\" href=\"#acpi_device\">acpi_device</a> * <a class=\"id\" href=\"#device\">device</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_idle_suspend\">acpi_idle_suspend</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_idle_bm_rld_restore\">acpi_idle_bm_rld_restore</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_idle_suspend\">acpi_idle_suspend</a> = 0;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86\">CONFIG_X86</a>)", 
"static void <a class=\"id\" href=\"#tsc_check_state\">tsc_check_state</a>(int <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_vendor\">x86_vendor</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_VENDOR_AMD\">X86_VENDOR_AMD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * AMD Fam10h TSC will tick in all</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * C/P/S0/S1 states when this bit is set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_NONSTOP_TSC\">X86_FEATURE_NONSTOP_TSC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*FALL THROUGH*/</span>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TSC could halt in idle, so notify users */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a> &gt; <a class=\"id\" href=\"#ACPI_STATE_C1\">ACPI_STATE_C1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_tsc_unstable\">mark_tsc_unstable</a>(\"TSC halts in idle\");", 
"<span class=\"ts\"/>}", 
"}", 
"#else", 
"static void <a class=\"id\" href=\"#tsc_check_state\">tsc_check_state</a>(int <a class=\"id\" href=\"#state\">state</a>) { return; }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#acpi_processor_get_power_info_fadt\">acpi_processor_get_power_info_fadt</a>(struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *<a class=\"id\" href=\"#pr\">pr</a>)", 
"{", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pr\">pr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#pblk\">pblk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if info is obtained from pblk/fadt, type equals state */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#ACPI_STATE_C2\">ACPI_STATE_C2</a>].<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ACPI_STATE_C2\">ACPI_STATE_C2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#ACPI_STATE_C3\">ACPI_STATE_C3</a>].<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ACPI_STATE_C3\">ACPI_STATE_C3</a>;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check for P_LVL2_UP flag before entering C2 and above on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * an SMP system.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>() &gt; 1) &&", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_FADT_C2_MP_SUPPORTED\">ACPI_FADT_C2_MP_SUPPORTED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* determine C2 and C3 address from pblk */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#ACPI_STATE_C2\">ACPI_STATE_C2</a>].<a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#pblk\">pblk</a> + 4;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#ACPI_STATE_C3\">ACPI_STATE_C3</a>].<a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#pblk\">pblk</a> + 5;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* determine latencies from FADT */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#ACPI_STATE_C2\">ACPI_STATE_C2</a>].<a class=\"id\" href=\"#latency\">latency</a> = <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#C2latency\">C2latency</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#ACPI_STATE_C3\">ACPI_STATE_C3</a>].<a class=\"id\" href=\"#latency\">latency</a> = <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#C3latency\">C3latency</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * FADT specified C2 latency must be less than or equal to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 100 microseconds.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#C2latency\">C2latency</a> &gt; <a class=\"id\" href=\"#ACPI_PROCESSOR_MAX_C2_LATENCY\">ACPI_PROCESSOR_MAX_C2_LATENCY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"C2 latency too large [%d]\\n\", <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#C2latency\">C2latency</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* invalidate C2 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#ACPI_STATE_C2\">ACPI_STATE_C2</a>].<a class=\"id\" href=\"#address\">address</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * FADT supplied C3 latency must be less than or equal to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1000 microseconds.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#C3latency\">C3latency</a> &gt; <a class=\"id\" href=\"#ACPI_PROCESSOR_MAX_C3_LATENCY\">ACPI_PROCESSOR_MAX_C3_LATENCY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"C3 latency too large [%d]\\n\", <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#C3latency\">C3latency</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* invalidate C3 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#ACPI_STATE_C3\">ACPI_STATE_C3</a>].<a class=\"id\" href=\"#address\">address</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"lvl2[0x%08x] lvl3[0x%08x]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#ACPI_STATE_C2\">ACPI_STATE_C2</a>].<a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#ACPI_STATE_C3\">ACPI_STATE_C3</a>].<a class=\"id\" href=\"#address\">address</a>));", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#acpi_processor_get_power_info_default\">acpi_processor_get_power_info_default</a>(struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *<a class=\"id\" href=\"#pr\">pr</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#ACPI_STATE_C1\">ACPI_STATE_C1</a>].<a class=\"id\" href=\"#valid\">valid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* set the first C-State to C1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* all processors need to support C1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#ACPI_STATE_C1\">ACPI_STATE_C1</a>].<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ACPI_STATE_C1\">ACPI_STATE_C1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#ACPI_STATE_C1\">ACPI_STATE_C1</a>].<a class=\"id\" href=\"#valid\">valid</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#ACPI_STATE_C1\">ACPI_STATE_C1</a>].<a class=\"id\" href=\"#entry_method\">entry_method</a> = <a class=\"id\" href=\"#ACPI_CSTATE_HALT\">ACPI_CSTATE_HALT</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* the C0 state only exists as a filler in our array */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#ACPI_STATE_C0\">ACPI_STATE_C0</a>].<a class=\"id\" href=\"#valid\">valid</a> = 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#acpi_processor_get_power_info_cst\">acpi_processor_get_power_info_cst</a>(struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *<a class=\"id\" href=\"#pr\">pr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#current_count\">current_count</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_buffer\">acpi_buffer</a> <a class=\"id\" href=\"#buffer\">buffer</a> = { <a class=\"id\" href=\"#ACPI_ALLOCATE_BUFFER\">ACPI_ALLOCATE_BUFFER</a>, <a class=\"id\" href=\"#NULL\">NULL</a> };", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_object\">acpi_object</a> *<a class=\"id\" href=\"#cst\">cst</a>;", 
"", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nocst\">nocst</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current_count\">current_count</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_evaluate_object\">acpi_evaluate_object</a>(<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#handle\">handle</a>, \"_CST\", <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>, \"No _CST, giving up\\n\"));", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a> = <a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* There must be at least 2 elements */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cst\">cst</a> || (<a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_TYPE_PACKAGE\">ACPI_TYPE_PACKAGE</a>) || <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#count\">count</a> &lt; 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#PREFIX\">PREFIX</a> \"not enough elements in _CST\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#elements\">elements</a>[0].<a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Validate number of power states. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &lt; 1 || <a class=\"id\" href=\"#count\">count</a> != <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#count\">count</a> - 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#PREFIX\">PREFIX</a> \"count given by _CST is not valid\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Tell driver that at least _CST is supported. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#has_cst\">has_cst</a> = 1;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_object\">acpi_object</a> *<a class=\"id\" href=\"#element\">element</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_object\">acpi_object</a> *<a class=\"id\" href=\"#obj\">obj</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_power_register\">acpi_power_register</a> *<a class=\"id\" href=\"#reg\">reg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_processor_cx\">acpi_processor_cx</a> <a class=\"id\" href=\"#cx\">cx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#cx\">cx</a>, 0, sizeof(<a class=\"id\" href=\"#cx\">cx</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#element\">element</a> = &amp;(<a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#elements\">elements</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#element\">element</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_TYPE_PACKAGE\">ACPI_TYPE_PACKAGE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#element\">element</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#count\">count</a> != 4)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj\">obj</a> = &amp;(<a class=\"id\" href=\"#element\">element</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#elements\">elements</a>[0]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#obj\">obj</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_TYPE_BUFFER\">ACPI_TYPE_BUFFER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reg\">reg</a> = (struct <a class=\"id\" href=\"#acpi_power_register\">acpi_power_register</a> *)<a class=\"id\" href=\"#obj\">obj</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#space_id\">space_id</a> != <a class=\"id\" href=\"#ACPI_ADR_SPACE_SYSTEM_IO\">ACPI_ADR_SPACE_SYSTEM_IO</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#space_id\">space_id</a> != <a class=\"id\" href=\"#ACPI_ADR_SPACE_FIXED_HARDWARE\">ACPI_ADR_SPACE_FIXED_HARDWARE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* There should be an easy way to extract an integer... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj\">obj</a> = &amp;(<a class=\"id\" href=\"#element\">element</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#elements\">elements</a>[1]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#obj\">obj</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_TYPE_INTEGER\">ACPI_TYPE_INTEGER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#obj\">obj</a>-><a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Some buggy BIOSes won't list C1 in _CST -</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Let acpi_processor_get_power_info_default() handle them later</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == 1 && <a class=\"id\" href=\"#cx\">cx</a>.<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_STATE_C1\">ACPI_STATE_C1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_count\">current_count</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>.<a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>.<a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#current_count\">current_count</a> + 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>.<a class=\"id\" href=\"#entry_method\">entry_method</a> = <a class=\"id\" href=\"#ACPI_CSTATE_SYSTEMIO\">ACPI_CSTATE_SYSTEMIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#space_id\">space_id</a> == <a class=\"id\" href=\"#ACPI_ADR_SPACE_FIXED_HARDWARE\">ACPI_ADR_SPACE_FIXED_HARDWARE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_processor_ffh_cstate_probe\">acpi_processor_ffh_cstate_probe</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#id\">id</a>, &amp;<a class=\"id\" href=\"#cx\">cx</a>, <a class=\"id\" href=\"#reg\">reg</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>.<a class=\"id\" href=\"#entry_method\">entry_method</a> = <a class=\"id\" href=\"#ACPI_CSTATE_FFH\">ACPI_CSTATE_FFH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#cx\">cx</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ACPI_STATE_C1\">ACPI_STATE_C1</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * C1 is a special case where FIXED_HARDWARE</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * can be handled in non-MWAIT way as well.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * In that case, save this _CST entry info.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Otherwise, ignore this info and continue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>.<a class=\"id\" href=\"#entry_method\">entry_method</a> = <a class=\"id\" href=\"#ACPI_CSTATE_HALT\">ACPI_CSTATE_HALT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#cx\">cx</a>.<a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#ACPI_CX_DESC_LEN\">ACPI_CX_DESC_LEN</a>, \"ACPI HLT\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cx\">cx</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ACPI_STATE_C1\">ACPI_STATE_C1</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#idle_halt\">idle_halt</a> || <a class=\"id\" href=\"#idle_nomwait\">idle_nomwait</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * In most cases the C1 space_id obtained from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * _CST object is FIXED_HARDWARE access mode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * But when the option of idle=halt is added,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the entry_method type should be changed from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * CSTATE_FFH to CSTATE_HALT.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * When the option of idle=nomwait is added,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the C1 entry_method type should be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * CSTATE_HALT.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>.<a class=\"id\" href=\"#entry_method\">entry_method</a> = <a class=\"id\" href=\"#ACPI_CSTATE_HALT\">ACPI_CSTATE_HALT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#cx\">cx</a>.<a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#ACPI_CX_DESC_LEN\">ACPI_CX_DESC_LEN</a>, \"ACPI HLT\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#cx\">cx</a>.<a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#ACPI_CX_DESC_LEN\">ACPI_CX_DESC_LEN</a>, \"ACPI IOPORT 0x%x\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#cx\">cx</a>.<a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cx\">cx</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ACPI_STATE_C1\">ACPI_STATE_C1</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>.<a class=\"id\" href=\"#valid\">valid</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj\">obj</a> = &amp;(<a class=\"id\" href=\"#element\">element</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#elements\">elements</a>[2]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#obj\">obj</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_TYPE_INTEGER\">ACPI_TYPE_INTEGER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>.<a class=\"id\" href=\"#latency\">latency</a> = <a class=\"id\" href=\"#obj\">obj</a>-><a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj\">obj</a> = &amp;(<a class=\"id\" href=\"#element\">element</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#elements\">elements</a>[3]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#obj\">obj</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_TYPE_INTEGER\">ACPI_TYPE_INTEGER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>.<a class=\"id\" href=\"#power\">power</a> = <a class=\"id\" href=\"#obj\">obj</a>-><a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_count\">current_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;(<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#current_count\">current_count</a>]), &amp;<a class=\"id\" href=\"#cx\">cx</a>, sizeof(<a class=\"id\" href=\"#cx\">cx</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We support total ACPI_PROCESSOR_MAX_POWER - 1</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (From 1 through ACPI_PROCESSOR_MAX_POWER - 1)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#current_count\">current_count</a> >= (<a class=\"id\" href=\"#ACPI_PROCESSOR_MAX_POWER\">ACPI_PROCESSOR_MAX_POWER</a> - 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"Limiting number of power states to max (%d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ACPI_PROCESSOR_MAX_POWER\">ACPI_PROCESSOR_MAX_POWER</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"Please increase ACPI_PROCESSOR_MAX_POWER if needed.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>, \"Found %d power states\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#current_count\">current_count</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Validate number of power states discovered */</span>", 
];
xr_frag_insert('l/32/9f316163df771ca041698735486cbfda98f890.xr', __xr_tmp);
