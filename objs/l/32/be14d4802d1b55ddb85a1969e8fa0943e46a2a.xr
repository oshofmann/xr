var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> * callback.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Register guest OS callbacks with Xen.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span>", 
"<span class=\"comment\"> * of this software and associated documentation files (the \"Software\"), to</span>", 
"<span class=\"comment\"> * deal in the Software without restriction, including without limitation the</span>", 
"<span class=\"comment\"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span>", 
"<span class=\"comment\"> * sell copies of the Software, and to permit persons to whom the Software is</span>", 
"<span class=\"comment\"> * furnished to do so, subject to the following conditions:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The above copyright notice and this permission notice shall be included in</span>", 
"<span class=\"comment\"> * all copies or substantial portions of the Software.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>", 
"<span class=\"comment\"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>", 
"<span class=\"comment\"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>", 
"<span class=\"comment\"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>", 
"<span class=\"comment\"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING</span>", 
"<span class=\"comment\"> * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER</span>", 
"<span class=\"comment\"> * DEALINGS IN THE SOFTWARE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2006, Ian Campbell</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__XEN_PUBLIC_CALLBACK_H__\">__XEN_PUBLIC_CALLBACK_H__</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__XEN_PUBLIC_CALLBACK_H__\">__XEN_PUBLIC_CALLBACK_H__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"xen.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Prototype for this hypercall is:</span>", 
"<span class=\"comment\"> *   long callback_op(int cmd, void *extra_args)</span>", 
"<span class=\"comment\"> * @cmd        == CALLBACKOP_??? (callback operation).</span>", 
"<span class=\"comment\"> * @extra_args == Operation-specific extra arguments (NULL if none).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* ia64, x86: Callback for event delivery. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CALLBACKTYPE_event\">CALLBACKTYPE_event</a>                 0", 
"", 
"<span class=\"comment\">/* x86: Failsafe callback when guest state cannot be restored by Xen. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CALLBACKTYPE_failsafe\">CALLBACKTYPE_failsafe</a>              1", 
"", 
"<span class=\"comment\">/* x86/64 hypervisor: Syscall by 64-bit guest app ('64-on-64-on-64'). */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CALLBACKTYPE_syscall\">CALLBACKTYPE_syscall</a>               2", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * x86/32 hypervisor: Only available on x86/32 when supervisor_mode_kernel</span>", 
"<span class=\"comment\"> *     feature is enabled. Do not use this callback type in new code.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CALLBACKTYPE_sysenter_deprecated\">CALLBACKTYPE_sysenter_deprecated</a>   3", 
"", 
"<span class=\"comment\">/* x86: Callback for NMI delivery. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CALLBACKTYPE_nmi\">CALLBACKTYPE_nmi</a>                   4", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * x86: sysenter is only available as follows:</span>", 
"<span class=\"comment\"> * - 32-bit hypervisor: with the supervisor_mode_kernel feature enabled</span>", 
"<span class=\"comment\"> * - 64-bit hypervisor: 32-bit guest applications on Intel CPUs</span>", 
"<span class=\"comment\"> *                      ('32-on-32-on-64', '32-on-64-on-64')</span>", 
"<span class=\"comment\"> *                      [nb. also 64-bit guest applications on Intel CPUs</span>", 
"<span class=\"comment\"> *                           ('64-on-64-on-64'), but syscall is preferred]</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CALLBACKTYPE_sysenter\">CALLBACKTYPE_sysenter</a>              5", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * x86/64 hypervisor: Syscall by 32-bit guest app on AMD CPUs</span>", 
"<span class=\"comment\"> *                    ('32-on-32-on-64', '32-on-64-on-64')</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CALLBACKTYPE_syscall32\">CALLBACKTYPE_syscall32</a>             7", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Disable event deliver during callback? This flag is ignored for event and</span>", 
"<span class=\"comment\"> * NMI callbacks: event delivery is unconditionally disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_CALLBACKF_mask_events\">_CALLBACKF_mask_events</a>             0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CALLBACKF_mask_events\">CALLBACKF_mask_events</a>              (1U << <a class=\"id\" href=\"#_CALLBACKF_mask_events\">_CALLBACKF_mask_events</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Register a callback.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CALLBACKOP_register\">CALLBACKOP_register</a>                0", 
"struct <a class=\"id\" href=\"#callback_register\">callback_register</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint16_t\">uint16_t</a> <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint16_t\">uint16_t</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_callback_t\">xen_callback_t</a> <a class=\"id\" href=\"#address\">address</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unregister a callback.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Not all callbacks can be unregistered. -EINVAL will be returned if</span>", 
"<span class=\"comment\"> * you attempt to unregister such a callback.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CALLBACKOP_unregister\">CALLBACKOP_unregister</a>              1", 
"struct <a class=\"id\" href=\"#callback_unregister\">callback_unregister</a> {", 
"    <a class=\"id\" href=\"#uint16_t\">uint16_t</a> <a class=\"id\" href=\"#type\">type</a>;", 
"    <a class=\"id\" href=\"#uint16_t\">uint16_t</a> <a class=\"id\" href=\"#_unused\">_unused</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __XEN_PUBLIC_CALLBACK_H__ */</span>", 
];
xr_frag_insert('l/32/be14d4802d1b55ddb85a1969e8fa0943e46a2a.xr', __xr_tmp);
