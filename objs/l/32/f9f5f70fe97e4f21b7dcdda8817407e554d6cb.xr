var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * IPv6 library code, needed by static components when full IPv6 support is</span>", 
"<span class=\"comment\"> * not configured or static.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * find out if nexthdr is a well-known extension header or a protocol</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#ipv6_ext_hdr\">ipv6_ext_hdr</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#nexthdr\">nexthdr</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * find out if nexthdr is an extension header or a protocol</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return ( (<a class=\"id\" href=\"#nexthdr\">nexthdr</a> == <a class=\"id\" href=\"#NEXTHDR_HOP\">NEXTHDR_HOP</a>)<span class=\"ts\"/>||", 
"<span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#nexthdr\">nexthdr</a> == <a class=\"id\" href=\"#NEXTHDR_ROUTING\">NEXTHDR_ROUTING</a>)<span class=\"ts\"/>||", 
"<span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#nexthdr\">nexthdr</a> == <a class=\"id\" href=\"#NEXTHDR_FRAGMENT\">NEXTHDR_FRAGMENT</a>)<span class=\"ts\"/>||", 
"<span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#nexthdr\">nexthdr</a> == <a class=\"id\" href=\"#NEXTHDR_AUTH\">NEXTHDR_AUTH</a>)<span class=\"ts\"/>||", 
"<span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#nexthdr\">nexthdr</a> == <a class=\"id\" href=\"#NEXTHDR_NONE\">NEXTHDR_NONE</a>)<span class=\"ts\"/>||", 
"<span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#nexthdr\">nexthdr</a> == <a class=\"id\" href=\"#NEXTHDR_DEST\">NEXTHDR_DEST</a>) );", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Skip any extension headers. This is used by the ICMP module.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that strictly speaking this conflicts with RFC 2460 4.0:</span>", 
"<span class=\"comment\"> * ...The contents and semantics of each extension header determine whether</span>", 
"<span class=\"comment\"> * or not to proceed to the next header.  Therefore, extension headers must</span>", 
"<span class=\"comment\"> * be processed strictly in the order they appear in the packet; a</span>", 
"<span class=\"comment\"> * receiver must not, for example, scan through a packet looking for a</span>", 
"<span class=\"comment\"> * particular kind of extension header and process that header prior to</span>", 
"<span class=\"comment\"> * processing all preceding ones.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We do exactly this. This is a protocol bug. We can't decide after a</span>", 
"<span class=\"comment\"> * seeing an unknown discard-with-error flavour TLV option if it's a</span>", 
"<span class=\"comment\"> * ICMP error message or not (errors should never be send in reply to</span>", 
"<span class=\"comment\"> * ICMP error messages).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * But I see no other way to do this. This might need to be reexamined</span>", 
"<span class=\"comment\"> * when Linux implements ESP (and maybe AUTH) headers.</span>", 
"<span class=\"comment\"> * --AK</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function parses (probably truncated) exthdr set \"hdr\".</span>", 
"<span class=\"comment\"> * \"nexthdrp\" initially points to some place,</span>", 
"<span class=\"comment\"> * where type of the first header can be found.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It skips all well-known exthdrs, and returns pointer to the start</span>", 
"<span class=\"comment\"> * of unparsable area i.e. the first header with unknown type.</span>", 
"<span class=\"comment\"> * If it is not NULL *nexthdr is updated by type/protocol of this header.</span>", 
"<span class=\"comment\"> *</span>", 
];
xr_frag_insert('l/32/f9f5f70fe97e4f21b7dcdda8817407e554d6cb.xr', __xr_tmp);
