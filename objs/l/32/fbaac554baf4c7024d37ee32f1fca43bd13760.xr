var __xr_tmp = [
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#READA\">READA</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RWA_MASK\">RWA_MASK</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#READ_SYNC\">READ_SYNC</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#READ\">READ</a> | <a class=\"id\" href=\"#REQ_SYNC\">REQ_SYNC</a> | <a class=\"id\" href=\"#REQ_UNPLUG\">REQ_UNPLUG</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#READ_META\">READ_META</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#READ\">READ</a> | <a class=\"id\" href=\"#REQ_META\">REQ_META</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WRITE_SYNC_PLUG\">WRITE_SYNC_PLUG</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#WRITE\">WRITE</a> | <a class=\"id\" href=\"#REQ_SYNC\">REQ_SYNC</a> | <a class=\"id\" href=\"#REQ_NOIDLE\">REQ_NOIDLE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WRITE_SYNC\">WRITE_SYNC</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#WRITE\">WRITE</a> | <a class=\"id\" href=\"#REQ_SYNC\">REQ_SYNC</a> | <a class=\"id\" href=\"#REQ_NOIDLE\">REQ_NOIDLE</a> | <a class=\"id\" href=\"#REQ_UNPLUG\">REQ_UNPLUG</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WRITE_ODIRECT_PLUG\">WRITE_ODIRECT_PLUG</a><span class=\"ts\"/>(<a class=\"id\" href=\"#WRITE\">WRITE</a> | <a class=\"id\" href=\"#REQ_SYNC\">REQ_SYNC</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WRITE_META\">WRITE_META</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#WRITE\">WRITE</a> | <a class=\"id\" href=\"#REQ_META\">REQ_META</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WRITE_BARRIER\">WRITE_BARRIER</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#WRITE\">WRITE</a> | <a class=\"id\" href=\"#REQ_SYNC\">REQ_SYNC</a> | <a class=\"id\" href=\"#REQ_NOIDLE\">REQ_NOIDLE</a> | <a class=\"id\" href=\"#REQ_UNPLUG\">REQ_UNPLUG</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#REQ_HARDBARRIER\">REQ_HARDBARRIER</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These aren't really reads or writes, they pass down information about</span>", 
"<span class=\"comment\"> * parts of device that are now unused by the file system.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DISCARD_NOBARRIER\">DISCARD_NOBARRIER</a><span class=\"ts\"/>(<a class=\"id\" href=\"#WRITE\">WRITE</a> | <a class=\"id\" href=\"#REQ_DISCARD\">REQ_DISCARD</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DISCARD_BARRIER\">DISCARD_BARRIER</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#WRITE\">WRITE</a> | <a class=\"id\" href=\"#REQ_DISCARD\">REQ_DISCARD</a> | <a class=\"id\" href=\"#REQ_HARDBARRIER\">REQ_HARDBARRIER</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DISCARD_SECURE\">DISCARD_SECURE</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#DISCARD_NOBARRIER\">DISCARD_NOBARRIER</a> | <a class=\"id\" href=\"#REQ_SECURE\">REQ_SECURE</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEL_IN\">SEL_IN</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEL_OUT\">SEL_OUT</a><span class=\"ts\"/><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEL_EX\">SEL_EX</a><span class=\"ts\"/><span class=\"ts\"/>4", 
"", 
"<span class=\"comment\">/* public flags for file_system_type */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_REQUIRES_DEV\">FS_REQUIRES_DEV</a> 1 ", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_BINARY_MOUNTDATA\">FS_BINARY_MOUNTDATA</a> 2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_HAS_SUBTYPE\">FS_HAS_SUBTYPE</a> 4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_REVAL_DOT\">FS_REVAL_DOT</a><span class=\"ts\"/>16384<span class=\"ts\"/><span class=\"comment\">/* Check the paths \".\", \"..\" for staleness */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_RENAME_DOES_D_MOVE\">FS_RENAME_DOES_D_MOVE</a><span class=\"ts\"/>32768<span class=\"ts\"/><span class=\"comment\">/* FS will handle d_move()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * during rename() internally.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These are the fs-independent mount-flags: up to 32 flags are supported</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a><span class=\"ts\"/> 1<span class=\"ts\"/><span class=\"comment\">/* Mount read-only */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_NOSUID\">MS_NOSUID</a><span class=\"ts\"/> 2<span class=\"ts\"/><span class=\"comment\">/* Ignore suid and sgid bits */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_NODEV\">MS_NODEV</a><span class=\"ts\"/> 4<span class=\"ts\"/><span class=\"comment\">/* Disallow access to device special files */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_NOEXEC\">MS_NOEXEC</a><span class=\"ts\"/> 8<span class=\"ts\"/><span class=\"comment\">/* Disallow program execution */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_SYNCHRONOUS\">MS_SYNCHRONOUS</a><span class=\"ts\"/>16<span class=\"ts\"/><span class=\"comment\">/* Writes are synced at once */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_REMOUNT\">MS_REMOUNT</a><span class=\"ts\"/>32<span class=\"ts\"/><span class=\"comment\">/* Alter flags of a mounted FS */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_MANDLOCK\">MS_MANDLOCK</a><span class=\"ts\"/>64<span class=\"ts\"/><span class=\"comment\">/* Allow mandatory locks on an FS */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_DIRSYNC\">MS_DIRSYNC</a><span class=\"ts\"/>128<span class=\"ts\"/><span class=\"comment\">/* Directory modifications are synchronous */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_NOATIME\">MS_NOATIME</a><span class=\"ts\"/>1024<span class=\"ts\"/><span class=\"comment\">/* Do not update access times. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_NODIRATIME\">MS_NODIRATIME</a><span class=\"ts\"/>2048<span class=\"ts\"/><span class=\"comment\">/* Do not update directory access times */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_BIND\">MS_BIND</a><span class=\"ts\"/><span class=\"ts\"/>4096", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_MOVE\">MS_MOVE</a><span class=\"ts\"/><span class=\"ts\"/>8192", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_REC\">MS_REC</a><span class=\"ts\"/><span class=\"ts\"/>16384", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_VERBOSE\">MS_VERBOSE</a><span class=\"ts\"/>32768<span class=\"ts\"/><span class=\"comment\">/* War is peace. Verbosity is silence.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   MS_VERBOSE is deprecated. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_SILENT\">MS_SILENT</a><span class=\"ts\"/>32768", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_POSIXACL\">MS_POSIXACL</a><span class=\"ts\"/>(1<<16)<span class=\"ts\"/><span class=\"comment\">/* VFS does not apply the umask */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_UNBINDABLE\">MS_UNBINDABLE</a><span class=\"ts\"/>(1<<17)<span class=\"ts\"/><span class=\"comment\">/* change to unbindable */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_PRIVATE\">MS_PRIVATE</a><span class=\"ts\"/>(1<<18)<span class=\"ts\"/><span class=\"comment\">/* change to private */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_SLAVE\">MS_SLAVE</a><span class=\"ts\"/>(1<<19)<span class=\"ts\"/><span class=\"comment\">/* change to slave */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_SHARED\">MS_SHARED</a><span class=\"ts\"/>(1<<20)<span class=\"ts\"/><span class=\"comment\">/* change to shared */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_RELATIME\">MS_RELATIME</a><span class=\"ts\"/>(1<<21)<span class=\"ts\"/><span class=\"comment\">/* Update atime relative to mtime/ctime. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_KERNMOUNT\">MS_KERNMOUNT</a><span class=\"ts\"/>(1<<22) <span class=\"comment\">/* this is a kern_mount call */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_I_VERSION\">MS_I_VERSION</a><span class=\"ts\"/>(1<<23) <span class=\"comment\">/* Update inode I_version field */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_STRICTATIME\">MS_STRICTATIME</a><span class=\"ts\"/>(1<<24) <span class=\"comment\">/* Always perform atime updates */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_BORN\">MS_BORN</a><span class=\"ts\"/><span class=\"ts\"/>(1<<29)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_ACTIVE\">MS_ACTIVE</a><span class=\"ts\"/>(1<<30)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_NOUSER\">MS_NOUSER</a><span class=\"ts\"/>(1<<31)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Superblock flags that can be altered by MS_REMOUNT</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_RMT_MASK\">MS_RMT_MASK</a><span class=\"ts\"/>(<a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>|<a class=\"id\" href=\"#MS_SYNCHRONOUS\">MS_SYNCHRONOUS</a>|<a class=\"id\" href=\"#MS_MANDLOCK\">MS_MANDLOCK</a>|<a class=\"id\" href=\"#MS_I_VERSION\">MS_I_VERSION</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Old magic mount flag and mask</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_MGC_VAL\">MS_MGC_VAL</a> 0xC0ED0000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MS_MGC_MSK\">MS_MGC_MSK</a> 0xffff0000", 
"", 
"<span class=\"comment\">/* Inode flags - they have nothing to superblock flags now */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#S_SYNC\">S_SYNC</a><span class=\"ts\"/><span class=\"ts\"/>1<span class=\"ts\"/><span class=\"comment\">/* Writes are synced at once */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#S_NOATIME\">S_NOATIME</a><span class=\"ts\"/>2<span class=\"ts\"/><span class=\"comment\">/* Do not update access times */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#S_APPEND\">S_APPEND</a><span class=\"ts\"/>4<span class=\"ts\"/><span class=\"comment\">/* Append-only file */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#S_IMMUTABLE\">S_IMMUTABLE</a><span class=\"ts\"/>8<span class=\"ts\"/><span class=\"comment\">/* Immutable file */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#S_DEAD\">S_DEAD</a><span class=\"ts\"/><span class=\"ts\"/>16<span class=\"ts\"/><span class=\"comment\">/* removed, but still open directory */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#S_NOQUOTA\">S_NOQUOTA</a><span class=\"ts\"/>32<span class=\"ts\"/><span class=\"comment\">/* Inode is not counted to quota */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#S_DIRSYNC\">S_DIRSYNC</a><span class=\"ts\"/>64<span class=\"ts\"/><span class=\"comment\">/* Directory modifications are synchronous */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#S_NOCMTIME\">S_NOCMTIME</a><span class=\"ts\"/>128<span class=\"ts\"/><span class=\"comment\">/* Do not update file c/mtime */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#S_SWAPFILE\">S_SWAPFILE</a><span class=\"ts\"/>256<span class=\"ts\"/><span class=\"comment\">/* Do not truncate: swapon got its bmaps */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#S_PRIVATE\">S_PRIVATE</a><span class=\"ts\"/>512<span class=\"ts\"/><span class=\"comment\">/* Inode is fs-internal */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note that nosuid etc flags are inode-specific: setting some file-system</span>", 
"<span class=\"comment\"> * flags just means all the inodes inherit those flags by default. It might be</span>", 
"<span class=\"comment\"> * possible to override it selectively if you really wanted to with some</span>", 
"<span class=\"comment\"> * ioctl() that is not currently implemented.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Exception: MS_RDONLY is always applied to the entire file system.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unfortunately, it is possible to change a filesystems flags with it mounted</span>", 
"<span class=\"comment\"> * with files in use.  This means that all of the inodes will not have their</span>", 
"<span class=\"comment\"> * i_flags updated.  Hence, i_flags no longer inherit the superblock mount</span>", 
"<span class=\"comment\"> * flags, so these have to be checked separately. -- rmk@arm.uk.linux.org</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__IS_FLG\">__IS_FLG</a>(<a class=\"id\" href=\"#inode\">inode</a>,<a class=\"id\" href=\"#flg\">flg</a>) ((<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; (<a class=\"id\" href=\"#flg\">flg</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_RDONLY\">IS_RDONLY</a>(<a class=\"id\" href=\"#inode\">inode</a>) ((<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_SYNC\">IS_SYNC</a>(<a class=\"id\" href=\"#inode\">inode</a>)<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__IS_FLG\">__IS_FLG</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#MS_SYNCHRONOUS\">MS_SYNCHRONOUS</a>) || \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_flags\">i_flags</a> &amp; <a class=\"id\" href=\"#S_SYNC\">S_SYNC</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_DIRSYNC\">IS_DIRSYNC</a>(<a class=\"id\" href=\"#inode\">inode</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#__IS_FLG\">__IS_FLG</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#MS_SYNCHRONOUS\">MS_SYNCHRONOUS</a>|<a class=\"id\" href=\"#MS_DIRSYNC\">MS_DIRSYNC</a>) || \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_flags\">i_flags</a> &amp; (<a class=\"id\" href=\"#S_SYNC\">S_SYNC</a>|<a class=\"id\" href=\"#S_DIRSYNC\">S_DIRSYNC</a>)))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_MANDLOCK\">IS_MANDLOCK</a>(<a class=\"id\" href=\"#inode\">inode</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__IS_FLG\">__IS_FLG</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#MS_MANDLOCK\">MS_MANDLOCK</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_NOATIME\">IS_NOATIME</a>(<a class=\"id\" href=\"#inode\">inode</a>)   <a class=\"id\" href=\"#__IS_FLG\">__IS_FLG</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>|<a class=\"id\" href=\"#MS_NOATIME\">MS_NOATIME</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_I_VERSION\">IS_I_VERSION</a>(<a class=\"id\" href=\"#inode\">inode</a>)   <a class=\"id\" href=\"#__IS_FLG\">__IS_FLG</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#MS_I_VERSION\">MS_I_VERSION</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_NOQUOTA\">IS_NOQUOTA</a>(<a class=\"id\" href=\"#inode\">inode</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_flags\">i_flags</a> &amp; <a class=\"id\" href=\"#S_NOQUOTA\">S_NOQUOTA</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_APPEND\">IS_APPEND</a>(<a class=\"id\" href=\"#inode\">inode</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_flags\">i_flags</a> &amp; <a class=\"id\" href=\"#S_APPEND\">S_APPEND</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_IMMUTABLE\">IS_IMMUTABLE</a>(<a class=\"id\" href=\"#inode\">inode</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_flags\">i_flags</a> &amp; <a class=\"id\" href=\"#S_IMMUTABLE\">S_IMMUTABLE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_POSIXACL\">IS_POSIXACL</a>(<a class=\"id\" href=\"#inode\">inode</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__IS_FLG\">__IS_FLG</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#MS_POSIXACL\">MS_POSIXACL</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_DEADDIR\">IS_DEADDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_flags\">i_flags</a> &amp; <a class=\"id\" href=\"#S_DEAD\">S_DEAD</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_NOCMTIME\">IS_NOCMTIME</a>(<a class=\"id\" href=\"#inode\">inode</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_flags\">i_flags</a> &amp; <a class=\"id\" href=\"#S_NOCMTIME\">S_NOCMTIME</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_SWAPFILE\">IS_SWAPFILE</a>(<a class=\"id\" href=\"#inode\">inode</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_flags\">i_flags</a> &amp; <a class=\"id\" href=\"#S_SWAPFILE\">S_SWAPFILE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_PRIVATE\">IS_PRIVATE</a>(<a class=\"id\" href=\"#inode\">inode</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_flags\">i_flags</a> &amp; <a class=\"id\" href=\"#S_PRIVATE\">S_PRIVATE</a>)", 
"", 
"<span class=\"comment\">/* the read-only stuff doesn't really belong here, but any other place is</span>", 
"<span class=\"comment\">   probably as bad and I don't want to create yet another include file. */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKROSET\">BLKROSET</a>   <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,93)<span class=\"ts\"/><span class=\"comment\">/* set device read-only (0 = read-write) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKROGET\">BLKROGET</a>   <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,94)<span class=\"ts\"/><span class=\"comment\">/* get read-only status (0 = read_write) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKRRPART\">BLKRRPART</a>  <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,95)<span class=\"ts\"/><span class=\"comment\">/* re-read partition table */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKGETSIZE\">BLKGETSIZE</a> <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,96)<span class=\"ts\"/><span class=\"comment\">/* return device size /512 (long *arg) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKFLSBUF\">BLKFLSBUF</a>  <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,97)<span class=\"ts\"/><span class=\"comment\">/* flush buffer cache */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKRASET\">BLKRASET</a>   <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,98)<span class=\"ts\"/><span class=\"comment\">/* set read ahead for block device */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKRAGET\">BLKRAGET</a>   <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,99)<span class=\"ts\"/><span class=\"comment\">/* get current read ahead setting */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKFRASET\">BLKFRASET</a>  <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,100)<span class=\"comment\">/* set filesystem (mm/filemap.c) read-ahead */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKFRAGET\">BLKFRAGET</a>  <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,101)<span class=\"comment\">/* get filesystem (mm/filemap.c) read-ahead */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKSECTSET\">BLKSECTSET</a> <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,102)<span class=\"comment\">/* set max sectors per request (ll_rw_blk.c) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKSECTGET\">BLKSECTGET</a> <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,103)<span class=\"comment\">/* get max sectors per request (ll_rw_blk.c) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKSSZGET\">BLKSSZGET</a>  <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,104)<span class=\"comment\">/* get block device sector size */</span>", 
"#if 0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKPG\">BLKPG</a>      <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,105)<span class=\"comment\">/* See blkpg.h */</span>", 
"", 
"<span class=\"comment\">/* Some people are morons.  Do not use sizeof! */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKELVGET\">BLKELVGET</a>  <a class=\"id\" href=\"#_IOR\">_IOR</a>(0x12,106,<a class=\"id\" href=\"#size_t\">size_t</a>)<span class=\"comment\">/* elevator get */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKELVSET\">BLKELVSET</a>  <a class=\"id\" href=\"#_IOW\">_IOW</a>(0x12,107,<a class=\"id\" href=\"#size_t\">size_t</a>)<span class=\"comment\">/* elevator set */</span>", 
"<span class=\"comment\">/* This was here just to show that the number is taken -</span>", 
"<span class=\"comment\">   probably all these _IO(0x12,*) ioctls should be moved to blkpg.h. */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"comment\">/* A jump here: 108-111 have been used for various private purposes. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKBSZGET\">BLKBSZGET</a>  <a class=\"id\" href=\"#_IOR\">_IOR</a>(0x12,112,<a class=\"id\" href=\"#size_t\">size_t</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKBSZSET\">BLKBSZSET</a>  <a class=\"id\" href=\"#_IOW\">_IOW</a>(0x12,113,<a class=\"id\" href=\"#size_t\">size_t</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKGETSIZE64\">BLKGETSIZE64</a> <a class=\"id\" href=\"#_IOR\">_IOR</a>(0x12,114,<a class=\"id\" href=\"#size_t\">size_t</a>)<span class=\"ts\"/><span class=\"comment\">/* return device size in bytes (u64 *arg) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKTRACESETUP\">BLKTRACESETUP</a> <a class=\"id\" href=\"#_IOWR\">_IOWR</a>(0x12,115,struct <a class=\"id\" href=\"#blk_user_trace_setup\">blk_user_trace_setup</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKTRACESTART\">BLKTRACESTART</a> <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,116)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKTRACESTOP\">BLKTRACESTOP</a> <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,117)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKTRACETEARDOWN\">BLKTRACETEARDOWN</a> <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,118)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKDISCARD\">BLKDISCARD</a> <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,119)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKIOMIN\">BLKIOMIN</a> <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,120)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKIOOPT\">BLKIOOPT</a> <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,121)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKALIGNOFF\">BLKALIGNOFF</a> <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,122)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKPBSZGET\">BLKPBSZGET</a> <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,123)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKDISCARDZEROES\">BLKDISCARDZEROES</a> <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,124)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLKSECDISCARD\">BLKSECDISCARD</a> <a class=\"id\" href=\"#_IO\">_IO</a>(0x12,125)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BMAP_IOCTL\">BMAP_IOCTL</a> 1<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* obsolete - kept for compatibility */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIBMAP\">FIBMAP</a><span class=\"ts\"/>   <a class=\"id\" href=\"#_IO\">_IO</a>(0x00,1)<span class=\"ts\"/><span class=\"comment\">/* bmap access */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIGETBSZ\">FIGETBSZ</a>   <a class=\"id\" href=\"#_IO\">_IO</a>(0x00,2)<span class=\"ts\"/><span class=\"comment\">/* get the block size used for bmap */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIFREEZE\">FIFREEZE</a><span class=\"ts\"/><a class=\"id\" href=\"#_IOWR\">_IOWR</a>('X', 119, int)<span class=\"ts\"/><span class=\"comment\">/* Freeze */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FITHAW\">FITHAW</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_IOWR\">_IOWR</a>('X', 120, int)<span class=\"ts\"/><span class=\"comment\">/* Thaw */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#FS_IOC_GETFLAGS\">FS_IOC_GETFLAGS</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_IOR\">_IOR</a>('f', 1, long)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#FS_IOC_SETFLAGS\">FS_IOC_SETFLAGS</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_IOW\">_IOW</a>('f', 2, long)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#FS_IOC_GETVERSION\">FS_IOC_GETVERSION</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_IOR\">_IOR</a>('v', 1, long)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#FS_IOC_SETVERSION\">FS_IOC_SETVERSION</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_IOW\">_IOW</a>('v', 2, long)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_IOC_FIEMAP\">FS_IOC_FIEMAP</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_IOWR\">_IOWR</a>('f', 11, struct <a class=\"id\" href=\"#fiemap\">fiemap</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_IOC32_GETFLAGS\">FS_IOC32_GETFLAGS</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_IOR\">_IOR</a>('f', 1, int)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_IOC32_SETFLAGS\">FS_IOC32_SETFLAGS</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_IOW\">_IOW</a>('f', 2, int)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_IOC32_GETVERSION\">FS_IOC32_GETVERSION</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_IOR\">_IOR</a>('v', 1, int)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_IOC32_SETVERSION\">FS_IOC32_SETVERSION</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_IOW\">_IOW</a>('v', 2, int)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Inode flags (FS_IOC_GETFLAGS / FS_IOC_SETFLAGS)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#FS_SECRM_FL\">FS_SECRM_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00000001 <span class=\"comment\">/* Secure deletion */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#FS_UNRM_FL\">FS_UNRM_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00000002 <span class=\"comment\">/* Undelete */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#FS_COMPR_FL\">FS_COMPR_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00000004 <span class=\"comment\">/* Compress file */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_SYNC_FL\">FS_SYNC_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00000008 <span class=\"comment\">/* Synchronous updates */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_IMMUTABLE_FL\">FS_IMMUTABLE_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00000010 <span class=\"comment\">/* Immutable file */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_APPEND_FL\">FS_APPEND_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00000020 <span class=\"comment\">/* writes to file may only append */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_NODUMP_FL\">FS_NODUMP_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00000040 <span class=\"comment\">/* do not dump file */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_NOATIME_FL\">FS_NOATIME_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00000080 <span class=\"comment\">/* do not update atime */</span>", 
"<span class=\"comment\">/* Reserved for compression usage... */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_DIRTY_FL\">FS_DIRTY_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00000100", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_COMPRBLK_FL\">FS_COMPRBLK_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00000200 <span class=\"comment\">/* One or more compressed clusters */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_NOCOMP_FL\">FS_NOCOMP_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00000400 <span class=\"comment\">/* Don't compress */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_ECOMPR_FL\">FS_ECOMPR_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00000800 <span class=\"comment\">/* Compression error */</span>", 
"<span class=\"comment\">/* End compression flags --- maybe not all used */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_BTREE_FL\">FS_BTREE_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00001000 <span class=\"comment\">/* btree format dir */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_INDEX_FL\">FS_INDEX_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00001000 <span class=\"comment\">/* hash-indexed directory */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_IMAGIC_FL\">FS_IMAGIC_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00002000 <span class=\"comment\">/* AFS directory */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_JOURNAL_DATA_FL\">FS_JOURNAL_DATA_FL</a><span class=\"ts\"/><span class=\"ts\"/>0x00004000 <span class=\"comment\">/* Reserved for ext3 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_NOTAIL_FL\">FS_NOTAIL_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00008000 <span class=\"comment\">/* file tail should not be merged */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_DIRSYNC_FL\">FS_DIRSYNC_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00010000 <span class=\"comment\">/* dirsync behaviour (directories only) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_TOPDIR_FL\">FS_TOPDIR_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00020000 <span class=\"comment\">/* Top of directory hierarchies*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_EXTENT_FL\">FS_EXTENT_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00080000 <span class=\"comment\">/* Extents */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_DIRECTIO_FL\">FS_DIRECTIO_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00100000 <span class=\"comment\">/* Use direct i/o */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_RESERVED_FL\">FS_RESERVED_FL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x80000000 <span class=\"comment\">/* reserved for ext2 lib */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_FL_USER_VISIBLE\">FS_FL_USER_VISIBLE</a><span class=\"ts\"/><span class=\"ts\"/>0x0003DFFF <span class=\"comment\">/* User visible flags */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FS_FL_USER_MODIFIABLE\">FS_FL_USER_MODIFIABLE</a><span class=\"ts\"/><span class=\"ts\"/>0x000380FF <span class=\"comment\">/* User modifiable flags */</span>", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SYNC_FILE_RANGE_WAIT_BEFORE\">SYNC_FILE_RANGE_WAIT_BEFORE</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SYNC_FILE_RANGE_WRITE\">SYNC_FILE_RANGE_WRITE</a><span class=\"ts\"/><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SYNC_FILE_RANGE_WAIT_AFTER\">SYNC_FILE_RANGE_WAIT_AFTER</a><span class=\"ts\"/>4", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#linkage\">linkage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdev_t\">kdev_t</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dcache\">dcache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stat\">stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cache\">cache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kobject\">kobject</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#radix\">radix</a>-<a class=\"id\" href=\"#tree\">tree</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#prio_tree\">prio_tree</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pid\">pid</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#semaphore\">semaphore</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fiemap\">fiemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#byteorder\">byteorder</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#export_operations\">export_operations</a>;", 
"struct <a class=\"id\" href=\"#hd_geometry\">hd_geometry</a>;", 
"struct <a class=\"id\" href=\"#iovec\">iovec</a>;", 
"struct <a class=\"id\" href=\"#nameidata\">nameidata</a>;", 
"struct <a class=\"id\" href=\"#kiocb\">kiocb</a>;", 
"struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a>;", 
"struct <a class=\"id\" href=\"#poll_table_struct\">poll_table_struct</a>;", 
"struct <a class=\"id\" href=\"#kstatfs\">kstatfs</a>;", 
"struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a>;", 
"struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a>;", 
"struct <a class=\"id\" href=\"#cred\">cred</a>;", 
"", 
"extern void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#inode_init\">inode_init</a>(void);", 
"extern void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#inode_init_early\">inode_init_early</a>(void);", 
"extern void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#files_init\">files_init</a>(unsigned long);", 
"", 
"extern struct <a class=\"id\" href=\"#files_stat_struct\">files_stat_struct</a> <a class=\"id\" href=\"#files_stat\">files_stat</a>;", 
"extern int <a class=\"id\" href=\"#get_max_files\">get_max_files</a>(void);", 
"extern int <a class=\"id\" href=\"#sysctl_nr_open\">sysctl_nr_open</a>;", 
"extern struct <a class=\"id\" href=\"#inodes_stat_t\">inodes_stat_t</a> <a class=\"id\" href=\"#inodes_stat\">inodes_stat</a>;", 
"extern int <a class=\"id\" href=\"#leases_enable\">leases_enable</a>, <a class=\"id\" href=\"#lease_break_time\">lease_break_time</a>;", 
"", 
"struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a>;", 
"typedef int (<a class=\"id\" href=\"#get_block_t\">get_block_t</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#iblock\">iblock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh_result\">bh_result</a>, int <a class=\"id\" href=\"#create\">create</a>);", 
"typedef void (<a class=\"id\" href=\"#dio_iodone_t\">dio_iodone_t</a>)(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#bytes\">bytes</a>, void *<a class=\"id\" href=\"#private\">private</a>, int <a class=\"id\" href=\"#ret\">ret</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_async\">is_async</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Attribute flags.  These should be or-ed together to figure out what</span>", 
"<span class=\"comment\"> * has been changed!</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATTR_MODE\">ATTR_MODE</a><span class=\"ts\"/>(1 << 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATTR_UID\">ATTR_UID</a><span class=\"ts\"/>(1 << 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATTR_GID\">ATTR_GID</a><span class=\"ts\"/>(1 << 2)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATTR_SIZE\">ATTR_SIZE</a><span class=\"ts\"/>(1 << 3)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATTR_ATIME\">ATTR_ATIME</a><span class=\"ts\"/>(1 << 4)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATTR_MTIME\">ATTR_MTIME</a><span class=\"ts\"/>(1 << 5)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATTR_CTIME\">ATTR_CTIME</a><span class=\"ts\"/>(1 << 6)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATTR_ATIME_SET\">ATTR_ATIME_SET</a><span class=\"ts\"/>(1 << 7)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATTR_MTIME_SET\">ATTR_MTIME_SET</a><span class=\"ts\"/>(1 << 8)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATTR_FORCE\">ATTR_FORCE</a><span class=\"ts\"/>(1 << 9) <span class=\"comment\">/* Not a change, but a change it */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATTR_ATTR_FLAG\">ATTR_ATTR_FLAG</a><span class=\"ts\"/>(1 << 10)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATTR_KILL_SUID\">ATTR_KILL_SUID</a><span class=\"ts\"/>(1 << 11)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATTR_KILL_SGID\">ATTR_KILL_SGID</a><span class=\"ts\"/>(1 << 12)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATTR_FILE\">ATTR_FILE</a><span class=\"ts\"/>(1 << 13)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATTR_KILL_PRIV\">ATTR_KILL_PRIV</a><span class=\"ts\"/>(1 << 14)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATTR_OPEN\">ATTR_OPEN</a><span class=\"ts\"/>(1 << 15) <span class=\"comment\">/* Truncating from open(O_TRUNC) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATTR_TIMES_SET\">ATTR_TIMES_SET</a><span class=\"ts\"/>(1 << 16)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the Inode Attributes structure, used for notify_change().  It</span>", 
"<span class=\"comment\"> * uses the above definitions as flags, to know which values have changed.</span>", 
"<span class=\"comment\"> * Also, in this manner, a Filesystem can look at only the values it cares</span>", 
"<span class=\"comment\"> * about.  Basically, these are the attributes that the VFS layer can</span>", 
"<span class=\"comment\"> * request to change from the FS layer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Derek Atkins &lt;warlord@MIT.EDU&gt; 94-10-20</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#iattr\">iattr</a> {", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#ia_valid\">ia_valid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#umode_t\">umode_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ia_mode\">ia_mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_t\">uid_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ia_uid\">ia_uid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gid_t\">gid_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ia_gid\">ia_gid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ia_size\">ia_size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a><span class=\"ts\"/><a class=\"id\" href=\"#ia_atime\">ia_atime</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a><span class=\"ts\"/><a class=\"id\" href=\"#ia_mtime\">ia_mtime</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a><span class=\"ts\"/><a class=\"id\" href=\"#ia_ctime\">ia_ctime</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Not an attribute, but an auxilary info for filesystems wanting to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * implement an ftruncate() like method.  NOTE: filesystem should</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * check for (ia_valid &amp; ATTR_FILE), and not for (ia_file != NULL).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ia_file\">ia_file</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Includes for diskquotas.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#quota\">quota</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/** </span>", 
"<span class=\"comment\"> * enum positive_aop_returns - aop return codes with specific semantics</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @AOP_WRITEPAGE_ACTIVATE: Informs the caller that page writeback has</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    completed, that the page is still locked, and</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    should be considered active.  The VM uses this hint</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    to return the page to the active list -- it won't</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    be a candidate for writeback again in the near</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    future.  Other callers must be careful to unlock</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    the page if they get this return.  Returned by</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    writepage(); </span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @AOP_TRUNCATED_PAGE: The AOP method that was handed a locked page has</span>", 
"<span class=\"comment\"> *  <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unlocked it and the page might have been truncated.</span>", 
"<span class=\"comment\"> *  <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>The caller should back up to acquiring a new page and</span>", 
"<span class=\"comment\"> *  <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>trying again.  The aop will be taking reasonable</span>", 
"<span class=\"comment\"> *  <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>precautions not to livelock.  If the caller held a page</span>", 
"<span class=\"comment\"> *  <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>reference, it should drop it before retrying.  Returned</span>", 
"<span class=\"comment\"> *  <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>by readpage().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * address_space_operation functions return these large constants to indicate</span>", 
"<span class=\"comment\"> * special semantics to the caller.  These are much larger than the bytes in a</span>", 
"<span class=\"comment\"> * page to allow for functions that return the number of bytes operated on in a</span>", 
"<span class=\"comment\"> * given page.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"enum <a class=\"id\" href=\"#positive_aop_returns\">positive_aop_returns</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#AOP_WRITEPAGE_ACTIVATE\">AOP_WRITEPAGE_ACTIVATE</a><span class=\"ts\"/>= 0x80000,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#AOP_TRUNCATED_PAGE\">AOP_TRUNCATED_PAGE</a><span class=\"ts\"/>= 0x80001,", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AOP_FLAG_UNINTERRUPTIBLE\">AOP_FLAG_UNINTERRUPTIBLE</a><span class=\"ts\"/>0x0001 <span class=\"comment\">/* will not do a short write */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AOP_FLAG_CONT_EXPAND\">AOP_FLAG_CONT_EXPAND</a><span class=\"ts\"/><span class=\"ts\"/>0x0002 <span class=\"comment\">/* called from cont_expand */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AOP_FLAG_NOFS\">AOP_FLAG_NOFS</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x0004 <span class=\"comment\">/* used by filesystem to direct</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>* helper code (eg buffer layer)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>* to clear GFP_FS from alloc */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * oh the beauties of C type declarations.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#page\">page</a>;", 
"struct <a class=\"id\" href=\"#address_space\">address_space</a>;", 
"struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a>;", 
"", 
"struct <a class=\"id\" href=\"#iov_iter\">iov_iter</a> {", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#iov_offset\">iov_offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>;", 
"};", 
"", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#iov_iter_copy_from_user_atomic\">iov_iter_copy_from_user_atomic</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#iov_iter\">iov_iter</a> *<a class=\"id\" href=\"#i\">i</a>, unsigned long <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#bytes\">bytes</a>);", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#iov_iter_copy_from_user\">iov_iter_copy_from_user</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#iov_iter\">iov_iter</a> *<a class=\"id\" href=\"#i\">i</a>, unsigned long <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#bytes\">bytes</a>);", 
"void <a class=\"id\" href=\"#iov_iter_advance\">iov_iter_advance</a>(struct <a class=\"id\" href=\"#iov_iter\">iov_iter</a> *<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#bytes\">bytes</a>);", 
"int <a class=\"id\" href=\"#iov_iter_fault_in_readable\">iov_iter_fault_in_readable</a>(struct <a class=\"id\" href=\"#iov_iter\">iov_iter</a> *<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#bytes\">bytes</a>);", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#iov_iter_single_seg_count\">iov_iter_single_seg_count</a>(struct <a class=\"id\" href=\"#iov_iter\">iov_iter</a> *<a class=\"id\" href=\"#i\">i</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#iov_iter_init\">iov_iter_init</a>(struct <a class=\"id\" href=\"#iov_iter\">iov_iter</a> *<a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>, unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#written\">written</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#iov\">iov</a> = <a class=\"id\" href=\"#iov\">iov</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#nr_segs\">nr_segs</a> = <a class=\"id\" href=\"#nr_segs\">nr_segs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#iov_offset\">iov_offset</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#count\">count</a> + <a class=\"id\" href=\"#written\">written</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iov_iter_advance\">iov_iter_advance</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#written\">written</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#iov_iter_count\">iov_iter_count</a>(struct <a class=\"id\" href=\"#iov_iter\">iov_iter</a> *<a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * \"descriptor\" for what we're up to with a read.</span>", 
"<span class=\"comment\"> * This allows us to use the same read code yet</span>", 
"<span class=\"comment\"> * have multiple different users of the data that</span>", 
"<span class=\"comment\"> * we read from a file.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The simplest case just copies the data to user</span>", 
"<span class=\"comment\"> * mode.</span>", 
"<span class=\"comment\"> */</span>", 
"typedef struct {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#written\">written</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"} <a class=\"id\" href=\"#read_descriptor_t\">read_descriptor_t</a>;", 
"", 
"typedef int (*<a class=\"id\" href=\"#read_actor_t\">read_actor_t</a>)(<a class=\"id\" href=\"#read_descriptor_t\">read_descriptor_t</a> *, struct <a class=\"id\" href=\"#page\">page</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long, unsigned long);", 
"", 
"struct <a class=\"id\" href=\"#address_space_operations\">address_space_operations</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#writepage\">writepage</a>)(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#readpage\">readpage</a>)(struct <a class=\"id\" href=\"#file\">file</a> *, struct <a class=\"id\" href=\"#page\">page</a> *);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#sync_page\">sync_page</a>)(struct <a class=\"id\" href=\"#page\">page</a> *);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Write back some dirty pages from this mapping. */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#writepages\">writepages</a>)(struct <a class=\"id\" href=\"#address_space\">address_space</a> *, struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set a page dirty.  Return true if this dirtied it */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a>)(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#readpages\">readpages</a>)(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pages\">pages</a>, unsigned <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#write_begin\">write_begin</a>)(struct <a class=\"id\" href=\"#file\">file</a> *, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pagep\">pagep</a>, void **<a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#write_end\">write_end</a>)(struct <a class=\"id\" href=\"#file\">file</a> *, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#copied\">copied</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, void *<a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Unfortunately this kludge is needed for FIBMAP. Don't use it */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> (*<a class=\"id\" href=\"#bmap\">bmap</a>)(struct <a class=\"id\" href=\"#address_space\">address_space</a> *, <a class=\"id\" href=\"#sector_t\">sector_t</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#invalidatepage\">invalidatepage</a>) (struct <a class=\"id\" href=\"#page\">page</a> *, unsigned long);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#releasepage\">releasepage</a>) (struct <a class=\"id\" href=\"#page\">page</a> *, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#direct_IO\">direct_IO</a>)(int, struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#get_xip_mem\">get_xip_mem</a>)(struct <a class=\"id\" href=\"#address_space\">address_space</a> *, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a>, int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void **, unsigned long *);", 
"<span class=\"ts\"/><span class=\"comment\">/* migrate the contents of a page to the specified target */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#migratepage\">migratepage</a>) (struct <a class=\"id\" href=\"#address_space\">address_space</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *, struct <a class=\"id\" href=\"#page\">page</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#launder_page\">launder_page</a>) (struct <a class=\"id\" href=\"#page\">page</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#is_partially_uptodate\">is_partially_uptodate</a>) (struct <a class=\"id\" href=\"#page\">page</a> *, <a class=\"id\" href=\"#read_descriptor_t\">read_descriptor_t</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#error_remove_page\">error_remove_page</a>)(struct <a class=\"id\" href=\"#address_space\">address_space</a> *, struct <a class=\"id\" href=\"#page\">page</a> *);", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * pagecache_write_begin/pagecache_write_end must be used by general code</span>", 
"<span class=\"comment\"> * to write into the pagecache.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pagecache_write_begin\">pagecache_write_begin</a>(struct <a class=\"id\" href=\"#file\">file</a> *, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pagep\">pagep</a>, void **<a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"", 
"int <a class=\"id\" href=\"#pagecache_write_end\">pagecache_write_end</a>(struct <a class=\"id\" href=\"#file\">file</a> *, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#copied\">copied</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, void *<a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"", 
"struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>;", 
"struct <a class=\"id\" href=\"#address_space\">address_space</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#host\">host</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* owner: inode, block_device */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a><span class=\"ts\"/><a class=\"id\" href=\"#page_tree\">page_tree</a>;<span class=\"ts\"/><span class=\"comment\">/* radix tree of all pages */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tree_lock\">tree_lock</a>;<span class=\"ts\"/><span class=\"comment\">/* and lock protecting it */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_mmap_writable\">i_mmap_writable</a>;<span class=\"comment\">/* count VM_SHARED mappings */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prio_tree_root\">prio_tree_root</a><span class=\"ts\"/><a class=\"id\" href=\"#i_mmap\">i_mmap</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* tree of private and shared mappings */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#i_mmap_nonlinear\">i_mmap_nonlinear</a>;<span class=\"comment\">/*list VM_NONLINEAR mappings */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>;<span class=\"ts\"/><span class=\"comment\">/* protect tree, count, list */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#truncate_count\">truncate_count</a>;<span class=\"ts\"/><span class=\"comment\">/* Cover race condition with truncate */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nrpages\">nrpages</a>;<span class=\"ts\"/><span class=\"comment\">/* number of total pages */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writeback_index\">writeback_index</a>;<span class=\"comment\">/* writeback starts here */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#address_space_operations\">address_space_operations</a> *<a class=\"id\" href=\"#a_ops\">a_ops</a>;<span class=\"ts\"/><span class=\"comment\">/* methods */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* error bits/gfp mask */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>; <span class=\"comment\">/* device readahead, etc */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#private_lock\">private_lock</a>;<span class=\"ts\"/><span class=\"comment\">/* for use by the address_space */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#private_list\">private_list</a>;<span class=\"ts\"/><span class=\"comment\">/* ditto */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a><span class=\"ts\"/>*<a class=\"id\" href=\"#assoc_mapping\">assoc_mapping</a>;<span class=\"ts\"/><span class=\"comment\">/* ditto */</span>", 
"} <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#aligned\">aligned</a>(sizeof(long))));", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * On most architectures that alignment is already the case; but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * must be enforced here for CRIS, to let the least signficant bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of struct page's \"mapping\" pointer be used for PAGE_MAPPING_ANON.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"struct <a class=\"id\" href=\"#block_device\">block_device</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_t\">dev_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd_dev\">bd_dev</a>;  <span class=\"comment\">/* not a kdev_t - it's a search key */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd_inode\">bd_inode</a>;<span class=\"ts\"/><span class=\"comment\">/* will die */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<span class=\"ts\"/><a class=\"id\" href=\"#bd_super\">bd_super</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd_openers\">bd_openers</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd_mutex\">bd_mutex</a>;<span class=\"ts\"/><span class=\"comment\">/* open/close mutex */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#bd_inodes\">bd_inodes</a>;", 
"<span class=\"ts\"/>void *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd_claiming\">bd_claiming</a>;", 
"<span class=\"ts\"/>void *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd_holder\">bd_holder</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd_holders\">bd_holders</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSFS\">CONFIG_SYSFS</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#bd_holder_list\">bd_holder_list</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<span class=\"ts\"/><a class=\"id\" href=\"#bd_contains\">bd_contains</a>;", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd_block_size\">bd_block_size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<span class=\"ts\"/><a class=\"id\" href=\"#bd_part\">bd_part</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* number of times partitions within this device have been opened. */</span>", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd_part_count\">bd_part_count</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd_invalidated\">bd_invalidated</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<span class=\"ts\"/><a class=\"id\" href=\"#bd_disk\">bd_disk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#bd_list\">bd_list</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Private data.  You must have bd_claim'ed the block_device</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to use this.  NOTE:  bd_claim allows an owner to claim</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the same device multiple times, the owner must take special</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * care to not mess up bd_private for that case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd_private\">bd_private</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The counter of freeze processes */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd_fsfreeze_count\">bd_fsfreeze_count</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Mutex for freeze */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd_fsfreeze_mutex\">bd_fsfreeze_mutex</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Radix-tree tags, for tagging dirty and writeback pages within the pagecache</span>", 
"<span class=\"comment\"> * radix trees</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGECACHE_TAG_DIRTY\">PAGECACHE_TAG_DIRTY</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGECACHE_TAG_WRITEBACK\">PAGECACHE_TAG_WRITEBACK</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGECACHE_TAG_TOWRITE\">PAGECACHE_TAG_TOWRITE</a><span class=\"ts\"/>2", 
"", 
"int <a class=\"id\" href=\"#mapping_tagged\">mapping_tagged</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, int <a class=\"id\" href=\"#tag\">tag</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Might pages of this file be mapped into userspace?</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mapping_mapped\">mapping_mapped</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"{", 
"<span class=\"ts\"/>return<span class=\"ts\"/>!<a class=\"id\" href=\"#prio_tree_empty\">prio_tree_empty</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap\">i_mmap</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_nonlinear\">i_mmap_nonlinear</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Might pages of this file have been modified in userspace?</span>", 
"<span class=\"comment\"> * Note that i_mmap_writable counts all VM_SHARED vmas: do_mmap_pgoff</span>", 
"<span class=\"comment\"> * marks vma as VM_SHARED if it is shared, and the file was opened for</span>", 
"<span class=\"comment\"> * writing i.e. vma may be mprotected writable even if now readonly.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mapping_writably_mapped\">mapping_writably_mapped</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_writable\">i_mmap_writable</a> != 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Use sequence counter to get consistent i_size on 32-bit processors.</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>==32 && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>)", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seqlock\">seqlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__NEED_I_SIZE_ORDERED\">__NEED_I_SIZE_ORDERED</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#i_size_ordered_init\">i_size_ordered_init</a>(<a class=\"id\" href=\"#inode\">inode</a>) <a class=\"id\" href=\"#seqcount_init\">seqcount_init</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size_seqcount\">i_size_seqcount</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#i_size_ordered_init\">i_size_ordered_init</a>(<a class=\"id\" href=\"#inode\">inode</a>) do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#posix_acl\">posix_acl</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACL_NOT_CACHED\">ACL_NOT_CACHED</a> ((void *)(-1))", 
"", 
"struct <a class=\"id\" href=\"#inode\">inode</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a><span class=\"ts\"/><a class=\"id\" href=\"#i_hash\">i_hash</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#i_list\">i_list</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* backing dev IO list */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#i_sb_list\">i_sb_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#i_dentry\">i_dentry</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_ino\">i_ino</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_count\">i_count</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_nlink\">i_nlink</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_t\">uid_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_uid\">i_uid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gid_t\">gid_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_gid\">i_gid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_t\">dev_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_rdev\">i_rdev</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_version\">i_version</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_size\">i_size</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__NEED_I_SIZE_ORDERED\">__NEED_I_SIZE_ORDERED</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seqcount_t\">seqcount_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_size_seqcount\">i_size_seqcount</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_atime\">i_atime</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_mtime\">i_mtime</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_ctime\">i_ctime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blkcnt_t\">blkcnt_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_blocks\">i_blocks</a>;", 
"<span class=\"ts\"/>unsigned short          <a class=\"id\" href=\"#i_bytes\">i_bytes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#umode_t\">umode_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_mode\">i_mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_lock\">i_lock</a>;<span class=\"ts\"/><span class=\"comment\">/* i_blocks, i_bytes, maybe i_size */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_mutex\">i_mutex</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a><span class=\"ts\"/><a class=\"id\" href=\"#i_alloc_sem\">i_alloc_sem</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#inode_operations\">inode_operations</a><span class=\"ts\"/>*<a class=\"id\" href=\"#i_op\">i_op</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#file_operations\">file_operations</a><span class=\"ts\"/>*<a class=\"id\" href=\"#i_fop\">i_fop</a>;<span class=\"ts\"/><span class=\"comment\">/* former -&gt;i_op-&gt;default_file_ops */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a><span class=\"ts\"/>*<a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a><span class=\"ts\"/>*<a class=\"id\" href=\"#i_flock\">i_flock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a><span class=\"ts\"/>*<a class=\"id\" href=\"#i_mapping\">i_mapping</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a><span class=\"ts\"/><a class=\"id\" href=\"#i_data\">i_data</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_QUOTA\">CONFIG_QUOTA</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dquot\">dquot</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#i_dquot\">i_dquot</a>[<a class=\"id\" href=\"#MAXQUOTAS\">MAXQUOTAS</a>];", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#i_devices\">i_devices</a>;", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a><span class=\"ts\"/>*<a class=\"id\" href=\"#i_pipe\">i_pipe</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#i_bdev\">i_bdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cdev\">cdev</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#i_cdev\">i_cdev</a>;", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_generation\">i_generation</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FSNOTIFY\">CONFIG_FSNOTIFY</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_fsnotify_mask\">i_fsnotify_mask</a>; <span class=\"comment\">/* all events this inode cares about */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a><span class=\"ts\"/><a class=\"id\" href=\"#i_fsnotify_marks\">i_fsnotify_marks</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_state\">i_state</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dirtied_when\">dirtied_when</a>;<span class=\"ts\"/><span class=\"comment\">/* jiffies of first dirtying */</span>", 
"", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_flags\">i_flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_writecount\">i_writecount</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SECURITY\">CONFIG_SECURITY</a>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#i_security\">i_security</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FS_POSIX_ACL\">CONFIG_FS_POSIX_ACL</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#posix_acl\">posix_acl</a><span class=\"ts\"/>*<a class=\"id\" href=\"#i_acl\">i_acl</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#posix_acl\">posix_acl</a><span class=\"ts\"/>*<a class=\"id\" href=\"#i_default_acl\">i_default_acl</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#i_private\">i_private</a>; <span class=\"comment\">/* fs or device private pointer */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * inode-&gt;i_mutex nesting subclasses for the lock validator:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 0: the object of the current VFS operation</span>", 
"<span class=\"comment\"> * 1: parent</span>", 
"<span class=\"comment\"> * 2: child/target</span>", 
"<span class=\"comment\"> * 3: quota file</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The locking order between these classes is</span>", 
"<span class=\"comment\"> * parent -&gt; child -&gt; normal -&gt; xattr -&gt; quota</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#inode_i_mutex_lock_class\">inode_i_mutex_lock_class</a>", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#I_MUTEX_NORMAL\">I_MUTEX_NORMAL</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#I_MUTEX_PARENT\">I_MUTEX_PARENT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#I_MUTEX_CHILD\">I_MUTEX_CHILD</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#I_MUTEX_XATTR\">I_MUTEX_XATTR</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#I_MUTEX_QUOTA\">I_MUTEX_QUOTA</a>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NOTE: in a 32bit arch with a preemptable kernel and</span>", 
"<span class=\"comment\"> * an UP compile the i_size_read/write must be atomic</span>", 
"<span class=\"comment\"> * with respect to the local cpu (unlike with preempt disabled),</span>", 
"<span class=\"comment\"> * but they don't need to be atomic with respect to other cpus like in</span>", 
"<span class=\"comment\"> * true SMP (so they need either to either locally disable irq around</span>", 
"<span class=\"comment\"> * the read or for example on x86 they can be still implemented as a</span>", 
"<span class=\"comment\"> * cmpxchg8b without the need of the lock prefix). For SMP compiles</span>", 
"<span class=\"comment\"> * and 64bit archs it makes no difference if preempt is enabled or not.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(const struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>==32 && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#i_size\">i_size</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#seq\">seq</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#read_seqcount_begin\">read_seqcount_begin</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size_seqcount\">i_size_seqcount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_size\">i_size</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#read_seqcount_retry\">read_seqcount_retry</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size_seqcount\">i_size_seqcount</a>, <a class=\"id\" href=\"#seq\">seq</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i_size\">i_size</a>;", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>==32 && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#i_size\">i_size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i_size\">i_size</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i_size\">i_size</a>;", 
"#else", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NOTE: unlike i_size_read(), i_size_write() does need locking around it</span>", 
"<span class=\"comment\"> * (normally i_mutex), otherwise on 32bit/SMP an update of i_size_seqcount</span>", 
"<span class=\"comment\"> * can be lost, resulting in subsequent i_size_read() calls spinning forever.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#i_size_write\">i_size_write</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#i_size\">i_size</a>)", 
"{", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>==32 && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_seqcount_begin\">write_seqcount_begin</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size_seqcount\">i_size_seqcount</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> = <a class=\"id\" href=\"#i_size\">i_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_seqcount_end\">write_seqcount_end</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size_seqcount\">i_size_seqcount</a>);", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>==32 && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> = <a class=\"id\" href=\"#i_size\">i_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> = <a class=\"id\" href=\"#i_size\">i_size</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#iminor\">iminor</a>(const struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_rdev\">i_rdev</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#imajor\">imajor</a>(const struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_rdev\">i_rdev</a>);", 
"}", 
"", 
"extern struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#I_BDEV\">I_BDEV</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"struct <a class=\"id\" href=\"#fown_struct\">fown_struct</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rwlock_t\">rwlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;          <span class=\"comment\">/* protects pid, uid, euid fields */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>;<span class=\"ts\"/><span class=\"comment\">/* pid or -pgrp where SIGIO should be sent */</span>", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#pid_type\">pid_type</a>;<span class=\"ts\"/><span class=\"comment\">/* Kind of process group SIGIO should be sent to */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#euid\">euid</a>;<span class=\"ts\"/><span class=\"comment\">/* uid/euid of process setting the owner */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#signum\">signum</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* posix.1b rt signal to be delivered on IO */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Track a single file's readahead state</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#file_ra_state\">file_ra_state</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#start\">start</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* where readahead started */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#size\">size</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* # of readahead pages */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#async_size\">async_size</a>;<span class=\"ts\"/><span class=\"comment\">/* do asynchronous readahead when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   there are only # of pages ahead */</span>", 
"", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ra_pages\">ra_pages</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Maximum readahead window */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mmap_miss\">mmap_miss</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Cache miss stat for mmap accesses */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#prev_pos\">prev_pos</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Cache last read() position */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check if @index falls in the readahead windows.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ra_has_index\">ra_has_index</a>(struct <a class=\"id\" href=\"#file_ra_state\">file_ra_state</a> *<a class=\"id\" href=\"#ra\">ra</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#index\">index</a> >= <a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#start\">start</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> &lt;  <a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#ra\">ra</a>-><a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FILE_MNT_WRITE_TAKEN\">FILE_MNT_WRITE_TAKEN</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FILE_MNT_WRITE_RELEASED\">FILE_MNT_WRITE_RELEASED</a><span class=\"ts\"/>2", 
"", 
"struct <a class=\"id\" href=\"#file\">file</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fu_list becomes invalid after file_free is called and queued via</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fu_rcuhead for RCU freeing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#fu_list\">fu_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <span class=\"ts\"/><a class=\"id\" href=\"#fu_rcuhead\">fu_rcuhead</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#f_u\">f_u</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f_path\">f_path</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#f_dentry\">f_dentry</a><span class=\"ts\"/><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#f_vfsmnt\">f_vfsmnt</a><span class=\"ts\"/><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#file_operations\">file_operations</a><span class=\"ts\"/>*<a class=\"id\" href=\"#f_op\">f_op</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f_lock\">f_lock</a>;  <span class=\"comment\">/* f_ep_links, f_flags, no IRQ */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f_sb_list_cpu\">f_sb_list_cpu</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_t\">atomic_long_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f_count\">f_count</a>;", 
"<span class=\"ts\"/>unsigned int <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f_flags\">f_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fmode_t\">fmode_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f_mode\">f_mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f_pos\">f_pos</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fown_struct\">fown_struct</a><span class=\"ts\"/><a class=\"id\" href=\"#f_owner\">f_owner</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a><span class=\"ts\"/>*<a class=\"id\" href=\"#f_cred\">f_cred</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_ra_state\">file_ra_state</a><span class=\"ts\"/><a class=\"id\" href=\"#f_ra\">f_ra</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f_version\">f_version</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SECURITY\">CONFIG_SECURITY</a>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#f_security\">f_security</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* needed for tty driver, and maybe others */</span>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_EPOLL\">CONFIG_EPOLL</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Used by fs/eventpoll.c to link all the hooks to this file */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#f_ep_links\">f_ep_links</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_EPOLL */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a><span class=\"ts\"/>*<a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_WRITECOUNT\">CONFIG_DEBUG_WRITECOUNT</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#f_mnt_write_state\">f_mnt_write_state</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_file\">get_file</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_inc\">atomic_long_inc</a>(&amp;(<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#f_count\">f_count</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#fput_atomic\">fput_atomic</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_add_unless\">atomic_long_add_unless</a>(&amp;(<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#f_count\">f_count</a>, -1, 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#file_count\">file_count</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_read\">atomic_long_read</a>(&amp;(<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#f_count\">f_count</a>)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_WRITECOUNT\">CONFIG_DEBUG_WRITECOUNT</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#file_take_write\">file_take_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_mnt_write_state\">f_mnt_write_state</a> != 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_mnt_write_state\">f_mnt_write_state</a> = <a class=\"id\" href=\"#FILE_MNT_WRITE_TAKEN\">FILE_MNT_WRITE_TAKEN</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#file_release_write\">file_release_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_mnt_write_state\">f_mnt_write_state</a> |= <a class=\"id\" href=\"#FILE_MNT_WRITE_RELEASED\">FILE_MNT_WRITE_RELEASED</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#file_reset_write\">file_reset_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_mnt_write_state\">f_mnt_write_state</a> = 0;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#file_check_state\">file_check_state</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At this point, either both or neither of these bits</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * should be set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_mnt_write_state\">f_mnt_write_state</a> == <a class=\"id\" href=\"#FILE_MNT_WRITE_TAKEN\">FILE_MNT_WRITE_TAKEN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_mnt_write_state\">f_mnt_write_state</a> == <a class=\"id\" href=\"#FILE_MNT_WRITE_RELEASED\">FILE_MNT_WRITE_RELEASED</a>);", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#file_check_writeable\">file_check_writeable</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_mnt_write_state\">f_mnt_write_state</a> == <a class=\"id\" href=\"#FILE_MNT_WRITE_TAKEN\">FILE_MNT_WRITE_TAKEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"writeable file with no \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"mnt_want_write()\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"#else <span class=\"comment\">/* !CONFIG_DEBUG_WRITECOUNT */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#file_take_write\">file_take_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#file_release_write\">file_release_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#file_reset_write\">file_reset_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#file_check_state\">file_check_state</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#file_check_writeable\">file_check_writeable</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_DEBUG_WRITECOUNT */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#MAX_NON_LFS\">MAX_NON_LFS</a><span class=\"ts\"/>((1UL<<31) - 1)", 
"", 
"<span class=\"comment\">/* Page cache limit. The filesystems should put that into their s_maxbytes </span>", 
"<span class=\"comment\">   limits, otherwise bad things can happen in VM. */</span> ", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>==32", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_LFS_FILESIZE\">MAX_LFS_FILESIZE</a><span class=\"ts\"/>(((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> << (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>-1))-1) ", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>==64", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_LFS_FILESIZE\">MAX_LFS_FILESIZE</a> <span class=\"ts\"/>0x7fffffffffffffffUL", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FL_POSIX\">FL_POSIX</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FL_FLOCK\">FL_FLOCK</a><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FL_ACCESS\">FL_ACCESS</a><span class=\"ts\"/>8<span class=\"ts\"/><span class=\"comment\">/* not trying to lock, just looking */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FL_EXISTS\">FL_EXISTS</a><span class=\"ts\"/>16<span class=\"ts\"/><span class=\"comment\">/* when unlocking, test for existence */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FL_LEASE\">FL_LEASE</a><span class=\"ts\"/>32<span class=\"ts\"/><span class=\"comment\">/* lease held on this file */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FL_CLOSE\">FL_CLOSE</a><span class=\"ts\"/>64<span class=\"ts\"/><span class=\"comment\">/* unlock on close */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FL_SLEEP\">FL_SLEEP</a><span class=\"ts\"/>128<span class=\"ts\"/><span class=\"comment\">/* A blocking lock */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Special return value from posix_lock_file() and vfs_lock_file() for</span>", 
"<span class=\"comment\"> * asynchronous locking.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FILE_LOCK_DEFERRED\">FILE_LOCK_DEFERRED</a> 1", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The POSIX file lock owner is determined by</span>", 
"<span class=\"comment\"> * the \"struct files_struct\" in the thread group</span>", 
"<span class=\"comment\"> * (or NULL for no owner - BSD locks).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Lockd stuffs a \"host\" pointer into this.</span>", 
"<span class=\"comment\"> */</span>", 
"typedef struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#fl_owner_t\">fl_owner_t</a>;", 
"", 
"struct <a class=\"id\" href=\"#file_lock_operations\">file_lock_operations</a> {", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#fl_copy_lock\">fl_copy_lock</a>)(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#fl_release_private\">fl_release_private</a>)(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *);", 
"};", 
"", 
"struct <a class=\"id\" href=\"#lock_manager_operations\">lock_manager_operations</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#fl_compare_owner\">fl_compare_owner</a>)(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#fl_notify\">fl_notify</a>)(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *);<span class=\"ts\"/><span class=\"comment\">/* unblock callback */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#fl_grant\">fl_grant</a>)(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *, int);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#fl_copy_lock\">fl_copy_lock</a>)(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#fl_release_private\">fl_release_private</a>)(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#fl_break\">fl_break</a>)(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#fl_mylease\">fl_mylease</a>)(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#fl_change\">fl_change</a>)(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> **, int);", 
"};", 
"", 
"struct <a class=\"id\" href=\"#lock_manager\">lock_manager</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"};", 
"", 
"void <a class=\"id\" href=\"#locks_start_grace\">locks_start_grace</a>(struct <a class=\"id\" href=\"#lock_manager\">lock_manager</a> *);", 
"void <a class=\"id\" href=\"#locks_end_grace\">locks_end_grace</a>(struct <a class=\"id\" href=\"#lock_manager\">lock_manager</a> *);", 
"int <a class=\"id\" href=\"#locks_in_grace\">locks_in_grace</a>(void);", 
"", 
"<span class=\"comment\">/* that will die - we need it for nfs_lock_info */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nfs_fs_i\">nfs_fs_i</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#file_lock\">file_lock</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl_next\">fl_next</a>;<span class=\"ts\"/><span class=\"comment\">/* singly linked list for this inode  */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#fl_link\">fl_link</a>;<span class=\"ts\"/><span class=\"comment\">/* doubly linked list of all locks */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#fl_block\">fl_block</a>;<span class=\"ts\"/><span class=\"comment\">/* circular list of blocked processes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl_owner_t\">fl_owner_t</a> <a class=\"id\" href=\"#fl_owner\">fl_owner</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#fl_flags\">fl_flags</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#fl_type\">fl_type</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#fl_pid\">fl_pid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#fl_nspid\">fl_nspid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> <a class=\"id\" href=\"#fl_wait\">fl_wait</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#fl_file\">fl_file</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#fl_start\">fl_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#fl_end\">fl_end</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fasync_struct\">fasync_struct</a> *<span class=\"ts\"/><a class=\"id\" href=\"#fl_fasync\">fl_fasync</a>; <span class=\"comment\">/* for lease break notifications */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#fl_break_time\">fl_break_time</a>;<span class=\"ts\"/><span class=\"comment\">/* for nonblocking lease breaks */</span>", 
"", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#file_lock_operations\">file_lock_operations</a> *<a class=\"id\" href=\"#fl_ops\">fl_ops</a>;<span class=\"ts\"/><span class=\"comment\">/* Callbacks for filesystems */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#lock_manager_operations\">lock_manager_operations</a> *<a class=\"id\" href=\"#fl_lmops\">fl_lmops</a>;<span class=\"ts\"/><span class=\"comment\">/* Callbacks for lockmanagers */</span>", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#nfs_lock_info\">nfs_lock_info</a><span class=\"ts\"/><a class=\"id\" href=\"#nfs_fl\">nfs_fl</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#nfs4_lock_info\">nfs4_lock_info</a><span class=\"ts\"/><a class=\"id\" href=\"#nfs4_fl\">nfs4_fl</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#link\">link</a>;<span class=\"ts\"/><span class=\"comment\">/* link in AFS vnode's pending_locks list */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#state\">state</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* state of grant or error if -ve */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#afs\">afs</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#fl_u\">fl_u</a>;", 
"};", 
"", 
"<span class=\"comment\">/* The following constant reflects the upper bound of the file/locking space */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#OFFSET_MAX\">OFFSET_MAX</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INT_LIMIT\">INT_LIMIT</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>(~((<a class=\"id\" href=\"#x\">x</a>)1 << (sizeof(<a class=\"id\" href=\"#x\">x</a>)*8 - 1)))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OFFSET_MAX\">OFFSET_MAX</a><span class=\"ts\"/><a class=\"id\" href=\"#INT_LIMIT\">INT_LIMIT</a>(<a class=\"id\" href=\"#loff_t\">loff_t</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OFFT_OFFSET_MAX\">OFFT_OFFSET_MAX</a><span class=\"ts\"/><a class=\"id\" href=\"#INT_LIMIT\">INT_LIMIT</a>(<a class=\"id\" href=\"#off_t\">off_t</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fcntl\">fcntl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* temporary stubs for BKL removal */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_flocks\">lock_flocks</a>() <a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#unlock_flocks\">unlock_flocks</a>() <a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>()", 
"", 
"extern void <a class=\"id\" href=\"#send_sigio\">send_sigio</a>(struct <a class=\"id\" href=\"#fown_struct\">fown_struct</a> *<a class=\"id\" href=\"#fown\">fown</a>, int <a class=\"id\" href=\"#fd\">fd</a>, int <a class=\"id\" href=\"#band\">band</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FILE_LOCKING\">CONFIG_FILE_LOCKING</a>", 
"extern int <a class=\"id\" href=\"#fcntl_getlk\">fcntl_getlk</a>(struct <a class=\"id\" href=\"#file\">file</a> *, struct <a class=\"id\" href=\"#flock\">flock</a> <a class=\"id\" href=\"#__user\">__user</a> *);", 
"extern int <a class=\"id\" href=\"#fcntl_setlk\">fcntl_setlk</a>(unsigned int, struct <a class=\"id\" href=\"#file\">file</a> *, unsigned int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#flock\">flock</a> <a class=\"id\" href=\"#__user\">__user</a> *);", 
"", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"extern int <a class=\"id\" href=\"#fcntl_getlk64\">fcntl_getlk64</a>(struct <a class=\"id\" href=\"#file\">file</a> *, struct <a class=\"id\" href=\"#flock64\">flock64</a> <a class=\"id\" href=\"#__user\">__user</a> *);", 
"extern int <a class=\"id\" href=\"#fcntl_setlk64\">fcntl_setlk64</a>(unsigned int, struct <a class=\"id\" href=\"#file\">file</a> *, unsigned int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#flock64\">flock64</a> <a class=\"id\" href=\"#__user\">__user</a> *);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern int <a class=\"id\" href=\"#fcntl_setlease\">fcntl_setlease</a>(unsigned int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, long <a class=\"id\" href=\"#arg\">arg</a>);", 
"extern int <a class=\"id\" href=\"#fcntl_getlease\">fcntl_getlease</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>);", 
"", 
"<span class=\"comment\">/* fs/locks.c */</span>", 
"extern void <a class=\"id\" href=\"#locks_init_lock\">locks_init_lock</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *);", 
"extern void <a class=\"id\" href=\"#locks_copy_lock\">locks_copy_lock</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *);", 
"extern void <a class=\"id\" href=\"#__locks_copy_lock\">__locks_copy_lock</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *, const struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *);", 
"extern void <a class=\"id\" href=\"#locks_remove_posix\">locks_remove_posix</a>(struct <a class=\"id\" href=\"#file\">file</a> *, <a class=\"id\" href=\"#fl_owner_t\">fl_owner_t</a>);", 
"extern void <a class=\"id\" href=\"#locks_remove_flock\">locks_remove_flock</a>(struct <a class=\"id\" href=\"#file\">file</a> *);", 
"extern void <a class=\"id\" href=\"#locks_release_private\">locks_release_private</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *);", 
"extern void <a class=\"id\" href=\"#posix_test_lock\">posix_test_lock</a>(struct <a class=\"id\" href=\"#file\">file</a> *, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *);", 
"extern int <a class=\"id\" href=\"#posix_lock_file\">posix_lock_file</a>(struct <a class=\"id\" href=\"#file\">file</a> *, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *);", 
"extern int <a class=\"id\" href=\"#posix_lock_file_wait\">posix_lock_file_wait</a>(struct <a class=\"id\" href=\"#file\">file</a> *, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *);", 
"extern int <a class=\"id\" href=\"#posix_unblock_lock\">posix_unblock_lock</a>(struct <a class=\"id\" href=\"#file\">file</a> *, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *);", 
"extern int <a class=\"id\" href=\"#vfs_test_lock\">vfs_test_lock</a>(struct <a class=\"id\" href=\"#file\">file</a> *, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *);", 
"extern int <a class=\"id\" href=\"#vfs_lock_file\">vfs_lock_file</a>(struct <a class=\"id\" href=\"#file\">file</a> *, unsigned int, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *);", 
"extern int <a class=\"id\" href=\"#vfs_cancel_lock\">vfs_cancel_lock</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>);", 
"extern int <a class=\"id\" href=\"#flock_lock_file_wait\">flock_lock_file_wait</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>);", 
"extern int <a class=\"id\" href=\"#__break_lease\">__break_lease</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>);", 
"extern void <a class=\"id\" href=\"#lease_get_mtime\">lease_get_mtime</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#time\">time</a>);", 
"extern int <a class=\"id\" href=\"#generic_setlease\">generic_setlease</a>(struct <a class=\"id\" href=\"#file\">file</a> *, long, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> **);", 
"extern int <a class=\"id\" href=\"#vfs_setlease\">vfs_setlease</a>(struct <a class=\"id\" href=\"#file\">file</a> *, long, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> **);", 
"extern int <a class=\"id\" href=\"#lease_modify\">lease_modify</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> **, int);", 
"extern int <a class=\"id\" href=\"#lock_may_read\">lock_may_read</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>);", 
"extern int <a class=\"id\" href=\"#lock_may_write\">lock_may_write</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>);", 
"#else <span class=\"comment\">/* !CONFIG_FILE_LOCKING */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#fcntl_getlk\">fcntl_getlk</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#flock\">flock</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#user\">user</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#fcntl_setlk\">fcntl_setlk</a>(unsigned int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, struct <a class=\"id\" href=\"#flock\">flock</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#user\">user</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"}", 
"", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#fcntl_getlk64\">fcntl_getlk64</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#flock64\">flock64</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#user\">user</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#fcntl_setlk64\">fcntl_setlk64</a>(unsigned int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, struct <a class=\"id\" href=\"#flock64\">flock64</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#user\">user</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#fcntl_setlease\">fcntl_setlease</a>(unsigned int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#fcntl_getlease\">fcntl_getlease</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#locks_init_lock\">locks_init_lock</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__locks_copy_lock\">__locks_copy_lock</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#locks_copy_lock\">locks_copy_lock</a>(struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#file_lock\">file_lock</a> *<a class=\"id\" href=\"#fl\">fl</a>)", 
"{", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#locks_remove_posix\">locks_remove_posix</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#fl_owner_t\">fl_owner_t</a> <a class=\"id\" href=\"#owner\">owner</a>)", 
"{", 
];
xr_frag_insert('l/32/fbaac554baf4c7024d37ee32f1fca43bd13760.xr', __xr_tmp);
