var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/drivers/char/8250_pci.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Probe module for 8250/16550-type PCI serial ports.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Based on drivers/char/serial.c, by Linus Torvalds, Theodore Ts'o.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2001 Russell King, All Rights Reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tty\">tty</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#serial_core\">serial_core</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/8250<a class=\"id\" href=\"#_pci\">_pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#byteorder\">byteorder</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"8250.h\"", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#SERIAL_DEBUG_PCI\">SERIAL_DEBUG_PCI</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * init function returns:</span>", 
"<span class=\"comment\"> *  &gt; 0 - number of ports</span>", 
"<span class=\"comment\"> *  = 0 - use board-&gt;num_ports</span>", 
"<span class=\"comment\"> *  &lt; 0 - error</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#pci_serial_quirk\">pci_serial_quirk</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><a class=\"id\" href=\"#vendor\">vendor</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><a class=\"id\" href=\"#subvendor\">subvendor</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><a class=\"id\" href=\"#subdevice\">subdevice</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#init\">init</a>)(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#setup\">setup</a>)(struct <a class=\"id\" href=\"#serial_private\">serial_private</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#pciserial_board\">pciserial_board</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *, int);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#exit\">exit</a>)(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PCI_NUM_BAR_RESOURCES\">PCI_NUM_BAR_RESOURCES</a><span class=\"ts\"/>6", 
"", 
"struct <a class=\"id\" href=\"#serial_private\">serial_private</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#remapped_bar\">remapped_bar</a>[<a class=\"id\" href=\"#PCI_NUM_BAR_RESOURCES\">PCI_NUM_BAR_RESOURCES</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_serial_quirk\">pci_serial_quirk</a><span class=\"ts\"/>*<a class=\"id\" href=\"#quirk\">quirk</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#line\">line</a>[0];", 
"};", 
"", 
"static void <a class=\"id\" href=\"#moan_device\">moan_device</a>(const char *<a class=\"id\" href=\"#str\">str</a>, struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/>       \"%s: %s\\n\"", 
"<span class=\"ts\"/>       \"Please send the output of lspci -vv, this\\n\"", 
"<span class=\"ts\"/>       \"message (0x%04x,0x%04x,0x%04x,0x%04x), the\\n\"", 
"<span class=\"ts\"/>       \"manufacturer and name of serial board or\\n\"", 
"<span class=\"ts\"/>       \"modem board to rmk+serial@arm.linux.org.uk.\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#pci_name\">pci_name</a>(<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#vendor\">vendor</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subsystem_vendor\">subsystem_vendor</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subsystem_device\">subsystem_device</a>);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#setup_port\">setup_port</a>(struct <a class=\"id\" href=\"#serial_private\">serial_private</a> *<a class=\"id\" href=\"#priv\">priv</a>, struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#port\">port</a>,", 
"<span class=\"ts\"/>   int <a class=\"id\" href=\"#bar\">bar</a>, int <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#regshift\">regshift</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bar\">bar</a> >= <a class=\"id\" href=\"#PCI_NUM_BAR_RESOURCES\">PCI_NUM_BAR_RESOURCES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#bar\">bar</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_resource_flags\">pci_resource_flags</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#bar\">bar</a>) &amp; <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> =  <a class=\"id\" href=\"#pci_resource_len\">pci_resource_len</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#bar\">bar</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#remapped_bar\">remapped_bar</a>[<a class=\"id\" href=\"#bar\">bar</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#remapped_bar\">remapped_bar</a>[<a class=\"id\" href=\"#bar\">bar</a>] = <a class=\"id\" href=\"#ioremap_nocache\">ioremap_nocache</a>(<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#remapped_bar\">remapped_bar</a>[<a class=\"id\" href=\"#bar\">bar</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#iotype\">iotype</a> = <a class=\"id\" href=\"#UPIO_MEM\">UPIO_MEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#iobase\">iobase</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#mapbase\">mapbase</a> = <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#membase\">membase</a> = <a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#remapped_bar\">remapped_bar</a>[<a class=\"id\" href=\"#bar\">bar</a>] + <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#regshift\">regshift</a> = <a class=\"id\" href=\"#regshift\">regshift</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#iotype\">iotype</a> = <a class=\"id\" href=\"#UPIO_PORT\">UPIO_PORT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#iobase\">iobase</a> = <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#mapbase\">mapbase</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#membase\">membase</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#regshift\">regshift</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ADDI-DATA GmbH communication cards &lt;info@addi-data.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#addidata_apci7800_setup\">addidata_apci7800_setup</a>(struct <a class=\"id\" href=\"#serial_private\">serial_private</a> *<a class=\"id\" href=\"#priv\">priv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#pciserial_board\">pciserial_board</a> *<a class=\"id\" href=\"#board\">board</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#port\">port</a>, int <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bar\">bar</a> = 0, <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#board\">board</a>-><a class=\"id\" href=\"#first_offset\">first_offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bar\">bar</a> = <a class=\"id\" href=\"#FL_GET_BASE\">FL_GET_BASE</a>(<a class=\"id\" href=\"#board\">board</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> &lt; 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#idx\">idx</a> * <a class=\"id\" href=\"#board\">board</a>-><a class=\"id\" href=\"#uart_offset\">uart_offset</a>;", 
"<span class=\"ts\"/>} else if ((<a class=\"id\" href=\"#idx\">idx</a> >= 2) && (<a class=\"id\" href=\"#idx\">idx</a> &lt; 4)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bar\">bar</a> += 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += ((<a class=\"id\" href=\"#idx\">idx</a> - 2) * <a class=\"id\" href=\"#board\">board</a>-><a class=\"id\" href=\"#uart_offset\">uart_offset</a>);", 
"<span class=\"ts\"/>} else if ((<a class=\"id\" href=\"#idx\">idx</a> >= 4) && (<a class=\"id\" href=\"#idx\">idx</a> &lt; 6)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bar\">bar</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += ((<a class=\"id\" href=\"#idx\">idx</a> - 4) * <a class=\"id\" href=\"#board\">board</a>-><a class=\"id\" href=\"#uart_offset\">uart_offset</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#idx\">idx</a> >= 6) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bar\">bar</a> += 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += ((<a class=\"id\" href=\"#idx\">idx</a> - 6) * <a class=\"id\" href=\"#board\">board</a>-><a class=\"id\" href=\"#uart_offset\">uart_offset</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#setup_port\">setup_port</a>(<a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#bar\">bar</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#board\">board</a>-><a class=\"id\" href=\"#reg_shift\">reg_shift</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * AFAVLAB uses a different mixture of BARs and offsets</span>", 
"<span class=\"comment\"> * Not that ugly ;) -- HW</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#afavlab_setup\">afavlab_setup</a>(struct <a class=\"id\" href=\"#serial_private\">serial_private</a> *<a class=\"id\" href=\"#priv\">priv</a>, const struct <a class=\"id\" href=\"#pciserial_board\">pciserial_board</a> *<a class=\"id\" href=\"#board\">board</a>,", 
"<span class=\"ts\"/>      struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#port\">port</a>, int <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bar\">bar</a>, <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#board\">board</a>-><a class=\"id\" href=\"#first_offset\">first_offset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bar\">bar</a> = <a class=\"id\" href=\"#FL_GET_BASE\">FL_GET_BASE</a>(<a class=\"id\" href=\"#board\">board</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> &lt; 4)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bar\">bar</a> += <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bar\">bar</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += (<a class=\"id\" href=\"#idx\">idx</a> - 4) * <a class=\"id\" href=\"#board\">board</a>-><a class=\"id\" href=\"#uart_offset\">uart_offset</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#setup_port\">setup_port</a>(<a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#bar\">bar</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#board\">board</a>-><a class=\"id\" href=\"#reg_shift\">reg_shift</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * HP's Remote Management Console.  The Diva chip came in several</span>", 
"<span class=\"comment\"> * different versions.  N-class, L2000 and A500 have two Diva chips, each</span>", 
"<span class=\"comment\"> * with 3 UARTs (the third UART on the second chip is unused).  Superdome</span>", 
"<span class=\"comment\"> * and Keystone have one Diva chip with 3 UARTs.  Some later machines have</span>", 
"<span class=\"comment\"> * one Diva chip, but it has been expanded to 5 UARTs.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pci_hp_diva_init\">pci_hp_diva_init</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subsystem_device\">subsystem_device</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_HP_DIVA_TOSCA1\">PCI_DEVICE_ID_HP_DIVA_TOSCA1</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_HP_DIVA_HALFDOME\">PCI_DEVICE_ID_HP_DIVA_HALFDOME</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_HP_DIVA_KEYSTONE\">PCI_DEVICE_ID_HP_DIVA_KEYSTONE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_HP_DIVA_EVEREST\">PCI_DEVICE_ID_HP_DIVA_EVEREST</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 3;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_HP_DIVA_TOSCA2\">PCI_DEVICE_ID_HP_DIVA_TOSCA2</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_HP_DIVA_MAESTRO\">PCI_DEVICE_ID_HP_DIVA_MAESTRO</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_HP_DIVA_POWERBAR\">PCI_DEVICE_ID_HP_DIVA_POWERBAR</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_HP_DIVA_HURRICANE\">PCI_DEVICE_ID_HP_DIVA_HURRICANE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * HP's Diva chip puts the 4th/5th serial port further out, and</span>", 
"<span class=\"comment\"> * some serial ports are supposed to be hidden on certain models.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#pci_hp_diva_setup\">pci_hp_diva_setup</a>(struct <a class=\"id\" href=\"#serial_private\">serial_private</a> *<a class=\"id\" href=\"#priv\">priv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#pciserial_board\">pciserial_board</a> *<a class=\"id\" href=\"#board\">board</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#port\">port</a>, int <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#board\">board</a>-><a class=\"id\" href=\"#first_offset\">first_offset</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bar\">bar</a> = <a class=\"id\" href=\"#FL_GET_BASE\">FL_GET_BASE</a>(<a class=\"id\" href=\"#board\">board</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subsystem_device\">subsystem_device</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_HP_DIVA_MAESTRO\">PCI_DEVICE_ID_HP_DIVA_MAESTRO</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> == 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_HP_DIVA_EVEREST\">PCI_DEVICE_ID_HP_DIVA_EVEREST</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> &gt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> &gt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = 0x18;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#idx\">idx</a> * <a class=\"id\" href=\"#board\">board</a>-><a class=\"id\" href=\"#uart_offset\">uart_offset</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#setup_port\">setup_port</a>(<a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#bar\">bar</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#board\">board</a>-><a class=\"id\" href=\"#reg_shift\">reg_shift</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Added for EKF Intel i960 serial boards</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pci_inteli960ni_init\">pci_inteli960ni_init</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#oldval\">oldval</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subsystem_device\">subsystem_device</a> &amp; 0x1000))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* is firmware started? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x44, (void *)&amp;<a class=\"id\" href=\"#oldval\">oldval</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#oldval\">oldval</a> == 0x00001000L) { <span class=\"comment\">/* RESET value */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"Local i960 firmware missing\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some PCI serial cards using the PLX 9050 PCI interface chip require</span>", 
"<span class=\"comment\"> * that the card interrupt be explicitly enabled or disabled.  This</span>", 
"<span class=\"comment\"> * seems to be mainly needed on card using the PLX which also use I/O</span>", 
"<span class=\"comment\"> * mapped memory.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pci_plx9050_init\">pci_plx9050_init</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#irq_config\">irq_config</a>;", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pci_resource_flags\">pci_resource_flags</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0) &amp; <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#moan_device\">moan_device</a>(\"no memory in bar 0\", <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_config\">irq_config</a> = 0x41;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#vendor\">vendor</a> == <a class=\"id\" href=\"#PCI_VENDOR_ID_PANACOM\">PCI_VENDOR_ID_PANACOM</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subsystem_vendor\">subsystem_vendor</a> == <a class=\"id\" href=\"#PCI_SUBVENDOR_ID_EXSYS\">PCI_SUBVENDOR_ID_EXSYS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_config\">irq_config</a> = 0x43;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#vendor\">vendor</a> == <a class=\"id\" href=\"#PCI_VENDOR_ID_PLX\">PCI_VENDOR_ID_PLX</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#PCI_DEVICE_ID_PLX_ROMULUS\">PCI_DEVICE_ID_PLX_ROMULUS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * As the megawolf cards have the int pins active</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * high, and have 2 UART chips, both ints must be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * enabled on the 9050. Also, the UARTS are set in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 16450 mode by default, so we have to enable the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 16C950 'enhanced' mode so that we can use the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * deep FIFOs</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_config\">irq_config</a> = 0x5b;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * enable/disable interrupts</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#ioremap_nocache\">ioremap_nocache</a>(<a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0), 0x80);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(<a class=\"id\" href=\"#irq_config\">irq_config</a>, <a class=\"id\" href=\"#p\">p</a> + 0x4c);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Read the register back to ensure that it took effect.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#p\">p</a> + 0x4c);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iounmap\">iounmap</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__devexit\">__devexit</a> <a class=\"id\" href=\"#pci_plx9050_exit\">pci_plx9050_exit</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pci_resource_flags\">pci_resource_flags</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0) &amp; <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disable interrupts</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#ioremap_nocache\">ioremap_nocache</a>(<a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0), 0x80);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(0, <a class=\"id\" href=\"#p\">p</a> + 0x4c);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Read the register back to ensure that it took effect.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#p\">p</a> + 0x4c);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iounmap\">iounmap</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NI8420_INT_ENABLE_REG\">NI8420_INT_ENABLE_REG</a><span class=\"ts\"/>0x38", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NI8420_INT_ENABLE_BIT\">NI8420_INT_ENABLE_BIT</a><span class=\"ts\"/>0x2000", 
"", 
"static void <a class=\"id\" href=\"#__devexit\">__devexit</a> <a class=\"id\" href=\"#pci_ni8420_exit\">pci_ni8420_exit</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bar\">bar</a> = 0;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pci_resource_flags\">pci_resource_flags</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#bar\">bar</a>) &amp; <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#moan_device\">moan_device</a>(\"no memory in bar\", <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#bar\">bar</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> =  <a class=\"id\" href=\"#pci_resource_len\">pci_resource_len</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#bar\">bar</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#ioremap_nocache\">ioremap_nocache</a>(<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Disable the CPU Interrupt */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(<a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#NI8420_INT_ENABLE_REG\">NI8420_INT_ENABLE_REG</a>) &amp; ~(<a class=\"id\" href=\"#NI8420_INT_ENABLE_BIT\">NI8420_INT_ENABLE_BIT</a>),", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#NI8420_INT_ENABLE_REG\">NI8420_INT_ENABLE_REG</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iounmap\">iounmap</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/* MITE registers */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MITE_IOWBSR1\">MITE_IOWBSR1</a><span class=\"ts\"/>0xc4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MITE_IOWCR1\">MITE_IOWCR1</a><span class=\"ts\"/>0xf4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MITE_LCIMR1\">MITE_LCIMR1</a><span class=\"ts\"/>0x08", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MITE_LCIMR2\">MITE_LCIMR2</a><span class=\"ts\"/>0x10", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MITE_LCIMR2_CLR_CPU_IE\">MITE_LCIMR2_CLR_CPU_IE</a><span class=\"ts\"/>(1 << 30)", 
"", 
"static void <a class=\"id\" href=\"#__devexit\">__devexit</a> <a class=\"id\" href=\"#pci_ni8430_exit\">pci_ni8430_exit</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bar\">bar</a> = 0;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pci_resource_flags\">pci_resource_flags</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#bar\">bar</a>) &amp; <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#moan_device\">moan_device</a>(\"no memory in bar\", <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#bar\">bar</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> =  <a class=\"id\" href=\"#pci_resource_len\">pci_resource_len</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#bar\">bar</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#ioremap_nocache\">ioremap_nocache</a>(<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Disable the CPU Interrupt */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(<a class=\"id\" href=\"#MITE_LCIMR2_CLR_CPU_IE\">MITE_LCIMR2_CLR_CPU_IE</a>, <a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#MITE_LCIMR2\">MITE_LCIMR2</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iounmap\">iounmap</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<span class=\"comment\">/* SBS Technologies Inc. PMC-OCTPRO and P-OCTAL cards */</span>", 
"static int", 
"<a class=\"id\" href=\"#sbs_setup\">sbs_setup</a>(struct <a class=\"id\" href=\"#serial_private\">serial_private</a> *<a class=\"id\" href=\"#priv\">priv</a>, const struct <a class=\"id\" href=\"#pciserial_board\">pciserial_board</a> *<a class=\"id\" href=\"#board\">board</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#port\">port</a>, int <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bar\">bar</a>, <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#board\">board</a>-><a class=\"id\" href=\"#first_offset\">first_offset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bar\">bar</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> &lt; 4) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* first four channels map to 0, 0x100, 0x200, 0x300 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#idx\">idx</a> * <a class=\"id\" href=\"#board\">board</a>-><a class=\"id\" href=\"#uart_offset\">uart_offset</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#idx\">idx</a> &lt; 8) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* last four channels map to 0x1000, 0x1100, 0x1200, 0x1300 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#idx\">idx</a> * <a class=\"id\" href=\"#board\">board</a>-><a class=\"id\" href=\"#uart_offset\">uart_offset</a> + 0xC00;", 
"<span class=\"ts\"/>} else <span class=\"comment\">/* we have only 8 ports on PMC-OCTALPRO */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#setup_port\">setup_port</a>(<a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#bar\">bar</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#board\">board</a>-><a class=\"id\" href=\"#reg_shift\">reg_shift</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">* This does initialization for PMC OCTALPRO cards:</span>", 
"<span class=\"comment\">* maps the device memory, resets the UARTs (needed, bc</span>", 
"<span class=\"comment\">* if the module is removed and inserted again, the card</span>", 
"<span class=\"comment\">* is in the sleep mode) and enables global interrupt.</span>", 
"<span class=\"comment\">*/</span>", 
"", 
"<span class=\"comment\">/* global control register offset for SBS PMC-OctalPro */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OCT_REG_CR_OFF\">OCT_REG_CR_OFF</a><span class=\"ts\"/><span class=\"ts\"/>0x500", 
"", 
"static int <a class=\"id\" href=\"#sbs_init\">sbs_init</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pci_ioremap_bar\">pci_ioremap_bar</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Set bit-4 Control Register (UART RESET) in to reset the uarts */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#writeb\">writeb</a>(0x10, <a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#OCT_REG_CR_OFF\">OCT_REG_CR_OFF</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(50);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#writeb\">writeb</a>(0x0, <a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#OCT_REG_CR_OFF\">OCT_REG_CR_OFF</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set bit-2 (INTENABLE) of Control Register */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#writeb\">writeb</a>(0x4, <a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#OCT_REG_CR_OFF\">OCT_REG_CR_OFF</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iounmap\">iounmap</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Disables the global interrupt of PMC-OctalPro</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#__devexit\">__devexit</a> <a class=\"id\" href=\"#sbs_exit\">sbs_exit</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pci_ioremap_bar\">pci_ioremap_bar</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0);", 
"<span class=\"ts\"/><span class=\"comment\">/* FIXME: What if resource_len &lt; OCT_REG_CR_OFF */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writeb\">writeb</a>(0, <a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#OCT_REG_CR_OFF\">OCT_REG_CR_OFF</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iounmap\">iounmap</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * SIIG serial cards have an PCI interface chip which also controls</span>", 
"<span class=\"comment\"> * the UART clocking frequency. Each UART can be clocked independently</span>", 
"<span class=\"comment\"> * (except cards equiped with 4 UARTs) and initial clocking settings</span>", 
"<span class=\"comment\"> * are stored in the EEPROM chip. It can cause problems because this</span>", 
"<span class=\"comment\"> * version of serial driver doesn't support differently clocked UART's</span>", 
"<span class=\"comment\"> * on single PCI card. To prevent this, initialization functions set</span>", 
"<span class=\"comment\"> * high frequency clocking for all UART's on given card. It is safe (I</span>", 
"<span class=\"comment\"> * hope) because it doesn't touch EEPROM settings to prevent conflicts</span>", 
"<span class=\"comment\"> * with other OSes (like M$ DOS).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  SIIG support added by Andrey Panin &lt;pazke@donpac.ru&gt;, 10/1999</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There is two family of SIIG serial cards with different PCI</span>", 
"<span class=\"comment\"> * interface chip and different configuration methods:</span>", 
"<span class=\"comment\"> *     - 10x cards have control registers in IO and/or memory space;</span>", 
"<span class=\"comment\"> *     - 20x cards have control registers in standard PCI configuration space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: all 10x cards have PCI device ids 0x10..</span>", 
"<span class=\"comment\"> *       all 20x cards have PCI device ids 0x20..</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are also Quartet Serial cards which use Oxford Semiconductor</span>", 
"<span class=\"comment\"> * 16954 quad UART PCI chip clocked by 18.432 MHz quartz.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: some SIIG cards are probed by the parport_serial object.</span>", 
];
xr_frag_insert('l/33/53834265d971d2c3e154dc9725183ee5741683.xr', __xr_tmp);
