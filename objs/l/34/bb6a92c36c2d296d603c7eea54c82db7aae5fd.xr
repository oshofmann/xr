var __xr_tmp = [
"<span class=\"ts\"/>return <a class=\"id\" href=\"#q\">q</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#sigqueue_free\">sigqueue_free</a>(struct <a class=\"id\" href=\"#sigqueue\">sigqueue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a> = &amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SIGQUEUE_PREALLOC\">SIGQUEUE_PREALLOC</a>));", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We must hold -&gt;siglock while testing q-&gt;list</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to serialize with collect_signal() or with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * __exit_signal()-&gt;flush_sigqueue().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#SIGQUEUE_PREALLOC\">SIGQUEUE_PREALLOC</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If it is queued it will be freed when dequeued,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * like the \"regular\" sigqueue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__sigqueue_free\">__sigqueue_free</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#send_sigqueue\">send_sigqueue</a>(struct <a class=\"id\" href=\"#sigqueue\">sigqueue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>, int <a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_signo\">si_signo</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sigpending\">sigpending</a> *<a class=\"id\" href=\"#pending\">pending</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SIGQUEUE_PREALLOC\">SIGQUEUE_PREALLOC</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#lock_task_sighand\">lock_task_sighand</a>(<a class=\"id\" href=\"#t\">t</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1; <span class=\"comment\">/* the signal is ignored */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#prepare_signal\">prepare_signal</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#t\">t</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If an SI_TIMER entry is already queue just increment</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the overrun count.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_code\">si_code</a> != <a class=\"id\" href=\"#SI_TIMER\">SI_TIMER</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_overrun\">si_overrun</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_overrun\">si_overrun</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#signalfd_notify\">signalfd_notify</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pending\">pending</a> = <a class=\"id\" href=\"#group\">group</a> ? &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#shared_pending\">shared_pending</a> : &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#pending\">pending</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#pending\">pending</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigaddset\">sigaddset</a>(&amp;<a class=\"id\" href=\"#pending\">pending</a>-><a class=\"id\" href=\"#signal\">signal</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#complete_signal\">complete_signal</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_task_sighand\">unlock_task_sighand</a>(<a class=\"id\" href=\"#t\">t</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<a class=\"id\" href=\"#ret\">ret</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Let a parent know about the death of a child.</span>", 
"<span class=\"comment\"> * For a stopped/continued status change, use do_notify_parent_cldstop instead.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns -1 if our parent ignored us and so we've switched to</span>", 
"<span class=\"comment\"> * self-reaping, or else @sig.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#do_notify_parent\">do_notify_parent</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#siginfo\">siginfo</a> <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sighand_struct\">sighand_struct</a> *<a class=\"id\" href=\"#psig\">psig</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sig\">sig</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#sig\">sig</a> == -1);", 
"", 
" <span class=\"ts\"/><span class=\"comment\">/* do_notify_parent_cldstop should have been called instead.  */</span>", 
" <span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#task_is_stopped_or_traced\">task_is_stopped_or_traced</a>(<a class=\"id\" href=\"#tsk\">tsk</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#task_ptrace\">task_ptrace</a>(<a class=\"id\" href=\"#tsk\">tsk</a>) &&", 
"<span class=\"ts\"/>       (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a> != <a class=\"id\" href=\"#tsk\">tsk</a> || !<a class=\"id\" href=\"#thread_group_empty\">thread_group_empty</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_signo\">si_signo</a> = <a class=\"id\" href=\"#sig\">sig</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_errno\">si_errno</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we are under tasklist_lock here so our parent is tied to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * us and cannot exit and release its namespace.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the only it can is to switch its nsproxy with sys_unshare,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bu uncharing pid namespaces is not allowed, so we'll always</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * see relevant namespace</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * write_lock() currently calls preempt_disable() which is the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * same as rcu_read_lock(), but according to Oleg, this is not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * correct to rely on this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_pid\">si_pid</a> = <a class=\"id\" href=\"#task_pid_nr_ns\">task_pid_nr_ns</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>-><a class=\"id\" href=\"#pid_ns\">pid_ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_uid\">si_uid</a> = <a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)-><a class=\"id\" href=\"#uid\">uid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_utime\">si_utime</a> = <a class=\"id\" href=\"#cputime_to_clock_t\">cputime_to_clock_t</a>(<a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#utime\">utime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#utime\">utime</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_stime\">si_stime</a> = <a class=\"id\" href=\"#cputime_to_clock_t\">cputime_to_clock_t</a>(<a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#stime\">stime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#stime\">stime</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_status\">si_status</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#exit_code\">exit_code</a> &amp; 0x7f;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#exit_code\">exit_code</a> &amp; 0x80)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_code\">si_code</a> = <a class=\"id\" href=\"#CLD_DUMPED\">CLD_DUMPED</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#exit_code\">exit_code</a> &amp; 0x7f)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_code\">si_code</a> = <a class=\"id\" href=\"#CLD_KILLED\">CLD_KILLED</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_code\">si_code</a> = <a class=\"id\" href=\"#CLD_EXITED\">CLD_EXITED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_status\">si_status</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#exit_code\">exit_code</a> >> 8;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#psig\">psig</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#sighand\">sighand</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#task_ptrace\">task_ptrace</a>(<a class=\"id\" href=\"#tsk\">tsk</a>) && <a class=\"id\" href=\"#sig\">sig</a> == <a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#action\">action</a>[<a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>-1].<a class=\"id\" href=\"#sa\">sa</a>.<a class=\"id\" href=\"#sa_handler\">sa_handler</a> == <a class=\"id\" href=\"#SIG_IGN\">SIG_IGN</a> ||", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#action\">action</a>[<a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>-1].<a class=\"id\" href=\"#sa\">sa</a>.<a class=\"id\" href=\"#sa_flags\">sa_flags</a> &amp; <a class=\"id\" href=\"#SA_NOCLDWAIT\">SA_NOCLDWAIT</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We are exiting and our parent doesn't care.  POSIX.1</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * defines special semantics for setting SIGCHLD to SIG_IGN</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * or setting the SA_NOCLDWAIT flag: we should be reaped</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * automatically and not left for our parent's wait4 call.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Rather than having the parent do it as a magic kind of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * signal handler, we just set this to tell do_exit that we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * can be cleaned up without becoming a zombie.  Note that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we still call __wake_up_parent in this case, because a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * blocked sys_wait4 might now return -ECHILD.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Whether we send SIGCHLD or not for SA_NOCLDWAIT</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is implementation-defined: we do (if you don't want</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it, just use SIG_IGN instead).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#exit_signal\">exit_signal</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#action\">action</a>[<a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>-1].<a class=\"id\" href=\"#sa\">sa</a>.<a class=\"id\" href=\"#sa_handler\">sa_handler</a> == <a class=\"id\" href=\"#SIG_IGN\">SIG_IGN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a> = -1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#valid_signal\">valid_signal</a>(<a class=\"id\" href=\"#sig\">sig</a>) && <a class=\"id\" href=\"#sig\">sig</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__group_send_sig_info\">__group_send_sig_info</a>(<a class=\"id\" href=\"#sig\">sig</a>, &amp;<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up_parent\">__wake_up_parent</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#do_notify_parent_cldstop\">do_notify_parent_cldstop</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#why\">why</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#siginfo\">siginfo</a> <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sighand_struct\">sighand_struct</a> *<a class=\"id\" href=\"#sighand\">sighand</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_ptrace\">task_ptrace</a>(<a class=\"id\" href=\"#tsk\">tsk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_signo\">si_signo</a> = <a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_errno\">si_errno</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * see comment in do_notify_parent() abot the following 3 lines</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_pid\">si_pid</a> = <a class=\"id\" href=\"#task_pid_nr_ns\">task_pid_nr_ns</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>-><a class=\"id\" href=\"#pid_ns\">pid_ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_uid\">si_uid</a> = <a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)-><a class=\"id\" href=\"#uid\">uid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_utime\">si_utime</a> = <a class=\"id\" href=\"#cputime_to_clock_t\">cputime_to_clock_t</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#utime\">utime</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_stime\">si_stime</a> = <a class=\"id\" href=\"#cputime_to_clock_t\">cputime_to_clock_t</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#stime\">stime</a>);", 
"", 
" <span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_code\">si_code</a> = <a class=\"id\" href=\"#why\">why</a>;", 
" <span class=\"ts\"/>switch (<a class=\"id\" href=\"#why\">why</a>) {", 
" <span class=\"ts\"/>case <a class=\"id\" href=\"#CLD_CONTINUED\">CLD_CONTINUED</a>:", 
" <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_status\">si_status</a> = <a class=\"id\" href=\"#SIGCONT\">SIGCONT</a>;", 
" <span class=\"ts\"/><span class=\"ts\"/>break;", 
" <span class=\"ts\"/>case <a class=\"id\" href=\"#CLD_STOPPED\">CLD_STOPPED</a>:", 
" <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_status\">si_status</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#group_exit_code\">group_exit_code</a> &amp; 0x7f;", 
" <span class=\"ts\"/><span class=\"ts\"/>break;", 
" <span class=\"ts\"/>case <a class=\"id\" href=\"#CLD_TRAPPED\">CLD_TRAPPED</a>:", 
" <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_status\">si_status</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#exit_code\">exit_code</a> &amp; 0x7f;", 
" <span class=\"ts\"/><span class=\"ts\"/>break;", 
" <span class=\"ts\"/>default:", 
" <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
" <span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sighand\">sighand</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#sighand\">sighand</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#action\">action</a>[<a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>-1].<a class=\"id\" href=\"#sa\">sa</a>.<a class=\"id\" href=\"#sa_handler\">sa_handler</a> != <a class=\"id\" href=\"#SIG_IGN\">SIG_IGN</a> &&", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#action\">action</a>[<a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>-1].<a class=\"id\" href=\"#sa\">sa</a>.<a class=\"id\" href=\"#sa_flags\">sa_flags</a> &amp; <a class=\"id\" href=\"#SA_NOCLDSTOP\">SA_NOCLDSTOP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__group_send_sig_info\">__group_send_sig_info</a>(<a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>, &amp;<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Even if SIGCHLD is not generated, we must wake up wait4 calls.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up_parent\">__wake_up_parent</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#may_ptrace_stop\">may_ptrace_stop</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#task_ptrace\">task_ptrace</a>(<a class=\"id\" href=\"#current\">current</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Are we in the middle of do_coredump?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If so and our tracer is also part of the coredump stopping</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is a deadlock situation, and pointless because our tracer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is dead so don't allow us to stop.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If SIGKILL was already sent before the caller unlocked</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * -&gt;siglock we must see -&gt;core_state != NULL. Otherwise it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is safe to enter schedule().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#core_state\">core_state</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a> == <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return nonzero if there is a SIGKILL that should be waking us up.</span>", 
"<span class=\"comment\"> * Called with the siglock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#sigkill_pending\">sigkill_pending</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>return<span class=\"ts\"/><a class=\"id\" href=\"#sigismember\">sigismember</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pending\">pending</a>.<a class=\"id\" href=\"#signal\">signal</a>, <a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sigismember\">sigismember</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#shared_pending\">shared_pending</a>.<a class=\"id\" href=\"#signal\">signal</a>, <a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This must be called with current-&gt;sighand-&gt;siglock held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This should be the path for all ptrace stops.</span>", 
"<span class=\"comment\"> * We always set current-&gt;last_siginfo while stopped here.</span>", 
"<span class=\"comment\"> * That makes it a way to test a stopped process for</span>", 
"<span class=\"comment\"> * being ptrace-stopped vs being job-control-stopped.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If we actually decide not to stop at all because the tracer</span>", 
"<span class=\"comment\"> * is gone, we keep current-&gt;exit_code unless clear_code.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ptrace_stop\">ptrace_stop</a>(int <a class=\"id\" href=\"#exit_code\">exit_code</a>, int <a class=\"id\" href=\"#clear_code\">clear_code</a>, <a class=\"id\" href=\"#siginfo_t\">siginfo_t</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arch_ptrace_stop_needed\">arch_ptrace_stop_needed</a>(<a class=\"id\" href=\"#exit_code\">exit_code</a>, <a class=\"id\" href=\"#info\">info</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The arch code has something special to do before a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * ptrace stop.  This is allowed to block, e.g. for faults</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * on user stack pages.  We can't keep the siglock while</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * calling arch_ptrace_stop, so we must release it now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * To preserve proper semantics, we must do this before</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * any signal bookkeeping like checking group_stop_count.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Meanwhile, a SIGKILL could come in before we retake the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * siglock.  That must prevent us from sleeping in TASK_TRACED.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * So after regaining the lock, we must check for SIGKILL.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_ptrace_stop\">arch_ptrace_stop</a>(<a class=\"id\" href=\"#exit_code\">exit_code</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sigkill_pending\">sigkill_pending</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If there is a group stop in progress,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we must participate in the bookkeeping.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#group_stop_count\">group_stop_count</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#group_stop_count\">group_stop_count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#last_siginfo\">last_siginfo</a> = <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#exit_code\">exit_code</a> = <a class=\"id\" href=\"#exit_code\">exit_code</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Let the debugger run.  */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_TRACED\">TASK_TRACED</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#may_ptrace_stop\">may_ptrace_stop</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_notify_parent_cldstop\">do_notify_parent_cldstop</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#CLD_TRAPPED\">CLD_TRAPPED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't want to allow preemption here, because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * sys_ptrace() needs this task to be inactive.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * XXX: implement read_unlock_no_resched().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_no_resched\">preempt_enable_no_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * By the time we got the lock, our tracer went away.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't drop the lock yet, another tracer may come.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#clear_code\">clear_code</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#exit_code\">exit_code</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * While in TASK_TRACED, we were considered \"frozen enough\".</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now that we woke up, it's crucial if we're supposed to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * frozen that we freeze now before running anything substantial.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#try_to_freeze\">try_to_freeze</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We are back.  Now reacquire the siglock before touching</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * last_siginfo, so that we are sure to have synchronized with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any signal-sending on another CPU that wants to examine it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#last_siginfo\">last_siginfo</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Queued signals ignored us while we were stopped for tracing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So check for any that we should take before resuming user mode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This sets TIF_SIGPENDING, but never clears it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#recalc_sigpending_tsk\">recalc_sigpending_tsk</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#ptrace_notify\">ptrace_notify</a>(int <a class=\"id\" href=\"#exit_code\">exit_code</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#siginfo_t\">siginfo_t</a> <a class=\"id\" href=\"#info\">info</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((<a class=\"id\" href=\"#exit_code\">exit_code</a> &amp; (0x7f | ~0xffff)) != <a class=\"id\" href=\"#SIGTRAP\">SIGTRAP</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#info\">info</a>, 0, sizeof <a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_signo\">si_signo</a> = <a class=\"id\" href=\"#SIGTRAP\">SIGTRAP</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_code\">si_code</a> = <a class=\"id\" href=\"#exit_code\">exit_code</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_pid\">si_pid</a> = <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_uid\">si_uid</a> = <a class=\"id\" href=\"#current_uid\">current_uid</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Let the debugger run.  */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptrace_stop\">ptrace_stop</a>(<a class=\"id\" href=\"#exit_code\">exit_code</a>, 1, &amp;<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This performs the stopping for SIGSTOP and other stop signals.</span>", 
"<span class=\"comment\"> * We have to stop all threads in the thread group.</span>", 
"<span class=\"comment\"> * Returns nonzero if we've actually stopped and released the siglock.</span>", 
"<span class=\"comment\"> * Returns zero if we didn't stop and still hold the siglock.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#do_signal_stop\">do_signal_stop</a>(int <a class=\"id\" href=\"#signr\">signr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *<a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#notify\">notify</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#group_stop_count\">group_stop_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SIGNAL_STOP_DEQUEUED\">SIGNAL_STOP_DEQUEUED</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#signal_group_exit\">signal_group_exit</a>(<a class=\"id\" href=\"#sig\">sig</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * There is no group stop already in progress.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We must initiate one now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#group_exit_code\">group_exit_code</a> = <a class=\"id\" href=\"#signr\">signr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#group_stop_count\">group_stop_count</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#next_thread\">next_thread</a>(<a class=\"id\" href=\"#current\">current</a>); <a class=\"id\" href=\"#t\">t</a> != <a class=\"id\" href=\"#current\">current</a>; <a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#next_thread\">next_thread</a>(<a class=\"id\" href=\"#t\">t</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Setting state to TASK_STOPPED for a group</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * stop is always done with the siglock held,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * so this check has no races.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_EXITING\">PF_EXITING</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#task_is_stopped_or_traced\">task_is_stopped_or_traced</a>(<a class=\"id\" href=\"#t\">t</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#group_stop_count\">group_stop_count</a>++;", 
];
xr_frag_insert('l/34/bb6a92c36c2d296d603c7eea54c82db7aae5fd.xr', __xr_tmp);
