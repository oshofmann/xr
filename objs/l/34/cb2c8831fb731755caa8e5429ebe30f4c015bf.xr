var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2008, 2009 Intel Corporation</span>", 
"<span class=\"comment\"> * Authors: Andi Kleen, Fengguang Wu</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This software may be redistributed and/or modified under the terms of</span>", 
"<span class=\"comment\"> * the GNU General Public License (\"GPL\") version 2 only as published by the</span>", 
"<span class=\"comment\"> * Free Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * High level machine check handler. Handles pages reported by the</span>", 
"<span class=\"comment\"> * hardware as being corrupted usually due to a 2bit ECC memory or cache</span>", 
"<span class=\"comment\"> * failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Handles page cache pages in various states.<span class=\"ts\"/>The tricky part</span>", 
"<span class=\"comment\"> * here is that we can access any page asynchronous to other VM</span>", 
"<span class=\"comment\"> * users, because memory failures could happen anytime and anywhere,</span>", 
"<span class=\"comment\"> * possibly violating some of their assumptions. This is why this code</span>", 
"<span class=\"comment\"> * has to be extremely careful. Generally it tries to use normal locking</span>", 
"<span class=\"comment\"> * rules, as in get the standard locks, even if that means the</span>", 
"<span class=\"comment\"> * error handling takes potentially a long time.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The operation to map back from RMAP chains to processes has to walk</span>", 
"<span class=\"comment\"> * the complete process list and has non linear complexity with the number</span>", 
"<span class=\"comment\"> * mappings. In short it can be quite slow. But since memory corruptions</span>", 
"<span class=\"comment\"> * are rare we hope to get away with this.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Notebook:</span>", 
"<span class=\"comment\"> * - hugetlb needs more code</span>", 
"<span class=\"comment\"> * - kcore/oldmem/vmcore/mem/kmem check for hwpoison pages</span>", 
"<span class=\"comment\"> * - pass bad pages to kdump next kernel</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEBUG\">DEBUG</a> 1<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* remove me in 2.6.34 */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#page\">page</a>-<a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>-<a class=\"id\" href=\"#page\">page</a>-<a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ksm\">ksm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rmap\">rmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#backing\">backing</a>-<a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#migrate\">migrate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#page\">page</a>-<a class=\"id\" href=\"#isolation\">isolation</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#suspend\">suspend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swapops\">swapops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hugetlb\">hugetlb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"int <a class=\"id\" href=\"#sysctl_memory_failure_early_kill\">sysctl_memory_failure_early_kill</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 0;", 
"", 
"int <a class=\"id\" href=\"#sysctl_memory_failure_recovery\">sysctl_memory_failure_recovery</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 1;", 
"", 
"<a class=\"id\" href=\"#atomic_long_t\">atomic_long_t</a> <a class=\"id\" href=\"#mce_bad_pages\">mce_bad_pages</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#ATOMIC_LONG_INIT\">ATOMIC_LONG_INIT</a>(0);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_HWPOISON_INJECT\">CONFIG_HWPOISON_INJECT</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_HWPOISON_INJECT_MODULE\">CONFIG_HWPOISON_INJECT_MODULE</a>)", 
"", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hwpoison_filter_enable\">hwpoison_filter_enable</a> = 0;", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hwpoison_filter_dev_major\">hwpoison_filter_dev_major</a> = ~0U;", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hwpoison_filter_dev_minor\">hwpoison_filter_dev_minor</a> = ~0U;", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#hwpoison_filter_flags_mask\">hwpoison_filter_flags_mask</a>;", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#hwpoison_filter_flags_value\">hwpoison_filter_flags_value</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hwpoison_filter_enable\">hwpoison_filter_enable</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hwpoison_filter_dev_major\">hwpoison_filter_dev_major</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hwpoison_filter_dev_minor\">hwpoison_filter_dev_minor</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hwpoison_filter_flags_mask\">hwpoison_filter_flags_mask</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hwpoison_filter_flags_value\">hwpoison_filter_flags_value</a>);", 
"", 
"static int <a class=\"id\" href=\"#hwpoison_filter_dev\">hwpoison_filter_dev</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwpoison_filter_dev_major\">hwpoison_filter_dev_major</a> == ~0U &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#hwpoison_filter_dev_minor\">hwpoison_filter_dev_minor</a> == ~0U)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page_mapping() does not accept slab page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageSlab\">PageSlab</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page_mapping\">page_mapping</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_dev\">s_dev</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwpoison_filter_dev_major\">hwpoison_filter_dev_major</a> != ~0U &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#hwpoison_filter_dev_major\">hwpoison_filter_dev_major</a> != <a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwpoison_filter_dev_minor\">hwpoison_filter_dev_minor</a> != ~0U &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#hwpoison_filter_dev_minor\">hwpoison_filter_dev_minor</a> != <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#hwpoison_filter_flags\">hwpoison_filter_flags</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hwpoison_filter_flags_mask\">hwpoison_filter_flags_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#stable_page_flags\">stable_page_flags</a>(<a class=\"id\" href=\"#p\">p</a>) &amp; <a class=\"id\" href=\"#hwpoison_filter_flags_mask\">hwpoison_filter_flags_mask</a>) ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#hwpoison_filter_flags_value\">hwpoison_filter_flags_value</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This allows stress tests to limit test scope to a collection of tasks</span>", 
"<span class=\"comment\"> * by putting them under some memcg. This prevents killing unrelated/important</span>", 
"<span class=\"comment\"> * processes such as /sbin/init. Note that the target task may share clean</span>", 
"<span class=\"comment\"> * pages with init (eg. libc text), which is harmless. If the target task</span>", 
"<span class=\"comment\"> * share _dirty_ pages with another task B, the test scheme must make sure B</span>", 
"<span class=\"comment\"> * is also included in the memcg. At last, due to race conditions this filter</span>", 
"<span class=\"comment\"> * can only guarantee that the page either belongs to the memcg tasks, or is</span>", 
"<span class=\"comment\"> * a freed page.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a><span class=\"ts\"/><a class=\"id\" href=\"#CONFIG_CGROUP_MEM_RES_CTLR_SWAP\">CONFIG_CGROUP_MEM_RES_CTLR_SWAP</a>", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#hwpoison_filter_memcg\">hwpoison_filter_memcg</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hwpoison_filter_memcg\">hwpoison_filter_memcg</a>);", 
"static int <a class=\"id\" href=\"#hwpoison_filter_task\">hwpoison_filter_task</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ino\">ino</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hwpoison_filter_memcg\">hwpoison_filter_memcg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#try_get_mem_cgroup_from_page\">try_get_mem_cgroup_from_page</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem\">mem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css\">css</a> = <a class=\"id\" href=\"#mem_cgroup_css\">mem_cgroup_css</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* root_mem_cgroup has NULL dentries */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#cgroup\">cgroup</a>-><a class=\"id\" href=\"#dentry\">dentry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ino\">ino</a> = <a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#cgroup\">cgroup</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css_put\">css_put</a>(<a class=\"id\" href=\"#css\">css</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ino\">ino</a> != <a class=\"id\" href=\"#hwpoison_filter_memcg\">hwpoison_filter_memcg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#else", 
"static int <a class=\"id\" href=\"#hwpoison_filter_task\">hwpoison_filter_task</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>) { return 0; }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"int <a class=\"id\" href=\"#hwpoison_filter\">hwpoison_filter</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hwpoison_filter_enable\">hwpoison_filter_enable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwpoison_filter_dev\">hwpoison_filter_dev</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwpoison_filter_flags\">hwpoison_filter_flags</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwpoison_filter_task\">hwpoison_filter_task</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#else", 
"int <a class=\"id\" href=\"#hwpoison_filter\">hwpoison_filter</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hwpoison_filter\">hwpoison_filter</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Send all the processes who have the page mapped an ``action optional''</span>", 
"<span class=\"comment\"> * signal.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#kill_proc_ao\">kill_proc_ao</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#trapno\">trapno</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#siginfo\">siginfo</a> <a class=\"id\" href=\"#si\">si</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"MCE %#lx: Killing %s:%d early due to hardware memory corruption\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>.<a class=\"id\" href=\"#si_signo\">si_signo</a> = <a class=\"id\" href=\"#SIGBUS\">SIGBUS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>.<a class=\"id\" href=\"#si_errno\">si_errno</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>.<a class=\"id\" href=\"#si_code\">si_code</a> = <a class=\"id\" href=\"#BUS_MCEERR_AO\">BUS_MCEERR_AO</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>.<a class=\"id\" href=\"#si_addr\">si_addr</a> = (void *)<a class=\"id\" href=\"#addr\">addr</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__ARCH_SI_TRAPNO\">__ARCH_SI_TRAPNO</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>.<a class=\"id\" href=\"#si_trapno\">si_trapno</a> = <a class=\"id\" href=\"#trapno\">trapno</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>.<a class=\"id\" href=\"#si_addr_lsb\">si_addr_lsb</a> = <a class=\"id\" href=\"#compound_order\">compound_order</a>(<a class=\"id\" href=\"#compound_head\">compound_head</a>(<a class=\"id\" href=\"#page\">page</a>)) + <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't use force here, it's convenient if the signal</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can be temporarily blocked.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This could cause a loop when the user sets SIGBUS</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to SIG_IGN, but hopefully noone will do that?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#send_sig_info\">send_sig_info</a>(<a class=\"id\" href=\"#SIGBUS\">SIGBUS</a>, &amp;<a class=\"id\" href=\"#si\">si</a>, <a class=\"id\" href=\"#t\">t</a>);  <span class=\"comment\">/* synchronous? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"MCE: Error sending signal to %s:%d: %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When a unknown page type is encountered drain as many buffers as possible</span>", 
"<span class=\"comment\"> * in the hope to turn the page into a LRU or free page, which we can handle.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#shake_page\">shake_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#access\">access</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageSlab\">PageSlab</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru_add_drain_all\">lru_add_drain_all</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drain_all_pages\">drain_all_pages</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#p\">p</a>) || <a class=\"id\" href=\"#is_free_buddy_page\">is_free_buddy_page</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only all shrink_slab here (which would also</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * shrink other caches) if access is not potentially fatal.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#access\">access</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#shrink_slab\">shrink_slab</a>(1000, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, 1000);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#p\">p</a>) == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#nr\">nr</a> &gt; 10);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#shake_page\">shake_page</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Kill all processes that have a poisoned page mapped and then isolate</span>", 
"<span class=\"comment\"> * the page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * General strategy:</span>", 
"<span class=\"comment\"> * Find all processes having the page mapped and kill them.</span>", 
"<span class=\"comment\"> * But we keep a page reference around so that the page is not</span>", 
"<span class=\"comment\"> * actually freed yet.</span>", 
"<span class=\"comment\"> * Then stash the page away</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There's no convenient way to get back to mapped processes</span>", 
"<span class=\"comment\"> * from the VMAs. So do a brute-force search over all</span>", 
"<span class=\"comment\"> * running processes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Remember that machine checks are not common (or rather</span>", 
"<span class=\"comment\"> * if they are common you have other problems), so this shouldn't</span>", 
"<span class=\"comment\"> * be a performance issue.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Also there are some races possible while we get from the</span>", 
"<span class=\"comment\"> * error detection to actually handle it.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#to_kill\">to_kill</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#nd\">nd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#addr_valid\">addr_valid</a>:1;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Failure handling: if we can't find or can't kill a process there's</span>", 
"<span class=\"comment\"> * not much we can do.<span class=\"ts\"/>We just print a message and ignore otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Schedule a process for later kill.</span>", 
"<span class=\"comment\"> * Uses GFP_ATOMIC allocations to avoid potential recursions in the VM.</span>", 
"<span class=\"comment\"> * TBD would GFP_NOIO be enough?</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#add_to_kill\">add_to_kill</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#to_kill\">to_kill</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#to_kill\">to_kill</a> **<a class=\"id\" href=\"#tkc\">tkc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#to_kill\">to_kill</a> *<a class=\"id\" href=\"#tk\">tk</a>;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#tkc\">tkc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tk\">tk</a> = *<a class=\"id\" href=\"#tkc\">tkc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tkc\">tkc</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tk\">tk</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#to_kill\">to_kill</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tk\">tk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"MCE: Out of memory while machine check handling\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tk\">tk</a>-><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#page_address_in_vma\">page_address_in_vma</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tk\">tk</a>-><a class=\"id\" href=\"#addr_valid\">addr_valid</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In theory we don't have to kill when the page was</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * munmaped. But it could be also a mremap. Since that's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * likely very rare kill anyways just out of paranoia, but use</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a SIGKILL because the error is not contained anymore.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tk\">tk</a>-><a class=\"id\" href=\"#addr\">addr</a> == -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"MCE: Unable to find user space address %lx in %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#p\">p</a>), <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#comm\">comm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tk\">tk</a>-><a class=\"id\" href=\"#addr_valid\">addr_valid</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tk\">tk</a>-><a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#tk\">tk</a>-><a class=\"id\" href=\"#nd\">nd</a>, <a class=\"id\" href=\"#to_kill\">to_kill</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Kill the processes that have been collected earlier.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Only do anything when DOIT is set, otherwise just free the list</span>", 
"<span class=\"comment\"> * (this is used for clean pages which do not need killing)</span>", 
"<span class=\"comment\"> * Also when FAIL is set do a force kill because something went</span>", 
"<span class=\"comment\"> * wrong earlier.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#kill_procs_ao\">kill_procs_ao</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#to_kill\">to_kill</a>, int <a class=\"id\" href=\"#doit\">doit</a>, int <a class=\"id\" href=\"#trapno\">trapno</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#fail\">fail</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#to_kill\">to_kill</a> *<a class=\"id\" href=\"#tk\">tk</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a> (<a class=\"id\" href=\"#tk\">tk</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#to_kill\">to_kill</a>, <a class=\"id\" href=\"#nd\">nd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#doit\">doit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * In case something went wrong with munmapping</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * make sure the process doesn't catch the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * signal and then access the memory. Just kill it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fail\">fail</a> || <a class=\"id\" href=\"#tk\">tk</a>-><a class=\"id\" href=\"#addr_valid\">addr_valid</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"MCE %#lx: forcibly killing %s:%d because of failure to unmap corrupted page\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#tk\">tk</a>-><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#tk\">tk</a>-><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_sig\">force_sig</a>(<a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>, <a class=\"id\" href=\"#tk\">tk</a>-><a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * In theory the process could have mapped</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * something else on the address in-between. We could</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * check for that, but we need to tell the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * process anyways.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#kill_proc_ao\">kill_proc_ao</a>(<a class=\"id\" href=\"#tk\">tk</a>-><a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#tk\">tk</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#trapno\">trapno</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#page\">page</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"MCE %#lx: Cannot send advisory machine check signal to %s:%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#tk\">tk</a>-><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#tk\">tk</a>-><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#tk\">tk</a>-><a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tk\">tk</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#task_early_kill\">task_early_kill</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_MCE_PROCESS\">PF_MCE_PROCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return !!(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_MCE_EARLY\">PF_MCE_EARLY</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sysctl_memory_failure_early_kill\">sysctl_memory_failure_early_kill</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Collect processes when the error hit an anonymous page.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#collect_procs_anon\">collect_procs_anon</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#to_kill\">to_kill</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#to_kill\">to_kill</a> **<a class=\"id\" href=\"#tkc\">tkc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#av\">av</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> = <a class=\"id\" href=\"#page_lock_anon_vma\">page_lock_anon_vma</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#av\">av</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)<span class=\"ts\"/><span class=\"comment\">/* Not actually mapped anymore */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_process\">for_each_process</a> (<a class=\"id\" href=\"#tsk\">tsk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a> *<a class=\"id\" href=\"#vmac\">vmac</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#task_early_kill\">task_early_kill</a>(<a class=\"id\" href=\"#tsk\">tsk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#vmac\">vmac</a>, &amp;<a class=\"id\" href=\"#av\">av</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#same_anon_vma\">same_anon_vma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vmac\">vmac</a>-><a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_mapped_in_vma\">page_mapped_in_vma</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a> == <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_to_kill\">add_to_kill</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#to_kill\">to_kill</a>, <a class=\"id\" href=\"#tkc\">tkc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_unlock_anon_vma\">page_unlock_anon_vma</a>(<a class=\"id\" href=\"#av\">av</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Collect processes when the error hit a file mapped page.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#collect_procs_file\">collect_procs_file</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#to_kill\">to_kill</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#to_kill\">to_kill</a> **<a class=\"id\" href=\"#tkc\">tkc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prio_tree_iter\">prio_tree_iter</a> <a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A note on the locking order between the two locks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We don't rely on this particular order.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If you have some other code that needs a different order</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * feel free to switch them around. Or add a reverse link</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from mm_struct to task_struct, then this could be all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * done without taking tasklist_lock and looping over all tasks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_process\">for_each_process</a>(<a class=\"id\" href=\"#tsk\">tsk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pgoff\">pgoff</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> << (<a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a> - <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#task_early_kill\">task_early_kill</a>(<a class=\"id\" href=\"#tsk\">tsk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma_prio_tree_foreach\">vma_prio_tree_foreach</a>(<a class=\"id\" href=\"#vma\">vma</a>, &amp;<a class=\"id\" href=\"#iter\">iter</a>, &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap\">i_mmap</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#pgoff\">pgoff</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Send early kill signal to tasks where a vma covers</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the page but the corrupted page is not necessarily</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * mapped it in its pte.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Assume applications who requested early kill want</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to be informed of all such data corruptions.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a> == <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_to_kill\">add_to_kill</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#to_kill\">to_kill</a>, <a class=\"id\" href=\"#tkc\">tkc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Collect the processes who have the corrupted page mapped to kill.</span>", 
"<span class=\"comment\"> * This is done in two steps for locking reasons.</span>", 
"<span class=\"comment\"> * First preallocate one tokill structure outside the spin locks,</span>", 
"<span class=\"comment\"> * so that we can kill at least one process reasonably reliable.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#collect_procs\">collect_procs</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#tokill\">tokill</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#to_kill\">to_kill</a> *<a class=\"id\" href=\"#tk\">tk</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tk\">tk</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#to_kill\">to_kill</a>), <a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tk\">tk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#collect_procs_anon\">collect_procs_anon</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#tokill\">tokill</a>, &amp;<a class=\"id\" href=\"#tk\">tk</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#collect_procs_file\">collect_procs_file</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#tokill\">tokill</a>, &amp;<a class=\"id\" href=\"#tk\">tk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tk\">tk</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Error handlers for various types of pages.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"enum <a class=\"id\" href=\"#outcome\">outcome</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IGNORED\">IGNORED</a>,<span class=\"ts\"/><span class=\"comment\">/* Error: cannot be handled */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FAILED\">FAILED</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Error: handling failed */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DELAYED\">DELAYED</a>,<span class=\"ts\"/><span class=\"comment\">/* Will be handled later */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RECOVERED\">RECOVERED</a>,<span class=\"ts\"/><span class=\"comment\">/* Successfully recovered */</span>", 
"};", 
"", 
"static const char *<a class=\"id\" href=\"#action_name\">action_name</a>[] = {", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#IGNORED\">IGNORED</a>] = \"Ignored\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#FAILED\">FAILED</a>] = \"Failed\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#DELAYED\">DELAYED</a>] = \"Delayed\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#RECOVERED\">RECOVERED</a>] = \"Recovered\",", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * XXX: It is possible that a page is isolated from LRU cache,</span>", 
"<span class=\"comment\"> * and then kept in swap cache or failed to remove from page cache.</span>", 
"<span class=\"comment\"> * The page count will stop it from being freed by unpoison.</span>", 
"<span class=\"comment\"> * Stress tests should be aware of this memory leak problem.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#delete_from_lru_cache\">delete_from_lru_cache</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#isolate_lru_page\">isolate_lru_page</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Clear sensible page flags, so that the buddy system won't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * complain when the page is unpoison-and-freed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageActive\">ClearPageActive</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageUnevictable\">ClearPageUnevictable</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * drop the page count elevated by isolate_lru_page()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Error hit kernel page.</span>", 
"<span class=\"comment\"> * Do nothing, try to be lucky and not touch this instead. For a few cases we</span>", 
"<span class=\"comment\"> * could be more sophisticated.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#me_kernel\">me_kernel</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#IGNORED\">IGNORED</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Page in unknown state. Do nothing.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#me_unknown\">me_unknown</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"MCE %#lx: Unknown page state\\n\", <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Clean (or cleaned) page cache page.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#me_pagecache_clean\">me_pagecache_clean</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delete_from_lru_cache\">delete_from_lru_cache</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For anonymous pages we're done the only reference left</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * should be the one m_f() holds.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RECOVERED\">RECOVERED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now truncate the page in the page cache. This is really</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * more like a \"temporary hole punch\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't do this for block devices when someone else</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * has a reference, because it could be file system metadata</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and that's not safe to truncate.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page_mapping\">page_mapping</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mapping\">mapping</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Page has been teared down in the meanwhile</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Truncation is a bit tricky. Enable it per file system for now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Open: to take i_mutex or not for this? Right now we don't.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#error_remove_page\">error_remove_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#error_remove_page\">error_remove_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"MCE %#lx: Failed to punch page: %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#page_has_private\">page_has_private</a>(<a class=\"id\" href=\"#p\">p</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#try_to_release_page\">try_to_release_page</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"MCE %#lx: failed to release buffers\\n\", <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#RECOVERED\">RECOVERED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the file system doesn't support it just invalidate</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This fails on dirty or anything with private pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#invalidate_inode_page\">invalidate_inode_page</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#RECOVERED\">RECOVERED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"MCE %#lx: Failed to invalidate\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Dirty cache page page</span>", 
"<span class=\"comment\"> * Issues: when the error hit a hole page the error is not properly</span>", 
"<span class=\"comment\"> * propagated.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#me_pagecache_dirty\">me_pagecache_dirty</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page_mapping\">page_mapping</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SetPageError\">SetPageError</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* TBD: print more information about the file. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * IO error will be reported by write(), fsync(), etc.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * who check the mapping.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This way the application knows that something went</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * wrong with its dirty file data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * There's one open issue:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The EIO will be only reported on the next IO</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * operation and then cleared through the IO map.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Normally Linux has two mechanisms to pass IO error</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * first through the AS_EIO flag in the address space</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and then through the PageError flag in the page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Since we drop pages on memory failure handling the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * only mechanism open to use is through AS_AIO.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This has the disadvantage that it gets cleared on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the first operation that returns an error, while</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the PageError bit is more sticky and only cleared</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * when the page is reread or dropped.  If an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * application assumes it will always get error on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fsync, but does other operations on the fd before</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and the page is dropped inbetween then the error</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will not be properly reported.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This can already happen even without hwpoisoned</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pages: first on metadata IO errors (which only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * report through AS_EIO) or when the page is dropped</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * at the wrong time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * So right now we assume that the application DTRT on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the first EIO, but we're not worse than other parts</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of the kernel.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping_set_error\">mapping_set_error</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#EIO\">EIO</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#me_pagecache_clean\">me_pagecache_clean</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Clean and dirty swap cache.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Dirty swap cache page is tricky to handle. The page could live both in page</span>", 
"<span class=\"comment\"> * cache and swap cache(ie. page is freshly swapped in). So it could be</span>", 
"<span class=\"comment\"> * referenced concurrently by 2 types of PTEs:</span>", 
"<span class=\"comment\"> * normal PTEs and swap PTEs. We try to handle them consistently by calling</span>", 
"<span class=\"comment\"> * try_to_unmap(TTU_IGNORE_HWPOISON) to convert the normal PTEs to swap PTEs,</span>", 
"<span class=\"comment\"> * and then</span>", 
"<span class=\"comment\"> *      - clear dirty bit to prevent IO</span>", 
"<span class=\"comment\"> *      - remove from LRU</span>", 
"<span class=\"comment\"> *      - but keep in the swap cache, so that when we return to it on</span>", 
"<span class=\"comment\"> *        a later page fault, we know the application is accessing</span>", 
"<span class=\"comment\"> *        corrupted data and shall be killed (we installed simple</span>", 
"<span class=\"comment\"> *        interception code in do_swap_page to catch it).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Clean swap cache pages can be directly isolated. A later page fault will</span>", 
"<span class=\"comment\"> * bring in the known good data from disk.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#me_swapcache_dirty\">me_swapcache_dirty</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ClearPageDirty\">ClearPageDirty</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Trigger EIO in shmem: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ClearPageUptodate\">ClearPageUptodate</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#delete_from_lru_cache\">delete_from_lru_cache</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#DELAYED\">DELAYED</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#me_swapcache_clean\">me_swapcache_clean</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delete_from_swap_cache\">delete_from_swap_cache</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#delete_from_lru_cache\">delete_from_lru_cache</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RECOVERED\">RECOVERED</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Huge pages. Needs work.</span>", 
"<span class=\"comment\"> * Issues:</span>", 
"<span class=\"comment\"> * - Error on hugepage is contained in hugepage unit (not in raw page unit.)</span>", 
"<span class=\"comment\"> *   To narrow down kill region to one page, we need to break up pmd.</span>", 
"<span class=\"comment\"> * - To support soft-offlining for hugepage, we need to support hugepage</span>", 
"<span class=\"comment\"> *   migration.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#me_huge_page\">me_huge_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#hpage\">hpage</a> = <a class=\"id\" href=\"#compound_head\">compound_head</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can safely recover from error on free or reserved (i.e.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not in-use) hugepage by dequeuing it from freelist.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To check whether a hugepage is in-use or not, we can't use</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page-&gt;lru because it can be used in other hugepage operations,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * such as __unmap_hugepage_range() and gather_surplus_pages().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So instead we use page_mapping() and PageAnon().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We assume that this function is called with page lock held,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so there is no race between isolation and mapping/unmapping.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#page_mapping\">page_mapping</a>(<a class=\"id\" href=\"#hpage\">hpage</a>) || <a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#hpage\">hpage</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__isolate_hwpoisoned_huge_page\">__isolate_hwpoisoned_huge_page</a>(<a class=\"id\" href=\"#hpage\">hpage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RECOVERED\">RECOVERED</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#DELAYED\">DELAYED</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Various page states we can handle.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A page state is defined by its current page-&gt;flags bits.</span>", 
"<span class=\"comment\"> * The table matches them in order and calls the right handler.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is quite tricky because we can access page at any time</span>", 
"<span class=\"comment\"> * in its live cycle, so all accesses have to be extremly careful.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is not complete. More states could be added.</span>", 
"<span class=\"comment\"> * For any missing state don't attempt recovery.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dirty\">dirty</a><span class=\"ts\"/><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#PG_dirty\">PG_dirty</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sc\">sc</a><span class=\"ts\"/><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#PG_swapcache\">PG_swapcache</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#unevict\">unevict</a><span class=\"ts\"/><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#PG_unevictable\">PG_unevictable</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mlock\">mlock</a><span class=\"ts\"/><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#PG_mlocked\">PG_mlocked</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#writeback\">writeback</a><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#PG_writeback\">PG_writeback</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lru\">lru</a><span class=\"ts\"/><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#PG_lru\">PG_lru</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#swapbacked\">swapbacked</a><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#PG_swapbacked\">PG_swapbacked</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#head\">head</a><span class=\"ts\"/><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#PG_head\">PG_head</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#tail\">tail</a><span class=\"ts\"/><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#PG_tail\">PG_tail</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#compound\">compound</a><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#PG_compound\">PG_compound</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#slab\">slab</a><span class=\"ts\"/><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#PG_slab\">PG_slab</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#reserved\">reserved</a><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#PG_reserved\">PG_reserved</a>)", 
"", 
"static struct <a class=\"id\" href=\"#page_state\">page_state</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#msg\">msg</a>;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#action\">action</a>)(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"} <a class=\"id\" href=\"#error_states\">error_states</a>[] = {", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#reserved\">reserved</a>,<span class=\"ts\"/><a class=\"id\" href=\"#reserved\">reserved</a>,<span class=\"ts\"/>\"reserved kernel\",<span class=\"ts\"/><a class=\"id\" href=\"#me_kernel\">me_kernel</a> },", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * free pages are specially detected outside this table:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PG_buddy pages only make a small fraction of all free pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Could in theory check if slab page is free or if we can drop</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * currently unused objects without touching them. But just</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * treat it as standard kernel for now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#slab\">slab</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab\">slab</a>,<span class=\"ts\"/><span class=\"ts\"/>\"kernel slab\",<span class=\"ts\"/><a class=\"id\" href=\"#me_kernel\">me_kernel</a> },", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PAGEFLAGS_EXTENDED\">CONFIG_PAGEFLAGS_EXTENDED</a>", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#head\">head</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>,<span class=\"ts\"/><span class=\"ts\"/>\"huge\",<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#me_huge_page\">me_huge_page</a> },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#tail\">tail</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a>,<span class=\"ts\"/><span class=\"ts\"/>\"huge\",<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#me_huge_page\">me_huge_page</a> },", 
"#else", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#compound\">compound</a>,<span class=\"ts\"/><a class=\"id\" href=\"#compound\">compound</a>,<span class=\"ts\"/>\"huge\",<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#me_huge_page\">me_huge_page</a> },", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#sc\">sc</a>|<a class=\"id\" href=\"#dirty\">dirty</a>,<span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>|<a class=\"id\" href=\"#dirty\">dirty</a>,<span class=\"ts\"/>\"swapcache\",<span class=\"ts\"/><a class=\"id\" href=\"#me_swapcache_dirty\">me_swapcache_dirty</a> },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#sc\">sc</a>|<a class=\"id\" href=\"#dirty\">dirty</a>,<span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>,<span class=\"ts\"/><span class=\"ts\"/>\"swapcache\",<span class=\"ts\"/><a class=\"id\" href=\"#me_swapcache_clean\">me_swapcache_clean</a> },", 
"", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#unevict\">unevict</a>|<a class=\"id\" href=\"#dirty\">dirty</a>, <a class=\"id\" href=\"#unevict\">unevict</a>|<a class=\"id\" href=\"#dirty\">dirty</a>,<span class=\"ts\"/>\"unevictable LRU\", <a class=\"id\" href=\"#me_pagecache_dirty\">me_pagecache_dirty</a>},", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#unevict\">unevict</a>,<span class=\"ts\"/><a class=\"id\" href=\"#unevict\">unevict</a>,<span class=\"ts\"/>\"unevictable LRU\", <a class=\"id\" href=\"#me_pagecache_clean\">me_pagecache_clean</a>},", 
"", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#mlock\">mlock</a>|<a class=\"id\" href=\"#dirty\">dirty</a>,<span class=\"ts\"/><a class=\"id\" href=\"#mlock\">mlock</a>|<a class=\"id\" href=\"#dirty\">dirty</a>,<span class=\"ts\"/>\"mlocked LRU\",<span class=\"ts\"/><a class=\"id\" href=\"#me_pagecache_dirty\">me_pagecache_dirty</a> },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#mlock\">mlock</a>,<span class=\"ts\"/><a class=\"id\" href=\"#mlock\">mlock</a>,<span class=\"ts\"/><span class=\"ts\"/>\"mlocked LRU\",<span class=\"ts\"/><a class=\"id\" href=\"#me_pagecache_clean\">me_pagecache_clean</a> },", 
"", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#lru\">lru</a>|<a class=\"id\" href=\"#dirty\">dirty</a>,<span class=\"ts\"/><a class=\"id\" href=\"#lru\">lru</a>|<a class=\"id\" href=\"#dirty\">dirty</a>,<span class=\"ts\"/>\"LRU\",<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#me_pagecache_dirty\">me_pagecache_dirty</a> },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#lru\">lru</a>|<a class=\"id\" href=\"#dirty\">dirty</a>,<span class=\"ts\"/><a class=\"id\" href=\"#lru\">lru</a>,<span class=\"ts\"/><span class=\"ts\"/>\"clean LRU\",<span class=\"ts\"/><a class=\"id\" href=\"#me_pagecache_clean\">me_pagecache_clean</a> },", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Catchall entry: must be at end.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>{ 0,<span class=\"ts\"/><span class=\"ts\"/>0,<span class=\"ts\"/><span class=\"ts\"/>\"unknown page state\",<span class=\"ts\"/><a class=\"id\" href=\"#me_unknown\">me_unknown</a> },", 
"};", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#dirty\">dirty</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#sc\">sc</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#unevict\">unevict</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#mlock\">mlock</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#writeback\">writeback</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#lru\">lru</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#swapbacked\">swapbacked</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#head\">head</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#tail\">tail</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#compound\">compound</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#slab\">slab</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#reserved\">reserved</a>", 
"", 
"static void <a class=\"id\" href=\"#action_result\">action_result</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, char *<a class=\"id\" href=\"#msg\">msg</a>, int <a class=\"id\" href=\"#result\">result</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"MCE %#lx: %s%s page recovery: %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#page\">page</a>) ? \"dirty \" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#action_name\">action_name</a>[<a class=\"id\" href=\"#result\">result</a>]);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#page_action\">page_action</a>(struct <a class=\"id\" href=\"#page_state\">page_state</a> *<a class=\"id\" href=\"#ps\">ps</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#ps\">ps</a>-><a class=\"id\" href=\"#action\">action</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#action_result\">action_result</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#ps\">ps</a>-><a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#result\">result</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#p\">p</a>) - 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ps\">ps</a>-><a class=\"id\" href=\"#action\">action</a> == <a class=\"id\" href=\"#me_swapcache_dirty\">me_swapcache_dirty</a> && <a class=\"id\" href=\"#result\">result</a> == <a class=\"id\" href=\"#DELAYED\">DELAYED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"MCE %#lx: %s page still referenced by %d users\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#ps\">ps</a>-><a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Could do more checks here if page looks ok */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Could adjust zone counters here to correct for the missing page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#result\">result</a> == <a class=\"id\" href=\"#RECOVERED\">RECOVERED</a> || <a class=\"id\" href=\"#result\">result</a> == <a class=\"id\" href=\"#DELAYED\">DELAYED</a>) ? 0 : -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#N_UNMAP_TRIES\">N_UNMAP_TRIES</a> 5", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Do all that is necessary to remove user space mappings. Unmap</span>", 
"<span class=\"comment\"> * the pages and send SIGBUS to the processes if the data was dirty.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#hwpoison_user_mappings\">hwpoison_user_mappings</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#trapno\">trapno</a>)", 
"{", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#ttu_flags\">ttu_flags</a> <a class=\"id\" href=\"#ttu\">ttu</a> = <a class=\"id\" href=\"#TTU_UNMAP\">TTU_UNMAP</a> | <a class=\"id\" href=\"#TTU_IGNORE_MLOCK\">TTU_IGNORE_MLOCK</a> | <a class=\"id\" href=\"#TTU_IGNORE_ACCESS\">TTU_IGNORE_ACCESS</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#tokill\">tokill</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#kill\">kill</a> = 1;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#hpage\">hpage</a> = <a class=\"id\" href=\"#compound_head\">compound_head</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageReserved\">PageReserved</a>(<a class=\"id\" href=\"#p\">p</a>) || <a class=\"id\" href=\"#PageSlab\">PageSlab</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SWAP_SUCCESS\">SWAP_SUCCESS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This check implies we don't kill processes if their pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are in the swap cache early. Those are always late kills.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_mapped\">page_mapped</a>(<a class=\"id\" href=\"#hpage\">hpage</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SWAP_SUCCESS\">SWAP_SUCCESS</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageKsm\">PageKsm</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SWAP_FAIL\">SWAP_FAIL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"MCE %#lx: keeping poisoned page in swap cache\\n\", <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ttu\">ttu</a> |= <a class=\"id\" href=\"#TTU_IGNORE_HWPOISON\">TTU_IGNORE_HWPOISON</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Propagate the dirty bit from PTEs to struct page first, because we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need this to decide if we should kill or just drop the page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * XXX: the dirty test could be racy: set_page_dirty() may not always</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be called inside page lock (it's recommended but not enforced).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page_mapping\">page_mapping</a>(<a class=\"id\" href=\"#hpage\">hpage</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#hpage\">hpage</a>) && <a class=\"id\" href=\"#mapping\">mapping</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#mapping_cap_writeback_dirty\">mapping_cap_writeback_dirty</a>(<a class=\"id\" href=\"#mapping\">mapping</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_mkclean\">page_mkclean</a>(<a class=\"id\" href=\"#hpage\">hpage</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageDirty\">SetPageDirty</a>(<a class=\"id\" href=\"#hpage\">hpage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill\">kill</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ttu\">ttu</a> |= <a class=\"id\" href=\"#TTU_IGNORE_HWPOISON\">TTU_IGNORE_HWPOISON</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/>\"MCE %#lx: corrupted page was clean: dropped without side effects\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First collect all the processes that have the page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mapped in dirty form.  This has to be done before try_to_unmap,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because ttu takes the rmap data structures down.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Error handling: We ignore errors here because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there's nothing that can be done.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kill\">kill</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#collect_procs\">collect_procs</a>(<a class=\"id\" href=\"#hpage\">hpage</a>, &amp;<a class=\"id\" href=\"#tokill\">tokill</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * try_to_unmap can fail temporarily due to races.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Try a few times (RED-PEN better strategy?)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#N_UNMAP_TRIES\">N_UNMAP_TRIES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#try_to_unmap\">try_to_unmap</a>(<a class=\"id\" href=\"#hpage\">hpage</a>, <a class=\"id\" href=\"#ttu\">ttu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#SWAP_SUCCESS\">SWAP_SUCCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"MCE %#lx: try_to_unmap retry needed %d\\n\", <a class=\"id\" href=\"#pfn\">pfn</a>,  <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != <a class=\"id\" href=\"#SWAP_SUCCESS\">SWAP_SUCCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"MCE %#lx: failed to unmap page (mapcount=%d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#page_mapcount\">page_mapcount</a>(<a class=\"id\" href=\"#hpage\">hpage</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now that the dirty bit has been propagated to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * struct page and all unmaps done we can decide if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * killing is needed or not.  Only kill when the page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * was dirty, otherwise the tokill list is merely</span>", 
];
xr_frag_insert('l/34/cb2c8831fb731755caa8e5429ebe30f4c015bf.xr', __xr_tmp);
