var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/lib/cmdline.c</span>", 
"<span class=\"comment\"> * Helper functions generally used for parsing kernel command line</span>", 
"<span class=\"comment\"> * and module options.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Code and copyrights come from init/main.c and arch/i386/kernel/setup.c.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This source code is licensed under the GNU General Public License,</span>", 
"<span class=\"comment\"> * Version 2.  See the file COPYING for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * GNU Indent formatting options for this file: -kr -i8 -npsl -pcs</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If a hyphen was found in get_option, this will handle the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>range of numbers, M-N.  This will expand the range and insert</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the values[M, M+1, ..., N] into the ints array in get_options.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#get_range\">get_range</a>(char **<a class=\"id\" href=\"#str\">str</a>, int *<a class=\"id\" href=\"#pint\">pint</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#inc_counter\">inc_counter</a>, <a class=\"id\" href=\"#upper_range\">upper_range</a>;", 
"", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#str\">str</a>)++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#upper_range\">upper_range</a> = <a class=\"id\" href=\"#simple_strtol\">simple_strtol</a>((*<a class=\"id\" href=\"#str\">str</a>), <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_counter\">inc_counter</a> = <a class=\"id\" href=\"#upper_range\">upper_range</a> - *<a class=\"id\" href=\"#pint\">pint</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#x\">x</a> = *<a class=\"id\" href=\"#pint\">pint</a>; <a class=\"id\" href=\"#x\">x</a> &lt; <a class=\"id\" href=\"#upper_range\">upper_range</a>; <a class=\"id\" href=\"#x\">x</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pint\">pint</a>++ = <a class=\"id\" href=\"#x\">x</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inc_counter\">inc_counter</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>get_option - Parse integer from an option string</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@str: option string</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pint: (output) integer value parsed from @str</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Read an int from an option string; if available accept a subsequent</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>comma as well.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return values:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 - no int in string</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1 - int found, no subsequent comma</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2 - int found including a subsequent comma</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>3 - hyphen found to denote a range</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#get_option\">get_option</a> (char **<a class=\"id\" href=\"#str\">str</a>, int *<a class=\"id\" href=\"#pint\">pint</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#cur\">cur</a> = *<a class=\"id\" href=\"#str\">str</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cur\">cur</a> || !(*<a class=\"id\" href=\"#cur\">cur</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pint\">pint</a> = <a class=\"id\" href=\"#simple_strtol\">simple_strtol</a> (<a class=\"id\" href=\"#cur\">cur</a>, <a class=\"id\" href=\"#str\">str</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a> == *<a class=\"id\" href=\"#str\">str</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (**<a class=\"id\" href=\"#str\">str</a> == ',') {", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#str\">str</a>)++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 2;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (**<a class=\"id\" href=\"#str\">str</a> == '-')", 
"<span class=\"ts\"/><span class=\"ts\"/>return 3;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>get_options - Parse a string into a list of integers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@str: String to be parsed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nints: size of integer array</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ints: integer array</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function parses a string containing a comma-separated</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>list of integers, a hyphen-separated range of _positive_ integers,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or a combination of both.  The parse halts when the array is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>full, or when no more numbers can be retrieved from the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>string.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return value is the character in the string which caused</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the parse to end (typically a null terminator, if @str is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>completely parseable).</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"char *<a class=\"id\" href=\"#get_options\">get_options</a>(const char *<a class=\"id\" href=\"#str\">str</a>, int <a class=\"id\" href=\"#nints\">nints</a>, int *<a class=\"id\" href=\"#ints\">ints</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#i\">i</a> = 1;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nints\">nints</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#get_option\">get_option</a> ((char **)&amp;<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#ints\">ints</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> == 3) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#range_nums\">range_nums</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#range_nums\">range_nums</a> = <a class=\"id\" href=\"#get_range\">get_range</a>((char **)&amp;<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#ints\">ints</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#range_nums\">range_nums</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Decrement the result by one to leave out the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * last number in the range.  The next iteration</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * will handle the upper number in the range</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> += (<a class=\"id\" href=\"#range_nums\">range_nums</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ints\">ints</a>[0] = <a class=\"id\" href=\"#i\">i</a> - 1;", 
"<span class=\"ts\"/>return (char *)<a class=\"id\" href=\"#str\">str</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>memparse - parse a string with mem suffixes into a number</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ptr: Where parse begins</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@retptr: (output) Optional pointer to next char after parse completes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Parses a string into a number.  The number stored at @ptr is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>potentially suffixed with %K (for kilobytes, or 1024 bytes),</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%M (for megabytes, or 1048576 bytes), or %G (for gigabytes, or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1073741824).  If the number is suffixed with K, M, or G, then</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the return value is the number multiplied by one kilobyte, one</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>megabyte, or one gigabyte, respectively.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"unsigned long long <a class=\"id\" href=\"#memparse\">memparse</a>(const char *<a class=\"id\" href=\"#ptr\">ptr</a>, char **<a class=\"id\" href=\"#retptr\">retptr</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#endptr\">endptr</a>;<span class=\"ts\"/><span class=\"comment\">/* local pointer to end of parsed string */</span>", 
"", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#simple_strtoull\">simple_strtoull</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, &amp;<a class=\"id\" href=\"#endptr\">endptr</a>, 0);", 
"", 
"<span class=\"ts\"/>switch (*<a class=\"id\" href=\"#endptr\">endptr</a>) {", 
"<span class=\"ts\"/>case 'G':", 
"<span class=\"ts\"/>case 'g':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> <<= 10;", 
"<span class=\"ts\"/>case 'M':", 
"<span class=\"ts\"/>case 'm':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> <<= 10;", 
"<span class=\"ts\"/>case 'K':", 
"<span class=\"ts\"/>case 'k':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> <<= 10;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#endptr\">endptr</a>++;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retptr\">retptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#retptr\">retptr</a> = <a class=\"id\" href=\"#endptr\">endptr</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#memparse\">memparse</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#get_option\">get_option</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#get_options\">get_options</a>);", 
];
xr_frag_insert('l/35/18e6db5071335ea8c137427f973f3d97509a61.xr', __xr_tmp);
