var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  NMI watchdog support on APIC systems</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Started by Ingo Molnar &lt;mingo@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Fixes:</span>", 
"<span class=\"comment\"> *  Mikael Pettersson<span class=\"ts\"/>: AMD K7 support for local APIC NMI watchdog.</span>", 
"<span class=\"comment\"> *  Mikael Pettersson<span class=\"ts\"/>: Power Management for local APIC NMI watchdog.</span>", 
"<span class=\"comment\"> *  Mikael Pettersson<span class=\"ts\"/>: Pentium 4 support for local APIC NMI watchdog.</span>", 
"<span class=\"comment\"> *  Pavel Machek and</span>", 
"<span class=\"comment\"> *  Mikael Pettersson<span class=\"ts\"/>: PM converted to driver model. Disable/enable API.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apic\">apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nmi\">nmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysdev\">sysdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysctl\">sysctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kprobes\">kprobes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpumask\">cpumask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel_stat\">kernel_stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdebug\">kdebug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#i8259\">i8259</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io_apic\">io_apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#proto\">proto</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mce\">mce</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mach_traps\">mach_traps</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"int <a class=\"id\" href=\"#unknown_nmi_panic\">unknown_nmi_panic</a>;", 
"int <a class=\"id\" href=\"#nmi_watchdog_enabled\">nmi_watchdog_enabled</a>;", 
"", 
"<span class=\"comment\">/* For reliability, we're prepared to waste bits here. */</span>", 
"static <a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#backtrace_mask\">backtrace_mask</a>, <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>) <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/* nmi_active:</span>", 
"<span class=\"comment\"> * &gt;0: the lapic NMI watchdog is active, but can be disabled</span>", 
"<span class=\"comment\"> * &lt;0: the lapic NMI watchdog has not been set up, and cannot</span>", 
"<span class=\"comment\"> *     be enabled</span>", 
"<span class=\"comment\"> *  0: the lapic NMI watchdog is disabled, but can be enabled</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#nmi_active\">nmi_active</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0);<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* oprofile uses this */</span>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nmi_active\">nmi_active</a>);", 
"", 
"unsigned int <a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a> = <a class=\"id\" href=\"#NMI_NONE\">NMI_NONE</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a>);", 
"", 
"static int <a class=\"id\" href=\"#panic_on_timeout\">panic_on_timeout</a>;", 
"", 
"static unsigned int <a class=\"id\" href=\"#nmi_hz\">nmi_hz</a> = <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(short, <a class=\"id\" href=\"#wd_enabled\">wd_enabled</a>);", 
"static int <a class=\"id\" href=\"#endflag\">endflag</a> <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#get_nmi_count\">get_nmi_count</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#irq_stat\">irq_stat</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#__nmi_count\">__nmi_count</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mce_in_progress\">mce_in_progress</a>(void)", 
"{", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_MCE\">CONFIG_X86_MCE</a>)", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#mce_entry\">mce_entry</a>) &gt; 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Take the local apic timer and PIT/HPET into account. We don't</span>", 
"<span class=\"comment\"> * know which one is active, when we have highres/dyntick on</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#get_timer_irqs\">get_timer_irqs</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#irq_stat\">irq_stat</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#apic_timer_irqs\">apic_timer_irqs</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#irq_stat\">irq_stat</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#irq0_irqs\">irq0_irqs</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The performance counters used by NMI_LOCAL_APIC don't trigger when</span>", 
"<span class=\"comment\"> * the CPU is idle. To make sure the NMI watchdog really ticks on all</span>", 
"<span class=\"comment\"> * CPUs during the test make them busy.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#nmi_cpu_busy\">nmi_cpu_busy</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable_in_hardirq\">local_irq_enable_in_hardirq</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Intentionally don't use cpu_relax here. This is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to make sure that the performance counter really ticks,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * even if there is a simulator or similar that catches the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pause instruction. On a real HT machine this is fine because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * all other CPUs are busy with \"useless\" delay loops and don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * care if they get somewhat less cycles.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#endflag\">endflag</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb\">mb</a>();", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#report_broken_nmi\">report_broken_nmi</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, unsigned int *<a class=\"id\" href=\"#prev_nmi_count\">prev_nmi_count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"WARNING: CPU#%d: NMI appears to be stuck (%d->%d)!\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#prev_nmi_count\">prev_nmi_count</a>[<a class=\"id\" href=\"#cpu\">cpu</a>], <a class=\"id\" href=\"#get_nmi_count\">get_nmi_count</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"Please report this to bugzilla.kernel.org,\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"and attach the output of the 'dmesg' command.\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#wd_enabled\">wd_enabled</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#nmi_active\">nmi_active</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__acpi_nmi_disable\">__acpi_nmi_disable</a>(void *<a class=\"id\" href=\"#__unused\">__unused</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVT0\">APIC_LVT0</a>, <a class=\"id\" href=\"#APIC_DM_NMI\">APIC_DM_NMI</a> | <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#check_nmi_watchdog\">check_nmi_watchdog</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int *<a class=\"id\" href=\"#prev_nmi_count\">prev_nmi_count</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nmi_watchdog_active\">nmi_watchdog_active</a>() || !<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nmi_active\">nmi_active</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev_nmi_count\">prev_nmi_count</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> * sizeof(int), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#prev_nmi_count\">prev_nmi_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Testing NMI watchdog ... \");", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a> == <a class=\"id\" href=\"#NMI_LOCAL_APIC\">NMI_LOCAL_APIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function\">smp_call_function</a>(<a class=\"id\" href=\"#nmi_cpu_busy\">nmi_cpu_busy</a>, (void *)&amp;<a class=\"id\" href=\"#endflag\">endflag</a>, 0);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev_nmi_count\">prev_nmi_count</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = <a class=\"id\" href=\"#get_nmi_count\">get_nmi_count</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdelay\">mdelay</a>((20 * 1000) / <a class=\"id\" href=\"#nmi_hz\">nmi_hz</a>); <span class=\"comment\">/* wait 20 ticks */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#wd_enabled\">wd_enabled</a>, <a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_nmi_count\">get_nmi_count</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) - <a class=\"id\" href=\"#prev_nmi_count\">prev_nmi_count</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] <= 5)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#report_broken_nmi\">report_broken_nmi</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#prev_nmi_count\">prev_nmi_count</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#endflag\">endflag</a> = 1;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nmi_active\">nmi_active</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#prev_nmi_count\">prev_nmi_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#nmi_active\">nmi_active</a>, -1);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"OK.\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * now that we know it works we can reduce NMI frequency to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * something more reasonable; makes a difference in some configs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a> == <a class=\"id\" href=\"#NMI_LOCAL_APIC\">NMI_LOCAL_APIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nmi_hz\">nmi_hz</a> = <a class=\"id\" href=\"#lapic_adjust_nmi_hz\">lapic_adjust_nmi_hz</a>(1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#prev_nmi_count\">prev_nmi_count</a>);", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a> == <a class=\"id\" href=\"#NMI_IO_APIC\">NMI_IO_APIC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#timer_through_8259\">timer_through_8259</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#legacy_pic\">legacy_pic</a>-><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#mask\">mask</a>(0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#__acpi_nmi_disable\">__acpi_nmi_disable</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer_ack\">timer_ack</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_nmi_watchdog\">setup_nmi_watchdog</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nmi\">nmi</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"panic\", 5)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic_on_timeout\">panic_on_timeout</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#str\">str</a>, ',');", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#str\">str</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"lapic\", 5))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a> = <a class=\"id\" href=\"#NMI_LOCAL_APIC\">NMI_LOCAL_APIC</a>;", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"ioapic\", 6))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a> = <a class=\"id\" href=\"#NMI_IO_APIC\">NMI_IO_APIC</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_option\">get_option</a>(&amp;<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#nmi\">nmi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nmi\">nmi</a> >= <a class=\"id\" href=\"#NMI_INVALID\">NMI_INVALID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a> = <a class=\"id\" href=\"#nmi\">nmi</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"nmi_watchdog=\", <a class=\"id\" href=\"#setup_nmi_watchdog\">setup_nmi_watchdog</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Suspend/resume support</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM\">CONFIG_PM</a>", 
"", 
"static int <a class=\"id\" href=\"#nmi_pm_active\">nmi_pm_active</a>; <span class=\"comment\">/* nmi_active before suspend */</span>", 
"", 
"static int <a class=\"id\" href=\"#lapic_nmi_suspend\">lapic_nmi_suspend</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* only CPU0 goes here, other CPUs should be offline */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nmi_pm_active\">nmi_pm_active</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nmi_active\">nmi_active</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stop_apic_nmi_watchdog\">stop_apic_nmi_watchdog</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nmi_active\">nmi_active</a>) != 0);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#lapic_nmi_resume\">lapic_nmi_resume</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* only CPU0 goes here, other CPUs should be offline */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmi_pm_active\">nmi_pm_active</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_apic_nmi_watchdog\">setup_apic_nmi_watchdog</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sysdev_class\">sysdev_class</a> <a class=\"id\" href=\"#nmi_sysclass\">nmi_sysclass</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"lapic_nmi\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#resume\">resume</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#lapic_nmi_resume\">lapic_nmi_resume</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#suspend\">suspend</a><span class=\"ts\"/>= <a class=\"id\" href=\"#lapic_nmi_suspend\">lapic_nmi_suspend</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#sys_device\">sys_device</a> <a class=\"id\" href=\"#device_lapic_nmi\">device_lapic_nmi</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#id\">id</a><span class=\"ts\"/>= 0,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cls\">cls</a><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#nmi_sysclass\">nmi_sysclass</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_lapic_nmi_sysfs\">init_lapic_nmi_sysfs</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * should really be a BUG_ON but b/c this is an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * init call, it just doesn't work.  -dcz</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a> != <a class=\"id\" href=\"#NMI_LOCAL_APIC\">NMI_LOCAL_APIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nmi_active\">nmi_active</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysdev_class_register\">sysdev_class_register</a>(&amp;<a class=\"id\" href=\"#nmi_sysclass\">nmi_sysclass</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysdev_register\">sysdev_register</a>(&amp;<a class=\"id\" href=\"#device_lapic_nmi\">device_lapic_nmi</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/* must come after the local APIC's device_initcall() */</span>", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#init_lapic_nmi_sysfs\">init_lapic_nmi_sysfs</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_PM */</span>", 
"", 
"static void <a class=\"id\" href=\"#__acpi_nmi_enable\">__acpi_nmi_enable</a>(void *<a class=\"id\" href=\"#__unused\">__unused</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVT0\">APIC_LVT0</a>, <a class=\"id\" href=\"#APIC_DM_NMI\">APIC_DM_NMI</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Enable timer based NMIs on all CPUs:</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#acpi_nmi_enable\">acpi_nmi_enable</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nmi_active\">nmi_active</a>) && <a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a> == <a class=\"id\" href=\"#NMI_IO_APIC\">NMI_IO_APIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#__acpi_nmi_enable\">__acpi_nmi_enable</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Disable timer based NMIs on all CPUs:</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#acpi_nmi_disable\">acpi_nmi_disable</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nmi_active\">nmi_active</a>) && <a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a> == <a class=\"id\" href=\"#NMI_IO_APIC\">NMI_IO_APIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#__acpi_nmi_disable\">__acpi_nmi_disable</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function is called as soon the LAPIC NMI watchdog driver has everything</span>", 
"<span class=\"comment\"> * in place and it's ready to check if the NMIs belong to the NMI watchdog</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cpu_nmi_set_wd_enabled\">cpu_nmi_set_wd_enabled</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#wd_enabled\">wd_enabled</a>) = 1;", 
"}", 
"", 
"void <a class=\"id\" href=\"#setup_apic_nmi_watchdog\">setup_apic_nmi_watchdog</a>(void *<a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#wd_enabled\">wd_enabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* cheap hack to support suspend/resume */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* if cpu0 is not active neither should the other cpus */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>() != 0 && <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nmi_active\">nmi_active</a>) <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NMI_LOCAL_APIC\">NMI_LOCAL_APIC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lapic_watchdog_init\">lapic_watchdog_init</a>(<a class=\"id\" href=\"#nmi_hz\">nmi_hz</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#wd_enabled\">wd_enabled</a>) = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FALL THROUGH */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NMI_IO_APIC\">NMI_IO_APIC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#wd_enabled\">wd_enabled</a>) = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#nmi_active\">nmi_active</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#stop_apic_nmi_watchdog\">stop_apic_nmi_watchdog</a>(void *<a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* only support LOCAL and IO APICs for now */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nmi_watchdog_active\">nmi_watchdog_active</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#wd_enabled\">wd_enabled</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a> == <a class=\"id\" href=\"#NMI_LOCAL_APIC\">NMI_LOCAL_APIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lapic_watchdog_stop\">lapic_watchdog_stop</a>();", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__acpi_nmi_disable\">__acpi_nmi_disable</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#wd_enabled\">wd_enabled</a>) = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#nmi_active\">nmi_active</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * the best way to detect whether a CPU has a 'hard lockup' problem</span>", 
"<span class=\"comment\"> * is to check it's local APIC timer IRQ counts. If they are not</span>", 
"<span class=\"comment\"> * changing then that CPU has some problem.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * as these watchdog NMI IRQs are generated on every CPU, we only</span>", 
"<span class=\"comment\"> * have to check the current processor.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * since NMIs don't listen to _any_ locks, we have to be extremely</span>", 
"<span class=\"comment\"> * careful not to rely on unsafe variables. The printk might lock</span>", 
"<span class=\"comment\"> * up though, so we have to break up any console locks first ...</span>", 
"<span class=\"comment\"> * [when there will be more tty-related locks, break them up here too!]</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(unsigned, <a class=\"id\" href=\"#last_irq_sum\">last_irq_sum</a>);", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(long, <a class=\"id\" href=\"#alert_counter\">alert_counter</a>);", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(int, <a class=\"id\" href=\"#nmi_touch\">nmi_touch</a>);", 
"", 
"void <a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmi_watchdog_active\">nmi_watchdog_active</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Tell other CPUs to reset their alert counters. We cannot</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * do it ourselves because the alert count increase is not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * atomic.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_present_cpu\">for_each_present_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#nmi_touch\">nmi_touch</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#nmi_touch\">nmi_touch</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Tickle the softlockup detector too:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#touch_softlockup_watchdog\">touch_softlockup_watchdog</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>);", 
"", 
"<a class=\"id\" href=\"#notrace\">notrace</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a> int", 
"<a class=\"id\" href=\"#nmi_watchdog_tick\">nmi_watchdog_tick</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned <a class=\"id\" href=\"#reason\">reason</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since current_thread_info()-&gt; is always on the stack, and we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * always switch the stack NMI-atomically, it's safe to use</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * smp_processor_id().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sum\">sum</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#touched\">touched</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sum\">sum</a> = <a class=\"id\" href=\"#get_timer_irqs\">get_timer_irqs</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#nmi_touch\">nmi_touch</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#nmi_touch\">nmi_touch</a>) = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touched\">touched</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We can be called before check_nmi_watchdog, hence NULL check. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#backtrace_mask\">backtrace_mask</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>static <a class=\"id\" href=\"#DEFINE_RAW_SPINLOCK\">DEFINE_RAW_SPINLOCK</a>(<a class=\"id\" href=\"#lock\">lock</a>); <span class=\"comment\">/* Serialise the printks */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"NMI backtrace for cpu %d\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#show_regs\">show_regs</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#backtrace_mask\">backtrace_mask</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Could check oops_in_progress here too, but it's safer not to */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mce_in_progress\">mce_in_progress</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touched\">touched</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if the none of the timers isn't firing, this cpu isn't doing much */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#touched\">touched</a> && <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#last_irq_sum\">last_irq_sum</a>) == <a class=\"id\" href=\"#sum\">sum</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Ayiee, looks like this CPU is stuck ...</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * wait a few IRQs (5 seconds) before doing the oops ...</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_inc\">__this_cpu_inc</a>(<a class=\"id\" href=\"#alert_counter\">alert_counter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__this_cpu_read\">__this_cpu_read</a>(<a class=\"id\" href=\"#alert_counter\">alert_counter</a>) == 5 * <a class=\"id\" href=\"#nmi_hz\">nmi_hz</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * die_nmi will return ONLY if NOTIFY_STOP happens..</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#die_nmi\">die_nmi</a>(\"BUG: NMI Watchdog detected LOCKUP\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#panic_on_timeout\">panic_on_timeout</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#last_irq_sum\">last_irq_sum</a>) = <a class=\"id\" href=\"#sum\">sum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_write\">__this_cpu_write</a>(<a class=\"id\" href=\"#alert_counter\">alert_counter</a>, 0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* see if the nmi watchdog went off */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#wd_enabled\">wd_enabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NMI_LOCAL_APIC\">NMI_LOCAL_APIC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> |= <a class=\"id\" href=\"#lapic_wd_event\">lapic_wd_event</a>(<a class=\"id\" href=\"#nmi_hz\">nmi_hz</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NMI_IO_APIC\">NMI_IO_APIC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * don't know how to accurately check for this.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * just assume it was a watchdog timer interrupt</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This matches the old behaviour.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSCTL\">CONFIG_SYSCTL</a>", 
"", 
"static void <a class=\"id\" href=\"#enable_ioapic_nmi_watchdog_single\">enable_ioapic_nmi_watchdog_single</a>(void *<a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#wd_enabled\">wd_enabled</a>) = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#nmi_active\">nmi_active</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acpi_nmi_enable\">__acpi_nmi_enable</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#enable_ioapic_nmi_watchdog\">enable_ioapic_nmi_watchdog</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#enable_ioapic_nmi_watchdog_single\">enable_ioapic_nmi_watchdog_single</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#disable_ioapic_nmi_watchdog\">disable_ioapic_nmi_watchdog</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#stop_apic_nmi_watchdog\">stop_apic_nmi_watchdog</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_unknown_nmi_panic\">setup_unknown_nmi_panic</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unknown_nmi_panic\">unknown_nmi_panic</a> = 1;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"unknown_nmi_panic\", <a class=\"id\" href=\"#setup_unknown_nmi_panic\">setup_unknown_nmi_panic</a>);", 
"", 
"static int <a class=\"id\" href=\"#unknown_nmi_panic_callback\">unknown_nmi_panic_callback</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#reason\">reason</a> = <a class=\"id\" href=\"#get_nmi_reason\">get_nmi_reason</a>();", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[64];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"NMI received for unknown reason %02x\\n\", <a class=\"id\" href=\"#reason\">reason</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#die_nmi\">die_nmi</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#regs\">regs</a>, 1); <span class=\"comment\">/* Always panic here */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * proc handler for /proc/sys/kernel/nmi</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#proc_nmi_enabled\">proc_nmi_enabled</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old_state\">old_state</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nmi_watchdog_enabled\">nmi_watchdog_enabled</a> = (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nmi_active\">nmi_active</a>) &gt; 0) ? 1 : 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_state\">old_state</a> = <a class=\"id\" href=\"#nmi_watchdog_enabled\">nmi_watchdog_enabled</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>if (!!<a class=\"id\" href=\"#old_state\">old_state</a> == !!<a class=\"id\" href=\"#nmi_watchdog_enabled\">nmi_watchdog_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nmi_active\">nmi_active</a>) &lt; 0 || !<a class=\"id\" href=\"#nmi_watchdog_active\">nmi_watchdog_active</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"NMI watchdog is permanently disabled\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a> == <a class=\"id\" href=\"#NMI_LOCAL_APIC\">NMI_LOCAL_APIC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nmi_watchdog_enabled\">nmi_watchdog_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_lapic_nmi_watchdog\">enable_lapic_nmi_watchdog</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_lapic_nmi_watchdog\">disable_lapic_nmi_watchdog</a>();", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a> == <a class=\"id\" href=\"#NMI_IO_APIC\">NMI_IO_APIC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nmi_watchdog_enabled\">nmi_watchdog_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_ioapic_nmi_watchdog\">enable_ioapic_nmi_watchdog</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_ioapic_nmi_watchdog\">disable_ioapic_nmi_watchdog</a>();", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"NMI watchdog doesn't know what hardware to touch\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SYSCTL */</span>", 
"", 
"int <a class=\"id\" href=\"#do_nmi_callback\">do_nmi_callback</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSCTL\">CONFIG_SYSCTL</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unknown_nmi_panic\">unknown_nmi_panic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#unknown_nmi_panic_callback\">unknown_nmi_panic_callback</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#arch_trigger_all_cpu_backtrace\">arch_trigger_all_cpu_backtrace</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#backtrace_mask\">backtrace_mask</a>), <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"sending NMI to all CPUs:\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#send_IPI_all\">send_IPI_all</a>(<a class=\"id\" href=\"#NMI_VECTOR\">NMI_VECTOR</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait for up to 10 seconds for all CPUs to do the backtrace */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 10 * 1000; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#backtrace_mask\">backtrace_mask</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mdelay\">mdelay</a>(1);", 
"<span class=\"ts\"/>}", 
"}", 
];
xr_frag_insert('l/35/749deae01e50fb36a2db14094cdead6d344eb7.xr', __xr_tmp);
