var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_PTRACE_H\">_ASM_X86_PTRACE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_PTRACE_H\">_ASM_X86_PTRACE_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"comment\">/* For __user */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#ptrace\">ptrace</a>-<a class=\"id\" href=\"#abi\">abi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>-<a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#segment\">segment</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page_types\">page_types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__i386__\">__i386__</a>", 
"<span class=\"comment\">/* this struct defines the way the registers are stored on the</span>", 
"<span class=\"comment\">   stack during a system call. */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> {", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ebx\">ebx</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ecx\">ecx</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#edx\">edx</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#esi\">esi</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#edi\">edi</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ebp\">ebp</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#eax\">eax</a>;", 
"<span class=\"ts\"/>int  <a class=\"id\" href=\"#xds\">xds</a>;", 
"<span class=\"ts\"/>int  <a class=\"id\" href=\"#xes\">xes</a>;", 
"<span class=\"ts\"/>int  <a class=\"id\" href=\"#xfs\">xfs</a>;", 
"<span class=\"ts\"/>int  <a class=\"id\" href=\"#xgs\">xgs</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#orig_eax\">orig_eax</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#eip\">eip</a>;", 
"<span class=\"ts\"/>int  <a class=\"id\" href=\"#xcs\">xcs</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#eflags\">eflags</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#esp\">esp</a>;", 
"<span class=\"ts\"/>int  <a class=\"id\" href=\"#xss\">xss</a>;", 
"};", 
"", 
"#else <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bx\">bx</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cx\">cx</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dx\">dx</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#si\">si</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#di\">di</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bp\">bp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ax\">ax</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ds\">ds</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#es\">es</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#fs\">fs</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#gs\">gs</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#orig_ax\">orig_ax</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cs\">cs</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ss\">ss</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"#else <span class=\"comment\">/* __i386__ */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r15\">r15</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r14\">r14</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r13\">r13</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r12\">r12</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rbp\">rbp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rbx\">rbx</a>;", 
"<span class=\"comment\">/* arguments: non interrupts/non tracing syscalls only save upto here*/</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r11\">r11</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r10\">r10</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r9\">r9</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r8\">r8</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rax\">rax</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rcx\">rcx</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rdx\">rdx</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rsi\">rsi</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rdi\">rdi</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#orig_rax\">orig_rax</a>;", 
"<span class=\"comment\">/* end of arguments */</span>", 
"<span class=\"comment\">/* cpu exception frame or undefined */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rip\">rip</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cs\">cs</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#eflags\">eflags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rsp\">rsp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ss\">ss</a>;", 
"<span class=\"comment\">/* top of stack page */</span>", 
"};", 
"", 
"#else <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r15\">r15</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r14\">r14</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r13\">r13</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r12\">r12</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bp\">bp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bx\">bx</a>;", 
"<span class=\"comment\">/* arguments: non interrupts/non tracing syscalls only save upto here*/</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r11\">r11</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r10\">r10</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r9\">r9</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r8\">r8</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ax\">ax</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cx\">cx</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dx\">dx</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#si\">si</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#di\">di</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#orig_ax\">orig_ax</a>;", 
"<span class=\"comment\">/* end of arguments */</span>", 
"<span class=\"comment\">/* cpu exception frame or undefined */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cs\">cs</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ss\">ss</a>;", 
"<span class=\"comment\">/* top of stack page */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !__i386__ */</span>", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a>;", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a>;", 
"", 
"extern unsigned long <a class=\"id\" href=\"#profile_pc\">profile_pc</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"extern unsigned long", 
"<a class=\"id\" href=\"#convert_ip_to_linear\">convert_ip_to_linear</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"extern void <a class=\"id\" href=\"#send_sigtrap\">send_sigtrap</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#error_code\">error_code</a>, int <a class=\"id\" href=\"#si_code\">si_code</a>);", 
"void <a class=\"id\" href=\"#signal_fault\">signal_fault</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#frame\">frame</a>, char *<a class=\"id\" href=\"#where\">where</a>);", 
"", 
"extern long <a class=\"id\" href=\"#syscall_trace_enter\">syscall_trace_enter</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *);", 
"extern void <a class=\"id\" href=\"#syscall_trace_leave\">syscall_trace_leave</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#regs_return_value\">regs_return_value</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ax\">ax</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * user_mode_vm(regs) determines whether a register set came from user mode.</span>", 
"<span class=\"comment\"> * This is true if V8086 mode was enabled OR if the register set was from</span>", 
"<span class=\"comment\"> * protected mode with RPL-3 CS value.  This tricky test checks that with</span>", 
"<span class=\"comment\"> * one comparison.  Many places in the kernel can bypass this full check</span>", 
"<span class=\"comment\"> * if they have already ruled out V8086 mode, so user_mode(regs) can be used.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#user_mode\">user_mode</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#cs\">cs</a> &amp; <a class=\"id\" href=\"#SEGMENT_RPL_MASK\">SEGMENT_RPL_MASK</a>) == <a class=\"id\" href=\"#USER_RPL\">USER_RPL</a>;", 
"#else", 
"<span class=\"ts\"/>return !!(<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#cs\">cs</a> &amp; 3);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#user_mode_vm\">user_mode_vm</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#cs\">cs</a> &amp; <a class=\"id\" href=\"#SEGMENT_RPL_MASK\">SEGMENT_RPL_MASK</a>) | (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#X86_VM_MASK\">X86_VM_MASK</a>)) >=", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#USER_RPL\">USER_RPL</a>;", 
"#else", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#v8086_mode\">v8086_mode</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#X86_VM_MASK\">X86_VM_MASK</a>);", 
"#else", 
"<span class=\"ts\"/>return 0;<span class=\"ts\"/><span class=\"comment\">/* No V86 mode support in long mode */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * X86_32 CPUs don't save ss and esp if the CPU is already in kernel mode</span>", 
"<span class=\"comment\"> * when it traps.  The previous stack will be directly underneath the saved</span>", 
"<span class=\"comment\"> * registers, and 'sp/ss' won't even have been saved. Thus the '&amp;regs-&gt;sp'.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is valid only for kernel mode traps.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#kernel_stack_pointer\">kernel_stack_pointer</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>return (unsigned long)(&amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#sp\">sp</a>);", 
"#else", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#sp\">sp</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#instruction_pointer\">instruction_pointer</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#frame_pointer\">frame_pointer</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#bp\">bp</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#user_stack_pointer\">user_stack_pointer</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#sp\">sp</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Query offset/name of register from its name/offset */</span>", 
"extern int <a class=\"id\" href=\"#regs_query_register_offset\">regs_query_register_offset</a>(const char *<a class=\"id\" href=\"#name\">name</a>);", 
"extern const char *<a class=\"id\" href=\"#regs_query_register_name\">regs_query_register_name</a>(unsigned int <a class=\"id\" href=\"#offset\">offset</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_REG_OFFSET\">MAX_REG_OFFSET</a> (<a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a>, <a class=\"id\" href=\"#ss\">ss</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * regs_get_register() - get register value from its offset</span>", 
"<span class=\"comment\"> * @regs:<span class=\"ts\"/>pt_regs from which register value is gotten.</span>", 
"<span class=\"comment\"> * @offset:<span class=\"ts\"/>offset number of the register.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * regs_get_register returns the value of a register. The @offset is the</span>", 
"<span class=\"comment\"> * offset of the register in struct pt_regs address which specified by @regs.</span>", 
"<span class=\"comment\"> * If @offset is bigger than MAX_REG_OFFSET, this returns 0.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#regs_get_register\">regs_get_register</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#offset\">offset</a> &gt; <a class=\"id\" href=\"#MAX_REG_OFFSET\">MAX_REG_OFFSET</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return *(unsigned long *)((unsigned long)<a class=\"id\" href=\"#regs\">regs</a> + <a class=\"id\" href=\"#offset\">offset</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * regs_within_kernel_stack() - check the address in the stack</span>", 
"<span class=\"comment\"> * @regs:<span class=\"ts\"/>pt_regs which contains kernel stack pointer.</span>", 
"<span class=\"comment\"> * @addr:<span class=\"ts\"/>address which is checked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * regs_within_kernel_stack() checks @addr is within the kernel stack page(s).</span>", 
"<span class=\"comment\"> * If @addr is within the kernel stack, it returns true. If not, returns false.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#regs_within_kernel_stack\">regs_within_kernel_stack</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#addr\">addr</a> &amp; ~(<a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a> - 1))  ==", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#kernel_stack_pointer\">kernel_stack_pointer</a>(<a class=\"id\" href=\"#regs\">regs</a>) &amp; ~(<a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a> - 1)));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * regs_get_kernel_stack_nth() - get Nth entry of the stack</span>", 
"<span class=\"comment\"> * @regs:<span class=\"ts\"/>pt_regs which contains kernel stack pointer.</span>", 
"<span class=\"comment\"> * @n:<span class=\"ts\"/><span class=\"ts\"/>stack entry number.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * regs_get_kernel_stack_nth() returns @n th entry of the kernel stack which</span>", 
"<span class=\"comment\"> * is specified by @regs. If the @n th entry is NOT in the kernel stack,</span>", 
"<span class=\"comment\"> * this returns 0.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#regs_get_kernel_stack_nth\">regs_get_kernel_stack_nth</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#addr\">addr</a> = (unsigned long *)<a class=\"id\" href=\"#kernel_stack_pointer\">kernel_stack_pointer</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#regs_within_kernel_stack\">regs_within_kernel_stack</a>(<a class=\"id\" href=\"#regs\">regs</a>, (unsigned long)<a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return *<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_has_single_step\">arch_has_single_step</a>()<span class=\"ts\"/>(1)", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_DEBUGCTLMSR\">CONFIG_X86_DEBUGCTLMSR</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_has_block_step\">arch_has_block_step</a>()<span class=\"ts\"/>(1)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_has_block_step\">arch_has_block_step</a>()<span class=\"ts\"/>(<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> >= 6)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ARCH_HAS_USER_SINGLE_STEP_INFO\">ARCH_HAS_USER_SINGLE_STEP_INFO</a>", 
"", 
"struct <a class=\"id\" href=\"#user_desc\">user_desc</a>;", 
"extern int <a class=\"id\" href=\"#do_get_thread_area\">do_get_thread_area</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#idx\">idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#user_desc\">user_desc</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#info\">info</a>);", 
"extern int <a class=\"id\" href=\"#do_set_thread_area\">do_set_thread_area</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#idx\">idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#user_desc\">user_desc</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#info\">info</a>, int <a class=\"id\" href=\"#can_allocate\">can_allocate</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !__ASSEMBLY__ */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_PTRACE_H */</span>", 
];
xr_frag_insert('l/35/a4ddd528f25562d87aaad43d1b0ae28bca8db6.xr', __xr_tmp);
