var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Old policy spanning whole new range. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new2\">new2</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new2\">new2</a> = <a class=\"id\" href=\"#sp_alloc\">sp_alloc</a>(<a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#policy\">policy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new2\">new2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp_insert\">sp_insert</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#new2\">new2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new2\">new2</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#sp_node\">sp_node</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp_insert\">sp_insert</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new2\">new2</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_put\">mpol_put</a>(<a class=\"id\" href=\"#new2\">new2</a>-><a class=\"id\" href=\"#policy\">policy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#sn_cache\">sn_cache</a>, <a class=\"id\" href=\"#new2\">new2</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mpol_shared_policy_init - initialize shared policy for inode</span>", 
"<span class=\"comment\"> * @sp: pointer to inode shared policy</span>", 
"<span class=\"comment\"> * @mpol:  struct mempolicy to install</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Install non-NULL @mpol in inode's shared policy rb-tree.</span>", 
"<span class=\"comment\"> * On entry, the current task has a reference on a non-NULL @mpol.</span>", 
"<span class=\"comment\"> * This must be released on exit.</span>", 
"<span class=\"comment\"> * This is called at get_inode() calls and we can use GFP_KERNEL.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mpol_shared_policy_init\">mpol_shared_policy_init</a>(struct <a class=\"id\" href=\"#shared_policy\">shared_policy</a> *<a class=\"id\" href=\"#sp\">sp</a>, struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#mpol\">mpol</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#RB_ROOT\">RB_ROOT</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* empty tree == default mempolicy */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mpol\">mpol</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> <a class=\"id\" href=\"#pvma\">pvma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_SCRATCH\">NODEMASK_SCRATCH</a>(<a class=\"id\" href=\"#scratch\">scratch</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scratch\">scratch</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#put_mpol\">put_mpol</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* contextualize the tmpfs mount point mempolicy */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#mpol_new\">mpol_new</a>(<a class=\"id\" href=\"#mpol\">mpol</a>-><a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#mpol\">mpol</a>-><a class=\"id\" href=\"#flags\">flags</a>, &amp;<a class=\"id\" href=\"#mpol\">mpol</a>-><a class=\"id\" href=\"#w\">w</a>.<a class=\"id\" href=\"#user_nodemask\">user_nodemask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#new\">new</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_scratch\">free_scratch</a>; <span class=\"comment\">/* no valid nodemask intersection */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mpol_set_nodemask\">mpol_set_nodemask</a>(<a class=\"id\" href=\"#new\">new</a>, &amp;<a class=\"id\" href=\"#mpol\">mpol</a>-><a class=\"id\" href=\"#w\">w</a>.<a class=\"id\" href=\"#user_nodemask\">user_nodemask</a>, <a class=\"id\" href=\"#scratch\">scratch</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#put_new\">put_new</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Create pseudo-vma that contains just the policy */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#pvma\">pvma</a>, 0, sizeof(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pvma\">pvma</a>.<a class=\"id\" href=\"#vm_end\">vm_end</a> = <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a>;<span class=\"ts\"/><span class=\"comment\">/* policy covers entire file */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_set_shared_policy\">mpol_set_shared_policy</a>(<a class=\"id\" href=\"#sp\">sp</a>, &amp;<a class=\"id\" href=\"#pvma\">pvma</a>, <a class=\"id\" href=\"#new\">new</a>); <span class=\"comment\">/* adds ref */</span>", 
"", 
"<a class=\"id\" href=\"#put_new\">put_new</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_put\">mpol_put</a>(<a class=\"id\" href=\"#new\">new</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* drop initial ref */</span>", 
"<a class=\"id\" href=\"#free_scratch\">free_scratch</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_SCRATCH_FREE\">NODEMASK_SCRATCH_FREE</a>(<a class=\"id\" href=\"#scratch\">scratch</a>);", 
"<a class=\"id\" href=\"#put_mpol\">put_mpol</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_put\">mpol_put</a>(<a class=\"id\" href=\"#mpol\">mpol</a>);<span class=\"ts\"/><span class=\"comment\">/* drop our incoming ref on sb mpol */</span>", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"int <a class=\"id\" href=\"#mpol_set_shared_policy\">mpol_set_shared_policy</a>(struct <a class=\"id\" href=\"#shared_policy\">shared_policy</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#npol\">npol</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sp_node\">sp_node</a> *<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sz\">sz</a> = <a class=\"id\" href=\"#vma_pages\">vma_pages</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"set_shared_policy %lx sz %lu %d %d %lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#sz\">sz</a>, <a class=\"id\" href=\"#npol\">npol</a> ? <a class=\"id\" href=\"#npol\">npol</a>-><a class=\"id\" href=\"#mode\">mode</a> : -1,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#npol\">npol</a> ? <a class=\"id\" href=\"#npol\">npol</a>-><a class=\"id\" href=\"#flags\">flags</a> : -1,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#npol\">npol</a> ? <a class=\"id\" href=\"#nodes_addr\">nodes_addr</a>(<a class=\"id\" href=\"#npol\">npol</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>)[0] : -1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#npol\">npol</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#sp_alloc\">sp_alloc</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> + <a class=\"id\" href=\"#sz\">sz</a>, <a class=\"id\" href=\"#npol\">npol</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#shared_policy_replace\">shared_policy_replace</a>(<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>+<a class=\"id\" href=\"#sz\">sz</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> && <a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#sn_cache\">sn_cache</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Free a backing policy store on inode delete. */</span>", 
"void <a class=\"id\" href=\"#mpol_free_shared_policy\">mpol_free_shared_policy</a>(struct <a class=\"id\" href=\"#shared_policy\">shared_policy</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sp_node\">sp_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#root\">root</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#rb_first\">rb_first</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#sp_node\">sp_node</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(&amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_erase\">rb_erase</a>(&amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#nd\">nd</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_put\">mpol_put</a>(<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#policy\">policy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#sn_cache\">sn_cache</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/* assumes fs == KERNEL_DS */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#numa_policy_init\">numa_policy_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#interleave_nodes\">interleave_nodes</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#largest\">largest</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#prefer\">prefer</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#policy_cache\">policy_cache</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"numa_policy\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> 0, <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sn_cache\">sn_cache</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"shared_policy_node\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     sizeof(struct <a class=\"id\" href=\"#sp_node\">sp_node</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     0, <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set interleaving policy for system init. Interleaving is only</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * enabled across suitably sized nodes (default is &gt;= 16MB), or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fall back to the largest node if they're all smaller.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(<a class=\"id\" href=\"#interleave_nodes\">interleave_nodes</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_state\">for_each_node_state</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#total_pages\">total_pages</a> = <a class=\"id\" href=\"#node_present_pages\">node_present_pages</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Preserve the largest node */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#largest\">largest</a> &lt; <a class=\"id\" href=\"#total_pages\">total_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#largest\">largest</a> = <a class=\"id\" href=\"#total_pages\">total_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefer\">prefer</a> = <a class=\"id\" href=\"#nid\">nid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Interleave this node? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#total_pages\">total_pages</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) >= (16 << 20))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_set\">node_set</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#interleave_nodes\">interleave_nodes</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* All too small, use the largest */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#nodes_empty\">nodes_empty</a>(<a class=\"id\" href=\"#interleave_nodes\">interleave_nodes</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_set\">node_set</a>(<a class=\"id\" href=\"#prefer\">prefer</a>, <a class=\"id\" href=\"#interleave_nodes\">interleave_nodes</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#do_set_mempolicy\">do_set_mempolicy</a>(<a class=\"id\" href=\"#MPOL_INTERLEAVE\">MPOL_INTERLEAVE</a>, 0, &amp;<a class=\"id\" href=\"#interleave_nodes\">interleave_nodes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"numa_policy_init: interleaving failed\\n\");", 
"}", 
"", 
"<span class=\"comment\">/* Reset policy of current process to default */</span>", 
"void <a class=\"id\" href=\"#numa_default_policy\">numa_default_policy</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_set_mempolicy\">do_set_mempolicy</a>(<a class=\"id\" href=\"#MPOL_DEFAULT\">MPOL_DEFAULT</a>, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Parse and format mempolicy from/to strings</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * \"local\" is pseudo-policy:  MPOL_PREFERRED with MPOL_F_LOCAL flag</span>", 
"<span class=\"comment\"> * Used only for mpol_parse_str() and mpol_to_str()</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MPOL_LOCAL\">MPOL_LOCAL</a> <a class=\"id\" href=\"#MPOL_MAX\">MPOL_MAX</a>", 
"static const char * const <a class=\"id\" href=\"#policy_modes\">policy_modes</a>[] =", 
"{", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#MPOL_DEFAULT\">MPOL_DEFAULT</a>]    = \"default\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#MPOL_PREFERRED\">MPOL_PREFERRED</a>]  = \"prefer\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#MPOL_BIND\">MPOL_BIND</a>]       = \"bind\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#MPOL_INTERLEAVE\">MPOL_INTERLEAVE</a>] = \"interleave\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#MPOL_LOCAL\">MPOL_LOCAL</a>]      = \"local\"", 
"};", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TMPFS\">CONFIG_TMPFS</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mpol_parse_str - parse string to mempolicy</span>", 
"<span class=\"comment\"> * @str:  string containing mempolicy to parse</span>", 
"<span class=\"comment\"> * @mpol:  pointer to struct mempolicy pointer, returned on success.</span>", 
"<span class=\"comment\"> * @no_context:  flag whether to \"contextualize\" the mempolicy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Format of input:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>&lt;mode&gt;[=&lt;flags&gt;][:&lt;nodelist&gt;]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * if @no_context is true, save the input nodemask in w.user_nodemask in</span>", 
"<span class=\"comment\"> * the returned mempolicy.  This will be used to \"clone\" the mempolicy in</span>", 
"<span class=\"comment\"> * a specific context [cpuset] at a later time.  Used to parse tmpfs mpol</span>", 
"<span class=\"comment\"> * mount option.  Note that if 'static' or 'relative' mode flags were</span>", 
"<span class=\"comment\"> * specified, the input nodemask will already have been saved.  Saving</span>", 
"<span class=\"comment\"> * it again is redundant, but safe.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On success, returns 0, else 1</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mpol_parse_str\">mpol_parse_str</a>(char *<a class=\"id\" href=\"#str\">str</a>, struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> **<a class=\"id\" href=\"#mpol\">mpol</a>, int <a class=\"id\" href=\"#no_context\">no_context</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#mode_flags\">mode_flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#nodes\">nodes</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#nodelist\">nodelist</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#str\">str</a>, ':');", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#str\">str</a>, '=');", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nodelist\">nodelist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* NUL-terminate mode or flags string */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nodelist\">nodelist</a>++ = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nodelist_parse\">nodelist_parse</a>(<a class=\"id\" href=\"#nodelist\">nodelist</a>, <a class=\"id\" href=\"#nodes\">nodes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nodes_subset\">nodes_subset</a>(<a class=\"id\" href=\"#nodes\">nodes</a>, <a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#flags\">flags</a>++ = '\\0';<span class=\"ts\"/><span class=\"comment\">/* terminate mode string */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#mode\">mode</a> = 0; <a class=\"id\" href=\"#mode\">mode</a> <= <a class=\"id\" href=\"#MPOL_LOCAL\">MPOL_LOCAL</a>; <a class=\"id\" href=\"#mode\">mode</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#policy_modes\">policy_modes</a>[<a class=\"id\" href=\"#mode\">mode</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> &gt; <a class=\"id\" href=\"#MPOL_LOCAL\">MPOL_LOCAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#mode\">mode</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_PREFERRED\">MPOL_PREFERRED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Insist on a nodelist of one node only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nodelist\">nodelist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#rest\">rest</a> = <a class=\"id\" href=\"#nodelist\">nodelist</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#isdigit\">isdigit</a>(*<a class=\"id\" href=\"#rest\">rest</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rest\">rest</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#rest\">rest</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_INTERLEAVE\">MPOL_INTERLEAVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Default to online nodes with memory if no nodelist</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nodelist\">nodelist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes\">nodes</a> = <a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_LOCAL\">MPOL_LOCAL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't allow a nodelist;  mpol_new() checks flags</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nodelist\">nodelist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#MPOL_PREFERRED\">MPOL_PREFERRED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_DEFAULT\">MPOL_DEFAULT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Insist on a empty nodelist</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nodelist\">nodelist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_BIND\">MPOL_BIND</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Insist on a nodelist</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nodelist\">nodelist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode_flags\">mode_flags</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Currently, we only support two mutually exclusive</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mode flags.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#flags\">flags</a>, \"static\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode_flags\">mode_flags</a> |= <a class=\"id\" href=\"#MPOL_F_STATIC_NODES\">MPOL_F_STATIC_NODES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#flags\">flags</a>, \"relative\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode_flags\">mode_flags</a> |= <a class=\"id\" href=\"#MPOL_F_RELATIVE_NODES\">MPOL_F_RELATIVE_NODES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#mpol_new\">mpol_new</a>(<a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#mode_flags\">mode_flags</a>, &amp;<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#new\">new</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#no_context\">no_context</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* save for contextualization */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#w\">w</a>.<a class=\"id\" href=\"#user_nodemask\">user_nodemask</a> = <a class=\"id\" href=\"#nodes\">nodes</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_SCRATCH\">NODEMASK_SCRATCH</a>(<a class=\"id\" href=\"#scratch\">scratch</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scratch\">scratch</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mpol_set_nodemask\">mpol_set_nodemask</a>(<a class=\"id\" href=\"#new\">new</a>, &amp;<a class=\"id\" href=\"#nodes\">nodes</a>, <a class=\"id\" href=\"#scratch\">scratch</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_SCRATCH_FREE\">NODEMASK_SCRATCH_FREE</a>(<a class=\"id\" href=\"#scratch\">scratch</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_put\">mpol_put</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Restore string for error message */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nodelist\">nodelist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*--<a class=\"id\" href=\"#nodelist\">nodelist</a> = ':';", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*--<a class=\"id\" href=\"#flags\">flags</a> = '=';", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#mpol\">mpol</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_TMPFS */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mpol_to_str - format a mempolicy structure for printing</span>", 
"<span class=\"comment\"> * @buffer:  to contain formatted mempolicy string</span>", 
"<span class=\"comment\"> * @maxlen:  length of @buffer</span>", 
"<span class=\"comment\"> * @pol:  pointer to mempolicy to be formatted</span>", 
"<span class=\"comment\"> * @no_context:  \"context free\" mempolicy - use nodemask in w.user_nodemask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Convert a mempolicy into a string.</span>", 
"<span class=\"comment\"> * Returns the number of characters in buffer (if positive)</span>", 
"<span class=\"comment\"> * or an error (negative)</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mpol_to_str\">mpol_to_str</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#maxlen\">maxlen</a>, struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>, int <a class=\"id\" href=\"#no_context\">no_context</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#nodes\">nodes</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#pol\">pol</a> ? <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#flags\">flags</a> : 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Sanity check:  room for longest mode, flag and some nodes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#maxlen\">maxlen</a> &lt; <a class=\"id\" href=\"#strlen\">strlen</a>(\"interleave\") + <a class=\"id\" href=\"#strlen\">strlen</a>(\"relative\") + 16);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pol\">pol</a> || <a class=\"id\" href=\"#pol\">pol</a> == &amp;<a class=\"id\" href=\"#default_policy\">default_policy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#MPOL_DEFAULT\">MPOL_DEFAULT</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#mode\">mode</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#mode\">mode</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_DEFAULT\">MPOL_DEFAULT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_PREFERRED\">MPOL_PREFERRED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_LOCAL\">MPOL_F_LOCAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#MPOL_LOCAL\">MPOL_LOCAL</a>;<span class=\"ts\"/><span class=\"comment\">/* pseudo-policy */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_set\">node_set</a>(<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#preferred_node\">preferred_node</a>, <a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_BIND\">MPOL_BIND</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_INTERLEAVE\">MPOL_INTERLEAVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#no_context\">no_context</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes\">nodes</a> = <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#w\">w</a>.<a class=\"id\" href=\"#user_nodemask\">user_nodemask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes\">nodes</a> = <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#policy_modes\">policy_modes</a>[<a class=\"id\" href=\"#mode\">mode</a>]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a> + <a class=\"id\" href=\"#maxlen\">maxlen</a> &lt; <a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#l\">l</a> + 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#policy_modes\">policy_modes</a>[<a class=\"id\" href=\"#mode\">mode</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#l\">l</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_MODE_FLAGS\">MPOL_MODE_FLAGS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a> + <a class=\"id\" href=\"#maxlen\">maxlen</a> &lt; <a class=\"id\" href=\"#p\">p</a> + 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = '=';", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Currently, the only defined flags are mutually exclusive</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_STATIC_NODES\">MPOL_F_STATIC_NODES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#buffer\">buffer</a> + <a class=\"id\" href=\"#maxlen\">maxlen</a> - <a class=\"id\" href=\"#p\">p</a>, \"static\");", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_RELATIVE_NODES\">MPOL_F_RELATIVE_NODES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#buffer\">buffer</a> + <a class=\"id\" href=\"#maxlen\">maxlen</a> - <a class=\"id\" href=\"#p\">p</a>, \"relative\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nodes_empty\">nodes_empty</a>(<a class=\"id\" href=\"#nodes\">nodes</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a> + <a class=\"id\" href=\"#maxlen\">maxlen</a> &lt; <a class=\"id\" href=\"#p\">p</a> + 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = ':';", 
"<span class=\"ts\"/> <span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#nodelist_scnprintf\">nodelist_scnprintf</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#buffer\">buffer</a> + <a class=\"id\" href=\"#maxlen\">maxlen</a> - <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a> - <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#numa_maps\">numa_maps</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#anon\">anon</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#active\">active</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#writeback\">writeback</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mapcount_max\">mapcount_max</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dirty\">dirty</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#swapcache\">swapcache</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#node\">node</a>[<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>];", 
"};", 
"", 
"static void <a class=\"id\" href=\"#gather_stats\">gather_stats</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, void *<a class=\"id\" href=\"#private\">private</a>, int <a class=\"id\" href=\"#pte_dirty\">pte_dirty</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#numa_maps\">numa_maps</a> *<a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#page_mapcount\">page_mapcount</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#pages\">pages</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_dirty\">pte_dirty</a> || <a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#dirty\">dirty</a>++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#swapcache\">swapcache</a>++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageActive\">PageActive</a>(<a class=\"id\" href=\"#page\">page</a>) || <a class=\"id\" href=\"#PageUnevictable\">PageUnevictable</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#active\">active</a>++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageWriteback\">PageWriteback</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#writeback\">writeback</a>++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#anon\">anon</a>++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#mapcount_max\">mapcount_max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#mapcount_max\">mapcount_max</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#node\">node</a>[<a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#page\">page</a>)]++;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HUGETLB_PAGE\">CONFIG_HUGETLB_PAGE</a>", 
"static void <a class=\"id\" href=\"#check_huge_range\">check_huge_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#numa_maps\">numa_maps</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#hstate_vma\">hstate_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sz\">sz</a> = <a class=\"id\" href=\"#huge_page_size\">huge_page_size</a>(<a class=\"id\" href=\"#h\">h</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#sz\">sz</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a> = <a class=\"id\" href=\"#huge_pte_offset\">huge_pte_offset</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> &amp; <a class=\"id\" href=\"#huge_page_mask\">huge_page_mask</a>(<a class=\"id\" href=\"#h\">h</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ptep\">ptep</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = *<a class=\"id\" href=\"#ptep\">ptep</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_none\">pte_none</a>(<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pte_page\">pte_page</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gather_stats\">gather_stats</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#md\">md</a>, <a class=\"id\" href=\"#pte_dirty\">pte_dirty</a>(*<a class=\"id\" href=\"#ptep\">ptep</a>));", 
"<span class=\"ts\"/>}", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#check_huge_range\">check_huge_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#numa_maps\">numa_maps</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Display pages allocated per node and memory policy via /proc.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#show_numa_map\">show_numa_map</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_maps_private\">proc_maps_private</a> *<a class=\"id\" href=\"#priv\">priv</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#numa_maps\">numa_maps</a> *<a class=\"id\" href=\"#md\">md</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buffer\">buffer</a>[50];", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#numa_maps\">numa_maps</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#md\">md</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a> = <a class=\"id\" href=\"#get_vma_policy\">get_vma_policy</a>(<a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpol_to_str\">mpol_to_str</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, sizeof(<a class=\"id\" href=\"#buffer\">buffer</a>), <a class=\"id\" href=\"#pol\">pol</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpol_cond_put\">mpol_cond_put</a>(<a class=\"id\" href=\"#pol\">pol</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%08lx %s\", <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>, <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" file=\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_path\">seq_path</a>(<a class=\"id\" href=\"#m\">m</a>, &amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>, \"\\n\\t= \");", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> <= <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#brk\">brk</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> >= <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#start_brk\">start_brk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" heap\");", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> <= <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#start_stack\">start_stack</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> >= <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#start_stack\">start_stack</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" stack\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_huge_range\">check_huge_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>, <a class=\"id\" href=\"#md\">md</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" huge\");", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_pgd_range\">check_pgd_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>], <a class=\"id\" href=\"#MPOL_MF_STATS\">MPOL_MF_STATS</a>, <a class=\"id\" href=\"#md\">md</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#pages\">pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#anon\">anon</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>,\" anon=%lu\",<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#anon\">anon</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#dirty\">dirty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>,\" dirty=%lu\",<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#dirty\">dirty</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#pages\">pages</a> != <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#anon\">anon</a> && <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#pages\">pages</a> != <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#dirty\">dirty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" mapped=%lu\", <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#pages\">pages</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#mapcount_max\">mapcount_max</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" mapmax=%lu\", <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#mapcount_max\">mapcount_max</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#swapcache\">swapcache</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>,\" swapcache=%lu\", <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#swapcache\">swapcache</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#active\">active</a> &lt; <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#pages\">pages</a> && !<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>,\" active=%lu\", <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#active\">active</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#writeback\">writeback</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>,\" writeback=%lu\", <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#writeback\">writeback</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_state\">for_each_node_state</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#node\">node</a>[<a class=\"id\" href=\"#n\">n</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" N%d=%lu\", <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#node\">node</a>[<a class=\"id\" href=\"#n\">n</a>]);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, '\\n');", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#md\">md</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#version\">version</a> = (<a class=\"id\" href=\"#vma\">vma</a> != <a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#tail_vma\">tail_vma</a>) ? <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> : 0;", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/35/a78c09fddb964b6fcd91169cfc42c5d9504ce2.xr', __xr_tmp);
