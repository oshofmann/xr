var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>linux/mm/filemap.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 1994-1999  Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This file handles the generic file mmap semantics used by</span>", 
"<span class=\"comment\"> * most \"normal\" filesystems (but you don't /have/ to use this:</span>", 
"<span class=\"comment\"> * the NFS filesystem used to do this differently, for example)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#aio\">aio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel_stat\">kernel_stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mman\">mman</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uio\">uio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hash\">hash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#backing\">backing</a>-<a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagevec\">pagevec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpuset\">cpuset</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* for BUG_ON(!in_atomic()) only */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#memcontrol\">memcontrol</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm_inline\">mm_inline</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* for page_is_file_cache() */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * FIXME: remove all knowledge of the buffer layer from the core VM</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* for try_to_free_buffers */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mman\">mman</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Shared mappings implemented 30.11.1994. It's not fully working yet,</span>", 
"<span class=\"comment\"> * though.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Shared mappings now work. 15.8.1995  Bruno.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * finished 'unifying' the page and buffer cache and SMP-threaded the</span>", 
"<span class=\"comment\"> * page-cache, 21.05.1999, Ingo Molnar &lt;mingo@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SMP-threaded pagemap-LRU 1999, Andrea Arcangeli &lt;andrea@suse.de&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Lock ordering:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  -&gt;i_mmap_lock<span class=\"ts\"/><span class=\"ts\"/>(truncate_pagecache)</span>", 
"<span class=\"comment\"> *    -&gt;private_lock<span class=\"ts\"/><span class=\"ts\"/>(__free_pte-&gt;__set_page_dirty_buffers)</span>", 
"<span class=\"comment\"> *      -&gt;swap_lock<span class=\"ts\"/><span class=\"ts\"/>(exclusive_swap_page, others)</span>", 
"<span class=\"comment\"> *        -&gt;mapping-&gt;tree_lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  -&gt;i_mutex</span>", 
"<span class=\"comment\"> *    -&gt;i_mmap_lock<span class=\"ts\"/><span class=\"ts\"/>(truncate-&gt;unmap_mapping_range)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  -&gt;mmap_sem</span>", 
"<span class=\"comment\"> *    -&gt;i_mmap_lock</span>", 
"<span class=\"comment\"> *      -&gt;page_table_lock or pte_lock<span class=\"ts\"/>(various, mainly in memory.c)</span>", 
"<span class=\"comment\"> *        -&gt;mapping-&gt;tree_lock<span class=\"ts\"/>(arch-dependent flush_dcache_mmap_lock)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  -&gt;mmap_sem</span>", 
"<span class=\"comment\"> *    -&gt;lock_page<span class=\"ts\"/><span class=\"ts\"/>(access_process_vm)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  -&gt;i_mutex<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(generic_file_buffered_write)</span>", 
"<span class=\"comment\"> *    -&gt;mmap_sem<span class=\"ts\"/><span class=\"ts\"/>(fault_in_pages_readable-&gt;do_page_fault)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  -&gt;i_mutex</span>", 
"<span class=\"comment\"> *    -&gt;i_alloc_sem             (various)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  -&gt;inode_lock</span>", 
"<span class=\"comment\"> *    -&gt;sb_lock<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(fs/fs-writeback.c)</span>", 
"<span class=\"comment\"> *    -&gt;mapping-&gt;tree_lock<span class=\"ts\"/>(__sync_single_inode)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  -&gt;i_mmap_lock</span>", 
"<span class=\"comment\"> *    -&gt;anon_vma.lock<span class=\"ts\"/><span class=\"ts\"/>(vma_adjust)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  -&gt;anon_vma.lock</span>", 
"<span class=\"comment\"> *    -&gt;page_table_lock or pte_lock<span class=\"ts\"/>(anon_vma_prepare and various)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  -&gt;page_table_lock or pte_lock</span>", 
"<span class=\"comment\"> *    -&gt;swap_lock<span class=\"ts\"/><span class=\"ts\"/>(try_to_unmap_one)</span>", 
"<span class=\"comment\"> *    -&gt;private_lock<span class=\"ts\"/><span class=\"ts\"/>(try_to_unmap_one)</span>", 
"<span class=\"comment\"> *    -&gt;tree_lock<span class=\"ts\"/><span class=\"ts\"/>(try_to_unmap_one)</span>", 
"<span class=\"comment\"> *    -&gt;zone.lru_lock<span class=\"ts\"/><span class=\"ts\"/>(follow_page-&gt;mark_page_accessed)</span>", 
"<span class=\"comment\"> *    -&gt;zone.lru_lock<span class=\"ts\"/><span class=\"ts\"/>(check_pte_range-&gt;isolate_lru_page)</span>", 
"<span class=\"comment\"> *    -&gt;private_lock<span class=\"ts\"/><span class=\"ts\"/>(page_remove_rmap-&gt;set_page_dirty)</span>", 
"<span class=\"comment\"> *    -&gt;tree_lock<span class=\"ts\"/><span class=\"ts\"/>(page_remove_rmap-&gt;set_page_dirty)</span>", 
"<span class=\"comment\"> *    -&gt;inode_lock<span class=\"ts\"/><span class=\"ts\"/>(page_remove_rmap-&gt;set_page_dirty)</span>", 
"<span class=\"comment\"> *    -&gt;inode_lock<span class=\"ts\"/><span class=\"ts\"/>(zap_pte_range-&gt;set_page_dirty)</span>", 
"<span class=\"comment\"> *    -&gt;private_lock<span class=\"ts\"/><span class=\"ts\"/>(zap_pte_range-&gt;__set_page_dirty_buffers)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  -&gt;task-&gt;proc_lock</span>", 
"<span class=\"comment\"> *    -&gt;dcache_lock<span class=\"ts\"/><span class=\"ts\"/>(proc_pid_lookup)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  (code doesn't rely on that order, so you could switch it around)</span>", 
"<span class=\"comment\"> *  -&gt;tasklist_lock             (memory_failure, collect_procs_ao)</span>", 
"<span class=\"comment\"> *    -&gt;i_mmap_lock</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove a page from the page cache and free it. Caller has to make</span>", 
"<span class=\"comment\"> * sure the page is locked and that nobody else uses it - or that usage</span>", 
"<span class=\"comment\"> * is safe.  The caller must hold the mapping's tree_lock.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__remove_from_page_cache\">__remove_from_page_cache</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_delete\">radix_tree_delete</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#page_tree\">page_tree</a>, <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#nrpages\">nrpages</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__dec_zone_page_state\">__dec_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_FILE_PAGES\">NR_FILE_PAGES</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageSwapBacked\">PageSwapBacked</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dec_zone_page_state\">__dec_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_SHMEM\">NR_SHMEM</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#page_mapped\">page_mapped</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some filesystems seem to re-dirty the page even after</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the VM has canceled the dirty bit (eg ext3 journaling).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fix it up by doing a final dirty accounting check after</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * having removed the page entirely.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#page\">page</a>) && <a class=\"id\" href=\"#mapping_cap_account_dirty\">mapping_cap_account_dirty</a>(<a class=\"id\" href=\"#mapping\">mapping</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dec_zone_page_state\">dec_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_FILE_DIRTY\">NR_FILE_DIRTY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dec_bdi_stat\">dec_bdi_stat</a>(<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>, <a class=\"id\" href=\"#BDI_RECLAIMABLE\">BDI_RECLAIMABLE</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#remove_from_page_cache\">remove_from_page_cache</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__remove_from_page_cache\">__remove_from_page_cache</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_uncharge_cache_page\">mem_cgroup_uncharge_cache_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#remove_from_page_cache\">remove_from_page_cache</a>);", 
"", 
"static int <a class=\"id\" href=\"#sync_page\">sync_page</a>(void *<a class=\"id\" href=\"#word\">word</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#container_of\">container_of</a>((unsigned long *)<a class=\"id\" href=\"#word\">word</a>, struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page_mapping() is being called without PG_locked held.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some knowledge of the state and use of the page is used to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reduce the requirements down to a memory barrier.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The danger here is of a stale page_mapping() return value</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * indicating a struct address_space different from the one it's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * associated with when it is associated with one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * After smp_mb(), it's either the correct page_mapping() for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the page, or an old page_mapping() and the page's own</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page_mapping() has gone NULL.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The -&gt;sync_page() address_space operation must tolerate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page_mapping() going NULL. By an amazing coincidence,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this comes about because none of the users of the page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the -&gt;sync_page() methods make essential use of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page_mapping(), merely passing the page down to the backing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * device's unplug functions when it's non-NULL, which in turn</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ignore it for all cases but swap, where only page_private(page) is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of interest. When page_mapping() does go NULL, the entire</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * call stack gracefully ignores the page and returns.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * -- wli</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page_mapping\">page_mapping</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a> && <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a> && <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#sync_page\">sync_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#sync_page\">sync_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_schedule\">io_schedule</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sync_page_killable\">sync_page_killable</a>(void *<a class=\"id\" href=\"#word\">word</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sync_page\">sync_page</a>(<a class=\"id\" href=\"#word\">word</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fatal_signal_pending\">fatal_signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>) ? -<a class=\"id\" href=\"#EINTR\">EINTR</a> : 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __filemap_fdatawrite_range - start writeback on mapping dirty pages in range</span>", 
"<span class=\"comment\"> * @mapping:<span class=\"ts\"/>address space structure to write</span>", 
"<span class=\"comment\"> * @start:<span class=\"ts\"/>offset in bytes where the range starts</span>", 
"<span class=\"comment\"> * @end:<span class=\"ts\"/>offset in bytes where the range ends (inclusive)</span>", 
"<span class=\"comment\"> * @sync_mode:<span class=\"ts\"/>enable synchronous operation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Start writeback against all of a mapping's dirty pages that lie</span>", 
"<span class=\"comment\"> * within the byte offsets &lt;start, end&gt; inclusive.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If sync_mode is WB_SYNC_ALL then this is a \"data integrity\" operation, as</span>", 
"<span class=\"comment\"> * opposed to a regular memory cleansing writeback.  The difference between</span>", 
"<span class=\"comment\"> * these two operations is that if a dirty page/buffer is encountered, it must</span>", 
"<span class=\"comment\"> * be waited upon, and not just skipped over.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__filemap_fdatawrite_range\">__filemap_fdatawrite_range</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#end\">end</a>, int <a class=\"id\" href=\"#sync_mode\">sync_mode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> <a class=\"id\" href=\"#wbc\">wbc</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#sync_mode\">sync_mode</a> = <a class=\"id\" href=\"#sync_mode\">sync_mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nr_to_write\">nr_to_write</a> = <a class=\"id\" href=\"#LONG_MAX\">LONG_MAX</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#range_start\">range_start</a> = <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#range_end\">range_end</a> = <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mapping_cap_writeback_dirty\">mapping_cap_writeback_dirty</a>(<a class=\"id\" href=\"#mapping\">mapping</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_writepages\">do_writepages</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, &amp;<a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__filemap_fdatawrite\">__filemap_fdatawrite</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sync_mode\">sync_mode</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__filemap_fdatawrite_range\">__filemap_fdatawrite_range</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, 0, <a class=\"id\" href=\"#LLONG_MAX\">LLONG_MAX</a>, <a class=\"id\" href=\"#sync_mode\">sync_mode</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#filemap_fdatawrite\">filemap_fdatawrite</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__filemap_fdatawrite\">__filemap_fdatawrite</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#WB_SYNC_ALL\">WB_SYNC_ALL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#filemap_fdatawrite\">filemap_fdatawrite</a>);", 
"", 
"int <a class=\"id\" href=\"#filemap_fdatawrite_range\">filemap_fdatawrite_range</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__filemap_fdatawrite_range\">__filemap_fdatawrite_range</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#WB_SYNC_ALL\">WB_SYNC_ALL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#filemap_fdatawrite_range\">filemap_fdatawrite_range</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * filemap_flush - mostly a non-blocking flush</span>", 
"<span class=\"comment\"> * @mapping:<span class=\"ts\"/>target address_space</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is a mostly non-blocking flush.  Not suitable for data-integrity</span>", 
"<span class=\"comment\"> * purposes - I/O may not be started against all dirty pages.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#filemap_flush\">filemap_flush</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__filemap_fdatawrite\">__filemap_fdatawrite</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#WB_SYNC_NONE\">WB_SYNC_NONE</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#filemap_flush\">filemap_flush</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * filemap_fdatawait_range - wait for writeback to complete</span>", 
"<span class=\"comment\"> * @mapping:<span class=\"ts\"/><span class=\"ts\"/>address space structure to wait for</span>", 
"<span class=\"comment\"> * @start_byte:<span class=\"ts\"/><span class=\"ts\"/>offset in bytes where the range starts</span>", 
"<span class=\"comment\"> * @end_byte:<span class=\"ts\"/><span class=\"ts\"/>offset in bytes where the range ends (inclusive)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Walk the list of under-writeback pages of the given address space</span>", 
"<span class=\"comment\"> * in the given range and wait for all of them.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#filemap_fdatawait_range\">filemap_fdatawait_range</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#start_byte\">start_byte</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#end_byte\">end_byte</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#start_byte\">start_byte</a> >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#end_byte\">end_byte</a> >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pagevec\">pagevec</a> <a class=\"id\" href=\"#pvec\">pvec</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end_byte\">end_byte</a> &lt; <a class=\"id\" href=\"#start_byte\">start_byte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagevec_init\">pagevec_init</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>, 0);", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#index\">index</a> <= <a class=\"id\" href=\"#end\">end</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#pagevec_lookup_tag\">pagevec_lookup_tag</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, &amp;<a class=\"id\" href=\"#index\">index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PAGECACHE_TAG_WRITEBACK\">PAGECACHE_TAG_WRITEBACK</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#index\">index</a>, (<a class=\"id\" href=\"#pgoff_t\">pgoff_t</a>)<a class=\"id\" href=\"#PAGEVEC_SIZE\">PAGEVEC_SIZE</a>-1) + 1)) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pvec\">pvec</a>.<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* until radix tree lookup accepts end_index */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> &gt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_page_writeback\">wait_on_page_writeback</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageError\">PageError</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pagevec_release\">pagevec_release</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for outstanding write errors */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_and_clear_bit\">test_and_clear_bit</a>(<a class=\"id\" href=\"#AS_ENOSPC\">AS_ENOSPC</a>, &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_and_clear_bit\">test_and_clear_bit</a>(<a class=\"id\" href=\"#AS_EIO\">AS_EIO</a>, &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#filemap_fdatawait_range\">filemap_fdatawait_range</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * filemap_fdatawait - wait for all under-writeback pages to complete</span>", 
"<span class=\"comment\"> * @mapping: address space structure to wait for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Walk the list of under-writeback pages of the given address space</span>", 
"<span class=\"comment\"> * and wait for all of them.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#filemap_fdatawait\">filemap_fdatawait</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#i_size\">i_size</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i_size\">i_size</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#filemap_fdatawait_range\">filemap_fdatawait_range</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, 0, <a class=\"id\" href=\"#i_size\">i_size</a> - 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#filemap_fdatawait\">filemap_fdatawait</a>);", 
"", 
"int <a class=\"id\" href=\"#filemap_write_and_wait\">filemap_write_and_wait</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#nrpages\">nrpages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#filemap_fdatawrite\">filemap_fdatawrite</a>(<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Even if the above returned error, the pages may be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * written partially (e.g. -ENOSPC), so we wait for it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * But the -EIO is special case, it may indicate the worst</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * thing (e.g. bug) happened, so we avoid waiting for it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> != -<a class=\"id\" href=\"#EIO\">EIO</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err2\">err2</a> = <a class=\"id\" href=\"#filemap_fdatawait\">filemap_fdatawait</a>(<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#err2\">err2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#filemap_write_and_wait\">filemap_write_and_wait</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * filemap_write_and_wait_range - write out &amp; wait on a file range</span>", 
"<span class=\"comment\"> * @mapping:<span class=\"ts\"/>the address_space for the pages</span>", 
"<span class=\"comment\"> * @lstart:<span class=\"ts\"/>offset in bytes where the range starts</span>", 
"<span class=\"comment\"> * @lend:<span class=\"ts\"/>offset in bytes where the range ends (inclusive)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Write out and wait upon file offsets lstart-&gt;lend, inclusive.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that `lend' is inclusive (describes the last byte to be written) so</span>", 
"<span class=\"comment\"> * that this function can be used to write to the very end-of-file (end = -1).</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#filemap_write_and_wait_range\">filemap_write_and_wait_range</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#lstart\">lstart</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#lend\">lend</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#nrpages\">nrpages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__filemap_fdatawrite_range\">__filemap_fdatawrite_range</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#lstart\">lstart</a>, <a class=\"id\" href=\"#lend\">lend</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#WB_SYNC_ALL\">WB_SYNC_ALL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* See comment of filemap_write_and_wait() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> != -<a class=\"id\" href=\"#EIO\">EIO</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err2\">err2</a> = <a class=\"id\" href=\"#filemap_fdatawait_range\">filemap_fdatawait_range</a>(<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lstart\">lstart</a>, <a class=\"id\" href=\"#lend\">lend</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#err2\">err2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#filemap_write_and_wait_range\">filemap_write_and_wait_range</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * add_to_page_cache_locked - add a locked page to the pagecache</span>", 
"<span class=\"comment\"> * @page:<span class=\"ts\"/>page to add</span>", 
"<span class=\"comment\"> * @mapping:<span class=\"ts\"/>the page's address_space</span>", 
"<span class=\"comment\"> * @offset:<span class=\"ts\"/>page index</span>", 
"<span class=\"comment\"> * @gfp_mask:<span class=\"ts\"/>page allocation mode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is used to add a page to the pagecache. It must be locked.</span>", 
"<span class=\"comment\"> * This function does not add the page to the LRU.  The caller must do that.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#add_to_page_cache_locked\">add_to_page_cache_locked</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#mem_cgroup_cache_charge\">mem_cgroup_cache_charge</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#GFP_RECLAIM_MASK\">GFP_RECLAIM_MASK</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#radix_tree_preload\">radix_tree_preload</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; ~<a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_get\">page_cache_get</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#radix_tree_insert\">radix_tree_insert</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#page_tree\">page_tree</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#error\">error</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#nrpages\">nrpages</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__inc_zone_page_state\">__inc_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_FILE_PAGES\">NR_FILE_PAGES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageSwapBacked\">PageSwapBacked</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__inc_zone_page_state\">__inc_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_SHMEM\">NR_SHMEM</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_uncharge_cache_page\">mem_cgroup_uncharge_cache_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_preload_end\">radix_tree_preload_end</a>();", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_uncharge_cache_page\">mem_cgroup_uncharge_cache_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#add_to_page_cache_locked\">add_to_page_cache_locked</a>);", 
"", 
"int <a class=\"id\" href=\"#add_to_page_cache_lru\">add_to_page_cache_lru</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Splice_read and readahead add shmem/tmpfs pages into the page cache</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before shmem_readpage has a chance to mark them as SwapBacked: they</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to go on the anon lru below, and mem_cgroup_cache_charge</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (called in add_to_page_cache) needs to know where they're going too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping_cap_swap_backed\">mapping_cap_swap_backed</a>(<a class=\"id\" href=\"#mapping\">mapping</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageSwapBacked\">SetPageSwapBacked</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#add_to_page_cache\">add_to_page_cache</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_is_file_cache\">page_is_file_cache</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru_cache_add_file\">lru_cache_add_file</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru_cache_add_anon\">lru_cache_add_anon</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#add_to_page_cache_lru\">add_to_page_cache_lru</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#__page_cache_alloc\">__page_cache_alloc</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuset_do_page_mem_spread\">cpuset_do_page_mem_spread</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_mems_allowed\">get_mems_allowed</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#cpuset_mem_spread_node\">cpuset_mem_spread_node</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_pages_exact_node\">alloc_pages_exact_node</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#gfp\">gfp</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_mems_allowed\">put_mems_allowed</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_pages\">alloc_pages</a>(<a class=\"id\" href=\"#gfp\">gfp</a>, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__page_cache_alloc\">__page_cache_alloc</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#__sleep_on_page_lock\">__sleep_on_page_lock</a>(void *<a class=\"id\" href=\"#word\">word</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_schedule\">io_schedule</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In order to wait for pages to become available there must be</span>", 
"<span class=\"comment\"> * waitqueues associated with pages. By using a hash table of</span>", 
"<span class=\"comment\"> * waitqueues where the bucket discipline is to maintain all</span>", 
"<span class=\"comment\"> * waiters on the same queue and wake all when any of the pages</span>", 
"<span class=\"comment\"> * become available, and for the woken contexts to check to be</span>", 
"<span class=\"comment\"> * sure the appropriate page became available, this saves space</span>", 
"<span class=\"comment\"> * at a cost of \"thundering herd\" phenomena during rare hash</span>", 
"<span class=\"comment\"> * collisions.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#page_waitqueue\">page_waitqueue</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#wait_table\">wait_table</a>[<a class=\"id\" href=\"#hash_ptr\">hash_ptr</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#wait_table_bits\">wait_table_bits</a>)];", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#wake_up_page\">wake_up_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#bit\">bit</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up_bit\">__wake_up_bit</a>(<a class=\"id\" href=\"#page_waitqueue\">page_waitqueue</a>(<a class=\"id\" href=\"#page\">page</a>), &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#bit\">bit</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#wait_on_page_bit\">wait_on_page_bit</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#bit_nr\">bit_nr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT_BIT\">DEFINE_WAIT_BIT</a>(<a class=\"id\" href=\"#wait\">wait</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#bit_nr\">bit_nr</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#bit_nr\">bit_nr</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wait_on_bit\">__wait_on_bit</a>(<a class=\"id\" href=\"#page_waitqueue\">page_waitqueue</a>(<a class=\"id\" href=\"#page\">page</a>), &amp;<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#sync_page\">sync_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#wait_on_page_bit\">wait_on_page_bit</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * add_page_wait_queue - Add an arbitrary waiter to a page's wait queue</span>", 
"<span class=\"comment\"> * @page: Page defining the wait queue of interest</span>", 
"<span class=\"comment\"> * @waiter: Waiter to add to the queue</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Add an arbitrary @waiter to the wait queue for the nominated @page.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#add_page_wait_queue\">add_page_wait_queue</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#waiter\">waiter</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#page_waitqueue\">page_waitqueue</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__add_wait_queue\">__add_wait_queue</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#waiter\">waiter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#add_page_wait_queue\">add_page_wait_queue</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * unlock_page - unlock a locked page</span>", 
"<span class=\"comment\"> * @page: the page</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unlocks the page and wakes up sleepers in ___wait_on_page_locked().</span>", 
"<span class=\"comment\"> * Also wakes sleepers in wait_on_page_writeback() because the wakeup</span>", 
"<span class=\"comment\"> * mechananism between PageLocked pages and PageWriteback pages is shared.</span>", 
"<span class=\"comment\"> * But that's OK - sleepers in wait_on_page_writeback() just go back to sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The mb is necessary to enforce ordering between the clear_bit and the read</span>", 
"<span class=\"comment\"> * of the waitqueue (to avoid SMP races with a parallel wait_on_page_locked()).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#unlock_page\">unlock_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit_unlock\">clear_bit_unlock</a>(<a class=\"id\" href=\"#PG_locked\">PG_locked</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__after_clear_bit\">smp_mb__after_clear_bit</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_page\">wake_up_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#PG_locked\">PG_locked</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unlock_page\">unlock_page</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * end_page_writeback - end writeback against a page</span>", 
"<span class=\"comment\"> * @page: the page</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#end_page_writeback\">end_page_writeback</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#TestClearPageReclaim\">TestClearPageReclaim</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rotate_reclaimable_page\">rotate_reclaimable_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_clear_page_writeback\">test_clear_page_writeback</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__after_clear_bit\">smp_mb__after_clear_bit</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_page\">wake_up_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#PG_writeback\">PG_writeback</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#end_page_writeback\">end_page_writeback</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __lock_page - get a lock on the page, assuming we need to sleep to get it</span>", 
"<span class=\"comment\"> * @page: the page to lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Ugly. Running sync_page() in state TASK_UNINTERRUPTIBLE is scary.  If some</span>", 
"<span class=\"comment\"> * random driver's requestfn sets TASK_RUNNING, we could busywait.  However</span>", 
"<span class=\"comment\"> * chances are that on the second loop, the block layer's plug list is empty,</span>", 
"<span class=\"comment\"> * so sync_page() will then return in state TASK_UNINTERRUPTIBLE.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__lock_page\">__lock_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT_BIT\">DEFINE_WAIT_BIT</a>(<a class=\"id\" href=\"#wait\">wait</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#PG_locked\">PG_locked</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wait_on_bit_lock\">__wait_on_bit_lock</a>(<a class=\"id\" href=\"#page_waitqueue\">page_waitqueue</a>(<a class=\"id\" href=\"#page\">page</a>), &amp;<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#sync_page\">sync_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__lock_page\">__lock_page</a>);", 
"", 
"int <a class=\"id\" href=\"#__lock_page_killable\">__lock_page_killable</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT_BIT\">DEFINE_WAIT_BIT</a>(<a class=\"id\" href=\"#wait\">wait</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#PG_locked\">PG_locked</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__wait_on_bit_lock\">__wait_on_bit_lock</a>(<a class=\"id\" href=\"#page_waitqueue\">page_waitqueue</a>(<a class=\"id\" href=\"#page\">page</a>), &amp;<a class=\"id\" href=\"#wait\">wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_page_killable\">sync_page_killable</a>, <a class=\"id\" href=\"#TASK_KILLABLE\">TASK_KILLABLE</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__lock_page_killable\">__lock_page_killable</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __lock_page_nosync - get a lock on the page, without calling sync_page()</span>", 
"<span class=\"comment\"> * @page: the page to lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Variant of lock_page that does not require the caller to hold a reference</span>", 
"<span class=\"comment\"> * on the page's mapping.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__lock_page_nosync\">__lock_page_nosync</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT_BIT\">DEFINE_WAIT_BIT</a>(<a class=\"id\" href=\"#wait\">wait</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#PG_locked\">PG_locked</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wait_on_bit_lock\">__wait_on_bit_lock</a>(<a class=\"id\" href=\"#page_waitqueue\">page_waitqueue</a>(<a class=\"id\" href=\"#page\">page</a>), &amp;<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#__sleep_on_page_lock\">__sleep_on_page_lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_get_page - find and get a page reference</span>", 
"<span class=\"comment\"> * @mapping: the address_space to search</span>", 
"<span class=\"comment\"> * @offset: the page index</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Is there a pagecache struct page at the given (mapping, offset) tuple?</span>", 
"<span class=\"comment\"> * If yes, increment its refcount and return it; if no, return NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#find_get_page\">find_get_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>void **<a class=\"id\" href=\"#pagep\">pagep</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagep\">pagep</a> = <a class=\"id\" href=\"#radix_tree_lookup_slot\">radix_tree_lookup_slot</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#page_tree\">page_tree</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pagep\">pagep</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#radix_tree_deref_slot\">radix_tree_deref_slot</a>(<a class=\"id\" href=\"#pagep\">pagep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#page\">page</a> || <a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#RADIX_TREE_RETRY\">RADIX_TREE_RETRY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_cache_get_speculative\">page_cache_get_speculative</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Has the page moved?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is part of the lockless pagecache protocol. See</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * include/linux/pagemap.h for details.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#page\">page</a> != *<a class=\"id\" href=\"#pagep\">pagep</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#find_get_page\">find_get_page</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_lock_page - locate, pin and lock a pagecache page</span>", 
"<span class=\"comment\"> * @mapping: the address_space to search</span>", 
"<span class=\"comment\"> * @offset: the page index</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Locates the desired pagecache page, locks it, increments its reference</span>", 
"<span class=\"comment\"> * count and returns its address.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns zero if the page was not present. find_lock_page() may sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#find_lock_page\">find_lock_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#find_get_page\">find_get_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Has the page been truncated? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> != <a class=\"id\" href=\"#mapping\">mapping</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> != <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#find_lock_page\">find_lock_page</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_or_create_page - locate or add a pagecache page</span>", 
"<span class=\"comment\"> * @mapping: the page's address_space</span>", 
"<span class=\"comment\"> * @index: the page's index into the mapping</span>", 
"<span class=\"comment\"> * @gfp_mask: page allocation mode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Locates a page in the pagecache.  If the page is not present, a new page</span>", 
"<span class=\"comment\"> * is allocated using @gfp_mask and is added to the pagecache and to the VM's</span>", 
"<span class=\"comment\"> * LRU list.  The returned page is locked and has its reference count</span>", 
"<span class=\"comment\"> * incremented.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * find_or_create_page() may sleep, even if @gfp_flags specifies an atomic</span>", 
"<span class=\"comment\"> * allocation!</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * find_or_create_page() returns the desired page's address, or zero on</span>", 
"<span class=\"comment\"> * memory exhaustion.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#find_or_create_page\">find_or_create_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#find_lock_page\">find_lock_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__page_cache_alloc\">__page_cache_alloc</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We want a regular kernel memory (not highmem or DMA etc)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allocation for the radix tree nodes, but we need to honour</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the context-specific requirements the caller has asked for.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * GFP_RECLAIM_MASK collects those requirements.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#add_to_page_cache_lru\">add_to_page_cache_lru</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#index\">index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#GFP_RECLAIM_MASK\">GFP_RECLAIM_MASK</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#err\">err</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#find_or_create_page\">find_or_create_page</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_get_pages - gang pagecache lookup</span>", 
"<span class=\"comment\"> * @mapping:<span class=\"ts\"/>The address_space to search</span>", 
"<span class=\"comment\"> * @start:<span class=\"ts\"/>The starting page index</span>", 
"<span class=\"comment\"> * @nr_pages:<span class=\"ts\"/>The maximum number of pages</span>", 
"<span class=\"comment\"> * @pages:<span class=\"ts\"/>Where the resulting pages are placed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * find_get_pages() will search for and return a group of up to</span>", 
"<span class=\"comment\"> * @nr_pages pages in the mapping.  The pages are placed at @pages.</span>", 
"<span class=\"comment\"> * find_get_pages() takes a reference against the returned pages.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The search returns a group of mapping-contiguous pages with ascending</span>", 
"<span class=\"comment\"> * indexes.  There may be holes in the indices due to not-present pages.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * find_get_pages() returns the number of pages which were found.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned <a class=\"id\" href=\"#find_get_pages\">find_get_pages</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_found\">nr_found</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_found\">nr_found</a> = <a class=\"id\" href=\"#radix_tree_gang_lookup_slot\">radix_tree_gang_lookup_slot</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#page_tree\">page_tree</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(void ***)<a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_found\">nr_found</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#radix_tree_deref_slot\">radix_tree_deref_slot</a>((void **)<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * this can only trigger if nr_found == 1, making livelock</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a non issue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#RADIX_TREE_RETRY\">RADIX_TREE_RETRY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_cache_get_speculative\">page_cache_get_speculative</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Has the page moved? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#page\">page</a> != *((void **)<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#ret\">ret</a>] = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_get_pages_contig - gang contiguous pagecache lookup</span>", 
"<span class=\"comment\"> * @mapping:<span class=\"ts\"/>The address_space to search</span>", 
"<span class=\"comment\"> * @index:<span class=\"ts\"/>The starting page index</span>", 
"<span class=\"comment\"> * @nr_pages:<span class=\"ts\"/>The maximum number of pages</span>", 
"<span class=\"comment\"> * @pages:<span class=\"ts\"/>Where the resulting pages are placed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * find_get_pages_contig() works exactly like find_get_pages(), except</span>", 
"<span class=\"comment\"> * that the returned number of pages are guaranteed to be contiguous.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * find_get_pages_contig() returns the number of pages which were found.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned <a class=\"id\" href=\"#find_get_pages_contig\">find_get_pages_contig</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_found\">nr_found</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_found\">nr_found</a> = <a class=\"id\" href=\"#radix_tree_gang_lookup_slot\">radix_tree_gang_lookup_slot</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#page_tree\">page_tree</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(void ***)<a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_found\">nr_found</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#radix_tree_deref_slot\">radix_tree_deref_slot</a>((void **)<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * this can only trigger if nr_found == 1, making livelock</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a non issue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#RADIX_TREE_RETRY\">RADIX_TREE_RETRY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> != <a class=\"id\" href=\"#index\">index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_cache_get_speculative\">page_cache_get_speculative</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Has the page moved? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#page\">page</a> != *((void **)<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#ret\">ret</a>] = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
];
xr_frag_insert('l/35/b8315f9d0b543a6f38a637a1eec174a8442178.xr', __xr_tmp);
