var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#sysfs_lock\">sysfs_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#gpio\">gpio</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#gpio_lock\">gpio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpio\">gpio</a> = <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#gpio_desc\">gpio_desc</a>[<a class=\"id\" href=\"#gpio\">gpio</a>].<a class=\"id\" href=\"#chip\">chip</a> == <a class=\"id\" href=\"#chip\">chip</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpio_desc\">gpio_desc</a>[<a class=\"id\" href=\"#gpio\">gpio</a>++].<a class=\"id\" href=\"#chip\">chip</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#gpio_lock\">gpio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: chip %s status %d\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#label\">label</a>, <a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#gpiochip_unexport\">gpiochip_unexport</a>(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a>)", 
"{", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#sysfs_lock\">sysfs_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#class_find_device\">class_find_device</a>(&amp;<a class=\"id\" href=\"#gpio_class\">gpio_class</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#chip\">chip</a>, <a class=\"id\" href=\"#match_export\">match_export</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_unregister\">device_unregister</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#exported\">exported</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = 0;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#sysfs_lock\">sysfs_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: chip %s status %d\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#label\">label</a>, <a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#gpiolib_sysfs_init\">gpiolib_sysfs_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#gpio\">gpio</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#class_register\">class_register</a>(&amp;<a class=\"id\" href=\"#gpio_class\">gpio_class</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Scan and register the gpio_chips which registered very</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * early (e.g. before the class_register above was called).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We run before arch_initcall() so chip-&gt;dev nodes can have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * registered, and so arch_initcall() can always gpio_export().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#gpio_lock\">gpio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#gpio\">gpio</a> = 0; <a class=\"id\" href=\"#gpio\">gpio</a> &lt; <a class=\"id\" href=\"#ARCH_NR_GPIOS\">ARCH_NR_GPIOS</a>; <a class=\"id\" href=\"#gpio\">gpio</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a><span class=\"ts\"/>*<a class=\"id\" href=\"#chip\">chip</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chip\">chip</a> = <a class=\"id\" href=\"#gpio_desc\">gpio_desc</a>[<a class=\"id\" href=\"#gpio\">gpio</a>].<a class=\"id\" href=\"#chip\">chip</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#chip\">chip</a> || <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#exported\">exported</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#gpio_lock\">gpio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#gpiochip_export\">gpiochip_export</a>(<a class=\"id\" href=\"#chip\">chip</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#gpio_lock\">gpio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#gpio_lock\">gpio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"<a class=\"id\" href=\"#postcore_initcall\">postcore_initcall</a>(<a class=\"id\" href=\"#gpiolib_sysfs_init\">gpiolib_sysfs_init</a>);", 
"", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#gpiochip_export\">gpiochip_export</a>(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#gpiochip_unexport\">gpiochip_unexport</a>(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_GPIO_SYSFS */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * gpiochip_add() - register a gpio_chip</span>", 
"<span class=\"comment\"> * @chip: the chip to register, with chip-&gt;base initialized</span>", 
"<span class=\"comment\"> * Context: potentially before irqs or kmalloc will work</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a negative errno if the chip can't be registered, such as</span>", 
"<span class=\"comment\"> * because the chip-&gt;base is invalid or already associated with a</span>", 
"<span class=\"comment\"> * different chip.  Otherwise it returns zero as a success code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When gpiochip_add() is called very early during boot, so that GPIOs</span>", 
"<span class=\"comment\"> * can be freely used, the chip-&gt;dev device must be registered before</span>", 
"<span class=\"comment\"> * the gpio framework's arch_initcall().  Otherwise sysfs initialization</span>", 
"<span class=\"comment\"> * for GPIOs will fail rudely.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If chip-&gt;base is negative, this requests dynamic assignment of</span>", 
"<span class=\"comment\"> * a range of valid GPIOs.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#gpiochip_add\">gpiochip_add</a>(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = 0;", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#base\">base</a>;", 
"", 
"<span class=\"ts\"/>if ((!<a class=\"id\" href=\"#gpio_is_valid\">gpio_is_valid</a>(<a class=\"id\" href=\"#base\">base</a>) || !<a class=\"id\" href=\"#gpio_is_valid\">gpio_is_valid</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#ngpio\">ngpio</a> - 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&& <a class=\"id\" href=\"#base\">base</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#gpio_lock\">gpio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#gpiochip_find_base\">gpiochip_find_base</a>(<a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#ngpio\">ngpio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* these GPIO numbers must not be managed by another gpio_chip */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#base\">base</a>; <a class=\"id\" href=\"#id\">id</a> &lt; <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#ngpio\">ngpio</a>; <a class=\"id\" href=\"#id\">id</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#gpio_desc\">gpio_desc</a>[<a class=\"id\" href=\"#id\">id</a>].<a class=\"id\" href=\"#chip\">chip</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#base\">base</a>; <a class=\"id\" href=\"#id\">id</a> &lt; <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#ngpio\">ngpio</a>; <a class=\"id\" href=\"#id\">id</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpio_desc\">gpio_desc</a>[<a class=\"id\" href=\"#id\">id</a>].<a class=\"id\" href=\"#chip\">chip</a> = <a class=\"id\" href=\"#chip\">chip</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* REVISIT:  most hardware initializes GPIOs as</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * inputs (often with pullups enabled) so power</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * usage is minimized.  Linux code should set the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * gpio direction first thing; but until it does,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we may expose the wrong direction in sysfs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpio_desc\">gpio_desc</a>[<a class=\"id\" href=\"#id\">id</a>].<a class=\"id\" href=\"#flags\">flags</a> = !<a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#direction_input\">direction_input</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>? (1 << <a class=\"id\" href=\"#FLAG_IS_OUT\">FLAG_IS_OUT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>: 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#of_gpiochip_add\">of_gpiochip_add</a>(<a class=\"id\" href=\"#chip\">chip</a>);", 
"", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#gpio_lock\">gpio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#gpiochip_export\">gpiochip_export</a>(<a class=\"id\" href=\"#chip\">chip</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* failures here can mean systems won't boot... */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"gpiochip_add: gpios %d..%d (%s) failed to register\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#ngpio\">ngpio</a> - 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#label\">label</a> ? : \"generic\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#gpiochip_add\">gpiochip_add</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * gpiochip_remove() - unregister a gpio_chip</span>", 
"<span class=\"comment\"> * @chip: the chip to unregister</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A gpio_chip with any GPIOs still requested may not be removed.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#gpiochip_remove\">gpiochip_remove</a>(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = 0;", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#gpio_lock\">gpio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#of_gpiochip_remove\">of_gpiochip_remove</a>(<a class=\"id\" href=\"#chip\">chip</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#base\">base</a>; <a class=\"id\" href=\"#id\">id</a> &lt; <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#ngpio\">ngpio</a>; <a class=\"id\" href=\"#id\">id</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#FLAG_REQUESTED\">FLAG_REQUESTED</a>, &amp;<a class=\"id\" href=\"#gpio_desc\">gpio_desc</a>[<a class=\"id\" href=\"#id\">id</a>].<a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#base\">base</a>; <a class=\"id\" href=\"#id\">id</a> &lt; <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#ngpio\">ngpio</a>; <a class=\"id\" href=\"#id\">id</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpio_desc\">gpio_desc</a>[<a class=\"id\" href=\"#id\">id</a>].<a class=\"id\" href=\"#chip\">chip</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#gpio_lock\">gpio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpiochip_unexport\">gpiochip_unexport</a>(<a class=\"id\" href=\"#chip\">chip</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#gpiochip_remove\">gpiochip_remove</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * gpiochip_find() - iterator for locating a specific gpio_chip</span>", 
"<span class=\"comment\"> * @data: data to pass to match function</span>", 
"<span class=\"comment\"> * @callback: Callback function to check gpio_chip</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Similar to bus_find_device.  It returns a reference to a gpio_chip as</span>", 
"<span class=\"comment\"> * determined by a user supplied @match callback.  The callback should return</span>", 
"<span class=\"comment\"> * 0 if the device doesn't match and non-zero if it does.  If the callback is</span>", 
"<span class=\"comment\"> * non-zero, this function will return to the caller and not iterate over any</span>", 
"<span class=\"comment\"> * more gpio_chips.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#gpiochip_find\">gpiochip_find</a>(void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#match\">match</a>)(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a>, void *<a class=\"id\" href=\"#data\">data</a>))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#gpio_lock\">gpio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARCH_NR_GPIOS\">ARCH_NR_GPIOS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#gpio_desc\">gpio_desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#chip\">chip</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#match\">match</a>(<a class=\"id\" href=\"#gpio_desc\">gpio_desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#chip\">chip</a>, <a class=\"id\" href=\"#data\">data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chip\">chip</a> = <a class=\"id\" href=\"#gpio_desc\">gpio_desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#chip\">chip</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#gpio_lock\">gpio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#chip\">chip</a>;", 
"}", 
"", 
"<span class=\"comment\">/* These \"optional\" allocation calls help prevent drivers from stomping</span>", 
"<span class=\"comment\"> * on each other, and help provide better diagnostics in debugfs.</span>", 
"<span class=\"comment\"> * They're called even less than the \"set direction\" calls.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#gpio_request\">gpio_request</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>, const char *<a class=\"id\" href=\"#label\">label</a>)", 
];
xr_frag_insert('l/35/c67ae3a5bbdc937d0b28ef59f4e25c04f20394.xr', __xr_tmp);
