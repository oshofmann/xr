var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flusher_queue\">flusher_queue</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flusher_overflow\">flusher_overflow</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_init_map\">lockdep_init_map</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>, <a class=\"id\" href=\"#lock_name\">lock_name</a>, <a class=\"id\" href=\"#key\">key</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#alloc_cwqs\">alloc_cwqs</a>(<a class=\"id\" href=\"#wq\">wq</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cwq_cpu\">for_each_cwq_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#wq\">wq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#cwq\">cwq</a> = <a class=\"id\" href=\"#get_cwq\">get_cwq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#wq\">wq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#get_gcwq\">get_gcwq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((unsigned long)<a class=\"id\" href=\"#cwq\">cwq</a> &amp; <a class=\"id\" href=\"#WORK_STRUCT_FLAG_MASK\">WORK_STRUCT_FLAG_MASK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#wq\">wq</a> = <a class=\"id\" href=\"#wq\">wq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#max_active\">max_active</a> = <a class=\"id\" href=\"#max_active\">max_active</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#delayed_works\">delayed_works</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_RESCUER\">WQ_RESCUER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#rescuer\">rescuer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_mayday_mask\">alloc_mayday_mask</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#mayday_mask\">mayday_mask</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#rescuer\">rescuer</a> = <a class=\"id\" href=\"#rescuer\">rescuer</a> = <a class=\"id\" href=\"#alloc_worker\">alloc_worker</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rescuer\">rescuer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rescuer\">rescuer</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#kthread_create\">kthread_create</a>(<a class=\"id\" href=\"#rescuer_thread\">rescuer_thread</a>, <a class=\"id\" href=\"#wq\">wq</a>, \"%s\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#rescuer\">rescuer</a>-><a class=\"id\" href=\"#task\">task</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rescuer\">rescuer</a>-><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_THREAD_BOUND\">PF_THREAD_BOUND</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#rescuer\">rescuer</a>-><a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * workqueue_lock protects global freeze state and workqueues</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * list.  Grab it, set max_active accordingly and add the new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * workqueue to workqueues list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#workqueue_lock\">workqueue_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#workqueue_freezing\">workqueue_freezing</a> && <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_FREEZEABLE\">WQ_FREEZEABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_cwq_cpu\">for_each_cwq_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#wq\">wq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_cwq\">get_cwq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#wq\">wq</a>)-><a class=\"id\" href=\"#max_active\">max_active</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#workqueues\">workqueues</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#workqueue_lock\">workqueue_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#wq\">wq</a>;", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wq\">wq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_cwqs\">free_cwqs</a>(<a class=\"id\" href=\"#wq\">wq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_mayday_mask\">free_mayday_mask</a>(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#mayday_mask\">mayday_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#rescuer\">rescuer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#wq\">wq</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__alloc_workqueue_key\">__alloc_workqueue_key</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * destroy_workqueue - safely terminate a workqueue</span>", 
"<span class=\"comment\"> * @wq: target workqueue</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Safely destroy a workqueue. All work currently pending will be done first.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#destroy_workqueue\">destroy_workqueue</a>(struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#WQ_DYING\">WQ_DYING</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_workqueue\">flush_workqueue</a>(<a class=\"id\" href=\"#wq\">wq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wq list is used to freeze wq, remove from list after</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * flushing is complete in case freeze races us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#workqueue_lock\">workqueue_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#workqueue_lock\">workqueue_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* sanity check */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cwq_cpu\">for_each_cwq_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#wq\">wq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#cwq\">cwq</a> = <a class=\"id\" href=\"#get_cwq\">get_cwq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#wq\">wq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#WORK_NR_COLORS\">WORK_NR_COLORS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#nr_in_flight\">nr_in_flight</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#nr_active\">nr_active</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#delayed_works\">delayed_works</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_RESCUER\">WQ_RESCUER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kthread_stop\">kthread_stop</a>(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#rescuer\">rescuer</a>-><a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_mayday_mask\">free_mayday_mask</a>(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#mayday_mask\">mayday_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#rescuer\">rescuer</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cwqs\">free_cwqs</a>(<a class=\"id\" href=\"#wq\">wq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#wq\">wq</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#destroy_workqueue\">destroy_workqueue</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * workqueue_set_max_active - adjust max_active of a workqueue</span>", 
"<span class=\"comment\"> * @wq: target workqueue</span>", 
"<span class=\"comment\"> * @max_active: new max_active value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Set max_active of @wq to @max_active.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Don't call from IRQ context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#workqueue_set_max_active\">workqueue_set_max_active</a>(struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>, int <a class=\"id\" href=\"#max_active\">max_active</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_active\">max_active</a> = <a class=\"id\" href=\"#wq_clamp_max_active\">wq_clamp_max_active</a>(<a class=\"id\" href=\"#max_active\">max_active</a>, <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#workqueue_lock\">workqueue_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#saved_max_active\">saved_max_active</a> = <a class=\"id\" href=\"#max_active\">max_active</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cwq_cpu\">for_each_cwq_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#wq\">wq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#get_gcwq\">get_gcwq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_FREEZEABLE\">WQ_FREEZEABLE</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GCWQ_FREEZING\">GCWQ_FREEZING</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_cwq\">get_cwq</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#wq\">wq</a>)-><a class=\"id\" href=\"#max_active\">max_active</a> = <a class=\"id\" href=\"#max_active\">max_active</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#workqueue_lock\">workqueue_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#workqueue_set_max_active\">workqueue_set_max_active</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * workqueue_congested - test whether a workqueue is congested</span>", 
"<span class=\"comment\"> * @cpu: CPU in question</span>", 
"<span class=\"comment\"> * @wq: target workqueue</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Test whether @wq's cpu workqueue for @cpu is congested.  There is</span>", 
"<span class=\"comment\"> * no synchronization around this function and the test result is</span>", 
"<span class=\"comment\"> * unreliable and only useful as advisory hints or for debugging.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * %true if congested, %false otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#workqueue_congested\">workqueue_congested</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#cwq\">cwq</a> = <a class=\"id\" href=\"#get_cwq\">get_cwq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#wq\">wq</a>);", 
"", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#delayed_works\">delayed_works</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#workqueue_congested\">workqueue_congested</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * work_cpu - return the last known associated cpu for @work</span>", 
"<span class=\"comment\"> * @work: the work of interest</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * CPU number if @work was ever queued.  WORK_CPU_NONE otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#work_cpu\">work_cpu</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#get_work_gcwq\">get_work_gcwq</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#gcwq\">gcwq</a> ? <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a> : <a class=\"id\" href=\"#WORK_CPU_NONE\">WORK_CPU_NONE</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#work_cpu\">work_cpu</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * work_busy - test whether a work is currently pending or running</span>", 
"<span class=\"comment\"> * @work: the work to be tested</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Test whether @work is currently pending or running.  There is no</span>", 
"<span class=\"comment\"> * synchronization around this function and the test result is</span>", 
"<span class=\"comment\"> * unreliable and only useful as advisory hints or for debugging.</span>", 
"<span class=\"comment\"> * Especially for reentrant wqs, the pending state might hide the</span>", 
"<span class=\"comment\"> * running state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * OR'd bitmask of WORK_BUSY_* bits.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#work_busy\">work_busy</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#get_work_gcwq\">get_work_gcwq</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gcwq\">gcwq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#work_pending\">work_pending</a>(<a class=\"id\" href=\"#work\">work</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> |= <a class=\"id\" href=\"#WORK_BUSY_PENDING\">WORK_BUSY_PENDING</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#find_worker_executing_work\">find_worker_executing_work</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>, <a class=\"id\" href=\"#work\">work</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> |= <a class=\"id\" href=\"#WORK_BUSY_RUNNING\">WORK_BUSY_RUNNING</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#work_busy\">work_busy</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * CPU hotplug.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are two challenges in supporting CPU hotplug.  Firstly, there</span>", 
"<span class=\"comment\"> * are a lot of assumptions on strong associations among work, cwq and</span>", 
"<span class=\"comment\"> * gcwq which make migrating pending and scheduled works very</span>", 
"<span class=\"comment\"> * difficult to implement without impacting hot paths.  Secondly,</span>", 
"<span class=\"comment\"> * gcwqs serve mix of short, long and very long running works making</span>", 
"<span class=\"comment\"> * blocked draining impractical.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is solved by allowing a gcwq to be detached from CPU, running</span>", 
"<span class=\"comment\"> * it with unbound (rogue) workers and allowing it to be reattached</span>", 
"<span class=\"comment\"> * later if the cpu comes back online.  A separate thread is created</span>", 
"<span class=\"comment\"> * to govern a gcwq in such state and is called the trustee of the</span>", 
"<span class=\"comment\"> * gcwq.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Trustee states and their descriptions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * START<span class=\"ts\"/>Command state used on startup.  On CPU_DOWN_PREPARE, a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>new trustee is started with this state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * IN_CHARGE<span class=\"ts\"/>Once started, trustee will enter this state after</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>assuming the manager role and making all existing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>workers rogue.  DOWN_PREPARE waits for trustee to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>enter this state.  After reaching IN_CHARGE, trustee</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>tries to execute the pending worklist until it's empty</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>and the state is set to BUTCHER, or the state is set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>to RELEASE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * BUTCHER<span class=\"ts\"/>Command state which is set by the cpu callback after</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>the cpu has went down.  Once this state is set trustee</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>knows that there will be no new works on the worklist</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>and once the worklist is empty it can proceed to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>killing idle workers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RELEASE<span class=\"ts\"/>Command state which is set by the cpu callback if the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>cpu down has been canceled or it has come online</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>again.  After recognizing this state, trustee stops</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>trying to drain or butcher and clears ROGUE, rebinds</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>all remaining workers back to the cpu and releases</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>manager role.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DONE<span class=\"ts\"/><span class=\"ts\"/>Trustee will enter this state after BUTCHER or RELEASE</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>is complete.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *          trustee                 CPU                draining</span>", 
"<span class=\"comment\"> *         took over                down               complete</span>", 
"<span class=\"comment\"> * START -----------&gt; IN_CHARGE -----------&gt; BUTCHER -----------&gt; DONE</span>", 
"<span class=\"comment\"> *                        |                     |                  ^</span>", 
"<span class=\"comment\"> *                        | CPU is back online  v   return workers |</span>", 
"<span class=\"comment\"> *                         ----------------&gt; RELEASE --------------</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * trustee_wait_event_timeout - timed event wait for trustee</span>", 
"<span class=\"comment\"> * @cond: condition to wait for</span>", 
"<span class=\"comment\"> * @timeout: timeout in jiffies</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * wait_event_timeout() for trustee to use.  Handles locking and</span>", 
"<span class=\"comment\"> * checks for RELEASE request.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock) which may be released and regrabbed</span>", 
"<span class=\"comment\"> * multiple times.  To be used by trustee.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Positive indicating left time if @cond is satisfied, 0 if timed</span>", 
"<span class=\"comment\"> * out, -1 if canceled.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#trustee_wait_event_timeout\">trustee_wait_event_timeout</a>(<a class=\"id\" href=\"#cond\">cond</a>, <a class=\"id\" href=\"#timeout\">timeout</a>) ({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#__ret\">__ret</a> = (<a class=\"id\" href=\"#timeout\">timeout</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>while (!((<a class=\"id\" href=\"#cond\">cond</a>) || (<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_state\">trustee_state</a> == <a class=\"id\" href=\"#TRUSTEE_RELEASE\">TRUSTEE_RELEASE</a>)) &&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#__ret\">__ret</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wait_event_timeout\">__wait_event_timeout</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_wait\">trustee_wait</a>, (<a class=\"id\" href=\"#cond\">cond</a>) ||<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_state\">trustee_state</a> == <a class=\"id\" href=\"#TRUSTEE_RELEASE\">TRUSTEE_RELEASE</a>),<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_state\">trustee_state</a> == <a class=\"id\" href=\"#TRUSTEE_RELEASE\">TRUSTEE_RELEASE</a> ? -1 : (<a class=\"id\" href=\"#__ret\">__ret</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * trustee_wait_event - event wait for trustee</span>", 
"<span class=\"comment\"> * @cond: condition to wait for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * wait_event() for trustee to use.  Automatically handles locking and</span>", 
"<span class=\"comment\"> * checks for CANCEL request.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock) which may be released and regrabbed</span>", 
"<span class=\"comment\"> * multiple times.  To be used by trustee.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * 0 if @cond is satisfied, -1 if canceled.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#trustee_wait_event\">trustee_wait_event</a>(<a class=\"id\" href=\"#cond\">cond</a>) ({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#__ret1\">__ret1</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ret1\">__ret1</a> = <a class=\"id\" href=\"#trustee_wait_event_timeout\">trustee_wait_event_timeout</a>(<a class=\"id\" href=\"#cond\">cond</a>, <a class=\"id\" href=\"#MAX_SCHEDULE_TIMEOUT\">MAX_SCHEDULE_TIMEOUT</a>);\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ret1\">__ret1</a> &lt; 0 ? -1 : 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#trustee_thread\">trustee_thread</a>(void *<a class=\"id\" href=\"#__gcwq\">__gcwq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#__gcwq\">__gcwq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Claim the manager position and make all workers rogue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Trustee must be bound to the target cpu and can't be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cancelled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#trustee_wait_event\">trustee_wait_event</a>(!(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GCWQ_MANAGING_WORKERS\">GCWQ_MANAGING_WORKERS</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#rc\">rc</a> &lt; 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#GCWQ_MANAGING_WORKERS\">GCWQ_MANAGING_WORKERS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#worker\">worker</a>, &amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#idle_list\">idle_list</a>, <a class=\"id\" href=\"#entry\">entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#WORKER_ROGUE\">WORKER_ROGUE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_busy_worker\">for_each_busy_worker</a>(<a class=\"id\" href=\"#worker\">worker</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#gcwq\">gcwq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#WORKER_ROGUE\">WORKER_ROGUE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Call schedule() so that we cross rq-&gt;lock and thus can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * guarantee sched callbacks see the rogue flag.  This is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * necessary as scheduler callbacks may be invoked from other</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cpus.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Sched callbacks are disabled now.  Zap nr_running.  After</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this, nr_running stays zero and need_more_worker() and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * keep_working() are always true as long as the worklist is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not empty.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(<a class=\"id\" href=\"#get_gcwq_nr_running\">get_gcwq_nr_running</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>), 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_timer_sync\">del_timer_sync</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#idle_timer\">idle_timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We're now in charge.  Notify and proceed to drain.  We need</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to keep the gcwq running during the whole CPU down</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * procedure as other cpu hotunplug callbacks may need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * flush currently running tasks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_state\">trustee_state</a> = <a class=\"id\" href=\"#TRUSTEE_IN_CHARGE\">TRUSTEE_IN_CHARGE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_all\">wake_up_all</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_wait\">trustee_wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The original cpu is in the process of dying and may go away</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * anytime now.  When that happens, we and all workers would</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be migrated to other cpus.  Try draining any left work.  We</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * want to get it over with ASAP - spam rescuers, wake up as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * many idlers as necessary and create new ones till the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * worklist is empty.  Note that if the gcwq is frozen, there</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * may be frozen works in freezeable cwqs.  Don't declare</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * completion while frozen.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#nr_workers\">nr_workers</a> != <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#nr_idle\">nr_idle</a> ||", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GCWQ_FREEZING\">GCWQ_FREEZING</a> ||", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_state\">trustee_state</a> == <a class=\"id\" href=\"#TRUSTEE_IN_CHARGE\">TRUSTEE_IN_CHARGE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nr_works\">nr_works</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#work\">work</a>, &amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#worklist\">worklist</a>, <a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_mayday\">send_mayday</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_works\">nr_works</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#worker\">worker</a>, &amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#idle_list\">idle_list</a>, <a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nr_works\">nr_works</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#need_to_create_worker\">need_to_create_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a> = <a class=\"id\" href=\"#create_worker\">create_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#worker\">worker</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#WORKER_ROGUE\">WORKER_ROGUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_worker\">start_worker</a>(<a class=\"id\" href=\"#worker\">worker</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* give a breather */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#trustee_wait_event_timeout\">trustee_wait_event_timeout</a>(<a class=\"id\" href=\"#false\">false</a>, <a class=\"id\" href=\"#TRUSTEE_COOLDOWN\">TRUSTEE_COOLDOWN</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Either all works have been scheduled and cpu is down, or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cpu down has already been canceled.  Wait for and butcher</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * all workers till we're canceled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#trustee_wait_event\">trustee_wait_event</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#idle_list\">idle_list</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#idle_list\">idle_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#destroy_worker\">destroy_worker</a>(<a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#idle_list\">idle_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a>, <a class=\"id\" href=\"#entry\">entry</a>));", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#nr_workers\">nr_workers</a> && <a class=\"id\" href=\"#rc\">rc</a> >= 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At this point, either draining has completed and no worker</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is left, or cpu down has been canceled or the cpu is being</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * brought back up.  There shouldn't be any idle one left.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Tell the remaining busy ones to rebind once it finishes the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * currently scheduled works by scheduling the rebind_work.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#idle_list\">idle_list</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_busy_worker\">for_each_busy_worker</a>(<a class=\"id\" href=\"#worker\">worker</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#gcwq\">gcwq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#rebind_work\">rebind_work</a> = &amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#rebind_work\">rebind_work</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Rebind_work may race with future cpu hotplug</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * operations.  Use a separate flag to mark that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * rebinding is scheduled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#WORKER_REBIND\">WORKER_REBIND</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#WORKER_ROGUE\">WORKER_ROGUE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* queue rebind_work, wq doesn't matter, use the default one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#WORK_STRUCT_PENDING_BIT\">WORK_STRUCT_PENDING_BIT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#work_data_bits\">work_data_bits</a>(<a class=\"id\" href=\"#rebind_work\">rebind_work</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_work_activate\">debug_work_activate</a>(<a class=\"id\" href=\"#rebind_work\">rebind_work</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insert_work\">insert_work</a>(<a class=\"id\" href=\"#get_cwq\">get_cwq</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#system_wq\">system_wq</a>), <a class=\"id\" href=\"#rebind_work\">rebind_work</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#scheduled\">scheduled</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#work_color_to_flags\">work_color_to_flags</a>(<a class=\"id\" href=\"#WORK_NO_COLOR\">WORK_NO_COLOR</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* relinquish manager role */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#GCWQ_MANAGING_WORKERS\">GCWQ_MANAGING_WORKERS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* notify completion */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee\">trustee</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_state\">trustee_state</a> = <a class=\"id\" href=\"#TRUSTEE_DONE\">TRUSTEE_DONE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_all\">wake_up_all</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_wait\">trustee_wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wait_trustee_state - wait for trustee to enter the specified state</span>", 
"<span class=\"comment\"> * @gcwq: gcwq the trustee of interest belongs to</span>", 
"<span class=\"comment\"> * @state: target state to wait for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Wait for the trustee to reach @state.  DONE is already matched.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock) which may be released and regrabbed</span>", 
"<span class=\"comment\"> * multiple times.  To be used by cpu_callback.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#wait_trustee_state\">wait_trustee_state</a>(struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>, int <a class=\"id\" href=\"#state\">state</a>)", 
"<a class=\"id\" href=\"#__releases\">__releases</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"<a class=\"id\" href=\"#__acquires\">__acquires</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_state\">trustee_state</a> == <a class=\"id\" href=\"#state\">state</a> ||", 
"<span class=\"ts\"/>      <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_state\">trustee_state</a> == <a class=\"id\" href=\"#TRUSTEE_DONE\">TRUSTEE_DONE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wait_event\">__wait_event</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_wait\">trustee_wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_state\">trustee_state</a> == <a class=\"id\" href=\"#state\">state</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_state\">trustee_state</a> == <a class=\"id\" href=\"#TRUSTEE_DONE\">TRUSTEE_DONE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#workqueue_cpu_callback\">workqueue_cpu_callback</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nfb\">nfb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#action\">action</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a> = (unsigned long)<a class=\"id\" href=\"#hcpu\">hcpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#get_gcwq\">get_gcwq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#new_trustee\">new_trustee</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#new_worker\">new_worker</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a> &= ~<a class=\"id\" href=\"#CPU_TASKS_FROZEN\">CPU_TASKS_FROZEN</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_PREPARE\">CPU_DOWN_PREPARE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_trustee\">new_trustee</a> = <a class=\"id\" href=\"#kthread_create\">kthread_create</a>(<a class=\"id\" href=\"#trustee_thread\">trustee_thread</a>, <a class=\"id\" href=\"#gcwq\">gcwq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     \"workqueue_trustee/%d\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#new_trustee\">new_trustee</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#notifier_from_errno\">notifier_from_errno</a>(<a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#new_trustee\">new_trustee</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kthread_bind\">kthread_bind</a>(<a class=\"id\" href=\"#new_trustee\">new_trustee</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#first_idle\">first_idle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_worker\">new_worker</a> = <a class=\"id\" href=\"#create_worker\">create_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_worker\">new_worker</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_trustee\">new_trustee</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kthread_stop\">kthread_stop</a>(<a class=\"id\" href=\"#new_trustee\">new_trustee</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_BAD\">NOTIFY_BAD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* some are called w/ irq disabled, don't disturb irq status */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_PREPARE\">CPU_DOWN_PREPARE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* initialize trustee and tell it to acquire the gcwq */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee\">trustee</a> || <a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_state\">trustee_state</a> != <a class=\"id\" href=\"#TRUSTEE_DONE\">TRUSTEE_DONE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee\">trustee</a> = <a class=\"id\" href=\"#new_trustee\">new_trustee</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_state\">trustee_state</a> = <a class=\"id\" href=\"#TRUSTEE_START\">TRUSTEE_START</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee\">trustee</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_trustee_state\">wait_trustee_state</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>, <a class=\"id\" href=\"#TRUSTEE_IN_CHARGE\">TRUSTEE_IN_CHARGE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#first_idle\">first_idle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#first_idle\">first_idle</a> = <a class=\"id\" href=\"#new_worker\">new_worker</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DYING\">CPU_DYING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Before this, the trustee and all workers except for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the ones which are still executing works from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * before the last CPU down must be on the cpu.  After</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * this, they'll all be diasporas.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#GCWQ_DISASSOCIATED\">GCWQ_DISASSOCIATED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_POST_DEAD\">CPU_POST_DEAD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_state\">trustee_state</a> = <a class=\"id\" href=\"#TRUSTEE_BUTCHER\">TRUSTEE_BUTCHER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_CANCELED\">CPU_UP_CANCELED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#destroy_worker\">destroy_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#first_idle\">first_idle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#first_idle\">first_idle</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_FAILED\">CPU_DOWN_FAILED</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_ONLINE\">CPU_ONLINE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#GCWQ_DISASSOCIATED\">GCWQ_DISASSOCIATED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_state\">trustee_state</a> != <a class=\"id\" href=\"#TRUSTEE_DONE\">TRUSTEE_DONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_state\">trustee_state</a> = <a class=\"id\" href=\"#TRUSTEE_RELEASE\">TRUSTEE_RELEASE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee\">trustee</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_trustee_state\">wait_trustee_state</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>, <a class=\"id\" href=\"#TRUSTEE_DONE\">TRUSTEE_DONE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Trustee is done and there might be no worker left.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Put the first_idle in and request a real manager to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * take a look.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kthread_bind\">kthread_bind</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#first_idle\">first_idle</a>-><a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#GCWQ_MANAGE_WORKERS\">GCWQ_MANAGE_WORKERS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_worker\">start_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#first_idle\">first_idle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#first_idle\">first_idle</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#notifier_from_errno\">notifier_from_errno</a>(0);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"struct <a class=\"id\" href=\"#work_for_cpu\">work_for_cpu</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> <a class=\"id\" href=\"#completion\">completion</a>;", 
"<span class=\"ts\"/>long (*<a class=\"id\" href=\"#fn\">fn</a>)(void *);", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;", 
"};", 
"", 
"static int <a class=\"id\" href=\"#do_work_for_cpu\">do_work_for_cpu</a>(void *<a class=\"id\" href=\"#_wfc\">_wfc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_for_cpu\">work_for_cpu</a> *<a class=\"id\" href=\"#wfc\">wfc</a> = <a class=\"id\" href=\"#_wfc\">_wfc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wfc\">wfc</a>-><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#wfc\">wfc</a>-><a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#wfc\">wfc</a>-><a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#wfc\">wfc</a>-><a class=\"id\" href=\"#completion\">completion</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * work_on_cpu - run a function in user context on a particular cpu</span>", 
"<span class=\"comment\"> * @cpu: the cpu to run on</span>", 
"<span class=\"comment\"> * @fn: the function to run</span>", 
"<span class=\"comment\"> * @arg: the function arg</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This will return the value @fn returns.</span>", 
"<span class=\"comment\"> * It is up to the caller to ensure that the cpu doesn't go offline.</span>", 
"<span class=\"comment\"> * The caller must not hold any locks which would prevent @fn from completing.</span>", 
"<span class=\"comment\"> */</span>", 
"long <a class=\"id\" href=\"#work_on_cpu\">work_on_cpu</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, long (*<a class=\"id\" href=\"#fn\">fn</a>)(void *), void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#sub_thread\">sub_thread</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_for_cpu\">work_for_cpu</a> <a class=\"id\" href=\"#wfc\">wfc</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#completion\">completion</a> = <a class=\"id\" href=\"#COMPLETION_INITIALIZER_ONSTACK\">COMPLETION_INITIALIZER_ONSTACK</a>(<a class=\"id\" href=\"#wfc\">wfc</a>.<a class=\"id\" href=\"#completion\">completion</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#fn\">fn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#arg\">arg</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sub_thread\">sub_thread</a> = <a class=\"id\" href=\"#kthread_create\">kthread_create</a>(<a class=\"id\" href=\"#do_work_for_cpu\">do_work_for_cpu</a>, &amp;<a class=\"id\" href=\"#wfc\">wfc</a>, \"work_for_cpu\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#sub_thread\">sub_thread</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#sub_thread\">sub_thread</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kthread_bind\">kthread_bind</a>(<a class=\"id\" href=\"#sub_thread\">sub_thread</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#sub_thread\">sub_thread</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#wfc\">wfc</a>.<a class=\"id\" href=\"#completion\">completion</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#wfc\">wfc</a>.<a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#work_on_cpu\">work_on_cpu</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FREEZER\">CONFIG_FREEZER</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * freeze_workqueues_begin - begin freezing workqueues</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Start freezing workqueues.  After this function returns, all</span>", 
"<span class=\"comment\"> * freezeable workqueues will queue new works to their frozen_works</span>", 
"<span class=\"comment\"> * list instead of gcwq-&gt;worklist.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Grabs and releases workqueue_lock and gcwq-&gt;lock's.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#freeze_workqueues_begin\">freeze_workqueues_begin</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#workqueue_lock\">workqueue_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#workqueue_freezing\">workqueue_freezing</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#workqueue_freezing\">workqueue_freezing</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_gcwq_cpu\">for_each_gcwq_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#get_gcwq\">get_gcwq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GCWQ_FREEZING\">GCWQ_FREEZING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#GCWQ_FREEZING\">GCWQ_FREEZING</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#workqueues\">workqueues</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#cwq\">cwq</a> = <a class=\"id\" href=\"#get_cwq\">get_cwq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#wq\">wq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cwq\">cwq</a> && <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_FREEZEABLE\">WQ_FREEZEABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#max_active\">max_active</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#workqueue_lock\">workqueue_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * freeze_workqueues_busy - are freezeable workqueues still busy?</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Check whether freezing is complete.  This function must be called</span>", 
"<span class=\"comment\"> * between freeze_workqueues_begin() and thaw_workqueues().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Grabs and releases workqueue_lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * %true if some freezeable workqueues are still busy.  %false if</span>", 
"<span class=\"comment\"> * freezing is complete.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#freeze_workqueues_busy\">freeze_workqueues_busy</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#busy\">busy</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#workqueue_lock\">workqueue_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#workqueue_freezing\">workqueue_freezing</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_gcwq_cpu\">for_each_gcwq_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * nr_active is monotonically decreasing.  It's safe</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to peek without lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#workqueues\">workqueues</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#cwq\">cwq</a> = <a class=\"id\" href=\"#get_cwq\">get_cwq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#wq\">wq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cwq\">cwq</a> || !(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_FREEZEABLE\">WQ_FREEZEABLE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#nr_active\">nr_active</a> &lt; 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#nr_active\">nr_active</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#busy\">busy</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#workqueue_lock\">workqueue_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#busy\">busy</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * thaw_workqueues - thaw workqueues</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Thaw workqueues.  Normal queueing is restored and all collected</span>", 
"<span class=\"comment\"> * frozen works are transferred to their respective gcwq worklists.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Grabs and releases workqueue_lock and gcwq-&gt;lock's.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#thaw_workqueues\">thaw_workqueues</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#workqueue_lock\">workqueue_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#workqueue_freezing\">workqueue_freezing</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_gcwq_cpu\">for_each_gcwq_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#get_gcwq\">get_gcwq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GCWQ_FREEZING\">GCWQ_FREEZING</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#GCWQ_FREEZING\">GCWQ_FREEZING</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#workqueues\">workqueues</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#cwq\">cwq</a> = <a class=\"id\" href=\"#get_cwq\">get_cwq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#wq\">wq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cwq\">cwq</a> || !(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_FREEZEABLE\">WQ_FREEZEABLE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* restore max_active and repopulate worklist */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#max_active\">max_active</a> = <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#saved_max_active\">saved_max_active</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#delayed_works\">delayed_works</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#nr_active\">nr_active</a> &lt; <a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#max_active\">max_active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cwq_activate_first_delayed\">cwq_activate_first_delayed</a>(<a class=\"id\" href=\"#cwq\">cwq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_worker\">wake_up_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#workqueue_freezing\">workqueue_freezing</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#workqueue_lock\">workqueue_lock</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FREEZER */</span>", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_workqueues\">init_workqueues</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_notifier\">cpu_notifier</a>(<a class=\"id\" href=\"#workqueue_cpu_callback\">workqueue_cpu_callback</a>, <a class=\"id\" href=\"#CPU_PRI_WORKQUEUE\">CPU_PRI_WORKQUEUE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* initialize gcwqs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_gcwq_cpu\">for_each_gcwq_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#get_gcwq\">get_gcwq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#worklist\">worklist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#GCWQ_DISASSOCIATED\">GCWQ_DISASSOCIATED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#idle_list\">idle_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#BUSY_WORKER_HASH_SIZE\">BUSY_WORKER_HASH_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#busy_hash\">busy_hash</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_timer_deferrable\">init_timer_deferrable</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#idle_timer\">idle_timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#idle_timer\">idle_timer</a>.<a class=\"id\" href=\"#function\">function</a> = <a class=\"id\" href=\"#idle_worker_timeout\">idle_worker_timeout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#idle_timer\">idle_timer</a>.<a class=\"id\" href=\"#data\">data</a> = (unsigned long)<a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_timer\">setup_timer</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#mayday_timer\">mayday_timer</a>, <a class=\"id\" href=\"#gcwq_mayday_timeout\">gcwq_mayday_timeout</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (unsigned long)<a class=\"id\" href=\"#gcwq\">gcwq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ida_init\">ida_init</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#worker_ida\">worker_ida</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_state\">trustee_state</a> = <a class=\"id\" href=\"#TRUSTEE_DONE\">TRUSTEE_DONE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#trustee_wait\">trustee_wait</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* create the initial worker */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_gcwq_cpu\">for_each_online_gcwq_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#get_gcwq\">get_gcwq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#WORK_CPU_UNBOUND\">WORK_CPU_UNBOUND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#GCWQ_DISASSOCIATED\">GCWQ_DISASSOCIATED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a> = <a class=\"id\" href=\"#create_worker\">create_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#worker\">worker</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_worker\">start_worker</a>(<a class=\"id\" href=\"#worker\">worker</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#system_wq\">system_wq</a> = <a class=\"id\" href=\"#alloc_workqueue\">alloc_workqueue</a>(\"events\", 0, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#system_long_wq\">system_long_wq</a> = <a class=\"id\" href=\"#alloc_workqueue\">alloc_workqueue</a>(\"events_long\", 0, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#system_nrt_wq\">system_nrt_wq</a> = <a class=\"id\" href=\"#alloc_workqueue\">alloc_workqueue</a>(\"events_nrt\", <a class=\"id\" href=\"#WQ_NON_REENTRANT\">WQ_NON_REENTRANT</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#system_unbound_wq\">system_unbound_wq</a> = <a class=\"id\" href=\"#alloc_workqueue\">alloc_workqueue</a>(\"events_unbound\", <a class=\"id\" href=\"#WQ_UNBOUND\">WQ_UNBOUND</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#WQ_UNBOUND_MAX_ACTIVE\">WQ_UNBOUND_MAX_ACTIVE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#system_wq\">system_wq</a> || !<a class=\"id\" href=\"#system_long_wq\">system_long_wq</a> || !<a class=\"id\" href=\"#system_nrt_wq\">system_nrt_wq</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_initcall\">early_initcall</a>(<a class=\"id\" href=\"#init_workqueues\">init_workqueues</a>);", 
];
xr_frag_insert('l/35/e2d57af3d7f96ff03bcce9a2dc242df73335e1.xr', __xr_tmp);
