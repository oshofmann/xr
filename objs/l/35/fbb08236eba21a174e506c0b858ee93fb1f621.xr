var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>PCI Bus Services, see include/linux/pci.h for further explanation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Copyright 1993 -- 1997 Drew Eckhardt, Frederic Potter,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>David Mosberger-Tang</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Copyright 1997 -- 2000 Martin Mares &lt;mj@ucw.cz&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm\">pm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#log2\">log2</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>-<a class=\"id\" href=\"#aspm\">aspm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm_wakeup\">pm_wakeup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm_runtime\">pm_runtime</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#setup\">setup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"pci.h\"", 
"", 
"const char *<a class=\"id\" href=\"#pci_power_names\">pci_power_names</a>[] = {", 
"<span class=\"ts\"/>\"error\", \"D0\", \"D1\", \"D2\", \"D3hot\", \"D3cold\", \"unknown\",", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pci_power_names\">pci_power_names</a>);", 
"", 
"int <a class=\"id\" href=\"#isa_dma_bridge_buggy\">isa_dma_bridge_buggy</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#isa_dma_bridge_buggy\">isa_dma_bridge_buggy</a>);", 
"", 
"int <a class=\"id\" href=\"#pci_pci_problems\">pci_pci_problems</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_pci_problems\">pci_pci_problems</a>);", 
"", 
"unsigned int <a class=\"id\" href=\"#pci_pm_d3_delay\">pci_pm_d3_delay</a>;", 
"", 
"static void <a class=\"id\" href=\"#pci_dev_d3_sleep\">pci_dev_d3_sleep</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#delay\">delay</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#d3_delay\">d3_delay</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delay\">delay</a> &lt; <a class=\"id\" href=\"#pci_pm_d3_delay\">pci_pm_d3_delay</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delay\">delay</a> = <a class=\"id\" href=\"#pci_pm_d3_delay\">pci_pm_d3_delay</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(<a class=\"id\" href=\"#delay\">delay</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PCI_DOMAINS\">CONFIG_PCI_DOMAINS</a>", 
"int <a class=\"id\" href=\"#pci_domains_supported\">pci_domains_supported</a> = 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFAULT_CARDBUS_IO_SIZE\">DEFAULT_CARDBUS_IO_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>(256)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFAULT_CARDBUS_MEM_SIZE\">DEFAULT_CARDBUS_MEM_SIZE</a><span class=\"ts\"/>(64*1024*1024)", 
"<span class=\"comment\">/* pci=cbmemsize=nnM,cbiosize=nn can override this */</span>", 
"unsigned long <a class=\"id\" href=\"#pci_cardbus_io_size\">pci_cardbus_io_size</a> = <a class=\"id\" href=\"#DEFAULT_CARDBUS_IO_SIZE\">DEFAULT_CARDBUS_IO_SIZE</a>;", 
"unsigned long <a class=\"id\" href=\"#pci_cardbus_mem_size\">pci_cardbus_mem_size</a> = <a class=\"id\" href=\"#DEFAULT_CARDBUS_MEM_SIZE\">DEFAULT_CARDBUS_MEM_SIZE</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFAULT_HOTPLUG_IO_SIZE\">DEFAULT_HOTPLUG_IO_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>(256)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFAULT_HOTPLUG_MEM_SIZE\">DEFAULT_HOTPLUG_MEM_SIZE</a><span class=\"ts\"/>(2*1024*1024)", 
"<span class=\"comment\">/* pci=hpmemsize=nnM,hpiosize=nn can override this */</span>", 
"unsigned long <a class=\"id\" href=\"#pci_hotplug_io_size\">pci_hotplug_io_size</a>  = <a class=\"id\" href=\"#DEFAULT_HOTPLUG_IO_SIZE\">DEFAULT_HOTPLUG_IO_SIZE</a>;", 
"unsigned long <a class=\"id\" href=\"#pci_hotplug_mem_size\">pci_hotplug_mem_size</a> = <a class=\"id\" href=\"#DEFAULT_HOTPLUG_MEM_SIZE\">DEFAULT_HOTPLUG_MEM_SIZE</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The default CLS is used if arch didn't set CLS explicitly and not</span>", 
"<span class=\"comment\"> * all pci devices agree on the same value.  Arch can override either</span>", 
"<span class=\"comment\"> * the dfl or actual value as it sees fit.  Don't forget this is</span>", 
"<span class=\"comment\"> * measured in 32-bit words, not bytes.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pci_dfl_cache_line_size\">pci_dfl_cache_line_size</a> <a class=\"id\" href=\"#__devinitdata\">__devinitdata</a> = <a class=\"id\" href=\"#L1_CACHE_BYTES\">L1_CACHE_BYTES</a> >> 2;", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pci_cache_line_size\">pci_cache_line_size</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_bus_max_busnr - returns maximum PCI bus number of given bus' children</span>", 
"<span class=\"comment\"> * @bus: pointer to PCI bus structure to search</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Given a PCI bus, returns the highest PCI bus number present in the set</span>", 
"<span class=\"comment\"> * including the given PCI bus and its list of child PCI buses.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned char <a class=\"id\" href=\"#pci_bus_max_busnr\">pci_bus_max_busnr</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a>* <a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#max\">max</a>, <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each\">list_for_each</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#children\">children</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#pci_bus_max_busnr\">pci_bus_max_busnr</a>(<a class=\"id\" href=\"#pci_bus_b\">pci_bus_b</a>(<a class=\"id\" href=\"#tmp\">tmp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#n\">n</a> &gt; <a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#max\">max</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pci_bus_max_busnr\">pci_bus_max_busnr</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAS_IOMEM\">CONFIG_HAS_IOMEM</a>", 
"void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#pci_ioremap_bar\">pci_ioremap_bar</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, int <a class=\"id\" href=\"#bar\">bar</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure the BAR is actually a memory resource, not an IO resource</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#pci_resource_flags\">pci_resource_flags</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>) &amp; <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ioremap_nocache\">ioremap_nocache</a>(<a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#pci_resource_len\">pci_resource_len</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pci_ioremap_bar\">pci_ioremap_bar</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if 0", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_max_busnr - returns maximum PCI bus number</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the highest PCI bus number present in the system global list of</span>", 
"<span class=\"comment\"> * PCI buses.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned char <a class=\"id\" href=\"#__devinit\">__devinit</a>", 
"<a class=\"id\" href=\"#pci_max_busnr\">pci_max_busnr</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#max\">max</a>, <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = 0;", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#bus\">bus</a> = <a class=\"id\" href=\"#pci_find_next_bus\">pci_find_next_bus</a>(<a class=\"id\" href=\"#bus\">bus</a>)) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#pci_bus_max_busnr\">pci_bus_max_busnr</a>(<a class=\"id\" href=\"#bus\">bus</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#n\">n</a> &gt; <a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#max\">max</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>  <span class=\"comment\">/*  0  */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PCI_FIND_CAP_TTL\">PCI_FIND_CAP_TTL</a><span class=\"ts\"/>48", 
"", 
"static int <a class=\"id\" href=\"#__pci_find_next_cap_ttl\">__pci_find_next_cap_ttl</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, unsigned int <a class=\"id\" href=\"#devfn\">devfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pos\">pos</a>, int <a class=\"id\" href=\"#cap\">cap</a>, int *<a class=\"id\" href=\"#ttl\">ttl</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/>while ((*<a class=\"id\" href=\"#ttl\">ttl</a>)--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_bus_read_config_byte\">pci_bus_read_config_byte</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#pos\">pos</a>, &amp;<a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> &lt; 0x40)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> &= ~3;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_bus_read_config_byte\">pci_bus_read_config_byte</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_CAP_LIST_ID\">PCI_CAP_LIST_ID</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a> == 0xff)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a> == <a class=\"id\" href=\"#cap\">cap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> += <a class=\"id\" href=\"#PCI_CAP_LIST_NEXT\">PCI_CAP_LIST_NEXT</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__pci_find_next_cap\">__pci_find_next_cap</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, unsigned int <a class=\"id\" href=\"#devfn\">devfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pos\">pos</a>, int <a class=\"id\" href=\"#cap\">cap</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ttl\">ttl</a> = <a class=\"id\" href=\"#PCI_FIND_CAP_TTL\">PCI_FIND_CAP_TTL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pci_find_next_cap_ttl\">__pci_find_next_cap_ttl</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#cap\">cap</a>, &amp;<a class=\"id\" href=\"#ttl\">ttl</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#pci_find_next_capability\">pci_find_next_capability</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pos\">pos</a>, int <a class=\"id\" href=\"#cap\">cap</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pci_find_next_cap\">__pci_find_next_cap</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_CAP_LIST_NEXT\">PCI_CAP_LIST_NEXT</a>, <a class=\"id\" href=\"#cap\">cap</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pci_find_next_capability\">pci_find_next_capability</a>);", 
"", 
"static int <a class=\"id\" href=\"#__pci_bus_find_cap_start\">__pci_bus_find_cap_start</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#hdr_type\">hdr_type</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_bus_read_config_word\">pci_bus_read_config_word</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#PCI_STATUS\">PCI_STATUS</a>, &amp;<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#PCI_STATUS_CAP_LIST\">PCI_STATUS_CAP_LIST</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#hdr_type\">hdr_type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_HEADER_TYPE_NORMAL\">PCI_HEADER_TYPE_NORMAL</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_HEADER_TYPE_BRIDGE\">PCI_HEADER_TYPE_BRIDGE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PCI_CAPABILITY_LIST\">PCI_CAPABILITY_LIST</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_HEADER_TYPE_CARDBUS\">PCI_HEADER_TYPE_CARDBUS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PCI_CB_CAPABILITY_LIST\">PCI_CB_CAPABILITY_LIST</a>;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_find_capability - query for devices' capabilities </span>", 
"<span class=\"comment\"> * @dev: PCI device to query</span>", 
"<span class=\"comment\"> * @cap: capability code</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Tell if a device supports a given PCI capability.</span>", 
"<span class=\"comment\"> * Returns the address of the requested capability structure within the</span>", 
"<span class=\"comment\"> * device's PCI configuration space or 0 in case the device does not</span>", 
"<span class=\"comment\"> * support it.  Possible values for @cap:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  %PCI_CAP_ID_PM           Power Management </span>", 
"<span class=\"comment\"> *  %PCI_CAP_ID_AGP          Accelerated Graphics Port </span>", 
"<span class=\"comment\"> *  %PCI_CAP_ID_VPD          Vital Product Data </span>", 
"<span class=\"comment\"> *  %PCI_CAP_ID_SLOTID       Slot Identification </span>", 
"<span class=\"comment\"> *  %PCI_CAP_ID_MSI          Message Signalled Interrupts</span>", 
"<span class=\"comment\"> *  %PCI_CAP_ID_CHSWP        CompactPCI HotSwap </span>", 
"<span class=\"comment\"> *  %PCI_CAP_ID_PCIX         PCI-X</span>", 
"<span class=\"comment\"> *  %PCI_CAP_ID_EXP          PCI Express</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_find_capability\">pci_find_capability</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#cap\">cap</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#__pci_bus_find_cap_start\">__pci_bus_find_cap_start</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#hdr_type\">hdr_type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#__pci_find_next_cap\">__pci_find_next_cap</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#cap\">cap</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pos\">pos</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_bus_find_capability - query for devices' capabilities </span>", 
"<span class=\"comment\"> * @bus:   the PCI bus to query</span>", 
"<span class=\"comment\"> * @devfn: PCI device to query</span>", 
"<span class=\"comment\"> * @cap:   capability code</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Like pci_find_capability() but works for pci devices that do not have a</span>", 
"<span class=\"comment\"> * pci_dev structure set up yet. </span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the address of the requested capability structure within the</span>", 
"<span class=\"comment\"> * device's PCI configuration space or 0 in case the device does not</span>", 
"<span class=\"comment\"> * support it.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_bus_find_capability\">pci_bus_find_capability</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, unsigned int <a class=\"id\" href=\"#devfn\">devfn</a>, int <a class=\"id\" href=\"#cap\">cap</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#hdr_type\">hdr_type</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_bus_read_config_byte\">pci_bus_read_config_byte</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#PCI_HEADER_TYPE\">PCI_HEADER_TYPE</a>, &amp;<a class=\"id\" href=\"#hdr_type\">hdr_type</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#__pci_bus_find_cap_start\">__pci_bus_find_cap_start</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#hdr_type\">hdr_type</a> &amp; 0x7f);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#__pci_find_next_cap\">__pci_find_next_cap</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#cap\">cap</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pos\">pos</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_find_ext_capability - Find an extended capability</span>", 
"<span class=\"comment\"> * @dev: PCI device to query</span>", 
"<span class=\"comment\"> * @cap: capability code</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the address of the requested extended capability structure</span>", 
"<span class=\"comment\"> * within the device's PCI configuration space or 0 if the device does</span>", 
"<span class=\"comment\"> * not support it.  Possible values for @cap:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  %PCI_EXT_CAP_ID_ERR<span class=\"ts\"/><span class=\"ts\"/>Advanced Error Reporting</span>", 
"<span class=\"comment\"> *  %PCI_EXT_CAP_ID_VC<span class=\"ts\"/><span class=\"ts\"/>Virtual Channel</span>", 
"<span class=\"comment\"> *  %PCI_EXT_CAP_ID_DSN<span class=\"ts\"/><span class=\"ts\"/>Device Serial Number</span>", 
"<span class=\"comment\"> *  %PCI_EXT_CAP_ID_PWR<span class=\"ts\"/><span class=\"ts\"/>Power Budgeting</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_find_ext_capability\">pci_find_ext_capability</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#cap\">cap</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#header\">header</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ttl\">ttl</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#PCI_CFG_SPACE_SIZE\">PCI_CFG_SPACE_SIZE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* minimum 8 bytes per capability */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ttl\">ttl</a> = (<a class=\"id\" href=\"#PCI_CFG_SPACE_EXP_SIZE\">PCI_CFG_SPACE_EXP_SIZE</a> - <a class=\"id\" href=\"#PCI_CFG_SPACE_SIZE\">PCI_CFG_SPACE_SIZE</a>) / 8;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#cfg_size\">cfg_size</a> <= <a class=\"id\" href=\"#PCI_CFG_SPACE_SIZE\">PCI_CFG_SPACE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a>, &amp;<a class=\"id\" href=\"#header\">header</a>) != <a class=\"id\" href=\"#PCIBIOS_SUCCESSFUL\">PCIBIOS_SUCCESSFUL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we have no capabilities, this is indicated by cap ID,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cap version and next pointer all being 0.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#header\">header</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#ttl\">ttl</a>-- &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PCI_EXT_CAP_ID\">PCI_EXT_CAP_ID</a>(<a class=\"id\" href=\"#header\">header</a>) == <a class=\"id\" href=\"#cap\">cap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#PCI_EXT_CAP_NEXT\">PCI_EXT_CAP_NEXT</a>(<a class=\"id\" href=\"#header\">header</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> &lt; <a class=\"id\" href=\"#PCI_CFG_SPACE_SIZE\">PCI_CFG_SPACE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a>, &amp;<a class=\"id\" href=\"#header\">header</a>) != <a class=\"id\" href=\"#PCIBIOS_SUCCESSFUL\">PCIBIOS_SUCCESSFUL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pci_find_ext_capability\">pci_find_ext_capability</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_bus_find_ext_capability - find an extended capability</span>", 
"<span class=\"comment\"> * @bus:   the PCI bus to query</span>", 
"<span class=\"comment\"> * @devfn: PCI device to query</span>", 
"<span class=\"comment\"> * @cap:   capability code</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Like pci_find_ext_capability() but works for pci devices that do not have a</span>", 
"<span class=\"comment\"> * pci_dev structure set up yet.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the address of the requested capability structure within the</span>", 
"<span class=\"comment\"> * device's PCI configuration space or 0 in case the device does not</span>", 
"<span class=\"comment\"> * support it.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_bus_find_ext_capability\">pci_bus_find_ext_capability</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, unsigned int <a class=\"id\" href=\"#devfn\">devfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cap\">cap</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#header\">header</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ttl\">ttl</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#PCI_CFG_SPACE_SIZE\">PCI_CFG_SPACE_SIZE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* minimum 8 bytes per capability */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ttl\">ttl</a> = (<a class=\"id\" href=\"#PCI_CFG_SPACE_EXP_SIZE\">PCI_CFG_SPACE_EXP_SIZE</a> - <a class=\"id\" href=\"#PCI_CFG_SPACE_SIZE\">PCI_CFG_SPACE_SIZE</a>) / 8;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pci_bus_read_config_dword\">pci_bus_read_config_dword</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#pos\">pos</a>, &amp;<a class=\"id\" href=\"#header\">header</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#header\">header</a> == 0xffffffff || <a class=\"id\" href=\"#header\">header</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#ttl\">ttl</a>-- &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PCI_EXT_CAP_ID\">PCI_EXT_CAP_ID</a>(<a class=\"id\" href=\"#header\">header</a>) == <a class=\"id\" href=\"#cap\">cap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#PCI_EXT_CAP_NEXT\">PCI_EXT_CAP_NEXT</a>(<a class=\"id\" href=\"#header\">header</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> &lt; <a class=\"id\" href=\"#PCI_CFG_SPACE_SIZE\">PCI_CFG_SPACE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pci_bus_read_config_dword\">pci_bus_read_config_dword</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#pos\">pos</a>, &amp;<a class=\"id\" href=\"#header\">header</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__pci_find_next_ht_cap\">__pci_find_next_ht_cap</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#pos\">pos</a>, int <a class=\"id\" href=\"#ht_cap\">ht_cap</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#ttl\">ttl</a> = <a class=\"id\" href=\"#PCI_FIND_CAP_TTL\">PCI_FIND_CAP_TTL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#cap\">cap</a>, <a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ht_cap\">ht_cap</a> == <a class=\"id\" href=\"#HT_CAPTYPE_SLAVE\">HT_CAPTYPE_SLAVE</a> || <a class=\"id\" href=\"#ht_cap\">ht_cap</a> == <a class=\"id\" href=\"#HT_CAPTYPE_HOST\">HT_CAPTYPE_HOST</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#HT_3BIT_CAP_MASK\">HT_3BIT_CAP_MASK</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#HT_5BIT_CAP_MASK\">HT_5BIT_CAP_MASK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#__pci_find_next_cap_ttl\">__pci_find_next_cap_ttl</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#pos\">pos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#PCI_CAP_ID_HT\">PCI_CAP_ID_HT</a>, &amp;<a class=\"id\" href=\"#ttl\">ttl</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pos\">pos</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + 3, &amp;<a class=\"id\" href=\"#cap\">cap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != <a class=\"id\" href=\"#PCIBIOS_SUCCESSFUL\">PCIBIOS_SUCCESSFUL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#cap\">cap</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>) == <a class=\"id\" href=\"#ht_cap\">ht_cap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#__pci_find_next_cap_ttl\">__pci_find_next_cap_ttl</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_CAP_LIST_NEXT\">PCI_CAP_LIST_NEXT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#PCI_CAP_ID_HT\">PCI_CAP_ID_HT</a>, &amp;<a class=\"id\" href=\"#ttl\">ttl</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_find_next_ht_capability - query a device's Hypertransport capabilities</span>", 
"<span class=\"comment\"> * @dev: PCI device to query</span>", 
"<span class=\"comment\"> * @pos: Position from which to continue searching</span>", 
"<span class=\"comment\"> * @ht_cap: Hypertransport capability code</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To be used in conjunction with pci_find_ht_capability() to search for</span>", 
"<span class=\"comment\"> * all capabilities matching @ht_cap. @pos should always be a value returned</span>", 
"<span class=\"comment\"> * from pci_find_ht_capability().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NB. To be 100% safe against broken PCI devices, the caller should take</span>", 
"<span class=\"comment\"> * steps to avoid an infinite loop.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_find_next_ht_capability\">pci_find_next_ht_capability</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#pos\">pos</a>, int <a class=\"id\" href=\"#ht_cap\">ht_cap</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pci_find_next_ht_cap\">__pci_find_next_ht_cap</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_CAP_LIST_NEXT\">PCI_CAP_LIST_NEXT</a>, <a class=\"id\" href=\"#ht_cap\">ht_cap</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pci_find_next_ht_capability\">pci_find_next_ht_capability</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_find_ht_capability - query a device's Hypertransport capabilities</span>", 
"<span class=\"comment\"> * @dev: PCI device to query</span>", 
"<span class=\"comment\"> * @ht_cap: Hypertransport capability code</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Tell if a device supports a given Hypertransport capability.</span>", 
"<span class=\"comment\"> * Returns an address within the device's PCI configuration space</span>", 
"<span class=\"comment\"> * or 0 in case the device does not support the request capability.</span>", 
"<span class=\"comment\"> * The address points to the PCI capability, of type PCI_CAP_ID_HT,</span>", 
"<span class=\"comment\"> * which has a Hypertransport capability matching @ht_cap.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_find_ht_capability\">pci_find_ht_capability</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#ht_cap\">ht_cap</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#__pci_bus_find_cap_start\">__pci_bus_find_cap_start</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#hdr_type\">hdr_type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#__pci_find_next_ht_cap\">__pci_find_next_ht_cap</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#ht_cap\">ht_cap</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pos\">pos</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pci_find_ht_capability\">pci_find_ht_capability</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_find_parent_resource - return resource region of parent bus of given region</span>", 
"<span class=\"comment\"> * @dev: PCI device structure contains resources to be searched</span>", 
"<span class=\"comment\"> * @res: child resource record for which parent is sought</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  For given resource region of given device, return the resource</span>", 
"<span class=\"comment\"> *  region of parent bus the given region is contained in or where</span>", 
"<span class=\"comment\"> *  it should be allocated from.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#resource\">resource</a> *", 
"<a class=\"id\" href=\"#pci_find_parent_resource\">pci_find_parent_resource</a>(const struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#best\">best</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_bus_for_each_resource\">pci_bus_for_each_resource</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#r\">r</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> && !(<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> && <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a> <= <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;<span class=\"ts\"/><span class=\"comment\">/* Not contained */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> ^ <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#flags\">flags</a>) &amp; (<a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a> | <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;<span class=\"ts\"/><span class=\"comment\">/* Wrong type */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!((<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> ^ <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#flags\">flags</a>) &amp; <a class=\"id\" href=\"#IORESOURCE_PREFETCH\">IORESOURCE_PREFETCH</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;<span class=\"ts\"/><span class=\"comment\">/* Exact match */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We can't insert a non-prefetch resource inside a prefetchable parent .. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_PREFETCH\">IORESOURCE_PREFETCH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* .. but we can put a prefetchable resource inside a non-prefetchable one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#best\">best</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#best\">best</a> = <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#best\">best</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_restore_bars - restore a devices BAR values (e.g. after wake-up)</span>", 
"<span class=\"comment\"> * @dev: PCI device to have its BARs restored</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Restore the BAR values for a given device, so as to make it</span>", 
"<span class=\"comment\"> * accessible by its driver.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#pci_restore_bars\">pci_restore_bars</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_update_resource\">pci_update_resource</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#pci_platform_pm_ops\">pci_platform_pm_ops</a> *<a class=\"id\" href=\"#pci_platform_pm\">pci_platform_pm</a>;", 
"", 
"int <a class=\"id\" href=\"#pci_set_platform_pm\">pci_set_platform_pm</a>(struct <a class=\"id\" href=\"#pci_platform_pm_ops\">pci_platform_pm_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#is_manageable\">is_manageable</a> || !<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#set_state\">set_state</a> || !<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#choose_state\">choose_state</a>", 
"<span class=\"ts\"/>    || !<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sleep_wake\">sleep_wake</a> || !<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#can_wakeup\">can_wakeup</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_platform_pm\">pci_platform_pm</a> = <a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#platform_pci_power_manageable\">platform_pci_power_manageable</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pci_platform_pm\">pci_platform_pm</a> ? <a class=\"id\" href=\"#pci_platform_pm\">pci_platform_pm</a>-><a class=\"id\" href=\"#is_manageable\">is_manageable</a>(<a class=\"id\" href=\"#dev\">dev</a>) : <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#platform_pci_set_power_state\">platform_pci_set_power_state</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"                                                <a class=\"id\" href=\"#pci_power_t\">pci_power_t</a> <a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pci_platform_pm\">pci_platform_pm</a> ? <a class=\"id\" href=\"#pci_platform_pm\">pci_platform_pm</a>-><a class=\"id\" href=\"#set_state\">set_state</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#t\">t</a>) : -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pci_power_t\">pci_power_t</a> <a class=\"id\" href=\"#platform_pci_choose_state\">platform_pci_choose_state</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pci_platform_pm\">pci_platform_pm</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_platform_pm\">pci_platform_pm</a>-><a class=\"id\" href=\"#choose_state\">choose_state</a>(<a class=\"id\" href=\"#dev\">dev</a>) : <a class=\"id\" href=\"#PCI_POWER_ERROR\">PCI_POWER_ERROR</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#platform_pci_can_wakeup\">platform_pci_can_wakeup</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pci_platform_pm\">pci_platform_pm</a> ? <a class=\"id\" href=\"#pci_platform_pm\">pci_platform_pm</a>-><a class=\"id\" href=\"#can_wakeup\">can_wakeup</a>(<a class=\"id\" href=\"#dev\">dev</a>) : <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#platform_pci_sleep_wake\">platform_pci_sleep_wake</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pci_platform_pm\">pci_platform_pm</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_platform_pm\">pci_platform_pm</a>-><a class=\"id\" href=\"#sleep_wake\">sleep_wake</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#enable\">enable</a>) : -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#platform_pci_run_wake\">platform_pci_run_wake</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pci_platform_pm\">pci_platform_pm</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_platform_pm\">pci_platform_pm</a>-><a class=\"id\" href=\"#run_wake\">run_wake</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#enable\">enable</a>) : -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_raw_set_power_state - Use PCI PM registers to set the power state of</span>", 
"<span class=\"comment\"> *                           given PCI device</span>", 
"<span class=\"comment\"> * @dev: PCI device to handle.</span>", 
"<span class=\"comment\"> * @state: PCI power state (D0, D1, D2, D3hot) to put the device into.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN VALUE:</span>", 
"<span class=\"comment\"> * -EINVAL if the requested state is invalid.</span>", 
"<span class=\"comment\"> * -EIO if device does not support PCI PM or its PM capabilities register has a</span>", 
"<span class=\"comment\"> * wrong version, or device doesn't support the requested state.</span>", 
"<span class=\"comment\"> * 0 if device already is in the requested state.</span>", 
"<span class=\"comment\"> * 0 if device's power state has been successfully changed.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pci_raw_set_power_state\">pci_raw_set_power_state</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pci_power_t\">pci_power_t</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#pmcsr\">pmcsr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#need_restore\">need_restore</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if we're already there */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#current_state\">current_state</a> == <a class=\"id\" href=\"#state\">state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pm_cap\">pm_cap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a> &lt; <a class=\"id\" href=\"#PCI_D0\">PCI_D0</a> || <a class=\"id\" href=\"#state\">state</a> &gt; <a class=\"id\" href=\"#PCI_D3hot\">PCI_D3hot</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Validate current state:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Can enter D0 from any state, but if we can only go deeper </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to sleep if we're already in a low power state</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#PCI_D0\">PCI_D0</a> && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#current_state\">current_state</a> <= <a class=\"id\" href=\"#PCI_D3cold\">PCI_D3cold</a>", 
"<span class=\"ts\"/>    && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#current_state\">current_state</a> &gt; <a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"invalid power transition \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"(from state %d to %d)\\n\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#current_state\">current_state</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check if this device supports the desired state */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PCI_D1\">PCI_D1</a> && !<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#d1_support\">d1_support</a>)", 
"<span class=\"ts\"/>   || (<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PCI_D2\">PCI_D2</a> && !<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#d2_support\">d2_support</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pm_cap\">pm_cap</a> + <a class=\"id\" href=\"#PCI_PM_CTRL\">PCI_PM_CTRL</a>, &amp;<a class=\"id\" href=\"#pmcsr\">pmcsr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we're (effectively) in D3, force entire word to 0.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This doesn't affect PME_Status, disables PME_En, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sets PowerState to 0.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#current_state\">current_state</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_D0\">PCI_D0</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_D1\">PCI_D1</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_D2\">PCI_D2</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmcsr\">pmcsr</a> &= ~<a class=\"id\" href=\"#PCI_PM_CTRL_STATE_MASK\">PCI_PM_CTRL_STATE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmcsr\">pmcsr</a> |= <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_D3hot\">PCI_D3hot</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_D3cold\">PCI_D3cold</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_UNKNOWN\">PCI_UNKNOWN</a>: <span class=\"comment\">/* Boot-up */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#pmcsr\">pmcsr</a> &amp; <a class=\"id\" href=\"#PCI_PM_CTRL_STATE_MASK\">PCI_PM_CTRL_STATE_MASK</a>) == <a class=\"id\" href=\"#PCI_D3hot\">PCI_D3hot</a>", 
"<span class=\"ts\"/><span class=\"ts\"/> && !(<a class=\"id\" href=\"#pmcsr\">pmcsr</a> &amp; <a class=\"id\" href=\"#PCI_PM_CTRL_NO_SOFT_RESET\">PCI_PM_CTRL_NO_SOFT_RESET</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_restore\">need_restore</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Fall-through: force to D0 */</span>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmcsr\">pmcsr</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* enter specified state */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pm_cap\">pm_cap</a> + <a class=\"id\" href=\"#PCI_PM_CTRL\">PCI_PM_CTRL</a>, <a class=\"id\" href=\"#pmcsr\">pmcsr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Mandatory power management transition delays */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* see PCI PM 1.1 5.6.1 table 18 */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PCI_D3hot\">PCI_D3hot</a> || <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#current_state\">current_state</a> == <a class=\"id\" href=\"#PCI_D3hot\">PCI_D3hot</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_d3_sleep\">pci_dev_d3_sleep</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PCI_D2\">PCI_D2</a> || <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#current_state\">current_state</a> == <a class=\"id\" href=\"#PCI_D2\">PCI_D2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(<a class=\"id\" href=\"#PCI_PM_D2_DELAY\">PCI_PM_D2_DELAY</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pm_cap\">pm_cap</a> + <a class=\"id\" href=\"#PCI_PM_CTRL\">PCI_PM_CTRL</a>, &amp;<a class=\"id\" href=\"#pmcsr\">pmcsr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#current_state\">current_state</a> = (<a class=\"id\" href=\"#pmcsr\">pmcsr</a> &amp; <a class=\"id\" href=\"#PCI_PM_CTRL_STATE_MASK\">PCI_PM_CTRL_STATE_MASK</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#current_state\">current_state</a> != <a class=\"id\" href=\"#state\">state</a> && <a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Refused to change power state, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"currently in D%d\\n\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#current_state\">current_state</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* According to section 5.4.1 of the \"PCI BUS POWER MANAGEMENT</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * INTERFACE SPECIFICATION, REV. 1.2\", a device transitioning</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from D3hot to D0 _may_ perform an internal reset, thereby</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * going to \"D0 Uninitialized\" rather than \"D0 Initialized\".</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For example, at least some versions of the 3c905B and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 3c556B exhibit this behaviour.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At least some laptop BIOSen (e.g. the Thinkpad T21) leave</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * devices in a D3hot state at boot.  Consequently, we need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * restore at least the BARs so that the device will be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * accessible to its driver.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_restore\">need_restore</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_restore_bars\">pci_restore_bars</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcie_aspm_pm_state_change\">pcie_aspm_pm_state_change</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_update_current_state - Read PCI power state of given device from its</span>", 
"<span class=\"comment\"> *                            PCI PM registers and cache it</span>", 
"<span class=\"comment\"> * @dev: PCI device to handle.</span>", 
"<span class=\"comment\"> * @state: State to cache in case the device doesn't have the PM capability</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_update_current_state\">pci_update_current_state</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pci_power_t\">pci_power_t</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pm_cap\">pm_cap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#pmcsr\">pmcsr</a>;", 
];
xr_frag_insert('l/35/fbb08236eba21a174e506c0b858ee93fb1f621.xr', __xr_tmp);
