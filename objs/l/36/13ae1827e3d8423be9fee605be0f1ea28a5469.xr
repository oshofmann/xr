var __xr_tmp = [
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#latest_time\">latest_time</a> = { 0, 0 };", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scan\">scan</a>-><a class=\"id\" href=\"#heap\">heap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The caller supplied our heap and pre-allocated its memory */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#heap\">heap</a> = <a class=\"id\" href=\"#scan\">scan</a>-><a class=\"id\" href=\"#heap\">heap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#heap\">heap</a>-><a class=\"id\" href=\"#gt\">gt</a> = &amp;<a class=\"id\" href=\"#started_after\">started_after</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We need to allocate our own heap memory */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#heap\">heap</a> = &amp;<a class=\"id\" href=\"#tmp_heap\">tmp_heap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#heap_init\">heap_init</a>(<a class=\"id\" href=\"#heap\">heap</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, &amp;<a class=\"id\" href=\"#started_after\">started_after</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cannot allocate the heap */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Scan tasks in the cgroup, using the scanner's \"test_task\" callback</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to determine which are of interest, and using the scanner's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * \"process_task\" callback to process any of them that need an update.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since we don't want to hold any locks during the task updates,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * gather tasks to be processed in a heap structure.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The heap is sorted by descending task start time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the statically-sized heap fills up, we overflow tasks that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * started later, and in future iterations only consider tasks that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * started after the latest task in the previous pass. This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * guarantees forward progress and that we don't miss any tasks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#heap\">heap</a>-><a class=\"id\" href=\"#size\">size</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_iter_start\">cgroup_iter_start</a>(<a class=\"id\" href=\"#scan\">scan</a>-><a class=\"id\" href=\"#cg\">cg</a>, &amp;<a class=\"id\" href=\"#it\">it</a>);", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#cgroup_iter_next\">cgroup_iter_next</a>(<a class=\"id\" href=\"#scan\">scan</a>-><a class=\"id\" href=\"#cg\">cg</a>, &amp;<a class=\"id\" href=\"#it\">it</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Only affect tasks that qualify per the caller's callback,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if he provided one</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scan\">scan</a>-><a class=\"id\" href=\"#test_task\">test_task</a> && !<a class=\"id\" href=\"#scan\">scan</a>-><a class=\"id\" href=\"#test_task\">test_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#scan\">scan</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Only process tasks that started after the last task</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we processed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#started_after_time\">started_after_time</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#latest_time\">latest_time</a>, <a class=\"id\" href=\"#latest_task\">latest_task</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dropped\">dropped</a> = <a class=\"id\" href=\"#heap_insert\">heap_insert</a>(<a class=\"id\" href=\"#heap\">heap</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dropped\">dropped</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The new task was inserted; the heap wasn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * previously full</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#dropped\">dropped</a> != <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The new task was inserted, and pushed out a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * different task</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#dropped\">dropped</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Else the new task was newer than anything already in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the heap and wasn't inserted</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_iter_end\">cgroup_iter_end</a>(<a class=\"id\" href=\"#scan\">scan</a>-><a class=\"id\" href=\"#cg\">cg</a>, &amp;<a class=\"id\" href=\"#it\">it</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#heap\">heap</a>-><a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#heap\">heap</a>-><a class=\"id\" href=\"#size\">size</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#heap\">heap</a>-><a class=\"id\" href=\"#ptrs\">ptrs</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#latest_time\">latest_time</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#start_time\">start_time</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#latest_task\">latest_task</a> = <a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Process the task per the caller's callback */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scan\">scan</a>-><a class=\"id\" href=\"#process_task\">process_task</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#scan\">scan</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we had to process any tasks at all, scan again</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in case some of them were in the middle of forking</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * children that didn't get processed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Not the most efficient way to do it, but it avoids</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * having to take callback_mutex in the fork path</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#heap\">heap</a> == &amp;<a class=\"id\" href=\"#tmp_heap\">tmp_heap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#heap_free\">heap_free</a>(&amp;<a class=\"id\" href=\"#tmp_heap\">tmp_heap</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Stuff for reading the 'tasks'/'procs' files.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Reading this file can return large amounts of data if a cgroup has</span>", 
"<span class=\"comment\"> * *lots* of attached tasks. So it may need several calls to read(),</span>", 
"<span class=\"comment\"> * but we cannot guarantee that the information we produce is correct</span>", 
"<span class=\"comment\"> * unless we produce it entirely atomically.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The following two functions \"fix\" the issue where there are more pids</span>", 
"<span class=\"comment\"> * than kmalloc will give memory for; in such cases, we use vmalloc/vfree.</span>", 
"<span class=\"comment\"> * TODO: replace with a kernel-wide solution to this problem</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PIDLIST_TOO_LARGE\">PIDLIST_TOO_LARGE</a>(<a class=\"id\" href=\"#c\">c</a>) ((<a class=\"id\" href=\"#c\">c</a>) * sizeof(<a class=\"id\" href=\"#pid_t\">pid_t</a>) &gt; (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> * 2))", 
"static void *<a class=\"id\" href=\"#pidlist_allocate\">pidlist_allocate</a>(int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PIDLIST_TOO_LARGE\">PIDLIST_TOO_LARGE</a>(<a class=\"id\" href=\"#count\">count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#vmalloc\">vmalloc</a>(<a class=\"id\" href=\"#count\">count</a> * sizeof(<a class=\"id\" href=\"#pid_t\">pid_t</a>));", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#count\">count</a> * sizeof(<a class=\"id\" href=\"#pid_t\">pid_t</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"}", 
"static void <a class=\"id\" href=\"#pidlist_free\">pidlist_free</a>(void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_vmalloc_addr\">is_vmalloc_addr</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"static void *<a class=\"id\" href=\"#pidlist_resize\">pidlist_resize</a>(void *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#newcount\">newcount</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#newlist\">newlist</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* note: if new alloc fails, old p will still be valid either way */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_vmalloc_addr\">is_vmalloc_addr</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newlist\">newlist</a> = <a class=\"id\" href=\"#vmalloc\">vmalloc</a>(<a class=\"id\" href=\"#newcount\">newcount</a> * sizeof(<a class=\"id\" href=\"#pid_t\">pid_t</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#newlist\">newlist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#newlist\">newlist</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#newcount\">newcount</a> * sizeof(<a class=\"id\" href=\"#pid_t\">pid_t</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newlist\">newlist</a> = <a class=\"id\" href=\"#krealloc\">krealloc</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#newcount\">newcount</a> * sizeof(<a class=\"id\" href=\"#pid_t\">pid_t</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#newlist\">newlist</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * pidlist_uniq - given a kmalloc()ed list, strip out all duplicate entries</span>", 
"<span class=\"comment\"> * If the new stripped list is sufficiently smaller and there's enough memory</span>", 
"<span class=\"comment\"> * to allocate a new buffer, will let go of the unneeded memory. Returns the</span>", 
"<span class=\"comment\"> * number of unique elements.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/* is the size difference enough that we should re-allocate the array? */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PIDLIST_REALLOC_DIFFERENCE\">PIDLIST_REALLOC_DIFFERENCE</a>(<a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#new\">new</a>) ((<a class=\"id\" href=\"#old\">old</a>) - <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> >= (<a class=\"id\" href=\"#new\">new</a>))", 
"static int <a class=\"id\" href=\"#pidlist_uniq\">pidlist_uniq</a>(<a class=\"id\" href=\"#pid_t\">pid_t</a> **<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#dest\">dest</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> *<a class=\"id\" href=\"#list\">list</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> *<a class=\"id\" href=\"#newlist\">newlist</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we presume the 0th element is unique, so i starts at 1. trivial</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * edge cases first; no work needs to be done for either</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> == 0 || <a class=\"id\" href=\"#length\">length</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* src and dest walk down the list; dest counts unique elements */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#src\">src</a> = 1; <a class=\"id\" href=\"#src\">src</a> &lt; <a class=\"id\" href=\"#length\">length</a>; <a class=\"id\" href=\"#src\">src</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* find next unique element */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#list\">list</a>[<a class=\"id\" href=\"#src\">src</a>] == <a class=\"id\" href=\"#list\">list</a>[<a class=\"id\" href=\"#src\">src</a>-1]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#src\">src</a> == <a class=\"id\" href=\"#length\">length</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#after\">after</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* dest always points to where the next unique element goes */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>[<a class=\"id\" href=\"#dest\">dest</a>] = <a class=\"id\" href=\"#list\">list</a>[<a class=\"id\" href=\"#src\">src</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>++;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#after\">after</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the length difference is large enough, we want to allocate a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * smaller buffer to save memory. if this fails due to out of memory,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we'll just stay with what we've got.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PIDLIST_REALLOC_DIFFERENCE\">PIDLIST_REALLOC_DIFFERENCE</a>(<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#dest\">dest</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newlist\">newlist</a> = <a class=\"id\" href=\"#pidlist_resize\">pidlist_resize</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#dest\">dest</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#newlist\">newlist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#newlist\">newlist</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dest\">dest</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cmppid\">cmppid</a>(const void *<a class=\"id\" href=\"#a\">a</a>, const void *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>return *(<a class=\"id\" href=\"#pid_t\">pid_t</a> *)<a class=\"id\" href=\"#a\">a</a> - *(<a class=\"id\" href=\"#pid_t\">pid_t</a> *)<a class=\"id\" href=\"#b\">b</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * find the appropriate pidlist for our purpose (given procs vs tasks)</span>", 
"<span class=\"comment\"> * returns with the lock on that pidlist already held, and takes care</span>", 
"<span class=\"comment\"> * of the use count, or returns NULL with no locks held if we're out of</span>", 
"<span class=\"comment\"> * memory.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#cgroup_pidlist\">cgroup_pidlist</a> *<a class=\"id\" href=\"#cgroup_pidlist_find\">cgroup_pidlist_find</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  enum <a class=\"id\" href=\"#cgroup_filetype\">cgroup_filetype</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_pidlist\">cgroup_pidlist</a> *<a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* don't need task_nsproxy() if we're looking at ourself */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>-><a class=\"id\" href=\"#pid_ns\">pid_ns</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can't drop the pidlist_mutex before taking the l-&gt;mutex in case</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the last ref-holder is trying to remove l from the list at the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * time. Holding the pidlist_mutex precludes somebody taking whichever</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * list we find out from under us - compare release_pid_array().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#pidlist_mutex\">pidlist_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#l\">l</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#pidlists\">pidlists</a>, <a class=\"id\" href=\"#links\">links</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#type\">type</a> && <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#ns\">ns</a> == <a class=\"id\" href=\"#ns\">ns</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* make sure l doesn't vanish out from under us */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#pidlist_mutex\">pidlist_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* entry not found; create a new one */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#cgroup_pidlist\">cgroup_pidlist</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#l\">l</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#pidlist_mutex\">pidlist_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_rwsem\">init_rwsem</a>(&amp;<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#get_pid_ns\">get_pid_ns</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#use_count\">use_count</a> = 0; <span class=\"comment\">/* don't increment here */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#cgrp\">cgrp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#links\">links</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#pidlists\">pidlists</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#pidlist_mutex\">pidlist_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#l\">l</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Load a cgroup's pidarray with either procs' tgids or tasks' pids</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pidlist_array_load\">pidlist_array_load</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, enum <a class=\"id\" href=\"#cgroup_filetype\">cgroup_filetype</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#cgroup_pidlist\">cgroup_pidlist</a> **<a class=\"id\" href=\"#lp\">lp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> *<a class=\"id\" href=\"#array\">array</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#n\">n</a> = 0; <span class=\"comment\">/* used for populating the array */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_iter\">cgroup_iter</a> <a class=\"id\" href=\"#it\">it</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_pidlist\">cgroup_pidlist</a> *<a class=\"id\" href=\"#l\">l</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If cgroup gets more users after we read count, we won't have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * enough space - tough.  This race is indistinguishable to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * caller from the case that the additional cgroup users didn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * show up until sometime later on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#cgroup_task_count\">cgroup_task_count</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#array\">array</a> = <a class=\"id\" href=\"#pidlist_allocate\">pidlist_allocate</a>(<a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#array\">array</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* now, populate the array */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_iter_start\">cgroup_iter_start</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, &amp;<a class=\"id\" href=\"#it\">it</a>);", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#cgroup_iter_next\">cgroup_iter_next</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, &amp;<a class=\"id\" href=\"#it\">it</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#n\">n</a> == <a class=\"id\" href=\"#length\">length</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* get tgid or pid for procs or tasks file respectively */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#CGROUP_FILE_PROCS\">CGROUP_FILE_PROCS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#task_tgid_vnr\">task_tgid_vnr</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> &gt; 0) <span class=\"comment\">/* make sure to only use valid results */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#array\">array</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_iter_end\">cgroup_iter_end</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, &amp;<a class=\"id\" href=\"#it\">it</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* now sort &amp; (if procs) strip out duplicates */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sort\">sort</a>(<a class=\"id\" href=\"#array\">array</a>, <a class=\"id\" href=\"#length\">length</a>, sizeof(<a class=\"id\" href=\"#pid_t\">pid_t</a>), <a class=\"id\" href=\"#cmppid\">cmppid</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#CGROUP_FILE_PROCS\">CGROUP_FILE_PROCS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#pidlist_uniq\">pidlist_uniq</a>(&amp;<a class=\"id\" href=\"#array\">array</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#cgroup_pidlist_find\">cgroup_pidlist_find</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#l\">l</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pidlist_free\">pidlist_free</a>(<a class=\"id\" href=\"#array\">array</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* store array, freeing old if necessary - lock already held */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pidlist_free\">pidlist_free</a>(<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#array\">array</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#use_count\">use_count</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#lp\">lp</a> = <a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cgroupstats_build - build and fill cgroupstats</span>", 
"<span class=\"comment\"> * @stats: cgroupstats to fill information into</span>", 
"<span class=\"comment\"> * @dentry: A dentry entry belonging to the cgroup for which stats have</span>", 
"<span class=\"comment\"> * been requested.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Build and fill cgroupstats so that taskstats can export it to user</span>", 
"<span class=\"comment\"> * space.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cgroupstats_build\">cgroupstats_build</a>(struct <a class=\"id\" href=\"#cgroupstats\">cgroupstats</a> *<a class=\"id\" href=\"#stats\">stats</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_iter\">cgroup_iter</a> <a class=\"id\" href=\"#it\">it</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Validate dentry by checking the superblock operations,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and make sure it's a directory.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_sb\">d_sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a> != &amp;<a class=\"id\" href=\"#cgroup_ops\">cgroup_ops</a> ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/> goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_fsdata\">d_fsdata</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_iter_start\">cgroup_iter_start</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, &amp;<a class=\"id\" href=\"#it\">it</a>);", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#cgroup_iter_next\">cgroup_iter_next</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, &amp;<a class=\"id\" href=\"#it\">it</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#nr_sleeping\">nr_sleeping</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#nr_uninterruptible\">nr_uninterruptible</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#TASK_STOPPED\">TASK_STOPPED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#nr_stopped\">nr_stopped</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delayacct_is_task_waiting_on_io\">delayacct_is_task_waiting_on_io</a>(<a class=\"id\" href=\"#tsk\">tsk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#nr_io_wait\">nr_io_wait</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_iter_end\">cgroup_iter_end</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, &amp;<a class=\"id\" href=\"#it\">it</a>);", 
"", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * seq_file methods for the tasks/procs files. The seq_file position is the</span>", 
"<span class=\"comment\"> * next pid to display; the seq_file iterator is a pointer to the pid</span>", 
"<span class=\"comment\"> * in the cgroup-&gt;l-&gt;list array.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void *<a class=\"id\" href=\"#cgroup_pidlist_start\">cgroup_pidlist_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Initially we receive a position value that corresponds to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * one more than the last pid shown (or 0 on the first call or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * after a seek to the start). Use a binary-search to find the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * next pid to display, if any</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_pidlist\">cgroup_pidlist</a> *<a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a> = 0, <a class=\"id\" href=\"#pid\">pid</a> = *<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#index\">index</a> &lt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#mid\">mid</a> = (<a class=\"id\" href=\"#index\">index</a> + <a class=\"id\" href=\"#end\">end</a>) / 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#list\">list</a>[<a class=\"id\" href=\"#mid\">mid</a>] == <a class=\"id\" href=\"#pid\">pid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#mid\">mid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#list\">list</a>[<a class=\"id\" href=\"#mid\">mid</a>] <= <a class=\"id\" href=\"#pid\">pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#mid\">mid</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#mid\">mid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* If we're off the end of the array, we're done */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> >= <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#length\">length</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Update the abstract position to be the actual pid that we found */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#list\">list</a> + <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pos\">pos</a> = *<a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#iter\">iter</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cgroup_pidlist_stop\">cgroup_pidlist_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_pidlist\">cgroup_pidlist</a> *<a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#cgroup_pidlist_next\">cgroup_pidlist_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_pidlist\">cgroup_pidlist</a> *<a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> *<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#list\">list</a> + <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Advance to the next pid in the array. If this goes off the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * end, we're done</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> >= <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pos\">pos</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cgroup_pidlist_show\">cgroup_pidlist_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"%d\\n\", *(int *)<a class=\"id\" href=\"#v\">v</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * seq_operations functions for iterating on pidlists through seq_file -</span>", 
"<span class=\"comment\"> * independent of whether it's tasks or procs</span>", 
"<span class=\"comment\"> */</span>", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#cgroup_pidlist_seq_operations\">cgroup_pidlist_seq_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#cgroup_pidlist_start\">cgroup_pidlist_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a> = <a class=\"id\" href=\"#cgroup_pidlist_stop\">cgroup_pidlist_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#cgroup_pidlist_next\">cgroup_pidlist_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a> = <a class=\"id\" href=\"#cgroup_pidlist_show\">cgroup_pidlist_show</a>,", 
"};", 
"", 
"static void <a class=\"id\" href=\"#cgroup_release_pid_array\">cgroup_release_pid_array</a>(struct <a class=\"id\" href=\"#cgroup_pidlist\">cgroup_pidlist</a> *<a class=\"id\" href=\"#l\">l</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the case where we're the last user of this particular pidlist will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have us remove it from the cgroup's list, which entails taking the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mutex. since in pidlist_find the pidlist-&gt;lock depends on cgroup-&gt;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pidlist_mutex, we have to take pidlist_mutex first.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#pidlist_mutex\">pidlist_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#use_count\">use_count</a>);", 
"<span class=\"ts\"/>if (!--<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#use_count\">use_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we're the last user if refcount is 0; remove and free */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#links\">links</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#pidlist_mutex\">pidlist_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pidlist_free\">pidlist_free</a>(<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_pid_ns\">put_pid_ns</a>(<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#l\">l</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#pidlist_mutex\">pidlist_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cgroup_pidlist_release\">cgroup_pidlist_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_pidlist\">cgroup_pidlist</a> *<a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the seq_file will only be initialized if the file was opened for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reading; hence we check if it's not null only in that case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = ((struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *)<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>)-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_release_pid_array\">cgroup_release_pid_array</a>(<a class=\"id\" href=\"#l\">l</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_release\">seq_release</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#cgroup_pidlist_operations\">cgroup_pidlist_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a> = <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a> = <a class=\"id\" href=\"#cgroup_file_write\">cgroup_file_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#cgroup_pidlist_release\">cgroup_pidlist_release</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The following functions handle opens on a file that displays a pidlist</span>", 
"<span class=\"comment\"> * (tasks or procs). Prepare an array of the process/thread IDs of whoever's</span>", 
"<span class=\"comment\"> * in the cgroup.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/* helper function for the two below it */</span>", 
"static int <a class=\"id\" href=\"#cgroup_pidlist_open\">cgroup_pidlist_open</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, enum <a class=\"id\" href=\"#cgroup_filetype\">cgroup_filetype</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#__d_cgrp\">__d_cgrp</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_dentry\">f_dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_pidlist\">cgroup_pidlist</a> *<a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Nothing to do for write-only files */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* have the array populated */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#pidlist_array_load\">pidlist_array_load</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#type\">type</a>, &amp;<a class=\"id\" href=\"#l\">l</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* configure file information */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a> = &amp;<a class=\"id\" href=\"#cgroup_pidlist_operations\">cgroup_pidlist_operations</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#cgroup_pidlist_seq_operations\">cgroup_pidlist_seq_operations</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgroup_release_pid_array\">cgroup_release_pid_array</a>(<a class=\"id\" href=\"#l\">l</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>((struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *)<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>)-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"static int <a class=\"id\" href=\"#cgroup_tasks_open\">cgroup_tasks_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#unused\">unused</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cgroup_pidlist_open\">cgroup_pidlist_open</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#CGROUP_FILE_TASKS\">CGROUP_FILE_TASKS</a>);", 
"}", 
"static int <a class=\"id\" href=\"#cgroup_procs_open\">cgroup_procs_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#unused\">unused</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cgroup_pidlist_open\">cgroup_pidlist_open</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#CGROUP_FILE_PROCS\">CGROUP_FILE_PROCS</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cgroup_read_notify_on_release\">cgroup_read_notify_on_release</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#notify_on_release\">notify_on_release</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cgroup_write_notify_on_release\">cgroup_write_notify_on_release</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#CGRP_RELEASABLE\">CGRP_RELEASABLE</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#CGRP_NOTIFY_ON_RELEASE\">CGRP_NOTIFY_ON_RELEASE</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#CGRP_NOTIFY_ON_RELEASE\">CGRP_NOTIFY_ON_RELEASE</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unregister event and free resources.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Gets called from workqueue.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cgroup_event_remove\">cgroup_event_remove</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_event\">cgroup_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#cgroup_event\">cgroup_event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove\">remove</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cgrp\">cgrp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#unregister_event\">unregister_event</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cft\">cft</a>, <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#eventfd\">eventfd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#eventfd_ctx_put\">eventfd_ctx_put</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#eventfd\">eventfd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#dentry\">dentry</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Gets called on POLLHUP on eventfd when user closes it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with wqh-&gt;lock held and interrupts disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cgroup_event_wake\">cgroup_event_wake</a>(<a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>, unsigned <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#sync\">sync</a>, void *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_event\">cgroup_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#wait\">wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_event\">cgroup_event</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cgrp\">cgrp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a> = (unsigned long)<a class=\"id\" href=\"#key\">key</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#POLLHUP\">POLLHUP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__remove_wait_queue\">__remove_wait_queue</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#wqh\">wqh</a>, &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#event_list_lock\">event_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#event_list_lock\">event_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We are in atomic context, but cgroup_event_remove() may</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * sleep, so we have to call it in workqueue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#remove\">remove</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cgroup_event_ptable_queue_proc\">cgroup_event_ptable_queue_proc</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#wqh\">wqh</a>, <a class=\"id\" href=\"#poll_table\">poll_table</a> *<a class=\"id\" href=\"#pt\">pt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_event\">cgroup_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#pt\">pt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_event\">cgroup_event</a>, <a class=\"id\" href=\"#pt\">pt</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#wqh\">wqh</a> = <a class=\"id\" href=\"#wqh\">wqh</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_wait_queue\">add_wait_queue</a>(<a class=\"id\" href=\"#wqh\">wqh</a>, &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Parse input and register new cgroup event handler.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Input must be in format '&lt;event_fd&gt; &lt;control_fd&gt; &lt;args&gt;'.</span>", 
"<span class=\"comment\"> * Interpretation of args is defined by control file implementation.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cgroup_write_event_control\">cgroup_write_event_control</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const char *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_event\">cgroup_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#efd\">efd</a>, <a class=\"id\" href=\"#cfd\">cfd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#efile\">efile</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#cfile\">cfile</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#endp\">endp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#efd\">efd</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, &amp;<a class=\"id\" href=\"#endp\">endp</a>, 10);", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#endp\">endp</a> != ' ')", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#endp\">endp</a> + 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfd\">cfd</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, &amp;<a class=\"id\" href=\"#endp\">endp</a>, 10);", 
"<span class=\"ts\"/>if ((*<a class=\"id\" href=\"#endp\">endp</a> != ' ') && (*<a class=\"id\" href=\"#endp\">endp</a> != '\\0'))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#endp\">endp</a> + 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#event\">event</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#cgrp\">cgrp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_poll_funcptr\">init_poll_funcptr</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pt\">pt</a>, <a class=\"id\" href=\"#cgroup_event_ptable_queue_proc\">cgroup_event_ptable_queue_proc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_func_entry\">init_waitqueue_func_entry</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#cgroup_event_wake\">cgroup_event_wake</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#remove\">remove</a>, <a class=\"id\" href=\"#cgroup_event_remove\">cgroup_event_remove</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#efile\">efile</a> = <a class=\"id\" href=\"#eventfd_fget\">eventfd_fget</a>(<a class=\"id\" href=\"#efd\">efd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#efile\">efile</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#efile\">efile</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#eventfd\">eventfd</a> = <a class=\"id\" href=\"#eventfd_ctx_fileget\">eventfd_ctx_fileget</a>(<a class=\"id\" href=\"#efile\">efile</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#eventfd\">eventfd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#eventfd\">eventfd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfile\">cfile</a> = <a class=\"id\" href=\"#fget\">fget</a>(<a class=\"id\" href=\"#cfd\">cfd</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfile\">cfile</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the process need read permission on control file */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#file_permission\">file_permission</a>(<a class=\"id\" href=\"#cfile\">cfile</a>, <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cft\">cft</a> = <a class=\"id\" href=\"#__file_cft\">__file_cft</a>(<a class=\"id\" href=\"#cfile\">cfile</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cft\">cft</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cft\">cft</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#register_event\">register_event</a> || !<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#unregister_event\">unregister_event</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#register_event\">register_event</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#eventfd\">eventfd</a>, <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#efile\">efile</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#poll\">poll</a>(<a class=\"id\" href=\"#efile\">efile</a>, &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pt\">pt</a>) &amp; <a class=\"id\" href=\"#POLLHUP\">POLLHUP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#unregister_event\">unregister_event</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cft\">cft</a>, <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#eventfd\">eventfd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Events should be removed after rmdir of cgroup directory, but before</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * destroying subsystem state objects. Let's take reference to cgroup</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * directory dentry to do that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#dentry\">dentry</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#event_list_lock\">event_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#event_list\">event_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#event_list_lock\">event_list_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#cfile\">cfile</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#efile\">efile</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfile\">cfile</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#cfile\">cfile</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a> && <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#eventfd\">eventfd</a> && !<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#eventfd\">eventfd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eventfd_ctx_put\">eventfd_ctx_put</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#eventfd\">eventfd</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR_OR_NULL\">IS_ERR_OR_NULL</a>(<a class=\"id\" href=\"#efile\">efile</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#efile\">efile</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * for the common functions, 'private' gives the type of file</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/* for hysterical raisins, we can't put this on the older files */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CGROUP_FILE_GENERIC_PREFIX\">CGROUP_FILE_GENERIC_PREFIX</a> \"cgroup.\"", 
"static struct <a class=\"id\" href=\"#cftype\">cftype</a> <a class=\"id\" href=\"#files\">files</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"tasks\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> = <a class=\"id\" href=\"#cgroup_tasks_open\">cgroup_tasks_open</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_u64\">write_u64</a> = <a class=\"id\" href=\"#cgroup_tasks_write\">cgroup_tasks_write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#cgroup_pidlist_release\">cgroup_pidlist_release</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a> | <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#CGROUP_FILE_GENERIC_PREFIX\">CGROUP_FILE_GENERIC_PREFIX</a> \"procs\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> = <a class=\"id\" href=\"#cgroup_procs_open\">cgroup_procs_open</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* .write_u64 = cgroup_procs_write, TODO */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#cgroup_pidlist_release\">cgroup_pidlist_release</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"notify_on_release\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#cgroup_read_notify_on_release\">cgroup_read_notify_on_release</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_u64\">write_u64</a> = <a class=\"id\" href=\"#cgroup_write_notify_on_release\">cgroup_write_notify_on_release</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#CGROUP_FILE_GENERIC_PREFIX\">CGROUP_FILE_GENERIC_PREFIX</a> \"event_control\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_string\">write_string</a> = <a class=\"id\" href=\"#cgroup_write_event_control\">cgroup_write_event_control</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#S_IWUGO\">S_IWUGO</a>,", 
"<span class=\"ts\"/>},", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#cftype\">cftype</a> <a class=\"id\" href=\"#cft_release_agent\">cft_release_agent</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"release_agent\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read_seq_string\">read_seq_string</a> = <a class=\"id\" href=\"#cgroup_release_agent_show\">cgroup_release_agent_show</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_string\">write_string</a> = <a class=\"id\" href=\"#cgroup_release_agent_write\">cgroup_release_agent_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#max_write_len\">max_write_len</a> = <a class=\"id\" href=\"#PATH_MAX\">PATH_MAX</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#cgroup_populate_dir\">cgroup_populate_dir</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First clear out any existing files */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_clear_directory\">cgroup_clear_directory</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#dentry\">dentry</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#cgroup_add_files\">cgroup_add_files</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#files\">files</a>, <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#files\">files</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cgrp\">cgrp</a> == <a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#top_cgroup\">top_cgroup</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#cgroup_add_file\">cgroup_add_file</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#cft_release_agent\">cft_release_agent</a>)) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_subsys\">for_each_subsys</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#ss\">ss</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#populate\">populate</a> && (<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#populate\">populate</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#cgrp\">cgrp</a>)) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* This cgroup is ready now */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_subsys\">for_each_subsys</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#ss\">ss</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a> = <a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Update id-&gt;css pointer and make this css visible from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * CSS ID functions. This pointer will be dereferened</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * from RCU-read-side without locks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#id\">id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#css\">css</a>, <a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#init_cgroup_css\">init_cgroup_css</a>(struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#cgroup\">cgroup</a> = <a class=\"id\" href=\"#cgrp\">cgrp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cgrp\">cgrp</a> == <a class=\"id\" href=\"#dummytop\">dummytop</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#CSS_ROOT\">CSS_ROOT</a>, &amp;<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>] = <a class=\"id\" href=\"#css\">css</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cgroup_lock_hierarchy\">cgroup_lock_hierarchy</a>(struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* We need to take each hierarchy_mutex in a consistent order */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No worry about a race with rebind_subsystems that might mess up the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * locking order, since both parties are under cgroup_mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CGROUP_SUBSYS_COUNT\">CGROUP_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a> = <a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#root\">root</a> == <a class=\"id\" href=\"#root\">root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#hierarchy_mutex\">hierarchy_mutex</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cgroup_unlock_hierarchy\">cgroup_unlock_hierarchy</a>(struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CGROUP_SUBSYS_COUNT\">CGROUP_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a> = <a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#root\">root</a> == <a class=\"id\" href=\"#root\">root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#hierarchy_mutex\">hierarchy_mutex</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cgroup_create - create a cgroup</span>", 
"<span class=\"comment\"> * @parent: cgroup that will be parent of the new cgroup</span>", 
"<span class=\"comment\"> * @dentry: dentry of the new cgroup</span>", 
"<span class=\"comment\"> * @mode: mode to set on new inode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called with the mutex on the parent inode held</span>", 
"<span class=\"comment\"> */</span>", 
"static long <a class=\"id\" href=\"#cgroup_create\">cgroup_create</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#sb\">sb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#cgrp\">cgrp</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Grab a reference on the superblock so the hierarchy doesn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * get deleted on unmount if there are child cgroups.  This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can be done outside cgroup_mutex, since the sb can't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disappear while someone has an open control file on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_active\">s_active</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_cgroup_housekeeping\">init_cgroup_housekeeping</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#top_cgroup\">top_cgroup</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#top_cgroup\">top_cgroup</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_on_release\">notify_on_release</a>(<a class=\"id\" href=\"#parent\">parent</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#CGRP_NOTIFY_ON_RELEASE\">CGRP_NOTIFY_ON_RELEASE</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_subsys\">for_each_subsys</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#ss\">ss</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a> = <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#create\">create</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#css\">css</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_destroy\">err_destroy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_cgroup_css\">init_cgroup_css</a>(<a class=\"id\" href=\"#css\">css</a>, <a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#use_id\">use_id</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#alloc_css_id\">alloc_css_id</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_destroy\">err_destroy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* At error, -&gt;destroy() callback has to free assigned ID. */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_lock_hierarchy\">cgroup_lock_hierarchy</a>(<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#sibling\">sibling</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#children\">children</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_unlock_hierarchy\">cgroup_unlock_hierarchy</a>(<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#number_of_cgroups\">number_of_cgroups</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#cgroup_create_dir\">cgroup_create_dir</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_remove\">err_remove</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The cgroup directory was pre-locked for us */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#mutex_is_locked\">mutex_is_locked</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#cgroup_populate_dir\">cgroup_populate_dir</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* If err &lt; 0, we have a half-filled directory - oh well ;) */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#err_remove\">err_remove</a>:", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_lock_hierarchy\">cgroup_lock_hierarchy</a>(<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#sibling\">sibling</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_unlock_hierarchy\">cgroup_unlock_hierarchy</a>(<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#number_of_cgroups\">number_of_cgroups</a>--;", 
"", 
" <a class=\"id\" href=\"#err_destroy\">err_destroy</a>:", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_subsys\">for_each_subsys</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#ss\">ss</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#destroy\">destroy</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Release the reference count that we took on the superblock */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#deactivate_super\">deactivate_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cgroup_mkdir\">cgroup_mkdir</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, int <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#c_parent\">c_parent</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>-><a class=\"id\" href=\"#d_fsdata\">d_fsdata</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the vfs holds inode-&gt;i_mutex already */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cgroup_create\">cgroup_create</a>(<a class=\"id\" href=\"#c_parent\">c_parent</a>, <a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#mode\">mode</a> | <a class=\"id\" href=\"#S_IFDIR\">S_IFDIR</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cgroup_has_css_refs\">cgroup_has_css_refs</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Check the reference count on each subsystem. Since we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * already established that there are no tasks in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cgroup, if the css refcount is also 1, then there should</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be no outstanding references, so the subsystem is safe to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * destroy. We scan across all subsystems rather than using</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the per-hierarchy linked list of mounted subsystems since</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we can be called via check_for_release() with no</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * synchronization other than RCU, and the subsystem linked</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * list isn't RCU-safe */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We won't need to lock the subsys array, because the subsystems</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we're concerned about aren't going anywhere since our cgroup root</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * has a reference on them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CGROUP_SUBSYS_COUNT\">CGROUP_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a> = <a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Skip subsystems not present or not in this hierarchy */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#root\">root</a> != <a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css\">css</a> = <a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* When called from check_for_release() it's possible</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that by this point the cgroup has been removed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and the css deleted. But a false-positive doesn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * matter, since it can only happen if the cgroup</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * has been deleted and hence no longer needs the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * release agent to be called anyway. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#css\">css</a> && (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>) &gt; 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Atomically mark all (or else none) of the cgroup's CSS objects as</span>", 
"<span class=\"comment\"> * CSS_REMOVED. Return true on success, or false if the cgroup has</span>", 
"<span class=\"comment\"> * busy subsystems. Call with cgroup_mutex held</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#cgroup_clear_css_refs\">cgroup_clear_css_refs</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#failed\">failed</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_subsys\">for_each_subsys</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#ss\">ss</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a> = <a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#refcnt\">refcnt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We can only remove a CSS with a refcnt==1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#refcnt\">refcnt</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#refcnt\">refcnt</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#failed\">failed</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Drop the refcnt to 0 while we check other</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * subsystems. This will cause any racing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * css_tryget() to spin until we set the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * CSS_REMOVED bits or abort</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_cmpxchg\">atomic_cmpxchg</a>(&amp;<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>, <a class=\"id\" href=\"#refcnt\">refcnt</a>, 0) == <a class=\"id\" href=\"#refcnt\">refcnt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
" <a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_subsys\">for_each_subsys</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#ss\">ss</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a> = <a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#failed\">failed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Restore old refcnt if we previously managed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to clear it from 1 to 0</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Commit the fact that the CSS is removed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#CSS_REMOVED\">CSS_REMOVED</a>, &amp;<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#failed\">failed</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cgroup_rmdir\">cgroup_rmdir</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#unused_dir\">unused_dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_fsdata\">d_fsdata</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d\">d</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_event\">cgroup_event</a> *<a class=\"id\" href=\"#event\">event</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the vfs holds both inode-&gt;i_mutex already */</span>", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#count\">count</a>) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#children\">children</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In general, subsystem has no css-&gt;refcnt after pre_destroy(). But</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in racy cases, subsystem may have to get css-&gt;refcnt after</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pre_destroy() and it makes rmdir return with -EBUSY. This sometimes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * make rmdir return -EBUSY too often. To avoid that, we use waitqueue</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for cgroup's rmdir. CGRP_WAIT_ON_RMDIR is for synchronizing rmdir</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and subsystem's reference count handling. Please see css_get/put</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and css_tryget() and cgroup_wakeup_rmdir_waiter() implementation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#CGRP_WAIT_ON_RMDIR\">CGRP_WAIT_ON_RMDIR</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Call pre_destroy handlers of subsys. Notify subsystems</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that rmdir() request comes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cgroup_call_pre_destroy\">cgroup_call_pre_destroy</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#CGRP_WAIT_ON_RMDIR\">CGRP_WAIT_ON_RMDIR</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#count\">count</a>) || !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#children\">children</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#CGRP_WAIT_ON_RMDIR\">CGRP_WAIT_ON_RMDIR</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(&amp;<a class=\"id\" href=\"#cgroup_rmdir_waitq\">cgroup_rmdir_waitq</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cgroup_clear_css_refs\">cgroup_clear_css_refs</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Because someone may call cgroup_wakeup_rmdir_waiter() before</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * prepare_to_wait(), we need to check this flag.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#CGRP_WAIT_ON_RMDIR\">CGRP_WAIT_ON_RMDIR</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#cgroup_rmdir_waitq\">cgroup_rmdir_waitq</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#CGRP_WAIT_ON_RMDIR\">CGRP_WAIT_ON_RMDIR</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* NO css_tryget() can success after here. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#cgroup_rmdir_waitq\">cgroup_rmdir_waitq</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#CGRP_WAIT_ON_RMDIR\">CGRP_WAIT_ON_RMDIR</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#release_list_lock\">release_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#CGRP_REMOVED\">CGRP_REMOVED</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#release_list\">release_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#release_list\">release_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#release_list_lock\">release_list_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_lock_hierarchy\">cgroup_lock_hierarchy</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* delete this cgroup from parent-&gt;children */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#sibling\">sibling</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_unlock_hierarchy\">cgroup_unlock_hierarchy</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_d_remove_dir\">cgroup_d_remove_dir</a>(<a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#d\">d</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#CGRP_RELEASABLE\">CGRP_RELEASABLE</a>, &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_for_release\">check_for_release</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Unregister events and notify userspace.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Notify userspace about cgroup removing only after rmdir of cgroup</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * directory to avoid race between userspace and kernelspace</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#event_list_lock\">event_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#event_list\">event_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_wait_queue\">remove_wait_queue</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#wqh\">wqh</a>, &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eventfd_signal\">eventfd_signal</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#eventfd\">eventfd</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#remove\">remove</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#event_list_lock\">event_list_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#cgroup_init_subsys\">cgroup_init_subsys</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Initializing cgroup subsys %s\\n\", <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Create the top cgroup state for this subsystem */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#sibling\">sibling</a>, &amp;<a class=\"id\" href=\"#rootnode\">rootnode</a>.<a class=\"id\" href=\"#subsys_list\">subsys_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#root\">root</a> = &amp;<a class=\"id\" href=\"#rootnode\">rootnode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css\">css</a> = <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#create\">create</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#dummytop\">dummytop</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* We don't handle early failures gracefully */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#css\">css</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_cgroup_css\">init_cgroup_css</a>(<a class=\"id\" href=\"#css\">css</a>, <a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#dummytop\">dummytop</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update the init_css_set to contain a subsys</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pointer to this state - since the subsystem is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * newly registered, all tasks and hence the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * init_css_set is in the subsystem's top cgroup. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_css_set\">init_css_set</a>.<a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>] = <a class=\"id\" href=\"#dummytop\">dummytop</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#need_forkexit_callback\">need_forkexit_callback</a> |= <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#fork\">fork</a> || <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#exit\">exit</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* At system boot, before all subsystems have been</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * registered, no tasks have been forked, so we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to invoke fork callbacks here. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#init_task\">init_task</a>.<a class=\"id\" href=\"#tasks\">tasks</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#hierarchy_mutex\">hierarchy_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class\">lockdep_set_class</a>(&amp;<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#hierarchy_mutex\">hierarchy_mutex</a>, &amp;<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_key\">subsys_key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#active\">active</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* this function shouldn't be used with modular subsystems, since they</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to register a subsys_id, among other things */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#module\">module</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cgroup_load_subsys: load and register a modular subsystem at runtime</span>", 
"<span class=\"comment\"> * @ss: the subsystem to load</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function should be called in a modular subsystem's initcall. If the</span>", 
"<span class=\"comment\"> * subsystem is built as a module, it will be assigned a new subsys_id and set</span>", 
"<span class=\"comment\"> * up for use. If the subsystem is built-in anyway, work is delegated to the</span>", 
"<span class=\"comment\"> * simpler cgroup_init_subsys.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__init_or_module\">__init_or_module</a> <a class=\"id\" href=\"#cgroup_load_subsys\">cgroup_load_subsys</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check name and function validity */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#name\">name</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#name\">name</a>) &gt; <a class=\"id\" href=\"#MAX_CGROUP_TYPE_NAMELEN\">MAX_CGROUP_TYPE_NAMELEN</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#create\">create</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#destroy\">destroy</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we don't support callbacks in modular subsystems. this check is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before the ss-&gt;module check for consistency; a subsystem that could</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be a module should still have no callbacks even if the user isn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * compiling it as one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#fork\">fork</a> || <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#exit\">exit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * an optionally modular subsystem is built-in: we want to do nothing,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * since cgroup_init_subsys will have already taken care of it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#module\">module</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* a few sanity checks */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a> >= <a class=\"id\" href=\"#CGROUP_BUILTIN_SUBSYS_COUNT\">CGROUP_BUILTIN_SUBSYS_COUNT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>] != <a class=\"id\" href=\"#ss\">ss</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to register a subsys id before anything else - for example,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * init_cgroup_css needs it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* find the first empty slot in the array */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#CGROUP_BUILTIN_SUBSYS_COUNT\">CGROUP_BUILTIN_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CGROUP_SUBSYS_COUNT\">CGROUP_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#CGROUP_SUBSYS_COUNT\">CGROUP_SUBSYS_COUNT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* maximum number of subsystems already registered! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* assign ourselves the subsys_id */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#ss\">ss</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no ss-&gt;create seems to need anything important in the ss struct, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this can happen first (i.e. before the rootnode attachment).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css\">css</a> = <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#create\">create</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#dummytop\">dummytop</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#css\">css</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* failure case - need to deassign the subsys[] slot. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#sibling\">sibling</a>, &amp;<a class=\"id\" href=\"#rootnode\">rootnode</a>.<a class=\"id\" href=\"#subsys_list\">subsys_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#root\">root</a> = &amp;<a class=\"id\" href=\"#rootnode\">rootnode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* our new subsystem will be attached to the dummy hierarchy. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_cgroup_css\">init_cgroup_css</a>(<a class=\"id\" href=\"#css\">css</a>, <a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#dummytop\">dummytop</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* init_idr must be after init_cgroup_css because it sets css-&gt;id. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#use_id\">use_id</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cgroup_init_idr\">cgroup_init_idr</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dummytop\">dummytop</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#destroy\">destroy</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#dummytop\">dummytop</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now we need to entangle the css into the existing css_sets. unlike</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in cgroup_init_subsys, there are now multiple css_sets, so each one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will need a new pointer to it; done by iterating the css_set_table.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * furthermore, modifying the existing css_sets will corrupt the hash</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * table state, so each changed css_set will need its hash recomputed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this is all done under the css_set_lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CSS_SET_TABLE_SIZE\">CSS_SET_TABLE_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#cg\">cg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#bucket\">bucket</a> = &amp;<a class=\"id\" href=\"#css_set_table\">css_set_table</a>[<a class=\"id\" href=\"#i\">i</a>], *<a class=\"id\" href=\"#new_bucket\">new_bucket</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_safe\">hlist_for_each_entry_safe</a>(<a class=\"id\" href=\"#cg\">cg</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#bucket\">bucket</a>, <a class=\"id\" href=\"#hlist\">hlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* skip entries that we already rehashed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* remove existing entry */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del\">hlist_del</a>(&amp;<a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* set new value */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>] = <a class=\"id\" href=\"#css\">css</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* recompute hash and restore entry */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_bucket\">new_bucket</a> = <a class=\"id\" href=\"#css_set_hash\">css_set_hash</a>(<a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#subsys\">subsys</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#hlist\">hlist</a>, <a class=\"id\" href=\"#new_bucket\">new_bucket</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#hierarchy_mutex\">hierarchy_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class\">lockdep_set_class</a>(&amp;<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#hierarchy_mutex\">hierarchy_mutex</a>, &amp;<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_key\">subsys_key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#active\">active</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* success! */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#cgroup_load_subsys\">cgroup_load_subsys</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cgroup_unload_subsys: unload a modular subsystem</span>", 
"<span class=\"comment\"> * @ss: the subsystem to unload</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function should be called in a modular subsystem's exitcall. When this</span>", 
"<span class=\"comment\"> * function is invoked, the refcount on the subsystem's module will be 0, so</span>", 
"<span class=\"comment\"> * the subsystem will not be attached to any hierarchy.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cgroup_unload_subsys\">cgroup_unload_subsys</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cg_cgroup_link\">cg_cgroup_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#hhead\">hhead</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#module\">module</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we shouldn't be called if the subsystem is in use, and the use of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * try_module_get in parse_cgroupfs_options should ensure that it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * doesn't start being used while we're killing it off.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#root\">root</a> != &amp;<a class=\"id\" href=\"#rootnode\">rootnode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* deassign the subsys_id */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a> &lt; <a class=\"id\" href=\"#CGROUP_BUILTIN_SUBSYS_COUNT\">CGROUP_BUILTIN_SUBSYS_COUNT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* remove subsystem from rootnode's list of subsystems */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#sibling\">sibling</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disentangle the css from all css_sets attached to the dummytop. as</span>", 
];
xr_frag_insert('l/36/13ae1827e3d8423be9fee605be0f1ea28a5469.xr', __xr_tmp);
