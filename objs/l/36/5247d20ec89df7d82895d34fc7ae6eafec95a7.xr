var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>-<a class=\"id\" href=\"#aspm\">aspm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"pci.h\"", 
"", 
"static void <a class=\"id\" href=\"#pci_free_resources\">pci_free_resources</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
" <span class=\"ts\"/><a class=\"id\" href=\"#msi_remove_pci_irq_vectors\">msi_remove_pci_irq_vectors</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_cleanup_rom\">pci_cleanup_rom</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#PCI_NUM_RESOURCES\">PCI_NUM_RESOURCES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_resource\">release_resource</a>(<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pci_stop_dev\">pci_stop_dev</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#is_added\">is_added</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_proc_detach_device\">pci_proc_detach_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_remove_sysfs_dev_files\">pci_remove_sysfs_dev_files</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_unregister\">device_unregister</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#is_added\">is_added</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcie_aspm_exit_link_state\">pcie_aspm_exit_link_state</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pci_destroy_dev\">pci_destroy_dev</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove the device from the device lists, and prevent any further</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * list accesses from this device */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#pci_bus_sem\">pci_bus_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus_list\">bus_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus_list\">bus_list</a>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus_list\">bus_list</a>.<a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#pci_bus_sem\">pci_bus_sem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_free_resources\">pci_free_resources</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_remove_device_safe - remove an unused hotplug device</span>", 
"<span class=\"comment\"> * @dev: the device to remove</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Delete the device structure from the device lists and </span>", 
"<span class=\"comment\"> * notify userspace (/sbin/hotplug), but only if the device</span>", 
"<span class=\"comment\"> * in question is not being used by a driver.</span>", 
"<span class=\"comment\"> * Returns 0 on success.</span>", 
"<span class=\"comment\"> */</span>", 
"#if 0", 
"int <a class=\"id\" href=\"#pci_remove_device_safe\">pci_remove_device_safe</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_dev_driver\">pci_dev_driver</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_destroy_dev\">pci_destroy_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>  <span class=\"comment\">/*  0  */</span>", 
"", 
"void <a class=\"id\" href=\"#pci_remove_bus\">pci_remove_bus</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#pci_bus\">pci_bus</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_proc_detach_bus\">pci_proc_detach_bus</a>(<a class=\"id\" href=\"#pci_bus\">pci_bus</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#pci_bus_sem\">pci_bus_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#pci_bus\">pci_bus</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#pci_bus_sem\">pci_bus_sem</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pci_bus\">pci_bus</a>-><a class=\"id\" href=\"#is_added\">is_added</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_remove_legacy_files\">pci_remove_legacy_files</a>(<a class=\"id\" href=\"#pci_bus\">pci_bus</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_remove_file\">device_remove_file</a>(&amp;<a class=\"id\" href=\"#pci_bus\">pci_bus</a>-><a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#dev_attr_cpuaffinity\">dev_attr_cpuaffinity</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_remove_file\">device_remove_file</a>(&amp;<a class=\"id\" href=\"#pci_bus\">pci_bus</a>-><a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#dev_attr_cpulistaffinity\">dev_attr_cpulistaffinity</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_unregister\">device_unregister</a>(&amp;<a class=\"id\" href=\"#pci_bus\">pci_bus</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_remove_bus\">pci_remove_bus</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_remove_bus_device - remove a PCI device and any children</span>", 
"<span class=\"comment\"> * @dev: the device to remove</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Remove a PCI device from the device lists, informing the drivers</span>", 
"<span class=\"comment\"> * that the device has been removed.  We also remove any subordinate</span>", 
"<span class=\"comment\"> * buses and children in a depth-first manner.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For each device we remove, delete the device structure from the</span>", 
"<span class=\"comment\"> * device lists, remove the /proc entry, and notify userspace</span>", 
"<span class=\"comment\"> * (/sbin/hotplug).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_remove_bus_device\">pci_remove_bus_device</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_stop_bus_device\">pci_stop_bus_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_remove_behind_bridge\">pci_remove_behind_bridge</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_remove_bus\">pci_remove_bus</a>(<a class=\"id\" href=\"#b\">b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_destroy_dev\">pci_destroy_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_remove_behind_bridge - remove all devices behind a PCI bridge</span>", 
"<span class=\"comment\"> * @dev: PCI bridge device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Remove all devices on the bus, except for the parent bridge.</span>", 
"<span class=\"comment\"> * This also removes any child buses, and any devices they may</span>", 
"<span class=\"comment\"> * contain in a depth-first manner.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_remove_behind_bridge\">pci_remove_behind_bridge</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#l\">l</a>, *<a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_safe\">list_for_each_safe</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>-><a class=\"id\" href=\"#devices\">devices</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_remove_bus_device\">pci_remove_bus_device</a>(<a class=\"id\" href=\"#pci_dev_b\">pci_dev_b</a>(<a class=\"id\" href=\"#l\">l</a>));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pci_stop_bus_devices\">pci_stop_bus_devices</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#l\">l</a>, *<a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_safe\">list_for_each_safe</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#devices\">devices</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#pci_dev_b\">pci_dev_b</a>(<a class=\"id\" href=\"#l\">l</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_stop_bus_device\">pci_stop_bus_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_stop_bus_device - stop a PCI device and any children</span>", 
"<span class=\"comment\"> * @dev: the device to stop</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Stop a PCI device (detach the driver, remove from the global list</span>", 
"<span class=\"comment\"> * and so on). This also stop any subordinate buses and children in a</span>", 
"<span class=\"comment\"> * depth-first manner.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_stop_bus_device\">pci_stop_bus_device</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_stop_bus_devices\">pci_stop_bus_devices</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_stop_dev\">pci_stop_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_remove_bus_device\">pci_remove_bus_device</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_remove_behind_bridge\">pci_remove_behind_bridge</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pci_stop_bus_device\">pci_stop_bus_device</a>);", 
];
xr_frag_insert('l/36/5247d20ec89df7d82895d34fc7ae6eafec95a7.xr', __xr_tmp);
