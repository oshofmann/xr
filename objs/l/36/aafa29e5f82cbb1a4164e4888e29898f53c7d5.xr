var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/kernel/timer.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Kernel internal timers, basic process system calls</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  1997-01-28  Modified by Finn Arne Gangstad to make timers scale better.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  1997-09-10  Updated NTP code according to technical memorandum Jan '96</span>", 
"<span class=\"comment\"> *              \"A Kernel Model for Precision Timekeeping\" by Dave Mills</span>", 
"<span class=\"comment\"> *  1998-12-24  Fixed a xtime SMP race (we need the xtime_lock rw spinlock to</span>", 
"<span class=\"comment\"> *              serialize accesses to xtime/lost_ticks).</span>", 
"<span class=\"comment\"> *                              Copyright (C) 1998  Andrea Arcangeli</span>", 
"<span class=\"comment\"> *  1999-03-10  Improved NTP compatibility by Ulrich Windl</span>", 
"<span class=\"comment\"> *  2002-05-31<span class=\"ts\"/>Move sys_sysinfo here and make its locking sane, Robert Love</span>", 
"<span class=\"comment\"> *  2000-10-05  Implemented scalable SMP per-CPU timer handling.</span>", 
"<span class=\"comment\"> *                              Copyright (C) 2000, 2001, 2002  Ingo Molnar</span>", 
"<span class=\"comment\"> *              Designed by David S. Miller, Alexey Kuznetsov and Ingo Molnar</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel_stat\">kernel_stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pid_namespace\">pid_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#thread_info\">thread_info</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#posix\">posix</a>-<a class=\"id\" href=\"#timers\">timers</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tick\">tick</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#perf_event\">perf_event</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#unistd\">unistd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#div64\">div64</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#timex\">timex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CREATE_TRACE_POINTS\">CREATE_TRACE_POINTS</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#jiffies_64\">jiffies_64</a> <a class=\"id\" href=\"#__cacheline_aligned_in_smp\">__cacheline_aligned_in_smp</a> = <a class=\"id\" href=\"#INITIAL_JIFFIES\">INITIAL_JIFFIES</a>;", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#jiffies_64\">jiffies_64</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * per-CPU timer vector definitions:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TVN_BITS\">TVN_BITS</a> (<a class=\"id\" href=\"#CONFIG_BASE_SMALL\">CONFIG_BASE_SMALL</a> ? 4 : 6)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TVR_BITS\">TVR_BITS</a> (<a class=\"id\" href=\"#CONFIG_BASE_SMALL\">CONFIG_BASE_SMALL</a> ? 6 : 8)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TVN_SIZE\">TVN_SIZE</a> (1 << <a class=\"id\" href=\"#TVN_BITS\">TVN_BITS</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TVR_SIZE\">TVR_SIZE</a> (1 << <a class=\"id\" href=\"#TVR_BITS\">TVR_BITS</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TVN_MASK\">TVN_MASK</a> (<a class=\"id\" href=\"#TVN_SIZE\">TVN_SIZE</a> - 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TVR_MASK\">TVR_MASK</a> (<a class=\"id\" href=\"#TVR_SIZE\">TVR_SIZE</a> - 1)", 
"", 
"struct <a class=\"id\" href=\"#tvec\">tvec</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#vec\">vec</a>[<a class=\"id\" href=\"#TVN_SIZE\">TVN_SIZE</a>];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#tvec_root\">tvec_root</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#vec\">vec</a>[<a class=\"id\" href=\"#TVR_SIZE\">TVR_SIZE</a>];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#running_timer\">running_timer</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next_timer\">next_timer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tvec_root\">tvec_root</a> <a class=\"id\" href=\"#tv1\">tv1</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tvec\">tvec</a> <a class=\"id\" href=\"#tv2\">tv2</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tvec\">tvec</a> <a class=\"id\" href=\"#tv3\">tv3</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tvec\">tvec</a> <a class=\"id\" href=\"#tv4\">tv4</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tvec\">tvec</a> <a class=\"id\" href=\"#tv5\">tv5</a>;", 
"} <a class=\"id\" href=\"#____cacheline_aligned\">____cacheline_aligned</a>;", 
"", 
"struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> <a class=\"id\" href=\"#boot_tvec_bases\">boot_tvec_bases</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#boot_tvec_bases\">boot_tvec_bases</a>);", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *, <a class=\"id\" href=\"#tvec_bases\">tvec_bases</a>) = &amp;<a class=\"id\" href=\"#boot_tvec_bases\">boot_tvec_bases</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note that all tvec_bases are 2 byte aligned and lower bit of</span>", 
"<span class=\"comment\"> * base in timer_list is guaranteed to be zero. Use the LSB to</span>", 
"<span class=\"comment\"> * indicate whether the timer is deferrable.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A deferrable timer will work normally when the system is busy, but</span>", 
"<span class=\"comment\"> * will not cause a CPU to come out of idle just to service it; instead,</span>", 
"<span class=\"comment\"> * the timer will be serviced when the CPU eventually wakes up with a</span>", 
"<span class=\"comment\"> * subsequent non-deferrable timer.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TBASE_DEFERRABLE_FLAG\">TBASE_DEFERRABLE_FLAG</a><span class=\"ts\"/><span class=\"ts\"/>(0x1)", 
"", 
"<span class=\"comment\">/* Functions below help us manage 'deferrable' flag */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#tbase_get_deferrable\">tbase_get_deferrable</a>(struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#base\">base</a>)", 
"{", 
"<span class=\"ts\"/>return ((unsigned int)(unsigned long)<a class=\"id\" href=\"#base\">base</a> &amp; <a class=\"id\" href=\"#TBASE_DEFERRABLE_FLAG\">TBASE_DEFERRABLE_FLAG</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#tbase_get_base\">tbase_get_base</a>(struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#base\">base</a>)", 
"{", 
"<span class=\"ts\"/>return ((struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *)((unsigned long)<a class=\"id\" href=\"#base\">base</a> &amp; ~<a class=\"id\" href=\"#TBASE_DEFERRABLE_FLAG\">TBASE_DEFERRABLE_FLAG</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#timer_set_deferrable\">timer_set_deferrable</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a> = ((struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *)((unsigned long)(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#TBASE_DEFERRABLE_FLAG\">TBASE_DEFERRABLE_FLAG</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#timer_set_base\">timer_set_base</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>, struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#new_base\">new_base</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a> = (struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *)((unsigned long)(<a class=\"id\" href=\"#new_base\">new_base</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#tbase_get_deferrable\">tbase_get_deferrable</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>));", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#round_jiffies_common\">round_jiffies_common</a>(unsigned long <a class=\"id\" href=\"#j\">j</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#force_up\">force_up</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rem\">rem</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#original\">original</a> = <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We don't want all cpus firing their timers at once hitting the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * same lock or cachelines, so we skew each extra cpu with an extra</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 3 jiffies. This 3 jiffies came originally from the mm/ code which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * already did this.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The skew is done by adding 3*cpunr, then round, then subtract this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * extra offset again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> += <a class=\"id\" href=\"#cpu\">cpu</a> * 3;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rem\">rem</a> = <a class=\"id\" href=\"#j\">j</a> % <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the target jiffie is just after a whole second (which can happen</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * due to delays of the timer irq, long irq off times etc etc) then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we should round down to the whole second, not up. Use 1/4th second</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * as cutoff for this rounding as an extreme upper bound for this.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But never round down if @force_up is set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rem\">rem</a> &lt; <a class=\"id\" href=\"#HZ\">HZ</a>/4 && !<a class=\"id\" href=\"#force_up\">force_up</a>) <span class=\"comment\">/* round down */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#j\">j</a> - <a class=\"id\" href=\"#rem\">rem</a>;", 
"<span class=\"ts\"/>else <span class=\"comment\">/* round up */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#j\">j</a> - <a class=\"id\" href=\"#rem\">rem</a> + <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* now that we have rounded, subtract the extra skew again */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> -= <a class=\"id\" href=\"#cpu\">cpu</a> * 3;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#j\">j</a> <= <a class=\"id\" href=\"#jiffies\">jiffies</a>) <span class=\"comment\">/* rounding ate our timeout entirely; */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#original\">original</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#j\">j</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __round_jiffies - function to round jiffies to a full second</span>", 
"<span class=\"comment\"> * @j: the time in (absolute) jiffies that should be rounded</span>", 
"<span class=\"comment\"> * @cpu: the processor number on which the timeout will happen</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * __round_jiffies() rounds an absolute time in the future (in jiffies)</span>", 
"<span class=\"comment\"> * up or down to (approximately) full seconds. This is useful for timers</span>", 
"<span class=\"comment\"> * for which the exact time they fire does not matter too much, as long as</span>", 
"<span class=\"comment\"> * they fire approximately every X seconds.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * By rounding these timers to whole seconds, all such timers will fire</span>", 
"<span class=\"comment\"> * at the same time, rather than at various times spread out. The goal</span>", 
"<span class=\"comment\"> * of this is to have the CPU wake up less, which saves power.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The exact rounding is skewed for each processor to avoid all</span>", 
"<span class=\"comment\"> * processors firing at the exact same time, which could lead</span>", 
"<span class=\"comment\"> * to lock contention or spurious cache line bouncing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The return value is the rounded version of the @j parameter.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#__round_jiffies\">__round_jiffies</a>(unsigned long <a class=\"id\" href=\"#j\">j</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#round_jiffies_common\">round_jiffies_common</a>(<a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__round_jiffies\">__round_jiffies</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __round_jiffies_relative - function to round jiffies to a full second</span>", 
"<span class=\"comment\"> * @j: the time in (relative) jiffies that should be rounded</span>", 
"<span class=\"comment\"> * @cpu: the processor number on which the timeout will happen</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * __round_jiffies_relative() rounds a time delta  in the future (in jiffies)</span>", 
"<span class=\"comment\"> * up or down to (approximately) full seconds. This is useful for timers</span>", 
"<span class=\"comment\"> * for which the exact time they fire does not matter too much, as long as</span>", 
"<span class=\"comment\"> * they fire approximately every X seconds.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * By rounding these timers to whole seconds, all such timers will fire</span>", 
"<span class=\"comment\"> * at the same time, rather than at various times spread out. The goal</span>", 
"<span class=\"comment\"> * of this is to have the CPU wake up less, which saves power.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The exact rounding is skewed for each processor to avoid all</span>", 
"<span class=\"comment\"> * processors firing at the exact same time, which could lead</span>", 
"<span class=\"comment\"> * to lock contention or spurious cache line bouncing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The return value is the rounded version of the @j parameter.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#__round_jiffies_relative\">__round_jiffies_relative</a>(unsigned long <a class=\"id\" href=\"#j\">j</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#j0\">j0</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Use j0 because jiffies might change while we run */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#round_jiffies_common\">round_jiffies_common</a>(<a class=\"id\" href=\"#j\">j</a> + <a class=\"id\" href=\"#j0\">j0</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#false\">false</a>) - <a class=\"id\" href=\"#j0\">j0</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__round_jiffies_relative\">__round_jiffies_relative</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * round_jiffies - function to round jiffies to a full second</span>", 
"<span class=\"comment\"> * @j: the time in (absolute) jiffies that should be rounded</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * round_jiffies() rounds an absolute time in the future (in jiffies)</span>", 
"<span class=\"comment\"> * up or down to (approximately) full seconds. This is useful for timers</span>", 
"<span class=\"comment\"> * for which the exact time they fire does not matter too much, as long as</span>", 
"<span class=\"comment\"> * they fire approximately every X seconds.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * By rounding these timers to whole seconds, all such timers will fire</span>", 
"<span class=\"comment\"> * at the same time, rather than at various times spread out. The goal</span>", 
"<span class=\"comment\"> * of this is to have the CPU wake up less, which saves power.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The return value is the rounded version of the @j parameter.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#round_jiffies\">round_jiffies</a>(unsigned long <a class=\"id\" href=\"#j\">j</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#round_jiffies_common\">round_jiffies_common</a>(<a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>(), <a class=\"id\" href=\"#false\">false</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#round_jiffies\">round_jiffies</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * round_jiffies_relative - function to round jiffies to a full second</span>", 
"<span class=\"comment\"> * @j: the time in (relative) jiffies that should be rounded</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * round_jiffies_relative() rounds a time delta  in the future (in jiffies)</span>", 
"<span class=\"comment\"> * up or down to (approximately) full seconds. This is useful for timers</span>", 
"<span class=\"comment\"> * for which the exact time they fire does not matter too much, as long as</span>", 
"<span class=\"comment\"> * they fire approximately every X seconds.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * By rounding these timers to whole seconds, all such timers will fire</span>", 
"<span class=\"comment\"> * at the same time, rather than at various times spread out. The goal</span>", 
"<span class=\"comment\"> * of this is to have the CPU wake up less, which saves power.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The return value is the rounded version of the @j parameter.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#round_jiffies_relative\">round_jiffies_relative</a>(unsigned long <a class=\"id\" href=\"#j\">j</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__round_jiffies_relative\">__round_jiffies_relative</a>(<a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>());", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#round_jiffies_relative\">round_jiffies_relative</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __round_jiffies_up - function to round jiffies up to a full second</span>", 
"<span class=\"comment\"> * @j: the time in (absolute) jiffies that should be rounded</span>", 
"<span class=\"comment\"> * @cpu: the processor number on which the timeout will happen</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the same as __round_jiffies() except that it will never</span>", 
"<span class=\"comment\"> * round down.  This is useful for timeouts for which the exact time</span>", 
"<span class=\"comment\"> * of firing does not matter too much, as long as they don't fire too</span>", 
"<span class=\"comment\"> * early.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#__round_jiffies_up\">__round_jiffies_up</a>(unsigned long <a class=\"id\" href=\"#j\">j</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#round_jiffies_common\">round_jiffies_common</a>(<a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__round_jiffies_up\">__round_jiffies_up</a>);", 
];
xr_frag_insert('l/36/aafa29e5f82cbb1a4164e4888e29898f53c7d5.xr', __xr_tmp);
