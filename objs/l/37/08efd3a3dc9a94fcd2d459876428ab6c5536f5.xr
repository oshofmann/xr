var __xr_tmp = [
"<span class=\"comment\"><span class=\"ts\"/> * Slack must be enabled for this feature</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_gbl_enable_interpreter_slack\">acpi_gbl_enable_interpreter_slack</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#implicit_return_obj\">implicit_return_obj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Delete any \"stale\" implicit return. However, in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * complex statements, the implicit return value can be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * bubbled up several levels.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_DISPATCH\">ACPI_DB_DISPATCH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Removing reference on stale implicit return obj %p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#implicit_return_obj\">implicit_return_obj</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_remove_reference\">acpi_ut_remove_reference</a>(<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#implicit_return_obj\">implicit_return_obj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#implicit_return_obj\">implicit_return_obj</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ACPI_NO_METHOD_EXECUTION\">ACPI_NO_METHOD_EXECUTION</a>", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ds_do_implicit_return</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  return_desc         - The return value</span>", 
"<span class=\"comment\"> *              walk_state          - Current State</span>", 
"<span class=\"comment\"> *              add_reference       - True if a reference should be added to the</span>", 
"<span class=\"comment\"> *                                    return object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      TRUE if implicit return enabled, FALSE otherwise</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Implements the optional \"implicit return\".  We save the result</span>", 
"<span class=\"comment\"> *              of every ASL operator and control method invocation in case the</span>", 
"<span class=\"comment\"> *              parent method exit.  Before storing a new return value, we</span>", 
"<span class=\"comment\"> *              delete the previous return value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u8\">u8</a>", 
"<a class=\"id\" href=\"#acpi_ds_do_implicit_return\">acpi_ds_do_implicit_return</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#return_desc\">return_desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#acpi_walk_state\">acpi_walk_state</a> *<a class=\"id\" href=\"#walk_state\">walk_state</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#add_reference\">add_reference</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_NAME\">ACPI_FUNCTION_NAME</a>(<a class=\"id\" href=\"#ds_do_implicit_return\">ds_do_implicit_return</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Slack must be enabled for this feature, and we must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have a valid return object</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((!<a class=\"id\" href=\"#acpi_gbl_enable_interpreter_slack\">acpi_gbl_enable_interpreter_slack</a>) || (!<a class=\"id\" href=\"#return_desc\">return_desc</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#FALSE\">FALSE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_DISPATCH\">ACPI_DB_DISPATCH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Result %p will be implicitly returned; Prev=%p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#return_desc\">return_desc</a>, <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#implicit_return_obj\">implicit_return_obj</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Delete any \"stale\" implicit return value first. However, in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * complex statements, the implicit return value can be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bubbled up several levels, so we don't clear the value if it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is the same as the return_desc.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#implicit_return_obj\">implicit_return_obj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#implicit_return_obj\">implicit_return_obj</a> == <a class=\"id\" href=\"#return_desc\">return_desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#TRUE\">TRUE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ds_clear_implicit_return\">acpi_ds_clear_implicit_return</a>(<a class=\"id\" href=\"#walk_state\">walk_state</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Save the implicit return value, add a reference if requested */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#implicit_return_obj\">implicit_return_obj</a> = <a class=\"id\" href=\"#return_desc\">return_desc</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#add_reference\">add_reference</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_add_reference\">acpi_ut_add_reference</a>(<a class=\"id\" href=\"#return_desc\">return_desc</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#TRUE\">TRUE</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ds_is_result_used</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Op                  - Current Op</span>", 
"<span class=\"comment\"> *              walk_state          - Current State</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      TRUE if result is used, FALSE otherwise</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Check if a result object will be used by the parent</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u8\">u8</a>", 
"<a class=\"id\" href=\"#acpi_ds_is_result_used\">acpi_ds_is_result_used</a>(union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> * <a class=\"id\" href=\"#op\">op</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#acpi_walk_state\">acpi_walk_state</a> * <a class=\"id\" href=\"#walk_state\">walk_state</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#acpi_opcode_info\">acpi_opcode_info</a> *<a class=\"id\" href=\"#parent_info\">parent_info</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE_PTR\">ACPI_FUNCTION_TRACE_PTR</a>(<a class=\"id\" href=\"#ds_is_result_used\">ds_is_result_used</a>, <a class=\"id\" href=\"#op\">op</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Must have both an Op and a Result Object */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#op\">op</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Null Op\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_UINT8\">return_UINT8</a>(<a class=\"id\" href=\"#TRUE\">TRUE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We know that this operator is not a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Return() operator (would not come here.) The following code is the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * optional support for a so-called \"implicit return\". Some AML code</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * assumes that the last value of the method is \"implicitly\" returned</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the caller. Just save the last result as the return value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE: this is optional because the ASL language does not actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * support this behavior.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ds_do_implicit_return\">acpi_ds_do_implicit_return</a>(<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#result_obj\">result_obj</a>, <a class=\"id\" href=\"#walk_state\">walk_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#TRUE\">TRUE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now determine if the parent will use the result</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If there is no parent, or the parent is a scope_op, we are executing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at the method level. An executing method typically has no parent,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * since each method is parsed separately.  A method invoked externally</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * via execute_control_method has a scope_op as the parent.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((!<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#parent\">parent</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a> == <a class=\"id\" href=\"#AML_SCOPE_OP\">AML_SCOPE_OP</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No parent, the return value cannot possibly be used */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_DISPATCH\">ACPI_DB_DISPATCH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"At Method level, result of [%s] not used\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ps_get_opcode_name\">acpi_ps_get_opcode_name</a>(<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#aml_opcode\">aml_opcode</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_UINT8\">return_UINT8</a>(<a class=\"id\" href=\"#FALSE\">FALSE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get info on the parent. The root_op is AML_SCOPE */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent_info\">parent_info</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ps_get_opcode_info\">acpi_ps_get_opcode_info</a>(<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent_info\">parent_info</a>-><a class=\"id\" href=\"#class\">class</a> == <a class=\"id\" href=\"#AML_CLASS_UNKNOWN\">AML_CLASS_UNKNOWN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Unknown parent opcode Op=%p\", <a class=\"id\" href=\"#op\">op</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_UINT8\">return_UINT8</a>(<a class=\"id\" href=\"#FALSE\">FALSE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Decide what to do with the result based on the parent.  If</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the parent opcode will not use the result, delete the object.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Otherwise leave it as is, it will be deleted when it is used</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * as an operand later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#parent_info\">parent_info</a>-><a class=\"id\" href=\"#class\">class</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_CLASS_CONTROL\">AML_CLASS_CONTROL</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#AML_RETURN_OP\">AML_RETURN_OP</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Never delete the return value associated with a return opcode */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#result_used\">result_used</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#AML_IF_OP\">AML_IF_OP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#AML_WHILE_OP\">AML_WHILE_OP</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If we are executing the predicate AND this is the predicate op,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we will use the return value</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#control_state\">control_state</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#state\">state</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ACPI_CONTROL_PREDICATE_EXECUTING\">ACPI_CONTROL_PREDICATE_EXECUTING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    && (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#control_state\">control_state</a>-><a class=\"id\" href=\"#control\">control</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#predicate_op\">predicate_op</a> == <a class=\"id\" href=\"#op\">op</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#result_used\">result_used</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ignore other control opcodes */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The general control opcode returns no result */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#result_not_used\">result_not_used</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_CLASS_CREATE\">AML_CLASS_CREATE</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * These opcodes allow term_arg(s) as operands and therefore</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the operands can be method calls.  The result is used.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#result_used\">result_used</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_CLASS_NAMED_OBJECT\">AML_CLASS_NAMED_OBJECT</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a> == <a class=\"id\" href=\"#AML_REGION_OP\">AML_REGION_OP</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a> == <a class=\"id\" href=\"#AML_DATA_REGION_OP\">AML_DATA_REGION_OP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    || (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a> == <a class=\"id\" href=\"#AML_PACKAGE_OP\">AML_PACKAGE_OP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    || (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#AML_VAR_PACKAGE_OP\">AML_VAR_PACKAGE_OP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    || (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a> == <a class=\"id\" href=\"#AML_BUFFER_OP\">AML_BUFFER_OP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    || (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#AML_INT_EVAL_SUBTREE_OP\">AML_INT_EVAL_SUBTREE_OP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    || (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#AML_BANK_FIELD_OP\">AML_BANK_FIELD_OP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * These opcodes allow term_arg(s) as operands and therefore</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the operands can be method calls.  The result is used.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#result_used\">result_used</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#result_not_used\">result_not_used</a>;", 
"", 
"<span class=\"ts\"/>default:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In all other cases. the parent will actually use the return</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * object, so keep it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#result_used\">result_used</a>;", 
"<span class=\"ts\"/>}", 
"", 
"      <a class=\"id\" href=\"#result_used\">result_used</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_DISPATCH\">ACPI_DB_DISPATCH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Result of [%s] used by Parent [%s] Op=%p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ps_get_opcode_name\">acpi_ps_get_opcode_name</a>(<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ps_get_opcode_name\">acpi_ps_get_opcode_name</a>(<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#common\">common</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#aml_opcode\">aml_opcode</a>), <a class=\"id\" href=\"#op\">op</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_UINT8\">return_UINT8</a>(<a class=\"id\" href=\"#TRUE\">TRUE</a>);", 
"", 
"      <a class=\"id\" href=\"#result_not_used\">result_not_used</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_DISPATCH\">ACPI_DB_DISPATCH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Result of [%s] not used by Parent [%s] Op=%p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ps_get_opcode_name\">acpi_ps_get_opcode_name</a>(<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ps_get_opcode_name\">acpi_ps_get_opcode_name</a>(<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#common\">common</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#aml_opcode\">aml_opcode</a>), <a class=\"id\" href=\"#op\">op</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_UINT8\">return_UINT8</a>(<a class=\"id\" href=\"#FALSE\">FALSE</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ds_delete_result_if_not_used</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Op              - Current parse Op</span>", 
"<span class=\"comment\"> *              result_obj      - Result of the operation</span>", 
"<span class=\"comment\"> *              walk_state      - Current state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Used after interpretation of an opcode.  If there is an internal</span>", 
"<span class=\"comment\"> *              result descriptor, check if the parent opcode will actually use</span>", 
"<span class=\"comment\"> *              this result.  If not, delete the result now so that it will</span>", 
"<span class=\"comment\"> *              not become orphaned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void", 
"<a class=\"id\" href=\"#acpi_ds_delete_result_if_not_used\">acpi_ds_delete_result_if_not_used</a>(union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#op\">op</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#result_obj\">result_obj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#acpi_walk_state\">acpi_walk_state</a> *<a class=\"id\" href=\"#walk_state\">walk_state</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc\">obj_desc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE_PTR\">ACPI_FUNCTION_TRACE_PTR</a>(<a class=\"id\" href=\"#ds_delete_result_if_not_used\">ds_delete_result_if_not_used</a>, <a class=\"id\" href=\"#result_obj\">result_obj</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#op\">op</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Null Op\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#result_obj\">result_obj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_ds_is_result_used\">acpi_ds_is_result_used</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#walk_state\">walk_state</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Must pop the result stack (obj_desc should be equal to result_obj) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ds_result_pop\">acpi_ds_result_pop</a>(&amp;<a class=\"id\" href=\"#obj_desc\">obj_desc</a>, <a class=\"id\" href=\"#walk_state\">walk_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_remove_reference\">acpi_ut_remove_reference</a>(<a class=\"id\" href=\"#result_obj\">result_obj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ds_resolve_operands</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  walk_state          - Current walk state with operands on stack</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Resolve all operands to their values.  Used to prepare</span>", 
"<span class=\"comment\"> *              arguments to a control method invocation (a call from one</span>", 
"<span class=\"comment\"> *              method to another.)</span>", 
"<span class=\"comment\"> *</span>", 
];
xr_frag_insert('l/37/08efd3a3dc9a94fcd2d459876428ab6c5536f5.xr', __xr_tmp);
