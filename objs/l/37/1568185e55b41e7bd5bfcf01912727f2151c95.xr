var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">  Generic support for BUG()</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  This respects the following config options:</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  CONFIG_BUG - emit BUG traps.  Nothing happens without this.</span>", 
"<span class=\"comment\">  CONFIG_GENERIC_BUG - enable this code.</span>", 
"<span class=\"comment\">  CONFIG_GENERIC_BUG_RELATIVE_POINTERS - use 32-bit pointers relative to</span>", 
"<span class=\"comment\"><span class=\"ts\"/>the containing struct bug_entry for bug_addr and file.</span>", 
"<span class=\"comment\">  CONFIG_DEBUG_BUGVERBOSE - emit full file+line information for each BUG</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  CONFIG_BUG and CONFIG_DEBUG_BUGVERBOSE are potentially user-settable</span>", 
"<span class=\"comment\">  (though they're generally always on).</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  CONFIG_GENERIC_BUG is set by each architecture using this code.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  To use this, your architecture must:</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  1. Set up the config options:</span>", 
"<span class=\"comment\">     - Enable CONFIG_GENERIC_BUG if CONFIG_BUG</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  2. Implement BUG (and optionally BUG_ON, WARN, WARN_ON)</span>", 
"<span class=\"comment\">     - Define HAVE_ARCH_BUG</span>", 
"<span class=\"comment\">     - Implement BUG() to generate a faulting instruction</span>", 
"<span class=\"comment\">     - NOTE: struct bug_entry does not have \"file\" or \"line\" entries</span>", 
"<span class=\"comment\">       when CONFIG_DEBUG_BUGVERBOSE is not enabled, so you must generate</span>", 
"<span class=\"comment\">       the values accordingly.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  3. Implement the trap</span>", 
"<span class=\"comment\">     - In the illegal instruction trap handler (typically), verify</span>", 
"<span class=\"comment\">       that the fault was in kernel mode, and call report_bug()</span>", 
"<span class=\"comment\">     - report_bug() will return whether it was a false alarm, a warning,</span>", 
"<span class=\"comment\">       or an actual bug.</span>", 
"<span class=\"comment\">     - You must implement the is_valid_bugaddr(bugaddr) callback which</span>", 
"<span class=\"comment\">       returns true if the eip is a real kernel address, and it points</span>", 
"<span class=\"comment\">       to the expected BUG trap instruction.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    Jeremy Fitzhardinge &lt;jeremy@goop.org&gt; 2006</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bug\">bug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"extern const struct <a class=\"id\" href=\"#bug_entry\">bug_entry</a> <a class=\"id\" href=\"#__start___bug_table\">__start___bug_table</a>[], <a class=\"id\" href=\"#__stop___bug_table\">__stop___bug_table</a>[];", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#bug_addr\">bug_addr</a>(const struct <a class=\"id\" href=\"#bug_entry\">bug_entry</a> *<a class=\"id\" href=\"#bug\">bug</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_GENERIC_BUG_RELATIVE_POINTERS\">CONFIG_GENERIC_BUG_RELATIVE_POINTERS</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bug\">bug</a>-><a class=\"id\" href=\"#bug_addr\">bug_addr</a>;", 
"#else", 
"<span class=\"ts\"/>return (unsigned long)<a class=\"id\" href=\"#bug\">bug</a> + <a class=\"id\" href=\"#bug\">bug</a>-><a class=\"id\" href=\"#bug_addr_disp\">bug_addr_disp</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULES\">CONFIG_MODULES</a>", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#module_bug_list\">module_bug_list</a>);", 
"", 
"static const struct <a class=\"id\" href=\"#bug_entry\">bug_entry</a> *<a class=\"id\" href=\"#module_find_bug\">module_find_bug</a>(unsigned long <a class=\"id\" href=\"#bugaddr\">bugaddr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#module_bug_list\">module_bug_list</a>, <a class=\"id\" href=\"#bug_list\">bug_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#bug_entry\">bug_entry</a> *<a class=\"id\" href=\"#bug\">bug</a> = <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#bug_table\">bug_table</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_bugs\">num_bugs</a>; ++<a class=\"id\" href=\"#i\">i</a>, ++<a class=\"id\" href=\"#bug\">bug</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bugaddr\">bugaddr</a> == <a class=\"id\" href=\"#bug_addr\">bug_addr</a>(<a class=\"id\" href=\"#bug\">bug</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bug\">bug</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#module_bug_finalize\">module_bug_finalize</a>(const <a class=\"id\" href=\"#Elf_Ehdr\">Elf_Ehdr</a> *<a class=\"id\" href=\"#hdr\">hdr</a>, const <a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#sechdrs\">sechdrs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#secstrings\">secstrings</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#bug_table\">bug_table</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_bugs\">num_bugs</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find the __bug_table section, if present */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#secstrings\">secstrings</a> = (char *)<a class=\"id\" href=\"#hdr\">hdr</a> + <a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shstrndx\">e_shstrndx</a>].<a class=\"id\" href=\"#sh_offset\">sh_offset</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shnum\">e_shnum</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#secstrings\">secstrings</a>+<a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sh_name\">sh_name</a>, \"__bug_table\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#bug_table\">bug_table</a> = (void *) <a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sh_addr\">sh_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_bugs\">num_bugs</a> = <a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sh_size\">sh_size</a> / sizeof(struct <a class=\"id\" href=\"#bug_entry\">bug_entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Strictly speaking this should have a spinlock to protect against</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * traversals, but since we only traverse on BUG()s, a spinlock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * could potentially lead to deadlock and thus be counter-productive.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#bug_list\">bug_list</a>, &amp;<a class=\"id\" href=\"#module_bug_list\">module_bug_list</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#module_bug_cleanup\">module_bug_cleanup</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#bug_list\">bug_list</a>);", 
"}", 
"", 
"#else", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> const struct <a class=\"id\" href=\"#bug_entry\">bug_entry</a> *<a class=\"id\" href=\"#module_find_bug\">module_find_bug</a>(unsigned long <a class=\"id\" href=\"#bugaddr\">bugaddr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"const struct <a class=\"id\" href=\"#bug_entry\">bug_entry</a> *<a class=\"id\" href=\"#find_bug\">find_bug</a>(unsigned long <a class=\"id\" href=\"#bugaddr\">bugaddr</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#bug_entry\">bug_entry</a> *<a class=\"id\" href=\"#bug\">bug</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#bug\">bug</a> = <a class=\"id\" href=\"#__start___bug_table\">__start___bug_table</a>; <a class=\"id\" href=\"#bug\">bug</a> &lt; <a class=\"id\" href=\"#__stop___bug_table\">__stop___bug_table</a>; ++<a class=\"id\" href=\"#bug\">bug</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bugaddr\">bugaddr</a> == <a class=\"id\" href=\"#bug_addr\">bug_addr</a>(<a class=\"id\" href=\"#bug\">bug</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bug\">bug</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#module_find_bug\">module_find_bug</a>(<a class=\"id\" href=\"#bugaddr\">bugaddr</a>);", 
"}", 
"", 
"enum <a class=\"id\" href=\"#bug_trap_type\">bug_trap_type</a> <a class=\"id\" href=\"#report_bug\">report_bug</a>(unsigned long <a class=\"id\" href=\"#bugaddr\">bugaddr</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#bug_entry\">bug_entry</a> *<a class=\"id\" href=\"#bug\">bug</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#line\">line</a>, <a class=\"id\" href=\"#warning\">warning</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_valid_bugaddr\">is_valid_bugaddr</a>(<a class=\"id\" href=\"#bugaddr\">bugaddr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#BUG_TRAP_TYPE_NONE\">BUG_TRAP_TYPE_NONE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bug\">bug</a> = <a class=\"id\" href=\"#find_bug\">find_bug</a>(<a class=\"id\" href=\"#bugaddr\">bugaddr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#line\">line</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#warning\">warning</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bug\">bug</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_BUGVERBOSE\">CONFIG_DEBUG_BUGVERBOSE</a>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_GENERIC_BUG_RELATIVE_POINTERS\">CONFIG_GENERIC_BUG_RELATIVE_POINTERS</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#bug\">bug</a>-><a class=\"id\" href=\"#file\">file</a>;", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = (const char *)<a class=\"id\" href=\"#bug\">bug</a> + <a class=\"id\" href=\"#bug\">bug</a>-><a class=\"id\" href=\"#file_disp\">file_disp</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#line\">line</a> = <a class=\"id\" href=\"#bug\">bug</a>-><a class=\"id\" href=\"#line\">line</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warning\">warning</a> = (<a class=\"id\" href=\"#bug\">bug</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#BUGFLAG_WARNING\">BUGFLAG_WARNING</a>) != 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#warning\">warning</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this is a WARN_ON rather than BUG/BUG_ON */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"------------[ cut here ]------------\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"WARNING: at %s:%u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#line\">line</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"WARNING: at %p \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"[verbose debug info unavailable]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (void *)<a class=\"id\" href=\"#bugaddr\">bugaddr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_modules\">print_modules</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#show_regs\">show_regs</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_oops_end_marker\">print_oops_end_marker</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_taint\">add_taint</a>(<a class=\"id\" href=\"#BUG_GET_TAINT\">BUG_GET_TAINT</a>(<a class=\"id\" href=\"#bug\">bug</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#BUG_TRAP_TYPE_WARN\">BUG_TRAP_TYPE_WARN</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"------------[ cut here ]------------\\n\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"kernel BUG at %s:%u!\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#line\">line</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"Kernel BUG at %p \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"[verbose debug info unavailable]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       (void *)<a class=\"id\" href=\"#bugaddr\">bugaddr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#BUG_TRAP_TYPE_BUG\">BUG_TRAP_TYPE_BUG</a>;", 
"}", 
];
xr_frag_insert('l/37/1568185e55b41e7bd5bfcf01912727f2151c95.xr', __xr_tmp);
