var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/kernel/time/tick-broadcast.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file contains functions which emulate a local clock-event</span>", 
"<span class=\"comment\"> * device via a broadcast event source.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright(C) 2005-2006, Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>", 
"<span class=\"comment\"> * Copyright(C) 2005-2007, Red Hat, Inc., Ingo Molnar</span>", 
"<span class=\"comment\"> * Copyright(C) 2006-2007, Timesys Corp., Thomas Gleixner</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This code is licenced under the GPL version 2. For details see</span>", 
"<span class=\"comment\"> * kernel-base/COPYING.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hrtimer\">hrtimer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#profile\">profile</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tick\">tick</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"tick-internal.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Broadcast support for broken x86 hardware, where the local apic</span>", 
"<span class=\"comment\"> * timer stops in C3 state.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#tick_device\">tick_device</a> <a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>;", 
"<span class=\"comment\">/* FIXME: Use cpumask_var_t. */</span>", 
"static <a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#tick_broadcast_mask\">tick_broadcast_mask</a>, <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>);", 
"static <a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#tmpmask\">tmpmask</a>, <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>);", 
"static <a class=\"id\" href=\"#DEFINE_RAW_SPINLOCK\">DEFINE_RAW_SPINLOCK</a>(<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>);", 
"static int <a class=\"id\" href=\"#tick_broadcast_force\">tick_broadcast_force</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TICK_ONESHOT\">CONFIG_TICK_ONESHOT</a>", 
"static void <a class=\"id\" href=\"#tick_broadcast_clear_oneshot\">tick_broadcast_clear_oneshot</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tick_broadcast_clear_oneshot\">tick_broadcast_clear_oneshot</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>) { }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Debugging: see timer_list.c</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tick_device\">tick_device</a> *<a class=\"id\" href=\"#tick_get_broadcast_device\">tick_get_broadcast_device</a>(void)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#tick_get_broadcast_mask\">tick_get_broadcast_mask</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#tick_broadcast_mask\">tick_broadcast_mask</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Start the device in periodic mode</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tick_broadcast_start_periodic\">tick_broadcast_start_periodic</a>(struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#bc\">bc</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bc\">bc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_setup_periodic\">tick_setup_periodic</a>(<a class=\"id\" href=\"#bc\">bc</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check, if the device can be utilized as broadcast device:</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tick_check_broadcast_device\">tick_check_broadcast_device</a>(struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>.<a class=\"id\" href=\"#evtdev\">evtdev</a> &&", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>.<a class=\"id\" href=\"#evtdev\">evtdev</a>-><a class=\"id\" href=\"#rating\">rating</a> >= <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rating\">rating</a>) ||", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#CLOCK_EVT_FEAT_C3STOP\">CLOCK_EVT_FEAT_C3STOP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clockevents_exchange_device\">clockevents_exchange_device</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>.<a class=\"id\" href=\"#evtdev\">evtdev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#tick_get_broadcast_mask\">tick_get_broadcast_mask</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_broadcast_start_periodic\">tick_broadcast_start_periodic</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check, if the device is the broadcast device</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tick_is_broadcast_device\">tick_is_broadcast_device</a>(struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#dev\">dev</a> && <a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>.<a class=\"id\" href=\"#evtdev\">evtdev</a> == <a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check, if the device is disfunctional and a place holder, which</span>", 
"<span class=\"comment\"> * needs to be handled by the broadcast device.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tick_device_uses_broadcast\">tick_device_uses_broadcast</a>(struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Devices might be registered with both periodic and oneshot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mode disabled. This signals, that the device needs to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * operated from the broadcast device and is a placeholder for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the cpu local device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tick_device_is_functional\">tick_device_is_functional</a>(<a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_handler\">event_handler</a> = <a class=\"id\" href=\"#tick_handle_periodic\">tick_handle_periodic</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#tick_get_broadcast_mask\">tick_get_broadcast_mask</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_broadcast_start_periodic\">tick_broadcast_start_periodic</a>(<a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>.<a class=\"id\" href=\"#evtdev\">evtdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * When the new device is not affected by the stop</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * feature and the cpu is marked in the broadcast mask</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * then clear the broadcast bit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#CLOCK_EVT_FEAT_C3STOP\">CLOCK_EVT_FEAT_C3STOP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#tick_get_broadcast_mask\">tick_get_broadcast_mask</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_broadcast_clear_oneshot\">tick_broadcast_clear_oneshot</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Broadcast the event to the cpus, which are set in the mask (mangled).</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tick_do_broadcast\">tick_do_broadcast</a>(struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_device\">tick_device</a> *<a class=\"id\" href=\"#td\">td</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check, if the current cpu is in the mask</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#td\">td</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tick_cpu_device\">tick_cpu_device</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>-><a class=\"id\" href=\"#event_handler\">event_handler</a>(<a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#mask\">mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It might be necessary to actually check whether the devices</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * have different broadcast functions. For now, just use the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * one of the first device. This works as long as we have this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * misfeature only on x86 (lapic)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#td\">td</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tick_cpu_device\">tick_cpu_device</a>, <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#mask\">mask</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>-><a class=\"id\" href=\"#broadcast\">broadcast</a>(<a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Periodic broadcast:</span>", 
"<span class=\"comment\"> * - invoke the broadcast handlers</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tick_do_periodic_broadcast\">tick_do_periodic_broadcast</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#tmpmask\">tmpmask</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>, <a class=\"id\" href=\"#tick_get_broadcast_mask\">tick_get_broadcast_mask</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tick_do_broadcast\">tick_do_broadcast</a>(<a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#tmpmask\">tmpmask</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Event handler for periodic broadcast ticks</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tick_handle_periodic_broadcast\">tick_handle_periodic_broadcast</a>(struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tick_do_periodic_broadcast\">tick_do_periodic_broadcast</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The device is in periodic mode. No reprogramming necessary:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#CLOCK_EVT_MODE_PERIODIC\">CLOCK_EVT_MODE_PERIODIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Setup the next period for devices, which do not have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * periodic mode. We read dev-&gt;next_event first and add to it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when the event already expired. clockevents_program_event()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sets dev-&gt;next_event only when the event is really</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * programmed to the device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#next_event\">next_event</a>; ;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#ktime_add\">ktime_add</a>(<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#tick_period\">tick_period</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#clockevents_program_event\">clockevents_program_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#ktime_get\">ktime_get</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_do_periodic_broadcast\">tick_do_periodic_broadcast</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Powerstate information: The system enters/leaves a state, where</span>", 
"<span class=\"comment\"> * affected devices might stop</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tick_do_broadcast_on_off\">tick_do_broadcast_on_off</a>(unsigned long *<a class=\"id\" href=\"#reason\">reason</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#bc\">bc</a>, *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_device\">tick_device</a> *<a class=\"id\" href=\"#td\">td</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#bc_stopped\">bc_stopped</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#td\">td</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tick_cpu_device\">tick_cpu_device</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bc\">bc</a> = <a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>.<a class=\"id\" href=\"#evtdev\">evtdev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Is the device not affected by the powerstate ?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a> || !(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#CLOCK_EVT_FEAT_C3STOP\">CLOCK_EVT_FEAT_C3STOP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tick_device_is_functional\">tick_device_is_functional</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bc_stopped\">bc_stopped</a> = <a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#tick_get_broadcast_mask\">tick_get_broadcast_mask</a>());", 
"", 
"<span class=\"ts\"/>switch (*<a class=\"id\" href=\"#reason\">reason</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_BROADCAST_ON\">CLOCK_EVT_NOTIFY_BROADCAST_ON</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_BROADCAST_FORCE\">CLOCK_EVT_NOTIFY_BROADCAST_FORCE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#tick_get_broadcast_mask\">tick_get_broadcast_mask</a>())) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#tick_get_broadcast_mask\">tick_get_broadcast_mask</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>.<a class=\"id\" href=\"#mode\">mode</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#TICKDEV_MODE_PERIODIC\">TICKDEV_MODE_PERIODIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clockevents_shutdown\">clockevents_shutdown</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#reason\">reason</a> == <a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_BROADCAST_FORCE\">CLOCK_EVT_NOTIFY_BROADCAST_FORCE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_broadcast_force\">tick_broadcast_force</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_BROADCAST_OFF\">CLOCK_EVT_NOTIFY_BROADCAST_OFF</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tick_broadcast_force\">tick_broadcast_force</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#tick_get_broadcast_mask\">tick_get_broadcast_mask</a>())) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#tick_get_broadcast_mask\">tick_get_broadcast_mask</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>.<a class=\"id\" href=\"#mode\">mode</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#TICKDEV_MODE_PERIODIC\">TICKDEV_MODE_PERIODIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_setup_periodic\">tick_setup_periodic</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#tick_get_broadcast_mask\">tick_get_broadcast_mask</a>())) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bc_stopped\">bc_stopped</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clockevents_shutdown\">clockevents_shutdown</a>(<a class=\"id\" href=\"#bc\">bc</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#bc_stopped\">bc_stopped</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>.<a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#TICKDEV_MODE_PERIODIC\">TICKDEV_MODE_PERIODIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_broadcast_start_periodic\">tick_broadcast_start_periodic</a>(<a class=\"id\" href=\"#bc\">bc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_broadcast_setup_oneshot\">tick_broadcast_setup_oneshot</a>(<a class=\"id\" href=\"#bc\">bc</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Powerstate information: The system enters/leaves a state, where</span>", 
"<span class=\"comment\"> * affected devices might stop.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tick_broadcast_on_off\">tick_broadcast_on_off</a>(unsigned long <a class=\"id\" href=\"#reason\">reason</a>, int *<a class=\"id\" href=\"#oncpu\">oncpu</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(*<a class=\"id\" href=\"#oncpu\">oncpu</a>, <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"tick-broadcast: ignoring broadcast for \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"offline CPU #%d\\n\", *<a class=\"id\" href=\"#oncpu\">oncpu</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_do_broadcast_on_off\">tick_do_broadcast_on_off</a>(&amp;<a class=\"id\" href=\"#reason\">reason</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set the periodic handler depending on broadcast on/off</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tick_set_periodic_handler\">tick_set_periodic_handler</a>(struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#broadcast\">broadcast</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#broadcast\">broadcast</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_handler\">event_handler</a> = <a class=\"id\" href=\"#tick_handle_periodic\">tick_handle_periodic</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_handler\">event_handler</a> = <a class=\"id\" href=\"#tick_handle_periodic_broadcast\">tick_handle_periodic_broadcast</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove a CPU from broadcasting</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tick_shutdown_broadcast\">tick_shutdown_broadcast</a>(unsigned int *<a class=\"id\" href=\"#cpup\">cpup</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#bc\">bc</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a> = *<a class=\"id\" href=\"#cpup\">cpup</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bc\">bc</a> = <a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>.<a class=\"id\" href=\"#evtdev\">evtdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#tick_get_broadcast_mask\">tick_get_broadcast_mask</a>());", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>.<a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#TICKDEV_MODE_PERIODIC\">TICKDEV_MODE_PERIODIC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bc\">bc</a> && <a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#tick_get_broadcast_mask\">tick_get_broadcast_mask</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clockevents_shutdown\">clockevents_shutdown</a>(<a class=\"id\" href=\"#bc\">bc</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#tick_suspend_broadcast\">tick_suspend_broadcast</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#bc\">bc</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bc\">bc</a> = <a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>.<a class=\"id\" href=\"#evtdev\">evtdev</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bc\">bc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clockevents_shutdown\">clockevents_shutdown</a>(<a class=\"id\" href=\"#bc\">bc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#tick_resume_broadcast\">tick_resume_broadcast</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#bc\">bc</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#broadcast\">broadcast</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bc\">bc</a> = <a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>.<a class=\"id\" href=\"#evtdev\">evtdev</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bc\">bc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clockevents_set_mode\">clockevents_set_mode</a>(<a class=\"id\" href=\"#bc\">bc</a>, <a class=\"id\" href=\"#CLOCK_EVT_MODE_RESUME\">CLOCK_EVT_MODE_RESUME</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>.<a class=\"id\" href=\"#mode\">mode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#TICKDEV_MODE_PERIODIC\">TICKDEV_MODE_PERIODIC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#tick_get_broadcast_mask\">tick_get_broadcast_mask</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_broadcast_start_periodic\">tick_broadcast_start_periodic</a>(<a class=\"id\" href=\"#bc\">bc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#broadcast\">broadcast</a> = <a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#tick_get_broadcast_mask\">tick_get_broadcast_mask</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#TICKDEV_MODE_ONESHOT\">TICKDEV_MODE_ONESHOT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#broadcast\">broadcast</a> = <a class=\"id\" href=\"#tick_resume_broadcast_oneshot\">tick_resume_broadcast_oneshot</a>(<a class=\"id\" href=\"#bc\">bc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#broadcast\">broadcast</a>;", 
"}", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TICK_ONESHOT\">CONFIG_TICK_ONESHOT</a>", 
"", 
"<span class=\"comment\">/* FIXME: use cpumask_var_t. */</span>", 
"static <a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#tick_broadcast_oneshot_mask\">tick_broadcast_oneshot_mask</a>, <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Exposed for debugging: see timer_list.c</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#tick_get_broadcast_oneshot_mask\">tick_get_broadcast_oneshot_mask</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#tick_broadcast_oneshot_mask\">tick_broadcast_oneshot_mask</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#tick_broadcast_set_event\">tick_broadcast_set_event</a>(<a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#expires\">expires</a>, int <a class=\"id\" href=\"#force\">force</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#bc\">bc</a> = <a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>.<a class=\"id\" href=\"#evtdev\">evtdev</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tick_dev_program_event\">tick_dev_program_event</a>(<a class=\"id\" href=\"#bc\">bc</a>, <a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#force\">force</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#tick_resume_broadcast_oneshot\">tick_resume_broadcast_oneshot</a>(struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#bc\">bc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clockevents_set_mode\">clockevents_set_mode</a>(<a class=\"id\" href=\"#bc\">bc</a>, <a class=\"id\" href=\"#CLOCK_EVT_MODE_ONESHOT\">CLOCK_EVT_MODE_ONESHOT</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called from irq_enter() when idle was interrupted to reenable the</span>", 
"<span class=\"comment\"> * per cpu device.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tick_check_oneshot_broadcast\">tick_check_oneshot_broadcast</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#tick_broadcast_oneshot_mask\">tick_broadcast_oneshot_mask</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_device\">tick_device</a> *<a class=\"id\" href=\"#td\">td</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tick_cpu_device\">tick_cpu_device</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clockevents_set_mode\">clockevents_set_mode</a>(<a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>, <a class=\"id\" href=\"#CLOCK_EVT_MODE_ONESHOT\">CLOCK_EVT_MODE_ONESHOT</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle oneshot mode broadcasting</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tick_handle_oneshot_broadcast\">tick_handle_oneshot_broadcast</a>(struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_device\">tick_device</a> *<a class=\"id\" href=\"#td\">td</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#next_event\">next_event</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>);", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#next_event\">next_event</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_event\">next_event</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear\">cpumask_clear</a>(<a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#tmpmask\">tmpmask</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* Find all expired events */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#tick_get_broadcast_oneshot_mask\">tick_get_broadcast_oneshot_mask</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#td\">td</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tick_cpu_device\">tick_cpu_device</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>-><a class=\"id\" href=\"#next_event\">next_event</a>.<a class=\"id\" href=\"#tv64\">tv64</a> <= <a class=\"id\" href=\"#now\">now</a>.<a class=\"id\" href=\"#tv64\">tv64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#tmpmask\">tmpmask</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>-><a class=\"id\" href=\"#next_event\">next_event</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &lt; <a class=\"id\" href=\"#next_event\">next_event</a>.<a class=\"id\" href=\"#tv64\">tv64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_event\">next_event</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>-><a class=\"id\" href=\"#next_event\">next_event</a>.<a class=\"id\" href=\"#tv64\">tv64</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wakeup the cpus which have an expired event.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tick_do_broadcast\">tick_do_broadcast</a>(<a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#tmpmask\">tmpmask</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Two reasons for reprogram:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - The global event did not expire any CPU local</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * events. This happens in dyntick mode, as the maximum PIT</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * delta is quite small.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - There are pending events on sleeping CPUs which were not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the event mask</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next_event\">next_event</a>.<a class=\"id\" href=\"#tv64\">tv64</a> != <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Rearm the broadcast device. If event expired,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * repeat the above</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tick_broadcast_set_event\">tick_broadcast_set_event</a>(<a class=\"id\" href=\"#next_event\">next_event</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Powerstate information: The system enters/leaves a state, where</span>", 
"<span class=\"comment\"> * affected devices might stop</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tick_broadcast_oneshot_control\">tick_broadcast_oneshot_control</a>(unsigned long <a class=\"id\" href=\"#reason\">reason</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#bc\">bc</a>, *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_device\">tick_device</a> *<a class=\"id\" href=\"#td\">td</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Periodic mode does not care about the enter/exit of power</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * states</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>.<a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#TICKDEV_MODE_PERIODIC\">TICKDEV_MODE_PERIODIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bc\">bc</a> = <a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>.<a class=\"id\" href=\"#evtdev\">evtdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#td\">td</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tick_cpu_device\">tick_cpu_device</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#CLOCK_EVT_FEAT_C3STOP\">CLOCK_EVT_FEAT_C3STOP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reason\">reason</a> == <a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_BROADCAST_ENTER\">CLOCK_EVT_NOTIFY_BROADCAST_ENTER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#tick_get_broadcast_oneshot_mask\">tick_get_broadcast_oneshot_mask</a>())) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#tick_get_broadcast_oneshot_mask\">tick_get_broadcast_oneshot_mask</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clockevents_set_mode\">clockevents_set_mode</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#CLOCK_EVT_MODE_SHUTDOWN\">CLOCK_EVT_MODE_SHUTDOWN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#next_event\">next_event</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &lt; <a class=\"id\" href=\"#bc\">bc</a>-><a class=\"id\" href=\"#next_event\">next_event</a>.<a class=\"id\" href=\"#tv64\">tv64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_broadcast_set_event\">tick_broadcast_set_event</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#next_event\">next_event</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#tick_get_broadcast_oneshot_mask\">tick_get_broadcast_oneshot_mask</a>())) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#tick_get_broadcast_oneshot_mask\">tick_get_broadcast_oneshot_mask</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clockevents_set_mode\">clockevents_set_mode</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#CLOCK_EVT_MODE_ONESHOT\">CLOCK_EVT_MODE_ONESHOT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#next_event\">next_event</a>.<a class=\"id\" href=\"#tv64\">tv64</a> != <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_program_event\">tick_program_event</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#next_event\">next_event</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Reset the one shot broadcast for a cpu</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with tick_broadcast_lock held</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tick_broadcast_clear_oneshot\">tick_broadcast_clear_oneshot</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#tick_get_broadcast_oneshot_mask\">tick_get_broadcast_oneshot_mask</a>());", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tick_broadcast_init_next_event\">tick_broadcast_init_next_event</a>(struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#expires\">expires</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_device\">tick_device</a> *<a class=\"id\" href=\"#td\">td</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#td\">td</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tick_cpu_device\">tick_cpu_device</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>-><a class=\"id\" href=\"#next_event\">next_event</a> = <a class=\"id\" href=\"#expires\">expires</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tick_broadcast_setup_oneshot - setup the broadcast device</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tick_broadcast_setup_oneshot\">tick_broadcast_setup_oneshot</a>(struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#bc\">bc</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Set it up only once ! */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bc\">bc</a>-><a class=\"id\" href=\"#event_handler\">event_handler</a> != <a class=\"id\" href=\"#tick_handle_oneshot_broadcast\">tick_handle_oneshot_broadcast</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#was_periodic\">was_periodic</a> = <a class=\"id\" href=\"#bc\">bc</a>-><a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#CLOCK_EVT_MODE_PERIODIC\">CLOCK_EVT_MODE_PERIODIC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bc\">bc</a>-><a class=\"id\" href=\"#event_handler\">event_handler</a> = <a class=\"id\" href=\"#tick_handle_oneshot_broadcast\">tick_handle_oneshot_broadcast</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clockevents_set_mode\">clockevents_set_mode</a>(<a class=\"id\" href=\"#bc\">bc</a>, <a class=\"id\" href=\"#CLOCK_EVT_MODE_ONESHOT\">CLOCK_EVT_MODE_ONESHOT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Take the do_timer update */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_do_timer_cpu\">tick_do_timer_cpu</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We must be careful here. There might be other CPUs</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * waiting for periodic broadcast. We need to set the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * oneshot_mask bits for those and program the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * broadcast device to fire.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#tmpmask\">tmpmask</a>), <a class=\"id\" href=\"#tick_get_broadcast_mask\">tick_get_broadcast_mask</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#tmpmask\">tmpmask</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_or\">cpumask_or</a>(<a class=\"id\" href=\"#tick_get_broadcast_oneshot_mask\">tick_get_broadcast_oneshot_mask</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#tick_get_broadcast_oneshot_mask\">tick_get_broadcast_oneshot_mask</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#tmpmask\">tmpmask</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#was_periodic\">was_periodic</a> && !<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#tmpmask\">tmpmask</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_broadcast_init_next_event\">tick_broadcast_init_next_event</a>(<a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#tmpmask\">tmpmask</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#tick_next_period\">tick_next_period</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_broadcast_set_event\">tick_broadcast_set_event</a>(<a class=\"id\" href=\"#tick_next_period\">tick_next_period</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bc\">bc</a>-><a class=\"id\" href=\"#next_event\">next_event</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Select oneshot operating mode for the broadcast device</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tick_broadcast_switch_to_oneshot\">tick_broadcast_switch_to_oneshot</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#bc\">bc</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>.<a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#TICKDEV_MODE_ONESHOT\">TICKDEV_MODE_ONESHOT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bc\">bc</a> = <a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>.<a class=\"id\" href=\"#evtdev\">evtdev</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bc\">bc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_broadcast_setup_oneshot\">tick_broadcast_setup_oneshot</a>(<a class=\"id\" href=\"#bc\">bc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove a dead CPU from broadcasting</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tick_shutdown_broadcast_oneshot\">tick_shutdown_broadcast_oneshot</a>(unsigned int *<a class=\"id\" href=\"#cpup\">cpup</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a> = *<a class=\"id\" href=\"#cpup\">cpup</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Clear the broadcast mask flag for the dead cpu, but do not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stop the broadcast device!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#tick_get_broadcast_oneshot_mask\">tick_get_broadcast_oneshot_mask</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tick_broadcast_lock\">tick_broadcast_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check, whether the broadcast device is in one shot mode</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tick_broadcast_oneshot_active\">tick_broadcast_oneshot_active</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tick_broadcast_device\">tick_broadcast_device</a>.<a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#TICKDEV_MODE_ONESHOT\">TICKDEV_MODE_ONESHOT</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/37/2964fa809077a653039c02e5e6d8e9faa629e6.xr', __xr_tmp);
