var __xr_tmp = [
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#t\">t</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#generic_swap\">generic_swap</a>(void *<a class=\"id\" href=\"#a\">a</a>, void *<a class=\"id\" href=\"#b\">b</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#t\">t</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = *(char *)<a class=\"id\" href=\"#a\">a</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*(char *)<a class=\"id\" href=\"#a\">a</a>++ = *(char *)<a class=\"id\" href=\"#b\">b</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*(char *)<a class=\"id\" href=\"#b\">b</a>++ = <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>} while (--<a class=\"id\" href=\"#size\">size</a> &gt; 0);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sort - sort an array of elements</span>", 
"<span class=\"comment\"> * @base: pointer to data to sort</span>", 
"<span class=\"comment\"> * @num: number of elements</span>", 
"<span class=\"comment\"> * @size: size of each element</span>", 
"<span class=\"comment\"> * @cmp_func: pointer to comparison function</span>", 
"<span class=\"comment\"> * @swap_func: pointer to swap function or NULL</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function does a heapsort on the given array. You may provide a</span>", 
"<span class=\"comment\"> * swap_func function optimized to your element type.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sorting time is O(n log n) both on average and worst-case. While</span>", 
"<span class=\"comment\"> * qsort is about 20% faster on average, it suffers from exploitable</span>", 
"<span class=\"comment\"> * O(n*n) worst-case behavior and extra memory requirements that make</span>", 
"<span class=\"comment\"> * it less suitable for kernel use.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#sort\">sort</a>(void *<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/>  int (*<a class=\"id\" href=\"#cmp_func\">cmp_func</a>)(const void *, const void *),", 
"<span class=\"ts\"/>  void (*<a class=\"id\" href=\"#swap_func\">swap_func</a>)(void *, void *, int <a class=\"id\" href=\"#size\">size</a>))", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* pre-scale counters for performance */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#num\">num</a>/2 - 1) * <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#num\">num</a> * <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#swap_func\">swap_func</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_func\">swap_func</a> = (<a class=\"id\" href=\"#size\">size</a> == 4 ? <a class=\"id\" href=\"#u32_swap\">u32_swap</a> : <a class=\"id\" href=\"#generic_swap\">generic_swap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* heapify */</span>", 
"<span class=\"ts\"/>for ( ; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a> -= <a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#i\">i</a>; <a class=\"id\" href=\"#r\">r</a> * 2 + <a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#n\">n</a>; <a class=\"id\" href=\"#r\">r</a>  = <a class=\"id\" href=\"#c\">c</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#r\">r</a> * 2 + <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> &lt; <a class=\"id\" href=\"#n\">n</a> - <a class=\"id\" href=\"#size\">size</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmp_func\">cmp_func</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#c\">c</a> + <a class=\"id\" href=\"#size\">size</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cmp_func\">cmp_func</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#c\">c</a>) >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_func\">swap_func</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* sort */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#n\">n</a> - <a class=\"id\" href=\"#size\">size</a>; <a class=\"id\" href=\"#i\">i</a> &gt; 0; <a class=\"id\" href=\"#i\">i</a> -= <a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_func\">swap_func</a>(<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#r\">r</a> = 0; <a class=\"id\" href=\"#r\">r</a> * 2 + <a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#i\">i</a>; <a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#c\">c</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#r\">r</a> * 2 + <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> &lt; <a class=\"id\" href=\"#i\">i</a> - <a class=\"id\" href=\"#size\">size</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmp_func\">cmp_func</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#c\">c</a> + <a class=\"id\" href=\"#size\">size</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cmp_func\">cmp_func</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#c\">c</a>) >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_func\">swap_func</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sort\">sort</a>);", 
"", 
"#if 0", 
"<span class=\"comment\">/* a simple boot-time regression test */</span>", 
"", 
"int <a class=\"id\" href=\"#cmpint\">cmpint</a>(const void *<a class=\"id\" href=\"#a\">a</a>, const void *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>return *(int *)<a class=\"id\" href=\"#a\">a</a> - *(int *)<a class=\"id\" href=\"#b\">b</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sort_test\">sort_test</a>(void)", 
"{", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#r\">r</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(1000 * sizeof(int), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#a\">a</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"testing sort()\\n\");", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 1000; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = (<a class=\"id\" href=\"#r\">r</a> * 725861) % 6599;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sort\">sort</a>(<a class=\"id\" href=\"#a\">a</a>, 1000, sizeof(int), <a class=\"id\" href=\"#cmpint\">cmpint</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 999; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#a\">a</a>[<a class=\"id\" href=\"#i\">i</a>] &gt; <a class=\"id\" href=\"#a\">a</a>[<a class=\"id\" href=\"#i\">i</a>+1]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"sort() failed!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#a\">a</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#sort_test\">sort_test</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/37/443a56369f3f1753f93463d9225b4eff23eea8.xr', __xr_tmp);
