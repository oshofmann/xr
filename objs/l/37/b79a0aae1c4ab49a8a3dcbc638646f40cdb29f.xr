var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * VLAN<span class=\"ts\"/><span class=\"ts\"/>An implementation of 802.1Q VLAN tagging.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors:<span class=\"ts\"/>Ben Greear &lt;greearb@candelatech.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_IF_VLAN_H_\">_LINUX_IF_VLAN_H_</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_IF_VLAN_H_\">_LINUX_IF_VLAN_H_</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#etherdevice\">etherdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VLAN_HLEN\">VLAN_HLEN</a><span class=\"ts\"/>4<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The additional bytes (on top of the Ethernet header)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * that VLAN requires.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VLAN_ETH_ALEN\">VLAN_ETH_ALEN</a><span class=\"ts\"/>6<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Octets in one ethernet addr<span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VLAN_ETH_HLEN\">VLAN_ETH_HLEN</a><span class=\"ts\"/>18<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Total octets in header.<span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VLAN_ETH_ZLEN\">VLAN_ETH_ZLEN</a><span class=\"ts\"/>64<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Min. octets in frame sans FCS */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * According to 802.3ac, the packet can be 4 bytes longer. --Klika Jan</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VLAN_ETH_DATA_LEN\">VLAN_ETH_DATA_LEN</a><span class=\"ts\"/>1500<span class=\"ts\"/><span class=\"comment\">/* Max. octets in payload<span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VLAN_ETH_FRAME_LEN\">VLAN_ETH_FRAME_LEN</a><span class=\"ts\"/>1518<span class=\"ts\"/><span class=\"comment\">/* Max. octets in frame sans FCS */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>struct vlan_hdr - vlan header</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@h_vlan_TCI: priority and VLAN ID</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@h_vlan_encapsulated_proto: packet type ID or len</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#vlan_hdr\">vlan_hdr</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a><span class=\"ts\"/><a class=\"id\" href=\"#h_vlan_TCI\">h_vlan_TCI</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a><span class=\"ts\"/><a class=\"id\" href=\"#h_vlan_encapsulated_proto\">h_vlan_encapsulated_proto</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>struct vlan_ethhdr - vlan ethernet header (ethhdr + vlan_hdr)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@h_dest: destination ethernet address</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@h_source: source ethernet address</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@h_vlan_proto: ethernet protocol (always 0x8100)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@h_vlan_TCI: priority and VLAN ID</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@h_vlan_encapsulated_proto: packet type ID or len</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#vlan_ethhdr\">vlan_ethhdr</a> {", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><a class=\"id\" href=\"#h_dest\">h_dest</a>[<a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>];", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><a class=\"id\" href=\"#h_source\">h_source</a>[<a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h_vlan_proto\">h_vlan_proto</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h_vlan_TCI\">h_vlan_TCI</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h_vlan_encapsulated_proto\">h_vlan_encapsulated_proto</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#vlan_ethhdr\">vlan_ethhdr</a> *<a class=\"id\" href=\"#vlan_eth_hdr\">vlan_eth_hdr</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#vlan_ethhdr\">vlan_ethhdr</a> *)<a class=\"id\" href=\"#skb_mac_header\">skb_mac_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VLAN_PRIO_MASK\">VLAN_PRIO_MASK</a><span class=\"ts\"/><span class=\"ts\"/>0xe000 <span class=\"comment\">/* Priority Code Point */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VLAN_PRIO_SHIFT\">VLAN_PRIO_SHIFT</a><span class=\"ts\"/><span class=\"ts\"/>13", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VLAN_CFI_MASK\">VLAN_CFI_MASK</a><span class=\"ts\"/><span class=\"ts\"/>0x1000 <span class=\"comment\">/* Canonical Format Indicator */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VLAN_TAG_PRESENT\">VLAN_TAG_PRESENT</a><span class=\"ts\"/><a class=\"id\" href=\"#VLAN_CFI_MASK\">VLAN_CFI_MASK</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VLAN_VID_MASK\">VLAN_VID_MASK</a><span class=\"ts\"/><span class=\"ts\"/>0x0fff <span class=\"comment\">/* VLAN Identifier */</span>", 
"", 
"<span class=\"comment\">/* found in socket.c */</span>", 
"extern void <a class=\"id\" href=\"#vlan_ioctl_set\">vlan_ioctl_set</a>(int (*<a class=\"id\" href=\"#hook\">hook</a>)(struct <a class=\"id\" href=\"#net\">net</a> *, void <a class=\"id\" href=\"#__user\">__user</a> *));", 
"", 
"<span class=\"comment\">/* if this changes, algorithm will have to be reworked because this</span>", 
"<span class=\"comment\"> * depends on completely exhausting the VLAN identifier space.  Thus</span>", 
"<span class=\"comment\"> * it gives constant time look-up, but in many cases it wastes memory.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VLAN_GROUP_ARRAY_LEN\">VLAN_GROUP_ARRAY_LEN</a>          4096", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VLAN_GROUP_ARRAY_SPLIT_PARTS\">VLAN_GROUP_ARRAY_SPLIT_PARTS</a>  8", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VLAN_GROUP_ARRAY_PART_LEN\">VLAN_GROUP_ARRAY_PART_LEN</a>     (<a class=\"id\" href=\"#VLAN_GROUP_ARRAY_LEN\">VLAN_GROUP_ARRAY_LEN</a>/<a class=\"id\" href=\"#VLAN_GROUP_ARRAY_SPLIT_PARTS\">VLAN_GROUP_ARRAY_SPLIT_PARTS</a>)", 
"", 
"struct <a class=\"id\" href=\"#vlan_group\">vlan_group</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#real_dev\">real_dev</a>; <span class=\"comment\">/* The ethernet(like) device</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    * the vlan is attached to.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_vlans\">nr_vlans</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#killall\">killall</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a><span class=\"ts\"/><a class=\"id\" href=\"#hlist\">hlist</a>;<span class=\"ts\"/><span class=\"comment\">/* linked list */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> **<a class=\"id\" href=\"#vlan_devices_arrays\">vlan_devices_arrays</a>[<a class=\"id\" href=\"#VLAN_GROUP_ARRAY_SPLIT_PARTS\">VLAN_GROUP_ARRAY_SPLIT_PARTS</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu\">rcu</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#vlan_group_get_device\">vlan_group_get_device</a>(struct <a class=\"id\" href=\"#vlan_group\">vlan_group</a> *<a class=\"id\" href=\"#vg\">vg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#vlan_id\">vlan_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> **<a class=\"id\" href=\"#array\">array</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#array\">array</a> = <a class=\"id\" href=\"#vg\">vg</a>-><a class=\"id\" href=\"#vlan_devices_arrays\">vlan_devices_arrays</a>[<a class=\"id\" href=\"#vlan_id\">vlan_id</a> / <a class=\"id\" href=\"#VLAN_GROUP_ARRAY_PART_LEN\">VLAN_GROUP_ARRAY_PART_LEN</a>];", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#array\">array</a> ? <a class=\"id\" href=\"#array\">array</a>[<a class=\"id\" href=\"#vlan_id\">vlan_id</a> % <a class=\"id\" href=\"#VLAN_GROUP_ARRAY_PART_LEN\">VLAN_GROUP_ARRAY_PART_LEN</a>] : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#vlan_group_set_device\">vlan_group_set_device</a>(struct <a class=\"id\" href=\"#vlan_group\">vlan_group</a> *<a class=\"id\" href=\"#vg\">vg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#vlan_id\">vlan_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> **<a class=\"id\" href=\"#array\">array</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vg\">vg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#array\">array</a> = <a class=\"id\" href=\"#vg\">vg</a>-><a class=\"id\" href=\"#vlan_devices_arrays\">vlan_devices_arrays</a>[<a class=\"id\" href=\"#vlan_id\">vlan_id</a> / <a class=\"id\" href=\"#VLAN_GROUP_ARRAY_PART_LEN\">VLAN_GROUP_ARRAY_PART_LEN</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#array\">array</a>[<a class=\"id\" href=\"#vlan_id\">vlan_id</a> % <a class=\"id\" href=\"#VLAN_GROUP_ARRAY_PART_LEN\">VLAN_GROUP_ARRAY_PART_LEN</a>] = <a class=\"id\" href=\"#dev\">dev</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#vlan_tx_tag_present\">vlan_tx_tag_present</a>(<a class=\"id\" href=\"#__skb\">__skb</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#__skb\">__skb</a>)-><a class=\"id\" href=\"#vlan_tci\">vlan_tci</a> &amp; <a class=\"id\" href=\"#VLAN_TAG_PRESENT\">VLAN_TAG_PRESENT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#vlan_tx_tag_get\">vlan_tx_tag_get</a>(<a class=\"id\" href=\"#__skb\">__skb</a>)<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#__skb\">__skb</a>)-><a class=\"id\" href=\"#vlan_tci\">vlan_tci</a> &amp; ~<a class=\"id\" href=\"#VLAN_TAG_PRESENT\">VLAN_TAG_PRESENT</a>)", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_VLAN_8021Q\">CONFIG_VLAN_8021Q</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_VLAN_8021Q_MODULE\">CONFIG_VLAN_8021Q_MODULE</a>)", 
"extern struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#vlan_dev_real_dev\">vlan_dev_real_dev</a>(const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"extern <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#vlan_dev_vlan_id\">vlan_dev_vlan_id</a>(const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"extern int <a class=\"id\" href=\"#__vlan_hwaccel_rx\">__vlan_hwaccel_rx</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#vlan_group\">vlan_group</a> *<a class=\"id\" href=\"#grp\">grp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>, int <a class=\"id\" href=\"#polling\">polling</a>);", 
"extern int <a class=\"id\" href=\"#vlan_hwaccel_do_receive\">vlan_hwaccel_do_receive</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern <a class=\"id\" href=\"#gro_result_t\">gro_result_t</a>", 
"<a class=\"id\" href=\"#vlan_gro_receive\">vlan_gro_receive</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#napi\">napi</a>, struct <a class=\"id\" href=\"#vlan_group\">vlan_group</a> *<a class=\"id\" href=\"#grp\">grp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern <a class=\"id\" href=\"#gro_result_t\">gro_result_t</a>", 
"<a class=\"id\" href=\"#vlan_gro_frags\">vlan_gro_frags</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#napi\">napi</a>, struct <a class=\"id\" href=\"#vlan_group\">vlan_group</a> *<a class=\"id\" href=\"#grp\">grp</a>,", 
"<span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>);", 
"", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#vlan_dev_real_dev\">vlan_dev_real_dev</a>(const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#vlan_dev_vlan_id\">vlan_dev_vlan_id</a>(const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__vlan_hwaccel_rx\">__vlan_hwaccel_rx</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#vlan_group\">vlan_group</a> *<a class=\"id\" href=\"#grp\">grp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>, int <a class=\"id\" href=\"#polling\">polling</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NET_XMIT_SUCCESS\">NET_XMIT_SUCCESS</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#vlan_hwaccel_do_receive\">vlan_hwaccel_do_receive</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#gro_result_t\">gro_result_t</a>", 
"<a class=\"id\" href=\"#vlan_gro_receive\">vlan_gro_receive</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#napi\">napi</a>, struct <a class=\"id\" href=\"#vlan_group\">vlan_group</a> *<a class=\"id\" href=\"#grp\">grp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#GRO_DROP\">GRO_DROP</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#gro_result_t\">gro_result_t</a>", 
"<a class=\"id\" href=\"#vlan_gro_frags\">vlan_gro_frags</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#napi\">napi</a>, struct <a class=\"id\" href=\"#vlan_group\">vlan_group</a> *<a class=\"id\" href=\"#grp\">grp</a>,", 
"<span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#GRO_DROP\">GRO_DROP</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vlan_hwaccel_rx - netif_rx wrapper for VLAN RX acceleration</span>", 
"<span class=\"comment\"> * @skb: buffer</span>", 
"<span class=\"comment\"> * @grp: vlan group</span>", 
"<span class=\"comment\"> * @vlan_tci: VLAN TCI as received from the card</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#vlan_hwaccel_rx\">vlan_hwaccel_rx</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#vlan_group\">vlan_group</a> *<a class=\"id\" href=\"#grp\">grp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__vlan_hwaccel_rx\">__vlan_hwaccel_rx</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#grp\">grp</a>, <a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vlan_hwaccel_receive_skb - netif_receive_skb wrapper for VLAN RX acceleration</span>", 
"<span class=\"comment\"> * @skb: buffer</span>", 
"<span class=\"comment\"> * @grp: vlan group</span>", 
"<span class=\"comment\"> * @vlan_tci: VLAN TCI as received from the card</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#vlan_hwaccel_receive_skb\">vlan_hwaccel_receive_skb</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#vlan_group\">vlan_group</a> *<a class=\"id\" href=\"#grp\">grp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__vlan_hwaccel_rx\">__vlan_hwaccel_rx</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#grp\">grp</a>, <a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __vlan_put_tag - regular VLAN tag inserting</span>", 
"<span class=\"comment\"> * @skb: skbuff to tag</span>", 
"<span class=\"comment\"> * @vlan_tci: VLAN TCI to insert</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Inserts the VLAN tag into @skb as part of the payload</span>", 
"<span class=\"comment\"> * Returns a VLAN tagged skb. If a new skb is created, @skb is freed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Following the skb_unshare() example, in case of error, the calling function</span>", 
"<span class=\"comment\"> * doesn't have to worry about freeing the original skb.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#__vlan_put_tag\">__vlan_put_tag</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vlan_ethhdr\">vlan_ethhdr</a> *<a class=\"id\" href=\"#veth\">veth</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_cow_head\">skb_cow_head</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#VLAN_HLEN\">VLAN_HLEN</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#veth\">veth</a> = (struct <a class=\"id\" href=\"#vlan_ethhdr\">vlan_ethhdr</a> *)<a class=\"id\" href=\"#skb_push\">skb_push</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#VLAN_HLEN\">VLAN_HLEN</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Move the mac addresses to the beginning of the new header. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#VLAN_HLEN\">VLAN_HLEN</a>, 2 * <a class=\"id\" href=\"#VLAN_ETH_ALEN\">VLAN_ETH_ALEN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a> -= <a class=\"id\" href=\"#VLAN_HLEN\">VLAN_HLEN</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* first, the ethernet type */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#veth\">veth</a>-><a class=\"id\" href=\"#h_vlan_proto\">h_vlan_proto</a> = <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#ETH_P_8021Q\">ETH_P_8021Q</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* now, the TCI */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#veth\">veth</a>-><a class=\"id\" href=\"#h_vlan_TCI\">h_vlan_TCI</a> = <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#ETH_P_8021Q\">ETH_P_8021Q</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __vlan_hwaccel_put_tag - hardware accelerated VLAN inserting</span>", 
"<span class=\"comment\"> * @skb: skbuff to tag</span>", 
"<span class=\"comment\"> * @vlan_tci: VLAN TCI to insert</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Puts the VLAN TCI in @skb-&gt;vlan_tci and lets the device do the rest</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#__vlan_hwaccel_put_tag\">__vlan_hwaccel_put_tag</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#vlan_tci\">vlan_tci</a> = <a class=\"id\" href=\"#VLAN_TAG_PRESENT\">VLAN_TAG_PRESENT</a> | <a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HAVE_VLAN_PUT_TAG\">HAVE_VLAN_PUT_TAG</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vlan_put_tag - inserts VLAN tag according to device features</span>", 
"<span class=\"comment\"> * @skb: skbuff to tag</span>", 
"<span class=\"comment\"> * @vlan_tci: VLAN TCI to insert</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Assumes skb-&gt;dev is the target that will xmit this frame.</span>", 
"<span class=\"comment\"> * Returns a VLAN tagged skb.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#vlan_put_tag\">vlan_put_tag</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_HW_VLAN_TX\">NETIF_F_HW_VLAN_TX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__vlan_hwaccel_put_tag\">__vlan_hwaccel_put_tag</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__vlan_put_tag\">__vlan_put_tag</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __vlan_get_tag - get the VLAN ID that is part of the payload</span>", 
"<span class=\"comment\"> * @skb: skbuff to query</span>", 
"<span class=\"comment\"> * @vlan_tci: buffer to store vlaue</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns error if the skb is not of VLAN type</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__vlan_get_tag\">__vlan_get_tag</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vlan_ethhdr\">vlan_ethhdr</a> *<a class=\"id\" href=\"#veth\">veth</a> = (struct <a class=\"id\" href=\"#vlan_ethhdr\">vlan_ethhdr</a> *)<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#veth\">veth</a>-><a class=\"id\" href=\"#h_vlan_proto\">h_vlan_proto</a> != <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#ETH_P_8021Q\">ETH_P_8021Q</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#vlan_tci\">vlan_tci</a> = <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#veth\">veth</a>-><a class=\"id\" href=\"#h_vlan_TCI\">h_vlan_TCI</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __vlan_hwaccel_get_tag - get the VLAN ID that is in @skb-&gt;cb[]</span>", 
"<span class=\"comment\"> * @skb: skbuff to query</span>", 
"<span class=\"comment\"> * @vlan_tci: buffer to store vlaue</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns error if @skb-&gt;vlan_tci is not set correctly</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__vlan_hwaccel_get_tag\">__vlan_hwaccel_get_tag</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vlan_tx_tag_present\">vlan_tx_tag_present</a>(<a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#vlan_tci\">vlan_tci</a> = <a class=\"id\" href=\"#vlan_tx_tag_get\">vlan_tx_tag_get</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#vlan_tci\">vlan_tci</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HAVE_VLAN_GET_TAG\">HAVE_VLAN_GET_TAG</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vlan_get_tag - get the VLAN ID from the skb</span>", 
"<span class=\"comment\"> * @skb: skbuff to query</span>", 
"<span class=\"comment\"> * @vlan_tci: buffer to store vlaue</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns error if the skb is not VLAN tagged</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#vlan_get_tag\">vlan_get_tag</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_HW_VLAN_TX\">NETIF_F_HW_VLAN_TX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__vlan_hwaccel_get_tag\">__vlan_hwaccel_get_tag</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__vlan_get_tag\">__vlan_get_tag</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"<span class=\"comment\">/* VLAN IOCTLs are found in sockios.h */</span>", 
"", 
"<span class=\"comment\">/* Passed in vlan_ioctl_args structure to determine behaviour. */</span>", 
"enum <a class=\"id\" href=\"#vlan_ioctl_cmds\">vlan_ioctl_cmds</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ADD_VLAN_CMD\">ADD_VLAN_CMD</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEL_VLAN_CMD\">DEL_VLAN_CMD</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SET_VLAN_INGRESS_PRIORITY_CMD\">SET_VLAN_INGRESS_PRIORITY_CMD</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SET_VLAN_EGRESS_PRIORITY_CMD\">SET_VLAN_EGRESS_PRIORITY_CMD</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#GET_VLAN_INGRESS_PRIORITY_CMD\">GET_VLAN_INGRESS_PRIORITY_CMD</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#GET_VLAN_EGRESS_PRIORITY_CMD\">GET_VLAN_EGRESS_PRIORITY_CMD</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SET_VLAN_NAME_TYPE_CMD\">SET_VLAN_NAME_TYPE_CMD</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SET_VLAN_FLAG_CMD\">SET_VLAN_FLAG_CMD</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#GET_VLAN_REALDEV_NAME_CMD\">GET_VLAN_REALDEV_NAME_CMD</a>, <span class=\"comment\">/* If this works, you know it's a VLAN device, btw */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#GET_VLAN_VID_CMD\">GET_VLAN_VID_CMD</a> <span class=\"comment\">/* Get the VID of this VLAN (specified by name) */</span>", 
"};", 
"", 
"enum <a class=\"id\" href=\"#vlan_flags\">vlan_flags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VLAN_FLAG_REORDER_HDR\">VLAN_FLAG_REORDER_HDR</a><span class=\"ts\"/>= 0x1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VLAN_FLAG_GVRP\">VLAN_FLAG_GVRP</a><span class=\"ts\"/><span class=\"ts\"/>= 0x2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VLAN_FLAG_LOOSE_BINDING\">VLAN_FLAG_LOOSE_BINDING</a><span class=\"ts\"/>= 0x4,", 
"};", 
"", 
"enum <a class=\"id\" href=\"#vlan_name_types\">vlan_name_types</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VLAN_NAME_TYPE_PLUS_VID\">VLAN_NAME_TYPE_PLUS_VID</a>, <span class=\"comment\">/* Name will look like:  vlan0005 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VLAN_NAME_TYPE_RAW_PLUS_VID\">VLAN_NAME_TYPE_RAW_PLUS_VID</a>, <span class=\"comment\">/* name will look like:  eth1.0005 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VLAN_NAME_TYPE_PLUS_VID_NO_PAD\">VLAN_NAME_TYPE_PLUS_VID_NO_PAD</a>, <span class=\"comment\">/* Name will look like:  vlan5 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VLAN_NAME_TYPE_RAW_PLUS_VID_NO_PAD\">VLAN_NAME_TYPE_RAW_PLUS_VID_NO_PAD</a>, <span class=\"comment\">/* Name will look like:  eth0.5 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VLAN_NAME_TYPE_HIGHEST\">VLAN_NAME_TYPE_HIGHEST</a>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#vlan_ioctl_args\">vlan_ioctl_args</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cmd\">cmd</a>; <span class=\"comment\">/* Should be one of the vlan_ioctl_cmds enum above. */</span>", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#device1\">device1</a>[24];", 
"", 
"        union {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#device2\">device2</a>[24];", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#VID\">VID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#skb_priority\">skb_priority</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#name_type\">name_type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bind_type\">bind_type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flag\">flag</a>; <span class=\"comment\">/* Matches vlan_dev_info flags */</span>", 
"        } <a class=\"id\" href=\"#u\">u</a>;", 
"", 
"<span class=\"ts\"/>short <a class=\"id\" href=\"#vlan_qos\">vlan_qos</a>;   ", 
"};", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !(_LINUX_IF_VLAN_H_) */</span>", 
];
xr_frag_insert('l/37/b79a0aae1c4ab49a8a3dcbc638646f40cdb29f.xr', __xr_tmp);
