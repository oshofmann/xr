var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle caching attributes in page tables (PAT)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors: Venkatesh Pallipadi &lt;venkatesh.pallipadi@intel.com&gt;</span>", 
"<span class=\"comment\"> *          Suresh B Siddha &lt;suresh.b.siddha@intel.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Loosely based on earlier PAT patchset from Eric Biederman and Andi Kleen.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugfs\">debugfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rbtree\">rbtree</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cacheflush\">cacheflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#fcntl\">fcntl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#e820\">e820</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mtrr\">mtrr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#msr\">msr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pat\">pat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"pat_internal.h\"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_PAT\">CONFIG_X86_PAT</a>", 
"int <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> <a class=\"id\" href=\"#pat_enabled\">pat_enabled</a> = 1;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#pat_disable\">pat_disable</a>(const char *<a class=\"id\" href=\"#reason\">reason</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pat_enabled\">pat_enabled</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s\\n\", <a class=\"id\" href=\"#reason\">reason</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#nopat\">nopat</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pat_disable\">pat_disable</a>(\"PAT support disabled.\");", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"nopat\", <a class=\"id\" href=\"#nopat\">nopat</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#pat_disable\">pat_disable</a>(const char *<a class=\"id\" href=\"#reason\">reason</a>)", 
"{", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#reason\">reason</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"", 
"int <a class=\"id\" href=\"#pat_debug_enable\">pat_debug_enable</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pat_debug_setup\">pat_debug_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pat_debug_enable\">pat_debug_enable</a> = 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"debugpat\", <a class=\"id\" href=\"#pat_debug_setup\">pat_debug_setup</a>);", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> <a class=\"id\" href=\"#boot_pat_state\">boot_pat_state</a>;", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PAT_UC\">PAT_UC</a> = 0,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* uncached */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PAT_WC\">PAT_WC</a> = 1,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Write combining */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PAT_WT\">PAT_WT</a> = 4,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Write Through */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PAT_WP\">PAT_WP</a> = 5,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Write Protected */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PAT_WB\">PAT_WB</a> = 6,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Write Back (default) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PAT_UC_MINUS\">PAT_UC_MINUS</a> = 7,<span class=\"ts\"/><span class=\"comment\">/* UC, but can be overriden by MTRR */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAT\">PAT</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#PAT_\">PAT_</a> ## <a class=\"id\" href=\"#y\">y</a> << ((<a class=\"id\" href=\"#x\">x</a>)*8))", 
"", 
"void <a class=\"id\" href=\"#pat_init\">pat_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#pat\">pat</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#boot_cpu\">boot_cpu</a> = !<a class=\"id\" href=\"#boot_pat_state\">boot_pat_state</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pat_enabled\">pat_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has_pat\">cpu_has_pat</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#boot_pat_state\">boot_pat_state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pat_disable\">pat_disable</a>(\"PAT not supported by CPU.\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If this happens we are on a secondary CPU, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * switched to PAT on the boot CPU. We have no way to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * undo PAT.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"PAT enabled, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"but not supported by secondary CPU\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set PWT to Write-Combining. All other bits stay the same */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PTE encoding used in Linux:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      PAT</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      |PCD</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      ||PWT</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      |||</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      000 WB<span class=\"ts\"/><span class=\"ts\"/>_PAGE_CACHE_WB</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      001 WC<span class=\"ts\"/><span class=\"ts\"/>_PAGE_CACHE_WC</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      010 UC-<span class=\"ts\"/><span class=\"ts\"/>_PAGE_CACHE_UC_MINUS</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      011 UC<span class=\"ts\"/><span class=\"ts\"/>_PAGE_CACHE_UC</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PAT bit unused</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pat\">pat</a> = <a class=\"id\" href=\"#PAT\">PAT</a>(0, <a class=\"id\" href=\"#WB\">WB</a>) | <a class=\"id\" href=\"#PAT\">PAT</a>(1, <a class=\"id\" href=\"#WC\">WC</a>) | <a class=\"id\" href=\"#PAT\">PAT</a>(2, <a class=\"id\" href=\"#UC_MINUS\">UC_MINUS</a>) | <a class=\"id\" href=\"#PAT\">PAT</a>(3, <a class=\"id\" href=\"#UC\">UC</a>) |", 
"<span class=\"ts\"/>      <a class=\"id\" href=\"#PAT\">PAT</a>(4, <a class=\"id\" href=\"#WB\">WB</a>) | <a class=\"id\" href=\"#PAT\">PAT</a>(5, <a class=\"id\" href=\"#WC\">WC</a>) | <a class=\"id\" href=\"#PAT\">PAT</a>(6, <a class=\"id\" href=\"#UC_MINUS\">UC_MINUS</a>) | <a class=\"id\" href=\"#PAT\">PAT</a>(7, <a class=\"id\" href=\"#UC\">UC</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Boot CPU check */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#boot_pat_state\">boot_pat_state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_CR_PAT\">MSR_IA32_CR_PAT</a>, <a class=\"id\" href=\"#boot_pat_state\">boot_pat_state</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_CR_PAT\">MSR_IA32_CR_PAT</a>, <a class=\"id\" href=\"#pat\">pat</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu\">boot_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"x86 PAT enabled: cpu %d, old 0x%Lx, new 0x%Lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(), <a class=\"id\" href=\"#boot_pat_state\">boot_pat_state</a>, <a class=\"id\" href=\"#pat\">pat</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#PAT\">PAT</a>", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#memtype_lock\">memtype_lock</a>);<span class=\"ts\"/><span class=\"comment\">/* protects memtype accesses */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Does intersection of PAT memory type and MTRR memory type and returns</span>", 
"<span class=\"comment\"> * the resulting memory type as PAT understands it.</span>", 
"<span class=\"comment\"> * (Type in pat and mtrr will not have same value)</span>", 
"<span class=\"comment\"> * The intersection is based on \"Effective Memory Type\" tables in IA-32</span>", 
"<span class=\"comment\"> * SDM vol 3a</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#pat_x_mtrr_type\">pat_x_mtrr_type</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>, unsigned long <a class=\"id\" href=\"#req_type\">req_type</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Look for MTRR hint to get the effective type in case where PAT</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * request is for WB.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req_type\">req_type</a> == <a class=\"id\" href=\"#_PAGE_CACHE_WB\">_PAGE_CACHE_WB</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#mtrr_type\">mtrr_type</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtrr_type\">mtrr_type</a> = <a class=\"id\" href=\"#mtrr_type_lookup\">mtrr_type_lookup</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mtrr_type\">mtrr_type</a> != <a class=\"id\" href=\"#MTRR_TYPE_WRBACK\">MTRR_TYPE_WRBACK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#_PAGE_CACHE_UC_MINUS\">_PAGE_CACHE_UC_MINUS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#_PAGE_CACHE_WB\">_PAGE_CACHE_WB</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#req_type\">req_type</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#pat_pagerange_is_ram\">pat_pagerange_is_ram</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ram_page\">ram_page</a> = 0, <a class=\"id\" href=\"#not_rampage\">not_rampage</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#page_nr\">page_nr</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#page_nr\">page_nr</a> = (<a class=\"id\" href=\"#start\">start</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>); <a class=\"id\" href=\"#page_nr\">page_nr</a> &lt; (<a class=\"id\" href=\"#end\">end</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/>     ++<a class=\"id\" href=\"#page_nr\">page_nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For legacy reasons, physical address range in the legacy ISA</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * region is tracked as non-RAM. This will allow users of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * /dev/mem to map portions of legacy ISA region, even when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * some of those portions are listed(or not even listed) with</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * different e820 types(RAM/reserved/..)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_nr\">page_nr</a> >= (<a class=\"id\" href=\"#ISA_END_ADDRESS\">ISA_END_ADDRESS</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#page_is_ram\">page_is_ram</a>(<a class=\"id\" href=\"#page_nr\">page_nr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ram_page\">ram_page</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#not_rampage\">not_rampage</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ram_page\">ram_page</a> == <a class=\"id\" href=\"#not_rampage\">not_rampage</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ram_page\">ram_page</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For RAM pages, we use page flags to mark the pages with appropriate type.</span>", 
"<span class=\"comment\"> * Here we do two pass:</span>", 
"<span class=\"comment\"> * - Find the memtype of all the pages in the range, look for any conflicts</span>", 
"<span class=\"comment\"> * - In case of no conflicts, set the new memtype for pages in the range</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#reserve_ram_pages_type\">reserve_ram_pages_type</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>, unsigned long <a class=\"id\" href=\"#req_type\">req_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long *<a class=\"id\" href=\"#new_type\">new_type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req_type\">req_type</a> == <a class=\"id\" href=\"#_PAGE_CACHE_UC\">_PAGE_CACHE_UC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We do not support strong UC */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req_type\">req_type</a> = <a class=\"id\" href=\"#_PAGE_CACHE_UC_MINUS\">_PAGE_CACHE_UC_MINUS</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = (<a class=\"id\" href=\"#start\">start</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>); <a class=\"id\" href=\"#pfn\">pfn</a> &lt; (<a class=\"id\" href=\"#end\">end</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>); ++<a class=\"id\" href=\"#pfn\">pfn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#get_page_memtype\">get_page_memtype</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> != -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"reserve_ram_pages_type failed \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"0x%Lx-0x%Lx, track 0x%lx, req 0x%lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#req_type\">req_type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_type\">new_type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#new_type\">new_type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_type\">new_type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#new_type\">new_type</a> = <a class=\"id\" href=\"#req_type\">req_type</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = (<a class=\"id\" href=\"#start\">start</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>); <a class=\"id\" href=\"#pfn\">pfn</a> &lt; (<a class=\"id\" href=\"#end\">end</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>); ++<a class=\"id\" href=\"#pfn\">pfn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_memtype\">set_page_memtype</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#req_type\">req_type</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#free_ram_pages_type\">free_ram_pages_type</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = (<a class=\"id\" href=\"#start\">start</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>); <a class=\"id\" href=\"#pfn\">pfn</a> &lt; (<a class=\"id\" href=\"#end\">end</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>); ++<a class=\"id\" href=\"#pfn\">pfn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_memtype\">set_page_memtype</a>(<a class=\"id\" href=\"#page\">page</a>, -1);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * req_type typically has one of the:</span>", 
"<span class=\"comment\"> * - _PAGE_CACHE_WB</span>", 
"<span class=\"comment\"> * - _PAGE_CACHE_WC</span>", 
"<span class=\"comment\"> * - _PAGE_CACHE_UC_MINUS</span>", 
"<span class=\"comment\"> * - _PAGE_CACHE_UC</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If new_type is NULL, function will return an error if it cannot reserve the</span>", 
"<span class=\"comment\"> * region with req_type. If new_type is non-NULL, function will return</span>", 
"<span class=\"comment\"> * available type in new_type in case of no error. In case of any error</span>", 
"<span class=\"comment\"> * it will return a negative return value.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#reserve_memtype\">reserve_memtype</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>, unsigned long <a class=\"id\" href=\"#req_type\">req_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned long *<a class=\"id\" href=\"#new_type\">new_type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#actual_type\">actual_type</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_range_ram\">is_range_ram</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#end\">end</a>); <span class=\"comment\">/* end is exclusive */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pat_enabled\">pat_enabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is identical to page table setting without PAT */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_type\">new_type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#req_type\">req_type</a> == <a class=\"id\" href=\"#_PAGE_CACHE_WC\">_PAGE_CACHE_WC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#new_type\">new_type</a> = <a class=\"id\" href=\"#_PAGE_CACHE_UC_MINUS\">_PAGE_CACHE_UC_MINUS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#new_type\">new_type</a> = <a class=\"id\" href=\"#req_type\">req_type</a> &amp; <a class=\"id\" href=\"#_PAGE_CACHE_MASK\">_PAGE_CACHE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Low ISA region is always mapped WB in page table. No need to track */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_platform\">x86_platform</a>.<a class=\"id\" href=\"#is_untracked_pat_range\">is_untracked_pat_range</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_type\">new_type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#new_type\">new_type</a> = <a class=\"id\" href=\"#_PAGE_CACHE_WB\">_PAGE_CACHE_WB</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Call mtrr_lookup to get the type hint. This is an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * optimization for /dev/mem mmap'ers into WB memory (BIOS</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tools and ACPI tools). Use WB request for WB memory and use</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * UC_MINUS otherwise.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#actual_type\">actual_type</a> = <a class=\"id\" href=\"#pat_x_mtrr_type\">pat_x_mtrr_type</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#req_type\">req_type</a> &amp; <a class=\"id\" href=\"#_PAGE_CACHE_MASK\">_PAGE_CACHE_MASK</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_type\">new_type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#new_type\">new_type</a> = <a class=\"id\" href=\"#actual_type\">actual_type</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#is_range_ram\">is_range_ram</a> = <a class=\"id\" href=\"#pat_pagerange_is_ram\">pat_pagerange_is_ram</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_range_ram\">is_range_ram</a> == 1) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#reserve_ram_pages_type\">reserve_ram_pages_type</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#req_type\">req_type</a>, <a class=\"id\" href=\"#new_type\">new_type</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#is_range_ram\">is_range_ram</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>  = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#memtype\">memtype</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#start\">start</a><span class=\"ts\"/>= <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#end\">end</a><span class=\"ts\"/>= <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#type\">type</a><span class=\"ts\"/>= <a class=\"id\" href=\"#actual_type\">actual_type</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#memtype_lock\">memtype_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#rbt_memtype_check_insert\">rbt_memtype_check_insert</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#new_type\">new_type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"reserve_memtype failed 0x%Lx-0x%Lx, \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"track %s, req %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#cattr_name\">cattr_name</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#type\">type</a>), <a class=\"id\" href=\"#cattr_name\">cattr_name</a>(<a class=\"id\" href=\"#req_type\">req_type</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#memtype_lock\">memtype_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#memtype_lock\">memtype_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"reserve_memtype added 0x%Lx-0x%Lx, track %s, req %s, ret %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#cattr_name\">cattr_name</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#type\">type</a>), <a class=\"id\" href=\"#cattr_name\">cattr_name</a>(<a class=\"id\" href=\"#req_type\">req_type</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_type\">new_type</a> ? <a class=\"id\" href=\"#cattr_name\">cattr_name</a>(*<a class=\"id\" href=\"#new_type\">new_type</a>) : \"-\");", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#free_memtype\">free_memtype</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_range_ram\">is_range_ram</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pat_enabled\">pat_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Low ISA region is always mapped WB. No need to track */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_platform\">x86_platform</a>.<a class=\"id\" href=\"#is_untracked_pat_range\">is_untracked_pat_range</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#is_range_ram\">is_range_ram</a> = <a class=\"id\" href=\"#pat_pagerange_is_ram\">pat_pagerange_is_ram</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_range_ram\">is_range_ram</a> == 1) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#free_ram_pages_type\">free_ram_pages_type</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#is_range_ram\">is_range_ram</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#memtype_lock\">memtype_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#rbt_memtype_erase\">rbt_memtype_erase</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#memtype_lock\">memtype_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s:%d freeing invalid memtype %Lx-%Lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"free_memtype request 0x%Lx-0x%Lx\\n\", <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * lookup_memtype - Looksup the memory type for a physical address</span>", 
"<span class=\"comment\"> * @paddr: physical address of which memory type needs to be looked up</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Only to be called when PAT is enabled</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns _PAGE_CACHE_WB, _PAGE_CACHE_WC, _PAGE_CACHE_UC_MINUS or</span>", 
"<span class=\"comment\"> * _PAGE_CACHE_UC</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#lookup_memtype\">lookup_memtype</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#paddr\">paddr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rettype\">rettype</a> = <a class=\"id\" href=\"#_PAGE_CACHE_WB\">_PAGE_CACHE_WB</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_platform\">x86_platform</a>.<a class=\"id\" href=\"#is_untracked_pat_range\">is_untracked_pat_range</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#paddr\">paddr</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rettype\">rettype</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pat_pagerange_is_ram\">pat_pagerange_is_ram</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#paddr\">paddr</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#paddr\">paddr</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rettype\">rettype</a> = <a class=\"id\" href=\"#get_page_memtype\">get_page_memtype</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * -1 from get_page_memtype() implies RAM page is in its</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * default state and not reserved, and hence of type WB</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rettype\">rettype</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rettype\">rettype</a> = <a class=\"id\" href=\"#_PAGE_CACHE_WB\">_PAGE_CACHE_WB</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rettype\">rettype</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#memtype_lock\">memtype_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#rbt_memtype_lookup\">rbt_memtype_lookup</a>(<a class=\"id\" href=\"#paddr\">paddr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rettype\">rettype</a> = <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rettype\">rettype</a> = <a class=\"id\" href=\"#_PAGE_CACHE_UC_MINUS\">_PAGE_CACHE_UC_MINUS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#memtype_lock\">memtype_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rettype\">rettype</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * io_reserve_memtype - Request a memory type mapping for a region of memory</span>", 
"<span class=\"comment\"> * @start: start (physical address) of the region</span>", 
"<span class=\"comment\"> * @end: end (physical address) of the region</span>", 
"<span class=\"comment\"> * @type: A pointer to memtype, with requested type. On success, requested</span>", 
"<span class=\"comment\"> * or any other compatible type that was available for the region is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On success, returns 0</span>", 
"<span class=\"comment\"> * On failure, returns non-zero</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#io_reserve_memtype\">io_reserve_memtype</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#req_type\">req_type</a> = *<a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#new_type\">new_type</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#iomem_map_sanity_check\">iomem_map_sanity_check</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#size\">size</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#reserve_memtype\">reserve_memtype</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#req_type\">req_type</a>, &amp;<a class=\"id\" href=\"#new_type\">new_type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_new_memtype_allowed\">is_new_memtype_allowed</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#req_type\">req_type</a>, <a class=\"id\" href=\"#new_type\">new_type</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kernel_map_sync_memtype\">kernel_map_sync_memtype</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#new_type\">new_type</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#new_type\">new_type</a>;", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_memtype\">free_memtype</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<a class=\"id\" href=\"#out_err\">out_err</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * io_free_memtype - Release a memory type mapping for a region of memory</span>", 
"<span class=\"comment\"> * @start: start (physical address) of the region</span>", 
"<span class=\"comment\"> * @end: end (physical address) of the region</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#io_free_memtype\">io_free_memtype</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_memtype\">free_memtype</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#phys_mem_access_prot\">phys_mem_access_prot</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#vma_prot\">vma_prot</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vma_prot\">vma_prot</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_STRICT_DEVMEM\">CONFIG_STRICT_DEVMEM</a>", 
"<span class=\"comment\">/* This check is done in drivers/char/mem.c in case of STRICT_DEVMEM*/</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#range_is_allowed\">range_is_allowed</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"#else", 
"<span class=\"comment\">/* This check is needed to avoid cache aliasing when PAT is enabled */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#range_is_allowed\">range_is_allowed</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#from\">from</a> = ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#pfn\">pfn</a>) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#from\">from</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cursor\">cursor</a> = <a class=\"id\" href=\"#from\">from</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pat_enabled\">pat_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#cursor\">cursor</a> &lt; <a class=\"id\" href=\"#to\">to</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#devmem_is_allowed\">devmem_is_allowed</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"Program %s tried to access /dev/mem between %Lx->%Lx.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cursor\">cursor</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_STRICT_DEVMEM */</span>", 
"", 
"int <a class=\"id\" href=\"#phys_mem_access_prot_allowed\">phys_mem_access_prot_allowed</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> *<a class=\"id\" href=\"#vma_prot\">vma_prot</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#_PAGE_CACHE_WB\">_PAGE_CACHE_WB</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#range_is_allowed\">range_is_allowed</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_DSYNC\">O_DSYNC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#_PAGE_CACHE_UC_MINUS\">_PAGE_CACHE_UC_MINUS</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * On the PPro and successors, the MTRRs are used to set</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * memory types for physical addresses outside main memory,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so blindly setting UC or PWT on those pages is wrong.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For Pentiums and earlier, the surround logic should disable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * caching for the high addresses through the KEN pin, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we maintain the tradition of paranoia in this code.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pat_enabled\">pat_enabled</a> &&", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_MTRR\">X86_FEATURE_MTRR</a>) ||", 
"<span class=\"ts\"/>      <a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_K6_MTRR\">X86_FEATURE_K6_MTRR</a>) ||", 
"<span class=\"ts\"/>      <a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_CYRIX_ARR\">X86_FEATURE_CYRIX_ARR</a>) ||", 
"<span class=\"ts\"/>      <a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_CENTAUR_MCR\">X86_FEATURE_CENTAUR_MCR</a>)) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#pfn\">pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) >= <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#high_memory\">high_memory</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#_PAGE_CACHE_UC\">_PAGE_CACHE_UC</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#vma_prot\">vma_prot</a> = <a class=\"id\" href=\"#__pgprot\">__pgprot</a>((<a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(*<a class=\"id\" href=\"#vma_prot\">vma_prot</a>) &amp; ~<a class=\"id\" href=\"#_PAGE_CACHE_MASK\">_PAGE_CACHE_MASK</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Change the memory type for the physial address range in kernel identity</span>", 
"<span class=\"comment\"> * mapping space if that range is a part of identity map.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kernel_map_sync_memtype\">kernel_map_sync_memtype</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#base\">base</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#id_sz\">id_sz</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a> >= <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#high_memory\">high_memory</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id_sz\">id_sz</a> = (<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#high_memory\">high_memory</a>) &lt; <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#size\">size</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#high_memory\">high_memory</a>) - <a class=\"id\" href=\"#base\">base</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ioremap_change_attr\">ioremap_change_attr</a>((unsigned long)<a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#base\">base</a>), <a class=\"id\" href=\"#id_sz\">id_sz</a>, <a class=\"id\" href=\"#flags\">flags</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%s:%d ioremap_change_attr failed %s \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"for %Lx-%Lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cattr_name\">cattr_name</a>(<a class=\"id\" href=\"#flags\">flags</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>, (unsigned long long)(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#size\">size</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Internal interface to reserve a range of physical memory with prot.</span>", 
"<span class=\"comment\"> * Reserved non RAM regions only and after successful reserve_memtype,</span>", 
"<span class=\"comment\"> * this func also keeps identity mapping (if any) in sync with this new prot.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#reserve_pfn_range\">reserve_pfn_range</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#paddr\">paddr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> *<a class=\"id\" href=\"#vma_prot\">vma_prot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#strict_prot\">strict_prot</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_ram\">is_ram</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#want_flags\">want_flags</a> = (<a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(*<a class=\"id\" href=\"#vma_prot\">vma_prot</a>) &amp; <a class=\"id\" href=\"#_PAGE_CACHE_MASK\">_PAGE_CACHE_MASK</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#want_flags\">want_flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#is_ram\">is_ram</a> = <a class=\"id\" href=\"#pat_pagerange_is_ram\">pat_pagerange_is_ram</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#paddr\">paddr</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reserve_pfn_range() for RAM pages. We do not refcount to keep</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * track of number of mappings of RAM pages. We can assert that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the type requested matches the type of first page in the range.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_ram\">is_ram</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pat_enabled\">pat_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#lookup_memtype\">lookup_memtype</a>(<a class=\"id\" href=\"#paddr\">paddr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#want_flags\">want_flags</a> != <a class=\"id\" href=\"#flags\">flags</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%s:%d map pfn RAM range req %s for %Lx-%Lx, got %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cattr_name\">cattr_name</a>(<a class=\"id\" href=\"#want_flags\">want_flags</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#paddr\">paddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)(<a class=\"id\" href=\"#paddr\">paddr</a> + <a class=\"id\" href=\"#size\">size</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cattr_name\">cattr_name</a>(<a class=\"id\" href=\"#flags\">flags</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#vma_prot\">vma_prot</a> = <a class=\"id\" href=\"#__pgprot\">__pgprot</a>((<a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(*<a class=\"id\" href=\"#vma_prot\">vma_prot</a>) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      (~<a class=\"id\" href=\"#_PAGE_CACHE_MASK\">_PAGE_CACHE_MASK</a>)) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#reserve_memtype\">reserve_memtype</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#paddr\">paddr</a> + <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#want_flags\">want_flags</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> != <a class=\"id\" href=\"#want_flags\">want_flags</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strict_prot\">strict_prot</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#is_new_memtype_allowed\">is_new_memtype_allowed</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#want_flags\">want_flags</a>, <a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_memtype\">free_memtype</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#paddr\">paddr</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s:%d map pfn expected mapping type %s\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" for %Lx-%Lx, got %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cattr_name\">cattr_name</a>(<a class=\"id\" href=\"#want_flags\">want_flags</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#paddr\">paddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)(<a class=\"id\" href=\"#paddr\">paddr</a> + <a class=\"id\" href=\"#size\">size</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cattr_name\">cattr_name</a>(<a class=\"id\" href=\"#flags\">flags</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We allow returning different type than the one requested in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * non strict case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#vma_prot\">vma_prot</a> = <a class=\"id\" href=\"#__pgprot\">__pgprot</a>((<a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(*<a class=\"id\" href=\"#vma_prot\">vma_prot</a>) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      (~<a class=\"id\" href=\"#_PAGE_CACHE_MASK\">_PAGE_CACHE_MASK</a>)) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kernel_map_sync_memtype\">kernel_map_sync_memtype</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_memtype\">free_memtype</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#paddr\">paddr</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Internal interface to free a range of physical memory.</span>", 
"<span class=\"comment\"> * Frees non RAM regions only.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#free_pfn_range\">free_pfn_range</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#paddr\">paddr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_ram\">is_ram</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#is_ram\">is_ram</a> = <a class=\"id\" href=\"#pat_pagerange_is_ram\">pat_pagerange_is_ram</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#paddr\">paddr</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_ram\">is_ram</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_memtype\">free_memtype</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#paddr\">paddr</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * track_pfn_vma_copy is called when vma that is covering the pfnmap gets</span>", 
"<span class=\"comment\"> * copied through copy_page_range().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the vma has a linear pfn mapping for the entire range, we get the prot</span>", 
"<span class=\"comment\"> * from pte and reserve the entire vma range with single reserve_pfn_range call.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#track_pfn_vma_copy\">track_pfn_vma_copy</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#paddr\">paddr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#prot\">prot</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vma_size\">vma_size</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#pgprot\">pgprot</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_linear_pfn_mapping\">is_linear_pfn_mapping</a>(<a class=\"id\" href=\"#vma\">vma</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reserve the whole chunk covered by vma. We need the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * starting address and protection from pte.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#follow_phys\">follow_phys</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>, 0, &amp;<a class=\"id\" href=\"#prot\">prot</a>, &amp;<a class=\"id\" href=\"#paddr\">paddr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgprot\">pgprot</a> = <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#prot\">prot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#reserve_pfn_range\">reserve_pfn_range</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#vma_size\">vma_size</a>, &amp;<a class=\"id\" href=\"#pgprot\">pgprot</a>, 1);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * track_pfn_vma_new is called when a _new_ pfn mapping is being established</span>", 
"<span class=\"comment\"> * for physical range indicated by pfn and size.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * prot is passed in as a parameter for the new mapping. If the vma has a</span>", 
"<span class=\"comment\"> * linear pfn mapping for the entire range reserve the entire vma range with</span>", 
"<span class=\"comment\"> * single reserve_pfn_range call.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#track_pfn_vma_new\">track_pfn_vma_new</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> *<a class=\"id\" href=\"#prot\">prot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#paddr\">paddr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vma_size\">vma_size</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_linear_pfn_mapping\">is_linear_pfn_mapping</a>(<a class=\"id\" href=\"#vma\">vma</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* reserve the whole chunk starting from vm_pgoff */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#paddr\">paddr</a> = (<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a>)<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#reserve_pfn_range\">reserve_pfn_range</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#vma_size\">vma_size</a>, <a class=\"id\" href=\"#prot\">prot</a>, 0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pat_enabled\">pat_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* for vm_insert_pfn and friends, we set prot based on lookup */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#lookup_memtype\">lookup_memtype</a>(<a class=\"id\" href=\"#pfn\">pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#prot\">prot</a> = <a class=\"id\" href=\"#__pgprot\">__pgprot</a>((<a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>) &amp; (~<a class=\"id\" href=\"#_PAGE_CACHE_MASK\">_PAGE_CACHE_MASK</a>)) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * untrack_pfn_vma is called while unmapping a pfnmap for a region.</span>", 
"<span class=\"comment\"> * untrack can be called for a specific region indicated by pfn and size or</span>", 
"<span class=\"comment\"> * can be for the entire vma (in which case size can be zero).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#untrack_pfn_vma\">untrack_pfn_vma</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#paddr\">paddr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vma_size\">vma_size</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_linear_pfn_mapping\">is_linear_pfn_mapping</a>(<a class=\"id\" href=\"#vma\">vma</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* free the whole chunk starting from vm_pgoff */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#paddr\">paddr</a> = (<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a>)<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pfn_range\">free_pfn_range</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#vma_size\">vma_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#pgprot_writecombine\">pgprot_writecombine</a>(<a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pat_enabled\">pat_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#prot\">prot</a>) | <a class=\"id\" href=\"#_PAGE_CACHE_WC\">_PAGE_CACHE_WC</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pgprot_noncached\">pgprot_noncached</a>(<a class=\"id\" href=\"#prot\">prot</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pgprot_writecombine\">pgprot_writecombine</a>);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_DEBUG_FS\">CONFIG_DEBUG_FS</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_PAT\">CONFIG_X86_PAT</a>)", 
"", 
"static struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#memtype_get_idx\">memtype_get_idx</a>(<a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#print_entry\">print_entry</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_entry\">print_entry</a>  = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#memtype\">memtype</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#print_entry\">print_entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#memtype_lock\">memtype_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rbt_memtype_copy_nth_element\">rbt_memtype_copy_nth_element</a>(<a class=\"id\" href=\"#print_entry\">print_entry</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#memtype_lock\">memtype_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#print_entry\">print_entry</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#print_entry\">print_entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#memtype_seq_start\">memtype_seq_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#pos\">pos</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>++*<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"PAT memtype list:\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#memtype_get_idx\">memtype_get_idx</a>(*<a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#memtype_seq_next\">memtype_seq_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>++*<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#memtype_get_idx\">memtype_get_idx</a>(*<a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#memtype_seq_stop\">memtype_seq_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"}", 
"", 
"static int <a class=\"id\" href=\"#memtype_seq_show\">memtype_seq_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#print_entry\">print_entry</a> = (struct <a class=\"id\" href=\"#memtype\">memtype</a> *)<a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"%s @ 0x%Lx-0x%Lx\\n\", <a class=\"id\" href=\"#cattr_name\">cattr_name</a>(<a class=\"id\" href=\"#print_entry\">print_entry</a>-><a class=\"id\" href=\"#type\">type</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_entry\">print_entry</a>-><a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#print_entry\">print_entry</a>-><a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#print_entry\">print_entry</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#memtype_seq_ops\">memtype_seq_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#memtype_seq_start\">memtype_seq_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a>  = <a class=\"id\" href=\"#memtype_seq_next\">memtype_seq_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a>  = <a class=\"id\" href=\"#memtype_seq_stop\">memtype_seq_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a>  = <a class=\"id\" href=\"#memtype_seq_show\">memtype_seq_show</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#memtype_seq_open\">memtype_seq_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#memtype_seq_ops\">memtype_seq_ops</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#memtype_fops\">memtype_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a>    = <a class=\"id\" href=\"#memtype_seq_open\">memtype_seq_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a>    = <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a>  = <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#seq_release\">seq_release</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pat_memtype_list_init\">pat_memtype_list_init</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pat_enabled\">pat_enabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(\"pat_memtype_list\", <a class=\"id\" href=\"#S_IRUSR\">S_IRUSR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#arch_debugfs_dir\">arch_debugfs_dir</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#memtype_fops\">memtype_fops</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#pat_memtype_list_init\">pat_memtype_list_init</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_DEBUG_FS &amp;&amp; CONFIG_X86_PAT */</span>", 
];
xr_frag_insert('l/37/dabb393ce609c19dbf182ac619fbf83e0a6519.xr', __xr_tmp);
