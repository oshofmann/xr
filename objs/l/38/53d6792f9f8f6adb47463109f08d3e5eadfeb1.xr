var __xr_tmp = [
"<span class=\"comment\"> * __d_lookup is like d_lookup, however it may (rarely) return a</span>", 
"<span class=\"comment\"> * false-negative result due to unrelated rename activity.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * __d_lookup is slightly faster by avoiding rename_lock read seqlock,</span>", 
"<span class=\"comment\"> * however it must be used carefully, eg. with a following d_lookup in</span>", 
"<span class=\"comment\"> * the case of failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * __d_lookup callers must be commented.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#__d_lookup\">__d_lookup</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#qstr\">qstr</a> * <a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#name\">name</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#name\">name</a>-><a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/>const unsigned char *<a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#name\">name</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#d_hash\">d_hash</a>(<a class=\"id\" href=\"#parent\">parent</a>,<a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#found\">found</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The hash list is protected using RCU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Take d_lock when comparing a candidate dentry, to avoid races</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with d_move().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is possible that concurrent renames can mess up our list</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * walk here and result in missing our dentry, resulting in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * false-negative result. d_lookup() protects against concurrent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * renames using rename_lock seqlock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * See Documentation/vfs/dcache-locking.txt for more details.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#d_hash\">d_hash</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#qstr\">qstr</a> *<a class=\"id\" href=\"#qstr\">qstr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#hash\">hash</a> != <a class=\"id\" href=\"#hash\">hash</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a> != <a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Recheck the dentry after taking the lock - d_move may have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * changed things. Don't bother checking the hash because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we're about to compare the whole name anyway.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a> != <a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* non-existing due to RCU? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#d_unhashed\">d_unhashed</a>(<a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It is safe to compare names since d_move() cannot</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * change the qstr (protected by d_lock).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qstr\">qstr</a> = &amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_op\">d_op</a> && <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_op\">d_op</a>-><a class=\"id\" href=\"#d_compare\">d_compare</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_op\">d_op</a>-><a class=\"id\" href=\"#d_compare\">d_compare</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#qstr\">qstr</a>, <a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next\">next</a>;", 
];
xr_frag_insert('l/38/53d6792f9f8f6adb47463109f08d3e5eadfeb1.xr', __xr_tmp);
