var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Performance events x86 architecture code</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2008 Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>", 
"<span class=\"comment\"> *  Copyright (C) 2008-2009 Red Hat, Inc., Ingo Molnar</span>", 
"<span class=\"comment\"> *  Copyright (C) 2009 Jaswinder Singh Rajput</span>", 
"<span class=\"comment\"> *  Copyright (C) 2009 Advanced Micro Devices, Inc., Robert Richter</span>", 
"<span class=\"comment\"> *  Copyright (C) 2008-2009 Red Hat, Inc., Peter Zijlstra &lt;pzijlstr@redhat.com&gt;</span>", 
"<span class=\"comment\"> *  Copyright (C) 2009 Intel Corporation, &lt;markus.t.metzger@intel.com&gt;</span>", 
"<span class=\"comment\"> *  Copyright (C) 2009 Google, Inc., Stephane Eranian</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  For licencing details see kernel-base/COPYING</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#perf_event\">perf_event</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kprobes\">kprobes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdebug\">kdebug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apic\">apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#stacktrace\">stacktrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#nmi\">nmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#compat\">compat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#if 0", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#msr\">msr</a>, <a class=\"id\" href=\"#val\">val</a>) <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_printk\">trace_printk</a>(\"wrmsrl(%lx, %lx)\\n\", (unsigned long)(<a class=\"id\" href=\"#msr\">msr</a>),\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)(<a class=\"id\" href=\"#val\">val</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_write_msr\">native_write_msr</a>((<a class=\"id\" href=\"#msr\">msr</a>), (<a class=\"id\" href=\"#u32\">u32</a>)((<a class=\"id\" href=\"#u64\">u64</a>)(<a class=\"id\" href=\"#val\">val</a>)), <span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#u32\">u32</a>)((<a class=\"id\" href=\"#u64\">u64</a>)(<a class=\"id\" href=\"#val\">val</a>) >> 32));<span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * best effort, GUP based copy_from_user() that assumes IRQ or NMI context</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long", 
"<a class=\"id\" href=\"#copy_from_user_nmi\">copy_from_user_nmi</a>(void *<a class=\"id\" href=\"#to\">to</a>, const void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#from\">from</a>, unsigned long <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#in_nmi\">in_nmi</a>() ? <a class=\"id\" href=\"#KM_NMI\">KM_NMI</a> : <a class=\"id\" href=\"#KM_IRQ0\">KM_IRQ0</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#len\">len</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__get_user_pages_fast\">__get_user_pages_fast</a>(<a class=\"id\" href=\"#addr\">addr</a>, 1, 0, &amp;<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#addr\">addr</a> &amp; (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#n\">n</a> - <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#map\">map</a>+<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>  += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>   += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#event_constraint\">event_constraint</a> {", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#idxmsk\">idxmsk</a>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#X86_PMC_IDX_MAX\">X86_PMC_IDX_MAX</a>)];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idxmsk64\">idxmsk64</a>;", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><a class=\"id\" href=\"#code\">code</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><a class=\"id\" href=\"#cmask\">cmask</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#weight\">weight</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#amd_nb\">amd_nb</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nb_id\">nb_id</a>;  <span class=\"comment\">/* NorthBridge id */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#refcnt\">refcnt</a>; <span class=\"comment\">/* reference count */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#X86_PMC_IDX_MAX\">X86_PMC_IDX_MAX</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#event_constraint\">event_constraint</a> <a class=\"id\" href=\"#event_constraints\">event_constraints</a>[<a class=\"id\" href=\"#X86_PMC_IDX_MAX\">X86_PMC_IDX_MAX</a>];", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_LBR_ENTRIES\">MAX_LBR_ENTRIES</a><span class=\"ts\"/><span class=\"ts\"/>16", 
"", 
"struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Generic x86 PMC bits</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a><span class=\"ts\"/>*<a class=\"id\" href=\"#events\">events</a>[<a class=\"id\" href=\"#X86_PMC_IDX_MAX\">X86_PMC_IDX_MAX</a>]; <span class=\"comment\">/* in counter order */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#active_mask\">active_mask</a>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#X86_PMC_IDX_MAX\">X86_PMC_IDX_MAX</a>)];", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#running\">running</a>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#X86_PMC_IDX_MAX\">X86_PMC_IDX_MAX</a>)];", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enabled\">enabled</a>;", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n_events\">n_events</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n_added\">n_added</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n_txn\">n_txn</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#assign\">assign</a>[<a class=\"id\" href=\"#X86_PMC_IDX_MAX\">X86_PMC_IDX_MAX</a>]; <span class=\"comment\">/* event to counter assignment */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tags\">tags</a>[<a class=\"id\" href=\"#X86_PMC_IDX_MAX\">X86_PMC_IDX_MAX</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a><span class=\"ts\"/>*<a class=\"id\" href=\"#event_list\">event_list</a>[<a class=\"id\" href=\"#X86_PMC_IDX_MAX\">X86_PMC_IDX_MAX</a>]; <span class=\"comment\">/* in enabled order */</span>", 
"", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_flag\">group_flag</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Intel DebugStore bits</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#debug_store\">debug_store</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ds\">ds</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pebs_enabled\">pebs_enabled</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Intel LBR bits</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lbr_users\">lbr_users</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#lbr_context\">lbr_context</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_branch_stack\">perf_branch_stack</a><span class=\"ts\"/><a class=\"id\" href=\"#lbr_stack\">lbr_stack</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_branch_entry\">perf_branch_entry</a><span class=\"ts\"/><a class=\"id\" href=\"#lbr_entries\">lbr_entries</a>[<a class=\"id\" href=\"#MAX_LBR_ENTRIES\">MAX_LBR_ENTRIES</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * AMD specific bits</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#amd_nb\">amd_nb</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#amd_nb\">amd_nb</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__EVENT_CONSTRAINT\">__EVENT_CONSTRAINT</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#w\">w</a>) {\\", 
"<span class=\"ts\"/>{ .<a class=\"id\" href=\"#idxmsk64\">idxmsk64</a> = (<a class=\"id\" href=\"#n\">n</a>) },<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#code\">code</a> = (<a class=\"id\" href=\"#c\">c</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cmask\">cmask</a> = (<a class=\"id\" href=\"#m\">m</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#weight\">weight</a> = (<a class=\"id\" href=\"#w\">w</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EVENT_CONSTRAINT\">EVENT_CONSTRAINT</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#m\">m</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__EVENT_CONSTRAINT\">__EVENT_CONSTRAINT</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#HWEIGHT\">HWEIGHT</a>(<a class=\"id\" href=\"#n\">n</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Constraint on the Event code.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INTEL_EVENT_CONSTRAINT\">INTEL_EVENT_CONSTRAINT</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EVENT_CONSTRAINT\">EVENT_CONSTRAINT</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#ARCH_PERFMON_EVENTSEL_EVENT\">ARCH_PERFMON_EVENTSEL_EVENT</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Constraint on the Event code + UMask + fixed-mask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * filter mask to validate fixed counter events.</span>", 
"<span class=\"comment\"> * the following filters disqualify for fixed counters:</span>", 
"<span class=\"comment\"> *  - inv</span>", 
"<span class=\"comment\"> *  - edge</span>", 
"<span class=\"comment\"> *  - cnt-mask</span>", 
"<span class=\"comment\"> *  The other filters are supported by fixed counters.</span>", 
"<span class=\"comment\"> *  The any-thread option is supported starting with v3.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIXED_EVENT_CONSTRAINT\">FIXED_EVENT_CONSTRAINT</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EVENT_CONSTRAINT\">EVENT_CONSTRAINT</a>(<a class=\"id\" href=\"#c\">c</a>, (1ULL << (32+<a class=\"id\" href=\"#n\">n</a>)), <a class=\"id\" href=\"#X86_RAW_EVENT_MASK\">X86_RAW_EVENT_MASK</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Constraint on the Event code + UMask</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PEBS_EVENT_CONSTRAINT\">PEBS_EVENT_CONSTRAINT</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EVENT_CONSTRAINT\">EVENT_CONSTRAINT</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#INTEL_ARCH_EVENT_MASK\">INTEL_ARCH_EVENT_MASK</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EVENT_CONSTRAINT_END\">EVENT_CONSTRAINT_END</a><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EVENT_CONSTRAINT\">EVENT_CONSTRAINT</a>(0, 0, 0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_event_constraint\">for_each_event_constraint</a>(<a class=\"id\" href=\"#e\">e</a>, <a class=\"id\" href=\"#c\">c</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#e\">e</a>) = (<a class=\"id\" href=\"#c\">c</a>); (<a class=\"id\" href=\"#e\">e</a>)-><a class=\"id\" href=\"#weight\">weight</a>; (<a class=\"id\" href=\"#e\">e</a>)++)", 
"", 
"union <a class=\"id\" href=\"#perf_capabilities\">perf_capabilities</a> {", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><a class=\"id\" href=\"#lbr_format\">lbr_format</a>    : 6;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><a class=\"id\" href=\"#pebs_trap\">pebs_trap</a>     : 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><a class=\"id\" href=\"#pebs_arch_reg\">pebs_arch_reg</a> : 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><a class=\"id\" href=\"#pebs_format\">pebs_format</a>   : 4;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><a class=\"id\" href=\"#smm_freeze\">smm_freeze</a>    : 1;", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><a class=\"id\" href=\"#capabilities\">capabilities</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * struct x86_pmu - generic x86 pmu</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Generic x86 PMC bits</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>const char<span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#version\">version</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#handle_irq\">handle_irq</a>)(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#disable_all\">disable_all</a>)(void);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#enable_all\">enable_all</a>)(int <a class=\"id\" href=\"#added\">added</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#enable\">enable</a>)(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#disable\">disable</a>)(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#hw_config\">hw_config</a>)(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#schedule_events\">schedule_events</a>)(struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a>, int <a class=\"id\" href=\"#n\">n</a>, int *<a class=\"id\" href=\"#assign\">assign</a>);", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#eventsel\">eventsel</a>;", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#perfctr\">perfctr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#event_map\">event_map</a>)(int);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_events\">max_events</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_counters\">num_counters</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_counters_fixed\">num_counters_fixed</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cntval_bits\">cntval_bits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cntval_mask\">cntval_mask</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_period\">max_period</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#event_constraint\">event_constraint</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#get_event_constraints\">get_event_constraints</a>)(struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#put_event_constraints\">put_event_constraints</a>)(struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#event_constraint\">event_constraint</a> *<a class=\"id\" href=\"#event_constraints\">event_constraints</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#quirks\">quirks</a>)(void);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perfctr_second_write\">perfctr_second_write</a>;", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#cpu_prepare\">cpu_prepare</a>)(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#cpu_starting\">cpu_starting</a>)(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#cpu_dying\">cpu_dying</a>)(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#cpu_dead\">cpu_dead</a>)(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Intel Arch Perfmon v2+</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#intel_ctrl\">intel_ctrl</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#perf_capabilities\">perf_capabilities</a> <a class=\"id\" href=\"#intel_cap\">intel_cap</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Intel DebugStore bits</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bts\">bts</a>, <a class=\"id\" href=\"#pebs\">pebs</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pebs_record_size\">pebs_record_size</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#drain_pebs\">drain_pebs</a>)(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#event_constraint\">event_constraint</a> *<a class=\"id\" href=\"#pebs_constraints\">pebs_constraints</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Intel LBR</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#lbr_tos\">lbr_tos</a>, <a class=\"id\" href=\"#lbr_from\">lbr_from</a>, <a class=\"id\" href=\"#lbr_to\">lbr_to</a>; <span class=\"comment\">/* MSR base regs       */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lbr_nr\">lbr_nr</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <span class=\"comment\">/* hardware stack size */</span>", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a> <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>, <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>) = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#enabled\">enabled</a> = 1,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#x86_perf_event_set_period\">x86_perf_event_set_period</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generalized hw caching related hw_event table, filled</span>", 
"<span class=\"comment\"> * in on a per model basis. A value of 0 means</span>", 
"<span class=\"comment\"> * 'not supported', -1 means 'hw_event makes no sense on</span>", 
"<span class=\"comment\"> * this CPU', any other value means the raw hw_event</span>", 
"<span class=\"comment\"> * ID.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_\">PERF_COUNT_HW_CACHE_</a>##<a class=\"id\" href=\"#x\">x</a>", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> <a class=\"id\" href=\"#hw_cache_event_ids\">hw_cache_event_ids</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_MAX\">PERF_COUNT_HW_CACHE_MAX</a>]", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_OP_MAX\">PERF_COUNT_HW_CACHE_OP_MAX</a>]", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_RESULT_MAX\">PERF_COUNT_HW_CACHE_RESULT_MAX</a>];", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Propagate event elapsed time into the generic event.</span>", 
"<span class=\"comment\"> * Can only be executed on the CPU where the event is active.</span>", 
"<span class=\"comment\"> * Returns the delta events processed.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u64\">u64</a>", 
"<a class=\"id\" href=\"#x86_perf_event_update\">x86_perf_event_update</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#shift\">shift</a> = 64 - <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#cntval_bits\">cntval_bits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#prev_raw_count\">prev_raw_count</a>, <a class=\"id\" href=\"#new_raw_count\">new_raw_count</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> == <a class=\"id\" href=\"#X86_PMC_IDX_FIXED_BTS\">X86_PMC_IDX_FIXED_BTS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Careful: an NMI might modify the previous event value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Our tactic to handle this is to first atomically read and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * exchange a new raw count - then add that new-prev delta</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * count to the generic event atomically:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev_raw_count\">prev_raw_count</a> = <a class=\"id\" href=\"#local64_read\">local64_read</a>(&amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#prev_count\">prev_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#event_base\">event_base</a> + <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#new_raw_count\">new_raw_count</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#local64_cmpxchg\">local64_cmpxchg</a>(&amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#prev_count\">prev_count</a>, <a class=\"id\" href=\"#prev_raw_count\">prev_raw_count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_raw_count\">new_raw_count</a>) != <a class=\"id\" href=\"#prev_raw_count\">prev_raw_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now we have the new raw value and have updated the prev</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * timestamp already. We can now calculate the elapsed delta</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (event-)time and add that to the generic event.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Careful, not all hw sign-extends above the physical width</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the count.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = (<a class=\"id\" href=\"#new_raw_count\">new_raw_count</a> << <a class=\"id\" href=\"#shift\">shift</a>) - (<a class=\"id\" href=\"#prev_raw_count\">prev_raw_count</a> << <a class=\"id\" href=\"#shift\">shift</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> >>= <a class=\"id\" href=\"#shift\">shift</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local64_add\">local64_add</a>(<a class=\"id\" href=\"#delta\">delta</a>, &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local64_sub\">local64_sub</a>(<a class=\"id\" href=\"#delta\">delta</a>, &amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#period_left\">period_left</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new_raw_count\">new_raw_count</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#active_events\">active_events</a>;", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#pmc_reserve_mutex\">pmc_reserve_mutex</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#reserve_pmc_hardware\">reserve_pmc_hardware</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a> == <a class=\"id\" href=\"#NMI_LOCAL_APIC\">NMI_LOCAL_APIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_lapic_nmi_watchdog\">disable_lapic_nmi_watchdog</a>();", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#reserve_perfctr_nmi\">reserve_perfctr_nmi</a>(<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#perfctr\">perfctr</a> + <a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#perfctr_fail\">perfctr_fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#reserve_evntsel_nmi\">reserve_evntsel_nmi</a>(<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#eventsel\">eventsel</a> + <a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#eventsel_fail\">eventsel_fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<a class=\"id\" href=\"#eventsel_fail\">eventsel_fail</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>--; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_evntsel_nmi\">release_evntsel_nmi</a>(<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#eventsel\">eventsel</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>;", 
"", 
"<a class=\"id\" href=\"#perfctr_fail\">perfctr_fail</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>--; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_perfctr_nmi\">release_perfctr_nmi</a>(<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#perfctr\">perfctr</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a> == <a class=\"id\" href=\"#NMI_LOCAL_APIC\">NMI_LOCAL_APIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_lapic_nmi_watchdog\">enable_lapic_nmi_watchdog</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#release_pmc_hardware\">release_pmc_hardware</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_perfctr_nmi\">release_perfctr_nmi</a>(<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#perfctr\">perfctr</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_evntsel_nmi\">release_evntsel_nmi</a>(<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#eventsel\">eventsel</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a> == <a class=\"id\" href=\"#NMI_LOCAL_APIC\">NMI_LOCAL_APIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_lapic_nmi_watchdog\">enable_lapic_nmi_watchdog</a>();", 
"}", 
"", 
"#else", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#reserve_pmc_hardware\">reserve_pmc_hardware</a>(void) { return <a class=\"id\" href=\"#true\">true</a>; }", 
"static void <a class=\"id\" href=\"#release_pmc_hardware\">release_pmc_hardware</a>(void) {}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#reserve_ds_buffers\">reserve_ds_buffers</a>(void);", 
"static void <a class=\"id\" href=\"#release_ds_buffers\">release_ds_buffers</a>(void);", 
"", 
"static void <a class=\"id\" href=\"#hw_perf_event_destroy\">hw_perf_event_destroy</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_mutex_lock\">atomic_dec_and_mutex_lock</a>(&amp;<a class=\"id\" href=\"#active_events\">active_events</a>, &amp;<a class=\"id\" href=\"#pmc_reserve_mutex\">pmc_reserve_mutex</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_pmc_hardware\">release_pmc_hardware</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_ds_buffers\">release_ds_buffers</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pmc_reserve_mutex\">pmc_reserve_mutex</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#x86_pmu_initialized\">x86_pmu_initialized</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#handle_irq\">handle_irq</a> != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#set_ext_hw_attr\">set_ext_hw_attr</a>(struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a>, struct <a class=\"id\" href=\"#perf_event_attr\">perf_event_attr</a> *<a class=\"id\" href=\"#attr\">attr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cache_type\">cache_type</a>, <a class=\"id\" href=\"#cache_op\">cache_op</a>, <a class=\"id\" href=\"#cache_result\">cache_result</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#config\">config</a>, <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#config\">config</a> = <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#config\">config</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache_type\">cache_type</a> = (<a class=\"id\" href=\"#config\">config</a> >>  0) &amp; 0xff;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cache_type\">cache_type</a> >= <a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_MAX\">PERF_COUNT_HW_CACHE_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache_op\">cache_op</a> = (<a class=\"id\" href=\"#config\">config</a> >>  8) &amp; 0xff;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cache_op\">cache_op</a> >= <a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_OP_MAX\">PERF_COUNT_HW_CACHE_OP_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache_result\">cache_result</a> = (<a class=\"id\" href=\"#config\">config</a> >> 16) &amp; 0xff;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cache_result\">cache_result</a> >= <a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_RESULT_MAX\">PERF_COUNT_HW_CACHE_RESULT_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#hw_cache_event_ids\">hw_cache_event_ids</a>[<a class=\"id\" href=\"#cache_type\">cache_type</a>][<a class=\"id\" href=\"#cache_op\">cache_op</a>][<a class=\"id\" href=\"#cache_result\">cache_result</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#config\">config</a> |= <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#x86_setup_perfctr\">x86_setup_perfctr</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_attr\">perf_event_attr</a> *<a class=\"id\" href=\"#attr\">attr</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#config\">config</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a> = <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#max_period\">max_period</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#last_period\">last_period</a> = <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local64_set\">local64_set</a>(&amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#period_left\">period_left</a>, <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we have a PMU initialized but no APIC</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * interrupts, we cannot sample hardware</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * events (user-space has to fall back and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * sample via a hrtimer based software event):</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#apic\">apic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PERF_TYPE_RAW\">PERF_TYPE_RAW</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PERF_TYPE_HW_CACHE\">PERF_TYPE_HW_CACHE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#set_ext_hw_attr\">set_ext_hw_attr</a>(<a class=\"id\" href=\"#hwc\">hwc</a>, <a class=\"id\" href=\"#attr\">attr</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#config\">config</a> >= <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#max_events\">max_events</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The generic map:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#config\">config</a> = <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#event_map\">event_map</a>(<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#config\">config</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#config\">config</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#config\">config</a> == -1LL)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Branch tracing:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#config\">config</a> == <a class=\"id\" href=\"#PERF_COUNT_HW_BRANCH_INSTRUCTIONS\">PERF_COUNT_HW_BRANCH_INSTRUCTIONS</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a> == 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* BTS is not supported by this architecture. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#bts\">bts</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* BTS is currently only allowed for user-mode. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#exclude_kernel\">exclude_kernel</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#config\">config</a> |= <a class=\"id\" href=\"#config\">config</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#x86_pmu_hw_config\">x86_pmu_hw_config</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#precise_ip\">precise_ip</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#precise\">precise</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Support for constant skid */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#pebs\">pebs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#precise\">precise</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Support for IP fixup */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#lbr_nr\">lbr_nr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#precise\">precise</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#precise_ip\">precise_ip</a> &gt; <a class=\"id\" href=\"#precise\">precise</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Generate PMC IRQs:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (keep 'enabled' bit clear for now)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#config\">config</a> = <a class=\"id\" href=\"#ARCH_PERFMON_EVENTSEL_INT\">ARCH_PERFMON_EVENTSEL_INT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Count user and OS events unless requested not to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#exclude_user\">exclude_user</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#config\">config</a> |= <a class=\"id\" href=\"#ARCH_PERFMON_EVENTSEL_USR\">ARCH_PERFMON_EVENTSEL_USR</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#exclude_kernel\">exclude_kernel</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#config\">config</a> |= <a class=\"id\" href=\"#ARCH_PERFMON_EVENTSEL_OS\">ARCH_PERFMON_EVENTSEL_OS</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PERF_TYPE_RAW\">PERF_TYPE_RAW</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#config\">config</a> |= <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#config\">config</a> &amp; <a class=\"id\" href=\"#X86_RAW_EVENT_MASK\">X86_RAW_EVENT_MASK</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#x86_setup_perfctr\">x86_setup_perfctr</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Setup the hardware configuration for a given attr_type</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__hw_perf_event_init\">__hw_perf_event_init</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#x86_pmu_initialized\">x86_pmu_initialized</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_inc_not_zero\">atomic_inc_not_zero</a>(&amp;<a class=\"id\" href=\"#active_events\">active_events</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pmc_reserve_mutex\">pmc_reserve_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#active_events\">active_events</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#reserve_pmc_hardware\">reserve_pmc_hardware</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#reserve_ds_buffers\">reserve_ds_buffers</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_pmc_hardware\">release_pmc_hardware</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#active_events\">active_events</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pmc_reserve_mutex\">pmc_reserve_mutex</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#destroy\">destroy</a> = <a class=\"id\" href=\"#hw_perf_event_destroy\">hw_perf_event_destroy</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#idx\">idx</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#last_cpu\">last_cpu</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#last_tag\">last_tag</a> = ~0ULL;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#hw_config\">hw_config</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#x86_pmu_disable_all\">x86_pmu_disable_all</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#idx\">idx</a> = 0; <a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>; <a class=\"id\" href=\"#idx\">idx</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#active_mask\">active_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#eventsel\">eventsel</a> + <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#ARCH_PERFMON_EVENTSEL_ENABLE\">ARCH_PERFMON_EVENTSEL_ENABLE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> &= ~<a class=\"id\" href=\"#ARCH_PERFMON_EVENTSEL_ENABLE\">ARCH_PERFMON_EVENTSEL_ENABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#eventsel\">eventsel</a> + <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#hw_perf_disable\">hw_perf_disable</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#x86_pmu_initialized\">x86_pmu_initialized</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#enabled\">enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_added\">n_added</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#enabled\">enabled</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#disable_all\">disable_all</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#x86_pmu_enable_all\">x86_pmu_enable_all</a>(int <a class=\"id\" href=\"#added\">added</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#idx\">idx</a> = 0; <a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>; <a class=\"id\" href=\"#idx\">idx</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#events\">events</a>[<a class=\"id\" href=\"#idx\">idx</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#active_mask\">active_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#config\">config</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> |= <a class=\"id\" href=\"#ARCH_PERFMON_EVENTSEL_ENABLE\">ARCH_PERFMON_EVENTSEL_ENABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#eventsel\">eventsel</a> + <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#pmu\">pmu</a> <a class=\"id\" href=\"#pmu\">pmu</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_x86_event\">is_x86_event</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pmu\">pmu</a> == &amp;<a class=\"id\" href=\"#pmu\">pmu</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#x86_schedule_events\">x86_schedule_events</a>(struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a>, int <a class=\"id\" href=\"#n\">n</a>, int *<a class=\"id\" href=\"#assign\">assign</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#event_constraint\">event_constraint</a> *<a class=\"id\" href=\"#c\">c</a>, *<a class=\"id\" href=\"#constraints\">constraints</a>[<a class=\"id\" href=\"#X86_PMC_IDX_MAX\">X86_PMC_IDX_MAX</a>];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#used_mask\">used_mask</a>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#X86_PMC_IDX_MAX\">X86_PMC_IDX_MAX</a>)];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#w\">w</a>, <a class=\"id\" href=\"#wmax\">wmax</a>, <a class=\"id\" href=\"#num\">num</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_zero\">bitmap_zero</a>(<a class=\"id\" href=\"#used_mask\">used_mask</a>, <a class=\"id\" href=\"#X86_PMC_IDX_MAX\">X86_PMC_IDX_MAX</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#n\">n</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#get_event_constraints\">get_event_constraints</a>(<a class=\"id\" href=\"#cpuc\">cpuc</a>, <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#event_list\">event_list</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#constraints\">constraints</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fastpath, try to reuse previous register</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#n\">n</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#event_list\">event_list</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#hw\">hw</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#constraints\">constraints</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* never assigned */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#idx\">idx</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* constraint still honored */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#idxmsk\">idxmsk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* not already used */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#used_mask\">used_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#used_mask\">used_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#assign\">assign</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#assign\">assign</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * begin slow path</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_zero\">bitmap_zero</a>(<a class=\"id\" href=\"#used_mask\">used_mask</a>, <a class=\"id\" href=\"#X86_PMC_IDX_MAX\">X86_PMC_IDX_MAX</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * weight = number of possible counters</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1    = most constrained, only works on one counter</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wmax = least constrained, works on any counter</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * assign events to counters starting with most</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * constrained events.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wmax\">wmax</a> = <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when fixed event counters are present,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wmax is incremented by 1 to account</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for one more choice</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters_fixed\">num_counters_fixed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wmax\">wmax</a>++;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#w\">w</a> = 1, <a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#n\">n</a>; <a class=\"id\" href=\"#num\">num</a> && <a class=\"id\" href=\"#w\">w</a> <= <a class=\"id\" href=\"#wmax\">wmax</a>; <a class=\"id\" href=\"#w\">w</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for each event */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#num\">num</a> && <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#n\">n</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#constraints\">constraints</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#event_list\">event_list</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#hw\">hw</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#weight\">weight</a> != <a class=\"id\" href=\"#w\">w</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_set_bit\">for_each_set_bit</a>(<a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#idxmsk\">idxmsk</a>, <a class=\"id\" href=\"#X86_PMC_IDX_MAX\">X86_PMC_IDX_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#used_mask\">used_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#j\">j</a> == <a class=\"id\" href=\"#X86_PMC_IDX_MAX\">X86_PMC_IDX_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#used_mask\">used_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#assign\">assign</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#assign\">assign</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * scheduling failed or is just a simulation,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * free resources if necessary</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#assign\">assign</a> || <a class=\"id\" href=\"#num\">num</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#n\">n</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#put_event_constraints\">put_event_constraints</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#put_event_constraints\">put_event_constraints</a>(<a class=\"id\" href=\"#cpuc\">cpuc</a>, <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#event_list\">event_list</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#num\">num</a> ? -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a> : 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * dogrp: true if must collect siblings events (group)</span>", 
"<span class=\"comment\"> * returns total number of events and error code</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#collect_events\">collect_events</a>(struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a>, struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#leader\">leader</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#dogrp\">dogrp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#max_count\">max_count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_count\">max_count</a> = <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a> + <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters_fixed\">num_counters_fixed</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* current number of events already accepted */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_events\">n_events</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_x86_event\">is_x86_event</a>(<a class=\"id\" href=\"#leader\">leader</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> >= <a class=\"id\" href=\"#max_count\">max_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#event_list\">event_list</a>[<a class=\"id\" href=\"#n\">n</a>] = <a class=\"id\" href=\"#leader\">leader</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dogrp\">dogrp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#sibling_list\">sibling_list</a>, <a class=\"id\" href=\"#group_entry\">group_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_x86_event\">is_x86_event</a>(<a class=\"id\" href=\"#event\">event</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> <= <a class=\"id\" href=\"#PERF_EVENT_STATE_OFF\">PERF_EVENT_STATE_OFF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> >= <a class=\"id\" href=\"#max_count\">max_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#event_list\">event_list</a>[<a class=\"id\" href=\"#n\">n</a>] = <a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#x86_assign_hw_event\">x86_assign_hw_event</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a>, int <a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#assign\">assign</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#last_cpu\">last_cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#last_tag\">last_tag</a> = ++<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#tags\">tags</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#idx\">idx</a> == <a class=\"id\" href=\"#X86_PMC_IDX_FIXED_BTS\">X86_PMC_IDX_FIXED_BTS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#config_base\">config_base</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#event_base\">event_base</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#idx\">idx</a> >= <a class=\"id\" href=\"#X86_PMC_IDX_FIXED\">X86_PMC_IDX_FIXED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#config_base\">config_base</a> = <a class=\"id\" href=\"#MSR_ARCH_PERFMON_FIXED_CTR_CTRL\">MSR_ARCH_PERFMON_FIXED_CTR_CTRL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We set it so that event_base + idx in wrmsr/rdmsr maps to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * MSR_ARCH_PERFMON_FIXED_CTR0 ... CTR2:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#event_base\">event_base</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MSR_ARCH_PERFMON_FIXED_CTR0\">MSR_ARCH_PERFMON_FIXED_CTR0</a> - <a class=\"id\" href=\"#X86_PMC_IDX_FIXED\">X86_PMC_IDX_FIXED</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#config_base\">config_base</a> = <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#eventsel\">eventsel</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#event_base\">event_base</a>  = <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#perfctr\">perfctr</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#match_prev_assignment\">match_prev_assignment</a>(struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#idx\">idx</a> == <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#assign\">assign</a>[<a class=\"id\" href=\"#i\">i</a>] &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#last_cpu\">last_cpu</a> == <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>() &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#last_tag\">last_tag</a> == <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#tags\">tags</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"}", 
"", 
"static int <a class=\"id\" href=\"#x86_pmu_start\">x86_pmu_start</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"static void <a class=\"id\" href=\"#x86_pmu_stop\">x86_pmu_stop</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"void <a class=\"id\" href=\"#hw_perf_enable\">hw_perf_enable</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#added\">added</a> = <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_added\">n_added</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#x86_pmu_initialized\">x86_pmu_initialized</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#enabled\">enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_added\">n_added</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#n_running\">n_running</a> = <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_events\">n_events</a> - <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_added\">n_added</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * apply assignment obtained either from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * hw_perf_group_sched_in() or x86_pmu_enable()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * step1: save events moving to new counters</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * step2: reprogram moved events into new counters</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#n_running\">n_running</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#event_list\">event_list</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we can avoid reprogramming counter if:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * - assigned same counter as last time</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * - running on same CPU as last time</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * - no other event has used the counter since</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#idx\">idx</a> == -1 ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#match_prev_assignment\">match_prev_assignment</a>(<a class=\"id\" href=\"#hwc\">hwc</a>, <a class=\"id\" href=\"#cpuc\">cpuc</a>, <a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu_stop\">x86_pmu_stop</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_events\">n_events</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#event_list\">event_list</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#match_prev_assignment\">match_prev_assignment</a>(<a class=\"id\" href=\"#hwc\">hwc</a>, <a class=\"id\" href=\"#cpuc\">cpuc</a>, <a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x86_assign_hw_event\">x86_assign_hw_event</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpuc\">cpuc</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#n_running\">n_running</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu_start\">x86_pmu_start</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_added\">n_added</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_events_lapic_init\">perf_events_lapic_init</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#enabled\">enabled</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#enable_all\">enable_all</a>(<a class=\"id\" href=\"#added\">added</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__x86_pmu_enable_event\">__x86_pmu_enable_event</a>(struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#enable_mask\">enable_mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#config_base\">config_base</a> + <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#config\">config</a> | <a class=\"id\" href=\"#enable_mask\">enable_mask</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#x86_pmu_disable_event\">x86_pmu_disable_event</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#config_base\">config_base</a> + <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#config\">config</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(<a class=\"id\" href=\"#u64\">u64</a> [<a class=\"id\" href=\"#X86_PMC_IDX_MAX\">X86_PMC_IDX_MAX</a>], <a class=\"id\" href=\"#pmc_prev_left\">pmc_prev_left</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set the next IRQ period, based on the hwc-&gt;period_left value.</span>", 
"<span class=\"comment\"> * To be called with the event disabled in hw:</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#x86_perf_event_set_period\">x86_perf_event_set_period</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#local64_read\">local64_read</a>(&amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#period_left\">period_left</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> == <a class=\"id\" href=\"#X86_PMC_IDX_FIXED_BTS\">X86_PMC_IDX_FIXED_BTS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we are way outside a reasonable range then just skip forward:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#left\">left</a> <= -<a class=\"id\" href=\"#period\">period</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#period\">period</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local64_set\">local64_set</a>(&amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#period_left\">period_left</a>, <a class=\"id\" href=\"#left\">left</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#last_period\">last_period</a> = <a class=\"id\" href=\"#period\">period</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#left\">left</a> <= 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> += <a class=\"id\" href=\"#period\">period</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local64_set\">local64_set</a>(&amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#period_left\">period_left</a>, <a class=\"id\" href=\"#left\">left</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#last_period\">last_period</a> = <a class=\"id\" href=\"#period\">period</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Quirk: certain CPUs dont like it if just 1 hw_event is left:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#left\">left</a> &lt; 2))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> = 2;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#left\">left</a> &gt; <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#max_period\">max_period</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#max_period\">max_period</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#pmc_prev_left\">pmc_prev_left</a>[<a class=\"id\" href=\"#idx\">idx</a>], <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()) = <a class=\"id\" href=\"#left\">left</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The hw event starts counting from this event offset,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mark it to be able to extra future deltas:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local64_set\">local64_set</a>(&amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#prev_count\">prev_count</a>, (<a class=\"id\" href=\"#u64\">u64</a>)-<a class=\"id\" href=\"#left\">left</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#event_base\">event_base</a> + <a class=\"id\" href=\"#idx\">idx</a>, (<a class=\"id\" href=\"#u64\">u64</a>)(-<a class=\"id\" href=\"#left\">left</a>) &amp; <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#cntval_mask\">cntval_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Due to erratum on certan cpu we need</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a second write to be sure the register</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is updated properly</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#perfctr_second_write\">perfctr_second_write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#event_base\">event_base</a> + <a class=\"id\" href=\"#idx\">idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#u64\">u64</a>)(-<a class=\"id\" href=\"#left\">left</a>) &amp; <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#cntval_mask\">cntval_mask</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_update_userpage\">perf_event_update_userpage</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#x86_pmu_enable_event\">x86_pmu_enable_event</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#enabled\">enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__x86_pmu_enable_event\">__x86_pmu_enable_event</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ARCH_PERFMON_EVENTSEL_ENABLE\">ARCH_PERFMON_EVENTSEL_ENABLE</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * activate a single event</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The event is added to the group of enabled events</span>", 
"<span class=\"comment\"> * but only if it can be scehduled with existing events.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with PMU disabled. If successful and return value 1,</span>", 
"<span class=\"comment\"> * then guaranteed to call perf_enable() and hw_perf_enable()</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#x86_pmu_enable\">x86_pmu_enable</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#assign\">assign</a>[<a class=\"id\" href=\"#X86_PMC_IDX_MAX\">X86_PMC_IDX_MAX</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#n0\">n0</a>, <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n0\">n0</a> = <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_events\">n_events</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#collect_events\">collect_events</a>(<a class=\"id\" href=\"#cpuc\">cpuc</a>, <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If group events scheduling transaction was started,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * skip the schedulability test here, it will be peformed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at commit time(-&gt;commit_txn) as a whole</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#group_flag\">group_flag</a> &amp; <a class=\"id\" href=\"#PERF_EVENT_TXN\">PERF_EVENT_TXN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#schedule_events\">schedule_events</a>(<a class=\"id\" href=\"#cpuc\">cpuc</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#assign\">assign</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * copy new assignment, now we know it is possible</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will be used by hw_perf_enable()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#assign\">assign</a>, <a class=\"id\" href=\"#assign\">assign</a>, <a class=\"id\" href=\"#n\">n</a>*sizeof(int));", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_events\">n_events</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_added\">n_added</a> += <a class=\"id\" href=\"#n\">n</a> - <a class=\"id\" href=\"#n0\">n0</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_txn\">n_txn</a> += <a class=\"id\" href=\"#n\">n</a> - <a class=\"id\" href=\"#n0\">n0</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#x86_pmu_start\">x86_pmu_start</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_perf_event_set_period\">x86_perf_event_set_period</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#events\">events</a>[<a class=\"id\" href=\"#idx\">idx</a>] = <a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#active_mask\">active_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#running\">running</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#enable\">enable</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_update_userpage\">perf_event_update_userpage</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#x86_pmu_unthrottle\">x86_pmu_unthrottle</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#x86_pmu_start\">x86_pmu_start</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#perf_event_print_debug\">perf_event_print_debug</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#status\">status</a>, <a class=\"id\" href=\"#overflow\">overflow</a>, <a class=\"id\" href=\"#pmc_ctrl\">pmc_ctrl</a>, <a class=\"id\" href=\"#pmc_count\">pmc_count</a>, <a class=\"id\" href=\"#prev_left\">prev_left</a>, <a class=\"id\" href=\"#fixed\">fixed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#pebs\">pebs</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#version\">version</a> >= 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_CORE_PERF_GLOBAL_CTRL\">MSR_CORE_PERF_GLOBAL_CTRL</a>, <a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_CORE_PERF_GLOBAL_STATUS\">MSR_CORE_PERF_GLOBAL_STATUS</a>, <a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_CORE_PERF_GLOBAL_OVF_CTRL\">MSR_CORE_PERF_GLOBAL_OVF_CTRL</a>, <a class=\"id\" href=\"#overflow\">overflow</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_ARCH_PERFMON_FIXED_CTR_CTRL\">MSR_ARCH_PERFMON_FIXED_CTR_CTRL</a>, <a class=\"id\" href=\"#fixed\">fixed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_PEBS_ENABLE\">MSR_IA32_PEBS_ENABLE</a>, <a class=\"id\" href=\"#pebs\">pebs</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"CPU#%d: ctrl:       %016llx\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"CPU#%d: status:     %016llx\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"CPU#%d: overflow:   %016llx\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#overflow\">overflow</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"CPU#%d: fixed:      %016llx\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#fixed\">fixed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"CPU#%d: pebs:       %016llx\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#pebs\">pebs</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"CPU#%d: active:     %016llx\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>, *(<a class=\"id\" href=\"#u64\">u64</a> *)<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#active_mask\">active_mask</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#idx\">idx</a> = 0; <a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>; <a class=\"id\" href=\"#idx\">idx</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#eventsel\">eventsel</a> + <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#pmc_ctrl\">pmc_ctrl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#perfctr\">perfctr</a>  + <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#pmc_count\">pmc_count</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev_left\">prev_left</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#pmc_prev_left\">pmc_prev_left</a>[<a class=\"id\" href=\"#idx\">idx</a>], <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"CPU#%d:   gen-PMC%d ctrl:  %016llx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#pmc_ctrl\">pmc_ctrl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"CPU#%d:   gen-PMC%d count: %016llx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#pmc_count\">pmc_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"CPU#%d:   gen-PMC%d left:  %016llx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#prev_left\">prev_left</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#idx\">idx</a> = 0; <a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters_fixed\">num_counters_fixed</a>; <a class=\"id\" href=\"#idx\">idx</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_ARCH_PERFMON_FIXED_CTR0\">MSR_ARCH_PERFMON_FIXED_CTR0</a> + <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#pmc_count\">pmc_count</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"CPU#%d: fixed-PMC%d count: %016llx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#pmc_count\">pmc_count</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#x86_pmu_stop\">x86_pmu_stop</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#__test_and_clear_bit\">__test_and_clear_bit</a>(<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#active_mask\">active_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#disable\">disable</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Drain the remaining delta count out of a event</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that we are disabling:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_perf_event_update\">x86_perf_event_update</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#events\">events</a>[<a class=\"id\" href=\"#idx\">idx</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#x86_pmu_disable\">x86_pmu_disable</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we're called during a txn, we don't need to do anything.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The events never got scheduled and -&gt;cancel_txn will truncate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the event_list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#group_flag\">group_flag</a> &amp; <a class=\"id\" href=\"#PERF_EVENT_TXN\">PERF_EVENT_TXN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu_stop\">x86_pmu_stop</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_events\">n_events</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a> == <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#event_list\">event_list</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#put_event_constraints\">put_event_constraints</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#put_event_constraints\">put_event_constraints</a>(<a class=\"id\" href=\"#cpuc\">cpuc</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (++<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_events\">n_events</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#event_list\">event_list</a>[<a class=\"id\" href=\"#i\">i</a>-1] = <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#event_list\">event_list</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_events\">n_events</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_update_userpage\">perf_event_update_userpage</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#x86_pmu_handle_irq\">x86_pmu_handle_irq</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#handled\">handled</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_sample_data_init\">perf_sample_data_init</a>(&amp;<a class=\"id\" href=\"#data\">data</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#idx\">idx</a> = 0; <a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>; <a class=\"id\" href=\"#idx\">idx</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#active_mask\">active_mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Though we deactivated the counter some cpus</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * might still deliver spurious interrupts still</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * in flight. Catch them:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__test_and_clear_bit\">__test_and_clear_bit</a>(<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#running\">running</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handled\">handled</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#events\">events</a>[<a class=\"id\" href=\"#idx\">idx</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#x86_perf_event_update\">x86_perf_event_update</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &amp; (1ULL << (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#cntval_bits\">cntval_bits</a> - 1)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * event overflow</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handled\">handled</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#period\">period</a><span class=\"ts\"/>= <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#last_period\">last_period</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#x86_perf_event_set_period\">x86_perf_event_set_period</a>(<a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#perf_event_overflow\">perf_event_overflow</a>(<a class=\"id\" href=\"#event\">event</a>, 1, &amp;<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu_stop\">x86_pmu_stop</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handled\">handled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc_irq_stat\">inc_irq_stat</a>(<a class=\"id\" href=\"#apic_perf_irqs\">apic_perf_irqs</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#handled\">handled</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#smp_perf_pending_interrupt\">smp_perf_pending_interrupt</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_enter\">irq_enter</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ack_APIC_irq\">ack_APIC_irq</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_irq_stat\">inc_irq_stat</a>(<a class=\"id\" href=\"#apic_pending_irqs\">apic_pending_irqs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_do_pending\">perf_event_do_pending</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_exit\">irq_exit</a>();", 
"}", 
"", 
];
xr_frag_insert('l/38/55d484cd6d98012553d77c5bc872282dd5aa7b.xr', __xr_tmp);
