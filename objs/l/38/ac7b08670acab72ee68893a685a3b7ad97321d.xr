var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/lib/vsprintf.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* vsprintf.c -- Lars Wirzenius &amp; Linus Torvalds. */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wirzenius wrote this portably, Torvalds fucked it up :-)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Fri Jul 13 2001 Crutcher Dunnavant &lt;crutcher+kernel@datastacks.com&gt;</span>", 
"<span class=\"comment\"> * - changed to provide snprintf and vsnprintf functions</span>", 
"<span class=\"comment\"> * So Feb  1 16:51:32 CET 2004 Juergen Quade &lt;quade@hsnr.de&gt;</span>", 
"<span class=\"comment\"> * - scnprintf and vscnprintf</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#stdarg\">stdarg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ioport\">ioport</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#addrconf\">addrconf</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for PAGE_SIZE */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#div64\">div64</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#sections\">sections</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"comment\">/* for dereference_function_descriptor() */</span>", 
"", 
"<span class=\"comment\">/* Works only for digits and letters, but small and fast */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TOLOWER\">TOLOWER</a>(<a class=\"id\" href=\"#x\">x</a>) ((<a class=\"id\" href=\"#x\">x</a>) | 0x20)", 
"", 
"static unsigned int <a class=\"id\" href=\"#simple_guess_base\">simple_guess_base</a>(const char *<a class=\"id\" href=\"#cp\">cp</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cp\">cp</a>[0] == '0') {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#TOLOWER\">TOLOWER</a>(<a class=\"id\" href=\"#cp\">cp</a>[1]) == 'x' && <a class=\"id\" href=\"#isxdigit\">isxdigit</a>(<a class=\"id\" href=\"#cp\">cp</a>[2]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 16;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 8;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>return 10;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * simple_strtoull - convert a string to an unsigned long long</span>", 
"<span class=\"comment\"> * @cp: The start of the string</span>", 
"<span class=\"comment\"> * @endp: A pointer to the end of the parsed string will be placed here</span>", 
"<span class=\"comment\"> * @base: The number base to use</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long long <a class=\"id\" href=\"#simple_strtoull\">simple_strtoull</a>(const char *<a class=\"id\" href=\"#cp\">cp</a>, char **<a class=\"id\" href=\"#endp\">endp</a>, unsigned int <a class=\"id\" href=\"#base\">base</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#result\">result</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#base\">base</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#simple_guess_base\">simple_guess_base</a>(<a class=\"id\" href=\"#cp\">cp</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a> == 16 && <a class=\"id\" href=\"#cp\">cp</a>[0] == '0' && <a class=\"id\" href=\"#TOLOWER\">TOLOWER</a>(<a class=\"id\" href=\"#cp\">cp</a>[1]) == 'x')", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> += 2;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#isxdigit\">isxdigit</a>(*<a class=\"id\" href=\"#cp\">cp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#isdigit\">isdigit</a>(*<a class=\"id\" href=\"#cp\">cp</a>) ? *<a class=\"id\" href=\"#cp\">cp</a> - '0' : <a class=\"id\" href=\"#TOLOWER\">TOLOWER</a>(*<a class=\"id\" href=\"#cp\">cp</a>) - 'a' + 10;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> >= <a class=\"id\" href=\"#base\">base</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#result\">result</a> * <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#endp\">endp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#endp\">endp</a> = (char *)<a class=\"id\" href=\"#cp\">cp</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_strtoull\">simple_strtoull</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * simple_strtoul - convert a string to an unsigned long</span>", 
"<span class=\"comment\"> * @cp: The start of the string</span>", 
"<span class=\"comment\"> * @endp: A pointer to the end of the parsed string will be placed here</span>", 
"<span class=\"comment\"> * @base: The number base to use</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(const char *<a class=\"id\" href=\"#cp\">cp</a>, char **<a class=\"id\" href=\"#endp\">endp</a>, unsigned int <a class=\"id\" href=\"#base\">base</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#simple_strtoull\">simple_strtoull</a>(<a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#endp\">endp</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * simple_strtol - convert a string to a signed long</span>", 
"<span class=\"comment\"> * @cp: The start of the string</span>", 
"<span class=\"comment\"> * @endp: A pointer to the end of the parsed string will be placed here</span>", 
];
xr_frag_insert('l/38/ac7b08670acab72ee68893a685a3b7ad97321d.xr', __xr_tmp);
