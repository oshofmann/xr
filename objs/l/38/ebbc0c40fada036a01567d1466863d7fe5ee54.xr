var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kernel/workqueue.c - generic async execution with shared worker pool</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2002<span class=\"ts\"/><span class=\"ts\"/>Ingo Molnar</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   Derived from the taskqueue/keventd code by:</span>", 
"<span class=\"comment\"> *     David Woodhouse &lt;dwmw2@infradead.org&gt;</span>", 
"<span class=\"comment\"> *     Andrew Morton</span>", 
"<span class=\"comment\"> *     Kai Petzke &lt;wpp@marie.physik.tu-berlin.de&gt;</span>", 
"<span class=\"comment\"> *     Theodore Ts'o &lt;tytso@mit.edu&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Made to use alloc_percpu by Christoph Lameter.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2010<span class=\"ts\"/><span class=\"ts\"/>SUSE Linux Products GmbH</span>", 
"<span class=\"comment\"> * Copyright (C) 2010<span class=\"ts\"/><span class=\"ts\"/>Tejun Heo &lt;tj@kernel.org&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the generic async execution mechanism.  Work items as are</span>", 
"<span class=\"comment\"> * executed in process context.  The worker pool is shared and</span>", 
"<span class=\"comment\"> * automatically managed.  There is one worker pool for each CPU and</span>", 
"<span class=\"comment\"> * one extra for works which are better served by workers which are</span>", 
"<span class=\"comment\"> * not bound to any specific CPU.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Please read Documentation/workqueue.txt for details.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#signal\">signal</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#completion\">completion</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kthread\">kthread</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mempolicy\">mempolicy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#freezer\">freezer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debug_locks\">debug_locks</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#lockdep\">lockdep</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CREATE_TRACE_POINTS\">CREATE_TRACE_POINTS</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"workqueue_sched.h\"", 
"", 
"enum {", 
"<span class=\"ts\"/><span class=\"comment\">/* global_cwq flags */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#GCWQ_MANAGE_WORKERS\">GCWQ_MANAGE_WORKERS</a><span class=\"ts\"/>= 1 << 0,<span class=\"ts\"/><span class=\"comment\">/* need to manage workers */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#GCWQ_MANAGING_WORKERS\">GCWQ_MANAGING_WORKERS</a><span class=\"ts\"/>= 1 << 1,<span class=\"ts\"/><span class=\"comment\">/* managing workers */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#GCWQ_DISASSOCIATED\">GCWQ_DISASSOCIATED</a><span class=\"ts\"/>= 1 << 2,<span class=\"ts\"/><span class=\"comment\">/* cpu can't serve workers */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#GCWQ_FREEZING\">GCWQ_FREEZING</a><span class=\"ts\"/><span class=\"ts\"/>= 1 << 3,<span class=\"ts\"/><span class=\"comment\">/* freeze in progress */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#GCWQ_HIGHPRI_PENDING\">GCWQ_HIGHPRI_PENDING</a><span class=\"ts\"/>= 1 << 4,<span class=\"ts\"/><span class=\"comment\">/* highpri works on queue */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* worker flags */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORKER_STARTED\">WORKER_STARTED</a><span class=\"ts\"/><span class=\"ts\"/>= 1 << 0,<span class=\"ts\"/><span class=\"comment\">/* started */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORKER_DIE\">WORKER_DIE</a><span class=\"ts\"/><span class=\"ts\"/>= 1 << 1,<span class=\"ts\"/><span class=\"comment\">/* die die die */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORKER_IDLE\">WORKER_IDLE</a><span class=\"ts\"/><span class=\"ts\"/>= 1 << 2,<span class=\"ts\"/><span class=\"comment\">/* is idle */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORKER_PREP\">WORKER_PREP</a><span class=\"ts\"/><span class=\"ts\"/>= 1 << 3,<span class=\"ts\"/><span class=\"comment\">/* preparing to run works */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORKER_ROGUE\">WORKER_ROGUE</a><span class=\"ts\"/><span class=\"ts\"/>= 1 << 4,<span class=\"ts\"/><span class=\"comment\">/* not bound to any cpu */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORKER_REBIND\">WORKER_REBIND</a><span class=\"ts\"/><span class=\"ts\"/>= 1 << 5,<span class=\"ts\"/><span class=\"comment\">/* mom is home, come back */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORKER_CPU_INTENSIVE\">WORKER_CPU_INTENSIVE</a><span class=\"ts\"/>= 1 << 6,<span class=\"ts\"/><span class=\"comment\">/* cpu intensive */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORKER_UNBOUND\">WORKER_UNBOUND</a><span class=\"ts\"/><span class=\"ts\"/>= 1 << 7,<span class=\"ts\"/><span class=\"comment\">/* worker is unbound */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WORKER_NOT_RUNNING\">WORKER_NOT_RUNNING</a><span class=\"ts\"/>= <a class=\"id\" href=\"#WORKER_PREP\">WORKER_PREP</a> | <a class=\"id\" href=\"#WORKER_ROGUE\">WORKER_ROGUE</a> | <a class=\"id\" href=\"#WORKER_REBIND\">WORKER_REBIND</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#WORKER_CPU_INTENSIVE\">WORKER_CPU_INTENSIVE</a> | <a class=\"id\" href=\"#WORKER_UNBOUND\">WORKER_UNBOUND</a>,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* gcwq-&gt;trustee_state */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRUSTEE_START\">TRUSTEE_START</a><span class=\"ts\"/><span class=\"ts\"/>= 0,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* start */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRUSTEE_IN_CHARGE\">TRUSTEE_IN_CHARGE</a><span class=\"ts\"/>= 1,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* trustee in charge of gcwq */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRUSTEE_BUTCHER\">TRUSTEE_BUTCHER</a><span class=\"ts\"/><span class=\"ts\"/>= 2,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* butcher workers */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRUSTEE_RELEASE\">TRUSTEE_RELEASE</a><span class=\"ts\"/><span class=\"ts\"/>= 3,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* release workers */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRUSTEE_DONE\">TRUSTEE_DONE</a><span class=\"ts\"/><span class=\"ts\"/>= 4,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* trustee is done */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUSY_WORKER_HASH_ORDER\">BUSY_WORKER_HASH_ORDER</a><span class=\"ts\"/>= 6,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 64 pointers */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUSY_WORKER_HASH_SIZE\">BUSY_WORKER_HASH_SIZE</a><span class=\"ts\"/>= 1 << <a class=\"id\" href=\"#BUSY_WORKER_HASH_ORDER\">BUSY_WORKER_HASH_ORDER</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUSY_WORKER_HASH_MASK\">BUSY_WORKER_HASH_MASK</a><span class=\"ts\"/>= <a class=\"id\" href=\"#BUSY_WORKER_HASH_SIZE\">BUSY_WORKER_HASH_SIZE</a> - 1,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MAX_IDLE_WORKERS_RATIO\">MAX_IDLE_WORKERS_RATIO</a><span class=\"ts\"/>= 4,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 1/4 of busy can be idle */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDLE_WORKER_TIMEOUT\">IDLE_WORKER_TIMEOUT</a><span class=\"ts\"/>= 300 * <a class=\"id\" href=\"#HZ\">HZ</a>,<span class=\"ts\"/><span class=\"comment\">/* keep idle ones for 5 mins */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MAYDAY_INITIAL_TIMEOUT\">MAYDAY_INITIAL_TIMEOUT</a><span class=\"ts\"/>= <a class=\"id\" href=\"#HZ\">HZ</a> / 100,<span class=\"ts\"/><span class=\"comment\">/* call for help after 10ms */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MAYDAY_INTERVAL\">MAYDAY_INTERVAL</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#HZ\">HZ</a> / 10,<span class=\"ts\"/><span class=\"comment\">/* and then every 100ms */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CREATE_COOLDOWN\">CREATE_COOLDOWN</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#HZ\">HZ</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* time to breath after fail */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRUSTEE_COOLDOWN\">TRUSTEE_COOLDOWN</a><span class=\"ts\"/>= <a class=\"id\" href=\"#HZ\">HZ</a> / 10,<span class=\"ts\"/><span class=\"comment\">/* for trustee draining */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Rescue workers are used only on emergencies and shared by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * all cpus.  Give -20.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RESCUER_NICE_LEVEL\">RESCUER_NICE_LEVEL</a><span class=\"ts\"/>= -20,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Structure fields follow one of the following exclusion rules.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * I: Modifiable by initialization/destruction paths and read-only for</span>", 
"<span class=\"comment\"> *    everyone else.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * P: Preemption protected.  Disabling preemption is enough and should</span>", 
"<span class=\"comment\"> *    only be modified and accessed from the local cpu.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * L: gcwq-&gt;lock protected.  Access with gcwq-&gt;lock held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * X: During normal operation, modification requires gcwq-&gt;lock and</span>", 
"<span class=\"comment\"> *    should be done only from local cpu.  Either disabling preemption</span>", 
"<span class=\"comment\"> *    on local cpu or grabbing gcwq-&gt;lock is enough for read access.</span>", 
"<span class=\"comment\"> *    If GCWQ_DISASSOCIATED is set, it's identical to L.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * F: wq-&gt;flush_mutex protected.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * W: workqueue_lock protected.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The poor guys doing the actual heavy lifting.  All on-duty workers</span>", 
"<span class=\"comment\"> * are either serving the manager role, on idle list or on busy hash.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#worker\">worker</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* on idle list while idle, on busy hash table while busy */</span>", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>;<span class=\"ts\"/><span class=\"comment\">/* L: while idle */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a><span class=\"ts\"/><a class=\"id\" href=\"#hentry\">hentry</a>;<span class=\"ts\"/><span class=\"comment\">/* L: while busy */</span>", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a><span class=\"ts\"/>*<a class=\"id\" href=\"#current_work\">current_work</a>;<span class=\"ts\"/><span class=\"comment\">/* L: work being processed */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#current_cwq\">current_cwq</a>; <span class=\"comment\">/* L: current_work's cwq */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#scheduled\">scheduled</a>;<span class=\"ts\"/><span class=\"comment\">/* L: scheduled works */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a><span class=\"ts\"/>*<a class=\"id\" href=\"#task\">task</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* I: worker task */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a><span class=\"ts\"/>*<a class=\"id\" href=\"#gcwq\">gcwq</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* I: the associated gcwq */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* 64 bytes boundary on 64bit, 32 on 32bit */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_active\">last_active</a>;<span class=\"ts\"/><span class=\"comment\">/* L: last active timestamp */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* X: flags */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* I: worker id */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a><span class=\"ts\"/><a class=\"id\" href=\"#rebind_work\">rebind_work</a>;<span class=\"ts\"/><span class=\"comment\">/* L: rebind worker to cpu */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Global per-cpu workqueue.  There's one and only one for each cpu</span>", 
"<span class=\"comment\"> * and all works are queued and processed here regardless of their</span>", 
"<span class=\"comment\"> * target workqueues.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the gcwq lock */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#worklist\">worklist</a>;<span class=\"ts\"/><span class=\"comment\">/* L: list of pending works */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* I: the associated cpu */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* L: GCWQ_* flags */</span>", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_workers\">nr_workers</a>;<span class=\"ts\"/><span class=\"comment\">/* L: total number of workers */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_idle\">nr_idle</a>;<span class=\"ts\"/><span class=\"comment\">/* L: currently idle ones */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* workers are chained either in the idle_list or busy_hash */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#idle_list\">idle_list</a>;<span class=\"ts\"/><span class=\"comment\">/* X: list of idle workers */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a><span class=\"ts\"/><a class=\"id\" href=\"#busy_hash\">busy_hash</a>[<a class=\"id\" href=\"#BUSY_WORKER_HASH_SIZE\">BUSY_WORKER_HASH_SIZE</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* L: hash of busy workers */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a><span class=\"ts\"/><a class=\"id\" href=\"#idle_timer\">idle_timer</a>;<span class=\"ts\"/><span class=\"comment\">/* L: worker idle timeout */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a><span class=\"ts\"/><a class=\"id\" href=\"#mayday_timer\">mayday_timer</a>;<span class=\"ts\"/><span class=\"comment\">/* L: SOS timer for dworkers */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ida\">ida</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker_ida\">worker_ida</a>;<span class=\"ts\"/><span class=\"comment\">/* L: for worker IDs */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a><span class=\"ts\"/>*<a class=\"id\" href=\"#trustee\">trustee</a>;<span class=\"ts\"/><span class=\"comment\">/* L: for gcwq shutdown */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trustee_state\">trustee_state</a>;<span class=\"ts\"/><span class=\"comment\">/* L: trustee state */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a><span class=\"ts\"/><a class=\"id\" href=\"#trustee_wait\">trustee_wait</a>;<span class=\"ts\"/><span class=\"comment\">/* trustee wait */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#first_idle\">first_idle</a>;<span class=\"ts\"/><span class=\"comment\">/* L: first idle worker */</span>", 
"} <a class=\"id\" href=\"#____cacheline_aligned_in_smp\">____cacheline_aligned_in_smp</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The per-CPU workqueue.  The lower WORK_STRUCT_FLAG_BITS of</span>", 
"<span class=\"comment\"> * work_struct-&gt;data are used for flags and thus cwqs need to be</span>", 
"<span class=\"comment\"> * aligned at two's power of the number of flag bits.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a><span class=\"ts\"/>*<a class=\"id\" href=\"#gcwq\">gcwq</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* I: the associated gcwq */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* I: the owning workqueue */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work_color\">work_color</a>;<span class=\"ts\"/><span class=\"comment\">/* L: current color */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_color\">flush_color</a>;<span class=\"ts\"/><span class=\"comment\">/* L: flushing color */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_in_flight\">nr_in_flight</a>[<a class=\"id\" href=\"#WORK_NR_COLORS\">WORK_NR_COLORS</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* L: nr of in_flight works */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_active\">nr_active</a>;<span class=\"ts\"/><span class=\"comment\">/* L: nr of active works */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_active\">max_active</a>;<span class=\"ts\"/><span class=\"comment\">/* L: max active works */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#delayed_works\">delayed_works</a>;<span class=\"ts\"/><span class=\"comment\">/* L: delayed works */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Structure used to wait for workqueue flush.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#wq_flusher\">wq_flusher</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* F: list of flushers */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_color\">flush_color</a>;<span class=\"ts\"/><span class=\"comment\">/* F: flush color waiting for */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a><span class=\"ts\"/><a class=\"id\" href=\"#done\">done</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* flush completion */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * All cpumasks are assumed to be always set on UP and thus can't be</span>", 
"<span class=\"comment\"> * used to determine whether there's something to be done.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"typedef <a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#mayday_mask_t\">mayday_mask_t</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mayday_test_and_set_cpu\">mayday_test_and_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_test_and_set_cpu\">cpumask_test_and_set_cpu</a>((<a class=\"id\" href=\"#cpu\">cpu</a>), (<a class=\"id\" href=\"#mask\">mask</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mayday_clear_cpu\">mayday_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>((<a class=\"id\" href=\"#cpu\">cpu</a>), (<a class=\"id\" href=\"#mask\">mask</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_mayday_cpu\">for_each_mayday_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>((<a class=\"id\" href=\"#cpu\">cpu</a>), (<a class=\"id\" href=\"#mask\">mask</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#alloc_mayday_mask\">alloc_mayday_mask</a>(<a class=\"id\" href=\"#maskp\">maskp</a>, <a class=\"id\" href=\"#gfp\">gfp</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zalloc_cpumask_var\">zalloc_cpumask_var</a>((<a class=\"id\" href=\"#maskp\">maskp</a>), (<a class=\"id\" href=\"#gfp\">gfp</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#free_mayday_mask\">free_mayday_mask</a>(<a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>((<a class=\"id\" href=\"#mask\">mask</a>))", 
"#else", 
"typedef unsigned long <a class=\"id\" href=\"#mayday_mask_t\">mayday_mask_t</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mayday_test_and_set_cpu\">mayday_test_and_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/><a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(0, &amp;(<a class=\"id\" href=\"#mask\">mask</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mayday_clear_cpu\">mayday_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(0, &amp;(<a class=\"id\" href=\"#mask\">mask</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_mayday_cpu\">for_each_mayday_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#cpu\">cpu</a>) = 0, (<a class=\"id\" href=\"#mask\">mask</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#alloc_mayday_mask\">alloc_mayday_mask</a>(<a class=\"id\" href=\"#maskp\">maskp</a>, <a class=\"id\" href=\"#gfp\">gfp</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#true\">true</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#free_mayday_mask\">free_mayday_mask</a>(<a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The externally visible workqueue abstraction is an array of</span>", 
"<span class=\"comment\"> * per-CPU workqueues:</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> {", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* I: WQ_* flags */</span>", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> <a class=\"id\" href=\"#__percpu\">__percpu</a><span class=\"ts\"/>*<a class=\"id\" href=\"#pcpu\">pcpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#single\">single</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#cpu_wq\">cpu_wq</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* I: cwq's */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* W: list of all workqueues */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_mutex\">flush_mutex</a>;<span class=\"ts\"/><span class=\"comment\">/* protects wq flushing */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work_color\">work_color</a>;<span class=\"ts\"/><span class=\"comment\">/* F: current work color */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_color\">flush_color</a>;<span class=\"ts\"/><span class=\"comment\">/* F: current flush color */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_cwqs_to_flush\">nr_cwqs_to_flush</a>; <span class=\"comment\">/* flush in progress */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wq_flusher\">wq_flusher</a><span class=\"ts\"/>*<a class=\"id\" href=\"#first_flusher\">first_flusher</a>;<span class=\"ts\"/><span class=\"comment\">/* F: first flusher */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#flusher_queue\">flusher_queue</a>;<span class=\"ts\"/><span class=\"comment\">/* F: flush waiters */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#flusher_overflow\">flusher_overflow</a>; <span class=\"comment\">/* F: flush overflow list */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mayday_mask_t\">mayday_mask_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mayday_mask\">mayday_mask</a>;<span class=\"ts\"/><span class=\"comment\">/* cpus requesting rescue */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rescuer\">rescuer</a>;<span class=\"ts\"/><span class=\"comment\">/* I: rescue worker */</span>", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#saved_max_active\">saved_max_active</a>; <span class=\"comment\">/* W: saved cwq max_active */</span>", 
"<span class=\"ts\"/>const char<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* I: workqueue name */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKDEP\">CONFIG_LOCKDEP</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a><span class=\"ts\"/><a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#system_wq\">system_wq</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#system_long_wq\">system_long_wq</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#system_nrt_wq\">system_nrt_wq</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#system_unbound_wq\">system_unbound_wq</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#system_wq\">system_wq</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#system_long_wq\">system_long_wq</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#system_nrt_wq\">system_nrt_wq</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#system_unbound_wq\">system_unbound_wq</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_busy_worker\">for_each_busy_worker</a>(<a class=\"id\" href=\"#worker\">worker</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#gcwq\">gcwq</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#BUSY_WORKER_HASH_SIZE\">BUSY_WORKER_HASH_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#worker\">worker</a>, <a class=\"id\" href=\"#pos\">pos</a>, &amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#busy_hash\">busy_hash</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#hentry\">hentry</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__next_gcwq_cpu\">__next_gcwq_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#sw\">sw</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sw\">sw</a> &amp; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cpumask_next\">cpumask_next</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sw\">sw</a> &amp; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#WORK_CPU_UNBOUND\">WORK_CPU_UNBOUND</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#WORK_CPU_NONE\">WORK_CPU_NONE</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__next_wq_cpu\">__next_wq_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__next_gcwq_cpu\">__next_gcwq_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>, !(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_UNBOUND\">WQ_UNBOUND</a>) ? 1 : 2);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * CPU iterators</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * An extra gcwq is defined for an invalid cpu number</span>", 
"<span class=\"comment\"> * (WORK_CPU_UNBOUND) to host workqueues which are not bound to any</span>", 
"<span class=\"comment\"> * specific CPU.  The following iterators are similar to</span>", 
"<span class=\"comment\"> * for_each_*_cpu() iterators but also considers the unbound gcwq.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * for_each_gcwq_cpu()<span class=\"ts\"/><span class=\"ts\"/>: possible CPUs + WORK_CPU_UNBOUND</span>", 
"<span class=\"comment\"> * for_each_online_gcwq_cpu()<span class=\"ts\"/>: online CPUs + WORK_CPU_UNBOUND</span>", 
"<span class=\"comment\"> * for_each_cwq_cpu()<span class=\"ts\"/><span class=\"ts\"/>: possible CPUs for bound workqueues,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  WORK_CPU_UNBOUND for unbound workqueues</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_gcwq_cpu\">for_each_gcwq_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#__next_gcwq_cpu\">__next_gcwq_cpu</a>(-1, <a class=\"id\" href=\"#cpu_possible_mask\">cpu_possible_mask</a>, 3);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#cpu\">cpu</a>) &lt; <a class=\"id\" href=\"#WORK_CPU_NONE\">WORK_CPU_NONE</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#__next_gcwq_cpu\">__next_gcwq_cpu</a>((<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cpu_possible_mask\">cpu_possible_mask</a>, 3))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_online_gcwq_cpu\">for_each_online_gcwq_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#__next_gcwq_cpu\">__next_gcwq_cpu</a>(-1, <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>, 3);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#cpu\">cpu</a>) &lt; <a class=\"id\" href=\"#WORK_CPU_NONE\">WORK_CPU_NONE</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#__next_gcwq_cpu\">__next_gcwq_cpu</a>((<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>, 3))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_cwq_cpu\">for_each_cwq_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#wq\">wq</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#__next_wq_cpu\">__next_wq_cpu</a>(-1, <a class=\"id\" href=\"#cpu_possible_mask\">cpu_possible_mask</a>, (<a class=\"id\" href=\"#wq\">wq</a>));<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#cpu\">cpu</a>) &lt; <a class=\"id\" href=\"#WORK_CPU_NONE\">WORK_CPU_NONE</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#__next_wq_cpu\">__next_wq_cpu</a>((<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cpu_possible_mask\">cpu_possible_mask</a>, (<a class=\"id\" href=\"#wq\">wq</a>)))", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKDEP\">CONFIG_LOCKDEP</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * in_workqueue_context() - in context of specified workqueue?</span>", 
"<span class=\"comment\"> * @wq: the workqueue of interest</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Checks lockdep state to see if the current task is executing from</span>", 
"<span class=\"comment\"> * within a workqueue item.  This function exists only if lockdep is</span>", 
"<span class=\"comment\"> * enabled.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#in_workqueue_context\">in_workqueue_context</a>(struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#lock_is_held\">lock_is_held</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_OBJECTS_WORK\">CONFIG_DEBUG_OBJECTS_WORK</a>", 
"", 
"static struct <a class=\"id\" href=\"#debug_obj_descr\">debug_obj_descr</a> <a class=\"id\" href=\"#work_debug_descr\">work_debug_descr</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fixup_init is called when:</span>", 
"<span class=\"comment\"> * - an active object is initialized</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#work_fixup_init\">work_fixup_init</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, enum <a class=\"id\" href=\"#debug_obj_state\">debug_obj_state</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ODEBUG_STATE_ACTIVE\">ODEBUG_STATE_ACTIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cancel_work_sync\">cancel_work_sync</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_object_init\">debug_object_init</a>(<a class=\"id\" href=\"#work\">work</a>, &amp;<a class=\"id\" href=\"#work_debug_descr\">work_debug_descr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fixup_activate is called when:</span>", 
"<span class=\"comment\"> * - an active object is activated</span>", 
"<span class=\"comment\"> * - an unknown object is activated (might be a statically initialized object)</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#work_fixup_activate\">work_fixup_activate</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, enum <a class=\"id\" href=\"#debug_obj_state\">debug_obj_state</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
];
xr_frag_insert('l/38/ebbc0c40fada036a01567d1466863d7fe5ee54.xr', __xr_tmp);
