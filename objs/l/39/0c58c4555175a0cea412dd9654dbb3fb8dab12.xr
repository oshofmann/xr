var __xr_tmp = [
"<span class=\"ts\"/>     <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#self_exec_id\">self_exec_id</a> != <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#parent_exec_id\">parent_exec_id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#exit_signal\">exit_signal</a> = <a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#signal\">signal</a> = <a class=\"id\" href=\"#tracehook_notify_death\">tracehook_notify_death</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, &amp;<a class=\"id\" href=\"#cookie\">cookie</a>, <a class=\"id\" href=\"#group_dead\">group_dead</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#signal\">signal</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#signal\">signal</a> = <a class=\"id\" href=\"#do_notify_parent\">do_notify_parent</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#signal\">signal</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#exit_state\">exit_state</a> = <a class=\"id\" href=\"#signal\">signal</a> == <a class=\"id\" href=\"#DEATH_REAP\">DEATH_REAP</a> ? <a class=\"id\" href=\"#EXIT_DEAD\">EXIT_DEAD</a> : <a class=\"id\" href=\"#EXIT_ZOMBIE\">EXIT_ZOMBIE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* mt-exec, de_thread() is waiting for group leader */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#notify_count\">notify_count</a> &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#group_exit_task\">group_exit_task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_irq\">write_unlock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracehook_report_death\">tracehook_report_death</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#signal\">signal</a>, <a class=\"id\" href=\"#cookie\">cookie</a>, <a class=\"id\" href=\"#group_dead\">group_dead</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the process is dead, release it - nobody will wait for it */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#signal\">signal</a> == <a class=\"id\" href=\"#DEATH_REAP\">DEATH_REAP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_task\">release_task</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_STACK_USAGE\">CONFIG_DEBUG_STACK_USAGE</a>", 
"static void <a class=\"id\" href=\"#check_stack_usage\">check_stack_usage</a>(void)", 
"{", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#low_water_lock\">low_water_lock</a>);", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#lowest_to_date\">lowest_to_date</a> = <a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#free\">free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a> = <a class=\"id\" href=\"#stack_not_used\">stack_not_used</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#free\">free</a> >= <a class=\"id\" href=\"#lowest_to_date\">lowest_to_date</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#low_water_lock\">low_water_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#free\">free</a> &lt; <a class=\"id\" href=\"#lowest_to_date\">lowest_to_date</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s used greatest stack depth: %lu bytes \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"left\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#free\">free</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lowest_to_date\">lowest_to_date</a> = <a class=\"id\" href=\"#free\">free</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#low_water_lock\">low_water_lock</a>);", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#check_stack_usage\">check_stack_usage</a>(void) {}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<a class=\"id\" href=\"#NORET_TYPE\">NORET_TYPE</a> void <a class=\"id\" href=\"#do_exit\">do_exit</a>(long <a class=\"id\" href=\"#code\">code</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#group_dead\">group_dead</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#profile_task_exit\">profile_task_exit</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#fs_excl\">fs_excl</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Aiee, killing interrupt handler!\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pid\">pid</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Attempted to kill the idle task!\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracehook_report_exit\">tracehook_report_exit</a>(&amp;<a class=\"id\" href=\"#code\">code</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_creds_for_do_exit\">validate_creds_for_do_exit</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We're taking recursive faults here in do_exit. Safest is to just</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * leave this task alone and wait for reboot.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_EXITING\">PF_EXITING</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Fixing recursive fault but reboot is needed!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We can do this unlocked here. The futex code uses</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * this flag just to verify whether the pi state</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cleanup has been done or not. In the worst case it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * loops once more. We pretend that the cleanup was</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * done as there is no way to return. Either the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * OWNER_DIED bit is set by now or we push the blocked</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * task into the wait for ever nirwana as well.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_EXITPIDONE\">PF_EXITPIDONE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exit_irq_thread\">exit_irq_thread</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exit_signals\">exit_signals</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);  <span class=\"comment\">/* sets PF_EXITING */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tsk-&gt;flags are checked in the futex code to protect against</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * an exiting task cleaning up the robust pi futexes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_wait\">raw_spin_unlock_wait</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#in_atomic\">in_atomic</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"note: %s[%d] exited with preempt_count %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(<a class=\"id\" href=\"#current\">current</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_count\">preempt_count</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acct_update_integrals\">acct_update_integrals</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* sync mm's RSS info before statistics gathering */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_mm_rss\">sync_mm_rss</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_dead\">group_dead</a> = <a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#live\">live</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group_dead\">group_dead</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_cancel\">hrtimer_cancel</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#real_timer\">real_timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exit_itimers\">exit_itimers</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setmax_mm_hiwater_rss\">setmax_mm_hiwater_rss</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#maxrss\">maxrss</a>, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acct_collect\">acct_collect</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#group_dead\">group_dead</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group_dead\">group_dead</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_audit_exit\">tty_audit_exit</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#audit_context\">audit_context</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_free\">audit_free</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#exit_code\">exit_code</a> = <a class=\"id\" href=\"#code\">code</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#taskstats_exit\">taskstats_exit</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#group_dead\">group_dead</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exit_mm\">exit_mm</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group_dead\">group_dead</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acct_process\">acct_process</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_sched_process_exit\">trace_sched_process_exit</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exit_sem\">exit_sem</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exit_files\">exit_files</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exit_fs\">exit_fs</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_stack_usage\">check_stack_usage</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exit_thread\">exit_thread</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_exit\">cgroup_exit</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, 1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group_dead\">group_dead</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disassociate_ctty\">disassociate_ctty</a>(1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)-><a class=\"id\" href=\"#exec_domain\">exec_domain</a>-><a class=\"id\" href=\"#module\">module</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_exit_connector\">proc_exit_connector</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * FIXME: do that only when needed, using sched_exit tracepoint</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_ptrace_hw_breakpoint\">flush_ptrace_hw_breakpoint</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Flush inherited counters to the parent - before the parent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * gets woken up by child-exit notifications.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_exit_task\">perf_event_exit_task</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exit_notify\">exit_notify</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#group_dead\">group_dead</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpol_put\">mpol_put</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FUTEX\">CONFIG_FUTEX</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pi_state_cache\">pi_state_cache</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pi_state_cache\">pi_state_cache</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure we are holding no locks:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_check_no_locks_held\">debug_check_no_locks_held</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can do this unlocked here. The futex code uses this flag</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * just to verify whether the pi state cleanup has been done</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or not. In the worst case it loops once more.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_EXITPIDONE\">PF_EXITPIDONE</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#io_context\">io_context</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exit_io_context\">exit_io_context</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#splice_pipe\">splice_pipe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_pipe_info\">__free_pipe_info</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#splice_pipe\">splice_pipe</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_creds_for_do_exit\">validate_creds_for_do_exit</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exit_rcu\">exit_rcu</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* causes final put_task_struct in finish_task_switch(). */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#TASK_DEAD\">TASK_DEAD</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* Avoid \"noreturn function does return\".  */</span>", 
"<span class=\"ts\"/>for (;;)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();<span class=\"ts\"/><span class=\"comment\">/* For when BUG is null */</span>", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#do_exit\">do_exit</a>);", 
"", 
"<a class=\"id\" href=\"#NORET_TYPE\">NORET_TYPE</a> void <a class=\"id\" href=\"#complete_and_exit\">complete_and_exit</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#comp\">comp</a>, long <a class=\"id\" href=\"#code\">code</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#comp\">comp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(<a class=\"id\" href=\"#comp\">comp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_exit\">do_exit</a>(<a class=\"id\" href=\"#code\">code</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#complete_and_exit\">complete_and_exit</a>);", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#exit\">exit</a>, int, <a class=\"id\" href=\"#error_code\">error_code</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_exit\">do_exit</a>((<a class=\"id\" href=\"#error_code\">error_code</a>&amp;0xff)<<8);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Take down every thread in the group.  This is called by fatal signals</span>", 
"<span class=\"comment\"> * as well as by sys_exit_group (below).</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#NORET_TYPE\">NORET_TYPE</a> void", 
"<a class=\"id\" href=\"#do_group_exit\">do_group_exit</a>(int <a class=\"id\" href=\"#exit_code\">exit_code</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *<a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#exit_code\">exit_code</a> &amp; 0x80); <span class=\"comment\">/* core dumps don't get here */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_group_exit\">signal_group_exit</a>(<a class=\"id\" href=\"#sig\">sig</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exit_code\">exit_code</a> = <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#group_exit_code\">group_exit_code</a>;", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#thread_group_empty\">thread_group_empty</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sighand_struct\">sighand_struct</a> *const <a class=\"id\" href=\"#sighand\">sighand</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_group_exit\">signal_group_exit</a>(<a class=\"id\" href=\"#sig\">sig</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Another thread got here before we took the lock.  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exit_code\">exit_code</a> = <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#group_exit_code\">group_exit_code</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#group_exit_code\">group_exit_code</a> = <a class=\"id\" href=\"#exit_code\">exit_code</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#SIGNAL_GROUP_EXIT\">SIGNAL_GROUP_EXIT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zap_other_threads\">zap_other_threads</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_exit\">do_exit</a>(<a class=\"id\" href=\"#exit_code\">exit_code</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* NOTREACHED */</span>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * this kills every thread in the thread group. Note that any externally</span>", 
"<span class=\"comment\"> * wait4()-ing process will get the correct exit code - even if this</span>", 
"<span class=\"comment\"> * thread is not the thread group leader.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#exit_group\">exit_group</a>, int, <a class=\"id\" href=\"#error_code\">error_code</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_group_exit\">do_group_exit</a>((<a class=\"id\" href=\"#error_code\">error_code</a> &amp; 0xff) << 8);", 
"<span class=\"ts\"/><span class=\"comment\">/* NOTREACHED */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#wait_opts\">wait_opts</a> {", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#pid_type\">pid_type</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wo_type\">wo_type</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wo_flags\">wo_flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#wo_pid\">wo_pid</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#siginfo\">siginfo</a> <a class=\"id\" href=\"#__user\">__user</a><span class=\"ts\"/>*<a class=\"id\" href=\"#wo_info\">wo_info</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__user\">__user</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#wo_stat\">wo_stat</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rusage\">rusage</a> <a class=\"id\" href=\"#__user\">__user</a><span class=\"ts\"/>*<a class=\"id\" href=\"#wo_rusage\">wo_rusage</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child_wait\">child_wait</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#notask_error\">notask_error</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#task_pid_type\">task_pid_type</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pids\">pids</a>[<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#pid\">pid</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#eligible_pid\">eligible_pid</a>(struct <a class=\"id\" href=\"#wait_opts\">wait_opts</a> *<a class=\"id\" href=\"#wo\">wo</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return<span class=\"ts\"/><a class=\"id\" href=\"#wo\">wo</a>-><a class=\"id\" href=\"#wo_type\">wo_type</a> == <a class=\"id\" href=\"#PIDTYPE_MAX\">PIDTYPE_MAX</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_pid_type\">task_pid_type</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#wo\">wo</a>-><a class=\"id\" href=\"#wo_type\">wo_type</a>) == <a class=\"id\" href=\"#wo\">wo</a>-><a class=\"id\" href=\"#wo_pid\">wo_pid</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#eligible_child\">eligible_child</a>(struct <a class=\"id\" href=\"#wait_opts\">wait_opts</a> *<a class=\"id\" href=\"#wo\">wo</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#eligible_pid\">eligible_pid</a>(<a class=\"id\" href=\"#wo\">wo</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait for all children (clone and not) if __WALL is set;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * otherwise, wait for clone children *only* if __WCLONE is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set; otherwise, wait for non-clone children *only*.  (Note:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A \"clone\" child here is one that reports to its parent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * using a signal other than SIGCHLD.) */</span>", 
"<span class=\"ts\"/>if (((<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#exit_signal\">exit_signal</a> != <a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>) ^ !!(<a class=\"id\" href=\"#wo\">wo</a>-><a class=\"id\" href=\"#wo_flags\">wo_flags</a> &amp; <a class=\"id\" href=\"#__WCLONE\">__WCLONE</a>))", 
"<span class=\"ts\"/>    && !(<a class=\"id\" href=\"#wo\">wo</a>-><a class=\"id\" href=\"#wo_flags\">wo_flags</a> &amp; <a class=\"id\" href=\"#__WALL\">__WALL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#wait_noreap_copyout\">wait_noreap_copyout</a>(struct <a class=\"id\" href=\"#wait_opts\">wait_opts</a> *<a class=\"id\" href=\"#wo\">wo</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#uid\">uid</a>, int <a class=\"id\" href=\"#why\">why</a>, int <a class=\"id\" href=\"#status\">status</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#siginfo\">siginfo</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#infop\">infop</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#wo\">wo</a>-><a class=\"id\" href=\"#wo_rusage\">wo_rusage</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>? <a class=\"id\" href=\"#getrusage\">getrusage</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#RUSAGE_BOTH\">RUSAGE_BOTH</a>, <a class=\"id\" href=\"#wo\">wo</a>-><a class=\"id\" href=\"#wo_rusage\">wo_rusage</a>) : 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#infop\">infop</a> = <a class=\"id\" href=\"#wo\">wo</a>-><a class=\"id\" href=\"#wo_info\">wo_info</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#infop\">infop</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>, &amp;<a class=\"id\" href=\"#infop\">infop</a>-><a class=\"id\" href=\"#si_signo\">si_signo</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#put_user\">put_user</a>(0, &amp;<a class=\"id\" href=\"#infop\">infop</a>-><a class=\"id\" href=\"#si_errno\">si_errno</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#put_user\">put_user</a>((short)<a class=\"id\" href=\"#why\">why</a>, &amp;<a class=\"id\" href=\"#infop\">infop</a>-><a class=\"id\" href=\"#si_code\">si_code</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#pid\">pid</a>, &amp;<a class=\"id\" href=\"#infop\">infop</a>-><a class=\"id\" href=\"#si_pid\">si_pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#uid\">uid</a>, &amp;<a class=\"id\" href=\"#infop\">infop</a>-><a class=\"id\" href=\"#si_uid\">si_uid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#status\">status</a>, &amp;<a class=\"id\" href=\"#infop\">infop</a>-><a class=\"id\" href=\"#si_status\">si_status</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle sys_wait4 work for one task in state EXIT_ZOMBIE.  We hold</span>", 
"<span class=\"comment\"> * read_lock(&amp;tasklist_lock) on entry.  If we return zero, we still hold</span>", 
"<span class=\"comment\"> * the lock and this task is uninteresting.  If we return nonzero, we have</span>", 
"<span class=\"comment\"> * released the lock and the system call should return.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#wait_task_zombie\">wait_task_zombie</a>(struct <a class=\"id\" href=\"#wait_opts\">wait_opts</a> *<a class=\"id\" href=\"#wo\">wo</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>, <a class=\"id\" href=\"#status\">status</a>, <a class=\"id\" href=\"#traced\">traced</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#uid\">uid</a> = <a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#uid\">uid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#siginfo\">siginfo</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#infop\">infop</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#wo\">wo</a>-><a class=\"id\" href=\"#wo_flags\">wo_flags</a> &amp; <a class=\"id\" href=\"#WEXITED\">WEXITED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#wo\">wo</a>-><a class=\"id\" href=\"#wo_flags\">wo_flags</a> &amp; <a class=\"id\" href=\"#WNOWAIT\">WNOWAIT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#exit_code\">exit_code</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#exit_code\">exit_code</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#why\">why</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#exit_code\">exit_code</a> &amp; 0x7f) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#why\">why</a> = <a class=\"id\" href=\"#CLD_EXITED\">CLD_EXITED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#exit_code\">exit_code</a> >> 8;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#why\">why</a> = (<a class=\"id\" href=\"#exit_code\">exit_code</a> &amp; 0x80) ? <a class=\"id\" href=\"#CLD_DUMPED\">CLD_DUMPED</a> : <a class=\"id\" href=\"#CLD_KILLED\">CLD_KILLED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#exit_code\">exit_code</a> &amp; 0x7f;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#wait_noreap_copyout\">wait_noreap_copyout</a>(<a class=\"id\" href=\"#wo\">wo</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#why\">why</a>, <a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Try to move the task's state to DEAD</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * only one thread is allowed to do this:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#xchg\">xchg</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#exit_state\">exit_state</a>, <a class=\"id\" href=\"#EXIT_DEAD\">EXIT_DEAD</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#EXIT_ZOMBIE\">EXIT_ZOMBIE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#EXIT_DEAD\">EXIT_DEAD</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#traced\">traced</a> = <a class=\"id\" href=\"#ptrace_reparented\">ptrace_reparented</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It can be ptraced but not reparented, check</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * !task_detached() to filter out sub-threads.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#traced\">traced</a>) && <a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#task_detached\">task_detached</a>(<a class=\"id\" href=\"#p\">p</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *<a class=\"id\" href=\"#psig\">psig</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *<a class=\"id\" href=\"#sig\">sig</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#maxrss\">maxrss</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#tgutime\">tgutime</a>, <a class=\"id\" href=\"#tgstime\">tgstime</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The resource counters for the group leader are in its</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * own task_struct.  Those for dead threads in the group</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * are in its signal_struct, as are those for the child</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * processes it has previously reaped.  All these</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * accumulate in the parent's signal_struct c* fields.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We don't bother to take a lock here to protect these</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * p-&gt;signal fields, because they are only touched by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * __exit_signal, which runs with tasklist_lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * write-locked anyway, and so is excluded here.  We do</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * need to protect the access to parent-&gt;signal fields,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * as other threads in the parent group can be right</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * here reaping other children at the same time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We use thread_group_times() to get times for the thread</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * group, which consolidates times for all threads in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * group including the group leader.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thread_group_times\">thread_group_times</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#tgutime\">tgutime</a>, &amp;<a class=\"id\" href=\"#tgstime\">tgstime</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#psig\">psig</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>-><a class=\"id\" href=\"#signal\">signal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#signal\">signal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#cutime\">cutime</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#cutime\">cutime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#tgutime\">tgutime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cutime\">cutime</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#cstime\">cstime</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#cstime\">cstime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#tgstime\">tgstime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cstime\">cstime</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#cgtime\">cgtime</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#cgtime\">cgtime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#gtime\">gtime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#gtime\">gtime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cgtime\">cgtime</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#cmin_flt\">cmin_flt</a> +=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#min_flt\">min_flt</a> + <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#min_flt\">min_flt</a> + <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cmin_flt\">cmin_flt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#cmaj_flt\">cmaj_flt</a> +=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#maj_flt\">maj_flt</a> + <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#maj_flt\">maj_flt</a> + <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cmaj_flt\">cmaj_flt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#cnvcsw\">cnvcsw</a> +=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#nvcsw\">nvcsw</a> + <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#nvcsw\">nvcsw</a> + <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cnvcsw\">cnvcsw</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#cnivcsw\">cnivcsw</a> +=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#nivcsw\">nivcsw</a> + <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#nivcsw\">nivcsw</a> + <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cnivcsw\">cnivcsw</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#cinblock\">cinblock</a> +=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_io_get_inblock\">task_io_get_inblock</a>(<a class=\"id\" href=\"#p\">p</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#inblock\">inblock</a> + <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cinblock\">cinblock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#coublock\">coublock</a> +=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_io_get_oublock\">task_io_get_oublock</a>(<a class=\"id\" href=\"#p\">p</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#oublock\">oublock</a> + <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#coublock\">coublock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#maxrss\">maxrss</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#maxrss\">maxrss</a>, <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cmaxrss\">cmaxrss</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#cmaxrss\">cmaxrss</a> &lt; <a class=\"id\" href=\"#maxrss\">maxrss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#cmaxrss\">cmaxrss</a> = <a class=\"id\" href=\"#maxrss\">maxrss</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_io_accounting_add\">task_io_accounting_add</a>(&amp;<a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#ioac\">ioac</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ioac\">ioac</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_io_accounting_add\">task_io_accounting_add</a>(&amp;<a class=\"id\" href=\"#psig\">psig</a>-><a class=\"id\" href=\"#ioac\">ioac</a>, &amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#ioac\">ioac</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now we are sure this task is interesting, and no other</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * thread can reap it because we set its state to EXIT_DEAD.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#wo\">wo</a>-><a class=\"id\" href=\"#wo_rusage\">wo_rusage</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>? <a class=\"id\" href=\"#getrusage\">getrusage</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#RUSAGE_BOTH\">RUSAGE_BOTH</a>, <a class=\"id\" href=\"#wo\">wo</a>-><a class=\"id\" href=\"#wo_rusage\">wo_rusage</a>) : 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SIGNAL_GROUP_EXIT\">SIGNAL_GROUP_EXIT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>? <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#group_exit_code\">group_exit_code</a> : <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#exit_code\">exit_code</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a> && <a class=\"id\" href=\"#wo\">wo</a>-><a class=\"id\" href=\"#wo_stat\">wo_stat</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#status\">status</a>, <a class=\"id\" href=\"#wo\">wo</a>-><a class=\"id\" href=\"#wo_stat\">wo_stat</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#infop\">infop</a> = <a class=\"id\" href=\"#wo\">wo</a>-><a class=\"id\" href=\"#wo_info\">wo_info</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a> && <a class=\"id\" href=\"#infop\">infop</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>, &amp;<a class=\"id\" href=\"#infop\">infop</a>-><a class=\"id\" href=\"#si_signo\">si_signo</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a> && <a class=\"id\" href=\"#infop\">infop</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#put_user\">put_user</a>(0, &amp;<a class=\"id\" href=\"#infop\">infop</a>-><a class=\"id\" href=\"#si_errno\">si_errno</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a> && <a class=\"id\" href=\"#infop\">infop</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#why\">why</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#status\">status</a> &amp; 0x7f) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#why\">why</a> = <a class=\"id\" href=\"#CLD_EXITED\">CLD_EXITED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> >>= 8;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#why\">why</a> = (<a class=\"id\" href=\"#status\">status</a> &amp; 0x80) ? <a class=\"id\" href=\"#CLD_DUMPED\">CLD_DUMPED</a> : <a class=\"id\" href=\"#CLD_KILLED\">CLD_KILLED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> &= 0x7f;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#put_user\">put_user</a>((short)<a class=\"id\" href=\"#why\">why</a>, &amp;<a class=\"id\" href=\"#infop\">infop</a>-><a class=\"id\" href=\"#si_code\">si_code</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#status\">status</a>, &amp;<a class=\"id\" href=\"#infop\">infop</a>-><a class=\"id\" href=\"#si_status\">si_status</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a> && <a class=\"id\" href=\"#infop\">infop</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#pid\">pid</a>, &amp;<a class=\"id\" href=\"#infop\">infop</a>-><a class=\"id\" href=\"#si_pid\">si_pid</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a> && <a class=\"id\" href=\"#infop\">infop</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#uid\">uid</a>, &amp;<a class=\"id\" href=\"#infop\">infop</a>-><a class=\"id\" href=\"#si_uid\">si_uid</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#traced\">traced</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_lock_irq\">write_lock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We dropped tasklist, ptracer could die and untrace */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptrace_unlink\">ptrace_unlink</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this is not a detached task, notify the parent.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If it's still not detached after that, don't release</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#task_detached\">task_detached</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_notify_parent\">do_notify_parent</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#exit_signal\">exit_signal</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#task_detached\">task_detached</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#exit_state\">exit_state</a> = <a class=\"id\" href=\"#EXIT_ZOMBIE\">EXIT_ZOMBIE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_irq\">write_unlock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_task\">release_task</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static int *<a class=\"id\" href=\"#task_stopped_code\">task_stopped_code</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ptrace\">ptrace</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ptrace\">ptrace</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task_is_stopped_or_traced\">task_is_stopped_or_traced</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#exit_code\">exit_code</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SIGNAL_STOP_STOPPED\">SIGNAL_STOP_STOPPED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#group_exit_code\">group_exit_code</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle sys_wait4 work for one task in state TASK_STOPPED.  We hold</span>", 
"<span class=\"comment\"> * read_lock(&amp;tasklist_lock) on entry.  If we return zero, we still hold</span>", 
"<span class=\"comment\"> * the lock and this task is uninteresting.  If we return nonzero, we have</span>", 
"<span class=\"comment\"> * released the lock and the system call should return.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#wait_task_stopped\">wait_task_stopped</a>(struct <a class=\"id\" href=\"#wait_opts\">wait_opts</a> *<a class=\"id\" href=\"#wo\">wo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ptrace\">ptrace</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#siginfo\">siginfo</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#infop\">infop</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>, <a class=\"id\" href=\"#exit_code\">exit_code</a>, *<a class=\"id\" href=\"#p_code\">p_code</a>, <a class=\"id\" href=\"#why\">why</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#uid\">uid</a> = 0; <span class=\"comment\">/* unneeded, required by compiler */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Traditionally we see ptrace'd stopped tasks regardless of options.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ptrace\">ptrace</a> && !(<a class=\"id\" href=\"#wo\">wo</a>-><a class=\"id\" href=\"#wo_flags\">wo_flags</a> &amp; <a class=\"id\" href=\"#WUNTRACED\">WUNTRACED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
];
xr_frag_insert('l/39/0c58c4555175a0cea412dd9654dbb3fb8dab12.xr', __xr_tmp);
