var __xr_tmp = [
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#mod_find_symname\">mod_find_symname</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_symtab\">num_symtab</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#strtab\">strtab</a>+<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_name\">st_name</a>) == 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_info\">st_info</a> != 'U')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_value\">st_value</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Look for this name: can be of form module:name. */</span>", 
"unsigned long <a class=\"id\" href=\"#module_kallsyms_lookup_name\">module_kallsyms_lookup_name</a>(const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#colon\">colon</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't lock: we're in enough trouble already. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#colon\">colon</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#name\">name</a>, ':')) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#colon\">colon</a> = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#find_module\">find_module</a>(<a class=\"id\" href=\"#name\">name</a>)) != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mod_find_symname\">mod_find_symname</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#colon\">colon</a>+1);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#colon\">colon</a> = ':';", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#modules\">modules</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mod_find_symname\">mod_find_symname</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#name\">name</a>)) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#module_kallsyms_on_each_symbol\">module_kallsyms_on_each_symbol</a>(int (*<a class=\"id\" href=\"#fn\">fn</a>)(void *, const char *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#module\">module</a> *, unsigned long),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#modules\">modules</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_symtab\">num_symtab</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#strtab\">strtab</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_name\">st_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_value\">st_value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_KALLSYMS */</span>", 
"", 
"static char *<a class=\"id\" href=\"#module_flags\">module_flags</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bx\">bx</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#taints\">taints</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#MODULE_STATE_GOING\">MODULE_STATE_GOING</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#MODULE_STATE_COMING\">MODULE_STATE_COMING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#bx\">bx</a>++] = '(';", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#taints\">taints</a> &amp; (1 << <a class=\"id\" href=\"#TAINT_PROPRIETARY_MODULE\">TAINT_PROPRIETARY_MODULE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#bx\">bx</a>++] = 'P';", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#taints\">taints</a> &amp; (1 << <a class=\"id\" href=\"#TAINT_FORCED_MODULE\">TAINT_FORCED_MODULE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#bx\">bx</a>++] = 'F';", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#taints\">taints</a> &amp; (1 << <a class=\"id\" href=\"#TAINT_CRAP\">TAINT_CRAP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#bx\">bx</a>++] = 'C';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * TAINT_FORCED_RMMOD: could be added.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * TAINT_UNSAFE_SMP, TAINT_MACHINE_CHECK, TAINT_BAD_PAGE don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * apply to modules.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Show a - for module-is-being-unloaded */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#MODULE_STATE_GOING\">MODULE_STATE_GOING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#bx\">bx</a>++] = '-';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Show a + for module-is-being-loaded */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#MODULE_STATE_COMING\">MODULE_STATE_COMING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#bx\">bx</a>++] = '+';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#bx\">bx</a>++] = ')';", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#bx\">bx</a>] = '\\0';", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"<span class=\"comment\">/* Called by the /proc file system to return a list of modules. */</span>", 
"static void *<a class=\"id\" href=\"#m_start\">m_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_list_start\">seq_list_start</a>(&amp;<a class=\"id\" href=\"#modules\">modules</a>, *<a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#m_next\">m_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_list_next\">seq_list_next</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#modules\">modules</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#m_stop\">m_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#m_show\">m_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#module\">module</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[8];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%s %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#init_size\">init_size</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_size\">core_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_unload_info\">print_unload_info</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#mod\">mod</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Informative for users. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" %s\",", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#MODULE_STATE_GOING\">MODULE_STATE_GOING</a> ? \"Unloading\":", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#MODULE_STATE_COMING\">MODULE_STATE_COMING</a> ? \"Loading\":", 
"<span class=\"ts\"/><span class=\"ts\"/>   \"Live\");", 
"<span class=\"ts\"/><span class=\"comment\">/* Used by oprofile and other similar tools. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" 0x%p\", <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_core\">module_core</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Taints info */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#taints\">taints</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" %s\", <a class=\"id\" href=\"#module_flags\">module_flags</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#buf\">buf</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"\\n\");", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Format: modulename size refcount deps address</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   Where refcount is a number or -, and deps is a comma-separated list</span>", 
"<span class=\"comment\">   of depends or -.</span>", 
"<span class=\"comment\">*/</span>", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#modules_op\">modules_op</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a><span class=\"ts\"/>= <a class=\"id\" href=\"#m_start\">m_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a><span class=\"ts\"/>= <a class=\"id\" href=\"#m_next\">m_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a><span class=\"ts\"/>= <a class=\"id\" href=\"#m_stop\">m_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a><span class=\"ts\"/>= <a class=\"id\" href=\"#m_show\">m_show</a>", 
"};", 
"", 
"static int <a class=\"id\" href=\"#modules_open\">modules_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#modules_op\">modules_op</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#proc_modules_operations\">proc_modules_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#modules_open\">modules_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_release\">seq_release</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#proc_modules_init\">proc_modules_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_create\">proc_create</a>(\"modules\", 0, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#proc_modules_operations\">proc_modules_operations</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#proc_modules_init\">proc_modules_init</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Given an address, look for it in the module exception tables. */</span>", 
"const struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> *<a class=\"id\" href=\"#search_module_extables\">search_module_extables</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> *<a class=\"id\" href=\"#e\">e</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#modules\">modules</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_exentries\">num_exentries</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a> = <a class=\"id\" href=\"#search_extable\">search_extable</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#extable\">extable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#extable\">extable</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_exentries\">num_exentries</a> - 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#e\">e</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now, if we found one, we are running inside it now, hence</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   we cannot unload the module, hence no refcnt needed. */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#e\">e</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * is_module_address - is this address inside a module?</span>", 
"<span class=\"comment\"> * @addr: the address to check.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See is_module_text_address() if you simply want to see if the address</span>", 
"<span class=\"comment\"> * is code (not data).</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_module_address\">is_module_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__module_address\">__module_address</a>(<a class=\"id\" href=\"#addr\">addr</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * __module_address - get the module which contains an address.</span>", 
"<span class=\"comment\"> * @addr: the address.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called with preempt disabled or module mutex held so that</span>", 
"<span class=\"comment\"> * module doesn't get freed during this.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#__module_address\">__module_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#module_addr_min\">module_addr_min</a> || <a class=\"id\" href=\"#addr\">addr</a> &gt; <a class=\"id\" href=\"#module_addr_max\">module_addr_max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#modules\">modules</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#within_module_core\">within_module_core</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#mod\">mod</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    || <a class=\"id\" href=\"#within_module_init\">within_module_init</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#mod\">mod</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__module_address\">__module_address</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * is_module_text_address - is this address inside module code?</span>", 
"<span class=\"comment\"> * @addr: the address to check.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See is_module_address() if you simply want to see if the address is</span>", 
"<span class=\"comment\"> * anywhere in a module.  See kernel_text_address() for testing if an</span>", 
"<span class=\"comment\"> * address corresponds to kernel or module code.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_module_text_address\">is_module_text_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__module_text_address\">__module_text_address</a>(<a class=\"id\" href=\"#addr\">addr</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * __module_text_address - get the module whose code contains an address.</span>", 
"<span class=\"comment\"> * @addr: the address.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called with preempt disabled or module mutex held so that</span>", 
"<span class=\"comment\"> * module doesn't get freed during this.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#__module_text_address\">__module_text_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#__module_address\">__module_address</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make sure it's within the text section. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#within\">within</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_init\">module_init</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#init_text_size\">init_text_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    && !<a class=\"id\" href=\"#within\">within</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_core\">module_core</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_text_size\">core_text_size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mod\">mod</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__module_text_address\">__module_text_address</a>);", 
"", 
"<span class=\"comment\">/* Don't grab lock, we're oopsing. */</span>", 
"void <a class=\"id\" href=\"#print_modules\">print_modules</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[8];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEFAULT\">KERN_DEFAULT</a> \"Modules linked in:\");", 
"<span class=\"ts\"/><span class=\"comment\">/* Most callers should already have preempt disabled, but make sure */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#modules\">modules</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" %s%s\", <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#module_flags\">module_flags</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#buf\">buf</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#last_unloaded_module\">last_unloaded_module</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" [last unloaded: %s]\", <a class=\"id\" href=\"#last_unloaded_module\">last_unloaded_module</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODVERSIONS\">CONFIG_MODVERSIONS</a>", 
"<span class=\"comment\">/* Generate the signature for all relevant module structures here.</span>", 
"<span class=\"comment\"> * If these change, we don't want to try to parse the module. */</span>", 
"void <a class=\"id\" href=\"#module_layout\">module_layout</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#modversion_info\">modversion_info</a> *<a class=\"id\" href=\"#ver\">ver</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#ks\">ks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#tracepoint\">tracepoint</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#module_layout\">module_layout</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACEPOINTS\">CONFIG_TRACEPOINTS</a>", 
"void <a class=\"id\" href=\"#module_update_tracepoints\">module_update_tracepoints</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#modules\">modules</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#taints\">taints</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tracepoint_update_probe_range\">tracepoint_update_probe_range</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#tracepoints\">tracepoints</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#tracepoints\">tracepoints</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_tracepoints\">num_tracepoints</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"}", 
"", 
];
xr_frag_insert('l/39/240d45ab39819e6415ef24e01c8888c204d86a.xr', __xr_tmp);
