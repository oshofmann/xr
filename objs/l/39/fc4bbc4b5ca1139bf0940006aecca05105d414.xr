var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: evgpeinit - System GPE initialization and update</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acevents.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acnamesp.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acinterp.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_EVENTS\">ACPI_EVENTS</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"evgpeinit\")", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_gpe_initialize</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Initialize the GPE data structures and the FADT GPE 0/1 blocks</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ev_gpe_initialize\">acpi_ev_gpe_initialize</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#register_count0\">register_count0</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#register_count1\">register_count1</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#gpe_number_max\">gpe_number_max</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ev_gpe_initialize\">ev_gpe_initialize</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_acquire_mutex\">acpi_ut_acquire_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Initialize the GPE Block(s) defined in the FADT</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Why the GPE register block lengths are divided by 2:  From the ACPI</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Spec, section \"General-Purpose Event Registers\", we have:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * \"Each register block contains two registers of equal length</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  GPEx_STS and GPEx_EN (where x is 0 or 1). The length of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  GPE0_STS and GPE0_EN registers is equal to half the GPE0_LEN</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  The length of the GPE1_STS and GPE1_EN registers is equal to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  half the GPE1_LEN. If a generic register block is not supported</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  then its respective block pointer and block length values in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  FADT table contain zeros. The GPE0_LEN and GPE1_LEN do not need</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  to be the same size.\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Determine the maximum GPE number for this machine.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note: both GPE0 and GPE1 are optional, and either can exist without</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the other.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If EITHER the register length OR the block address are zero, then that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * particular block is not supported.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#gpe0_block_length\">gpe0_block_length</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#xgpe0_block\">xgpe0_block</a>.<a class=\"id\" href=\"#address\">address</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* GPE block 0 exists (has both length and address &gt; 0) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_count0\">register_count0</a> = (<a class=\"id\" href=\"#u16\">u16</a>)(<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#gpe0_block_length\">gpe0_block_length</a> / 2);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_number_max\">gpe_number_max</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#register_count0\">register_count0</a> * <a class=\"id\" href=\"#ACPI_GPE_REGISTER_WIDTH\">ACPI_GPE_REGISTER_WIDTH</a>) - 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Install GPE Block 0 */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ev_create_gpe_block\">acpi_ev_create_gpe_block</a>(<a class=\"id\" href=\"#acpi_gbl_fadt_gpe_device\">acpi_gbl_fadt_gpe_device</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#xgpe0_block\">xgpe0_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#register_count0\">register_count0</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#sci_interrupt\">sci_interrupt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#acpi_gbl_gpe_fadt_blocks\">acpi_gbl_gpe_fadt_blocks</a>[0]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_EXCEPTION\">ACPI_EXCEPTION</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Could not create GPE Block 0\"));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#gpe1_block_length\">gpe1_block_length</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#xgpe1_block\">xgpe1_block</a>.<a class=\"id\" href=\"#address\">address</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* GPE block 1 exists (has both length and address &gt; 0) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_count1\">register_count1</a> = (<a class=\"id\" href=\"#u16\">u16</a>)(<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#gpe1_block_length\">gpe1_block_length</a> / 2);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check for GPE0/GPE1 overlap (if both banks exist) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#register_count0\">register_count0</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#gpe_number_max\">gpe_number_max</a> >= <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#gpe1_base\">gpe1_base</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"GPE0 block (GPE 0 to %u) overlaps the GPE1 block \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"(GPE %u to %u) - Ignoring GPE1\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#gpe_number_max\">gpe_number_max</a>, <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#gpe1_base\">gpe1_base</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#gpe1_base\">gpe1_base</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#register_count1\">register_count1</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ACPI_GPE_REGISTER_WIDTH\">ACPI_GPE_REGISTER_WIDTH</a>) - 1)));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ignore GPE1 block by setting the register count to zero */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_count1\">register_count1</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Install GPE Block 1 */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ev_create_gpe_block\">acpi_ev_create_gpe_block</a>(<a class=\"id\" href=\"#acpi_gbl_fadt_gpe_device\">acpi_gbl_fadt_gpe_device</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#xgpe1_block\">xgpe1_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#register_count1\">register_count1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#gpe1_base\">gpe1_base</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#sci_interrupt\">sci_interrupt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#acpi_gbl_gpe_fadt_blocks\">acpi_gbl_gpe_fadt_blocks</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     [1]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_EXCEPTION\">ACPI_EXCEPTION</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Could not create GPE Block 1\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * GPE0 and GPE1 do not have to be contiguous in the GPE number</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * space. However, GPE0 always starts at GPE number zero.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_number_max\">gpe_number_max</a> = <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#gpe1_base\">gpe1_base</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#register_count1\">register_count1</a> * <a class=\"id\" href=\"#ACPI_GPE_REGISTER_WIDTH\">ACPI_GPE_REGISTER_WIDTH</a>) - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Exit if there are no GPE registers */</span>", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#register_count0\">register_count0</a> + <a class=\"id\" href=\"#register_count1\">register_count1</a>) == 0) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* GPEs are not required by ACPI, this is OK */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INIT\">ACPI_DB_INIT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"There are no GPE blocks defined in the FADT\\n\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for Max GPE number out-of-range */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gpe_number_max\">gpe_number_max</a> &gt; <a class=\"id\" href=\"#ACPI_GPE_MAX\">ACPI_GPE_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Maximum GPE number from FADT is too large: 0x%X\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#gpe_number_max\">gpe_number_max</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_BAD_VALUE\">AE_BAD_VALUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"      <a class=\"id\" href=\"#cleanup\">cleanup</a>:", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ut_release_mutex\">acpi_ut_release_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_update_gpes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  table_owner_id      - ID of the newly-loaded ACPI table</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Check for new GPE methods (_Lxx/_Exx) made available as a</span>", 
"<span class=\"comment\"> *              result of a Load() or load_table() operation. If new GPE</span>", 
"<span class=\"comment\"> *              methods have been installed, register the new methods and</span>", 
"<span class=\"comment\"> *              enable and runtime GPEs that are associated with them.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ev_update_gpes\">acpi_ev_update_gpes</a>(<a class=\"id\" href=\"#acpi_owner_id\">acpi_owner_id</a> <a class=\"id\" href=\"#table_owner_id\">table_owner_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_xrupt_info\">acpi_gpe_xrupt_info</a> *<a class=\"id\" href=\"#gpe_xrupt_info\">gpe_xrupt_info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_block_info\">acpi_gpe_block_info</a> *<a class=\"id\" href=\"#gpe_block\">gpe_block</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_walk_info\">acpi_gpe_walk_info</a> <a class=\"id\" href=\"#walk_info\">walk_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) Find any _Lxx/_Exx GPE methods that have just been loaded.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Any GPEs that correspond to new _Lxx/_Exx methods are immediately</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * enabled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Examine the namespace underneath each gpe_device within the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * gpe_block lists.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_acquire_mutex\">acpi_ut_acquire_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_EVENTS\">ACPI_MTX_EVENTS</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#walk_info\">walk_info</a>.<a class=\"id\" href=\"#owner_id\">owner_id</a> = <a class=\"id\" href=\"#table_owner_id\">table_owner_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#walk_info\">walk_info</a>.<a class=\"id\" href=\"#execute_by_owner_id\">execute_by_owner_id</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#walk_info\">walk_info</a>.<a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#walk_info\">walk_info</a>.<a class=\"id\" href=\"#enable_this_gpe\">enable_this_gpe</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Walk the interrupt level descriptor list */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpe_xrupt_info\">gpe_xrupt_info</a> = <a class=\"id\" href=\"#acpi_gbl_gpe_xrupt_list_head\">acpi_gbl_gpe_xrupt_list_head</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#gpe_xrupt_info\">gpe_xrupt_info</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Walk all Gpe Blocks attached to this interrupt level */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_block\">gpe_block</a> = <a class=\"id\" href=\"#gpe_xrupt_info\">gpe_xrupt_info</a>-><a class=\"id\" href=\"#gpe_block_list_head\">gpe_block_list_head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#gpe_block\">gpe_block</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_info\">walk_info</a>.<a class=\"id\" href=\"#gpe_block\">gpe_block</a> = <a class=\"id\" href=\"#gpe_block\">gpe_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_info\">walk_info</a>.<a class=\"id\" href=\"#gpe_device\">gpe_device</a> = <a class=\"id\" href=\"#gpe_block\">gpe_block</a>-><a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_walk_namespace\">acpi_ns_walk_namespace</a>(<a class=\"id\" href=\"#ACPI_TYPE_METHOD\">ACPI_TYPE_METHOD</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_info\">walk_info</a>.<a class=\"id\" href=\"#gpe_device\">gpe_device</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_UINT32_MAX\">ACPI_UINT32_MAX</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_NS_WALK_NO_UNLOCK\">ACPI_NS_WALK_NO_UNLOCK</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ev_match_gpe_method\">acpi_ev_match_gpe_method</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#walk_info\">walk_info</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_EXCEPTION\">ACPI_EXCEPTION</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"While decoding _Lxx/_Exx methods\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_block\">gpe_block</a> = <a class=\"id\" href=\"#gpe_block\">gpe_block</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_xrupt_info\">gpe_xrupt_info</a> = <a class=\"id\" href=\"#gpe_xrupt_info\">gpe_xrupt_info</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#walk_info\">walk_info</a>.<a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_INFO\">ACPI_INFO</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Enabled %u new GPEs\", <a class=\"id\" href=\"#walk_info\">walk_info</a>.<a class=\"id\" href=\"#count\">count</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ut_release_mutex\">acpi_ut_release_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_EVENTS\">ACPI_MTX_EVENTS</a>);", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_match_gpe_method</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Callback from walk_namespace</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Called from acpi_walk_namespace. Expects each object to be a</span>", 
"<span class=\"comment\"> *              control method under the _GPE portion of the namespace.</span>", 
"<span class=\"comment\"> *              Extract the name and GPE type from the object, saving this</span>", 
"<span class=\"comment\"> *              information for quick lookup during GPE dispatch. Allows a</span>", 
"<span class=\"comment\"> *              per-owner_id evaluation if execute_by_owner_id is TRUE in the</span>", 
"<span class=\"comment\"> *              walk_info parameter block.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *              The name of each GPE control method is of the form:</span>", 
"<span class=\"comment\"> *              \"_Lxx\" or \"_Exx\", where:</span>", 
"<span class=\"comment\"> *                  L      - means that the GPE is level triggered</span>", 
"<span class=\"comment\"> *                  E      - means that the GPE is edge triggered</span>", 
"<span class=\"comment\"> *                  xx     - is the GPE number [in HEX]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If walk_info-&gt;execute_by_owner_id is TRUE, we only execute examine GPE methods</span>", 
"<span class=\"comment\"> *    with that owner.</span>", 
"<span class=\"comment\"> * If walk_info-&gt;enable_this_gpe is TRUE, the GPE that is referred to by a GPE</span>", 
"<span class=\"comment\"> *    method is immediately enabled (Used for Load/load_table operators)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ev_match_gpe_method\">acpi_ev_match_gpe_method</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#obj_handle\">obj_handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#level\">level</a>, void *<a class=\"id\" href=\"#context\">context</a>, void **<a class=\"id\" href=\"#return_value\">return_value</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#method_node\">method_node</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a>, <a class=\"id\" href=\"#obj_handle\">obj_handle</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_walk_info\">acpi_gpe_walk_info</a> *<a class=\"id\" href=\"#walk_info\">walk_info</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(struct <a class=\"id\" href=\"#acpi_gpe_walk_info\">acpi_gpe_walk_info</a>, <a class=\"id\" href=\"#context\">context</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_event_info\">acpi_gpe_event_info</a> *<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#gpe_device\">gpe_device</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#gpe_number\">gpe_number</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#ACPI_NAME_SIZE\">ACPI_NAME_SIZE</a> + 1];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ev_match_gpe_method\">ev_match_gpe_method</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if requested owner_id matches this owner_id */</span>", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#walk_info\">walk_info</a>-><a class=\"id\" href=\"#execute_by_owner_id\">execute_by_owner_id</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#method_node\">method_node</a>-><a class=\"id\" href=\"#owner_id\">owner_id</a> != <a class=\"id\" href=\"#walk_info\">walk_info</a>-><a class=\"id\" href=\"#owner_id\">owner_id</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Match and decode the _Lxx and _Exx GPE method names</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) Extract the method name and null terminate it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MOVE_32_TO_32\">ACPI_MOVE_32_TO_32</a>(<a class=\"id\" href=\"#name\">name</a>, &amp;<a class=\"id\" href=\"#method_node\">method_node</a>-><a class=\"id\" href=\"#name\">name</a>.<a class=\"id\" href=\"#integer\">integer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#ACPI_NAME_SIZE\">ACPI_NAME_SIZE</a>] = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 2) Name must begin with an underscore */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#name\">name</a>[0] != '_') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);<span class=\"ts\"/><span class=\"comment\">/* Ignore this method */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 3) Edge/Level determination is based on the 2nd character</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    of the method name</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#name\">name</a>[1]) {", 
"<span class=\"ts\"/>case 'L':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ACPI_GPE_LEVEL_TRIGGERED\">ACPI_GPE_LEVEL_TRIGGERED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case 'E':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ACPI_GPE_EDGE_TRIGGERED\">ACPI_GPE_EDGE_TRIGGERED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Unknown method type, just ignore it */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_LOAD\">ACPI_DB_LOAD</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Ignoring unknown GPE method type: %s \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"(name not of form _Lxx or _Exx)\", <a class=\"id\" href=\"#name\">name</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 4) The last two characters of the name are the hex GPE Number */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpe_number\">gpe_number</a> = <a class=\"id\" href=\"#ACPI_STRTOUL\">ACPI_STRTOUL</a>(&amp;<a class=\"id\" href=\"#name\">name</a>[2], <a class=\"id\" href=\"#NULL\">NULL</a>, 16);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gpe_number\">gpe_number</a> == <a class=\"id\" href=\"#ACPI_UINT32_MAX\">ACPI_UINT32_MAX</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Conversion failed; invalid method, just ignore it */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_LOAD\">ACPI_DB_LOAD</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Could not extract GPE number from name: %s \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"(name is not of form _Lxx or _Exx)\", <a class=\"id\" href=\"#name\">name</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ensure that we have a valid GPE number for this GPE block */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ev_low_get_gpe_info\">acpi_ev_low_get_gpe_info</a>(<a class=\"id\" href=\"#gpe_number\">gpe_number</a>, <a class=\"id\" href=\"#walk_info\">walk_info</a>-><a class=\"id\" href=\"#gpe_block\">gpe_block</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This gpe_number is not valid for this GPE block, just ignore it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * However, it may be valid for a different GPE block, since GPE0</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and GPE1 methods both appear under \\_GPE.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_GPE_DISPATCH_MASK\">ACPI_GPE_DISPATCH_MASK</a>) ==", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_GPE_DISPATCH_HANDLER\">ACPI_GPE_DISPATCH_HANDLER</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If there is already a handler, ignore this GPE method */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_GPE_DISPATCH_MASK\">ACPI_GPE_DISPATCH_MASK</a>) ==", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_GPE_DISPATCH_METHOD\">ACPI_GPE_DISPATCH_METHOD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If there is already a method, ignore this method. But check</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for a type mismatch (if both the _Lxx AND _Exx exist)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> != (<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_GPE_XRUPT_TYPE_MASK\">ACPI_GPE_XRUPT_TYPE_MASK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"For GPE 0x%.2X, found both _L%2.2X and _E%2.2X methods\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#gpe_number\">gpe_number</a>, <a class=\"id\" href=\"#gpe_number\">gpe_number</a>, <a class=\"id\" href=\"#gpe_number\">gpe_number</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Add the GPE information from above to the gpe_event_info block for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * use during dispatch of this GPE.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#flags\">flags</a> |= (<a class=\"id\" href=\"#u8\">u8</a>)(<a class=\"id\" href=\"#type\">type</a> | <a class=\"id\" href=\"#ACPI_GPE_DISPATCH_METHOD\">ACPI_GPE_DISPATCH_METHOD</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#dispatch\">dispatch</a>.<a class=\"id\" href=\"#method_node\">method_node</a> = <a class=\"id\" href=\"#method_node\">method_node</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Enable this GPE if requested. This only happens when during the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * execution of a Load or load_table operator. We have found a new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * GPE method and want to immediately enable the GPE if it is a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * runtime GPE.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#walk_info\">walk_info</a>-><a class=\"id\" href=\"#enable_this_gpe\">enable_this_gpe</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_info\">walk_info</a>-><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_device\">gpe_device</a> = <a class=\"id\" href=\"#walk_info\">walk_info</a>-><a class=\"id\" href=\"#gpe_device\">gpe_device</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#gpe_device\">gpe_device</a> == <a class=\"id\" href=\"#acpi_gbl_fadt_gpe_device\">acpi_gbl_fadt_gpe_device</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_device\">gpe_device</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_enable_gpe\">acpi_enable_gpe</a>(<a class=\"id\" href=\"#gpe_device\">gpe_device</a>, <a class=\"id\" href=\"#gpe_number\">gpe_number</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_EXCEPTION\">ACPI_EXCEPTION</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Could not enable GPE 0x%02X\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_number\">gpe_number</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_LOAD\">ACPI_DB_LOAD</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Registered GPE method %s as GPE number 0x%.2X\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#gpe_number\">gpe_number</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
];
xr_frag_insert('l/39/fc4bbc4b5ca1139bf0940006aecca05105d414.xr', __xr_tmp);
