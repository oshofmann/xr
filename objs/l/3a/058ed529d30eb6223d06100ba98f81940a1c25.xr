var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> != <a class=\"id\" href=\"#XATTR_CAPS_SZ_2\">XATTR_CAPS_SZ_2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tocopy\">tocopy</a> = <a class=\"id\" href=\"#VFS_CAP_U32_2\">VFS_CAP_U32_2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CAP_FOR_EACH_U32\">CAP_FOR_EACH_U32</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#tocopy\">tocopy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_caps\">cpu_caps</a>-><a class=\"id\" href=\"#permitted\">permitted</a>.<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#caps\">caps</a>.<a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#permitted\">permitted</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_caps\">cpu_caps</a>-><a class=\"id\" href=\"#inheritable\">inheritable</a>.<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#caps\">caps</a>.<a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#inheritable\">inheritable</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Attempt to get the on-exec apply capability sets for an executable file from</span>", 
"<span class=\"comment\"> * its xattrs and, if present, apply them to the proposed credentials being</span>", 
"<span class=\"comment\"> * constructed by execve().</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#get_file_caps\">get_file_caps</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>, <a class=\"id\" href=\"#bool\">bool</a> *<a class=\"id\" href=\"#effective\">effective</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_vfs_cap_data\">cpu_vfs_cap_data</a> <a class=\"id\" href=\"#vcaps\">vcaps</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm_clear_caps\">bprm_clear_caps</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#file_caps_enabled\">file_caps_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_vfsmnt\">f_vfsmnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &amp; <a class=\"id\" href=\"#MNT_NOSUID\">MNT_NOSUID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_dentry\">f_dentry</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#get_vfs_caps_from_disk\">get_vfs_caps_from_disk</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, &amp;<a class=\"id\" href=\"#vcaps\">vcaps</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"%s: get_vfs_caps_from_disk returned %d for %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#filename\">filename</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#rc\">rc</a> == -<a class=\"id\" href=\"#ENODATA\">ENODATA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#bprm_caps_from_vfs_caps\">bprm_caps_from_vfs_caps</a>(&amp;<a class=\"id\" href=\"#vcaps\">vcaps</a>, <a class=\"id\" href=\"#bprm\">bprm</a>, <a class=\"id\" href=\"#effective\">effective</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"%s: cap_from_disk returned %d for %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#filename\">filename</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bprm_clear_caps\">bprm_clear_caps</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cap_bprm_set_creds - Set up the proposed credentials for execve().</span>", 
"<span class=\"comment\"> * @bprm: The execution parameters, including the proposed creds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Set up the proposed credentials for a new execution context being</span>", 
"<span class=\"comment\"> * constructed by execve().  The proposed creds in @bprm-&gt;cred is altered,</span>", 
"<span class=\"comment\"> * which won't take effect immediately.  Returns 0 if successful, -ve on error.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cap_bprm_set_creds\">cap_bprm_set_creds</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cred\">cred</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#effective\">effective</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#effective\">effective</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_file_caps\">get_file_caps</a>(<a class=\"id\" href=\"#bprm\">bprm</a>, &amp;<a class=\"id\" href=\"#effective\">effective</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#issecure\">issecure</a>(<a class=\"id\" href=\"#SECURE_NOROOT\">SECURE_NOROOT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the legacy file capability is set, then don't set privs</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for a setuid root binary run by a non-root user.  Do set it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for a root user just to cause least surprise to an admin.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#effective\">effective</a> && <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#uid\">uid</a> != 0 && <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#euid\">euid</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warn_setuid_and_fcaps_mixed\">warn_setuid_and_fcaps_mixed</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#filename\">filename</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#skip\">skip</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * To support inheritance of root-permissions and suid-root</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * executables under compatibility mode, we override the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * capability sets for the file.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If only the real uid is 0, we do not set the effective bit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#euid\">euid</a> == 0 || <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#uid\">uid</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* pP' = (cap_bset &amp; ~0) | (pI &amp; ~0) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a> = <a class=\"id\" href=\"#cap_combine\">cap_combine</a>(<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#cap_bset\">cap_bset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#cap_inheritable\">cap_inheritable</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#euid\">euid</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#effective\">effective</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#skip\">skip</a>:", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't let someone trace a set[ug]id/setpcap binary with the revised</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * credentials unless they have the appropriate permit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#euid\">euid</a> != <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#uid\">uid</a> ||", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#egid\">egid</a> != <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#gid\">gid</a> ||", 
"<span class=\"ts\"/>     !<a class=\"id\" href=\"#cap_issubset\">cap_issubset</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>, <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>)) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#unsafe\">unsafe</a> &amp; ~<a class=\"id\" href=\"#LSM_UNSAFE_PTRACE_CAP\">LSM_UNSAFE_PTRACE_CAP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* downgrade; they get no more than they had, and maybe less */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SETUID\">CAP_SETUID</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#euid\">euid</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#uid\">uid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#egid\">egid</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#gid\">gid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a> = <a class=\"id\" href=\"#cap_intersect\">cap_intersect</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#suid\">suid</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fsuid\">fsuid</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#euid\">euid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#sgid\">sgid</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fsgid\">fsgid</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#egid\">egid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* For init, we want to retain the capabilities set in the initial</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * task.  Thus we skip the usual capability rules</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_global_init\">is_global_init</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#effective\">effective</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_effective\">cap_effective</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cap_clear\">cap_clear</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_effective\">cap_effective</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cap_effective\">cap_effective</a> = <a class=\"id\" href=\"#effective\">effective</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Audit candidate if current-&gt;cap_effective is set</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We do not bother to audit if 3 things are true:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   1) cap_effective has all caps</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   2) we are root</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   3) root is supposed to have all caps (SECURE_NOROOT)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since this is just a normal root execing a process.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Number 1 above might fail if you don't have a full bset, but I think</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that is interesting information to audit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cap_isclear\">cap_isclear</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_effective\">cap_effective</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cap_issubset\">cap_issubset</a>(<a class=\"id\" href=\"#CAP_FULL_SET\">CAP_FULL_SET</a>, <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_effective\">cap_effective</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#euid\">euid</a> != 0 || <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#uid\">uid</a> != 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#issecure\">issecure</a>(<a class=\"id\" href=\"#SECURE_NOROOT\">SECURE_NOROOT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#audit_log_bprm_fcaps\">audit_log_bprm_fcaps</a>(<a class=\"id\" href=\"#bprm\">bprm</a>, <a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#securebits\">securebits</a> &= ~<a class=\"id\" href=\"#issecure_mask\">issecure_mask</a>(<a class=\"id\" href=\"#SECURE_KEEP_CAPS\">SECURE_KEEP_CAPS</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cap_bprm_secureexec - Determine whether a secure execution is required</span>", 
"<span class=\"comment\"> * @bprm: The execution parameters</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Determine whether a secure execution is required, return 1 if it is, and 0</span>", 
"<span class=\"comment\"> * if it is not.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The credentials have been committed by this point, and so are no longer</span>", 
"<span class=\"comment\"> * available through @bprm-&gt;cred.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cap_bprm_secureexec\">cap_bprm_secureexec</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#uid\">uid</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cap_effective\">cap_effective</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cap_isclear\">cap_isclear</a>(<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#euid\">euid</a> != <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#uid\">uid</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#egid\">egid</a> != <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#gid\">gid</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cap_inode_setxattr - Determine whether an xattr may be altered</span>", 
"<span class=\"comment\"> * @dentry: The inode/dentry being altered</span>", 
"<span class=\"comment\"> * @name: The name of the xattr to be changed</span>", 
"<span class=\"comment\"> * @value: The value that the xattr will be changed to</span>", 
"<span class=\"comment\"> * @size: The size of value</span>", 
"<span class=\"comment\"> * @flags: The replacement flag</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Determine whether an xattr may be altered or set on an inode, returning 0 if</span>", 
"<span class=\"comment\"> * permission is granted, -ve if denied.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is used to make sure security xattrs don't get updated or set by those</span>", 
"<span class=\"comment\"> * who aren't privileged to do so.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cap_inode_setxattr\">cap_inode_setxattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const void *<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#XATTR_NAME_CAPS\">XATTR_NAME_CAPS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SETFCAP\">CAP_SETFCAP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#XATTR_SECURITY_PREFIX\">XATTR_SECURITY_PREFIX</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     sizeof(<a class=\"id\" href=\"#XATTR_SECURITY_PREFIX\">XATTR_SECURITY_PREFIX</a>) - 1) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cap_inode_removexattr - Determine whether an xattr may be removed</span>", 
"<span class=\"comment\"> * @dentry: The inode/dentry being altered</span>", 
"<span class=\"comment\"> * @name: The name of the xattr to be changed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Determine whether an xattr may be removed from an inode, returning 0 if</span>", 
"<span class=\"comment\"> * permission is granted, -ve if denied.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is used to make sure security xattrs don't get removed by those who</span>", 
"<span class=\"comment\"> * aren't privileged to remove them.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cap_inode_removexattr\">cap_inode_removexattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#XATTR_NAME_CAPS\">XATTR_NAME_CAPS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SETFCAP\">CAP_SETFCAP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#XATTR_SECURITY_PREFIX\">XATTR_SECURITY_PREFIX</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     sizeof(<a class=\"id\" href=\"#XATTR_SECURITY_PREFIX\">XATTR_SECURITY_PREFIX</a>) - 1) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cap_emulate_setxuid() fixes the effective / permitted capabilities of</span>", 
"<span class=\"comment\"> * a process after a call to setuid, setreuid, or setresuid.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  1) When set*uiding _from_ one of {r,e,s}uid == 0 _to_ all of</span>", 
"<span class=\"comment\"> *  {r,e,s}uid != 0, the permitted and effective capabilities are</span>", 
"<span class=\"comment\"> *  cleared.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  2) When set*uiding _from_ euid == 0 _to_ euid != 0, the effective</span>", 
"<span class=\"comment\"> *  capabilities of the process are cleared.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  3) When set*uiding _from_ euid != 0 _to_ euid == 0, the effective</span>", 
"<span class=\"comment\"> *  capabilities are set to the permitted capabilities.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  fsuid is handled elsewhere. fsuid == 0 and {r,e,s}uid!= 0 should</span>", 
"<span class=\"comment\"> *  never happen.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  -astor</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cevans - New behaviour, Oct '99</span>", 
"<span class=\"comment\"> * A process may, via prctl(), elect to keep its capabilities when it</span>", 
"<span class=\"comment\"> * calls setuid() and switches away from uid==0. Both permitted and</span>", 
"<span class=\"comment\"> * effective sets will be retained.</span>", 
"<span class=\"comment\"> * Without this change, it was impossible for a daemon to drop only some</span>", 
"<span class=\"comment\"> * of its privilege. The call to setuid(!=0) would drop all privileges!</span>", 
"<span class=\"comment\"> * Keeping uid 0 is not an option because uid 0 owns too many vital</span>", 
"<span class=\"comment\"> * files..</span>", 
"<span class=\"comment\"> * Thanks to Olaf Kirch and Peter Benie for spotting this.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cap_emulate_setxuid\">cap_emulate_setxuid</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#uid\">uid</a> == 0 || <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#euid\">euid</a> == 0 || <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#suid\">suid</a> == 0) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#uid\">uid</a> != 0 && <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#euid\">euid</a> != 0 && <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#suid\">suid</a> != 0) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#issecure\">issecure</a>(<a class=\"id\" href=\"#SECURE_KEEP_CAPS\">SECURE_KEEP_CAPS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cap_clear\">cap_clear</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cap_clear\">cap_clear</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_effective\">cap_effective</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#euid\">euid</a> == 0 && <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#euid\">euid</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cap_clear\">cap_clear</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_effective\">cap_effective</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#euid\">euid</a> != 0 && <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#euid\">euid</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_effective\">cap_effective</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cap_task_fix_setuid - Fix up the results of setuid() call</span>", 
"<span class=\"comment\"> * @new: The proposed credentials</span>", 
"<span class=\"comment\"> * @old: The current task's current credentials</span>", 
"<span class=\"comment\"> * @flags: Indications of what has changed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Fix up the results of setuid() call before the credential changes are</span>", 
"<span class=\"comment\"> * actually applied, returning 0 to grant the changes, -ve to deny them.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cap_task_fix_setuid\">cap_task_fix_setuid</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#flags\">flags</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#LSM_SETID_RE\">LSM_SETID_RE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#LSM_SETID_ID\">LSM_SETID_ID</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#LSM_SETID_RES\">LSM_SETID_RES</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* juggle the capabilities to follow [RES]UID changes unless</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * otherwise suppressed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#issecure\">issecure</a>(<a class=\"id\" href=\"#SECURE_NO_SETUID_FIXUP\">SECURE_NO_SETUID_FIXUP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cap_emulate_setxuid\">cap_emulate_setxuid</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#LSM_SETID_FS\">LSM_SETID_FS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* juggle the capabilties to follow FSUID changes, unless</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * otherwise suppressed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * FIXME - is fsuser used for all CAP_FS_MASK capabilities?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *          if not, we might be a bit too harsh here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#issecure\">issecure</a>(<a class=\"id\" href=\"#SECURE_NO_SETUID_FIXUP\">SECURE_NO_SETUID_FIXUP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#fsuid\">fsuid</a> == 0 && <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fsuid\">fsuid</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_effective\">cap_effective</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cap_drop_fs_set\">cap_drop_fs_set</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_effective\">cap_effective</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#fsuid\">fsuid</a> != 0 && <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fsuid\">fsuid</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_effective\">cap_effective</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cap_raise_fs_set\">cap_raise_fs_set</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_effective\">cap_effective</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Rationale: code calling task_setscheduler, task_setioprio, and</span>", 
"<span class=\"comment\"> * task_setnice, assumes that</span>", 
"<span class=\"comment\"> *   . if capable(cap_sys_nice), then those actions should be allowed</span>", 
"<span class=\"comment\"> *   . if not capable(cap_sys_nice), but acting on your own processes,</span>", 
"<span class=\"comment\"> *   <span class=\"ts\"/>then those actions should be allowed</span>", 
"<span class=\"comment\"> * This is insufficient now since you can call code without suid, but</span>", 
"<span class=\"comment\"> * yet with increased caps.</span>", 
"<span class=\"comment\"> * So we check for increased caps on the target process.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cap_safe_nice\">cap_safe_nice</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_subset\">is_subset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#is_subset\">is_subset</a> = <a class=\"id\" href=\"#cap_issubset\">cap_issubset</a>(<a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#current_cred\">current_cred</a>()-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_subset\">is_subset</a> && !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_NICE\">CAP_SYS_NICE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cap_task_setscheduler - Detemine if scheduler policy change is permitted</span>", 
"<span class=\"comment\"> * @p: The task to affect</span>", 
"<span class=\"comment\"> * @policy: The policy to effect</span>", 
"<span class=\"comment\"> * @lp: The parameters to the scheduling policy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Detemine if the requested scheduler policy change is permitted for the</span>", 
"<span class=\"comment\"> * specified task, returning 0 if permission is granted, -ve if denied.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cap_task_setscheduler\">cap_task_setscheduler</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#policy\">policy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#sched_param\">sched_param</a> *<a class=\"id\" href=\"#lp\">lp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_safe_nice\">cap_safe_nice</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cap_task_ioprio - Detemine if I/O priority change is permitted</span>", 
"<span class=\"comment\"> * @p: The task to affect</span>", 
"<span class=\"comment\"> * @ioprio: The I/O priority to set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Detemine if the requested I/O priority change is permitted for the specified</span>", 
"<span class=\"comment\"> * task, returning 0 if permission is granted, -ve if denied.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cap_task_setioprio\">cap_task_setioprio</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#ioprio\">ioprio</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_safe_nice\">cap_safe_nice</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cap_task_ioprio - Detemine if task priority change is permitted</span>", 
"<span class=\"comment\"> * @p: The task to affect</span>", 
"<span class=\"comment\"> * @nice: The nice value to set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Detemine if the requested task priority change is permitted for the</span>", 
"<span class=\"comment\"> * specified task, returning 0 if permission is granted, -ve if denied.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cap_task_setnice\">cap_task_setnice</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#nice\">nice</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_safe_nice\">cap_safe_nice</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Implement PR_CAPBSET_DROP.  Attempt to remove the specified capability from</span>", 
"<span class=\"comment\"> * the current task's bounding set.  Returns 0 on success, -ve on error.</span>", 
"<span class=\"comment\"> */</span>", 
"static long <a class=\"id\" href=\"#cap_prctl_drop\">cap_prctl_drop</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, unsigned long <a class=\"id\" href=\"#cap\">cap</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SETPCAP\">CAP_SETPCAP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cap_valid\">cap_valid</a>(<a class=\"id\" href=\"#cap\">cap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cap_lower\">cap_lower</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_bset\">cap_bset</a>, <a class=\"id\" href=\"#cap\">cap</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cap_task_prctl - Implement process control functions for this security module</span>", 
"<span class=\"comment\"> * @option: The process control function requested</span>", 
"<span class=\"comment\"> * @arg2, @arg3, @arg4, @arg5: The argument data for this function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allow process control functions (sys_prctl()) to alter capabilities; may</span>", 
"<span class=\"comment\"> * also deny access to other functions not otherwise implemented here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 or +ve on success, -ENOSYS if this function is not implemented</span>", 
"<span class=\"comment\"> * here, other -ve on error.  If -ENOSYS is returned, sys_prctl() and other LSM</span>", 
"<span class=\"comment\"> * modules will consider performing the function.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cap_task_prctl\">cap_task_prctl</a>(int <a class=\"id\" href=\"#option\">option</a>, unsigned long <a class=\"id\" href=\"#arg2\">arg2</a>, unsigned long <a class=\"id\" href=\"#arg3\">arg3</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#arg4\">arg4</a>, unsigned long <a class=\"id\" href=\"#arg5\">arg5</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#prepare_creds\">prepare_creds</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#option\">option</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PR_CAPBSET_READ\">PR_CAPBSET_READ</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cap_valid\">cap_valid</a>(<a class=\"id\" href=\"#arg2\">arg2</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = !!<a class=\"id\" href=\"#cap_raised\">cap_raised</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_bset\">cap_bset</a>, <a class=\"id\" href=\"#arg2\">arg2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_change\">no_change</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PR_CAPBSET_DROP\">PR_CAPBSET_DROP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#cap_prctl_drop\">cap_prctl_drop</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#arg2\">arg2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#changed\">changed</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The next four prctl's remain to assist with transitioning a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * system from legacy UID=0 based privilege (when filesystem</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * capabilities are not in use) to a system using filesystem</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * capabilities only - as the POSIX.1e draft intended.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  PR_SET_SECUREBITS =</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      issecure_mask(SECURE_KEEP_CAPS_LOCKED)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    | issecure_mask(SECURE_NOROOT)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    | issecure_mask(SECURE_NOROOT_LOCKED)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    | issecure_mask(SECURE_NO_SETUID_FIXUP)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    | issecure_mask(SECURE_NO_SETUID_FIXUP_LOCKED)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will ensure that the current process and all of its</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * children will be locked into a pure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * capability-based-privilege environment.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PR_SET_SECUREBITS\">PR_SET_SECUREBITS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((((<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#securebits\">securebits</a> &amp; <a class=\"id\" href=\"#SECURE_ALL_LOCKS\">SECURE_ALL_LOCKS</a>) >> 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>     &amp; (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#securebits\">securebits</a> ^ <a class=\"id\" href=\"#arg2\">arg2</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*[1]*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>    || ((<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#securebits\">securebits</a> &amp; <a class=\"id\" href=\"#SECURE_ALL_LOCKS\">SECURE_ALL_LOCKS</a> &amp; ~<a class=\"id\" href=\"#arg2\">arg2</a>))<span class=\"ts\"/><span class=\"comment\">/*[2]*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>    || (<a class=\"id\" href=\"#arg2\">arg2</a> &amp; ~(<a class=\"id\" href=\"#SECURE_ALL_LOCKS\">SECURE_ALL_LOCKS</a> | <a class=\"id\" href=\"#SECURE_ALL_BITS\">SECURE_ALL_BITS</a>))<span class=\"ts\"/><span class=\"comment\">/*[3]*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>    || (<a class=\"id\" href=\"#cap_capable\">cap_capable</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#current_cred\">current_cred</a>(), <a class=\"id\" href=\"#CAP_SETPCAP\">CAP_SETPCAP</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#SECURITY_CAP_AUDIT\">SECURITY_CAP_AUDIT</a>) != 0)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*[4]*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * [1] no changing of bits that are locked</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * [2] no unlocking of locks</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * [3] no setting of unsupported bits</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * [4] doing anything requires privilege (go read about</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *     the \"sendmail capabilities bug\")</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>    )", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cannot change a locked bit */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#securebits\">securebits</a> = <a class=\"id\" href=\"#arg2\">arg2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#changed\">changed</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PR_GET_SECUREBITS\">PR_GET_SECUREBITS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#securebits\">securebits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_change\">no_change</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PR_GET_KEEPCAPS\">PR_GET_KEEPCAPS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#issecure\">issecure</a>(<a class=\"id\" href=\"#SECURE_KEEP_CAPS\">SECURE_KEEP_CAPS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_change\">no_change</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PR_SET_KEEPCAPS\">PR_SET_KEEPCAPS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#arg2\">arg2</a> &gt; 1) <span class=\"comment\">/* Note, we rely on arg2 being unsigned here */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#issecure\">issecure</a>(<a class=\"id\" href=\"#SECURE_KEEP_CAPS_LOCKED\">SECURE_KEEP_CAPS_LOCKED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#arg2\">arg2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#securebits\">securebits</a> |= <a class=\"id\" href=\"#issecure_mask\">issecure_mask</a>(<a class=\"id\" href=\"#SECURE_KEEP_CAPS\">SECURE_KEEP_CAPS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#securebits\">securebits</a> &= ~<a class=\"id\" href=\"#issecure_mask\">issecure_mask</a>(<a class=\"id\" href=\"#SECURE_KEEP_CAPS\">SECURE_KEEP_CAPS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#changed\">changed</a>;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No functionality available - continue with default */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Functionality provided */</span>", 
"<a class=\"id\" href=\"#changed\">changed</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#commit_creds\">commit_creds</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<a class=\"id\" href=\"#no_change\">no_change</a>:", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#abort_creds\">abort_creds</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cap_syslog - Determine whether syslog function is permitted</span>", 
"<span class=\"comment\"> * @type: Function requested</span>", 
"<span class=\"comment\"> * @from_file: Whether this request came from an open file (i.e. /proc)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Determine whether the current process is permitted to use a particular</span>", 
"<span class=\"comment\"> * syslog function, returning 0 if permission is granted, -ve if not.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cap_syslog\">cap_syslog</a>(int <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#from_file\">from_file</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#SYSLOG_ACTION_OPEN\">SYSLOG_ACTION_OPEN</a> && <a class=\"id\" href=\"#from_file\">from_file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#SYSLOG_ACTION_READ_ALL\">SYSLOG_ACTION_READ_ALL</a> &&", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#SYSLOG_ACTION_SIZE_BUFFER\">SYSLOG_ACTION_SIZE_BUFFER</a>) && !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cap_vm_enough_memory - Determine whether a new virtual mapping is permitted</span>", 
"<span class=\"comment\"> * @mm: The VM space in which the new mapping is to be made</span>", 
"<span class=\"comment\"> * @pages: The size of the mapping</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Determine whether the allocation of a new virtual mapping by the current</span>", 
"<span class=\"comment\"> * task is permitted, returning 0 if permission is granted, -ve if not.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cap_vm_enough_memory\">cap_vm_enough_memory</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, long <a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cap_sys_admin\">cap_sys_admin</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cap_capable\">cap_capable</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#current_cred\">current_cred</a>(), <a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SECURITY_CAP_NOAUDIT\">SECURITY_CAP_NOAUDIT</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cap_sys_admin\">cap_sys_admin</a> = 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__vm_enough_memory\">__vm_enough_memory</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#cap_sys_admin\">cap_sys_admin</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cap_file_mmap - check if able to map given addr</span>", 
"<span class=\"comment\"> * @file: unused</span>", 
"<span class=\"comment\"> * @reqprot: unused</span>", 
"<span class=\"comment\"> * @prot: unused</span>", 
"<span class=\"comment\"> * @flags: unused</span>", 
"<span class=\"comment\"> * @addr: address attempting to be mapped</span>", 
"<span class=\"comment\"> * @addr_only: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the process is attempting to map memory below dac_mmap_min_addr they need</span>", 
"<span class=\"comment\"> * CAP_SYS_RAWIO.  The other parameters to this function are unused by the</span>", 
"<span class=\"comment\"> * capability security module.  Returns 0 if this mapping should be allowed</span>", 
"<span class=\"comment\"> * -EPERM if not.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cap_file_mmap\">cap_file_mmap</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned long <a class=\"id\" href=\"#reqprot\">reqprot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#prot\">prot</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#addr_only\">addr_only</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#dac_mmap_min_addr\">dac_mmap_min_addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cap_capable\">cap_capable</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#current_cred\">current_cred</a>(), <a class=\"id\" href=\"#CAP_SYS_RAWIO\">CAP_SYS_RAWIO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#SECURITY_CAP_AUDIT\">SECURITY_CAP_AUDIT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* set PF_SUPERPRIV if it turns out we allow the low mmap */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_SUPERPRIV\">PF_SUPERPRIV</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
];
xr_frag_insert('l/3a/058ed529d30eb6223d06100ba98f81940a1c25.xr', __xr_tmp);
