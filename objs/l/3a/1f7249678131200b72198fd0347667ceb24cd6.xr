var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sparse memory mappings.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mmzone\">mmzone</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#dma\">dma</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgalloc\">pgalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Permanent SPARSEMEM data:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1) mem_section<span class=\"ts\"/>- memory sections, mem_map's for valid memory</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM_EXTREME\">CONFIG_SPARSEMEM_EXTREME</a>", 
"struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#mem_section\">mem_section</a>[<a class=\"id\" href=\"#NR_SECTION_ROOTS\">NR_SECTION_ROOTS</a>]", 
"<span class=\"ts\"/><a class=\"id\" href=\"#____cacheline_internodealigned_in_smp\">____cacheline_internodealigned_in_smp</a>;", 
"#else", 
"struct <a class=\"id\" href=\"#mem_section\">mem_section</a> <a class=\"id\" href=\"#mem_section\">mem_section</a>[<a class=\"id\" href=\"#NR_SECTION_ROOTS\">NR_SECTION_ROOTS</a>][<a class=\"id\" href=\"#SECTIONS_PER_ROOT\">SECTIONS_PER_ROOT</a>]", 
"<span class=\"ts\"/><a class=\"id\" href=\"#____cacheline_internodealigned_in_smp\">____cacheline_internodealigned_in_smp</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mem_section\">mem_section</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#NODE_NOT_IN_PAGE_FLAGS\">NODE_NOT_IN_PAGE_FLAGS</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If we did not store the node number in the page then we have to</span>", 
"<span class=\"comment\"> * do a lookup in the section_to_node_table in order to find which</span>", 
"<span class=\"comment\"> * node the page belongs to.</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a> <= 256", 
"static <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#section_to_node_table\">section_to_node_table</a>[<a class=\"id\" href=\"#NR_MEM_SECTIONS\">NR_MEM_SECTIONS</a>] <a class=\"id\" href=\"#__cacheline_aligned\">__cacheline_aligned</a>;", 
"#else", 
"static <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#section_to_node_table\">section_to_node_table</a>[<a class=\"id\" href=\"#NR_MEM_SECTIONS\">NR_MEM_SECTIONS</a>] <a class=\"id\" href=\"#__cacheline_aligned\">__cacheline_aligned</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"int <a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#section_to_node_table\">section_to_node_table</a>[<a class=\"id\" href=\"#page_to_section\">page_to_section</a>(<a class=\"id\" href=\"#page\">page</a>)];", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>);", 
"", 
"static void <a class=\"id\" href=\"#set_section_nid\">set_section_nid</a>(unsigned long <a class=\"id\" href=\"#section_nr\">section_nr</a>, int <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#section_to_node_table\">section_to_node_table</a>[<a class=\"id\" href=\"#section_nr\">section_nr</a>] = <a class=\"id\" href=\"#nid\">nid</a>;", 
"}", 
"#else <span class=\"comment\">/* !NODE_NOT_IN_PAGE_FLAGS */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_section_nid\">set_section_nid</a>(unsigned long <a class=\"id\" href=\"#section_nr\">section_nr</a>, int <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM_EXTREME\">CONFIG_SPARSEMEM_EXTREME</a>", 
"static struct <a class=\"id\" href=\"#mem_section\">mem_section</a> <a class=\"id\" href=\"#noinline\">noinline</a> <a class=\"id\" href=\"#__init_refok\">__init_refok</a> *<a class=\"id\" href=\"#sparse_index_alloc\">sparse_index_alloc</a>(int <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#section\">section</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#array_size\">array_size</a> = <a class=\"id\" href=\"#SECTIONS_PER_ROOT\">SECTIONS_PER_ROOT</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   sizeof(struct <a class=\"id\" href=\"#mem_section\">mem_section</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slab_is_available\">slab_is_available</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node_state\">node_state</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#section\">section</a> = <a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(<a class=\"id\" href=\"#array_size\">array_size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#section\">section</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#array_size\">array_size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#section\">section</a> = <a class=\"id\" href=\"#alloc_bootmem_node\">alloc_bootmem_node</a>(<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>), <a class=\"id\" href=\"#array_size\">array_size</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#section\">section</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#section\">section</a>, 0, <a class=\"id\" href=\"#array_size\">array_size</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#section\">section</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#sparse_index_init\">sparse_index_init</a>(unsigned long <a class=\"id\" href=\"#section_nr\">section_nr</a>, int <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#index_init_lock\">index_init_lock</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#SECTION_NR_TO_ROOT\">SECTION_NR_TO_ROOT</a>(<a class=\"id\" href=\"#section_nr\">section_nr</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#section\">section</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_section\">mem_section</a>[<a class=\"id\" href=\"#root\">root</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#section\">section</a> = <a class=\"id\" href=\"#sparse_index_alloc\">sparse_index_alloc</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#section\">section</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This lock keeps two different sections from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reallocating for the same index</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#index_init_lock\">index_init_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_section\">mem_section</a>[<a class=\"id\" href=\"#root\">root</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_section\">mem_section</a>[<a class=\"id\" href=\"#root\">root</a>] = <a class=\"id\" href=\"#section\">section</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#index_init_lock\">index_init_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"#else <span class=\"comment\">/* !SPARSEMEM_EXTREME */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sparse_index_init\">sparse_index_init</a>(unsigned long <a class=\"id\" href=\"#section_nr\">section_nr</a>, int <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Although written for the SPARSEMEM_EXTREME case, this happens</span>", 
"<span class=\"comment\"> * to also work for the flat array case because</span>", 
"<span class=\"comment\"> * NR_SECTION_ROOTS==NR_MEM_SECTIONS.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__section_nr\">__section_nr</a>(struct <a class=\"id\" href=\"#mem_section\">mem_section</a>* <a class=\"id\" href=\"#ms\">ms</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#root_nr\">root_nr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_section\">mem_section</a>* <a class=\"id\" href=\"#root\">root</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#root_nr\">root_nr</a> = 0; <a class=\"id\" href=\"#root_nr\">root_nr</a> &lt; <a class=\"id\" href=\"#NR_SECTION_ROOTS\">NR_SECTION_ROOTS</a>; <a class=\"id\" href=\"#root_nr\">root_nr</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#__nr_to_section\">__nr_to_section</a>(<a class=\"id\" href=\"#root_nr\">root_nr</a> * <a class=\"id\" href=\"#SECTIONS_PER_ROOT\">SECTIONS_PER_ROOT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#root\">root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ms\">ms</a> >= <a class=\"id\" href=\"#root\">root</a>) && (<a class=\"id\" href=\"#ms\">ms</a> &lt; (<a class=\"id\" href=\"#root\">root</a> + <a class=\"id\" href=\"#SECTIONS_PER_ROOT\">SECTIONS_PER_ROOT</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>     break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#root_nr\">root_nr</a> * <a class=\"id\" href=\"#SECTIONS_PER_ROOT\">SECTIONS_PER_ROOT</a>) + (<a class=\"id\" href=\"#ms\">ms</a> - <a class=\"id\" href=\"#root\">root</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * During early boot, before section_mem_map is used for an actual</span>", 
"<span class=\"comment\"> * mem_map, we use section_mem_map to store the section's NUMA</span>", 
"<span class=\"comment\"> * node.  This keeps us from having to use another data structure.  The</span>", 
"<span class=\"comment\"> * node information is cleared just before we store the real mem_map.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#sparse_encode_early_nid\">sparse_encode_early_nid</a>(int <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#nid\">nid</a> << <a class=\"id\" href=\"#SECTION_NID_SHIFT\">SECTION_NID_SHIFT</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sparse_early_nid\">sparse_early_nid</a>(struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#section\">section</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#section\">section</a>-><a class=\"id\" href=\"#section_mem_map\">section_mem_map</a> >> <a class=\"id\" href=\"#SECTION_NID_SHIFT\">SECTION_NID_SHIFT</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Validate the physical addressing limitations of the model */</span>", 
"void <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#mminit_validate_memmodel_limits\">mminit_validate_memmodel_limits</a>(unsigned long *<a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max_sparsemem_pfn\">max_sparsemem_pfn</a> = 1UL << (<a class=\"id\" href=\"#MAX_PHYSMEM_BITS\">MAX_PHYSMEM_BITS</a>-<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Sanity checks - do not allow an architecture to pass</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in larger pfns than the maximum scope of sparsemem:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#start_pfn\">start_pfn</a> &gt; <a class=\"id\" href=\"#max_sparsemem_pfn\">max_sparsemem_pfn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mminit_dprintk\">mminit_dprintk</a>(<a class=\"id\" href=\"#MMINIT_WARNING\">MMINIT_WARNING</a>, \"pfnvalidation\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Start of range %lu -> %lu exceeds SPARSEMEM max %lu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#start_pfn\">start_pfn</a>, *<a class=\"id\" href=\"#end_pfn\">end_pfn</a>, <a class=\"id\" href=\"#max_sparsemem_pfn\">max_sparsemem_pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#start_pfn\">start_pfn</a> = <a class=\"id\" href=\"#max_sparsemem_pfn\">max_sparsemem_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#end_pfn\">end_pfn</a> = <a class=\"id\" href=\"#max_sparsemem_pfn\">max_sparsemem_pfn</a>;", 
"<span class=\"ts\"/>} else if (*<a class=\"id\" href=\"#end_pfn\">end_pfn</a> &gt; <a class=\"id\" href=\"#max_sparsemem_pfn\">max_sparsemem_pfn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mminit_dprintk\">mminit_dprintk</a>(<a class=\"id\" href=\"#MMINIT_WARNING\">MMINIT_WARNING</a>, \"pfnvalidation\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"End of range %lu -> %lu exceeds SPARSEMEM max %lu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#start_pfn\">start_pfn</a>, *<a class=\"id\" href=\"#end_pfn\">end_pfn</a>, <a class=\"id\" href=\"#max_sparsemem_pfn\">max_sparsemem_pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#end_pfn\">end_pfn</a> = <a class=\"id\" href=\"#max_sparsemem_pfn\">max_sparsemem_pfn</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Record a memory area against a node. */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#memory_present\">memory_present</a>(int <a class=\"id\" href=\"#nid\">nid</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> &= <a class=\"id\" href=\"#PAGE_SECTION_MASK\">PAGE_SECTION_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mminit_validate_memmodel_limits\">mminit_validate_memmodel_limits</a>(&amp;<a class=\"id\" href=\"#start\">start</a>, &amp;<a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#pfn\">pfn</a> += <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#section\">section</a> = <a class=\"id\" href=\"#pfn_to_section_nr\">pfn_to_section_nr</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#ms\">ms</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sparse_index_init\">sparse_index_init</a>(<a class=\"id\" href=\"#section\">section</a>, <a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_section_nid\">set_section_nid</a>(<a class=\"id\" href=\"#section\">section</a>, <a class=\"id\" href=\"#nid\">nid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a> = <a class=\"id\" href=\"#__nr_to_section\">__nr_to_section</a>(<a class=\"id\" href=\"#section\">section</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ms\">ms</a>-><a class=\"id\" href=\"#section_mem_map\">section_mem_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a>-><a class=\"id\" href=\"#section_mem_map\">section_mem_map</a> = <a class=\"id\" href=\"#sparse_encode_early_nid\">sparse_encode_early_nid</a>(<a class=\"id\" href=\"#nid\">nid</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SECTION_MARKED_PRESENT\">SECTION_MARKED_PRESENT</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Only used by the i386 NUMA architecures, but relatively</span>", 
"<span class=\"comment\"> * generic code.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#node_memmap_size_bytes\">node_memmap_size_bytes</a>(int <a class=\"id\" href=\"#nid\">nid</a>, unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mminit_validate_memmodel_limits\">mminit_validate_memmodel_limits</a>(&amp;<a class=\"id\" href=\"#start_pfn\">start_pfn</a>, &amp;<a class=\"id\" href=\"#end_pfn\">end_pfn</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#end_pfn\">end_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a> += <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nid\">nid</a> != <a class=\"id\" href=\"#early_pfn_to_nid\">early_pfn_to_nid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn_present\">pfn_present</a>(<a class=\"id\" href=\"#pfn\">pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> += <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_pages\">nr_pages</a> * sizeof(struct <a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Subtle, we encode the real pfn into the mem_map such that</span>", 
"<span class=\"comment\"> * the identity pfn - section_mem_map will return the actual</span>", 
"<span class=\"comment\"> * physical page frame number.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#sparse_encode_mem_map\">sparse_encode_mem_map</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#mem_map\">mem_map</a>, unsigned long <a class=\"id\" href=\"#pnum\">pnum</a>)", 
"{", 
"<span class=\"ts\"/>return (unsigned long)(<a class=\"id\" href=\"#mem_map\">mem_map</a> - (<a class=\"id\" href=\"#section_nr_to_pfn\">section_nr_to_pfn</a>(<a class=\"id\" href=\"#pnum\">pnum</a>)));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Decode mem_map from the coded memmap</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#sparse_decode_mem_map\">sparse_decode_mem_map</a>(unsigned long <a class=\"id\" href=\"#coded_mem_map\">coded_mem_map</a>, unsigned long <a class=\"id\" href=\"#pnum\">pnum</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* mask off the extra low bits of information */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#coded_mem_map\">coded_mem_map</a> &= <a class=\"id\" href=\"#SECTION_MAP_MASK\">SECTION_MAP_MASK</a>;", 
"<span class=\"ts\"/>return ((struct <a class=\"id\" href=\"#page\">page</a> *)<a class=\"id\" href=\"#coded_mem_map\">coded_mem_map</a>) + <a class=\"id\" href=\"#section_nr_to_pfn\">section_nr_to_pfn</a>(<a class=\"id\" href=\"#pnum\">pnum</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#sparse_init_one_section\">sparse_init_one_section</a>(struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#ms\">ms</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pnum\">pnum</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#mem_map\">mem_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#pageblock_bitmap\">pageblock_bitmap</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#present_section\">present_section</a>(<a class=\"id\" href=\"#ms\">ms</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a>-><a class=\"id\" href=\"#section_mem_map\">section_mem_map</a> &= ~<a class=\"id\" href=\"#SECTION_MAP_MASK\">SECTION_MAP_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a>-><a class=\"id\" href=\"#section_mem_map\">section_mem_map</a> |= <a class=\"id\" href=\"#sparse_encode_mem_map\">sparse_encode_mem_map</a>(<a class=\"id\" href=\"#mem_map\">mem_map</a>, <a class=\"id\" href=\"#pnum\">pnum</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SECTION_HAS_MEM_MAP\">SECTION_HAS_MEM_MAP</a>;", 
" <span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a>-><a class=\"id\" href=\"#pageblock_flags\">pageblock_flags</a> = <a class=\"id\" href=\"#pageblock_bitmap\">pageblock_bitmap</a>;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#usemap_size\">usemap_size</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size_bytes\">size_bytes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_bytes\">size_bytes</a> = <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#SECTION_BLOCKFLAGS_BITS\">SECTION_BLOCKFLAGS_BITS</a>, 8) / 8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_bytes\">size_bytes</a> = <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#size_bytes\">size_bytes</a>, sizeof(unsigned long));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#size_bytes\">size_bytes</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_HOTPLUG\">CONFIG_MEMORY_HOTPLUG</a>", 
"static unsigned long *<a class=\"id\" href=\"#__kmalloc_section_usemap\">__kmalloc_section_usemap</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#usemap_size\">usemap_size</a>(), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MEMORY_HOTPLUG */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_HOTREMOVE\">CONFIG_MEMORY_HOTREMOVE</a>", 
"static unsigned long * <a class=\"id\" href=\"#__init\">__init</a>", 
"<a class=\"id\" href=\"#sparse_early_usemaps_alloc_pgdat_section\">sparse_early_usemaps_alloc_pgdat_section</a>(struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#section_nr\">section_nr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A page may contain usemaps for other sections preventing the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page being freed and making a section unremovable while</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * other sections referencing the usemap retmain active. Similarly,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a pgdat can prevent a section being removed. If section A</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * contains a pgdat and section B contains the usemap, both</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sections become inter-dependent. This allocates usemaps</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from the same section as the pgdat where possible to avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this problem.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#section_nr\">section_nr</a> = <a class=\"id\" href=\"#pfn_to_section_nr\">pfn_to_section_nr</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_bootmem_section\">alloc_bootmem_section</a>(<a class=\"id\" href=\"#usemap_size\">usemap_size</a>() * <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#section_nr\">section_nr</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#check_usemap_section_nr\">check_usemap_section_nr</a>(int <a class=\"id\" href=\"#nid\">nid</a>, unsigned long *<a class=\"id\" href=\"#usemap\">usemap</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#usemap_snr\">usemap_snr</a>, <a class=\"id\" href=\"#pgdat_snr\">pgdat_snr</a>;", 
"<span class=\"ts\"/>static unsigned long <a class=\"id\" href=\"#old_usemap_snr\">old_usemap_snr</a> = <a class=\"id\" href=\"#NR_MEM_SECTIONS\">NR_MEM_SECTIONS</a>;", 
"<span class=\"ts\"/>static unsigned long <a class=\"id\" href=\"#old_pgdat_snr\">old_pgdat_snr</a> = <a class=\"id\" href=\"#NR_MEM_SECTIONS\">NR_MEM_SECTIONS</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a> = <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#usemap_nid\">usemap_nid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usemap_snr\">usemap_snr</a> = <a class=\"id\" href=\"#pfn_to_section_nr\">pfn_to_section_nr</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#usemap\">usemap</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdat_snr\">pgdat_snr</a> = <a class=\"id\" href=\"#pfn_to_section_nr\">pfn_to_section_nr</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#usemap_snr\">usemap_snr</a> == <a class=\"id\" href=\"#pgdat_snr\">pgdat_snr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_usemap_snr\">old_usemap_snr</a> == <a class=\"id\" href=\"#usemap_snr\">usemap_snr</a> && <a class=\"id\" href=\"#old_pgdat_snr\">old_pgdat_snr</a> == <a class=\"id\" href=\"#pgdat_snr\">pgdat_snr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* skip redundant message */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_usemap_snr\">old_usemap_snr</a> = <a class=\"id\" href=\"#usemap_snr\">usemap_snr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_pgdat_snr\">old_pgdat_snr</a> = <a class=\"id\" href=\"#pgdat_snr\">pgdat_snr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usemap_nid\">usemap_nid</a> = <a class=\"id\" href=\"#sparse_early_nid\">sparse_early_nid</a>(<a class=\"id\" href=\"#__nr_to_section\">__nr_to_section</a>(<a class=\"id\" href=\"#usemap_snr\">usemap_snr</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#usemap_nid\">usemap_nid</a> != <a class=\"id\" href=\"#nid\">nid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"node %d must be removed before remove section %ld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#usemap_snr\">usemap_snr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There is a circular dependency.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some platforms allow un-removable section because they will just</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * gather other removable sections for dynamic partitioning.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Just notify un-removable section's number here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Section %ld and %ld (node %d)\", <a class=\"id\" href=\"#usemap_snr\">usemap_snr</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#pgdat_snr\">pgdat_snr</a>, <a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a>", 
"<span class=\"ts\"/>       \" have a circular dependency on usemap and pgdat allocations\\n\");", 
"}", 
"#else", 
"static unsigned long * <a class=\"id\" href=\"#__init\">__init</a>", 
"<a class=\"id\" href=\"#sparse_early_usemaps_alloc_pgdat_section\">sparse_early_usemaps_alloc_pgdat_section</a>(struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#check_usemap_section_nr\">check_usemap_section_nr</a>(int <a class=\"id\" href=\"#nid\">nid</a>, unsigned long *<a class=\"id\" href=\"#usemap\">usemap</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MEMORY_HOTREMOVE */</span>", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sparse_early_usemaps_alloc_node\">sparse_early_usemaps_alloc_node</a>(unsigned long**<a class=\"id\" href=\"#usemap_map\">usemap_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#pnum_begin\">pnum_begin</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#pnum_end\">pnum_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#usemap_count\">usemap_count</a>, int <a class=\"id\" href=\"#nodeid\">nodeid</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#usemap\">usemap</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pnum\">pnum</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#usemap_size\">usemap_size</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usemap\">usemap</a> = <a class=\"id\" href=\"#sparse_early_usemaps_alloc_pgdat_section\">sparse_early_usemaps_alloc_pgdat_section</a>(<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nodeid\">nodeid</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#usemap_count\">usemap_count</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#usemap\">usemap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#pnum\">pnum</a> = <a class=\"id\" href=\"#pnum_begin\">pnum_begin</a>; <a class=\"id\" href=\"#pnum\">pnum</a> &lt; <a class=\"id\" href=\"#pnum_end\">pnum_end</a>; <a class=\"id\" href=\"#pnum\">pnum</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#present_section_nr\">present_section_nr</a>(<a class=\"id\" href=\"#pnum\">pnum</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#usemap_map\">usemap_map</a>[<a class=\"id\" href=\"#pnum\">pnum</a>] = <a class=\"id\" href=\"#usemap\">usemap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#usemap\">usemap</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usemap\">usemap</a> = <a class=\"id\" href=\"#alloc_bootmem_node\">alloc_bootmem_node</a>(<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nodeid\">nodeid</a>), <a class=\"id\" href=\"#size\">size</a> * <a class=\"id\" href=\"#usemap_count\">usemap_count</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#usemap\">usemap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#pnum\">pnum</a> = <a class=\"id\" href=\"#pnum_begin\">pnum_begin</a>; <a class=\"id\" href=\"#pnum\">pnum</a> &lt; <a class=\"id\" href=\"#pnum_end\">pnum_end</a>; <a class=\"id\" href=\"#pnum\">pnum</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#present_section_nr\">present_section_nr</a>(<a class=\"id\" href=\"#pnum\">pnum</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#usemap_map\">usemap_map</a>[<a class=\"id\" href=\"#pnum\">pnum</a>] = <a class=\"id\" href=\"#usemap\">usemap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#usemap\">usemap</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_usemap_section_nr\">check_usemap_section_nr</a>(<a class=\"id\" href=\"#nodeid\">nodeid</a>, <a class=\"id\" href=\"#usemap_map\">usemap_map</a>[<a class=\"id\" href=\"#pnum\">pnum</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: allocation failed\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM_VMEMMAP\">CONFIG_SPARSEMEM_VMEMMAP</a>", 
"struct <a class=\"id\" href=\"#page\">page</a> <a class=\"id\" href=\"#__init\">__init</a> *<a class=\"id\" href=\"#sparse_mem_map_populate\">sparse_mem_map_populate</a>(unsigned long <a class=\"id\" href=\"#pnum\">pnum</a>, int <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#alloc_remap\">alloc_remap</a>(<a class=\"id\" href=\"#nid\">nid</a>, sizeof(struct <a class=\"id\" href=\"#page\">page</a>) * <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#map\">map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#map\">map</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(sizeof(struct <a class=\"id\" href=\"#page\">page</a>) * <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#__alloc_bootmem_node_high\">__alloc_bootmem_node_high</a>(<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>), <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#MAX_DMA_ADDRESS\">MAX_DMA_ADDRESS</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#map\">map</a>;", 
"}", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sparse_mem_maps_populate_node\">sparse_mem_maps_populate_node</a>(struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#map_map\">map_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#pnum_begin\">pnum_begin</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#pnum_end\">pnum_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#map_count\">map_count</a>, int <a class=\"id\" href=\"#nodeid\">nodeid</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pnum\">pnum</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a> = sizeof(struct <a class=\"id\" href=\"#page\">page</a>) * <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#alloc_remap\">alloc_remap</a>(<a class=\"id\" href=\"#nodeid\">nodeid</a>, <a class=\"id\" href=\"#size\">size</a> * <a class=\"id\" href=\"#map_count\">map_count</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#map\">map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#pnum\">pnum</a> = <a class=\"id\" href=\"#pnum_begin\">pnum_begin</a>; <a class=\"id\" href=\"#pnum\">pnum</a> &lt; <a class=\"id\" href=\"#pnum_end\">pnum_end</a>; <a class=\"id\" href=\"#pnum\">pnum</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#present_section_nr\">present_section_nr</a>(<a class=\"id\" href=\"#pnum\">pnum</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_map\">map_map</a>[<a class=\"id\" href=\"#pnum\">pnum</a>] = <a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#__alloc_bootmem_node_high\">__alloc_bootmem_node_high</a>(<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nodeid\">nodeid</a>), <a class=\"id\" href=\"#size\">size</a> * <a class=\"id\" href=\"#map_count\">map_count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#MAX_DMA_ADDRESS\">MAX_DMA_ADDRESS</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#map\">map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#pnum\">pnum</a> = <a class=\"id\" href=\"#pnum_begin\">pnum_begin</a>; <a class=\"id\" href=\"#pnum\">pnum</a> &lt; <a class=\"id\" href=\"#pnum_end\">pnum_end</a>; <a class=\"id\" href=\"#pnum\">pnum</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#present_section_nr\">present_section_nr</a>(<a class=\"id\" href=\"#pnum\">pnum</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_map\">map_map</a>[<a class=\"id\" href=\"#pnum\">pnum</a>] = <a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* fallback */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pnum\">pnum</a> = <a class=\"id\" href=\"#pnum_begin\">pnum_begin</a>; <a class=\"id\" href=\"#pnum\">pnum</a> &lt; <a class=\"id\" href=\"#pnum_end\">pnum_end</a>; <a class=\"id\" href=\"#pnum\">pnum</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#ms\">ms</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#present_section_nr\">present_section_nr</a>(<a class=\"id\" href=\"#pnum\">pnum</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_map\">map_map</a>[<a class=\"id\" href=\"#pnum\">pnum</a>] = <a class=\"id\" href=\"#sparse_mem_map_populate\">sparse_mem_map_populate</a>(<a class=\"id\" href=\"#pnum\">pnum</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#map_map\">map_map</a>[<a class=\"id\" href=\"#pnum\">pnum</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a> = <a class=\"id\" href=\"#__nr_to_section\">__nr_to_section</a>(<a class=\"id\" href=\"#pnum\">pnum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: sparsemem memory map backing failed \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"some memory will not be available.\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a>-><a class=\"id\" href=\"#section_mem_map\">section_mem_map</a> = 0;", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_SPARSEMEM_VMEMMAP */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM_ALLOC_MEM_MAP_TOGETHER\">CONFIG_SPARSEMEM_ALLOC_MEM_MAP_TOGETHER</a>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sparse_early_mem_maps_alloc_node\">sparse_early_mem_maps_alloc_node</a>(struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#map_map\">map_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#pnum_begin\">pnum_begin</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#pnum_end\">pnum_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#map_count\">map_count</a>, int <a class=\"id\" href=\"#nodeid\">nodeid</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sparse_mem_maps_populate_node\">sparse_mem_maps_populate_node</a>(<a class=\"id\" href=\"#map_map\">map_map</a>, <a class=\"id\" href=\"#pnum_begin\">pnum_begin</a>, <a class=\"id\" href=\"#pnum_end\">pnum_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#map_count\">map_count</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"}", 
"#else", 
"static struct <a class=\"id\" href=\"#page\">page</a> <a class=\"id\" href=\"#__init\">__init</a> *<a class=\"id\" href=\"#sparse_early_mem_map_alloc\">sparse_early_mem_map_alloc</a>(unsigned long <a class=\"id\" href=\"#pnum\">pnum</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#ms\">ms</a> = <a class=\"id\" href=\"#__nr_to_section\">__nr_to_section</a>(<a class=\"id\" href=\"#pnum\">pnum</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#sparse_early_nid\">sparse_early_nid</a>(<a class=\"id\" href=\"#ms\">ms</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#sparse_mem_map_populate\">sparse_mem_map_populate</a>(<a class=\"id\" href=\"#pnum\">pnum</a>, <a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#map\">map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#map\">map</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: sparsemem memory map backing failed \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"some memory will not be available.\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a>-><a class=\"id\" href=\"#section_mem_map\">section_mem_map</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#weak\">weak</a>)) <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#vmemmap_populate_print_last\">vmemmap_populate_print_last</a>(void)", 
"{", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate the accumulated non-linear sections, allocate a mem_map</span>", 
"<span class=\"comment\"> * for each and record the physical to section mapping.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sparse_init\">sparse_init</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pnum\">pnum</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#usemap\">usemap</a>;", 
"<span class=\"ts\"/>unsigned long **<a class=\"id\" href=\"#usemap_map\">usemap_map</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nodeid_begin\">nodeid_begin</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pnum_begin\">pnum_begin</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#usemap_count\">usemap_count</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM_ALLOC_MEM_MAP_TOGETHER\">CONFIG_SPARSEMEM_ALLOC_MEM_MAP_TOGETHER</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#map_count\">map_count</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size2\">size2</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#map_map\">map_map</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * map is using big page (aka 2M in x86 64 bit)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * usemap is less one page (aka 24 bytes)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so alloc 2M (with 2M align) and 24 bytes in turn will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * make next 2M slip to one more 2M later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then in big system, the memory will have a lot of holes...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here try to allocate 2M pages continously.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * powerpc need to call sparse_init_one_section right after each</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sparse_early_mem_map_alloc, so allocate usemap_map at first.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(unsigned long *) * <a class=\"id\" href=\"#NR_MEM_SECTIONS\">NR_MEM_SECTIONS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usemap_map\">usemap_map</a> = <a class=\"id\" href=\"#alloc_bootmem\">alloc_bootmem</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#usemap_map\">usemap_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"can not allocate usemap_map\\n\");", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pnum\">pnum</a> = 0; <a class=\"id\" href=\"#pnum\">pnum</a> &lt; <a class=\"id\" href=\"#NR_MEM_SECTIONS\">NR_MEM_SECTIONS</a>; <a class=\"id\" href=\"#pnum\">pnum</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#ms\">ms</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#present_section_nr\">present_section_nr</a>(<a class=\"id\" href=\"#pnum\">pnum</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a> = <a class=\"id\" href=\"#__nr_to_section\">__nr_to_section</a>(<a class=\"id\" href=\"#pnum\">pnum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodeid_begin\">nodeid_begin</a> = <a class=\"id\" href=\"#sparse_early_nid\">sparse_early_nid</a>(<a class=\"id\" href=\"#ms\">ms</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pnum_begin\">pnum_begin</a> = <a class=\"id\" href=\"#pnum\">pnum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usemap_count\">usemap_count</a> = 1;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pnum\">pnum</a> = <a class=\"id\" href=\"#pnum_begin\">pnum_begin</a> + 1; <a class=\"id\" href=\"#pnum\">pnum</a> &lt; <a class=\"id\" href=\"#NR_MEM_SECTIONS\">NR_MEM_SECTIONS</a>; <a class=\"id\" href=\"#pnum\">pnum</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#ms\">ms</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nodeid\">nodeid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#present_section_nr\">present_section_nr</a>(<a class=\"id\" href=\"#pnum\">pnum</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a> = <a class=\"id\" href=\"#__nr_to_section\">__nr_to_section</a>(<a class=\"id\" href=\"#pnum\">pnum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodeid\">nodeid</a> = <a class=\"id\" href=\"#sparse_early_nid\">sparse_early_nid</a>(<a class=\"id\" href=\"#ms\">ms</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nodeid\">nodeid</a> == <a class=\"id\" href=\"#nodeid_begin\">nodeid_begin</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#usemap_count\">usemap_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ok, we need to take cake of from pnum_begin to pnum - 1*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sparse_early_usemaps_alloc_node\">sparse_early_usemaps_alloc_node</a>(<a class=\"id\" href=\"#usemap_map\">usemap_map</a>, <a class=\"id\" href=\"#pnum_begin\">pnum_begin</a>, <a class=\"id\" href=\"#pnum\">pnum</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#usemap_count\">usemap_count</a>, <a class=\"id\" href=\"#nodeid_begin\">nodeid_begin</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* new start, update count etc*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodeid_begin\">nodeid_begin</a> = <a class=\"id\" href=\"#nodeid\">nodeid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pnum_begin\">pnum_begin</a> = <a class=\"id\" href=\"#pnum\">pnum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#usemap_count\">usemap_count</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* ok, last chunk */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sparse_early_usemaps_alloc_node\">sparse_early_usemaps_alloc_node</a>(<a class=\"id\" href=\"#usemap_map\">usemap_map</a>, <a class=\"id\" href=\"#pnum_begin\">pnum_begin</a>, <a class=\"id\" href=\"#NR_MEM_SECTIONS\">NR_MEM_SECTIONS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#usemap_count\">usemap_count</a>, <a class=\"id\" href=\"#nodeid_begin\">nodeid_begin</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM_ALLOC_MEM_MAP_TOGETHER\">CONFIG_SPARSEMEM_ALLOC_MEM_MAP_TOGETHER</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size2\">size2</a> = sizeof(struct <a class=\"id\" href=\"#page\">page</a> *) * <a class=\"id\" href=\"#NR_MEM_SECTIONS\">NR_MEM_SECTIONS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map_map\">map_map</a> = <a class=\"id\" href=\"#alloc_bootmem\">alloc_bootmem</a>(<a class=\"id\" href=\"#size2\">size2</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#map_map\">map_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"can not allocate map_map\\n\");", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pnum\">pnum</a> = 0; <a class=\"id\" href=\"#pnum\">pnum</a> &lt; <a class=\"id\" href=\"#NR_MEM_SECTIONS\">NR_MEM_SECTIONS</a>; <a class=\"id\" href=\"#pnum\">pnum</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#ms\">ms</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#present_section_nr\">present_section_nr</a>(<a class=\"id\" href=\"#pnum\">pnum</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a> = <a class=\"id\" href=\"#__nr_to_section\">__nr_to_section</a>(<a class=\"id\" href=\"#pnum\">pnum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodeid_begin\">nodeid_begin</a> = <a class=\"id\" href=\"#sparse_early_nid\">sparse_early_nid</a>(<a class=\"id\" href=\"#ms\">ms</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pnum_begin\">pnum_begin</a> = <a class=\"id\" href=\"#pnum\">pnum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map_count\">map_count</a> = 1;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pnum\">pnum</a> = <a class=\"id\" href=\"#pnum_begin\">pnum_begin</a> + 1; <a class=\"id\" href=\"#pnum\">pnum</a> &lt; <a class=\"id\" href=\"#NR_MEM_SECTIONS\">NR_MEM_SECTIONS</a>; <a class=\"id\" href=\"#pnum\">pnum</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#ms\">ms</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nodeid\">nodeid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#present_section_nr\">present_section_nr</a>(<a class=\"id\" href=\"#pnum\">pnum</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a> = <a class=\"id\" href=\"#__nr_to_section\">__nr_to_section</a>(<a class=\"id\" href=\"#pnum\">pnum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodeid\">nodeid</a> = <a class=\"id\" href=\"#sparse_early_nid\">sparse_early_nid</a>(<a class=\"id\" href=\"#ms\">ms</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nodeid\">nodeid</a> == <a class=\"id\" href=\"#nodeid_begin\">nodeid_begin</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_count\">map_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ok, we need to take cake of from pnum_begin to pnum - 1*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sparse_early_mem_maps_alloc_node\">sparse_early_mem_maps_alloc_node</a>(<a class=\"id\" href=\"#map_map\">map_map</a>, <a class=\"id\" href=\"#pnum_begin\">pnum_begin</a>, <a class=\"id\" href=\"#pnum\">pnum</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#map_count\">map_count</a>, <a class=\"id\" href=\"#nodeid_begin\">nodeid_begin</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* new start, update count etc*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodeid_begin\">nodeid_begin</a> = <a class=\"id\" href=\"#nodeid\">nodeid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pnum_begin\">pnum_begin</a> = <a class=\"id\" href=\"#pnum\">pnum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_count\">map_count</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* ok, last chunk */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sparse_early_mem_maps_alloc_node\">sparse_early_mem_maps_alloc_node</a>(<a class=\"id\" href=\"#map_map\">map_map</a>, <a class=\"id\" href=\"#pnum_begin\">pnum_begin</a>, <a class=\"id\" href=\"#NR_MEM_SECTIONS\">NR_MEM_SECTIONS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#map_count\">map_count</a>, <a class=\"id\" href=\"#nodeid_begin\">nodeid_begin</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pnum\">pnum</a> = 0; <a class=\"id\" href=\"#pnum\">pnum</a> &lt; <a class=\"id\" href=\"#NR_MEM_SECTIONS\">NR_MEM_SECTIONS</a>; <a class=\"id\" href=\"#pnum\">pnum</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#present_section_nr\">present_section_nr</a>(<a class=\"id\" href=\"#pnum\">pnum</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#usemap\">usemap</a> = <a class=\"id\" href=\"#usemap_map\">usemap_map</a>[<a class=\"id\" href=\"#pnum\">pnum</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#usemap\">usemap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM_ALLOC_MEM_MAP_TOGETHER\">CONFIG_SPARSEMEM_ALLOC_MEM_MAP_TOGETHER</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#map_map\">map_map</a>[<a class=\"id\" href=\"#pnum\">pnum</a>];", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#sparse_early_mem_map_alloc\">sparse_early_mem_map_alloc</a>(<a class=\"id\" href=\"#pnum\">pnum</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#map\">map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sparse_init_one_section\">sparse_init_one_section</a>(<a class=\"id\" href=\"#__nr_to_section\">__nr_to_section</a>(<a class=\"id\" href=\"#pnum\">pnum</a>), <a class=\"id\" href=\"#pnum\">pnum</a>, <a class=\"id\" href=\"#map\">map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#usemap\">usemap</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmemmap_populate_print_last\">vmemmap_populate_print_last</a>();", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM_ALLOC_MEM_MAP_TOGETHER\">CONFIG_SPARSEMEM_ALLOC_MEM_MAP_TOGETHER</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_bootmem\">free_bootmem</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#map_map\">map_map</a>), <a class=\"id\" href=\"#size2\">size2</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_bootmem\">free_bootmem</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#usemap_map\">usemap_map</a>), <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_HOTPLUG\">CONFIG_MEMORY_HOTPLUG</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM_VMEMMAP\">CONFIG_SPARSEMEM_VMEMMAP</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#kmalloc_section_memmap\">kmalloc_section_memmap</a>(unsigned long <a class=\"id\" href=\"#pnum\">pnum</a>, int <a class=\"id\" href=\"#nid\">nid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* This will make the necessary allocations eventually. */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sparse_mem_map_populate\">sparse_mem_map_populate</a>(<a class=\"id\" href=\"#pnum\">pnum</a>, <a class=\"id\" href=\"#nid\">nid</a>);", 
"}", 
"static void <a class=\"id\" href=\"#__kfree_section_memmap\">__kfree_section_memmap</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#memmap\">memmap</a>, unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>return; <span class=\"comment\">/* XXX: Not implemented yet */</span>", 
"}", 
"static void <a class=\"id\" href=\"#free_map_bootmem\">free_map_bootmem</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"}", 
"#else", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#__kmalloc_section_memmap\">__kmalloc_section_memmap</a>(unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, *<a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#memmap_size\">memmap_size</a> = sizeof(struct <a class=\"id\" href=\"#page\">page</a>) * <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_pages\">alloc_pages</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>|<a class=\"id\" href=\"#__GFP_NOWARN\">__GFP_NOWARN</a>, <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#memmap_size\">memmap_size</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_map_page\">got_map_page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#vmalloc\">vmalloc</a>(<a class=\"id\" href=\"#memmap_size\">memmap_size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_map_ptr\">got_map_ptr</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<a class=\"id\" href=\"#got_map_page\">got_map_page</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (struct <a class=\"id\" href=\"#page\">page</a> *)<a class=\"id\" href=\"#pfn_to_kaddr\">pfn_to_kaddr</a>(<a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<a class=\"id\" href=\"#got_map_ptr\">got_map_ptr</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ret\">ret</a>, 0, <a class=\"id\" href=\"#memmap_size\">memmap_size</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#kmalloc_section_memmap\">kmalloc_section_memmap</a>(unsigned long <a class=\"id\" href=\"#pnum\">pnum</a>, int <a class=\"id\" href=\"#nid\">nid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__kmalloc_section_memmap\">__kmalloc_section_memmap</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kfree_section_memmap\">__kfree_section_memmap</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#memmap\">memmap</a>, unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_vmalloc_addr\">is_vmalloc_addr</a>(<a class=\"id\" href=\"#memmap\">memmap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#memmap\">memmap</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#memmap\">memmap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#get_order\">get_order</a>(sizeof(struct <a class=\"id\" href=\"#page\">page</a>) * <a class=\"id\" href=\"#nr_pages\">nr_pages</a>));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_map_bootmem\">free_map_bootmem</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#maps_section_nr\">maps_section_nr</a>, <a class=\"id\" href=\"#removing_section_nr\">removing_section_nr</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#magic\">magic</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#page\">page</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#magic\">magic</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_mapcount\">_mapcount</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#magic\">magic</a> == <a class=\"id\" href=\"#NODE_INFO\">NODE_INFO</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#maps_section_nr\">maps_section_nr</a> = <a class=\"id\" href=\"#pfn_to_section_nr\">pfn_to_section_nr</a>(<a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#removing_section_nr\">removing_section_nr</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * When this function is called, the removing section is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * logical offlined state. This means all pages are isolated</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * from page allocator. If removing section's memmap is placed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * on the same section, it must not be freed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If it is freed, page allocator may allocate it which will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be removed physically soon.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#maps_section_nr\">maps_section_nr</a> != <a class=\"id\" href=\"#removing_section_nr\">removing_section_nr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page_bootmem\">put_page_bootmem</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SPARSEMEM_VMEMMAP */</span>", 
"", 
"static void <a class=\"id\" href=\"#free_section_usemap\">free_section_usemap</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#memmap\">memmap</a>, unsigned long *<a class=\"id\" href=\"#usemap\">usemap</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#usemap_page\">usemap_page</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#usemap\">usemap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usemap_page\">usemap_page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#usemap\">usemap</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check to see if allocation came from hot-plug-add</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageSlab\">PageSlab</a>(<a class=\"id\" href=\"#usemap_page\">usemap_page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#usemap\">usemap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memmap\">memmap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__kfree_section_memmap\">__kfree_section_memmap</a>(<a class=\"id\" href=\"#memmap\">memmap</a>, <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The usemap came from bootmem. This is packed with other usemaps</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on the section which has pgdat at boot time. Just keep it as is now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#memmap\">memmap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#memmap_page\">memmap_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memmap_page\">memmap_page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#memmap\">memmap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a> * sizeof(struct <a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>>> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_map_bootmem\">free_map_bootmem</a>(<a class=\"id\" href=\"#memmap_page\">memmap_page</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * returns the number of sections whose mem_maps were properly</span>", 
"<span class=\"comment\"> * set.  If this is &lt;=0, then that means that the passed-in</span>", 
"<span class=\"comment\"> * map was not consumed and must be freed.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#sparse_add_one_section\">sparse_add_one_section</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#section_nr\">section_nr</a> = <a class=\"id\" href=\"#pfn_to_section_nr\">pfn_to_section_nr</a>(<a class=\"id\" href=\"#start_pfn\">start_pfn</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_pgdat\">zone_pgdat</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#ms\">ms</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#memmap\">memmap</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#usemap\">usemap</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no locking for this, because it does its own</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * plus, it does a kmalloc</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sparse_index_init\">sparse_index_init</a>(<a class=\"id\" href=\"#section_nr\">section_nr</a>, <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0 && <a class=\"id\" href=\"#ret\">ret</a> != -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memmap\">memmap</a> = <a class=\"id\" href=\"#kmalloc_section_memmap\">kmalloc_section_memmap</a>(<a class=\"id\" href=\"#section_nr\">section_nr</a>, <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#memmap\">memmap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usemap\">usemap</a> = <a class=\"id\" href=\"#__kmalloc_section_usemap\">__kmalloc_section_usemap</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#usemap\">usemap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__kfree_section_memmap\">__kfree_section_memmap</a>(<a class=\"id\" href=\"#memmap\">memmap</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
];
xr_frag_insert('l/3a/1f7249678131200b72198fd0347667ceb24cd6.xr', __xr_tmp);
