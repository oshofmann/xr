var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_GENERIC_GPIO_H\">_ASM_GENERIC_GPIO_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_GENERIC_GPIO_H\">_ASM_GENERIC_GPIO_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_GPIOLIB\">CONFIG_GPIOLIB</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* Platforms may implement their GPIO interface with library code,</span>", 
"<span class=\"comment\"> * at a small performance cost for non-inlined operations and some</span>", 
"<span class=\"comment\"> * extra memory (for code and for per-GPIO table entries).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * While the GPIO programming interface defines valid GPIO numbers</span>", 
"<span class=\"comment\"> * to be in the range 0..MAX_INT, this library restricts them to the</span>", 
"<span class=\"comment\"> * smaller range 0..ARCH_NR_GPIOS-1.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ARCH_NR_GPIOS is somewhat arbitrary; it usually reflects the sum of</span>", 
"<span class=\"comment\"> * builtin/SoC GPIOs plus a number of GPIOs on expanders; the latter is</span>", 
"<span class=\"comment\"> * actually an estimate of a board-specific value.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ARCH_NR_GPIOS\">ARCH_NR_GPIOS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ARCH_NR_GPIOS\">ARCH_NR_GPIOS</a><span class=\"ts\"/><span class=\"ts\"/>256", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * \"valid\" GPIO numbers are nonnegative and may be passed to</span>", 
"<span class=\"comment\"> * setup routines like gpio_request().  only some valid numbers</span>", 
"<span class=\"comment\"> * can successfully be requested and used.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Invalid GPIO numbers are useful for indicating no-such-GPIO in</span>", 
"<span class=\"comment\"> * platform data and other tables.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#gpio_is_valid\">gpio_is_valid</a>(int <a class=\"id\" href=\"#number\">number</a>)", 
"{", 
"<span class=\"ts\"/>return ((unsigned)<a class=\"id\" href=\"#number\">number</a>) &lt; <a class=\"id\" href=\"#ARCH_NR_GPIOS\">ARCH_NR_GPIOS</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#device\">device</a>;", 
"struct <a class=\"id\" href=\"#seq_file\">seq_file</a>;", 
"struct <a class=\"id\" href=\"#module\">module</a>;", 
"struct <a class=\"id\" href=\"#device_node\">device_node</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct gpio_chip - abstract a GPIO controller</span>", 
"<span class=\"comment\"> * @label: for diagnostics</span>", 
"<span class=\"comment\"> * @dev: optional device providing the GPIOs</span>", 
"<span class=\"comment\"> * @owner: helps prevent removal of modules exporting active GPIOs</span>", 
"<span class=\"comment\"> * @request: optional hook for chip-specific activation, such as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>enabling module power and clock; may sleep</span>", 
"<span class=\"comment\"> * @free: optional hook for chip-specific deactivation, such as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>disabling module power and clock; may sleep</span>", 
"<span class=\"comment\"> * @direction_input: configures signal \"offset\" as input, or returns error</span>", 
"<span class=\"comment\"> * @get: returns value for signal \"offset\"; for output signals this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>returns either the value actually sensed, or zero</span>", 
"<span class=\"comment\"> * @direction_output: configures signal \"offset\" as output, or returns error</span>", 
"<span class=\"comment\"> * @set: assigns output value for signal \"offset\"</span>", 
"<span class=\"comment\"> * @to_irq: optional hook supporting non-static gpio_to_irq() mappings;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>implementation may not sleep</span>", 
"<span class=\"comment\"> * @dbg_show: optional routine to show contents in debugfs; default code</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>will be used when this is omitted, but custom code can show extra</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>state (such as pullup/pulldown configuration).</span>", 
"<span class=\"comment\"> * @base: identifies the first GPIO number handled by this chip; or, if</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>negative during registration, requests dynamic ID allocation.</span>", 
"<span class=\"comment\"> * @ngpio: the number of GPIOs handled by this controller; the last GPIO</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>handled is (base + ngpio - 1).</span>", 
"<span class=\"comment\"> * @can_sleep: flag must be set iff get()/set() methods sleep, as they</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>must while accessing GPIO expander chips over I2C or SPI</span>", 
"<span class=\"comment\"> * @names: if set, must be an array of strings to use as alternative</span>", 
"<span class=\"comment\"> *      names for the GPIOs in this chip. Any entry in the array</span>", 
"<span class=\"comment\"> *      may be NULL if there is no alias for the GPIO, however the</span>", 
"<span class=\"comment\"> *      array must be @ngpio entries long.  A name can include a single printk</span>", 
"<span class=\"comment\"> *      format specifier for an unsigned int.  It is substituted by the actual</span>", 
"<span class=\"comment\"> *      number of the gpio.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A gpio_chip can help platforms abstract various sources of GPIOs so</span>", 
"<span class=\"comment\"> * they can all be accessed through a common programing interface.</span>", 
"<span class=\"comment\"> * Example sources would be SOC controllers, FPGAs, multifunction</span>", 
"<span class=\"comment\"> * chips, dedicated GPIO expanders, and so on.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Each chip controls a number of signals, identified in method calls</span>", 
"<span class=\"comment\"> * by \"offset\" values in the range 0..(@ngpio - 1).  When those signals</span>", 
"<span class=\"comment\"> * are referenced through calls like gpio_get_value(gpio), the offset</span>", 
"<span class=\"comment\"> * is calculated by subtracting @base from the gpio number.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> {", 
"<span class=\"ts\"/>const char<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#label\">label</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#owner\">owner</a>;", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#request\">request</a>)(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#free\">free</a>)(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a>);", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#direction_input\">direction_input</a>)(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#get\">get</a>)(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#direction_output\">direction_output</a>)(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#set_debounce\">set_debounce</a>)(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a>, unsigned <a class=\"id\" href=\"#debounce\">debounce</a>);", 
"", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#set\">set</a>)(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#to_irq\">to_irq</a>)(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a>);", 
"", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#dbg_show\">dbg_show</a>)(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ngpio\">ngpio</a>;", 
"<span class=\"ts\"/>const char<span class=\"ts\"/><span class=\"ts\"/>*const *<a class=\"id\" href=\"#names\">names</a>;", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#can_sleep\">can_sleep</a>:1;", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exported\">exported</a>:1;", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_OF_GPIO\">CONFIG_OF_GPIO</a>)", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If CONFIG_OF is enabled, then all GPIO controllers described in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * device tree automatically may have an OF translation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#of_node\">of_node</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#of_gpio_n_cells\">of_gpio_n_cells</a>;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#of_xlate\">of_xlate</a>)(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#gc\">gc</a>, struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#np\">np</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>        const void *<a class=\"id\" href=\"#gpio_spec\">gpio_spec</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#flags\">flags</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"extern const char *<a class=\"id\" href=\"#gpiochip_is_requested\">gpiochip_is_requested</a>(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a>);", 
"extern int <a class=\"id\" href=\"#__must_check\">__must_check</a> <a class=\"id\" href=\"#gpiochip_reserve\">gpiochip_reserve</a>(int <a class=\"id\" href=\"#start\">start</a>, int <a class=\"id\" href=\"#ngpio\">ngpio</a>);", 
"", 
"<span class=\"comment\">/* add/remove chips */</span>", 
"extern int <a class=\"id\" href=\"#gpiochip_add\">gpiochip_add</a>(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a>);", 
"extern int <a class=\"id\" href=\"#__must_check\">__must_check</a> <a class=\"id\" href=\"#gpiochip_remove\">gpiochip_remove</a>(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a>);", 
"extern struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#gpiochip_find\">gpiochip_find</a>(void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#match\">match</a>)(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     void *<a class=\"id\" href=\"#data\">data</a>));", 
"", 
"", 
"<span class=\"comment\">/* Always use the library code for GPIO management calls,</span>", 
"<span class=\"comment\"> * or when sleeping may be involved.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#gpio_request\">gpio_request</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>, const char *<a class=\"id\" href=\"#label\">label</a>);", 
"extern void <a class=\"id\" href=\"#gpio_free\">gpio_free</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>);", 
"", 
"extern int <a class=\"id\" href=\"#gpio_direction_input\">gpio_direction_input</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>);", 
"extern int <a class=\"id\" href=\"#gpio_direction_output\">gpio_direction_output</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>, int <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"extern int <a class=\"id\" href=\"#gpio_set_debounce\">gpio_set_debounce</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>, unsigned <a class=\"id\" href=\"#debounce\">debounce</a>);", 
"", 
"extern int <a class=\"id\" href=\"#gpio_get_value_cansleep\">gpio_get_value_cansleep</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>);", 
"extern void <a class=\"id\" href=\"#gpio_set_value_cansleep\">gpio_set_value_cansleep</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>, int <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"", 
"<span class=\"comment\">/* A platform's &lt;asm/gpio.h&gt; code may want to inline the I/O calls when</span>", 
"<span class=\"comment\"> * the GPIO is constant and refers to some always-present controller,</span>", 
"<span class=\"comment\"> * giving direct access to chip registers and tight bitbanging loops.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#__gpio_get_value\">__gpio_get_value</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>);", 
"extern void <a class=\"id\" href=\"#__gpio_set_value\">__gpio_set_value</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>, int <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"extern int <a class=\"id\" href=\"#__gpio_cansleep\">__gpio_cansleep</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>);", 
"", 
"extern int <a class=\"id\" href=\"#__gpio_to_irq\">__gpio_to_irq</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GPIOF_DIR_OUT\">GPIOF_DIR_OUT</a><span class=\"ts\"/>(0 << 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GPIOF_DIR_IN\">GPIOF_DIR_IN</a><span class=\"ts\"/>(1 << 0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GPIOF_INIT_LOW\">GPIOF_INIT_LOW</a><span class=\"ts\"/>(0 << 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GPIOF_INIT_HIGH\">GPIOF_INIT_HIGH</a><span class=\"ts\"/>(1 << 1)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GPIOF_IN\">GPIOF_IN</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#GPIOF_DIR_IN\">GPIOF_DIR_IN</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GPIOF_OUT_INIT_LOW\">GPIOF_OUT_INIT_LOW</a><span class=\"ts\"/>(<a class=\"id\" href=\"#GPIOF_DIR_OUT\">GPIOF_DIR_OUT</a> | <a class=\"id\" href=\"#GPIOF_INIT_LOW\">GPIOF_INIT_LOW</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GPIOF_OUT_INIT_HIGH\">GPIOF_OUT_INIT_HIGH</a><span class=\"ts\"/>(<a class=\"id\" href=\"#GPIOF_DIR_OUT\">GPIOF_DIR_OUT</a> | <a class=\"id\" href=\"#GPIOF_INIT_HIGH\">GPIOF_INIT_HIGH</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct gpio - a structure describing a GPIO with configuration</span>", 
"<span class=\"comment\"> * @gpio:<span class=\"ts\"/>the GPIO number</span>", 
"<span class=\"comment\"> * @flags:<span class=\"ts\"/>GPIO configuration as specified by GPIOF_*</span>", 
"<span class=\"comment\"> * @label:<span class=\"ts\"/>a literal description string of this GPIO</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#gpio\">gpio</a> {", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#gpio\">gpio</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>const char<span class=\"ts\"/>*<a class=\"id\" href=\"#label\">label</a>;", 
"};", 
"", 
"extern int <a class=\"id\" href=\"#gpio_request_one\">gpio_request_one</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>, const char *<a class=\"id\" href=\"#label\">label</a>);", 
"extern int <a class=\"id\" href=\"#gpio_request_array\">gpio_request_array</a>(struct <a class=\"id\" href=\"#gpio\">gpio</a> *<a class=\"id\" href=\"#array\">array</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#num\">num</a>);", 
"extern void <a class=\"id\" href=\"#gpio_free_array\">gpio_free_array</a>(struct <a class=\"id\" href=\"#gpio\">gpio</a> *<a class=\"id\" href=\"#array\">array</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#num\">num</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_GPIO_SYSFS\">CONFIG_GPIO_SYSFS</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A sysfs interface can be exported by individual drivers if they want,</span>", 
"<span class=\"comment\"> * but more typically is configured entirely from userspace.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#gpio_export\">gpio_export</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#direction_may_change\">direction_may_change</a>);", 
"extern int <a class=\"id\" href=\"#gpio_export_link\">gpio_export_link</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#gpio\">gpio</a>);", 
"extern int <a class=\"id\" href=\"#gpio_sysfs_set_active_low\">gpio_sysfs_set_active_low</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>, int <a class=\"id\" href=\"#value\">value</a>);", 
"extern void <a class=\"id\" href=\"#gpio_unexport\">gpio_unexport</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_GPIO_SYSFS */</span>", 
"", 
"#else<span class=\"ts\"/><span class=\"comment\">/* !CONFIG_HAVE_GPIO_LIB */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#gpio_is_valid\">gpio_is_valid</a>(int <a class=\"id\" href=\"#number\">number</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* only non-negative numbers are valid */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#number\">number</a> >= 0;", 
"}", 
"", 
"<span class=\"comment\">/* platforms that don't directly support access to GPIOs through I2C, SPI,</span>", 
"<span class=\"comment\"> * or other blocking infrastructure can use these wrappers.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#gpio_cansleep\">gpio_cansleep</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#gpio_get_value_cansleep\">gpio_get_value_cansleep</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#gpio_get_value\">gpio_get_value</a>(<a class=\"id\" href=\"#gpio\">gpio</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#gpio_set_value_cansleep\">gpio_set_value_cansleep</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpio_set_value\">gpio_set_value</a>(<a class=\"id\" href=\"#gpio\">gpio</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_HAVE_GPIO_LIB */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_GPIO_SYSFS\">CONFIG_GPIO_SYSFS</a>", 
"", 
"struct <a class=\"id\" href=\"#device\">device</a>;", 
"", 
"<span class=\"comment\">/* sysfs support is only available with gpiolib, where it's optional */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#gpio_export\">gpio_export</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#direction_may_change\">direction_may_change</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#gpio_export_link\">gpio_export_link</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#gpio\">gpio</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#gpio_sysfs_set_active_low\">gpio_sysfs_set_active_low</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#gpio_unexport\">gpio_unexport</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_GPIO_SYSFS */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_GENERIC_GPIO_H */</span>", 
];
xr_frag_insert('l/3a/5f8f83366497f9ba24733c7c9b141749760616.xr', __xr_tmp);
