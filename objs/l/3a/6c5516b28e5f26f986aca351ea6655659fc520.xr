var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Helper function for splitting a string into an argv-like array.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static const char *<a class=\"id\" href=\"#skip_arg\">skip_arg</a>(const char *<a class=\"id\" href=\"#cp\">cp</a>)", 
"{", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#cp\">cp</a> && !<a class=\"id\" href=\"#isspace\">isspace</a>(*<a class=\"id\" href=\"#cp\">cp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a>++;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cp\">cp</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#count_argc\">count_argc</a>(const char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#str\">str</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#skip_spaces\">skip_spaces</a>(<a class=\"id\" href=\"#str\">str</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#str\">str</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#skip_arg\">skip_arg</a>(<a class=\"id\" href=\"#str\">str</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * argv_free - free an argv</span>", 
"<span class=\"comment\"> * @argv - the argument vector to be freed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Frees an argv and the strings it points to.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#argv_free\">argv_free</a>(char **<a class=\"id\" href=\"#argv\">argv</a>)", 
"{", 
"<span class=\"ts\"/>char **<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#argv\">argv</a>; *<a class=\"id\" href=\"#p\">p</a>; <a class=\"id\" href=\"#p\">p</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(*<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#argv\">argv</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#argv_free\">argv_free</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * argv_split - split a string at whitespace, returning an argv</span>", 
"<span class=\"comment\"> * @gfp: the GFP mask used to allocate memory</span>", 
"<span class=\"comment\"> * @str: the string to be split</span>", 
"<span class=\"comment\"> * @argcp: returned argument count</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns an array of pointers to strings which are split out from</span>", 
"<span class=\"comment\"> * @str.  This is performed by strictly splitting on white-space; no</span>", 
"<span class=\"comment\"> * quote processing is performed.  Multiple whitespace characters are</span>", 
"<span class=\"comment\"> * considered to be a single argument separator.  The returned array</span>", 
"<span class=\"comment\"> * is always NULL-terminated.  Returns NULL on memory allocation</span>", 
"<span class=\"comment\"> * failure.</span>", 
"<span class=\"comment\"> */</span>", 
"char **<a class=\"id\" href=\"#argv_split\">argv_split</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>, const char *<a class=\"id\" href=\"#str\">str</a>, int *<a class=\"id\" href=\"#argcp\">argcp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#argc\">argc</a> = <a class=\"id\" href=\"#count_argc\">count_argc</a>(<a class=\"id\" href=\"#str\">str</a>);", 
"<span class=\"ts\"/>char **<a class=\"id\" href=\"#argv\">argv</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#argv\">argv</a>) * (<a class=\"id\" href=\"#argc\">argc</a>+1), <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/>char **<a class=\"id\" href=\"#argvp\">argvp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#argv\">argv</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#argcp\">argcp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#argcp\">argcp</a> = <a class=\"id\" href=\"#argc\">argc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#argvp\">argvp</a> = <a class=\"id\" href=\"#argv\">argv</a>;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#str\">str</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#skip_spaces\">skip_spaces</a>(<a class=\"id\" href=\"#str\">str</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#str\">str</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#t\">t</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#skip_arg\">skip_arg</a>(<a class=\"id\" href=\"#str\">str</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#kstrndup\">kstrndup</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#str\">str</a>-<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#argvp\">argvp</a>++ = <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#argvp\">argvp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"  <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#argv\">argv</a>;", 
"", 
"  <a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#argv_free\">argv_free</a>(<a class=\"id\" href=\"#argv\">argv</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#argv_split\">argv_split</a>);", 
];
xr_frag_insert('l/3a/6c5516b28e5f26f986aca351ea6655659fc520.xr', __xr_tmp);
