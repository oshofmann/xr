var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * bio-integrity.c - bio data integrity extensions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2007, 2008, 2009 Oracle Corporation</span>", 
"<span class=\"comment\"> * Written by: Martin K. Petersen &lt;martin.petersen@oracle.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> * modify it under the terms of the GNU General Public License version</span>", 
"<span class=\"comment\"> * 2 as published by the Free Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful, but</span>", 
"<span class=\"comment\"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>", 
"<span class=\"comment\"> * General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; see the file COPYING.  If not, write to</span>", 
"<span class=\"comment\"> * the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139,</span>", 
"<span class=\"comment\"> * USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mempool\">mempool</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bio\">bio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#integrity_slab\">integrity_slab</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#slab\">slab</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#nr_vecs\">nr_vecs</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[8];", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS\">IS</a>(<a class=\"id\" href=\"#x\">x</a>) { .<a class=\"id\" href=\"#nr_vecs\">nr_vecs</a> = <a class=\"id\" href=\"#x\">x</a>, .<a class=\"id\" href=\"#name\">name</a> = \"bip-\"<a class=\"id\" href=\"#__stringify\">__stringify</a>(<a class=\"id\" href=\"#x\">x</a>) }", 
"struct <a class=\"id\" href=\"#integrity_slab\">integrity_slab</a> <a class=\"id\" href=\"#bip_slab\">bip_slab</a>[<a class=\"id\" href=\"#BIOVEC_NR_POOLS\">BIOVEC_NR_POOLS</a>] <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IS\">IS</a>(1), <a class=\"id\" href=\"#IS\">IS</a>(4), <a class=\"id\" href=\"#IS\">IS</a>(16), <a class=\"id\" href=\"#IS\">IS</a>(64), <a class=\"id\" href=\"#IS\">IS</a>(128), <a class=\"id\" href=\"#IS\">IS</a>(<a class=\"id\" href=\"#BIO_MAX_PAGES\">BIO_MAX_PAGES</a>),", 
"};", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#IS\">IS</a>", 
"", 
"static struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#kintegrityd_wq\">kintegrityd_wq</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#vecs_to_idx\">vecs_to_idx</a>(unsigned int <a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>case 2 ... 4:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>case 5 ... 16:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 2;", 
"<span class=\"ts\"/>case 17 ... 64:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 3;", 
"<span class=\"ts\"/>case 65 ... 128:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 4;", 
"<span class=\"ts\"/>case 129 ... <a class=\"id\" href=\"#BIO_MAX_PAGES\">BIO_MAX_PAGES</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 5;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#use_bip_pool\">use_bip_pool</a>(unsigned int <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> == <a class=\"id\" href=\"#BIOVEC_MAX_IDX\">BIOVEC_MAX_IDX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bio_integrity_alloc_bioset - Allocate integrity payload and attach it to bio</span>", 
"<span class=\"comment\"> * @bio:<span class=\"ts\"/>bio to attach integrity metadata to</span>", 
"<span class=\"comment\"> * @gfp_mask:<span class=\"ts\"/>Memory allocation mask</span>", 
"<span class=\"comment\"> * @nr_vecs:<span class=\"ts\"/>Number of integrity metadata scatter-gather elements</span>", 
"<span class=\"comment\"> * @bs:<span class=\"ts\"/><span class=\"ts\"/>bio_set to allocate from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: This function prepares a bio for attaching integrity</span>", 
"<span class=\"comment\"> * metadata.  nr_vecs specifies the maximum number of pages containing</span>", 
"<span class=\"comment\"> * integrity metadata that can be attached.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#bio_integrity_payload\">bio_integrity_payload</a> *<a class=\"id\" href=\"#bio_integrity_alloc_bioset\">bio_integrity_alloc_bioset</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#nr_vecs\">nr_vecs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *<a class=\"id\" href=\"#bs\">bs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_integrity_payload\">bio_integrity_payload</a> *<a class=\"id\" href=\"#bip\">bip</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#vecs_to_idx\">vecs_to_idx</a>(<a class=\"id\" href=\"#nr_vecs\">nr_vecs</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#bio\">bio</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bip\">bip</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Lower order allocations come straight from slab */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#use_bip_pool\">use_bip_pool</a>(<a class=\"id\" href=\"#idx\">idx</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bip\">bip</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#bip_slab\">bip_slab</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#slab\">slab</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Use mempool if lower order alloc failed or max vecs were requested */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bip\">bip</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#BIOVEC_MAX_IDX\">BIOVEC_MAX_IDX</a>;  <span class=\"comment\">/* so we free the payload properly later */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bip\">bip</a> = <a class=\"id\" href=\"#mempool_alloc\">mempool_alloc</a>(<a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#bio_integrity_pool\">bio_integrity_pool</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#bip\">bip</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: could not alloc bip\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#bip\">bip</a>, 0, sizeof(*<a class=\"id\" href=\"#bip\">bip</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bip\">bip</a>-><a class=\"id\" href=\"#bip_slab\">bip_slab</a> = <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bip\">bip</a>-><a class=\"id\" href=\"#bip_bio\">bip_bio</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_integrity\">bi_integrity</a> = <a class=\"id\" href=\"#bip\">bip</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bip\">bip</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_integrity_alloc_bioset\">bio_integrity_alloc_bioset</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bio_integrity_alloc - Allocate integrity payload and attach it to bio</span>", 
"<span class=\"comment\"> * @bio:<span class=\"ts\"/>bio to attach integrity metadata to</span>", 
"<span class=\"comment\"> * @gfp_mask:<span class=\"ts\"/>Memory allocation mask</span>", 
"<span class=\"comment\"> * @nr_vecs:<span class=\"ts\"/>Number of integrity metadata scatter-gather elements</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: This function prepares a bio for attaching integrity</span>", 
"<span class=\"comment\"> * metadata.  nr_vecs specifies the maximum number of pages containing</span>", 
"<span class=\"comment\"> * integrity metadata that can be attached.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#bio_integrity_payload\">bio_integrity_payload</a> *<a class=\"id\" href=\"#bio_integrity_alloc\">bio_integrity_alloc</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#nr_vecs\">nr_vecs</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bio_integrity_alloc_bioset\">bio_integrity_alloc_bioset</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#nr_vecs\">nr_vecs</a>, <a class=\"id\" href=\"#fs_bio_set\">fs_bio_set</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_integrity_alloc\">bio_integrity_alloc</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bio_integrity_free - Free bio integrity payload</span>", 
"<span class=\"comment\"> * @bio:<span class=\"ts\"/>bio containing bip to be freed</span>", 
"<span class=\"comment\"> * @bs:<span class=\"ts\"/><span class=\"ts\"/>bio_set this bio was allocated from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Used to free the integrity portion of a bio. Usually</span>", 
"<span class=\"comment\"> * called from bio_free().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#bio_integrity_free\">bio_integrity_free</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *<a class=\"id\" href=\"#bs\">bs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_integrity_payload\">bio_integrity_payload</a> *<a class=\"id\" href=\"#bip\">bip</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_integrity\">bi_integrity</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#bip\">bip</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* A cloned bio doesn't own the integrity metadata */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bio_flagged\">bio_flagged</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#BIO_CLONED\">BIO_CLONED</a>) && !<a class=\"id\" href=\"#bio_flagged\">bio_flagged</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#BIO_FS_INTEGRITY\">BIO_FS_INTEGRITY</a>)", 
"<span class=\"ts\"/>    && <a class=\"id\" href=\"#bip\">bip</a>-><a class=\"id\" href=\"#bip_buf\">bip_buf</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bip\">bip</a>-><a class=\"id\" href=\"#bip_buf\">bip_buf</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#use_bip_pool\">use_bip_pool</a>(<a class=\"id\" href=\"#bip\">bip</a>-><a class=\"id\" href=\"#bip_slab\">bip_slab</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mempool_free\">mempool_free</a>(<a class=\"id\" href=\"#bip\">bip</a>, <a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#bio_integrity_pool\">bio_integrity_pool</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#bip_slab\">bip_slab</a>[<a class=\"id\" href=\"#bip\">bip</a>-><a class=\"id\" href=\"#bip_slab\">bip_slab</a>].<a class=\"id\" href=\"#slab\">slab</a>, <a class=\"id\" href=\"#bip\">bip</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_integrity\">bi_integrity</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_integrity_free\">bio_integrity_free</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bio_integrity_add_page - Attach integrity metadata</span>", 
"<span class=\"comment\"> * @bio:<span class=\"ts\"/>bio to update</span>", 
"<span class=\"comment\"> * @page:<span class=\"ts\"/>page containing integrity metadata</span>", 
"<span class=\"comment\"> * @len:<span class=\"ts\"/>number of bytes of integrity metadata in page</span>", 
"<span class=\"comment\"> * @offset:<span class=\"ts\"/>start offset within page</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Attach a page containing integrity metadata to bio.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#bio_integrity_add_page\">bio_integrity_add_page</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#len\">len</a>, unsigned int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_integrity_payload\">bio_integrity_payload</a> *<a class=\"id\" href=\"#bip\">bip</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_integrity\">bi_integrity</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#iv\">iv</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bip\">bip</a>-><a class=\"id\" href=\"#bip_vcnt\">bip_vcnt</a> >= <a class=\"id\" href=\"#bvec_nr_vecs\">bvec_nr_vecs</a>(<a class=\"id\" href=\"#bip\">bip</a>-><a class=\"id\" href=\"#bip_slab\">bip_slab</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: bip_vec full\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iv\">iv</a> = <a class=\"id\" href=\"#bip_vec_idx\">bip_vec_idx</a>(<a class=\"id\" href=\"#bip\">bip</a>, <a class=\"id\" href=\"#bip\">bip</a>-><a class=\"id\" href=\"#bip_vcnt\">bip_vcnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#iv\">iv</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iv\">iv</a>-><a class=\"id\" href=\"#bv_page\">bv_page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iv\">iv</a>-><a class=\"id\" href=\"#bv_len\">bv_len</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iv\">iv</a>-><a class=\"id\" href=\"#bv_offset\">bv_offset</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bip\">bip</a>-><a class=\"id\" href=\"#bip_vcnt\">bip_vcnt</a>++;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_integrity_add_page\">bio_integrity_add_page</a>);", 
"", 
"static int <a class=\"id\" href=\"#bdev_integrity_enabled\">bdev_integrity_enabled</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, int <a class=\"id\" href=\"#rw\">rw</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#blk_integrity\">blk_integrity</a> *<a class=\"id\" href=\"#bi\">bi</a> = <a class=\"id\" href=\"#bdev_get_integrity\">bdev_get_integrity</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bi\">bi</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rw\">rw</a> == <a class=\"id\" href=\"#READ\">READ</a> && <a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#verify_fn\">verify_fn</a> != <a class=\"id\" href=\"#NULL\">NULL</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#INTEGRITY_FLAG_READ\">INTEGRITY_FLAG_READ</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rw\">rw</a> == <a class=\"id\" href=\"#WRITE\">WRITE</a> && <a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#generate_fn\">generate_fn</a> != <a class=\"id\" href=\"#NULL\">NULL</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#INTEGRITY_FLAG_WRITE\">INTEGRITY_FLAG_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bio_integrity_enabled - Check whether integrity can be passed</span>", 
"<span class=\"comment\"> * @bio:<span class=\"ts\"/>bio to check</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Determines whether bio_integrity_prep() can be called</span>", 
"<span class=\"comment\"> * on this bio or not.<span class=\"ts\"/>bio data direction and target device must be</span>", 
"<span class=\"comment\"> * set prior to calling.  The functions honors the write_generate and</span>", 
"<span class=\"comment\"> * read_verify flags in sysfs.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#bio_integrity_enabled\">bio_integrity_enabled</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Already protected? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_integrity\">bio_integrity</a>(<a class=\"id\" href=\"#bio\">bio</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bdev_integrity_enabled\">bdev_integrity_enabled</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>, <a class=\"id\" href=\"#bio_data_dir\">bio_data_dir</a>(<a class=\"id\" href=\"#bio\">bio</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_integrity_enabled\">bio_integrity_enabled</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bio_integrity_hw_sectors - Convert 512b sectors to hardware ditto</span>", 
"<span class=\"comment\"> * @bi:<span class=\"ts\"/><span class=\"ts\"/>blk_integrity profile for device</span>", 
"<span class=\"comment\"> * @sectors:<span class=\"ts\"/>Number of 512 sectors to convert</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: The block layer calculates everything in 512 byte</span>", 
"<span class=\"comment\"> * sectors but integrity metadata is done in terms of the hardware</span>", 
"<span class=\"comment\"> * sector size of the storage device.  Convert the block layer sectors</span>", 
"<span class=\"comment\"> * to physical sectors.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#bio_integrity_hw_sectors\">bio_integrity_hw_sectors</a>(struct <a class=\"id\" href=\"#blk_integrity\">blk_integrity</a> *<a class=\"id\" href=\"#bi\">bi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#sectors\">sectors</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* At this point there are only 512b or 4096b DIF/EPP devices */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a> == 4096)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sectors\">sectors</a> >>= 3;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sectors\">sectors</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bio_integrity_tag_size - Retrieve integrity tag space</span>", 
"<span class=\"comment\"> * @bio:<span class=\"ts\"/>bio to inspect</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Returns the maximum number of tag bytes that can be</span>", 
"<span class=\"comment\"> * attached to this bio. Filesystems can use this to determine how</span>", 
"<span class=\"comment\"> * much metadata to attach to an I/O.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#bio_integrity_tag_size\">bio_integrity_tag_size</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#blk_integrity\">blk_integrity</a> *<a class=\"id\" href=\"#bi\">bi</a> = <a class=\"id\" href=\"#bdev_get_integrity\">bdev_get_integrity</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a> == 0);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#tag_size\">tag_size</a> * (<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a> / <a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_integrity_tag_size\">bio_integrity_tag_size</a>);", 
"", 
"int <a class=\"id\" href=\"#bio_integrity_tag\">bio_integrity_tag</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, void *<a class=\"id\" href=\"#tag_buf\">tag_buf</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#set\">set</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_integrity_payload\">bio_integrity_payload</a> *<a class=\"id\" href=\"#bip\">bip</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_integrity\">bi_integrity</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#blk_integrity\">blk_integrity</a> *<a class=\"id\" href=\"#bi\">bi</a> = <a class=\"id\" href=\"#bdev_get_integrity\">bdev_get_integrity</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_sectors\">nr_sectors</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#bip\">bip</a>-><a class=\"id\" href=\"#bip_buf\">bip_buf</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#tag_size\">tag_size</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_sectors\">nr_sectors</a> = <a class=\"id\" href=\"#bio_integrity_hw_sectors\">bio_integrity_hw_sectors</a>(<a class=\"id\" href=\"#bi\">bi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#tag_size\">tag_size</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_sectors\">nr_sectors</a> * <a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#tuple_size\">tuple_size</a> &gt; <a class=\"id\" href=\"#bip\">bip</a>-><a class=\"id\" href=\"#bip_size\">bip_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: tag too big for bio: %u > %u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#nr_sectors\">nr_sectors</a> * <a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#tuple_size\">tuple_size</a>, <a class=\"id\" href=\"#bip\">bip</a>-><a class=\"id\" href=\"#bip_size\">bip_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#set\">set</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#set_tag_fn\">set_tag_fn</a>(<a class=\"id\" href=\"#bip\">bip</a>-><a class=\"id\" href=\"#bip_buf\">bip_buf</a>, <a class=\"id\" href=\"#tag_buf\">tag_buf</a>, <a class=\"id\" href=\"#nr_sectors\">nr_sectors</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#get_tag_fn\">get_tag_fn</a>(<a class=\"id\" href=\"#bip\">bip</a>-><a class=\"id\" href=\"#bip_buf\">bip_buf</a>, <a class=\"id\" href=\"#tag_buf\">tag_buf</a>, <a class=\"id\" href=\"#nr_sectors\">nr_sectors</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bio_integrity_set_tag - Attach a tag buffer to a bio</span>", 
"<span class=\"comment\"> * @bio:<span class=\"ts\"/>bio to attach buffer to</span>", 
"<span class=\"comment\"> * @tag_buf:<span class=\"ts\"/>Pointer to a buffer containing tag data</span>", 
"<span class=\"comment\"> * @len:<span class=\"ts\"/>Length of the included buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Use this function to tag a bio by leveraging the extra</span>", 
"<span class=\"comment\"> * space provided by devices formatted with integrity protection.  The</span>", 
"<span class=\"comment\"> * size of the integrity buffer must be &lt;= to the size reported by</span>", 
"<span class=\"comment\"> * bio_integrity_tag_size().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#bio_integrity_set_tag\">bio_integrity_set_tag</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, void *<a class=\"id\" href=\"#tag_buf\">tag_buf</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#bio_data_dir\">bio_data_dir</a>(<a class=\"id\" href=\"#bio\">bio</a>) != <a class=\"id\" href=\"#WRITE\">WRITE</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bio_integrity_tag\">bio_integrity_tag</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#tag_buf\">tag_buf</a>, <a class=\"id\" href=\"#len\">len</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_integrity_set_tag\">bio_integrity_set_tag</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bio_integrity_get_tag - Retrieve a tag buffer from a bio</span>", 
"<span class=\"comment\"> * @bio:<span class=\"ts\"/>bio to retrieve buffer from</span>", 
"<span class=\"comment\"> * @tag_buf:<span class=\"ts\"/>Pointer to a buffer for the tag data</span>", 
"<span class=\"comment\"> * @len:<span class=\"ts\"/>Length of the target buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Use this function to retrieve the tag buffer from a</span>", 
"<span class=\"comment\"> * completed I/O. The size of the integrity buffer must be &lt;= to the</span>", 
"<span class=\"comment\"> * size reported by bio_integrity_tag_size().</span>", 
];
xr_frag_insert('l/3a/7698b82daf6524c1a4fe602cfe26cc086292db.xr', __xr_tmp);
