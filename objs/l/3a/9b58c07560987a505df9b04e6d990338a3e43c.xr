var __xr_tmp = [
"<span class=\"comment\">/* rwsem.c: R/W semaphores: contention handling functions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Written by David Howells (dhowells@redhat.com).</span>", 
"<span class=\"comment\"> * Derived from arch/i386/kernel/semaphore.c</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rwsem\">rwsem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize an rwsem:</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init_rwsem\">__init_rwsem</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure we are not reinitializing a held semaphore:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_check_no_locks_freed\">debug_check_no_locks_freed</a>((void *)<a class=\"id\" href=\"#sem\">sem</a>, sizeof(*<a class=\"id\" href=\"#sem\">sem</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_init_map\">lockdep_init_map</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#dep_map\">dep_map</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#key\">key</a>, 0);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#RWSEM_UNLOCKED_VALUE\">RWSEM_UNLOCKED_VALUE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__init_rwsem\">__init_rwsem</a>);", 
"", 
"struct <a class=\"id\" href=\"#rwsem_waiter\">rwsem_waiter</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RWSEM_WAITING_FOR_READ\">RWSEM_WAITING_FOR_READ</a><span class=\"ts\"/>0x00000001", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RWSEM_WAITING_FOR_WRITE\">RWSEM_WAITING_FOR_WRITE</a><span class=\"ts\"/>0x00000002", 
"};", 
"", 
"<span class=\"comment\">/* Wake types for __rwsem_do_wake().  Note that RWSEM_WAKE_NO_ACTIVE and</span>", 
"<span class=\"comment\"> * RWSEM_WAKE_READ_OWNED imply that the spinlock must have been kept held</span>", 
"<span class=\"comment\"> * since the rwsem value was observed.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RWSEM_WAKE_ANY\">RWSEM_WAKE_ANY</a>        0 <span class=\"comment\">/* Wake whatever's at head of wait list */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RWSEM_WAKE_NO_ACTIVE\">RWSEM_WAKE_NO_ACTIVE</a>  1 <span class=\"comment\">/* rwsem was observed with no active thread */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RWSEM_WAKE_READ_OWNED\">RWSEM_WAKE_READ_OWNED</a> 2 <span class=\"comment\">/* rwsem was observed to be read owned */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * handle the lock release when processes blocked on it that can now run</span>", 
"<span class=\"comment\"> * - if we come here from up_xxxx(), then:</span>", 
"<span class=\"comment\"> *   - the 'active part' of count (&amp;0x0000ffff) reached 0 (but may have changed)</span>", 
"<span class=\"comment\"> *   - the 'waiting part' of count (&amp;0xffff0000) is -ve (and will still be so)</span>", 
"<span class=\"comment\"> * - there must be someone on the queue</span>", 
"<span class=\"comment\"> * - the spinlock must be held by the caller</span>", 
"<span class=\"comment\"> * - woken process blocks are discarded from the list after having task zeroed</span>", 
"<span class=\"comment\"> * - writers are only woken if downgrading is false</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *", 
"<a class=\"id\" href=\"#__rwsem_do_wake\">__rwsem_do_wake</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>, int <a class=\"id\" href=\"#wake_type\">wake_type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rwsem_waiter\">rwsem_waiter</a> *<a class=\"id\" href=\"#waiter\">waiter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>signed long <a class=\"id\" href=\"#oldcount\">oldcount</a>, <a class=\"id\" href=\"#woken\">woken</a>, <a class=\"id\" href=\"#loop\">loop</a>, <a class=\"id\" href=\"#adjustment\">adjustment</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#rwsem_waiter\">rwsem_waiter</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#RWSEM_WAITING_FOR_WRITE\">RWSEM_WAITING_FOR_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#readers_only\">readers_only</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wake_type\">wake_type</a> == <a class=\"id\" href=\"#RWSEM_WAKE_READ_OWNED\">RWSEM_WAKE_READ_OWNED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Another active reader was observed, so wakeup is not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * likely to succeed. Save the atomic op.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* There's a writer at the front of the queue - try to grant it the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * write lock.  However, we only wake this writer if we can transition</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the active part of the count from 0 -&gt; 1</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#adjustment\">adjustment</a> = <a class=\"id\" href=\"#RWSEM_ACTIVE_WRITE_BIAS\">RWSEM_ACTIVE_WRITE_BIAS</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a> == &amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#adjustment\">adjustment</a> -= <a class=\"id\" href=\"#RWSEM_WAITING_BIAS\">RWSEM_WAITING_BIAS</a>;", 
"", 
" <a class=\"id\" href=\"#try_again_write\">try_again_write</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oldcount\">oldcount</a> = <a class=\"id\" href=\"#rwsem_atomic_update\">rwsem_atomic_update</a>(<a class=\"id\" href=\"#adjustment\">adjustment</a>, <a class=\"id\" href=\"#sem\">sem</a>) - <a class=\"id\" href=\"#adjustment\">adjustment</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#oldcount\">oldcount</a> &amp; <a class=\"id\" href=\"#RWSEM_ACTIVE_MASK\">RWSEM_ACTIVE_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Someone grabbed the sem already */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#undo_write\">undo_write</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We must be careful not to touch 'waiter' after we set -&gt;task = NULL.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is an allocated on the waiter's stack and may become invalid at</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any time after that point (due to a wakeup from another source).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
" <a class=\"id\" href=\"#readers_only\">readers_only</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* If we come here from up_xxxx(), another thread might have reached</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * rwsem_down_failed_common() before we acquired the spinlock and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * woken up a waiter, making it now active.  We prefer to check for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this first in order to not spend too much time with the spinlock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * held if we're not going to be able to wake up readers in the end.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that we do not need to update the rwsem count: any writer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * trying to acquire rwsem will run rwsem_down_write_failed() due</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the waiting threads and block trying to acquire the spinlock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We use a dummy atomic update in order to acquire the cache line</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * exclusively since we expect to succeed and run the final rwsem</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * count adjustment pretty soon.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wake_type\">wake_type</a> == <a class=\"id\" href=\"#RWSEM_WAKE_ANY\">RWSEM_WAKE_ANY</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#rwsem_atomic_update\">rwsem_atomic_update</a>(0, <a class=\"id\" href=\"#sem\">sem</a>) &lt; <a class=\"id\" href=\"#RWSEM_WAITING_BIAS\">RWSEM_WAITING_BIAS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Someone grabbed the sem for write already */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Grant an infinite number of read locks to the readers at the front</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the queue.  Note we increment the 'active part' of the count by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the number of readers before waking any processes up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#woken\">woken</a> = 0;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#woken\">woken</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a> == &amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rwsem_waiter\">rwsem_waiter</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#RWSEM_WAITING_FOR_READ\">RWSEM_WAITING_FOR_READ</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#adjustment\">adjustment</a> = <a class=\"id\" href=\"#woken\">woken</a> * <a class=\"id\" href=\"#RWSEM_ACTIVE_READ_BIAS\">RWSEM_ACTIVE_READ_BIAS</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#RWSEM_WAITING_FOR_READ\">RWSEM_WAITING_FOR_READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* hit end of list above */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#adjustment\">adjustment</a> -= <a class=\"id\" href=\"#RWSEM_WAITING_BIAS\">RWSEM_WAITING_BIAS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rwsem_atomic_add\">rwsem_atomic_add</a>(<a class=\"id\" href=\"#adjustment\">adjustment</a>, <a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#loop\">loop</a> = <a class=\"id\" href=\"#woken\">woken</a>; <a class=\"id\" href=\"#loop\">loop</a> &gt; 0; <a class=\"id\" href=\"#loop\">loop</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#rwsem_waiter\">rwsem_waiter</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#prev\">prev</a> = &amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>;", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sem\">sem</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* undo the change to the active count, but check for a transition</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1-&gt;0 */</span>", 
" <a class=\"id\" href=\"#undo_write\">undo_write</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rwsem_atomic_update\">rwsem_atomic_update</a>(-<a class=\"id\" href=\"#adjustment\">adjustment</a>, <a class=\"id\" href=\"#sem\">sem</a>) &amp; <a class=\"id\" href=\"#RWSEM_ACTIVE_MASK\">RWSEM_ACTIVE_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#try_again_write\">try_again_write</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * wait for a lock to be granted</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> <a class=\"id\" href=\"#__sched\">__sched</a> *", 
"<a class=\"id\" href=\"#rwsem_down_failed_common\">rwsem_down_failed_common</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#flags\">flags</a>, signed long <a class=\"id\" href=\"#adjustment\">adjustment</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rwsem_waiter\">rwsem_waiter</a> <a class=\"id\" href=\"#waiter\">waiter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>signed long <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_task_state\">set_task_state</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set up my own style of waitqueue */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>.<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#adjustment\">adjustment</a> += <a class=\"id\" href=\"#RWSEM_WAITING_BIAS\">RWSEM_WAITING_BIAS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>.<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we're now waiting on the lock, but no longer actively locking */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#rwsem_atomic_update\">rwsem_atomic_update</a>(<a class=\"id\" href=\"#adjustment\">adjustment</a>, <a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If there are no active locks, wake the front queued process(es) up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Alternatively, if we're called from a failed down_write(), there</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * were already threads queued before us and there are no active</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * writers, the lock must be read owned; so we try to wake any read</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * locks that were queued ahead of us. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> == <a class=\"id\" href=\"#RWSEM_WAITING_BIAS\">RWSEM_WAITING_BIAS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem\">sem</a> = <a class=\"id\" href=\"#__rwsem_do_wake\">__rwsem_do_wake</a>(<a class=\"id\" href=\"#sem\">sem</a>, <a class=\"id\" href=\"#RWSEM_WAKE_NO_ACTIVE\">RWSEM_WAKE_NO_ACTIVE</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#RWSEM_WAITING_BIAS\">RWSEM_WAITING_BIAS</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#adjustment\">adjustment</a> == -<a class=\"id\" href=\"#RWSEM_ACTIVE_WRITE_BIAS\">RWSEM_ACTIVE_WRITE_BIAS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem\">sem</a> = <a class=\"id\" href=\"#__rwsem_do_wake\">__rwsem_do_wake</a>(<a class=\"id\" href=\"#sem\">sem</a>, <a class=\"id\" href=\"#RWSEM_WAKE_READ_OWNED\">RWSEM_WAKE_READ_OWNED</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* wait to be given the lock */</span>", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#waiter\">waiter</a>.<a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_task_state\">set_task_state</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sem\">sem</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * wait for the read lock to be granted</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#asmregparm\">asmregparm</a> struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> <a class=\"id\" href=\"#__sched\">__sched</a> *", 
"<a class=\"id\" href=\"#rwsem_down_read_failed\">rwsem_down_read_failed</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rwsem_down_failed_common\">rwsem_down_failed_common</a>(<a class=\"id\" href=\"#sem\">sem</a>, <a class=\"id\" href=\"#RWSEM_WAITING_FOR_READ\">RWSEM_WAITING_FOR_READ</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>-<a class=\"id\" href=\"#RWSEM_ACTIVE_READ_BIAS\">RWSEM_ACTIVE_READ_BIAS</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * wait for the write lock to be granted</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#asmregparm\">asmregparm</a> struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> <a class=\"id\" href=\"#__sched\">__sched</a> *", 
"<a class=\"id\" href=\"#rwsem_down_write_failed\">rwsem_down_write_failed</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rwsem_down_failed_common\">rwsem_down_failed_common</a>(<a class=\"id\" href=\"#sem\">sem</a>, <a class=\"id\" href=\"#RWSEM_WAITING_FOR_WRITE\">RWSEM_WAITING_FOR_WRITE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>-<a class=\"id\" href=\"#RWSEM_ACTIVE_WRITE_BIAS\">RWSEM_ACTIVE_WRITE_BIAS</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * handle waking up a waiter on the semaphore</span>", 
"<span class=\"comment\"> * - up_read/up_write has decremented the active part of count if we come here</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#asmregparm\">asmregparm</a> struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#rwsem_wake\">rwsem_wake</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do nothing if list empty */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem\">sem</a> = <a class=\"id\" href=\"#__rwsem_do_wake\">__rwsem_do_wake</a>(<a class=\"id\" href=\"#sem\">sem</a>, <a class=\"id\" href=\"#RWSEM_WAKE_ANY\">RWSEM_WAKE_ANY</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sem\">sem</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * downgrade a write lock into a read lock</span>", 
"<span class=\"comment\"> * - caller incremented waiting part of count and discovered it still negative</span>", 
"<span class=\"comment\"> * - just wake up any readers at the front of the queue</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#asmregparm\">asmregparm</a> struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#rwsem_downgrade_wake\">rwsem_downgrade_wake</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do nothing if list empty */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem\">sem</a> = <a class=\"id\" href=\"#__rwsem_do_wake\">__rwsem_do_wake</a>(<a class=\"id\" href=\"#sem\">sem</a>, <a class=\"id\" href=\"#RWSEM_WAKE_READ_OWNED\">RWSEM_WAKE_READ_OWNED</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sem\">sem</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#rwsem_down_read_failed\">rwsem_down_read_failed</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#rwsem_down_write_failed\">rwsem_down_write_failed</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#rwsem_wake\">rwsem_wake</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#rwsem_downgrade_wake\">rwsem_downgrade_wake</a>);", 
];
xr_frag_insert('l/3a/9b58c07560987a505df9b04e6d990338a3e43c.xr', __xr_tmp);
