var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#submit_bh\">submit_bh</a>(<a class=\"id\" href=\"#READ\">READ</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#block_read_full_page\">block_read_full_page</a>);", 
"", 
"<span class=\"comment\">/* utility function for filesystems that need to do work on expanding</span>", 
"<span class=\"comment\"> * truncates.  Uses filesystem pagecache writes to allow the filesystem to</span>", 
"<span class=\"comment\"> * deal with the hole.  </span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#generic_cont_expand_simple\">generic_cont_expand_simple</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#fsdata\">fsdata</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#inode_newsize_ok\">inode_newsize_ok</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#pagecache_write_begin\">pagecache_write_begin</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#size\">size</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#AOP_FLAG_UNINTERRUPTIBLE\">AOP_FLAG_UNINTERRUPTIBLE</a>|<a class=\"id\" href=\"#AOP_FLAG_CONT_EXPAND\">AOP_FLAG_CONT_EXPAND</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#pagecache_write_end\">pagecache_write_end</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#size\">size</a>, 0, 0, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#err\">err</a> &gt; 0);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_cont_expand_simple\">generic_cont_expand_simple</a>);", 
"", 
"static int <a class=\"id\" href=\"#cont_expand_zero\">cont_expand_zero</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#bytes\">bytes</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a> = 1 << <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#fsdata\">fsdata</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#curidx\">curidx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#curpos\">curpos</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#zerofrom\">zerofrom</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#pos\">pos</a> >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#pos\">pos</a> &amp; ~<a class=\"id\" href=\"#PAGE_CACHE_MASK\">PAGE_CACHE_MASK</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#index\">index</a> &gt; (<a class=\"id\" href=\"#curidx\">curidx</a> = (<a class=\"id\" href=\"#curpos\">curpos</a> = *<a class=\"id\" href=\"#bytes\">bytes</a>)>><a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zerofrom\">zerofrom</a> = <a class=\"id\" href=\"#curpos\">curpos</a> &amp; ~<a class=\"id\" href=\"#PAGE_CACHE_MASK\">PAGE_CACHE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zerofrom\">zerofrom</a> &amp; (<a class=\"id\" href=\"#blocksize\">blocksize</a>-1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#bytes\">bytes</a> |= (<a class=\"id\" href=\"#blocksize\">blocksize</a>-1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#bytes\">bytes</a>)++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> - <a class=\"id\" href=\"#zerofrom\">zerofrom</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#pagecache_write_begin\">pagecache_write_begin</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#curpos\">curpos</a>, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#AOP_FLAG_UNINTERRUPTIBLE\">AOP_FLAG_UNINTERRUPTIBLE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zero_user\">zero_user</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#zerofrom\">zerofrom</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#pagecache_write_end\">pagecache_write_end</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#curpos\">curpos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#err\">err</a> != <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#balance_dirty_pages_ratelimited\">balance_dirty_pages_ratelimited</a>(<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* page covers the boundary, find the boundary offset */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> == <a class=\"id\" href=\"#curidx\">curidx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zerofrom\">zerofrom</a> = <a class=\"id\" href=\"#curpos\">curpos</a> &amp; ~<a class=\"id\" href=\"#PAGE_CACHE_MASK\">PAGE_CACHE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if we will expand the thing last block will be filled */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> <= <a class=\"id\" href=\"#zerofrom\">zerofrom</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zerofrom\">zerofrom</a> &amp; (<a class=\"id\" href=\"#blocksize\">blocksize</a>-1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#bytes\">bytes</a> |= (<a class=\"id\" href=\"#blocksize\">blocksize</a>-1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#bytes\">bytes</a>)++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#offset\">offset</a> - <a class=\"id\" href=\"#zerofrom\">zerofrom</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#pagecache_write_begin\">pagecache_write_begin</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#curpos\">curpos</a>, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#AOP_FLAG_UNINTERRUPTIBLE\">AOP_FLAG_UNINTERRUPTIBLE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zero_user\">zero_user</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#zerofrom\">zerofrom</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#pagecache_write_end\">pagecache_write_end</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#curpos\">curpos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#err\">err</a> != <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For moronic filesystems that do not allow holes in file.</span>", 
"<span class=\"comment\"> * We may have to extend the file.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cont_write_begin\">cont_write_begin</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pagep\">pagep</a>, void **<a class=\"id\" href=\"#fsdata\">fsdata</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_block_t\">get_block_t</a> *<a class=\"id\" href=\"#get_block\">get_block</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#bytes\">bytes</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a> = 1 << <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#zerofrom\">zerofrom</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#cont_expand_zero\">cont_expand_zero</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#bytes\">bytes</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zerofrom\">zerofrom</a> = *<a class=\"id\" href=\"#bytes\">bytes</a> &amp; ~<a class=\"id\" href=\"#PAGE_CACHE_MASK\">PAGE_CACHE_MASK</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a>+<a class=\"id\" href=\"#len\">len</a> &gt; *<a class=\"id\" href=\"#bytes\">bytes</a> && <a class=\"id\" href=\"#zerofrom\">zerofrom</a> &amp; (<a class=\"id\" href=\"#blocksize\">blocksize</a>-1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#bytes\">bytes</a> |= (<a class=\"id\" href=\"#blocksize\">blocksize</a>-1);", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#bytes\">bytes</a>)++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#block_write_begin\">block_write_begin</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pagep\">pagep</a>, <a class=\"id\" href=\"#get_block\">get_block</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#cont_write_begin\">cont_write_begin</a>);", 
"", 
"int <a class=\"id\" href=\"#block_commit_write\">block_commit_write</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned <a class=\"id\" href=\"#from\">from</a>, unsigned <a class=\"id\" href=\"#to\">to</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__block_commit_write\">__block_commit_write</a>(<a class=\"id\" href=\"#inode\">inode</a>,<a class=\"id\" href=\"#page\">page</a>,<a class=\"id\" href=\"#from\">from</a>,<a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#block_commit_write\">block_commit_write</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * block_page_mkwrite() is not allowed to change the file size as it gets</span>", 
"<span class=\"comment\"> * called from a page fault handler when a page is first dirtied. Hence we must</span>", 
"<span class=\"comment\"> * be careful to check for EOF conditions here. We set the page up correctly</span>", 
"<span class=\"comment\"> * for a written page which means we get ENOSPC checking when writing into</span>", 
"<span class=\"comment\"> * holes and correct delalloc and unwritten extent mapping on filesystems that</span>", 
"<span class=\"comment\"> * support these features.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We are not allowed to take the i_mutex here so we have to play games to</span>", 
"<span class=\"comment\"> * protect against truncate races as the page could now be beyond EOF.  Because</span>", 
"<span class=\"comment\"> * truncate writes the inode size before removing pages, once we have the</span>", 
"<span class=\"comment\"> * page lock we can determine safely if the page is beyond EOF. If it is not</span>", 
"<span class=\"comment\"> * beyond EOF, then the page is guaranteed safe against truncation until we</span>", 
"<span class=\"comment\"> * unlock the page.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#block_page_mkwrite\">block_page_mkwrite</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, struct <a class=\"id\" href=\"#vm_fault\">vm_fault</a> *<a class=\"id\" href=\"#vmf\">vmf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#get_block_t\">get_block_t</a> <a class=\"id\" href=\"#get_block\">get_block</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#vmf\">vmf</a>-><a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_NOPAGE\">VM_FAULT_NOPAGE</a>; <span class=\"comment\">/* make the VM retry the fault */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> != <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#page_offset\">page_offset</a>(<a class=\"id\" href=\"#page\">page</a>) &gt; <a class=\"id\" href=\"#size\">size</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* page got truncated out from underneath us */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* page is wholly or partially inside EOF */</span>", 
"<span class=\"ts\"/>if (((<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> + 1) << <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>) &gt; <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#size\">size</a> &amp; ~<a class=\"id\" href=\"#PAGE_CACHE_MASK\">PAGE_CACHE_MASK</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#block_prepare_write\">block_prepare_write</a>(<a class=\"id\" href=\"#page\">page</a>, 0, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#get_block\">get_block</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#block_commit_write\">block_commit_write</a>(<a class=\"id\" href=\"#page\">page</a>, 0, <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else <span class=\"comment\">/* -ENOSPC, -EIO, etc */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_SIGBUS\">VM_FAULT_SIGBUS</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_LOCKED\">VM_FAULT_LOCKED</a>;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#block_page_mkwrite\">block_page_mkwrite</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * nobh_write_begin()'s prereads are special: the buffer_heads are freed</span>", 
"<span class=\"comment\"> * immediately, while under the page lock.  So it needs a special end_io</span>", 
"<span class=\"comment\"> * handler which does not touch the bh after unlocking it.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#end_buffer_read_nobh\">end_buffer_read_nobh</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, int <a class=\"id\" href=\"#uptodate\">uptodate</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__end_buffer_read_notouch\">__end_buffer_read_notouch</a>(<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#uptodate\">uptodate</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Attach the singly-linked list of buffers created by nobh_write_begin, to</span>", 
"<span class=\"comment\"> * the page (converting it to circular linked list and taking care of page</span>", 
"<span class=\"comment\"> * dirty races).</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#attach_nobh_buffers\">attach_nobh_buffers</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_dirty\">set_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attach_page_buffers\">attach_page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * On entry, the page is fully not uptodate.</span>", 
"<span class=\"comment\"> * On exit the page is fully uptodate in the areas outside (from,to)</span>", 
"<span class=\"comment\"> * The filesystem needs to handle block truncation upon failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#nobh_write_begin\">nobh_write_begin</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pagep\">pagep</a>, void **<a class=\"id\" href=\"#fsdata\">fsdata</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_block_t\">get_block_t</a> *<a class=\"id\" href=\"#get_block\">get_block</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>const unsigned <a class=\"id\" href=\"#blkbits\">blkbits</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/>const unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a> = 1 << <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#head\">head</a>, *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#block_in_page\">block_in_page</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#block_start\">block_start</a>, <a class=\"id\" href=\"#block_end\">block_end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block_in_file\">block_in_file</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_reads\">nr_reads</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_mapped_to_disk\">is_mapped_to_disk</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#pos\">pos</a> >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#pos\">pos</a> &amp; (<a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#from\">from</a> + <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#grab_cache_page_write_begin\">grab_cache_page_write_begin</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pagep\">pagep</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#fsdata\">fsdata</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pagep\">pagep</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#block_write_begin\">block_write_begin</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pagep\">pagep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#get_block\">get_block</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageMappedToDisk\">PageMappedToDisk</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allocate buffers so that we can keep track of state, and potentially</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * attach them to the page if an error occurs. In the common case of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no error, they will just be freed again without ever being attached</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the page (which is all OK, because we're under the page lock).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Be careful: the buffer linked list is a NULL terminated one, rather</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * than the circular one we're used to.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#alloc_page_buffers\">alloc_page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#blocksize\">blocksize</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_release\">out_release</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_in_file\">block_in_file</a> = (<a class=\"id\" href=\"#sector_t\">sector_t</a>)<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> << (<a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a> - <a class=\"id\" href=\"#blkbits\">blkbits</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We loop across all blocks in the page, whether or not they are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * part of the affected region.  This is so we can discover if the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page is fully mapped-to-disk.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#block_start\">block_start</a> = 0, <a class=\"id\" href=\"#block_in_page\">block_in_page</a> = 0, <a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#block_start\">block_start</a> &lt; <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#block_in_page\">block_in_page</a>++, <a class=\"id\" href=\"#block_start\">block_start</a> += <a class=\"id\" href=\"#blocksize\">blocksize</a>, <a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#create\">create</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_end\">block_end</a> = <a class=\"id\" href=\"#block_start\">block_start</a> + <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_state\">b_state</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#create\">create</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#block_start\">block_start</a> >= <a class=\"id\" href=\"#to\">to</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#create\">create</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_block\">get_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#block_in_file\">block_in_file</a> + <a class=\"id\" href=\"#block_in_page\">block_in_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#create\">create</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed\">failed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_mapped_to_disk\">is_mapped_to_disk</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_new\">buffer_new</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmap_underlying_metadata\">unmap_underlying_metadata</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_new\">buffer_new</a>(<a class=\"id\" href=\"#bh\">bh</a>) || !<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zero_user_segments\">zero_user_segments</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#block_start\">block_start</a>, <a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#block_end\">block_end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;<span class=\"ts\"/><span class=\"comment\">/* reiserfs does this */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#block_start\">block_start</a> &lt; <a class=\"id\" href=\"#from\">from</a> || <a class=\"id\" href=\"#block_end\">block_end</a> &gt; <a class=\"id\" href=\"#to\">to</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_end_io\">b_end_io</a> = <a class=\"id\" href=\"#end_buffer_read_nobh\">end_buffer_read_nobh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#submit_bh\">submit_bh</a>(<a class=\"id\" href=\"#READ\">READ</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_reads\">nr_reads</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_reads\">nr_reads</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The page is locked, so these buffers are protected from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * any VM or truncate activity.  Hence we don't need to care</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for the buffer_head refcounts.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>; <a class=\"id\" href=\"#bh\">bh</a>; <a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_buffer\">wait_on_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed\">failed</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_mapped_to_disk\">is_mapped_to_disk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageMappedToDisk\">SetPageMappedToDisk</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#fsdata\">fsdata</a> = <a class=\"id\" href=\"#head\">head</a>; <span class=\"comment\">/* to be released by nobh_write_end */</span>", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#failed\">failed</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Error recovery is a bit difficult. We need to zero out blocks that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * were newly allocated, and dirty them to ensure they get written out.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Buffers need to be attached to the page at this point, otherwise</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the handling of potential IO errors during writeout would be hard</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (could try doing synchronous writeout, but what if that fails too?)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attach_nobh_buffers\">attach_nobh_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_zero_new_buffers\">page_zero_new_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#to\">to</a>);", 
"", 
"<a class=\"id\" href=\"#out_release\">out_release</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pagep\">pagep</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nobh_write_begin\">nobh_write_begin</a>);", 
"", 
"int <a class=\"id\" href=\"#nobh_write_end\">nobh_write_end</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#copied\">copied</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, void *<a class=\"id\" href=\"#fsdata\">fsdata</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#fsdata\">fsdata</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#fsdata\">fsdata</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#copied\">copied</a> &lt; <a class=\"id\" href=\"#len\">len</a>) && <a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attach_nobh_buffers\">attach_nobh_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#generic_write_end\">generic_write_end</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copied\">copied</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SetPageUptodate\">SetPageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a>+<a class=\"id\" href=\"#copied\">copied</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_size_write\">i_size_write</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#pos\">pos</a>+<a class=\"id\" href=\"#copied\">copied</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_buffer_head\">free_buffer_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#copied\">copied</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nobh_write_end\">nobh_write_end</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * nobh_writepage() - based on block_full_write_page() except</span>", 
"<span class=\"comment\"> * that it tries to operate without attaching bufferheads to</span>", 
"<span class=\"comment\"> * the page.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#nobh_writepage\">nobh_writepage</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#get_block_t\">get_block_t</a> *<a class=\"id\" href=\"#get_block\">get_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> * const <a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#i_size\">i_size</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#end_index\">end_index</a> = <a class=\"id\" href=\"#i_size\">i_size</a> >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Is the page fully inside i_size? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> &lt; <a class=\"id\" href=\"#end_index\">end_index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Is the page fully outside i_size? (truncate in progress) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#i_size\">i_size</a> &amp; (<a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>-1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> >= <a class=\"id\" href=\"#end_index\">end_index</a>+1 || !<a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The page may have dirty, unmapped buffers.  For example,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * they may have been added in ext3_writepage().  Make them</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * freeable here, so the page does not leak.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"#if 0", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Not really sure about this  - do we need this ? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#invalidatepage\">invalidatepage</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#invalidatepage\">invalidatepage</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0; <span class=\"comment\">/* don't care */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The page straddles i_size.  It must be zeroed out on each and every</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * writepage invocation because it may be mmapped.  \"A file is mapped</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in multiples of the page size.  For a file that is not a multiple of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the  page size, the remaining memory is zeroed when mapped, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * writes to that region are not written out to the file.\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zero_user_segment\">zero_user_segment</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mpage_writepage\">mpage_writepage</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#get_block\">get_block</a>, <a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__block_write_full_page\">__block_write_full_page</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#get_block\">get_block</a>, <a class=\"id\" href=\"#wbc\">wbc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#end_buffer_async_write\">end_buffer_async_write</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nobh_writepage\">nobh_writepage</a>);", 
"", 
"int <a class=\"id\" href=\"#nobh_truncate_page\">nobh_truncate_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#get_block_t\">get_block_t</a> *<a class=\"id\" href=\"#get_block\">get_block</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#from\">from</a> >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#from\">from</a> &amp; (<a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>-1);", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#iblock\">iblock</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> <a class=\"id\" href=\"#map_bh\">map_bh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocksize\">blocksize</a> = 1 << <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#offset\">offset</a> &amp; (<a class=\"id\" href=\"#blocksize\">blocksize</a> - 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Block boundary? Nothing to do */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#length\">length</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#blocksize\">blocksize</a> - <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iblock\">iblock</a> = (<a class=\"id\" href=\"#sector_t\">sector_t</a>)<a class=\"id\" href=\"#index\">index</a> << (<a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a> - <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#grab_cache_page\">grab_cache_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<a class=\"id\" href=\"#has_buffers\">has_buffers</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#block_truncate_page\">block_truncate_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#get_block\">get_block</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find the buffer that contains \"offset\" */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#offset\">offset</a> >= <a class=\"id\" href=\"#pos\">pos</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iblock\">iblock</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> += <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map_bh\">map_bh</a>.<a class=\"id\" href=\"#b_size\">b_size</a> = <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map_bh\">map_bh</a>.<a class=\"id\" href=\"#b_state\">b_state</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#get_block\">get_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iblock\">iblock</a>, &amp;<a class=\"id\" href=\"#map_bh\">map_bh</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* unmapped? It's a hole - nothing to do */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(&amp;<a class=\"id\" href=\"#map_bh\">map_bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ok, it's mapped. Make sure it's up-to-date */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#readpage\">readpage</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#has_buffers\">has_buffers</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zero_user\">zero_user</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nobh_truncate_page\">nobh_truncate_page</a>);", 
"", 
"int <a class=\"id\" href=\"#block_truncate_page\">block_truncate_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#get_block_t\">get_block_t</a> *<a class=\"id\" href=\"#get_block\">get_block</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#from\">from</a> >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#from\">from</a> &amp; (<a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>-1);", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#iblock\">iblock</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocksize\">blocksize</a> = 1 << <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#offset\">offset</a> &amp; (<a class=\"id\" href=\"#blocksize\">blocksize</a> - 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Block boundary? Nothing to do */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#length\">length</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#blocksize\">blocksize</a> - <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iblock\">iblock</a> = (<a class=\"id\" href=\"#sector_t\">sector_t</a>)<a class=\"id\" href=\"#index\">index</a> << (<a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a> - <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>);", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#grab_cache_page\">grab_cache_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#create_empty_buffers\">create_empty_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#blocksize\">blocksize</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find the buffer that contains \"offset\" */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#offset\">offset</a> >= <a class=\"id\" href=\"#pos\">pos</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iblock\">iblock</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> += <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a> != <a class=\"id\" href=\"#blocksize\">blocksize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#get_block\">get_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iblock\">iblock</a>, <a class=\"id\" href=\"#bh\">bh</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* unmapped? It's a hole - nothing to do */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ok, it's mapped. Make sure it's up-to-date */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>) && !<a class=\"id\" href=\"#buffer_delay\">buffer_delay</a>(<a class=\"id\" href=\"#bh\">bh</a>) && !<a class=\"id\" href=\"#buffer_unwritten\">buffer_unwritten</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ll_rw_block\">ll_rw_block</a>(<a class=\"id\" href=\"#READ\">READ</a>, 1, &amp;<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_buffer\">wait_on_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Uhhuh. Read error. Complain and punt. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zero_user\">zero_user</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_dirty\">mark_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#block_truncate_page\">block_truncate_page</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The generic -&gt;writepage function for buffer-backed address_spaces</span>", 
"<span class=\"comment\"> * this form passes in the end_io handler used to finish the IO.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#block_write_full_page_endio\">block_write_full_page_endio</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#get_block_t\">get_block_t</a> *<a class=\"id\" href=\"#get_block\">get_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#bh_end_io_t\">bh_end_io_t</a> *<a class=\"id\" href=\"#handler\">handler</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> * const <a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#i_size\">i_size</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#end_index\">end_index</a> = <a class=\"id\" href=\"#i_size\">i_size</a> >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Is the page fully inside i_size? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> &lt; <a class=\"id\" href=\"#end_index\">end_index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__block_write_full_page\">__block_write_full_page</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#get_block\">get_block</a>, <a class=\"id\" href=\"#wbc\">wbc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#handler\">handler</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Is the page fully outside i_size? (truncate in progress) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#i_size\">i_size</a> &amp; (<a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>-1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> >= <a class=\"id\" href=\"#end_index\">end_index</a>+1 || !<a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The page may have dirty, unmapped buffers.  For example,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * they may have been added in ext3_writepage().  Make them</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * freeable here, so the page does not leak.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_invalidatepage\">do_invalidatepage</a>(<a class=\"id\" href=\"#page\">page</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0; <span class=\"comment\">/* don't care */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The page straddles i_size.  It must be zeroed out on each and every</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * writepage invocation because it may be mmapped.  \"A file is mapped</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in multiples of the page size.  For a file that is not a multiple of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the  page size, the remaining memory is zeroed when mapped, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * writes to that region are not written out to the file.\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zero_user_segment\">zero_user_segment</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__block_write_full_page\">__block_write_full_page</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#get_block\">get_block</a>, <a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#handler\">handler</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#block_write_full_page_endio\">block_write_full_page_endio</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The generic -&gt;writepage function for buffer-backed address_spaces</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#block_write_full_page\">block_write_full_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#get_block_t\">get_block_t</a> *<a class=\"id\" href=\"#get_block\">get_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#block_write_full_page_endio\">block_write_full_page_endio</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#get_block\">get_block</a>, <a class=\"id\" href=\"#wbc\">wbc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#end_buffer_async_write\">end_buffer_async_write</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#block_write_full_page\">block_write_full_page</a>);", 
"", 
"<a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#generic_block_bmap\">generic_block_bmap</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#get_block_t\">get_block_t</a> *<a class=\"id\" href=\"#get_block\">get_block</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#b_state\">b_state</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#b_blocknr\">b_blocknr</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#b_size\">b_size</a> = 1 << <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_block\">get_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#block\">block</a>, &amp;<a class=\"id\" href=\"#tmp\">tmp</a>, 0);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_block_bmap\">generic_block_bmap</a>);", 
"", 
"static void <a class=\"id\" href=\"#end_bio_bh_io_sync\">end_bio_bh_io_sync</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, int <a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#BIO_EOPNOTSUPP\">BIO_EOPNOTSUPP</a>, &amp;<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#BH_Eopnotsupp\">BH_Eopnotsupp</a>, &amp;<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_state\">b_state</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a> (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#BIO_QUIET\">BIO_QUIET</a>,&amp;<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#BH_Quiet\">BH_Quiet</a>, &amp;<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_state\">b_state</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_end_io\">b_end_io</a>(<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#BIO_UPTODATE\">BIO_UPTODATE</a>, &amp;<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#submit_bh\">submit_bh</a>(int <a class=\"id\" href=\"#rw\">rw</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> * <a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#buffer_locked\">buffer_locked</a>(<a class=\"id\" href=\"#bh\">bh</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_end_io\">b_end_io</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#buffer_delay\">buffer_delay</a>(<a class=\"id\" href=\"#bh\">bh</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#buffer_unwritten\">buffer_unwritten</a>(<a class=\"id\" href=\"#bh\">bh</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only clear out a write error when rewriting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_set_buffer_req\">test_set_buffer_req</a>(<a class=\"id\" href=\"#bh\">bh</a>) && (<a class=\"id\" href=\"#rw\">rw</a> &amp; <a class=\"id\" href=\"#WRITE\">WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_write_io_error\">clear_buffer_write_io_error</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from here on down, it's all bio -- do the initial mapping,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * submit_bio -&gt; generic_make_request may further map this bio around</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio_alloc\">bio_alloc</a>(<a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a>, 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a> * (<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a> >> 9);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>[0].<a class=\"id\" href=\"#bv_page\">bv_page</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_page\">b_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>[0].<a class=\"id\" href=\"#bv_len\">bv_len</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>[0].<a class=\"id\" href=\"#bv_offset\">bv_offset</a> = <a class=\"id\" href=\"#bh_offset\">bh_offset</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_vcnt\">bi_vcnt</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_idx\">bi_idx</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_end_io\">bi_end_io</a> = <a class=\"id\" href=\"#end_bio_bh_io_sync\">end_bio_bh_io_sync</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a> = <a class=\"id\" href=\"#bh\">bh</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_get\">bio_get</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#submit_bio\">submit_bio</a>(<a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_flagged\">bio_flagged</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#BIO_EOPNOTSUPP\">BIO_EOPNOTSUPP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#submit_bh\">submit_bh</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ll_rw_block: low-level access to block devices (DEPRECATED)</span>", 
"<span class=\"comment\"> * @rw: whether to %READ or %WRITE or maybe %READA (readahead)</span>", 
"<span class=\"comment\"> * @nr: number of &amp;struct buffer_heads in the array</span>", 
"<span class=\"comment\"> * @bhs: array of pointers to &amp;struct buffer_head</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ll_rw_block() takes an array of pointers to &amp;struct buffer_heads, and</span>", 
"<span class=\"comment\"> * requests an I/O operation on them, either a %READ or a %WRITE.  The third</span>", 
"<span class=\"comment\"> * %READA option is described in the documentation for generic_make_request()</span>", 
"<span class=\"comment\"> * which ll_rw_block() calls.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function drops any buffer that it cannot get a lock on (with the</span>", 
"<span class=\"comment\"> * BH_Lock state bit), any buffer that appears to be clean when doing a write</span>", 
"<span class=\"comment\"> * request, and any buffer that appears to be up-to-date when doing read</span>", 
"<span class=\"comment\"> * request.  Further it marks as clean buffers that are processed for</span>", 
"<span class=\"comment\"> * writing (the buffer cache won't assume that they are actually clean</span>", 
"<span class=\"comment\"> * until the buffer gets unlocked).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ll_rw_block sets b_end_io to simple completion handler that marks</span>", 
"<span class=\"comment\"> * the buffer up-to-date (if approriate), unlocks the buffer and wakes</span>", 
"<span class=\"comment\"> * any waiters. </span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All of the buffers must be for the same device, and must also be a</span>", 
"<span class=\"comment\"> * multiple of the current approved size for the device.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ll_rw_block\">ll_rw_block</a>(int <a class=\"id\" href=\"#rw\">rw</a>, int <a class=\"id\" href=\"#nr\">nr</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bhs\">bhs</a>[])", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr\">nr</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bhs\">bhs</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#trylock_buffer\">trylock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rw\">rw</a> == <a class=\"id\" href=\"#WRITE\">WRITE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_clear_buffer_dirty\">test_clear_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_end_io\">b_end_io</a> = <a class=\"id\" href=\"#end_buffer_write_sync\">end_buffer_write_sync</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#submit_bh\">submit_bh</a>(<a class=\"id\" href=\"#WRITE\">WRITE</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_end_io\">b_end_io</a> = <a class=\"id\" href=\"#end_buffer_read_sync\">end_buffer_read_sync</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#submit_bh\">submit_bh</a>(<a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ll_rw_block\">ll_rw_block</a>);", 
"", 
"void <a class=\"id\" href=\"#write_dirty_buffer\">write_dirty_buffer</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, int <a class=\"id\" href=\"#rw\">rw</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_clear_buffer_dirty\">test_clear_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_end_io\">b_end_io</a> = <a class=\"id\" href=\"#end_buffer_write_sync\">end_buffer_write_sync</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#submit_bh\">submit_bh</a>(<a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#write_dirty_buffer\">write_dirty_buffer</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For a data-integrity writeout, we need to wait upon any in-progress I/O</span>", 
"<span class=\"comment\"> * and then start new I/O and then wait upon it.  The caller must have a ref on</span>", 
"<span class=\"comment\"> * the buffer_head.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__sync_dirty_buffer\">__sync_dirty_buffer</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, int <a class=\"id\" href=\"#rw\">rw</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_count\">b_count</a>) &lt; 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_clear_buffer_dirty\">test_clear_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_end_io\">b_end_io</a> = <a class=\"id\" href=\"#end_buffer_write_sync\">end_buffer_write_sync</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#submit_bh\">submit_bh</a>(<a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_buffer\">wait_on_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_eopnotsupp\">buffer_eopnotsupp</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_eopnotsupp\">clear_buffer_eopnotsupp</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a> && !<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__sync_dirty_buffer\">__sync_dirty_buffer</a>);", 
"", 
"int <a class=\"id\" href=\"#sync_dirty_buffer\">sync_dirty_buffer</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__sync_dirty_buffer\">__sync_dirty_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#WRITE_SYNC\">WRITE_SYNC</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sync_dirty_buffer\">sync_dirty_buffer</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * try_to_free_buffers() checks if all the buffers on this particular page</span>", 
"<span class=\"comment\"> * are unused, and releases them if so.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Exclusion against try_to_free_buffers may be obtained by either</span>", 
"<span class=\"comment\"> * locking the page or by holding its mapping's private_lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the page is dirty but all the buffers are clean then we need to</span>", 
"<span class=\"comment\"> * be sure to mark the page clean as well.  This is because the page</span>", 
"<span class=\"comment\"> * may be against a block device, and a later reattachment of buffers</span>", 
"<span class=\"comment\"> * to a dirty page will set *all* buffers dirty.  Which would corrupt</span>", 
"<span class=\"comment\"> * filesystem data on the same device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The same applies to regular filesystem pages: if all the buffers are</span>", 
"<span class=\"comment\"> * clean then we set the page clean and proceed.  To do that, we require</span>", 
"<span class=\"comment\"> * total exclusion from __set_page_dirty_buffers().  That is obtained with</span>", 
"<span class=\"comment\"> * private_lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * try_to_free_buffers() is non-blocking.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#buffer_busy\">buffer_busy</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_count\">b_count</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_state\">b_state</a> &amp; ((1 << <a class=\"id\" href=\"#BH_Dirty\">BH_Dirty</a>) | (1 << <a class=\"id\" href=\"#BH_Lock\">BH_Lock</a>)));", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#drop_buffers\">drop_buffers</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> **<a class=\"id\" href=\"#buffers_to_free\">buffers_to_free</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_write_io_error\">buffer_write_io_error</a>(<a class=\"id\" href=\"#bh\">bh</a>) && <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#AS_EIO\">AS_EIO</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_busy\">buffer_busy</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed\">failed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_assoc_map\">b_assoc_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__remove_assoc_queue\">__remove_assoc_queue</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#buffers_to_free\">buffers_to_free</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__clear_page_buffers\">__clear_page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return 1;", 
"<a class=\"id\" href=\"#failed\">failed</a>:", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#try_to_free_buffers\">try_to_free_buffers</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> * const <a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#buffers_to_free\">buffers_to_free</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageWriteback\">PageWriteback</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* can this still happen? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#drop_buffers\">drop_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#buffers_to_free\">buffers_to_free</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#drop_buffers\">drop_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#buffers_to_free\">buffers_to_free</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the filesystem writes its buffers by hand (eg ext3)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then we can have clean buffers against a dirty page.  We</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * clean the page here; otherwise the VM will never notice</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that the filesystem did any IO at all.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Also, during truncate, discard_buffer will have marked all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the page's buffers clean.  We discover that here and clean</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the page also.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * private_lock must be held over this entire operation in order</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to synchronise against __set_page_dirty_buffers and prevent the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dirty bit from being lost.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cancel_dirty_page\">cancel_dirty_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffers_to_free\">buffers_to_free</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#buffers_to_free\">buffers_to_free</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_buffer_head\">free_buffer_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#buffers_to_free\">buffers_to_free</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#try_to_free_buffers\">try_to_free_buffers</a>);", 
"", 
"void <a class=\"id\" href=\"#block_sync_page\">block_sync_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page_mapping\">page_mapping</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_run_backing_dev\">blk_run_backing_dev</a>(<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#block_sync_page\">block_sync_page</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * There are no bdflush tunables left.  But distributions are</span>", 
"<span class=\"comment\"> * still running obsolete flush daemons, so we terminate them here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Use of bdflush() is deprecated and will be removed in a future kernel.</span>", 
"<span class=\"comment\"> * The `flush-X' kernel threads fully replace bdflush daemons and this call.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#bdflush\">bdflush</a>, int, <a class=\"id\" href=\"#func\">func</a>, long, <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#msg_count\">msg_count</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#msg_count\">msg_count</a> &lt; 5) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg_count\">msg_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"warning: process `%s' used the obsolete bdflush\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" system call\\n\", <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Fix your initscripts?\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#func\">func</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_exit\">do_exit</a>(0);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Buffer-head allocation</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#bh_cachep\">bh_cachep</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Once the number of bh's in the machine exceeds this level, we start</span>", 
"<span class=\"comment\"> * stripping them in writeback.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#max_buffer_heads\">max_buffer_heads</a>;", 
"", 
"int <a class=\"id\" href=\"#buffer_heads_over_limit\">buffer_heads_over_limit</a>;", 
"", 
"struct <a class=\"id\" href=\"#bh_accounting\">bh_accounting</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Number of live bh's */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ratelimit\">ratelimit</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Limit cacheline bouncing */</span>", 
"};", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#bh_accounting\">bh_accounting</a>, <a class=\"id\" href=\"#bh_accounting\">bh_accounting</a>) = {0, 0};", 
"", 
"static void <a class=\"id\" href=\"#recalc_bh_state\">recalc_bh_state</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tot\">tot</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#bh_accounting\">bh_accounting</a>).<a class=\"id\" href=\"#ratelimit\">ratelimit</a>++ &lt; 4096)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#bh_accounting\">bh_accounting</a>).<a class=\"id\" href=\"#ratelimit\">ratelimit</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tot\">tot</a> += <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#bh_accounting\">bh_accounting</a>, <a class=\"id\" href=\"#i\">i</a>).<a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer_heads_over_limit\">buffer_heads_over_limit</a> = (<a class=\"id\" href=\"#tot\">tot</a> &gt; <a class=\"id\" href=\"#max_buffer_heads\">max_buffer_heads</a>);", 
"}", 
"<span class=\"ts\"/>", 
"struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#alloc_buffer_head\">alloc_buffer_head</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#bh_cachep\">bh_cachep</a>, <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#ret\">ret</a>-><a class=\"id\" href=\"#b_assoc_buffers\">b_assoc_buffers</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#bh_accounting\">bh_accounting</a>).<a class=\"id\" href=\"#nr\">nr</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#recalc_bh_state\">recalc_bh_state</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#bh_accounting\">bh_accounting</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#alloc_buffer_head\">alloc_buffer_head</a>);", 
"", 
"void <a class=\"id\" href=\"#free_buffer_head\">free_buffer_head</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_assoc_buffers\">b_assoc_buffers</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#bh_cachep\">bh_cachep</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#bh_accounting\">bh_accounting</a>).<a class=\"id\" href=\"#nr\">nr</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#recalc_bh_state\">recalc_bh_state</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#bh_accounting\">bh_accounting</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#free_buffer_head\">free_buffer_head</a>);", 
"", 
"static void <a class=\"id\" href=\"#buffer_exit_cpu\">buffer_exit_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bh_lru\">bh_lru</a> *<a class=\"id\" href=\"#b\">b</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#bh_lrus\">bh_lrus</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#BH_LRU_SIZE\">BH_LRU_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#bhs\">bhs</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#bhs\">bhs</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#bh_accounting\">bh_accounting</a>).<a class=\"id\" href=\"#nr\">nr</a> += <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#bh_accounting\">bh_accounting</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#bh_accounting\">bh_accounting</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#bh_accounting\">bh_accounting</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#buffer_cpu_notify\">buffer_cpu_notify</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#action\">action</a> == <a class=\"id\" href=\"#CPU_DEAD\">CPU_DEAD</a> || <a class=\"id\" href=\"#action\">action</a> == <a class=\"id\" href=\"#CPU_DEAD_FROZEN\">CPU_DEAD_FROZEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer_exit_cpu\">buffer_exit_cpu</a>((unsigned long)<a class=\"id\" href=\"#hcpu\">hcpu</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bh_uptodate_or_lock - Test whether the buffer is uptodate</span>", 
"<span class=\"comment\"> * @bh: struct buffer_head</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return true if the buffer is up-to-date and false,</span>", 
"<span class=\"comment\"> * with the buffer locked, if not.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#bh_uptodate_or_lock\">bh_uptodate_or_lock</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bh_uptodate_or_lock\">bh_uptodate_or_lock</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bh_submit_read - Submit a locked buffer for reading</span>", 
"<span class=\"comment\"> * @bh: struct buffer_head</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns zero on success and -EIO on error.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#bh_submit_read\">bh_submit_read</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#buffer_locked\">buffer_locked</a>(<a class=\"id\" href=\"#bh\">bh</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_end_io\">b_end_io</a> = <a class=\"id\" href=\"#end_buffer_read_sync\">end_buffer_read_sync</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#submit_bh\">submit_bh</a>(<a class=\"id\" href=\"#READ\">READ</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_on_buffer\">wait_on_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bh_submit_read\">bh_submit_read</a>);", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#buffer_init\">buffer_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nrpages\">nrpages</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh_cachep\">bh_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"buffer_head\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a>), 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#SLAB_RECLAIM_ACCOUNT\">SLAB_RECLAIM_ACCOUNT</a>|<a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>|", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SLAB_MEM_SPREAD\">SLAB_MEM_SPREAD</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Limit the bh occupancy to 10% of ZONE_NORMAL</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nrpages\">nrpages</a> = (<a class=\"id\" href=\"#nr_free_buffer_pages\">nr_free_buffer_pages</a>() * 10) / 100;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_buffer_heads\">max_buffer_heads</a> = <a class=\"id\" href=\"#nrpages\">nrpages</a> * (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> / sizeof(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hotcpu_notifier\">hotcpu_notifier</a>(<a class=\"id\" href=\"#buffer_cpu_notify\">buffer_cpu_notify</a>, 0);", 
"}", 
];
xr_frag_insert('l/3a/a2e309e00b7547c4459b083b33c4dc4ad45b8e.xr', __xr_tmp);
