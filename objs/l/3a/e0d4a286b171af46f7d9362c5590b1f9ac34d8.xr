var __xr_tmp = [
"<span class=\"comment\">/* CPU control.</span>", 
"<span class=\"comment\"> * (C) 2001, 2002, 2003, 2004 Rusty Russell</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This code is licenced under the GPL.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#unistd\">unistd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kthread\">kthread</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stop_machine\">stop_machine</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"comment\">/* Serializes the updates to cpu_online_mask, cpu_present_mask */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#cpu_add_remove_lock\">cpu_add_remove_lock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The following two API's must be used when attempting</span>", 
"<span class=\"comment\"> * to serialize the updates to cpu_online_mask, cpu_present_mask.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cpu_maps_update_begin\">cpu_maps_update_begin</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cpu_add_remove_lock\">cpu_add_remove_lock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#cpu_maps_update_done\">cpu_maps_update_done</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cpu_add_remove_lock\">cpu_add_remove_lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#RAW_NOTIFIER_HEAD\">RAW_NOTIFIER_HEAD</a>(<a class=\"id\" href=\"#cpu_chain\">cpu_chain</a>);", 
"", 
"<span class=\"comment\">/* If set, cpu_up and cpu_down will return -EBUSY and do nothing.</span>", 
"<span class=\"comment\"> * Should always be manipulated under cpu_add_remove_lock</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cpu_hotplug_disabled\">cpu_hotplug_disabled</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"", 
"static struct {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#active_writer\">active_writer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#lock\">lock</a>; <span class=\"comment\">/* Synchronizes accesses to refcount, */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Also blocks the new readers during</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * an ongoing cpu hotplug operation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#refcount\">refcount</a>;", 
"} <a class=\"id\" href=\"#cpu_hotplug\">cpu_hotplug</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#active_writer\">active_writer</a> = <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#lock\">lock</a> = <a class=\"id\" href=\"#__MUTEX_INITIALIZER\">__MUTEX_INITIALIZER</a>(<a class=\"id\" href=\"#cpu_hotplug\">cpu_hotplug</a>.<a class=\"id\" href=\"#lock\">lock</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#refcount\">refcount</a> = 0,", 
"};", 
"", 
"void <a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_hotplug\">cpu_hotplug</a>.<a class=\"id\" href=\"#active_writer\">active_writer</a> == <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cpu_hotplug\">cpu_hotplug</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_hotplug\">cpu_hotplug</a>.<a class=\"id\" href=\"#refcount\">refcount</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cpu_hotplug\">cpu_hotplug</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>);", 
"", 
"void <a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_hotplug\">cpu_hotplug</a>.<a class=\"id\" href=\"#active_writer\">active_writer</a> == <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cpu_hotplug\">cpu_hotplug</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (!--<a class=\"id\" href=\"#cpu_hotplug\">cpu_hotplug</a>.<a class=\"id\" href=\"#refcount\">refcount</a> && <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cpu_hotplug\">cpu_hotplug</a>.<a class=\"id\" href=\"#active_writer\">active_writer</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#cpu_hotplug\">cpu_hotplug</a>.<a class=\"id\" href=\"#active_writer\">active_writer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cpu_hotplug\">cpu_hotplug</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This ensures that the hotplug operation can begin only when the</span>", 
"<span class=\"comment\"> * refcount goes to zero.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that during a cpu-hotplug operation, the new readers, if any,</span>", 
"<span class=\"comment\"> * will be blocked by the cpu_hotplug.lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Since cpu_hotplug_begin() is always called after invoking</span>", 
"<span class=\"comment\"> * cpu_maps_update_begin(), we can be sure that only one writer is active.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that theoretically, there is a possibility of a livelock:</span>", 
"<span class=\"comment\"> * - Refcount goes to zero, last reader wakes up the sleeping</span>", 
"<span class=\"comment\"> *   writer.</span>", 
"<span class=\"comment\"> * - Last reader unlocks the cpu_hotplug.lock.</span>", 
"<span class=\"comment\"> * - A new reader arrives at this moment, bumps up the refcount.</span>", 
"<span class=\"comment\"> * - The writer acquires the cpu_hotplug.lock finds the refcount</span>", 
"<span class=\"comment\"> *   non zero and goes to sleep again.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * However, this is very difficult to achieve in practice since</span>", 
"<span class=\"comment\"> * get_online_cpus() not an api which is called all that often.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cpu_hotplug_begin\">cpu_hotplug_begin</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_hotplug\">cpu_hotplug</a>.<a class=\"id\" href=\"#active_writer\">active_writer</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cpu_hotplug\">cpu_hotplug</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#cpu_hotplug\">cpu_hotplug</a>.<a class=\"id\" href=\"#refcount\">refcount</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cpu_hotplug\">cpu_hotplug</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cpu_hotplug_done\">cpu_hotplug_done</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_hotplug\">cpu_hotplug</a>.<a class=\"id\" href=\"#active_writer\">active_writer</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cpu_hotplug\">cpu_hotplug</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"#else <span class=\"comment\">/* #if CONFIG_HOTPLUG_CPU */</span>", 
"static void <a class=\"id\" href=\"#cpu_hotplug_begin\">cpu_hotplug_begin</a>(void) {}", 
"static void <a class=\"id\" href=\"#cpu_hotplug_done\">cpu_hotplug_done</a>(void) {}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* #esle #if CONFIG_HOTPLUG_CPU */</span>", 
"", 
"<span class=\"comment\">/* Need to know about CPUs going up/down? */</span>", 
"int <a class=\"id\" href=\"#__ref\">__ref</a> <a class=\"id\" href=\"#register_cpu_notifier\">register_cpu_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_maps_update_begin\">cpu_maps_update_begin</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#raw_notifier_chain_register\">raw_notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#cpu_chain\">cpu_chain</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_maps_update_done\">cpu_maps_update_done</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__cpu_notify\">__cpu_notify</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#v\">v</a>, int <a class=\"id\" href=\"#nr_to_call\">nr_to_call</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#nr_calls\">nr_calls</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__raw_notifier_call_chain\">__raw_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#cpu_chain\">cpu_chain</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#nr_to_call\">nr_to_call</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_calls\">nr_calls</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#notifier_to_errno\">notifier_to_errno</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cpu_notify\">cpu_notify</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__cpu_notify\">__cpu_notify</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#v\">v</a>, -1, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"", 
"static void <a class=\"id\" href=\"#cpu_notify_nofail\">cpu_notify_nofail</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cpu_notify\">cpu_notify</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#v\">v</a>));", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#register_cpu_notifier\">register_cpu_notifier</a>);", 
"", 
"void <a class=\"id\" href=\"#__ref\">__ref</a> <a class=\"id\" href=\"#unregister_cpu_notifier\">unregister_cpu_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_maps_update_begin\">cpu_maps_update_begin</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_notifier_chain_unregister\">raw_notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#cpu_chain\">cpu_chain</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_maps_update_done\">cpu_maps_update_done</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unregister_cpu_notifier\">unregister_cpu_notifier</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#check_for_tasks\">check_for_tasks</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_irq\">write_lock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_process\">for_each_process</a>(<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>) == <a class=\"id\" href=\"#cpu\">cpu</a> && <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (!<a class=\"id\" href=\"#cputime_eq\">cputime_eq</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     !<a class=\"id\" href=\"#cputime_eq\">cputime_eq</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#stime\">stime</a>, <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Task %s (pid = %d) is on cpu %d \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"(state = %ld, flags = %x)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(<a class=\"id\" href=\"#p\">p</a>), <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_irq\">write_unlock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#take_cpu_down_param\">take_cpu_down_param</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#caller\">caller</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#hcpu\">hcpu</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Take this CPU down. */</span>", 
"static int <a class=\"id\" href=\"#__ref\">__ref</a> <a class=\"id\" href=\"#take_cpu_down\">take_cpu_down</a>(void *<a class=\"id\" href=\"#_param\">_param</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#take_cpu_down_param\">take_cpu_down_param</a> *<a class=\"id\" href=\"#param\">param</a> = <a class=\"id\" href=\"#_param\">_param</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a> = (unsigned long)<a class=\"id\" href=\"#param\">param</a>-><a class=\"id\" href=\"#hcpu\">hcpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ensure this CPU doesn't handle any more interrupts. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__cpu_disable\">__cpu_disable</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_notify\">cpu_notify</a>(<a class=\"id\" href=\"#CPU_DYING\">CPU_DYING</a> | <a class=\"id\" href=\"#param\">param</a>-><a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#param\">param</a>-><a class=\"id\" href=\"#hcpu\">hcpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#param\">param</a>-><a class=\"id\" href=\"#caller\">caller</a>) == <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#move_task_off_dead_cpu\">move_task_off_dead_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#param\">param</a>-><a class=\"id\" href=\"#caller\">caller</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Force idle task to run as soon as we yield: it should</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   immediately notice cpu is offline and die quickly. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_idle_next\">sched_idle_next</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Requires cpu_add_remove_lock to be held */</span>", 
"static int <a class=\"id\" href=\"#__ref\">__ref</a> <a class=\"id\" href=\"#_cpu_down\">_cpu_down</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#tasks_frozen\">tasks_frozen</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#nr_calls\">nr_calls</a> = 0;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#hcpu\">hcpu</a> = (void *)(long)<a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#tasks_frozen\">tasks_frozen</a> ? <a class=\"id\" href=\"#CPU_TASKS_FROZEN\">CPU_TASKS_FROZEN</a> : 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#take_cpu_down_param\">take_cpu_down_param</a> <a class=\"id\" href=\"#tcd_param\">tcd_param</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#caller\">caller</a> = <a class=\"id\" href=\"#current\">current</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#hcpu\">hcpu</a> = <a class=\"id\" href=\"#hcpu\">hcpu</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>() == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_hotplug_begin\">cpu_hotplug_begin</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__cpu_notify\">__cpu_notify</a>(<a class=\"id\" href=\"#CPU_DOWN_PREPARE\">CPU_DOWN_PREPARE</a> | <a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#hcpu\">hcpu</a>, -1, &amp;<a class=\"id\" href=\"#nr_calls\">nr_calls</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_calls\">nr_calls</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__cpu_notify\">__cpu_notify</a>(<a class=\"id\" href=\"#CPU_DOWN_FAILED\">CPU_DOWN_FAILED</a> | <a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#hcpu\">hcpu</a>, <a class=\"id\" href=\"#nr_calls\">nr_calls</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s: attempt to take down CPU %u failed\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_release\">out_release</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__stop_machine\">__stop_machine</a>(<a class=\"id\" href=\"#take_cpu_down\">take_cpu_down</a>, &amp;<a class=\"id\" href=\"#tcd_param\">tcd_param</a>, <a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* CPU didn't die: tell everyone.  Can't complain. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_notify_nofail\">cpu_notify_nofail</a>(<a class=\"id\" href=\"#CPU_DOWN_FAILED\">CPU_DOWN_FAILED</a> | <a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#hcpu\">hcpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_release\">out_release</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait for it to sleep (leaving idle task). */</span>", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#idle_cpu\">idle_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#yield\">yield</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This actually kills the CPU. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__cpu_die\">__cpu_die</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* CPU is completely dead: tell everyone.  Too late to complain. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_notify_nofail\">cpu_notify_nofail</a>(<a class=\"id\" href=\"#CPU_DEAD\">CPU_DEAD</a> | <a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#hcpu\">hcpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_for_tasks\">check_for_tasks</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<a class=\"id\" href=\"#out_release\">out_release</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_hotplug_done\">cpu_hotplug_done</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_notify_nofail\">cpu_notify_nofail</a>(<a class=\"id\" href=\"#CPU_POST_DEAD\">CPU_POST_DEAD</a> | <a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#hcpu\">hcpu</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__ref\">__ref</a> <a class=\"id\" href=\"#cpu_down\">cpu_down</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_maps_update_begin\">cpu_maps_update_begin</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_hotplug_disabled\">cpu_hotplug_disabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#_cpu_down\">_cpu_down</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, 0);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_maps_update_done\">cpu_maps_update_done</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#cpu_down\">cpu_down</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/*CONFIG_HOTPLUG_CPU*/</span>", 
"", 
"<span class=\"comment\">/* Requires cpu_add_remove_lock to be held */</span>", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#_cpu_up\">_cpu_up</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#tasks_frozen\">tasks_frozen</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#nr_calls\">nr_calls</a> = 0;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#hcpu\">hcpu</a> = (void *)(long)<a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#tasks_frozen\">tasks_frozen</a> ? <a class=\"id\" href=\"#CPU_TASKS_FROZEN\">CPU_TASKS_FROZEN</a> : 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) || !<a class=\"id\" href=\"#cpu_present\">cpu_present</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_hotplug_begin\">cpu_hotplug_begin</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__cpu_notify\">__cpu_notify</a>(<a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a> | <a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#hcpu\">hcpu</a>, -1, &amp;<a class=\"id\" href=\"#nr_calls\">nr_calls</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_calls\">nr_calls</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s: attempt to bring up CPU %u failed\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_notify\">out_notify</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Arch-specific enabling code. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__cpu_up\">__cpu_up</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_notify\">out_notify</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now call notifier in preparation. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_notify\">cpu_notify</a>(<a class=\"id\" href=\"#CPU_ONLINE\">CPU_ONLINE</a> | <a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#hcpu\">hcpu</a>);", 
"", 
"<a class=\"id\" href=\"#out_notify\">out_notify</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__cpu_notify\">__cpu_notify</a>(<a class=\"id\" href=\"#CPU_UP_CANCELED\">CPU_UP_CANCELED</a> | <a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#hcpu\">hcpu</a>, <a class=\"id\" href=\"#nr_calls\">nr_calls</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_hotplug_done\">cpu_hotplug_done</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#cpu_up\">cpu_up</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a><span class=\"ts\"/><a class=\"id\" href=\"#CONFIG_MEMORY_HOTPLUG\">CONFIG_MEMORY_HOTPLUG</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pg_data_t\">pg_data_t</a><span class=\"ts\"/>*<a class=\"id\" href=\"#pgdat\">pgdat</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_possible\">cpu_possible</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"can't online cpu %d because it is not \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"configured as may-hotadd at boot time\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IA64\">CONFIG_IA64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"please check additional_cpus= boot \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"parameter\\n\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a><span class=\"ts\"/><a class=\"id\" href=\"#CONFIG_MEMORY_HOTPLUG\">CONFIG_MEMORY_HOTPLUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_online\">node_online</a>(<a class=\"id\" href=\"#nid\">nid</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#mem_online_node\">mem_online_node</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdat\">pgdat</a> = <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pgdat\">pgdat</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Can't online cpu %d due to NULL pgdat\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zonelists\">node_zonelists</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>-><a class=\"id\" href=\"#zone\">zone</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#zonelists_mutex\">zonelists_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#build_all_zonelists\">build_all_zonelists</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#zonelists_mutex\">zonelists_mutex</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_maps_update_begin\">cpu_maps_update_begin</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_hotplug_disabled\">cpu_hotplug_disabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#_cpu_up\">_cpu_up</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, 0);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_maps_update_done\">cpu_maps_update_done</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_SLEEP_SMP\">CONFIG_PM_SLEEP_SMP</a>", 
"static <a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#frozen_cpus\">frozen_cpus</a>;", 
"", 
"int <a class=\"id\" href=\"#disable_nonboot_cpus\">disable_nonboot_cpus</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#first_cpu\">first_cpu</a>, <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_maps_update_begin\">cpu_maps_update_begin</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first_cpu\">first_cpu</a> = <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We take down all of the non-boot CPUs in one shot to avoid races</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with the userspace trying to use the CPU hotplug at the same time</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear\">cpumask_clear</a>(<a class=\"id\" href=\"#frozen_cpus\">frozen_cpus</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Disabling non-boot CPUs ...\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#first_cpu\">first_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#_cpu_down\">_cpu_down</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#frozen_cpus\">frozen_cpus</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Error taking CPU%d down: %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>() &gt; 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make sure the CPUs won't be enabled by someone else */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_hotplug_disabled\">cpu_hotplug_disabled</a> = 1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Non-boot CPUs are not disabled\\n\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_maps_update_done\">cpu_maps_update_done</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#arch_enable_nonboot_cpus_begin\">arch_enable_nonboot_cpus_begin</a>(void)", 
"{", 
"}", 
"", 
"void <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#arch_enable_nonboot_cpus_end\">arch_enable_nonboot_cpus_end</a>(void)", 
"{", 
"}", 
"", 
"void <a class=\"id\" href=\"#__ref\">__ref</a> <a class=\"id\" href=\"#enable_nonboot_cpus\">enable_nonboot_cpus</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allow everyone to use the CPU hotplug again */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_maps_update_begin\">cpu_maps_update_begin</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_hotplug_disabled\">cpu_hotplug_disabled</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#frozen_cpus\">frozen_cpus</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Enabling non-boot CPUs ...\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_enable_nonboot_cpus_begin\">arch_enable_nonboot_cpus_begin</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#frozen_cpus\">frozen_cpus</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#_cpu_up\">_cpu_up</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"CPU%d is up\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Error taking CPU%d up: %d\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_enable_nonboot_cpus_end\">arch_enable_nonboot_cpus_end</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear\">cpumask_clear</a>(<a class=\"id\" href=\"#frozen_cpus\">frozen_cpus</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_maps_update_done\">cpu_maps_update_done</a>();", 
"}", 
"", 
"static int <a class=\"id\" href=\"#alloc_frozen_cpus\">alloc_frozen_cpus</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#frozen_cpus\">frozen_cpus</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>|<a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#core_initcall\">core_initcall</a>(<a class=\"id\" href=\"#alloc_frozen_cpus\">alloc_frozen_cpus</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PM_SLEEP_SMP */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * notify_cpu_starting(cpu) - call the CPU_STARTING notifiers</span>", 
"<span class=\"comment\"> * @cpu: cpu that just started</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function calls the cpu_chain notifiers with CPU_STARTING.</span>", 
"<span class=\"comment\"> * It must be called by the arch code on the new cpu, before the new cpu</span>", 
"<span class=\"comment\"> * enables interrupts and before the \"boot\" cpu returns from __cpu_up().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#notify_cpu_starting\">notify_cpu_starting</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#CPU_STARTING\">CPU_STARTING</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_SLEEP_SMP\">CONFIG_PM_SLEEP_SMP</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#frozen_cpus\">frozen_cpus</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#frozen_cpus\">frozen_cpus</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#CPU_STARTING_FROZEN\">CPU_STARTING_FROZEN</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PM_SLEEP_SMP */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_notify\">cpu_notify</a>(<a class=\"id\" href=\"#val\">val</a>, (void *)(long)<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cpu_bit_bitmap[] is a special, \"compressed\" data structure that</span>", 
"<span class=\"comment\"> * represents all NR_CPUS bits binary values of 1&lt;&lt;nr.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is used by cpumask_of() to get a constant address to a CPU</span>", 
"<span class=\"comment\"> * mask value that has a single bit set only.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* cpu_bit_bitmap[0] is empty - so we can back into it */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MASK_DECLARE_1\">MASK_DECLARE_1</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>[<a class=\"id\" href=\"#x\">x</a>+1][0] = 1UL << (<a class=\"id\" href=\"#x\">x</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MASK_DECLARE_2\">MASK_DECLARE_2</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#MASK_DECLARE_1\">MASK_DECLARE_1</a>(<a class=\"id\" href=\"#x\">x</a>), <a class=\"id\" href=\"#MASK_DECLARE_1\">MASK_DECLARE_1</a>(<a class=\"id\" href=\"#x\">x</a>+1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MASK_DECLARE_4\">MASK_DECLARE_4</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#MASK_DECLARE_2\">MASK_DECLARE_2</a>(<a class=\"id\" href=\"#x\">x</a>), <a class=\"id\" href=\"#MASK_DECLARE_2\">MASK_DECLARE_2</a>(<a class=\"id\" href=\"#x\">x</a>+2)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MASK_DECLARE_8\">MASK_DECLARE_8</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#MASK_DECLARE_4\">MASK_DECLARE_4</a>(<a class=\"id\" href=\"#x\">x</a>), <a class=\"id\" href=\"#MASK_DECLARE_4\">MASK_DECLARE_4</a>(<a class=\"id\" href=\"#x\">x</a>+4)", 
"", 
"const unsigned long <a class=\"id\" href=\"#cpu_bit_bitmap\">cpu_bit_bitmap</a>[<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>+1][<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>)] = {", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MASK_DECLARE_8\">MASK_DECLARE_8</a>(0),<span class=\"ts\"/><a class=\"id\" href=\"#MASK_DECLARE_8\">MASK_DECLARE_8</a>(8),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MASK_DECLARE_8\">MASK_DECLARE_8</a>(16),<span class=\"ts\"/><a class=\"id\" href=\"#MASK_DECLARE_8\">MASK_DECLARE_8</a>(24),", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> &gt; 32", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MASK_DECLARE_8\">MASK_DECLARE_8</a>(32),<span class=\"ts\"/><a class=\"id\" href=\"#MASK_DECLARE_8\">MASK_DECLARE_8</a>(40),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MASK_DECLARE_8\">MASK_DECLARE_8</a>(48),<span class=\"ts\"/><a class=\"id\" href=\"#MASK_DECLARE_8\">MASK_DECLARE_8</a>(56),", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#cpu_bit_bitmap\">cpu_bit_bitmap</a>);", 
"", 
"const <a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#cpu_all_bits\">cpu_all_bits</a>, <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>) = <a class=\"id\" href=\"#CPU_BITS_ALL\">CPU_BITS_ALL</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#cpu_all_bits\">cpu_all_bits</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_INIT_ALL_POSSIBLE\">CONFIG_INIT_ALL_POSSIBLE</a>", 
"static <a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#cpu_possible_bits\">cpu_possible_bits</a>, <a class=\"id\" href=\"#CONFIG_NR_CPUS\">CONFIG_NR_CPUS</a>) <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>", 
"<span class=\"ts\"/>= <a class=\"id\" href=\"#CPU_BITS_ALL\">CPU_BITS_ALL</a>;", 
"#else", 
"static <a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#cpu_possible_bits\">cpu_possible_bits</a>, <a class=\"id\" href=\"#CONFIG_NR_CPUS\">CONFIG_NR_CPUS</a>) <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *const <a class=\"id\" href=\"#cpu_possible_mask\">cpu_possible_mask</a> = <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#cpu_possible_bits\">cpu_possible_bits</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#cpu_possible_mask\">cpu_possible_mask</a>);", 
"", 
"static <a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#cpu_online_bits\">cpu_online_bits</a>, <a class=\"id\" href=\"#CONFIG_NR_CPUS\">CONFIG_NR_CPUS</a>) <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *const <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a> = <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#cpu_online_bits\">cpu_online_bits</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>);", 
"", 
"static <a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#cpu_present_bits\">cpu_present_bits</a>, <a class=\"id\" href=\"#CONFIG_NR_CPUS\">CONFIG_NR_CPUS</a>) <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *const <a class=\"id\" href=\"#cpu_present_mask\">cpu_present_mask</a> = <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#cpu_present_bits\">cpu_present_bits</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#cpu_present_mask\">cpu_present_mask</a>);", 
"", 
"static <a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#cpu_active_bits\">cpu_active_bits</a>, <a class=\"id\" href=\"#CONFIG_NR_CPUS\">CONFIG_NR_CPUS</a>) <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *const <a class=\"id\" href=\"#cpu_active_mask\">cpu_active_mask</a> = <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#cpu_active_bits\">cpu_active_bits</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#cpu_active_mask\">cpu_active_mask</a>);", 
"", 
"void <a class=\"id\" href=\"#set_cpu_possible\">set_cpu_possible</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#possible\">possible</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#possible\">possible</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#cpu_possible_bits\">cpu_possible_bits</a>));", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#cpu_possible_bits\">cpu_possible_bits</a>));", 
"}", 
"", 
"void <a class=\"id\" href=\"#set_cpu_present\">set_cpu_present</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#present\">present</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#present\">present</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#cpu_present_bits\">cpu_present_bits</a>));", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#cpu_present_bits\">cpu_present_bits</a>));", 
"}", 
"", 
"void <a class=\"id\" href=\"#set_cpu_online\">set_cpu_online</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#online\">online</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#online\">online</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#cpu_online_bits\">cpu_online_bits</a>));", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#cpu_online_bits\">cpu_online_bits</a>));", 
"}", 
"", 
"void <a class=\"id\" href=\"#set_cpu_active\">set_cpu_active</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#active\">active</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#active\">active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#cpu_active_bits\">cpu_active_bits</a>));", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#cpu_active_bits\">cpu_active_bits</a>));", 
"}", 
"", 
"void <a class=\"id\" href=\"#init_cpu_present\">init_cpu_present</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#cpu_present_bits\">cpu_present_bits</a>), <a class=\"id\" href=\"#src\">src</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#init_cpu_possible\">init_cpu_possible</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#cpu_possible_bits\">cpu_possible_bits</a>), <a class=\"id\" href=\"#src\">src</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#init_cpu_online\">init_cpu_online</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#cpu_online_bits\">cpu_online_bits</a>), <a class=\"id\" href=\"#src\">src</a>);", 
"}", 
];
xr_frag_insert('l/3a/e0d4a286b171af46f7d9362c5590b1f9ac34d8.xr', __xr_tmp);
