var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Functions related to tagged command queuing</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bio\">bio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"blk.h\"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_find_tag - find a request by its tag and queue</span>", 
"<span class=\"comment\"> * @q:<span class=\"ts\"/> The request queue for the device</span>", 
"<span class=\"comment\"> * @tag: The tag of the request</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *    Should be used when a device returns a tag and you want to match</span>", 
"<span class=\"comment\"> *    it with a request.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    no locks need be held.</span>", 
"<span class=\"comment\"> **/</span>", 
"struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#blk_queue_find_tag\">blk_queue_find_tag</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, int <a class=\"id\" href=\"#tag\">tag</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#blk_map_queue_find_tag\">blk_map_queue_find_tag</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_tags\">queue_tags</a>, <a class=\"id\" href=\"#tag\">tag</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_find_tag\">blk_queue_find_tag</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __blk_free_tags - release a given set of tag maintenance info</span>", 
"<span class=\"comment\"> * @bqt:<span class=\"ts\"/>the tag map to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Tries to free the specified @bqt.  Returns true if it was</span>", 
"<span class=\"comment\"> * actually freed and false if there are still references using it</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__blk_free_tags\">__blk_free_tags</a>(struct <a class=\"id\" href=\"#blk_queue_tag\">blk_queue_tag</a> *<a class=\"id\" href=\"#bqt\">bqt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#find_first_bit\">find_first_bit</a>(<a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#tag_map\">tag_map</a>, <a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#max_depth\">max_depth</a>) &lt;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#max_depth\">max_depth</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#tag_index\">tag_index</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#tag_index\">tag_index</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#tag_map\">tag_map</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bqt\">bqt</a>-><a class=\"id\" href=\"#tag_map\">tag_map</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bqt\">bqt</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __blk_queue_free_tags - release tag maintenance info</span>", 
"<span class=\"comment\"> * @q:  the request queue for the device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Notes:</span>", 
"<span class=\"comment\"> *    blk_cleanup_queue() will take care of calling this function, if tagging</span>", 
"<span class=\"comment\"> *    has been used. So there's no need to call this directly.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#__blk_queue_free_tags\">__blk_queue_free_tags</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#blk_queue_tag\">blk_queue_tag</a> *<a class=\"id\" href=\"#bqt\">bqt</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_tags\">queue_tags</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bqt\">bqt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__blk_free_tags\">__blk_free_tags</a>(<a class=\"id\" href=\"#bqt\">bqt</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_tags\">queue_tags</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_clear_unlocked\">queue_flag_clear_unlocked</a>(<a class=\"id\" href=\"#QUEUE_FLAG_QUEUED\">QUEUE_FLAG_QUEUED</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_free_tags - release a given set of tag maintenance info</span>", 
"<span class=\"comment\"> * @bqt:<span class=\"ts\"/>the tag map to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For externally managed @bqt frees the map.  Callers of this</span>", 
"<span class=\"comment\"> * function must guarantee to have released all the queues that</span>", 
"<span class=\"comment\"> * might have been using this tag map.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_free_tags\">blk_free_tags</a>(struct <a class=\"id\" href=\"#blk_queue_tag\">blk_queue_tag</a> *<a class=\"id\" href=\"#bqt\">bqt</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#__blk_free_tags\">__blk_free_tags</a>(<a class=\"id\" href=\"#bqt\">bqt</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_free_tags\">blk_free_tags</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_free_tags - release tag maintenance info</span>", 
"<span class=\"comment\"> * @q:  the request queue for the device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Notes:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is used to disable tagged queuing to a device, yet leave</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>queue in function.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_queue_free_tags\">blk_queue_free_tags</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_clear_unlocked\">queue_flag_clear_unlocked</a>(<a class=\"id\" href=\"#QUEUE_FLAG_QUEUED\">QUEUE_FLAG_QUEUED</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_free_tags\">blk_queue_free_tags</a>);", 
"", 
"static int", 
"<a class=\"id\" href=\"#init_tag_map\">init_tag_map</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#blk_queue_tag\">blk_queue_tag</a> *<a class=\"id\" href=\"#tags\">tags</a>, int <a class=\"id\" href=\"#depth\">depth</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> **<a class=\"id\" href=\"#tag_index\">tag_index</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#tag_map\">tag_map</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_ulongs\">nr_ulongs</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a> && <a class=\"id\" href=\"#depth\">depth</a> &gt; <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nr_requests\">nr_requests</a> * 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#depth\">depth</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nr_requests\">nr_requests</a> * 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: adjusted depth to %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#depth\">depth</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tag_index\">tag_index</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#depth\">depth</a> * sizeof(struct <a class=\"id\" href=\"#request\">request</a> *), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tag_index\">tag_index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_ulongs\">nr_ulongs</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#depth\">depth</a>, <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>) / <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tag_map\">tag_map</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#nr_ulongs\">nr_ulongs</a> * sizeof(unsigned long), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
];
xr_frag_insert('l/3b/9e4900825af64ed1f0e19325bf04f7b0e48519.xr', __xr_tmp);
