var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#newval\">newval</a> = <a class=\"id\" href=\"#curval\">curval</a> | <a class=\"id\" href=\"#FUTEX_WAITERS\">FUTEX_WAITERS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There are two cases, where a futex might have no owner (the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * owner TID is 0): OWNER_DIED. We take over the futex in this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * case. We also do an unconditional take over, when the owner</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the futex died.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is safe as we are protected by the hash bucket lock !</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ownerdied\">ownerdied</a> || !(<a class=\"id\" href=\"#curval\">curval</a> &amp; <a class=\"id\" href=\"#FUTEX_TID_MASK\">FUTEX_TID_MASK</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Keep the OWNER_DIED bit */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newval\">newval</a> = (<a class=\"id\" href=\"#curval\">curval</a> &amp; ~<a class=\"id\" href=\"#FUTEX_TID_MASK\">FUTEX_TID_MASK</a>) | <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ownerdied\">ownerdied</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_taken\">lock_taken</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#curval\">curval</a> = <a class=\"id\" href=\"#cmpxchg_futex_value_locked\">cmpxchg_futex_value_locked</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#uval\">uval</a>, <a class=\"id\" href=\"#newval\">newval</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#curval\">curval</a> == -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#curval\">curval</a> != <a class=\"id\" href=\"#uval\">uval</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We took the lock due to owner died take over.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#lock_taken\">lock_taken</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We dont have the lock. Look up the PI state (or create it if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we are the first waiter):</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#lookup_pi_state\">lookup_pi_state</a>(<a class=\"id\" href=\"#uval\">uval</a>, <a class=\"id\" href=\"#hb\">hb</a>, <a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#ps\">ps</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * No owner found for this futex. Check if the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * OWNER_DIED bit is set to figure out whether</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * this is a robust futex or not.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_futex_value_locked\">get_futex_value_locked</a>(&amp;<a class=\"id\" href=\"#curval\">curval</a>, <a class=\"id\" href=\"#uaddr\">uaddr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We simply start over in case of a robust</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * futex. The code above will take the futex</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and return happy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#curval\">curval</a> &amp; <a class=\"id\" href=\"#FUTEX_OWNER_DIED\">FUTEX_OWNER_DIED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ownerdied\">ownerdied</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The hash bucket lock must be held when this is called.</span>", 
"<span class=\"comment\"> * Afterwards, the futex_q must not be accessed.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#wake_futex\">wake_futex</a>(struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#task\">task</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We set q-&gt;lock_ptr = NULL _before_ we wake up the task. If</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a non futex wake up happens on another CPU then the task</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * might exit and p would dereference a non existing task</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * struct. Prevent this by holding a reference on p across the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wake up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_del\">plist_del</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#plist\">plist</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The waiting task can free the futex_q as soon as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * q-&gt;lock_ptr = NULL is written, without taking any locks. A</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * memory barrier is required here to prevent the following</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * store to lock_ptr from getting ahead of the plist_del.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock_ptr\">lock_ptr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_state\">wake_up_state</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#TASK_NORMAL\">TASK_NORMAL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#wake_futex_pi\">wake_futex_pi</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#uval\">uval</a>, struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#this\">this</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#new_owner\">new_owner</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_pi_state\">futex_pi_state</a> *<a class=\"id\" href=\"#pi_state\">pi_state</a> = <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#pi_state\">pi_state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#curval\">curval</a>, <a class=\"id\" href=\"#newval\">newval</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pi_state\">pi_state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If current does not own the pi_state then the futex is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inconsistent and user space fiddled with the futex value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a> != <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>.<a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_owner\">new_owner</a> = <a class=\"id\" href=\"#rt_mutex_next_owner\">rt_mutex_next_owner</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This happens when we have stolen the lock and the original</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pending owner did not enqueue itself back on the rt_mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Thats not a tragedy. We know that way, that a lock waiter</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is on the fly. We make the futex_q waiter the pending owner.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_owner\">new_owner</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_owner\">new_owner</a> = <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#task\">task</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We pass it to the next owner. (The WAITERS bit is always</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kept enabled while there is PI state around. We must also</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * preserve the owner died bit.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#uval\">uval</a> &amp; <a class=\"id\" href=\"#FUTEX_OWNER_DIED\">FUTEX_OWNER_DIED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newval\">newval</a> = <a class=\"id\" href=\"#FUTEX_WAITERS\">FUTEX_WAITERS</a> | <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#new_owner\">new_owner</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curval\">curval</a> = <a class=\"id\" href=\"#cmpxchg_futex_value_locked\">cmpxchg_futex_value_locked</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#uval\">uval</a>, <a class=\"id\" href=\"#newval\">newval</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#curval\">curval</a> == -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#curval\">curval</a> != <a class=\"id\" href=\"#uval\">uval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>.<a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#list\">list</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#new_owner\">new_owner</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#list\">list</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#new_owner\">new_owner</a>-><a class=\"id\" href=\"#pi_state_list\">pi_state_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#new_owner\">new_owner</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#new_owner\">new_owner</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>.<a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_unlock\">rt_mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#unlock_futex_pi\">unlock_futex_pi</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#uval\">uval</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#oldval\">oldval</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There is no waiter, so we unlock the futex. The owner died</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bit has not to be preserved here. We are the owner:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oldval\">oldval</a> = <a class=\"id\" href=\"#cmpxchg_futex_value_locked\">cmpxchg_futex_value_locked</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#uval\">uval</a>, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#oldval\">oldval</a> == -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#oldval\">oldval</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#oldval\">oldval</a> != <a class=\"id\" href=\"#uval\">uval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Express the locking dependencies for lockdep:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#double_lock_hb\">double_lock_hb</a>(struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb1\">hb1</a>, struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb2\">hb2</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hb1\">hb1</a> <= <a class=\"id\" href=\"#hb2\">hb2</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hb1\">hb1</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hb1\">hb1</a> &lt; <a class=\"id\" href=\"#hb2\">hb2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_nested\">spin_lock_nested</a>(&amp;<a class=\"id\" href=\"#hb2\">hb2</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#SINGLE_DEPTH_NESTING\">SINGLE_DEPTH_NESTING</a>);", 
"<span class=\"ts\"/>} else { <span class=\"comment\">/* hb1 &gt; hb2 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hb2\">hb2</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_nested\">spin_lock_nested</a>(&amp;<a class=\"id\" href=\"#hb1\">hb1</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#SINGLE_DEPTH_NESTING\">SINGLE_DEPTH_NESTING</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#double_unlock_hb\">double_unlock_hb</a>(struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb1\">hb1</a>, struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb2\">hb2</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hb1\">hb1</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hb1\">hb1</a> != <a class=\"id\" href=\"#hb2\">hb2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hb2\">hb2</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wake up waiters matching bitset queued on this futex (uaddr).</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#futex_wake\">futex_wake</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr\">uaddr</a>, int <a class=\"id\" href=\"#fshared\">fshared</a>, int <a class=\"id\" href=\"#nr_wake\">nr_wake</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#bitset\">bitset</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb\">hb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#this\">this</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#plist_head\">plist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#futex_key\">futex_key</a> <a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#FUTEX_KEY_INIT\">FUTEX_KEY_INIT</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitset\">bitset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_futex_key\">get_futex_key</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a> != 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hb\">hb</a> = <a class=\"id\" href=\"#hash_futex\">hash_futex</a>(&amp;<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#chain\">chain</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_for_each_entry_safe\">plist_for_each_entry_safe</a>(<a class=\"id\" href=\"#this\">this</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#match_futex\">match_futex</a> (&amp;<a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#key\">key</a>, &amp;<a class=\"id\" href=\"#key\">key</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#pi_state\">pi_state</a> || <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#rt_waiter\">rt_waiter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check if one of the bits is set in both bitsets */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#bitset\">bitset</a> &amp; <a class=\"id\" href=\"#bitset\">bitset</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_futex\">wake_futex</a>(<a class=\"id\" href=\"#this\">this</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (++<a class=\"id\" href=\"#ret\">ret</a> >= <a class=\"id\" href=\"#nr_wake\">nr_wake</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key\">key</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wake up all waiters hashed on the physical page that is mapped</span>", 
"<span class=\"comment\"> * to this virtual address:</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#futex_wake_op\">futex_wake_op</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr1\">uaddr1</a>, int <a class=\"id\" href=\"#fshared\">fshared</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr2\">uaddr2</a>,", 
"<span class=\"ts\"/>      int <a class=\"id\" href=\"#nr_wake\">nr_wake</a>, int <a class=\"id\" href=\"#nr_wake2\">nr_wake2</a>, int <a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#futex_key\">futex_key</a> <a class=\"id\" href=\"#key1\">key1</a> = <a class=\"id\" href=\"#FUTEX_KEY_INIT\">FUTEX_KEY_INIT</a>, <a class=\"id\" href=\"#key2\">key2</a> = <a class=\"id\" href=\"#FUTEX_KEY_INIT\">FUTEX_KEY_INIT</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb1\">hb1</a>, *<a class=\"id\" href=\"#hb2\">hb2</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#plist_head\">plist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#this\">this</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#op_ret\">op_ret</a>;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_futex_key\">get_futex_key</a>(<a class=\"id\" href=\"#uaddr1\">uaddr1</a>, <a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key1\">key1</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a> != 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_futex_key\">get_futex_key</a>(<a class=\"id\" href=\"#uaddr2\">uaddr2</a>, <a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key2\">key2</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a> != 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put_key1\">out_put_key1</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hb1\">hb1</a> = <a class=\"id\" href=\"#hash_futex\">hash_futex</a>(&amp;<a class=\"id\" href=\"#key1\">key1</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hb2\">hb2</a> = <a class=\"id\" href=\"#hash_futex\">hash_futex</a>(&amp;<a class=\"id\" href=\"#key2\">key2</a>);", 
"", 
"<a class=\"id\" href=\"#retry_private\">retry_private</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#double_lock_hb\">double_lock_hb</a>(<a class=\"id\" href=\"#hb1\">hb1</a>, <a class=\"id\" href=\"#hb2\">hb2</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op_ret\">op_ret</a> = <a class=\"id\" href=\"#futex_atomic_op_inuser\">futex_atomic_op_inuser</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#uaddr2\">uaddr2</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#op_ret\">op_ret</a> &lt; 0)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#double_unlock_hb\">double_unlock_hb</a>(<a class=\"id\" href=\"#hb1\">hb1</a>, <a class=\"id\" href=\"#hb2\">hb2</a>);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we don't get EFAULT from MMU faults if we don't have an MMU,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but we might get them from range checking</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#op_ret\">op_ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put_keys\">out_put_keys</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#op_ret\">op_ret</a> != -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#op_ret\">op_ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put_keys\">out_put_keys</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fault_in_user_writeable\">fault_in_user_writeable</a>(<a class=\"id\" href=\"#uaddr2\">uaddr2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put_keys\">out_put_keys</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#fshared\">fshared</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry_private\">retry_private</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key2\">key2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key1\">key1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#hb1\">hb1</a>-><a class=\"id\" href=\"#chain\">chain</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_for_each_entry_safe\">plist_for_each_entry_safe</a>(<a class=\"id\" href=\"#this\">this</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#match_futex\">match_futex</a> (&amp;<a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#key\">key</a>, &amp;<a class=\"id\" href=\"#key1\">key1</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_futex\">wake_futex</a>(<a class=\"id\" href=\"#this\">this</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (++<a class=\"id\" href=\"#ret\">ret</a> >= <a class=\"id\" href=\"#nr_wake\">nr_wake</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op_ret\">op_ret</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#hb2\">hb2</a>-><a class=\"id\" href=\"#chain\">chain</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op_ret\">op_ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plist_for_each_entry_safe\">plist_for_each_entry_safe</a>(<a class=\"id\" href=\"#this\">this</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#match_futex\">match_futex</a> (&amp;<a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#key\">key</a>, &amp;<a class=\"id\" href=\"#key2\">key2</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_futex\">wake_futex</a>(<a class=\"id\" href=\"#this\">this</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (++<a class=\"id\" href=\"#op_ret\">op_ret</a> >= <a class=\"id\" href=\"#nr_wake2\">nr_wake2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += <a class=\"id\" href=\"#op_ret\">op_ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#double_unlock_hb\">double_unlock_hb</a>(<a class=\"id\" href=\"#hb1\">hb1</a>, <a class=\"id\" href=\"#hb2\">hb2</a>);", 
"<a class=\"id\" href=\"#out_put_keys\">out_put_keys</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key2\">key2</a>);", 
"<a class=\"id\" href=\"#out_put_key1\">out_put_key1</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key1\">key1</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * requeue_futex() - Requeue a futex_q from one hb to another</span>", 
"<span class=\"comment\"> * @q:<span class=\"ts\"/><span class=\"ts\"/>the futex_q to requeue</span>", 
"<span class=\"comment\"> * @hb1:<span class=\"ts\"/>the source hash_bucket</span>", 
"<span class=\"comment\"> * @hb2:<span class=\"ts\"/>the target hash_bucket</span>", 
"<span class=\"comment\"> * @key2:<span class=\"ts\"/>the new key for the requeued futex_q</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#requeue_futex\">requeue_futex</a>(struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb1\">hb1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb2\">hb2</a>, union <a class=\"id\" href=\"#futex_key\">futex_key</a> *<a class=\"id\" href=\"#key2\">key2</a>)", 
"{", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If key1 and key2 hash to the same bucket, no need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * requeue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(&amp;<a class=\"id\" href=\"#hb1\">hb1</a>-><a class=\"id\" href=\"#chain\">chain</a> != &amp;<a class=\"id\" href=\"#hb2\">hb2</a>-><a class=\"id\" href=\"#chain\">chain</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plist_del\">plist_del</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#hb1\">hb1</a>-><a class=\"id\" href=\"#chain\">chain</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plist_add\">plist_add</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#hb2\">hb2</a>-><a class=\"id\" href=\"#chain\">chain</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock_ptr\">lock_ptr</a> = &amp;<a class=\"id\" href=\"#hb2\">hb2</a>-><a class=\"id\" href=\"#lock\">lock</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PI_LIST\">CONFIG_DEBUG_PI_LIST</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#plist\">plist</a>.<a class=\"id\" href=\"#spinlock\">spinlock</a> = &amp;<a class=\"id\" href=\"#hb2\">hb2</a>-><a class=\"id\" href=\"#lock\">lock</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_futex_key_refs\">get_futex_key_refs</a>(<a class=\"id\" href=\"#key2\">key2</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a> = *<a class=\"id\" href=\"#key2\">key2</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * requeue_pi_wake_futex() - Wake a task that acquired the lock during requeue</span>", 
"<span class=\"comment\"> * @q:<span class=\"ts\"/><span class=\"ts\"/>the futex_q</span>", 
"<span class=\"comment\"> * @key:<span class=\"ts\"/>the key of the requeue target futex</span>", 
"<span class=\"comment\"> * @hb:<span class=\"ts\"/><span class=\"ts\"/>the hash_bucket of the requeue target futex</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * During futex_requeue, with requeue_pi=1, it is possible to acquire the</span>", 
"<span class=\"comment\"> * target futex if it is uncontended or via a lock steal.  Set the futex_q key</span>", 
"<span class=\"comment\"> * to the requeue target futex so the waiter can detect the wakeup on the right</span>", 
"<span class=\"comment\"> * futex, but remove it from the hb and NULL the rt_waiter so it can detect</span>", 
"<span class=\"comment\"> * atomic lock acquisition.  Set the q-&gt;lock_ptr to the requeue target hb-&gt;lock</span>", 
"<span class=\"comment\"> * to protect access to the pi_state to fixup the owner later.  Must be called</span>", 
"<span class=\"comment\"> * with both q-&gt;lock_ptr and hb-&gt;lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#requeue_pi_wake_futex\">requeue_pi_wake_futex</a>(struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#q\">q</a>, union <a class=\"id\" href=\"#futex_key\">futex_key</a> *<a class=\"id\" href=\"#key\">key</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb\">hb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_futex_key_refs\">get_futex_key_refs</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a> = *<a class=\"id\" href=\"#key\">key</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#plist_node_empty\">plist_node_empty</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_del\">plist_del</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#plist\">plist</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#rt_waiter\">rt_waiter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#rt_waiter\">rt_waiter</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock_ptr\">lock_ptr</a> = &amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#lock\">lock</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PI_LIST\">CONFIG_DEBUG_PI_LIST</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#plist\">plist</a>.<a class=\"id\" href=\"#spinlock\">spinlock</a> = &amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#lock\">lock</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_state\">wake_up_state</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#TASK_NORMAL\">TASK_NORMAL</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * futex_proxy_trylock_atomic() - Attempt an atomic lock for the top waiter</span>", 
"<span class=\"comment\"> * @pifutex:<span class=\"ts\"/><span class=\"ts\"/>the user address of the to futex</span>", 
"<span class=\"comment\"> * @hb1:<span class=\"ts\"/><span class=\"ts\"/>the from futex hash bucket, must be locked by the caller</span>", 
"<span class=\"comment\"> * @hb2:<span class=\"ts\"/><span class=\"ts\"/>the to futex hash bucket, must be locked by the caller</span>", 
"<span class=\"comment\"> * @key1:<span class=\"ts\"/><span class=\"ts\"/>the from futex key</span>", 
"<span class=\"comment\"> * @key2:<span class=\"ts\"/><span class=\"ts\"/>the to futex key</span>", 
"<span class=\"comment\"> * @ps:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>address to store the pi_state pointer</span>", 
"<span class=\"comment\"> * @set_waiters:<span class=\"ts\"/>force setting the FUTEX_WAITERS bit (1) or not (0)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Try and get the lock on behalf of the top waiter if we can do it atomically.</span>", 
"<span class=\"comment\"> * Wake the top waiter if we succeed.  If the caller specified set_waiters,</span>", 
"<span class=\"comment\"> * then direct futex_lock_pi_atomic() to force setting the FUTEX_WAITERS bit.</span>", 
"<span class=\"comment\"> * hb1 and hb2 must be held by the caller.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> *  0 - failed to acquire the lock atomicly</span>", 
"<span class=\"comment\"> *  1 - acquired the lock</span>", 
"<span class=\"comment\"> * &lt;0 - error</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#futex_proxy_trylock_atomic\">futex_proxy_trylock_atomic</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#pifutex\">pifutex</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb1\">hb1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb2\">hb2</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> union <a class=\"id\" href=\"#futex_key\">futex_key</a> *<a class=\"id\" href=\"#key1\">key1</a>, union <a class=\"id\" href=\"#futex_key\">futex_key</a> *<a class=\"id\" href=\"#key2\">key2</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#futex_pi_state\">futex_pi_state</a> **<a class=\"id\" href=\"#ps\">ps</a>, int <a class=\"id\" href=\"#set_waiters\">set_waiters</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#top_waiter\">top_waiter</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#curval\">curval</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_futex_value_locked\">get_futex_value_locked</a>(&amp;<a class=\"id\" href=\"#curval\">curval</a>, <a class=\"id\" href=\"#pifutex\">pifutex</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Find the top_waiter and determine if there are additional waiters.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the caller intends to requeue more than 1 waiter to pifutex,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * force futex_lock_pi_atomic() to set the FUTEX_WAITERS bit now,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * as we have means to handle the possible fault.  If not, don't set</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the bit unecessarily as it will force the subsequent unlock to enter</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the kernel.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#top_waiter\">top_waiter</a> = <a class=\"id\" href=\"#futex_top_waiter\">futex_top_waiter</a>(<a class=\"id\" href=\"#hb1\">hb1</a>, <a class=\"id\" href=\"#key1\">key1</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* There are no waiters, nothing for us to do. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#top_waiter\">top_waiter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ensure we requeue to the expected futex. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#match_futex\">match_futex</a>(<a class=\"id\" href=\"#top_waiter\">top_waiter</a>-><a class=\"id\" href=\"#requeue_pi_key\">requeue_pi_key</a>, <a class=\"id\" href=\"#key2\">key2</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Try to take the lock for top_waiter.  Set the FUTEX_WAITERS bit in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the contended case or if set_waiters is 1.  The pi_state is returned</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in ps in contended cases.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#futex_lock_pi_atomic\">futex_lock_pi_atomic</a>(<a class=\"id\" href=\"#pifutex\">pifutex</a>, <a class=\"id\" href=\"#hb2\">hb2</a>, <a class=\"id\" href=\"#key2\">key2</a>, <a class=\"id\" href=\"#ps\">ps</a>, <a class=\"id\" href=\"#top_waiter\">top_waiter</a>-><a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#set_waiters\">set_waiters</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#requeue_pi_wake_futex\">requeue_pi_wake_futex</a>(<a class=\"id\" href=\"#top_waiter\">top_waiter</a>, <a class=\"id\" href=\"#key2\">key2</a>, <a class=\"id\" href=\"#hb2\">hb2</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * futex_requeue() - Requeue waiters from uaddr1 to uaddr2</span>", 
"<span class=\"comment\"> * uaddr1:<span class=\"ts\"/>source futex user address</span>", 
"<span class=\"comment\"> * uaddr2:<span class=\"ts\"/>target futex user address</span>", 
"<span class=\"comment\"> * nr_wake:<span class=\"ts\"/>number of waiters to wake (must be 1 for requeue_pi)</span>", 
"<span class=\"comment\"> * nr_requeue:<span class=\"ts\"/>number of waiters to requeue (0-INT_MAX)</span>", 
"<span class=\"comment\"> * requeue_pi:<span class=\"ts\"/>if we are attempting to requeue from a non-pi futex to a</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>pi futex (pi to pi requeue is not supported)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Requeue waiters on uaddr1 to uaddr2. In the requeue_pi case, try to acquire</span>", 
"<span class=\"comment\"> * uaddr2 atomically on behalf of the top waiter.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> * &gt;=0 - on success, the number of tasks requeued or woken</span>", 
"<span class=\"comment\"> *  &lt;0 - on error</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#futex_requeue\">futex_requeue</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr1\">uaddr1</a>, int <a class=\"id\" href=\"#fshared\">fshared</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr2\">uaddr2</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#nr_wake\">nr_wake</a>, int <a class=\"id\" href=\"#nr_requeue\">nr_requeue</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#cmpval\">cmpval</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#requeue_pi\">requeue_pi</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#futex_key\">futex_key</a> <a class=\"id\" href=\"#key1\">key1</a> = <a class=\"id\" href=\"#FUTEX_KEY_INIT\">FUTEX_KEY_INIT</a>, <a class=\"id\" href=\"#key2\">key2</a> = <a class=\"id\" href=\"#FUTEX_KEY_INIT\">FUTEX_KEY_INIT</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#drop_count\">drop_count</a> = 0, <a class=\"id\" href=\"#task_count\">task_count</a> = 0, <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_pi_state\">futex_pi_state</a> *<a class=\"id\" href=\"#pi_state\">pi_state</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb1\">hb1</a>, *<a class=\"id\" href=\"#hb2\">hb2</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#plist_head\">plist_head</a> *<a class=\"id\" href=\"#head1\">head1</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#this\">this</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#curval2\">curval2</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#requeue_pi\">requeue_pi</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * requeue_pi requires a pi_state, try to allocate it now</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * without any locks in case it fails.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#refill_pi_state_cache\">refill_pi_state_cache</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * requeue_pi must wake as many tasks as it can, up to nr_wake</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * + nr_requeue, since it acquires the rt_mutex prior to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * returning to userspace, so as to not leave the rt_mutex with</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * waiters and no owner.  However, second and third wake-ups</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cannot be predicted as they involve race conditions with the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * first wake and a fault while looking up the pi_state.  Both</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pthread_cond_signal() and pthread_cond_broadcast() should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * use nr_wake=1.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_wake\">nr_wake</a> != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pi_state\">pi_state</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We will have to lookup the pi_state again, so free this one</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to keep the accounting correct.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pi_state\">free_pi_state</a>(<a class=\"id\" href=\"#pi_state\">pi_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pi_state\">pi_state</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_futex_key\">get_futex_key</a>(<a class=\"id\" href=\"#uaddr1\">uaddr1</a>, <a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key1\">key1</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a> != 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_futex_key\">get_futex_key</a>(<a class=\"id\" href=\"#uaddr2\">uaddr2</a>, <a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key2\">key2</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a> != 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put_key1\">out_put_key1</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hb1\">hb1</a> = <a class=\"id\" href=\"#hash_futex\">hash_futex</a>(&amp;<a class=\"id\" href=\"#key1\">key1</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hb2\">hb2</a> = <a class=\"id\" href=\"#hash_futex\">hash_futex</a>(&amp;<a class=\"id\" href=\"#key2\">key2</a>);", 
"", 
"<a class=\"id\" href=\"#retry_private\">retry_private</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#double_lock_hb\">double_lock_hb</a>(<a class=\"id\" href=\"#hb1\">hb1</a>, <a class=\"id\" href=\"#hb2\">hb2</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#cmpval\">cmpval</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#curval\">curval</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_futex_value_locked\">get_futex_value_locked</a>(&amp;<a class=\"id\" href=\"#curval\">curval</a>, <a class=\"id\" href=\"#uaddr1\">uaddr1</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#double_unlock_hb\">double_unlock_hb</a>(<a class=\"id\" href=\"#hb1\">hb1</a>, <a class=\"id\" href=\"#hb2\">hb2</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#curval\">curval</a>, <a class=\"id\" href=\"#uaddr1\">uaddr1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put_keys\">out_put_keys</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#fshared\">fshared</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry_private\">retry_private</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key2\">key2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key1\">key1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#curval\">curval</a> != *<a class=\"id\" href=\"#cmpval\">cmpval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#requeue_pi\">requeue_pi</a> && (<a class=\"id\" href=\"#task_count\">task_count</a> - <a class=\"id\" href=\"#nr_wake\">nr_wake</a> &lt; <a class=\"id\" href=\"#nr_requeue\">nr_requeue</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Attempt to acquire uaddr2 and wake the top waiter. If we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * intend to requeue waiters, force setting the FUTEX_WAITERS</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * bit.  We force this here where we are able to easily handle</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * faults rather in the requeue loop below.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#futex_proxy_trylock_atomic\">futex_proxy_trylock_atomic</a>(<a class=\"id\" href=\"#uaddr2\">uaddr2</a>, <a class=\"id\" href=\"#hb1\">hb1</a>, <a class=\"id\" href=\"#hb2\">hb2</a>, &amp;<a class=\"id\" href=\"#key1\">key1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#key2\">key2</a>, &amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>, <a class=\"id\" href=\"#nr_requeue\">nr_requeue</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * At this point the top_waiter has either taken uaddr2 or is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * waiting on it.  If the former, then the pi_state will not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * exist yet, look it up one more time to ensure we have a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reference to it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#pi_state\">pi_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_count\">drop_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_count\">task_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_futex_value_locked\">get_futex_value_locked</a>(&amp;<a class=\"id\" href=\"#curval2\">curval2</a>, <a class=\"id\" href=\"#uaddr2\">uaddr2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#lookup_pi_state\">lookup_pi_state</a>(<a class=\"id\" href=\"#curval2\">curval2</a>, <a class=\"id\" href=\"#hb2\">hb2</a>, &amp;<a class=\"id\" href=\"#key2\">key2</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#double_unlock_hb\">double_unlock_hb</a>(<a class=\"id\" href=\"#hb1\">hb1</a>, <a class=\"id\" href=\"#hb2\">hb2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key2\">key2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key1\">key1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fault_in_user_writeable\">fault_in_user_writeable</a>(<a class=\"id\" href=\"#uaddr2\">uaddr2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>case -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The owner was exiting, try again. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#double_unlock_hb\">double_unlock_hb</a>(<a class=\"id\" href=\"#hb1\">hb1</a>, <a class=\"id\" href=\"#hb2\">hb2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key2\">key2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key1\">key1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head1\">head1</a> = &amp;<a class=\"id\" href=\"#hb1\">hb1</a>-><a class=\"id\" href=\"#chain\">chain</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_for_each_entry_safe\">plist_for_each_entry_safe</a>(<a class=\"id\" href=\"#this\">this</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#head1\">head1</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task_count\">task_count</a> - <a class=\"id\" href=\"#nr_wake\">nr_wake</a> >= <a class=\"id\" href=\"#nr_requeue\">nr_requeue</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#match_futex\">match_futex</a>(&amp;<a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#key\">key</a>, &amp;<a class=\"id\" href=\"#key1\">key1</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * FUTEX_WAIT_REQEUE_PI and FUTEX_CMP_REQUEUE_PI should always</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be paired with each other and no other futex ops.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#requeue_pi\">requeue_pi</a> && !<a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#rt_waiter\">rt_waiter</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (!<a class=\"id\" href=\"#requeue_pi\">requeue_pi</a> && <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#rt_waiter\">rt_waiter</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Wake nr_wake waiters.  For requeue_pi, if we acquired the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * lock, we already woke the top_waiter.  If not, it will be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * woken by futex_unlock_pi().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (++<a class=\"id\" href=\"#task_count\">task_count</a> <= <a class=\"id\" href=\"#nr_wake\">nr_wake</a> && !<a class=\"id\" href=\"#requeue_pi\">requeue_pi</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_futex\">wake_futex</a>(<a class=\"id\" href=\"#this\">this</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ensure we requeue to the expected futex for requeue_pi. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#requeue_pi\">requeue_pi</a> && !<a class=\"id\" href=\"#match_futex\">match_futex</a>(<a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#requeue_pi_key\">requeue_pi_key</a>, &amp;<a class=\"id\" href=\"#key2\">key2</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Requeue nr_requeue waiters and possibly one more in the case</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of requeue_pi if we couldn't acquire the lock atomically.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#requeue_pi\">requeue_pi</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Prepare the waiter to take the rt_mutex. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#refcount\">refcount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#pi_state\">pi_state</a> = <a class=\"id\" href=\"#pi_state\">pi_state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rt_mutex_start_proxy_lock\">rt_mutex_start_proxy_lock</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#rt_waiter\">rt_waiter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#task\">task</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We got the lock. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#requeue_pi_wake_futex\">requeue_pi_wake_futex</a>(<a class=\"id\" href=\"#this\">this</a>, &amp;<a class=\"id\" href=\"#key2\">key2</a>, <a class=\"id\" href=\"#hb2\">hb2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_count\">drop_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* -EDEADLK */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#pi_state\">pi_state</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pi_state\">free_pi_state</a>(<a class=\"id\" href=\"#pi_state\">pi_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#requeue_futex\">requeue_futex</a>(<a class=\"id\" href=\"#this\">this</a>, <a class=\"id\" href=\"#hb1\">hb1</a>, <a class=\"id\" href=\"#hb2\">hb2</a>, &amp;<a class=\"id\" href=\"#key2\">key2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_count\">drop_count</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#double_unlock_hb\">double_unlock_hb</a>(<a class=\"id\" href=\"#hb1\">hb1</a>, <a class=\"id\" href=\"#hb2\">hb2</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * drop_futex_key_refs() must be called outside the spinlocks. During</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the requeue we moved futex_q's from the hash bucket at key1 to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * one at key2 and updated their key pointer.  We no longer need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hold the references to key1.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (--<a class=\"id\" href=\"#drop_count\">drop_count</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_futex_key_refs\">drop_futex_key_refs</a>(&amp;<a class=\"id\" href=\"#key1\">key1</a>);", 
"", 
"<a class=\"id\" href=\"#out_put_keys\">out_put_keys</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key2\">key2</a>);", 
"<a class=\"id\" href=\"#out_put_key1\">out_put_key1</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key1\">key1</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pi_state\">pi_state</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pi_state\">free_pi_state</a>(<a class=\"id\" href=\"#pi_state\">pi_state</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> ? <a class=\"id\" href=\"#ret\">ret</a> : <a class=\"id\" href=\"#task_count\">task_count</a>;", 
"}", 
"", 
"<span class=\"comment\">/* The key must be already stored in q-&gt;key. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#queue_lock\">queue_lock</a>(struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb\">hb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_futex_key_refs\">get_futex_key_refs</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hb\">hb</a> = <a class=\"id\" href=\"#hash_futex\">hash_futex</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock_ptr\">lock_ptr</a> = &amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#lock\">lock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hb\">hb</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#queue_unlock\">queue_unlock</a>(struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb\">hb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drop_futex_key_refs\">drop_futex_key_refs</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * queue_me() - Enqueue the futex_q on the futex_hash_bucket</span>", 
"<span class=\"comment\"> * @q:<span class=\"ts\"/>The futex_q to enqueue</span>", 
"<span class=\"comment\"> * @hb:<span class=\"ts\"/>The destination hash bucket</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The hb-&gt;lock must be held by the caller, and is released here. A call to</span>", 
"<span class=\"comment\"> * queue_me() is typically paired with exactly one call to unqueue_me().  The</span>", 
"<span class=\"comment\"> * exceptions involve the PI related operations, which may use unqueue_me_pi()</span>", 
"<span class=\"comment\"> * or nothing if the unqueue is done as part of the wake process and the unqueue</span>", 
"<span class=\"comment\"> * state is implicit in the state of woken task (see futex_wait_requeue_pi() for</span>", 
"<span class=\"comment\"> * an example).</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#queue_me\">queue_me</a>(struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb\">hb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#prio\">prio</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The priority used to register this element is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - either the real thread-priority for the real-time threads</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (i.e. threads with a priority lower than MAX_RT_PRIO)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - or MAX_RT_PRIO for non-RT threads.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Thus, all RT-threads are woken first in priority order, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the others are woken last, in FIFO order.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prio\">prio</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#normal_prio\">normal_prio</a>, <a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_node_init\">plist_node_init</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#prio\">prio</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PI_LIST\">CONFIG_DEBUG_PI_LIST</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#plist\">plist</a>.<a class=\"id\" href=\"#spinlock\">spinlock</a> = &amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#lock\">lock</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_add\">plist_add</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#chain\">chain</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * unqueue_me() - Remove the futex_q from its futex_hash_bucket</span>", 
"<span class=\"comment\"> * @q:<span class=\"ts\"/>The futex_q to unqueue</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The q-&gt;lock_ptr must not be held by the caller. A call to unqueue_me() must</span>", 
"<span class=\"comment\"> * be paired with exactly one earlier call to queue_me().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> *   1 - if the futex_q was still queued (and we removed unqueued it)</span>", 
"<span class=\"comment\"> *   0 - if the futex_q was already removed by the waking thread</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#unqueue_me\">unqueue_me</a>(struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock_ptr\">lock_ptr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* In the common case we don't take the spinlock, which is nice. */</span>", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_ptr\">lock_ptr</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock_ptr\">lock_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lock_ptr\">lock_ptr</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#lock_ptr\">lock_ptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * q-&gt;lock_ptr can change between reading it and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * spin_lock(), causing us to take the wrong lock.  This</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * corrects the race condition.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Reasoning goes like this: if we have the wrong lock,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * q-&gt;lock_ptr must have changed (maybe several times)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * between reading it and the spin_lock().  It can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * change again after the spin_lock() but only if it was</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * already changed before the spin_lock().  It cannot,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * however, change back to the original value.  Therefore</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we can detect whether we acquired the correct lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#lock_ptr\">lock_ptr</a> != <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock_ptr\">lock_ptr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#lock_ptr\">lock_ptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#plist_node_empty\">plist_node_empty</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plist_del\">plist_del</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#plist\">plist</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#pi_state\">pi_state</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#lock_ptr\">lock_ptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drop_futex_key_refs\">drop_futex_key_refs</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * PI futexes can not be requeued and must remove themself from the</span>", 
"<span class=\"comment\"> * hash bucket. The hash bucket lock (i.e. lock_ptr) is held on entry</span>", 
"<span class=\"comment\"> * and dropped here.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#unqueue_me_pi\">unqueue_me_pi</a>(struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#plist_node_empty\">plist_node_empty</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_del\">plist_del</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#plist\">plist</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#pi_state\">pi_state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pi_state\">free_pi_state</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#pi_state\">pi_state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#pi_state\">pi_state</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock_ptr\">lock_ptr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drop_futex_key_refs\">drop_futex_key_refs</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Fixup the pi_state owner with the new owner.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called with hash bucket lock held and mm-&gt;sem held for non</span>", 
"<span class=\"comment\"> * private futexes.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#fixup_pi_state_owner\">fixup_pi_state_owner</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr\">uaddr</a>, struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#q\">q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#newowner\">newowner</a>, int <a class=\"id\" href=\"#fshared\">fshared</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#newtid\">newtid</a> = <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#newowner\">newowner</a>) | <a class=\"id\" href=\"#FUTEX_WAITERS\">FUTEX_WAITERS</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_pi_state\">futex_pi_state</a> *<a class=\"id\" href=\"#pi_state\">pi_state</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#pi_state\">pi_state</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#oldowner\">oldowner</a> = <a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#uval\">uval</a>, <a class=\"id\" href=\"#curval\">curval</a>, <a class=\"id\" href=\"#newval\">newval</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Owner died? */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newtid\">newtid</a> |= <a class=\"id\" href=\"#FUTEX_OWNER_DIED\">FUTEX_OWNER_DIED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We are here either because we stole the rtmutex from the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pending owner or we are the pending owner which failed to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * get the rtmutex. We have to replace the pending owner TID</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the user space variable. This must be atomic as we have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to preserve the owner died bit here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note: We write the user space value _before_ changing the pi_state</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because we can fault here. Imagine swapped out pages or a fork</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that marked all the anonymous memory readonly for cow.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Modifying pi_state _before_ the user space value would</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * leave the pi_state in an inconsistent state when we fault</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here, because we need to drop the hash bucket lock to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * handle the fault. This might be observed in the PID check</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in lookup_pi_state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_futex_value_locked\">get_futex_value_locked</a>(&amp;<a class=\"id\" href=\"#uval\">uval</a>, <a class=\"id\" href=\"#uaddr\">uaddr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#handle_fault\">handle_fault</a>;", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newval\">newval</a> = (<a class=\"id\" href=\"#uval\">uval</a> &amp; <a class=\"id\" href=\"#FUTEX_OWNER_DIED\">FUTEX_OWNER_DIED</a>) | <a class=\"id\" href=\"#newtid\">newtid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curval\">curval</a> = <a class=\"id\" href=\"#cmpxchg_futex_value_locked\">cmpxchg_futex_value_locked</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#uval\">uval</a>, <a class=\"id\" href=\"#newval\">newval</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#curval\">curval</a> == -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#handle_fault\">handle_fault</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#curval\">curval</a> == <a class=\"id\" href=\"#uval\">uval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uval\">uval</a> = <a class=\"id\" href=\"#curval\">curval</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We fixed up user space. Now we need to fix the pi_state</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * itself.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#list\">list</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#newowner\">newowner</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#newowner\">newowner</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#list\">list</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#newowner\">newowner</a>-><a class=\"id\" href=\"#pi_state_list\">pi_state_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#newowner\">newowner</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"<span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To handle the page fault we need to drop the hash bucket</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lock here. That gives the other task (either the pending</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * owner itself or the task which stole the rtmutex) the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * chance to try the fixup of the pi_state. So once we are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * back from handling the fault we need to check the pi_state</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * after reacquiring the hash bucket lock and before trying to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do another fixup. When the fixup has been done already we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * simply return.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#handle_fault\">handle_fault</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock_ptr\">lock_ptr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fault_in_user_writeable\">fault_in_user_writeable</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock_ptr\">lock_ptr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check if someone else fixed it for us:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a> != <a class=\"id\" href=\"#oldowner\">oldowner</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In case we must use restart_block to restart a futex_wait,</span>", 
"<span class=\"comment\"> * we encode in the 'flags' shared capability</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAGS_SHARED\">FLAGS_SHARED</a><span class=\"ts\"/><span class=\"ts\"/>0x01", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAGS_CLOCKRT\">FLAGS_CLOCKRT</a><span class=\"ts\"/><span class=\"ts\"/>0x02", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAGS_HAS_TIMEOUT\">FLAGS_HAS_TIMEOUT</a><span class=\"ts\"/>0x04", 
"", 
"static long <a class=\"id\" href=\"#futex_wait_restart\">futex_wait_restart</a>(struct <a class=\"id\" href=\"#restart_block\">restart_block</a> *<a class=\"id\" href=\"#restart\">restart</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * fixup_owner() - Post lock pi_state and corner case management</span>", 
"<span class=\"comment\"> * @uaddr:<span class=\"ts\"/>user address of the futex</span>", 
"<span class=\"comment\"> * @fshared:<span class=\"ts\"/>whether the futex is shared (1) or not (0)</span>", 
"<span class=\"comment\"> * @q:<span class=\"ts\"/><span class=\"ts\"/>futex_q (contains pi_state and access to the rt_mutex)</span>", 
"<span class=\"comment\"> * @locked:<span class=\"ts\"/>if the attempt to take the rt_mutex succeeded (1) or not (0)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After attempting to lock an rt_mutex, this function is called to cleanup</span>", 
"<span class=\"comment\"> * the pi_state owner as well as handle race conditions that may allow us to</span>", 
"<span class=\"comment\"> * acquire the lock. Must be called with the hb lock held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> *  1 - success, lock taken</span>", 
"<span class=\"comment\"> *  0 - success, lock not taken</span>", 
"<span class=\"comment\"> * &lt;0 - on error (-EFAULT)</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#fixup_owner\">fixup_owner</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr\">uaddr</a>, int <a class=\"id\" href=\"#fshared\">fshared</a>, struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#q\">q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#locked\">locked</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#locked\">locked</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Got the lock. We might not be the anticipated owner if we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * did a lock-steal - fix up the PI-state in that case:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a> != <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fixup_pi_state_owner\">fixup_pi_state_owner</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#fshared\">fshared</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Catch the rare case, where the lock was released when we were on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * way back before we locked the hash bucket.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a> == <a class=\"id\" href=\"#current\">current</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Try to get the rt_mutex now. This might fail as some other</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * task acquired the rt_mutex after we removed ourself from the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * rt_mutex waiters list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_mutex_trylock\">rt_mutex_trylock</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locked\">locked</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pi_state is incorrect, some other task did a lock steal and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we returned due to timeout or signal without taking the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * rt_mutex. Too late. We can access the rt_mutex_owner without</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * locking, as the other task is now blocked on the hash bucket</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * lock. Fix the state up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#rt_mutex_owner\">rt_mutex_owner</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fixup_pi_state_owner\">fixup_pi_state_owner</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#owner\">owner</a>, <a class=\"id\" href=\"#fshared\">fshared</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Paranoia check. If we did not take the lock, then we should not be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the owner, nor the pending owner, of the rt_mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_mutex_owner\">rt_mutex_owner</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>) == <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"fixup_owner: ret = %d pi-mutex: %p \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"pi-state %p\\n\", <a class=\"id\" href=\"#ret\">ret</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>.<a class=\"id\" href=\"#owner\">owner</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> ? <a class=\"id\" href=\"#ret\">ret</a> : <a class=\"id\" href=\"#locked\">locked</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * futex_wait_queue_me() - queue_me() and wait for wakeup, timeout, or signal</span>", 
"<span class=\"comment\"> * @hb:<span class=\"ts\"/><span class=\"ts\"/>the futex hash bucket, must be locked by the caller</span>", 
"<span class=\"comment\"> * @q:<span class=\"ts\"/><span class=\"ts\"/>the futex_q to queue up on</span>", 
"<span class=\"comment\"> * @timeout:<span class=\"ts\"/>the prepared hrtimer_sleeper, or null for no timeout</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#futex_wait_queue_me\">futex_wait_queue_me</a>(struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb\">hb</a>, struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#q\">q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_sleeper\">hrtimer_sleeper</a> *<a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The task state is guaranteed to be set before another task can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wake it. set_current_state() is implemented using set_mb() and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * queue_me() calls spin_unlock() upon completion, both serializing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * access to the hash list and forcing another memory barrier.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue_me\">queue_me</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#hb\">hb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Arm the timer */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timeout\">timeout</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_start_expires\">hrtimer_start_expires</a>(&amp;<a class=\"id\" href=\"#timeout\">timeout</a>-><a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#HRTIMER_MODE_ABS\">HRTIMER_MODE_ABS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#hrtimer_active\">hrtimer_active</a>(&amp;<a class=\"id\" href=\"#timeout\">timeout</a>-><a class=\"id\" href=\"#timer\">timer</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we have been removed from the hash list, then another task</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * has tried to wake us, and we can skip the call to schedule().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#plist_node_empty\">plist_node_empty</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the timer has already expired, current will already be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * flagged for rescheduling. Only call schedule if there</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is no timeout, or if it has yet to expire.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#timeout\">timeout</a> || <a class=\"id\" href=\"#timeout\">timeout</a>-><a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * futex_wait_setup() - Prepare to wait on a futex</span>", 
"<span class=\"comment\"> * @uaddr:<span class=\"ts\"/>the futex userspace address</span>", 
"<span class=\"comment\"> * @val:<span class=\"ts\"/>the expected value</span>", 
"<span class=\"comment\"> * @fshared:<span class=\"ts\"/>whether the futex is shared (1) or not (0)</span>", 
"<span class=\"comment\"> * @q:<span class=\"ts\"/><span class=\"ts\"/>the associated futex_q</span>", 
"<span class=\"comment\"> * @hb:<span class=\"ts\"/><span class=\"ts\"/>storage for hash_bucket pointer to be returned to caller</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Setup the futex_q and locate the hash_bucket.  Get the futex value and</span>", 
"<span class=\"comment\"> * compare it with the expected value.  Handle atomic faults internally.</span>", 
"<span class=\"comment\"> * Return with the hb lock held and a q.key reference on success, and unlocked</span>", 
"<span class=\"comment\"> * with no q.key reference on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> *  0 - uaddr contains val and hb has been locked</span>", 
"<span class=\"comment\"> * &lt;1 - -EFAULT or -EWOULDBLOCK (uaddr does not contain val) and hb is unlcoked</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#futex_wait_setup\">futex_wait_setup</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>, int <a class=\"id\" href=\"#fshared\">fshared</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> **<a class=\"id\" href=\"#hb\">hb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#uval\">uval</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Access the page AFTER the hash-bucket is locked.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Order is important:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   Userspace waiter: val = var; if (cond(val)) futex_wait(&amp;var, val);</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   Userspace waker:  if (cond(var)) { var = new; futex_wake(&amp;var); }</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The basic logical guarantee of a futex is that it blocks ONLY</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if cond(var) is known to be true at the time of blocking, for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any cond.  If we queued after testing *uaddr, that would open</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a race condition where we could block indefinitely with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cond(var) false, which would violate the guarantee.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A consequence is that futex_wait() can return zero and absorb</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a wakeup when *uaddr != val on entry to the syscall.  This is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * rare, but normal.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#FUTEX_KEY_INIT\">FUTEX_KEY_INIT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_futex_key\">get_futex_key</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a> != 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<a class=\"id\" href=\"#retry_private\">retry_private</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#hb\">hb</a> = <a class=\"id\" href=\"#queue_lock\">queue_lock</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_futex_value_locked\">get_futex_value_locked</a>(&amp;<a class=\"id\" href=\"#uval\">uval</a>, <a class=\"id\" href=\"#uaddr\">uaddr</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_unlock\">queue_unlock</a>(<a class=\"id\" href=\"#q\">q</a>, *<a class=\"id\" href=\"#hb\">hb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#uval\">uval</a>, <a class=\"id\" href=\"#uaddr\">uaddr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#fshared\">fshared</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry_private\">retry_private</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uval\">uval</a> != <a class=\"id\" href=\"#val\">val</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_unlock\">queue_unlock</a>(<a class=\"id\" href=\"#q\">q</a>, *<a class=\"id\" href=\"#hb\">hb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EWOULDBLOCK\">EWOULDBLOCK</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#futex_wait\">futex_wait</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr\">uaddr</a>, int <a class=\"id\" href=\"#fshared\">fshared</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#ktime_t\">ktime_t</a> *<a class=\"id\" href=\"#abs_time\">abs_time</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#bitset\">bitset</a>, int <a class=\"id\" href=\"#clockrt\">clockrt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_sleeper\">hrtimer_sleeper</a> <a class=\"id\" href=\"#timeout\">timeout</a>, *<a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#restart_block\">restart_block</a> *<a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb\">hb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_q\">futex_q</a> <a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitset\">bitset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#pi_state\">pi_state</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#bitset\">bitset</a> = <a class=\"id\" href=\"#bitset\">bitset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#rt_waiter\">rt_waiter</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#requeue_pi_key\">requeue_pi_key</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#abs_time\">abs_time</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = &amp;<a class=\"id\" href=\"#timeout\">timeout</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_init_on_stack\">hrtimer_init_on_stack</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#clockrt\">clockrt</a> ? <a class=\"id\" href=\"#CLOCK_REALTIME\">CLOCK_REALTIME</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#CLOCK_MONOTONIC\">CLOCK_MONOTONIC</a>, <a class=\"id\" href=\"#HRTIMER_MODE_ABS\">HRTIMER_MODE_ABS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_init_sleeper\">hrtimer_init_sleeper</a>(<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_set_expires_range_ns\">hrtimer_set_expires_range_ns</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#timer\">timer</a>, *<a class=\"id\" href=\"#abs_time\">abs_time</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#timer_slack_ns\">timer_slack_ns</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Prepare to wait on uaddr. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#futex_wait_setup\">futex_wait_setup</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#q\">q</a>, &amp;<a class=\"id\" href=\"#hb\">hb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* queue_me and wait for wakeup, timeout, or a signal. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#futex_wait_queue_me\">futex_wait_queue_me</a>(<a class=\"id\" href=\"#hb\">hb</a>, &amp;<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#to\">to</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we were woken (and unqueued), we succeeded, whatever. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#unqueue_me\">unqueue_me</a>(&amp;<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put_key\">out_put_key</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ETIMEDOUT\">ETIMEDOUT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#to\">to</a> && !<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put_key\">out_put_key</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We expect signal_pending(current), but we might be the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * victim of a spurious wakeup as well.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#abs_time\">abs_time</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put_key\">out_put_key</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#restart\">restart</a> = &amp;<a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#restart_block\">restart_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#restart\">restart</a>-><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#futex_wait_restart\">futex_wait_restart</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#restart\">restart</a>-><a class=\"id\" href=\"#futex\">futex</a>.<a class=\"id\" href=\"#uaddr\">uaddr</a> = (<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#uaddr\">uaddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#restart\">restart</a>-><a class=\"id\" href=\"#futex\">futex</a>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#restart\">restart</a>-><a class=\"id\" href=\"#futex\">futex</a>.<a class=\"id\" href=\"#time\">time</a> = <a class=\"id\" href=\"#abs_time\">abs_time</a>-><a class=\"id\" href=\"#tv64\">tv64</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#restart\">restart</a>-><a class=\"id\" href=\"#futex\">futex</a>.<a class=\"id\" href=\"#bitset\">bitset</a> = <a class=\"id\" href=\"#bitset\">bitset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#restart\">restart</a>-><a class=\"id\" href=\"#futex\">futex</a>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#FLAGS_HAS_TIMEOUT\">FLAGS_HAS_TIMEOUT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fshared\">fshared</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart\">restart</a>-><a class=\"id\" href=\"#futex\">futex</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#FLAGS_SHARED\">FLAGS_SHARED</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clockrt\">clockrt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart\">restart</a>-><a class=\"id\" href=\"#futex\">futex</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#FLAGS_CLOCKRT\">FLAGS_CLOCKRT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ERESTART_RESTARTBLOCK\">ERESTART_RESTARTBLOCK</a>;", 
"", 
"<a class=\"id\" href=\"#out_put_key\">out_put_key</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#key\">key</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#to\">to</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_cancel\">hrtimer_cancel</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#destroy_hrtimer_on_stack\">destroy_hrtimer_on_stack</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"", 
"static long <a class=\"id\" href=\"#futex_wait_restart\">futex_wait_restart</a>(struct <a class=\"id\" href=\"#restart_block\">restart_block</a> *<a class=\"id\" href=\"#restart\">restart</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr\">uaddr</a> = (<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#restart\">restart</a>-><a class=\"id\" href=\"#futex\">futex</a>.<a class=\"id\" href=\"#uaddr\">uaddr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fshared\">fshared</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#t\">t</a>, *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#restart\">restart</a>-><a class=\"id\" href=\"#futex\">futex</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FLAGS_HAS_TIMEOUT\">FLAGS_HAS_TIMEOUT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#restart\">restart</a>-><a class=\"id\" href=\"#futex\">futex</a>.<a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a> = &amp;<a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#restart\">restart</a>-><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#do_no_restart_syscall\">do_no_restart_syscall</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#restart\">restart</a>-><a class=\"id\" href=\"#futex\">futex</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FLAGS_SHARED\">FLAGS_SHARED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fshared\">fshared</a> = 1;", 
"<span class=\"ts\"/>return (long)<a class=\"id\" href=\"#futex_wait\">futex_wait</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#fshared\">fshared</a>, <a class=\"id\" href=\"#restart\">restart</a>-><a class=\"id\" href=\"#futex\">futex</a>.<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#tp\">tp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart\">restart</a>-><a class=\"id\" href=\"#futex\">futex</a>.<a class=\"id\" href=\"#bitset\">bitset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart\">restart</a>-><a class=\"id\" href=\"#futex\">futex</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FLAGS_CLOCKRT\">FLAGS_CLOCKRT</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Userspace tried a 0 -&gt; TID atomic transition of the futex value</span>", 
"<span class=\"comment\"> * and failed. The kernel side here does the whole locking operation:</span>", 
"<span class=\"comment\"> * if there are waiters then it will block, it does PI, etc. (Due to</span>", 
"<span class=\"comment\"> * races the kernel might see a 0 value of the futex too.)</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#futex_lock_pi\">futex_lock_pi</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr\">uaddr</a>, int <a class=\"id\" href=\"#fshared\">fshared</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#detect\">detect</a>, <a class=\"id\" href=\"#ktime_t\">ktime_t</a> *<a class=\"id\" href=\"#time\">time</a>, int <a class=\"id\" href=\"#trylock\">trylock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_sleeper\">hrtimer_sleeper</a> <a class=\"id\" href=\"#timeout\">timeout</a>, *<a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb\">hb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_q\">futex_q</a> <a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#refill_pi_state_cache\">refill_pi_state_cache</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time\">time</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = &amp;<a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_init_on_stack\">hrtimer_init_on_stack</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#CLOCK_REALTIME\">CLOCK_REALTIME</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#HRTIMER_MODE_ABS\">HRTIMER_MODE_ABS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_init_sleeper\">hrtimer_init_sleeper</a>(<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_set_expires\">hrtimer_set_expires</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#timer\">timer</a>, *<a class=\"id\" href=\"#time\">time</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#pi_state\">pi_state</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#rt_waiter\">rt_waiter</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#requeue_pi_key\">requeue_pi_key</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#FUTEX_KEY_INIT\">FUTEX_KEY_INIT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_futex_key\">get_futex_key</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a> != 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<a class=\"id\" href=\"#retry_private\">retry_private</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hb\">hb</a> = <a class=\"id\" href=\"#queue_lock\">queue_lock</a>(&amp;<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#futex_lock_pi_atomic\">futex_lock_pi_atomic</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#hb\">hb</a>, &amp;<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#key\">key</a>, &amp;<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#pi_state\">pi_state</a>, <a class=\"id\" href=\"#current\">current</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We got the lock. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock_put_key\">out_unlock_put_key</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>case -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#uaddr_faulted\">uaddr_faulted</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>case -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Task is exiting and we just wait for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * exit to complete.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_unlock\">queue_unlock</a>(&amp;<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#hb\">hb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock_put_key\">out_unlock_put_key</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only actually queue now that the atomic ops are done:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue_me\">queue_me</a>(&amp;<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#hb\">hb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#pi_state\">pi_state</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Block on the PI mutex:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#trylock\">trylock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rt_mutex_timed_lock\">rt_mutex_timed_lock</a>(&amp;<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>, <a class=\"id\" href=\"#to\">to</a>, 1);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rt_mutex_trylock\">rt_mutex_trylock</a>(&amp;<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Fixup the trylock return value: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ret\">ret</a> ? 0 : -<a class=\"id\" href=\"#EWOULDBLOCK\">EWOULDBLOCK</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#lock_ptr\">lock_ptr</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fixup the pi_state owner and possibly acquire the lock if we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * haven't already.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#fixup_owner\">fixup_owner</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#q\">q</a>, !<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If fixup_owner() returned an error, proprogate that.  If it acquired</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the lock, clear our -ETIMEDOUT or -EINTR.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (<a class=\"id\" href=\"#res\">res</a> &lt; 0) ? <a class=\"id\" href=\"#res\">res</a> : 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If fixup_owner() faulted and was unable to handle the fault, unlock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it and return the fault to userspace.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> && (<a class=\"id\" href=\"#rt_mutex_owner\">rt_mutex_owner</a>(&amp;<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>) == <a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_unlock\">rt_mutex_unlock</a>(&amp;<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Unqueue and drop the lock */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unqueue_me_pi\">unqueue_me_pi</a>(&amp;<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put_key\">out_put_key</a>;", 
"", 
"<a class=\"id\" href=\"#out_unlock_put_key\">out_unlock_put_key</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue_unlock\">queue_unlock</a>(&amp;<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#hb\">hb</a>);", 
"", 
"<a class=\"id\" href=\"#out_put_key\">out_put_key</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#key\">key</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#to\">to</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#destroy_hrtimer_on_stack\">destroy_hrtimer_on_stack</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> != -<a class=\"id\" href=\"#EINTR\">EINTR</a> ? <a class=\"id\" href=\"#ret\">ret</a> : -<a class=\"id\" href=\"#ERESTARTNOINTR\">ERESTARTNOINTR</a>;", 
"", 
"<a class=\"id\" href=\"#uaddr_faulted\">uaddr_faulted</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue_unlock\">queue_unlock</a>(&amp;<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#hb\">hb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fault_in_user_writeable\">fault_in_user_writeable</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put_key\">out_put_key</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fshared\">fshared</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry_private\">retry_private</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Userspace attempted a TID -&gt; 0 atomic transition, and failed.</span>", 
"<span class=\"comment\"> * This is the in-kernel slowpath: we look up the PI state (if any),</span>", 
"<span class=\"comment\"> * and do the rt-mutex unlock.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#futex_unlock_pi\">futex_unlock_pi</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr\">uaddr</a>, int <a class=\"id\" href=\"#fshared\">fshared</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb\">hb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#this\">this</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#uval\">uval</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#plist_head\">plist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#futex_key\">futex_key</a> <a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#FUTEX_KEY_INIT\">FUTEX_KEY_INIT</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#uval\">uval</a>, <a class=\"id\" href=\"#uaddr\">uaddr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We release only a lock we actually own:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#uval\">uval</a> &amp; <a class=\"id\" href=\"#FUTEX_TID_MASK\">FUTEX_TID_MASK</a>) != <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_futex_key\">get_futex_key</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a> != 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hb\">hb</a> = <a class=\"id\" href=\"#hash_futex\">hash_futex</a>(&amp;<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To avoid races, try to do the TID -&gt; 0 atomic transition</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * again. If it succeeds then we can return without waking</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * anyone else up:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#uval\">uval</a> &amp; <a class=\"id\" href=\"#FUTEX_OWNER_DIED\">FUTEX_OWNER_DIED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uval\">uval</a> = <a class=\"id\" href=\"#cmpxchg_futex_value_locked\">cmpxchg_futex_value_locked</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#current\">current</a>), 0);", 
"", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#uval\">uval</a> == -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#pi_faulted\">pi_faulted</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Rare case: we managed to release the lock atomically,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no need to wake anyone else up:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#uval\">uval</a> == <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#current\">current</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ok, other tasks may need to be woken up - check waiters</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and do the wakeup if necessary:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#chain\">chain</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_for_each_entry_safe\">plist_for_each_entry_safe</a>(<a class=\"id\" href=\"#this\">this</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#match_futex\">match_futex</a> (&amp;<a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#key\">key</a>, &amp;<a class=\"id\" href=\"#key\">key</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#wake_futex_pi\">wake_futex_pi</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#uval\">uval</a>, <a class=\"id\" href=\"#this\">this</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The atomic access to the futex value</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * generated a pagefault, so retry the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * user-access and the wakeup:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#pi_faulted\">pi_faulted</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No waiters - kernel unlocks the futex:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#uval\">uval</a> &amp; <a class=\"id\" href=\"#FUTEX_OWNER_DIED\">FUTEX_OWNER_DIED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#unlock_futex_pi\">unlock_futex_pi</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#uval\">uval</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#pi_faulted\">pi_faulted</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<a class=\"id\" href=\"#pi_faulted\">pi_faulted</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fault_in_user_writeable\">fault_in_user_writeable</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * handle_early_requeue_pi_wakeup() - Detect early wakeup on the initial futex</span>", 
"<span class=\"comment\"> * @hb:<span class=\"ts\"/><span class=\"ts\"/>the hash_bucket futex_q was original enqueued on</span>", 
"<span class=\"comment\"> * @q:<span class=\"ts\"/><span class=\"ts\"/>the futex_q woken while waiting to be requeued</span>", 
"<span class=\"comment\"> * @key2:<span class=\"ts\"/>the futex_key of the requeue target futex</span>", 
"<span class=\"comment\"> * @timeout:<span class=\"ts\"/>the timeout associated with the wait (NULL if none)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Detect if the task was woken on the initial futex as opposed to the requeue</span>", 
"<span class=\"comment\"> * target futex.  If so, determine if it was a timeout or a signal that caused</span>", 
"<span class=\"comment\"> * the wakeup and return the appropriate error code to the caller.  Must be</span>", 
"<span class=\"comment\"> * called with the hb lock held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns</span>", 
"<span class=\"comment\"> *  0 - no early wakeup detected</span>", 
"<span class=\"comment\"> * &lt;0 - -ETIMEDOUT or -ERESTARTNOINTR</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"int <a class=\"id\" href=\"#handle_early_requeue_pi_wakeup\">handle_early_requeue_pi_wakeup</a>(struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb\">hb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#futex_q\">futex_q</a> *<a class=\"id\" href=\"#q\">q</a>, union <a class=\"id\" href=\"#futex_key\">futex_key</a> *<a class=\"id\" href=\"#key2\">key2</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#hrtimer_sleeper\">hrtimer_sleeper</a> *<a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * With the hb lock held, we avoid races while we process the wakeup.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We only need to hold hb (and not hb2) to ensure atomicity as the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wakeup code can't change q.key from uaddr to uaddr2 if we hold hb.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It can't be requeued from uaddr2 to something else since we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * support a PI aware source futex for requeue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#match_futex\">match_futex</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#key2\">key2</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock_ptr\">lock_ptr</a> && (&amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#lock\">lock</a> != <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock_ptr\">lock_ptr</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We were woken prior to requeue by a timeout or a signal.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Unqueue the futex_q and determine which it was.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plist_del\">plist_del</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#plist\">plist</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Handle spurious wakeups gracefully */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EWOULDBLOCK\">EWOULDBLOCK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timeout\">timeout</a> && !<a class=\"id\" href=\"#timeout\">timeout</a>-><a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ETIMEDOUT\">ETIMEDOUT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ERESTARTNOINTR\">ERESTARTNOINTR</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * futex_wait_requeue_pi() - Wait on uaddr and take uaddr2</span>", 
"<span class=\"comment\"> * @uaddr:<span class=\"ts\"/>the futex we initially wait on (non-pi)</span>", 
"<span class=\"comment\"> * @fshared:<span class=\"ts\"/>whether the futexes are shared (1) or not (0).  They must be</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>the same type, no requeueing from private to shared, etc.</span>", 
"<span class=\"comment\"> * @val:<span class=\"ts\"/>the expected value of uaddr</span>", 
"<span class=\"comment\"> * @abs_time:<span class=\"ts\"/>absolute timeout</span>", 
"<span class=\"comment\"> * @bitset:<span class=\"ts\"/>32 bit wakeup bitset set by userspace, defaults to all</span>", 
"<span class=\"comment\"> * @clockrt:<span class=\"ts\"/>whether to use CLOCK_REALTIME (1) or CLOCK_MONOTONIC (0)</span>", 
"<span class=\"comment\"> * @uaddr2:<span class=\"ts\"/>the pi futex we will take prior to returning to user-space</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller will wait on uaddr and will be requeued by futex_requeue() to</span>", 
"<span class=\"comment\"> * uaddr2 which must be PI aware.  Normal wakeup will wake on uaddr2 and</span>", 
"<span class=\"comment\"> * complete the acquisition of the rt_mutex prior to returning to userspace.</span>", 
"<span class=\"comment\"> * This ensures the rt_mutex maintains an owner when it has waiters; without</span>", 
"<span class=\"comment\"> * one, the pi logic wouldn't know which task to boost/deboost, if there was a</span>", 
"<span class=\"comment\"> * need to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We call schedule in futex_wait_queue_me() when we enqueue and return there</span>", 
"<span class=\"comment\"> * via the following:</span>", 
"<span class=\"comment\"> * 1) wakeup on uaddr2 after an atomic lock acquisition by futex_requeue()</span>", 
"<span class=\"comment\"> * 2) wakeup on uaddr2 after a requeue</span>", 
"<span class=\"comment\"> * 3) signal</span>", 
"<span class=\"comment\"> * 4) timeout</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If 3, cleanup and return -ERESTARTNOINTR.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If 2, we may then block on trying to take the rt_mutex and return via:</span>", 
"<span class=\"comment\"> * 5) successful lock</span>", 
"<span class=\"comment\"> * 6) signal</span>", 
"<span class=\"comment\"> * 7) timeout</span>", 
"<span class=\"comment\"> * 8) other lock acquisition failure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If 6, return -EWOULDBLOCK (restarting the syscall would do the same).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If 4 or 7, we cleanup and return with -ETIMEDOUT.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> *  0 - On success</span>", 
"<span class=\"comment\"> * &lt;0 - On error</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#futex_wait_requeue_pi\">futex_wait_requeue_pi</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr\">uaddr</a>, int <a class=\"id\" href=\"#fshared\">fshared</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#ktime_t\">ktime_t</a> *<a class=\"id\" href=\"#abs_time\">abs_time</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#bitset\">bitset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#clockrt\">clockrt</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr2\">uaddr2</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_sleeper\">hrtimer_sleeper</a> <a class=\"id\" href=\"#timeout\">timeout</a>, *<a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> <a class=\"id\" href=\"#rt_waiter\">rt_waiter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#pi_mutex\">pi_mutex</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_hash_bucket\">futex_hash_bucket</a> *<a class=\"id\" href=\"#hb\">hb</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#futex_key\">futex_key</a> <a class=\"id\" href=\"#key2\">key2</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#futex_q\">futex_q</a> <a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitset\">bitset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#abs_time\">abs_time</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = &amp;<a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_init_on_stack\">hrtimer_init_on_stack</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#clockrt\">clockrt</a> ? <a class=\"id\" href=\"#CLOCK_REALTIME\">CLOCK_REALTIME</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#CLOCK_MONOTONIC\">CLOCK_MONOTONIC</a>, <a class=\"id\" href=\"#HRTIMER_MODE_ABS\">HRTIMER_MODE_ABS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_init_sleeper\">hrtimer_init_sleeper</a>(<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_set_expires_range_ns\">hrtimer_set_expires_range_ns</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#timer\">timer</a>, *<a class=\"id\" href=\"#abs_time\">abs_time</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#timer_slack_ns\">timer_slack_ns</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The waiter is allocated on our stack, manipulated by the requeue</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * code while we sleep on uaddr.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_rt_mutex_init_waiter\">debug_rt_mutex_init_waiter</a>(&amp;<a class=\"id\" href=\"#rt_waiter\">rt_waiter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_waiter\">rt_waiter</a>.<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key2\">key2</a> = <a class=\"id\" href=\"#FUTEX_KEY_INIT\">FUTEX_KEY_INIT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_futex_key\">get_futex_key</a>(<a class=\"id\" href=\"#uaddr2\">uaddr2</a>, <a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key2\">key2</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a> != 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#pi_state\">pi_state</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#bitset\">bitset</a> = <a class=\"id\" href=\"#bitset\">bitset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#rt_waiter\">rt_waiter</a> = &amp;<a class=\"id\" href=\"#rt_waiter\">rt_waiter</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#requeue_pi_key\">requeue_pi_key</a> = &amp;<a class=\"id\" href=\"#key2\">key2</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Prepare to wait on uaddr. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#futex_wait_setup\">futex_wait_setup</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#q\">q</a>, &amp;<a class=\"id\" href=\"#hb\">hb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_key2\">out_key2</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Queue the futex_q, drop the hb lock, wait for wakeup. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#futex_wait_queue_me\">futex_wait_queue_me</a>(<a class=\"id\" href=\"#hb\">hb</a>, &amp;<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#to\">to</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#handle_early_requeue_pi_wakeup\">handle_early_requeue_pi_wakeup</a>(<a class=\"id\" href=\"#hb\">hb</a>, &amp;<a class=\"id\" href=\"#q\">q</a>, &amp;<a class=\"id\" href=\"#key2\">key2</a>, <a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hb\">hb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put_keys\">out_put_keys</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In order for us to be here, we know our q.key == key2, and since</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we took the hb-&gt;lock above, we also know that futex_requeue() has</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * completed and we no longer have to concern ourselves with a wakeup</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * race with the atomic proxy lock acquition by the requeue code.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if the requeue code acquired the second futex for us. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#rt_waiter\">rt_waiter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Got the lock. We might not be the anticipated owner if we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * did a lock-steal - fix up the PI-state in that case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#pi_state\">pi_state</a> && (<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#owner\">owner</a> != <a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#lock_ptr\">lock_ptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fixup_pi_state_owner\">fixup_pi_state_owner</a>(<a class=\"id\" href=\"#uaddr2\">uaddr2</a>, &amp;<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#current\">current</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#fshared\">fshared</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#lock_ptr\">lock_ptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We have been woken up by futex_unlock_pi(), a timeout, or a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * signal.  futex_unlock_pi() will not destroy the lock_ptr nor</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the pi_state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!&amp;<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#pi_state\">pi_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pi_mutex\">pi_mutex</a> = &amp;<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#pi_state\">pi_state</a>-><a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rt_mutex_finish_proxy_lock\">rt_mutex_finish_proxy_lock</a>(<a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>, <a class=\"id\" href=\"#to\">to</a>, &amp;<a class=\"id\" href=\"#rt_waiter\">rt_waiter</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_rt_mutex_free_waiter\">debug_rt_mutex_free_waiter</a>(&amp;<a class=\"id\" href=\"#rt_waiter\">rt_waiter</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#lock_ptr\">lock_ptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Fixup the pi_state owner and possibly acquire the lock if we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * haven't already.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#fixup_owner\">fixup_owner</a>(<a class=\"id\" href=\"#uaddr2\">uaddr2</a>, <a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#q\">q</a>, !<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If fixup_owner() returned an error, proprogate that.  If it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * acquired the lock, clear -ETIMEDOUT or -EINTR.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (<a class=\"id\" href=\"#res\">res</a> &lt; 0) ? <a class=\"id\" href=\"#res\">res</a> : 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Unqueue and drop the lock. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unqueue_me_pi\">unqueue_me_pi</a>(&amp;<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If fixup_pi_state_owner() faulted and was unable to handle the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fault, unlock the rt_mutex and return the fault to userspace.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_mutex_owner\">rt_mutex_owner</a>(<a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>) == <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_unlock\">rt_mutex_unlock</a>(<a class=\"id\" href=\"#pi_mutex\">pi_mutex</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EINTR\">EINTR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We've already been requeued, but cannot restart by calling</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * futex_lock_pi() directly. We could restart this syscall, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it would detect that the user space \"val\" changed and return</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * -EWOULDBLOCK.  Save the overhead of the restart and return</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * -EWOULDBLOCK directly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EWOULDBLOCK\">EWOULDBLOCK</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out_put_keys\">out_put_keys</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#key\">key</a>);", 
"<a class=\"id\" href=\"#out_key2\">out_key2</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_futex_key\">put_futex_key</a>(<a class=\"id\" href=\"#fshared\">fshared</a>, &amp;<a class=\"id\" href=\"#key2\">key2</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#to\">to</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_cancel\">hrtimer_cancel</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#destroy_hrtimer_on_stack\">destroy_hrtimer_on_stack</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Support for robust futexes: the kernel cleans up held futexes at</span>", 
"<span class=\"comment\"> * thread exit time.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Implementation: user-space maintains a per-thread list of locks it</span>", 
"<span class=\"comment\"> * is holding. Upon do_exit(), the kernel carefully walks this list,</span>", 
"<span class=\"comment\"> * and marks all locks that are owned by this thread with the</span>", 
"<span class=\"comment\"> * FUTEX_OWNER_DIED bit, and wakes up a waiter (if any). The list is</span>", 
"<span class=\"comment\"> * always manipulated with the lock held, so the list is private and</span>", 
"<span class=\"comment\"> * per-thread. Userspace also maintains a per-thread 'list_op_pending'</span>", 
"<span class=\"comment\"> * field, to allow the kernel to clean up if the thread dies after</span>", 
"<span class=\"comment\"> * acquiring the lock, but just before it could have added itself to</span>", 
"<span class=\"comment\"> * the list. There can only be one such pending lock.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sys_set_robust_list() - Set the robust-futex list head of a task</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>pointer to the list-head</span>", 
"<span class=\"comment\"> * @len:<span class=\"ts\"/>length of the list-head, as userspace expects</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#set_robust_list\">set_robust_list</a>, struct <a class=\"id\" href=\"#robust_list_head\">robust_list_head</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#futex_cmpxchg_enabled\">futex_cmpxchg_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The kernel knows only one size for now:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#len\">len</a> != sizeof(*<a class=\"id\" href=\"#head\">head</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#robust_list\">robust_list</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sys_get_robust_list() - Get the robust-futex list head of a task</span>", 
"<span class=\"comment\"> * @pid:<span class=\"ts\"/>pid of the process [zero for current task]</span>", 
"<span class=\"comment\"> * @head_ptr:<span class=\"ts\"/>pointer to a list-head pointer, the kernel fills it in</span>", 
"<span class=\"comment\"> * @len_ptr:<span class=\"ts\"/>pointer to a length field, the kernel fills in the header size</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE3\">SYSCALL_DEFINE3</a>(<a class=\"id\" href=\"#get_robust_list\">get_robust_list</a>, int, <a class=\"id\" href=\"#pid\">pid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#robust_list_head\">robust_list_head</a> <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#head_ptr\">head_ptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#len_ptr\">len_ptr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#robust_list_head\">robust_list_head</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>(), *<a class=\"id\" href=\"#pcred\">pcred</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#futex_cmpxchg_enabled\">futex_cmpxchg_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pid\">pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#robust_list\">robust_list</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#find_task_by_vpid\">find_task_by_vpid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_unlock\">err_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcred\">pcred</a> = <a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#euid\">euid</a> != <a class=\"id\" href=\"#pcred\">pcred</a>-><a class=\"id\" href=\"#euid\">euid</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#euid\">euid</a> != <a class=\"id\" href=\"#pcred\">pcred</a>-><a class=\"id\" href=\"#uid\">uid</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_PTRACE\">CAP_SYS_PTRACE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_unlock\">err_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#robust_list\">robust_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#put_user\">put_user</a>(sizeof(*<a class=\"id\" href=\"#head\">head</a>), <a class=\"id\" href=\"#len_ptr\">len_ptr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#head_ptr\">head_ptr</a>);", 
];
xr_frag_insert('l/3b/a4a8107b9b715b8a7bdfc0c88ad1c0a1ac6df7.xr', __xr_tmp);
