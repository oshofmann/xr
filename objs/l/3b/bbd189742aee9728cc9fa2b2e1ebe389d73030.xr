var __xr_tmp = [
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a>-- &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>[<a class=\"id\" href=\"#size\">size</a>] = *<a class=\"id\" href=\"#buf\">buf</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>[<a class=\"id\" href=\"#size\">size</a>] == 0x7d)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>[<a class=\"id\" href=\"#size\">size</a>] = *<a class=\"id\" href=\"#buf\">buf</a>++ ^ 0x20;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#probe_kernel_write\">probe_kernel_write</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"#if <a class=\"id\" href=\"#DBG_MAX_REG_NUM\">DBG_MAX_REG_NUM</a> &gt; 0", 
"void <a class=\"id\" href=\"#pt_regs_to_gdb_regs\">pt_regs_to_gdb_regs</a>(unsigned long *<a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a> = 0;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#ptr\">ptr</a> = (char *)<a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#DBG_MAX_REG_NUM\">DBG_MAX_REG_NUM</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_get_reg\">dbg_get_reg</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#ptr\">ptr</a> + <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> += <a class=\"id\" href=\"#dbg_reg_def\">dbg_reg_def</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#gdb_regs_to_pt_regs\">gdb_regs_to_pt_regs</a>(unsigned long *<a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a> = 0;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#ptr\">ptr</a> = (char *)<a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#DBG_MAX_REG_NUM\">DBG_MAX_REG_NUM</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_set_reg\">dbg_set_reg</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#ptr\">ptr</a> + <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> += <a class=\"id\" href=\"#dbg_reg_def\">dbg_reg_def</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* DBG_MAX_REG_NUM &gt; 0 */</span>", 
"", 
"<span class=\"comment\">/* Write memory due to an 'M' or 'X' packet. */</span>", 
"static int <a class=\"id\" href=\"#write_mem_msg\">write_mem_msg</a>(int <a class=\"id\" href=\"#binary\">binary</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#ptr\">ptr</a> = &amp;<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[1];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_hex2long\">kgdb_hex2long</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>, &amp;<a class=\"id\" href=\"#addr\">addr</a>) &gt; 0 && *(<a class=\"id\" href=\"#ptr\">ptr</a>++) == ',' &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#kgdb_hex2long\">kgdb_hex2long</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>, &amp;<a class=\"id\" href=\"#length\">length</a>) &gt; 0 && *(<a class=\"id\" href=\"#ptr\">ptr</a>++) == ':') {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#binary\">binary</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#kgdb_ebin2mem\">kgdb_ebin2mem</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, (char *)<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#kgdb_hex2mem\">kgdb_hex2mem</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, (char *)<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#CACHE_FLUSH_IS_SAFE\">CACHE_FLUSH_IS_SAFE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_icache_range\">flush_icache_range</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#error_packet\">error_packet</a>(char *<a class=\"id\" href=\"#pkt\">pkt</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pkt\">pkt</a>[0] = 'E';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pkt\">pkt</a>[1] = <a class=\"id\" href=\"#hex_asc\">hex_asc</a>[(<a class=\"id\" href=\"#error\">error</a> / 10)];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pkt\">pkt</a>[2] = <a class=\"id\" href=\"#hex_asc\">hex_asc</a>[(<a class=\"id\" href=\"#error\">error</a> % 10)];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pkt\">pkt</a>[3] = '\\0';", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Thread ID accessors. We represent a flat TID space to GDB, where</span>", 
"<span class=\"comment\"> * the per CPU idle threads (which under Linux all have PID 0) are</span>", 
"<span class=\"comment\"> * remapped to negative TIDs.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BUF_THREAD_ID_SIZE\">BUF_THREAD_ID_SIZE</a><span class=\"ts\"/>8", 
"", 
"static char *<a class=\"id\" href=\"#pack_threadid\">pack_threadid</a>(char *<a class=\"id\" href=\"#pkt\">pkt</a>, unsigned char *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#limit\">limit</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lzero\">lzero</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#id\">id</a> + (<a class=\"id\" href=\"#BUF_THREAD_ID_SIZE\">BUF_THREAD_ID_SIZE</a> / 2);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#id\">id</a> &lt; <a class=\"id\" href=\"#limit\">limit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#lzero\">lzero</a> || *<a class=\"id\" href=\"#id\">id</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pkt\">pkt</a> = <a class=\"id\" href=\"#pack_hex_byte\">pack_hex_byte</a>(<a class=\"id\" href=\"#pkt\">pkt</a>, *<a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lzero\">lzero</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lzero\">lzero</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pkt\">pkt</a> = <a class=\"id\" href=\"#pack_hex_byte\">pack_hex_byte</a>(<a class=\"id\" href=\"#pkt\">pkt</a>, 0);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pkt\">pkt</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#int_to_threadref\">int_to_threadref</a>(unsigned char *<a class=\"id\" href=\"#id\">id</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_unaligned_be32\">put_unaligned_be32</a>(<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#getthread\">getthread</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, int <a class=\"id\" href=\"#tid\">tid</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Non-positive TIDs are remapped to the cpu shadow information</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tid\">tid</a> == 0 || <a class=\"id\" href=\"#tid\">tid</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tid\">tid</a> = -<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#kgdb_active\">kgdb_active</a>) - 2;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tid\">tid</a> &lt; -1 && <a class=\"id\" href=\"#tid\">tid</a> &gt; -<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a> - 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[-<a class=\"id\" href=\"#tid\">tid</a> - 2].<a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[-<a class=\"id\" href=\"#tid\">tid</a> - 2].<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#idle_task\">idle_task</a>(-<a class=\"id\" href=\"#tid\">tid</a> - 2);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tid\">tid</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"KGDB: Internal thread select error\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * find_task_by_pid_ns() does not take the tasklist lock anymore</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but is nicely RCU locked - hence is a pretty resilient</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * thing to use:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#find_task_by_pid_ns\">find_task_by_pid_ns</a>(<a class=\"id\" href=\"#tid\">tid</a>, &amp;<a class=\"id\" href=\"#init_pid_ns\">init_pid_ns</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remap normal tasks to their real PID,</span>", 
"<span class=\"comment\"> * CPU shadow threads are mapped to -CPU - 2</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#shadow_pid\">shadow_pid</a>(int <a class=\"id\" href=\"#realpid\">realpid</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#realpid\">realpid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#realpid\">realpid</a>;", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>() - 2;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * All the functions that start with gdb_cmd are the various</span>", 
"<span class=\"comment\"> * operations to implement the handlers for the gdbserial protocol</span>", 
"<span class=\"comment\"> * where KGDB is communicating with an external debugger</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Handle the '?' status packets */</span>", 
"static void <a class=\"id\" href=\"#gdb_cmd_status\">gdb_cmd_status</a>(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We know that this packet is only sent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * during initial connect.  So to be safe,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we clear out our breakpoints now in case</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * GDB is reconnecting.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dbg_remove_all_break\">dbg_remove_all_break</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>[0] = 'S';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pack_hex_byte\">pack_hex_byte</a>(&amp;<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>[1], <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#signo\">signo</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#gdb_get_regs_helper\">gdb_get_regs_helper</a>(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#thread\">thread</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#local_debuggerinfo\">local_debuggerinfo</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thread\">thread</a> = <a class=\"id\" href=\"#kgdb_usethread\">kgdb_usethread</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#thread\">thread</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thread\">thread</a> = <a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_debuggerinfo\">local_debuggerinfo</a> = <a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#debuggerinfo\">debuggerinfo</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_debuggerinfo\">local_debuggerinfo</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Try to find the task on some other</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * or possibly this node if we do not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * find the matching task then we try</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to approximate the results.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#thread\">thread</a> == <a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_debuggerinfo\">local_debuggerinfo</a> = <a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#debuggerinfo\">debuggerinfo</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * All threads that don't have debuggerinfo should be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in schedule() sleeping, since all other CPUs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are in kgdb_wait, and thus have debuggerinfo.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#local_debuggerinfo\">local_debuggerinfo</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pt_regs_to_gdb_regs\">pt_regs_to_gdb_regs</a>(<a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>, <a class=\"id\" href=\"#local_debuggerinfo\">local_debuggerinfo</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Pull stuff saved during switch_to; nothing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * else is accessible (or even particularly</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * relevant).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This should be enough for a stack trace.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sleeping_thread_to_gdb_regs\">sleeping_thread_to_gdb_regs</a>(<a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>, <a class=\"id\" href=\"#thread\">thread</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Handle the 'g' get registers request */</span>", 
"static void <a class=\"id\" href=\"#gdb_cmd_getregs\">gdb_cmd_getregs</a>(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_get_regs_helper\">gdb_get_regs_helper</a>(<a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_mem2hex\">kgdb_mem2hex</a>((char *)<a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>, <a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, <a class=\"id\" href=\"#NUMREGBYTES\">NUMREGBYTES</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Handle the 'G' set registers request */</span>", 
"static void <a class=\"id\" href=\"#gdb_cmd_setregs\">gdb_cmd_setregs</a>(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_hex2mem\">kgdb_hex2mem</a>(&amp;<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[1], (char *)<a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>, <a class=\"id\" href=\"#NUMREGBYTES\">NUMREGBYTES</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_usethread\">kgdb_usethread</a> && <a class=\"id\" href=\"#kgdb_usethread\">kgdb_usethread</a> != <a class=\"id\" href=\"#current\">current</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_packet\">error_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs_to_pt_regs\">gdb_regs_to_pt_regs</a>(<a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>, <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#linux_regs\">linux_regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, \"OK\");", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Handle the 'm' memory read bytes */</span>", 
"static void <a class=\"id\" href=\"#gdb_cmd_memread\">gdb_cmd_memread</a>(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#ptr\">ptr</a> = &amp;<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[1];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_hex2long\">kgdb_hex2long</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>, &amp;<a class=\"id\" href=\"#addr\">addr</a>) &gt; 0 && *<a class=\"id\" href=\"#ptr\">ptr</a>++ == ',' &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_hex2long\">kgdb_hex2long</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>, &amp;<a class=\"id\" href=\"#length\">length</a>) &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#kgdb_mem2hex\">kgdb_mem2hex</a>((char *)<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_packet\">error_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_packet\">error_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Handle the 'M' memory write bytes */</span>", 
"static void <a class=\"id\" href=\"#gdb_cmd_memwrite\">gdb_cmd_memwrite</a>(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#write_mem_msg\">write_mem_msg</a>(0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_packet\">error_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, \"OK\");", 
"}", 
"", 
"#if <a class=\"id\" href=\"#DBG_MAX_REG_NUM\">DBG_MAX_REG_NUM</a> &gt; 0", 
"static char *<a class=\"id\" href=\"#gdb_hex_reg_helper\">gdb_hex_reg_helper</a>(int <a class=\"id\" href=\"#regnum\">regnum</a>, char *<a class=\"id\" href=\"#out\">out</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#regnum\">regnum</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#dbg_reg_def\">dbg_reg_def</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kgdb_mem2hex\">kgdb_mem2hex</a>((char *)<a class=\"id\" href=\"#gdb_regs\">gdb_regs</a> + <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#out\">out</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#dbg_reg_def\">dbg_reg_def</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Handle the 'p' individual regster get */</span>", 
"static void <a class=\"id\" href=\"#gdb_cmd_reg_get\">gdb_cmd_reg_get</a>(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#regnum\">regnum</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#ptr\">ptr</a> = &amp;<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[1];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_hex2long\">kgdb_hex2long</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>, &amp;<a class=\"id\" href=\"#regnum\">regnum</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#regnum\">regnum</a> >= <a class=\"id\" href=\"#DBG_MAX_REG_NUM\">DBG_MAX_REG_NUM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_packet\">error_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_get_regs_helper\">gdb_get_regs_helper</a>(<a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_hex_reg_helper\">gdb_hex_reg_helper</a>(<a class=\"id\" href=\"#regnum\">regnum</a>, <a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Handle the 'P' individual regster set */</span>", 
"static void <a class=\"id\" href=\"#gdb_cmd_reg_set\">gdb_cmd_reg_set</a>(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#regnum\">regnum</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#ptr\">ptr</a> = &amp;<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[1];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_hex2long\">kgdb_hex2long</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>, &amp;<a class=\"id\" href=\"#regnum\">regnum</a>);", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#ptr\">ptr</a>++ != '=' ||", 
"<span class=\"ts\"/>    !(!<a class=\"id\" href=\"#kgdb_usethread\">kgdb_usethread</a> || <a class=\"id\" href=\"#kgdb_usethread\">kgdb_usethread</a> == <a class=\"id\" href=\"#current\">current</a>) ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#dbg_get_reg\">dbg_get_reg</a>(<a class=\"id\" href=\"#regnum\">regnum</a>, <a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>, <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#linux_regs\">linux_regs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_packet\">error_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>, 0, sizeof(<a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>));", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a> &lt; sizeof(<a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>) * 2)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hex_to_bin\">hex_to_bin</a>(<a class=\"id\" href=\"#ptr\">ptr</a>[<a class=\"id\" href=\"#i\">i</a>]) >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#i\">i</a> / 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_hex2mem\">kgdb_hex2mem</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, (char *)<a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dbg_set_reg\">dbg_set_reg</a>(<a class=\"id\" href=\"#regnum\">regnum</a>, <a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>, <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#linux_regs\">linux_regs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, \"OK\");", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* DBG_MAX_REG_NUM &gt; 0 */</span>", 
"", 
"<span class=\"comment\">/* Handle the 'X' memory binary write bytes */</span>", 
"static void <a class=\"id\" href=\"#gdb_cmd_binwrite\">gdb_cmd_binwrite</a>(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#write_mem_msg\">write_mem_msg</a>(1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_packet\">error_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, \"OK\");", 
"}", 
"", 
"<span class=\"comment\">/* Handle the 'D' or 'k', detach or kill packets */</span>", 
"static void <a class=\"id\" href=\"#gdb_cmd_detachkill\">gdb_cmd_detachkill</a>(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The detach case */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[0] == 'D') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#dbg_remove_all_break\">dbg_remove_all_break</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_packet\">error_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, \"OK\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_connected\">kgdb_connected</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_packet\">put_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Assume the kill case, with no exit code checking,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * trying to force detach the debugger:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_remove_all_break\">dbg_remove_all_break</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_connected\">kgdb_connected</a> = 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Handle the 'R' reboot packets */</span>", 
"static int <a class=\"id\" href=\"#gdb_cmd_reboot\">gdb_cmd_reboot</a>(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* For now, only honor R0 */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>, \"R0\") == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"Executing emergency reboot\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, \"OK\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_packet\">put_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Execution should not return from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * machine_emergency_restart()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#machine_emergency_restart\">machine_emergency_restart</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_connected\">kgdb_connected</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Handle the 'q' query packets */</span>", 
"static void <a class=\"id\" href=\"#gdb_cmd_query\">gdb_cmd_query</a>(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#g\">g</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#thref\">thref</a>[<a class=\"id\" href=\"#BUF_THREAD_ID_SIZE\">BUF_THREAD_ID_SIZE</a>];", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#finished\">finished</a> = 0;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[1]) {", 
"<span class=\"ts\"/>case 's':", 
"<span class=\"ts\"/>case 'f':", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a> + 2, \"ThreadInfo\", 10))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>[0] = 'm';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[1] == 'f') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Each cpu is a shadow thread */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#thr_query\">thr_query</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#int_to_threadref\">int_to_threadref</a>(<a class=\"id\" href=\"#thref\">thref</a>, -<a class=\"id\" href=\"#cpu\">cpu</a> - 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#pack_threadid\">pack_threadid</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#thref\">thref</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#ptr\">ptr</a>++) = ',';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_each_thread\">do_each_thread</a>(<a class=\"id\" href=\"#g\">g</a>, <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#thr_query\">thr_query</a> && !<a class=\"id\" href=\"#finished\">finished</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#int_to_threadref\">int_to_threadref</a>(<a class=\"id\" href=\"#thref\">thref</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#pack_threadid\">pack_threadid</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#thref\">thref</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#ptr\">ptr</a>++) = ',';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#thr_query\">thr_query</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#thr_query\">thr_query</a> % <a class=\"id\" href=\"#KGDB_MAX_THREAD_QUERY\">KGDB_MAX_THREAD_QUERY</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#finished\">finished</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#g\">g</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>*(--<a class=\"id\" href=\"#ptr\">ptr</a>) = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case 'C':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Current thread id */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, \"QC\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#threadid\">threadid</a> = <a class=\"id\" href=\"#shadow_pid\">shadow_pid</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#int_to_threadref\">int_to_threadref</a>(<a class=\"id\" href=\"#thref\">thref</a>, <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#threadid\">threadid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pack_threadid\">pack_threadid</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a> + 2, <a class=\"id\" href=\"#thref\">thref</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 'T':", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a> + 1, \"ThreadExtraInfo,\", 16))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#threadid\">threadid</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a> + 17;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_hex2long\">kgdb_hex2long</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>, &amp;<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#threadid\">threadid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#getthread\">getthread</a>(<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#linux_regs\">linux_regs</a>, <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#threadid\">threadid</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_packet\">error_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((int)<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#threadid\">threadid</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_mem2hex\">kgdb_mem2hex</a>(<a class=\"id\" href=\"#getthread\">getthread</a>(<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#linux_regs\">linux_regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#threadid\">threadid</a>)-><a class=\"id\" href=\"#comm\">comm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, 16);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>static char <a class=\"id\" href=\"#tmpstr\">tmpstr</a>[23 + <a class=\"id\" href=\"#BUF_THREAD_ID_SIZE\">BUF_THREAD_ID_SIZE</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#tmpstr\">tmpstr</a>, \"shadowCPU%d\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(int)(-<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#threadid\">threadid</a> - 2));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_mem2hex\">kgdb_mem2hex</a>(<a class=\"id\" href=\"#tmpstr\">tmpstr</a>, <a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#tmpstr\">tmpstr</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KGDB_KDB\">CONFIG_KGDB_KDB</a>", 
"<span class=\"ts\"/>case 'R':", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>, \"qRcmd,\", 6) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a> + 6);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#len\">len</a> % 2) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, \"E01\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_hex2mem\">kgdb_hex2mem</a>(<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a> + 6,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#len\">len</a> / 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>[<a class=\"id\" href=\"#len\">len</a>++] = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kdb_parse\">kdb_parse</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, \"OK\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Handle the 'H' task query packets */</span>", 
"static void <a class=\"id\" href=\"#gdb_cmd_task\">gdb_cmd_task</a>(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#thread\">thread</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[1]) {", 
"<span class=\"ts\"/>case 'g':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = &amp;<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[2];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_hex2long\">kgdb_hex2long</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>, &amp;<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#threadid\">threadid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thread\">thread</a> = <a class=\"id\" href=\"#getthread\">getthread</a>(<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#linux_regs\">linux_regs</a>, <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#threadid\">threadid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#thread\">thread</a> && <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#threadid\">threadid</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_packet\">error_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_usethread\">kgdb_usethread</a> = <a class=\"id\" href=\"#thread\">thread</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#kgdb_usethreadid\">kgdb_usethreadid</a> = <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#threadid\">threadid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, \"OK\");", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 'c':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = &amp;<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[2];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_hex2long\">kgdb_hex2long</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>, &amp;<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#threadid\">threadid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#threadid\">threadid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_contthread\">kgdb_contthread</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thread\">thread</a> = <a class=\"id\" href=\"#getthread\">getthread</a>(<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#linux_regs\">linux_regs</a>, <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#threadid\">threadid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#thread\">thread</a> && <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#threadid\">threadid</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_packet\">error_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_contthread\">kgdb_contthread</a> = <a class=\"id\" href=\"#thread\">thread</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, \"OK\");", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Handle the 'T' thread query packets */</span>", 
"static void <a class=\"id\" href=\"#gdb_cmd_thread\">gdb_cmd_thread</a>(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#ptr\">ptr</a> = &amp;<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[1];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#thread\">thread</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_hex2long\">kgdb_hex2long</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>, &amp;<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#threadid\">threadid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thread\">thread</a> = <a class=\"id\" href=\"#getthread\">getthread</a>(<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#linux_regs\">linux_regs</a>, <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#threadid\">threadid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#thread\">thread</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, \"OK\");", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_packet\">error_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Handle the 'z' or 'Z' breakpoint remove or set packets */</span>", 
"static void <a class=\"id\" href=\"#gdb_cmd_break\">gdb_cmd_break</a>(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since GDB-5.3, it's been drafted that '0' is a software</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * breakpoint, '1' is a hardware breakpoint, so let's do that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#bpt_type\">bpt_type</a> = &amp;<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[1];", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#ptr\">ptr</a> = &amp;<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[2];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arch_kgdb_ops\">arch_kgdb_ops</a>.<a class=\"id\" href=\"#set_hw_breakpoint\">set_hw_breakpoint</a> && *<a class=\"id\" href=\"#bpt_type\">bpt_type</a> >= '1') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Unsupported */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#bpt_type\">bpt_type</a> &gt; '4')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#bpt_type\">bpt_type</a> != '0' && *<a class=\"id\" href=\"#bpt_type\">bpt_type</a> != '1')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Unsupported. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Test if this is a hardware breakpoint, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if we support it:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#bpt_type\">bpt_type</a> == '1' && !(<a class=\"id\" href=\"#arch_kgdb_ops\">arch_kgdb_ops</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KGDB_HW_BREAKPOINT\">KGDB_HW_BREAKPOINT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Unsupported. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (*(<a class=\"id\" href=\"#ptr\">ptr</a>++) != ',') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_packet\">error_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kgdb_hex2long\">kgdb_hex2long</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>, &amp;<a class=\"id\" href=\"#addr\">addr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_packet\">error_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (*(<a class=\"id\" href=\"#ptr\">ptr</a>++) != ',' ||", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#kgdb_hex2long\">kgdb_hex2long</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>, &amp;<a class=\"id\" href=\"#length\">length</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_packet\">error_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[0] == 'Z' && *<a class=\"id\" href=\"#bpt_type\">bpt_type</a> == '0')", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#dbg_set_sw_break\">dbg_set_sw_break</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[0] == 'z' && *<a class=\"id\" href=\"#bpt_type\">bpt_type</a> == '0')", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#dbg_remove_sw_break\">dbg_remove_sw_break</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[0] == 'Z')", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#arch_kgdb_ops\">arch_kgdb_ops</a>.<a class=\"id\" href=\"#set_hw_breakpoint\">set_hw_breakpoint</a>(<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(int)<a class=\"id\" href=\"#length\">length</a>, *<a class=\"id\" href=\"#bpt_type\">bpt_type</a> - '0');", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[0] == 'z')", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#arch_kgdb_ops\">arch_kgdb_ops</a>.<a class=\"id\" href=\"#remove_hw_breakpoint\">remove_hw_breakpoint</a>(<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(int) <a class=\"id\" href=\"#length\">length</a>, *<a class=\"id\" href=\"#bpt_type\">bpt_type</a> - '0');", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, \"OK\");", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_packet\">error_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Handle the 'C' signal / exception passing packets */</span>", 
"static int <a class=\"id\" href=\"#gdb_cmd_exception_pass\">gdb_cmd_exception_pass</a>(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* C09 == pass exception</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * C15 == detach kgdb, pass exception</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[1] == '0' && <a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[2] == '9') {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#pass_exception\">pass_exception</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[0] = 'c';", 
"", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[1] == '1' && <a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[2] == '5') {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#pass_exception\">pass_exception</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[0] = 'D';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_remove_all_break\">dbg_remove_all_break</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_connected\">kgdb_connected</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdbstub_msg_write\">gdbstub_msg_write</a>(\"KGDB only knows signal 9 (pass)\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" and 15 (pass and disconnect)\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Executing a continue without signal passing\\n\", 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[0] = 'c';", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Indicate fall through */</span>", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function performs all gdbserial command procesing</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#gdb_serial_stub\">gdb_serial_stub</a>(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize comm buffer and globals. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, 0, sizeof(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_usethread\">kgdb_usethread</a> = <a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#kgdb_usethreadid\">kgdb_usethreadid</a> = <a class=\"id\" href=\"#shadow_pid\">shadow_pid</a>(<a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#pass_exception\">pass_exception</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_connected\">kgdb_connected</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#thref\">thref</a>[<a class=\"id\" href=\"#BUF_THREAD_ID_SIZE\">BUF_THREAD_ID_SIZE</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Reply to host that an exception has occurred */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ptr\">ptr</a>++ = 'T';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#pack_hex_byte\">pack_hex_byte</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#signo\">signo</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> += <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, \"thread:\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#int_to_threadref\">int_to_threadref</a>(<a class=\"id\" href=\"#thref\">thref</a>, <a class=\"id\" href=\"#shadow_pid\">shadow_pid</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#pack_threadid\">pack_threadid</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#thref\">thref</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ptr\">ptr</a>++ = ';';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_packet\">put_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Clear the out buffer. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, 0, sizeof(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_packet\">get_packet</a>(<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case '?': <span class=\"comment\">/* gdbserial status */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdb_cmd_status\">gdb_cmd_status</a>(<a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'g': <span class=\"comment\">/* return the value of the CPU registers */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdb_cmd_getregs\">gdb_cmd_getregs</a>(<a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'G': <span class=\"comment\">/* set the value of the CPU registers - return OK */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdb_cmd_setregs\">gdb_cmd_setregs</a>(<a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'm': <span class=\"comment\">/* mAA..AA,LLLL  Read LLLL bytes at address AA..AA */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdb_cmd_memread\">gdb_cmd_memread</a>(<a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'M': <span class=\"comment\">/* MAA..AA,LLLL: Write LLLL bytes at address AA..AA */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdb_cmd_memwrite\">gdb_cmd_memwrite</a>(<a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"#if <a class=\"id\" href=\"#DBG_MAX_REG_NUM\">DBG_MAX_REG_NUM</a> &gt; 0", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'p': <span class=\"comment\">/* pXX Return gdb register XX (in hex) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdb_cmd_reg_get\">gdb_cmd_reg_get</a>(<a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'P': <span class=\"comment\">/* PXX=aaaa Set gdb register XX to aaaa (in hex) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdb_cmd_reg_set\">gdb_cmd_reg_set</a>(<a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* DBG_MAX_REG_NUM &gt; 0 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'X': <span class=\"comment\">/* XAA..AA,LLLL: Write LLLL bytes at address AA..AA */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdb_cmd_binwrite\">gdb_cmd_binwrite</a>(<a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* kill or detach. KGDB should treat this like a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * continue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'D': <span class=\"comment\">/* Debugger detach */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'k': <span class=\"comment\">/* Debugger detach via kill */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdb_cmd_detachkill\">gdb_cmd_detachkill</a>(<a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#default_handle\">default_handle</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'R': <span class=\"comment\">/* Reboot */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#gdb_cmd_reboot\">gdb_cmd_reboot</a>(<a class=\"id\" href=\"#ks\">ks</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#default_handle\">default_handle</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'q': <span class=\"comment\">/* query command */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdb_cmd_query\">gdb_cmd_query</a>(<a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'H': <span class=\"comment\">/* task related */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdb_cmd_task\">gdb_cmd_task</a>(<a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'T': <span class=\"comment\">/* Query thread status */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdb_cmd_thread\">gdb_cmd_thread</a>(<a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'z': <span class=\"comment\">/* Break point remove */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'Z': <span class=\"comment\">/* Break point set */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdb_cmd_break\">gdb_cmd_break</a>(<a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KGDB_KDB\">CONFIG_KGDB_KDB</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>case '3': <span class=\"comment\">/* Escape into back into kdb */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[1] == '\\0') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdb_cmd_detachkill\">gdb_cmd_detachkill</a>(<a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#DBG_PASS_EVENT\">DBG_PASS_EVENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'C': <span class=\"comment\">/* Exception passing */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#gdb_cmd_exception_pass\">gdb_cmd_exception_pass</a>(<a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#default_handle\">default_handle</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Fall through on tmp &lt; 0 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>case 'c': <span class=\"comment\">/* Continue packet */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>case 's': <span class=\"comment\">/* Single step packet */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_contthread\">kgdb_contthread</a> && <a class=\"id\" href=\"#kgdb_contthread\">kgdb_contthread</a> != <a class=\"id\" href=\"#current\">current</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Can't switch threads in kgdb */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_packet\">error_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_activate_sw_breakpoints\">dbg_activate_sw_breakpoints</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Fall through to default processing */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<a class=\"id\" href=\"#default_handle\">default_handle</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#kgdb_arch_handle_exception\">kgdb_arch_handle_exception</a>(<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#ex_vector\">ex_vector</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#signo\">signo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#err_code\">err_code</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#linux_regs\">linux_regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Leave cmd processing on error, detach,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * kill, continue, or single step.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> >= 0 || <a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[0] == 'D' ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[0] == 'k') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#kgdb_exit\">kgdb_exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* reply to the request */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_packet\">put_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#kgdb_exit\">kgdb_exit</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#pass_exception\">pass_exception</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#gdbstub_state\">gdbstub_state</a>(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a>, char *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>[0]) {", 
"<span class=\"ts\"/>case 'e':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#kgdb_arch_handle_exception\">kgdb_arch_handle_exception</a>(<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#ex_vector\">ex_vector</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#signo\">signo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#err_code\">err_code</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#linux_regs\">linux_regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>case 's':", 
"<span class=\"ts\"/>case 'c':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>case '?':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdb_cmd_status\">gdb_cmd_status</a>(<a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case '\\0':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>, \"\");", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#write_char\">write_char</a>('+');", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_packet\">put_packet</a>(<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/3b/bbd189742aee9728cc9fa2b2e1ebe389d73030.xr', __xr_tmp);
