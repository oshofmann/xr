var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/proc/base.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992 Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  proc base directory handling functions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  1999, Al Viro. Rewritten. Now it covers the whole per-process part.</span>", 
"<span class=\"comment\"> *  Instead of using magical inumbers to determine the kind of object</span>", 
"<span class=\"comment\"> *  we allocate and fill in-core inodes upon lookup. They don't even</span>", 
"<span class=\"comment\"> *  go into icache. We cache the reference to task_struct upon lookup too.</span>", 
"<span class=\"comment\"> *  Eventually it should become a filesystem in its own. We don't use the</span>", 
"<span class=\"comment\"> *  rest of procfs anymore.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Changelog:</span>", 
"<span class=\"comment\"> *  17-Jan-2005</span>", 
"<span class=\"comment\"> *  Allan Bezerra</span>", 
"<span class=\"comment\"> *  Bruna Moreira &lt;bruna.moreira@indt.org.br&gt;</span>", 
"<span class=\"comment\"> *  Edjard Mota &lt;edjard.mota@indt.org.br&gt;</span>", 
"<span class=\"comment\"> *  Ilias Biris &lt;ilias.biris@indt.org.br&gt;</span>", 
"<span class=\"comment\"> *  Mauricio Lin &lt;mauricio.lin@indt.org.br&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Embedded Linux Lab - 10LE Instituto Nokia de Tecnologia - INdT</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  A new process specific entry (smaps) included in /proc. It shows the</span>", 
"<span class=\"comment\"> *  size of rss for each memory area. The maps entry lacks information</span>", 
"<span class=\"comment\"> *  about physical memory size (rss) for each mapped file, i.e.,</span>", 
"<span class=\"comment\"> *  rss information for executables and library files.</span>", 
"<span class=\"comment\"> *  This additional information is useful for any tools that need to know</span>", 
"<span class=\"comment\"> *  about physical memory consumption for a process specific library.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Changelog:</span>", 
"<span class=\"comment\"> *  21-Feb-2005</span>", 
"<span class=\"comment\"> *  Embedded Linux Lab - 10LE Instituto Nokia de Tecnologia - INdT</span>", 
"<span class=\"comment\"> *  Pud inclusion in the page table walking.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  ChangeLog:</span>", 
"<span class=\"comment\"> *  10-Mar-2005</span>", 
"<span class=\"comment\"> *  10LE Instituto Nokia de Tecnologia - INdT:</span>", 
"<span class=\"comment\"> *  A better way to walks through the page table as suggested by Hugh Dickins.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Simo Piiroinen &lt;simo.piiroinen@nokia.com&gt;:</span>", 
"<span class=\"comment\"> *  Smaps information related to shared, private, clean and dirty pages.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Paul Mundt &lt;paul.mundt@nokia.com&gt;:</span>", 
"<span class=\"comment\"> *  Overall revision about smaps.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stat\">stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#task_io_accounting_ops\">task_io_accounting_ops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fdtable\">fdtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#namei\">namei</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mnt_namespace\">mnt_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stacktrace\">stacktrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#resource\">resource</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ptrace\">ptrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tracehook\">tracehook</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cgroup\">cgroup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpuset\">cpuset</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nsproxy\">nsproxy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#oom\">oom</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#elf\">elf</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pid_namespace\">pid_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs_struct\">fs_struct</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"<span class=\"comment\">/* NOTE:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Implementing inode permission operations in /proc is almost</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>certainly an error.  Permission checks need to happen during</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>each system call not at open time.  The reason is that most of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>what we wish to check for permissions in /proc varies at runtime.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The classic example of a problem is opening file descriptors</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in /proc for a task before it execs a suid executable.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#pid_entry\">pid_entry</a> {", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#inode_operations\">inode_operations</a> *<a class=\"id\" href=\"#iop\">iop</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#fop\">fop</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#proc_op\">proc_op</a> <a class=\"id\" href=\"#op\">op</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NOD\">NOD</a>(<a class=\"id\" href=\"#NAME\">NAME</a>, <a class=\"id\" href=\"#MODE\">MODE</a>, <a class=\"id\" href=\"#IOP\">IOP</a>, <a class=\"id\" href=\"#FOP\">FOP</a>, <a class=\"id\" href=\"#OP\">OP</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = (<a class=\"id\" href=\"#NAME\">NAME</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#len\">len</a>  = sizeof(<a class=\"id\" href=\"#NAME\">NAME</a>) - 1,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#MODE\">MODE</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#iop\">iop</a>  = <a class=\"id\" href=\"#IOP\">IOP</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fop\">fop</a>  = <a class=\"id\" href=\"#FOP\">FOP</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#op\">op</a>   = <a class=\"id\" href=\"#OP\">OP</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DIR\">DIR</a>(<a class=\"id\" href=\"#NAME\">NAME</a>, <a class=\"id\" href=\"#MODE\">MODE</a>, <a class=\"id\" href=\"#iops\">iops</a>, <a class=\"id\" href=\"#fops\">fops</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NOD\">NOD</a>(<a class=\"id\" href=\"#NAME\">NAME</a>, (<a class=\"id\" href=\"#S_IFDIR\">S_IFDIR</a>|(<a class=\"id\" href=\"#MODE\">MODE</a>)), &amp;<a class=\"id\" href=\"#iops\">iops</a>, &amp;<a class=\"id\" href=\"#fops\">fops</a>, {} )", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LNK\">LNK</a>(<a class=\"id\" href=\"#NAME\">NAME</a>, <a class=\"id\" href=\"#get_link\">get_link</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NOD\">NOD</a>(<a class=\"id\" href=\"#NAME\">NAME</a>, (<a class=\"id\" href=\"#S_IFLNK\">S_IFLNK</a>|<a class=\"id\" href=\"#S_IRWXUGO\">S_IRWXUGO</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#proc_pid_link_inode_operations\">proc_pid_link_inode_operations</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>{ .<a class=\"id\" href=\"#proc_get_link\">proc_get_link</a> = <a class=\"id\" href=\"#get_link\">get_link</a> } )", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#REG\">REG</a>(<a class=\"id\" href=\"#NAME\">NAME</a>, <a class=\"id\" href=\"#MODE\">MODE</a>, <a class=\"id\" href=\"#fops\">fops</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NOD\">NOD</a>(<a class=\"id\" href=\"#NAME\">NAME</a>, (<a class=\"id\" href=\"#S_IFREG\">S_IFREG</a>|(<a class=\"id\" href=\"#MODE\">MODE</a>)), <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#fops\">fops</a>, {})", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INF\">INF</a>(<a class=\"id\" href=\"#NAME\">NAME</a>, <a class=\"id\" href=\"#MODE\">MODE</a>, <a class=\"id\" href=\"#read\">read</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NOD\">NOD</a>(<a class=\"id\" href=\"#NAME\">NAME</a>, (<a class=\"id\" href=\"#S_IFREG\">S_IFREG</a>|(<a class=\"id\" href=\"#MODE\">MODE</a>)), <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#proc_info_file_operations\">proc_info_file_operations</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>{ .<a class=\"id\" href=\"#proc_read\">proc_read</a> = <a class=\"id\" href=\"#read\">read</a> } )", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ONE\">ONE</a>(<a class=\"id\" href=\"#NAME\">NAME</a>, <a class=\"id\" href=\"#MODE\">MODE</a>, <a class=\"id\" href=\"#show\">show</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NOD\">NOD</a>(<a class=\"id\" href=\"#NAME\">NAME</a>, (<a class=\"id\" href=\"#S_IFREG\">S_IFREG</a>|(<a class=\"id\" href=\"#MODE\">MODE</a>)), <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#proc_single_file_operations\">proc_single_file_operations</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>{ .<a class=\"id\" href=\"#proc_show\">proc_show</a> = <a class=\"id\" href=\"#show\">show</a> } )", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Count the number of hardlinks for the pid_entry table, excluding the .</span>", 
"<span class=\"comment\"> * and .. links.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#pid_entry_count_dirs\">pid_entry_count_dirs</a>(const struct <a class=\"id\" href=\"#pid_entry\">pid_entry</a> *<a class=\"id\" href=\"#entries\">entries</a>,", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#n\">n</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#mode\">mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#get_task_root\">get_task_root</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#fs\">fs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_fs_root\">get_fs_root</a>(<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#fs\">fs</a>, <a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#proc_cwd_link\">proc_cwd_link</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#get_proc_task\">get_proc_task</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#fs\">fs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_fs_pwd\">get_fs_pwd</a>(<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#fs\">fs</a>, <a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#proc_root_link\">proc_root_link</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#get_proc_task\">get_proc_task</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#get_task_root\">get_task_root</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return zero if current may access user memory in @task, -error if not.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#check_mem_permission\">check_mem_permission</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A task can always look at itself, in case it chooses</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to use system calls instead of load instructions.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a> == <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If current is actively ptrace'ing, and would also be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * permitted to freshly attach with ptrace now, permit it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_is_stopped_or_traced\">task_is_stopped_or_traced</a>(<a class=\"id\" href=\"#task\">task</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#match\">match</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match\">match</a> = (<a class=\"id\" href=\"#tracehook_tracer_task\">tracehook_tracer_task</a>(<a class=\"id\" href=\"#task\">task</a>) == <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#match\">match</a> && <a class=\"id\" href=\"#ptrace_may_access\">ptrace_may_access</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#PTRACE_MODE_ATTACH\">PTRACE_MODE_ATTACH</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Noone else is allowed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm_for_maps\">mm_for_maps</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mutex_lock_killable\">mutex_lock_killable</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#cred_guard_mutex\">cred_guard_mutex</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#get_task_mm\">get_task_mm</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a> && <a class=\"id\" href=\"#mm\">mm</a> != <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#ptrace_may_access\">ptrace_may_access</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#PTRACE_MODE_READ\">PTRACE_MODE_READ</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmput\">mmput</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#cred_guard_mutex\">cred_guard_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mm\">mm</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#proc_pid_cmdline\">proc_pid_cmdline</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, char * <a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = 0;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#get_task_mm\">get_task_mm</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#arg_end\">arg_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_mm\">out_mm</a>;<span class=\"ts\"/><span class=\"comment\">/* Shh! No looking before we're done */</span>", 
"", 
" <span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#arg_end\">arg_end</a> - <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#arg_start\">arg_start</a>;", 
" ", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
" ", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#access_process_vm\">access_process_vm</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#arg_start\">arg_start</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#len\">len</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">// If the nul at the end of args has been overwritten, then</span>", 
"<span class=\"ts\"/><span class=\"comment\">// assume application is using setproctitle(3).</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> &gt; 0 && <a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#res\">res</a>-1] != '\\0' && <a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strnlen\">strnlen</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#res\">res</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#env_end\">env_end</a> - <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#env_start\">env_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> += <a class=\"id\" href=\"#access_process_vm\">access_process_vm</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#env_start\">env_start</a>, <a class=\"id\" href=\"#buffer\">buffer</a>+<a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#len\">len</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#strnlen\">strnlen</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out_mm\">out_mm</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmput\">mmput</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#proc_pid_auxv\">proc_pid_auxv</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, char *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = 0;", 
];
xr_frag_insert('l/3c/09ef00763970fbbc566756ec3dfc921b8e11a7.xr', __xr_tmp);
