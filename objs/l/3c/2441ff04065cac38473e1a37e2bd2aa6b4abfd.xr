var __xr_tmp = [
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add a pinned breakpoint for the given task in our constraint table</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#toggle_bp_task_slot\">toggle_bp_task_slot</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#enable\">enable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#bp_type_idx\">bp_type_idx</a> <a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#weight\">weight</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int *<a class=\"id\" href=\"#tsk_pinned\">tsk_pinned</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old_count\">old_count</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old_idx\">old_idx</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_count\">old_count</a> = <a class=\"id\" href=\"#task_bp_pinned\">task_bp_pinned</a>(<a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_idx\">old_idx</a> = <a class=\"id\" href=\"#old_count\">old_count</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#old_idx\">old_idx</a> + <a class=\"id\" href=\"#weight\">weight</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* tsk_pinned[n] is the number of tasks having n breakpoints */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk_pinned\">tsk_pinned</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#nr_task_bp_pinned\">nr_task_bp_pinned</a>[<a class=\"id\" href=\"#type\">type</a>], <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#enable\">enable</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk_pinned\">tsk_pinned</a>[<a class=\"id\" href=\"#idx\">idx</a>]++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old_count\">old_count</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk_pinned\">tsk_pinned</a>[<a class=\"id\" href=\"#old_idx\">old_idx</a>]--;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk_pinned\">tsk_pinned</a>[<a class=\"id\" href=\"#idx\">idx</a>]--;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old_count\">old_count</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk_pinned\">tsk_pinned</a>[<a class=\"id\" href=\"#old_idx\">old_idx</a>]++;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add/remove the given breakpoint in our constraint table</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#toggle_bp_slot\">toggle_bp_slot</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#enable\">enable</a>, enum <a class=\"id\" href=\"#bp_type_idx\">bp_type_idx</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/>       int <a class=\"id\" href=\"#weight\">weight</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#task\">task</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Pinned counter cpu profiling */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsk\">tsk</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#enable\">enable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#nr_cpu_bp_pinned\">nr_cpu_bp_pinned</a>[<a class=\"id\" href=\"#type\">type</a>], <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#cpu\">cpu</a>) += <a class=\"id\" href=\"#weight\">weight</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#nr_cpu_bp_pinned\">nr_cpu_bp_pinned</a>[<a class=\"id\" href=\"#type\">type</a>], <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#cpu\">cpu</a>) -= <a class=\"id\" href=\"#weight\">weight</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Pinned counter task profiling */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#enable\">enable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#bp_list\">bp_list</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#toggle_bp_task_slot\">toggle_bp_task_slot</a>(<a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#enable\">enable</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#weight\">weight</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#toggle_bp_task_slot\">toggle_bp_task_slot</a>(<a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#enable\">enable</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#weight\">weight</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#enable\">enable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#bp_list\">bp_list</a>, &amp;<a class=\"id\" href=\"#bp_task_head\">bp_task_head</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function to perform processor-specific cleanup during unregistration</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#__weak\">__weak</a> void <a class=\"id\" href=\"#arch_unregister_hw_breakpoint\">arch_unregister_hw_breakpoint</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A weak stub function here for those archs that don't define</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it inside arch/.../kernel/hw_breakpoint.c</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Contraints to check before allowing this new breakpoint counter:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  == Non-pinned counter == (Considered as pinned for now)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   - If attached to a single cpu, check:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *       (per_cpu(nr_bp_flexible, cpu) || (per_cpu(nr_cpu_bp_pinned, cpu)</span>", 
"<span class=\"comment\"> *           + max(per_cpu(nr_task_bp_pinned, cpu)))) &lt; HBP_NUM</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *       -&gt; If there are already non-pinned counters in this cpu, it means</span>", 
"<span class=\"comment\"> *          there is already a free slot for them.</span>", 
"<span class=\"comment\"> *          Otherwise, we check that the maximum number of per task</span>", 
"<span class=\"comment\"> *          breakpoints (for this cpu) plus the number of per cpu breakpoint</span>", 
"<span class=\"comment\"> *          (for this cpu) doesn't cover every registers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   - If attached to every cpus, check:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *       (per_cpu(nr_bp_flexible, *) || (max(per_cpu(nr_cpu_bp_pinned, *))</span>", 
"<span class=\"comment\"> *           + max(per_cpu(nr_task_bp_pinned, *)))) &lt; HBP_NUM</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *       -&gt; This is roughly the same, except we check the number of per cpu</span>", 
"<span class=\"comment\"> *          bp for every cpu and we keep the max one. Same for the per tasks</span>", 
"<span class=\"comment\"> *          breakpoints.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * == Pinned counter ==</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   - If attached to a single cpu, check:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *       ((per_cpu(nr_bp_flexible, cpu) &gt; 1) + per_cpu(nr_cpu_bp_pinned, cpu)</span>", 
"<span class=\"comment\"> *            + max(per_cpu(nr_task_bp_pinned, cpu))) &lt; HBP_NUM</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *       -&gt; Same checks as before. But now the nr_bp_flexible, if any, must keep</span>", 
"<span class=\"comment\"> *          one register at least (or they will never be fed).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   - If attached to every cpus, check:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *       ((per_cpu(nr_bp_flexible, *) &gt; 1) + max(per_cpu(nr_cpu_bp_pinned, *))</span>", 
"<span class=\"comment\"> *            + max(per_cpu(nr_task_bp_pinned, *))) &lt; HBP_NUM</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__reserve_bp_slot\">__reserve_bp_slot</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bp_busy_slots\">bp_busy_slots</a> <a class=\"id\" href=\"#slots\">slots</a> = {0};", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#bp_type_idx\">bp_type_idx</a> <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#weight\">weight</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We couldn't initialize breakpoint constraints on boot */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#constraints_initialized\">constraints_initialized</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Basic checks */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_type\">bp_type</a> == <a class=\"id\" href=\"#HW_BREAKPOINT_EMPTY\">HW_BREAKPOINT_EMPTY</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_type\">bp_type</a> == <a class=\"id\" href=\"#HW_BREAKPOINT_INVALID\">HW_BREAKPOINT_INVALID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#find_slot_idx\">find_slot_idx</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#hw_breakpoint_weight\">hw_breakpoint_weight</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fetch_bp_busy_slots\">fetch_bp_busy_slots</a>(&amp;<a class=\"id\" href=\"#slots\">slots</a>, <a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Simulate the addition of this breakpoint to the constraints</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and see the result.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fetch_this_slot\">fetch_this_slot</a>(&amp;<a class=\"id\" href=\"#slots\">slots</a>, <a class=\"id\" href=\"#weight\">weight</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Flexible counters need to keep at least one slot */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slots\">slots</a>.<a class=\"id\" href=\"#pinned\">pinned</a> + (!!<a class=\"id\" href=\"#slots\">slots</a>.<a class=\"id\" href=\"#flexible\">flexible</a>) &gt; <a class=\"id\" href=\"#nr_slots\">nr_slots</a>[<a class=\"id\" href=\"#type\">type</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#toggle_bp_slot\">toggle_bp_slot</a>(<a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#true\">true</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#weight\">weight</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#reserve_bp_slot\">reserve_bp_slot</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#nr_bp_mutex\">nr_bp_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__reserve_bp_slot\">__reserve_bp_slot</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#nr_bp_mutex\">nr_bp_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__release_bp_slot\">__release_bp_slot</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#bp_type_idx\">bp_type_idx</a> <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#weight\">weight</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#find_slot_idx\">find_slot_idx</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#hw_breakpoint_weight\">hw_breakpoint_weight</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#toggle_bp_slot\">toggle_bp_slot</a>(<a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#false\">false</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#weight\">weight</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#release_bp_slot\">release_bp_slot</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#nr_bp_mutex\">nr_bp_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_unregister_hw_breakpoint\">arch_unregister_hw_breakpoint</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__release_bp_slot\">__release_bp_slot</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#nr_bp_mutex\">nr_bp_mutex</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allow the kernel debugger to reserve breakpoint slots without</span>", 
"<span class=\"comment\"> * taking a lock using the dbg_* variant of for the reserve and</span>", 
"<span class=\"comment\"> * release breakpoint slots.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dbg_reserve_bp_slot\">dbg_reserve_bp_slot</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mutex_is_locked\">mutex_is_locked</a>(&amp;<a class=\"id\" href=\"#nr_bp_mutex\">nr_bp_mutex</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__reserve_bp_slot\">__reserve_bp_slot</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#dbg_release_bp_slot\">dbg_release_bp_slot</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mutex_is_locked\">mutex_is_locked</a>(&amp;<a class=\"id\" href=\"#nr_bp_mutex\">nr_bp_mutex</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__release_bp_slot\">__release_bp_slot</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#validate_hw_breakpoint\">validate_hw_breakpoint</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#arch_validate_hwbkpt_settings\">arch_validate_hwbkpt_settings</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arch_check_bp_in_kernelspace\">arch_check_bp_in_kernelspace</a>(<a class=\"id\" href=\"#bp\">bp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#exclude_kernel\">exclude_kernel</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't let unprivileged users set a breakpoint in the trap</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * path to avoid trap recursion attacks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#register_perf_hw_breakpoint\">register_perf_hw_breakpoint</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#reserve_bp_slot\">reserve_bp_slot</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#validate_hw_breakpoint\">validate_hw_breakpoint</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if arch_validate_hwbkpt_settings() fails then release bp slot */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_bp_slot\">release_bp_slot</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * register_user_hw_breakpoint - register a hardware breakpoint for user space</span>", 
"<span class=\"comment\"> * @attr: breakpoint attributes</span>", 
"<span class=\"comment\"> * @triggered: callback to trigger when we hit the breakpoint</span>", 
"<span class=\"comment\"> * @tsk: pointer to 'task_struct' of the process to which the address belongs</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *", 
"<a class=\"id\" href=\"#register_user_hw_breakpoint\">register_user_hw_breakpoint</a>(struct <a class=\"id\" href=\"#perf_event_attr\">perf_event_attr</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#perf_overflow_handler_t\">perf_overflow_handler_t</a> <a class=\"id\" href=\"#triggered\">triggered</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#perf_event_create_kernel_counter\">perf_event_create_kernel_counter</a>(<a class=\"id\" href=\"#attr\">attr</a>, -1, <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#tsk\">tsk</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#triggered\">triggered</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#register_user_hw_breakpoint\">register_user_hw_breakpoint</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * modify_user_hw_breakpoint - modify a user-space hardware breakpoint</span>", 
"<span class=\"comment\"> * @bp: the breakpoint structure to modify</span>", 
"<span class=\"comment\"> * @attr: new breakpoint attributes</span>", 
"<span class=\"comment\"> * @triggered: callback to trigger when we hit the breakpoint</span>", 
"<span class=\"comment\"> * @tsk: pointer to 'task_struct' of the process to which the address belongs</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#modify_user_hw_breakpoint\">modify_user_hw_breakpoint</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>, struct <a class=\"id\" href=\"#perf_event_attr\">perf_event_attr</a> *<a class=\"id\" href=\"#attr\">attr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#old_addr\">old_addr</a> = <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_addr\">bp_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#old_len\">old_len</a> = <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_len\">bp_len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old_type\">old_type</a> = <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_type\">bp_type</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_disable\">perf_event_disable</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_addr\">bp_addr</a> = <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#bp_addr\">bp_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_type\">bp_type</a> = <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#bp_type\">bp_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_len\">bp_len</a> = <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#bp_len\">bp_len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#disabled\">disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#validate_hw_breakpoint\">validate_hw_breakpoint</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_enable\">perf_event_enable</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_addr\">bp_addr</a> = <a class=\"id\" href=\"#old_addr\">old_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_type\">bp_type</a> = <a class=\"id\" href=\"#old_type\">old_type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_len\">bp_len</a> = <a class=\"id\" href=\"#old_len\">old_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#disabled\">disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_enable\">perf_event_enable</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#end\">end</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#disabled\">disabled</a> = <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#disabled\">disabled</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#modify_user_hw_breakpoint\">modify_user_hw_breakpoint</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * unregister_hw_breakpoint - unregister a user-space hardware breakpoint</span>", 
"<span class=\"comment\"> * @bp: the breakpoint structure to unregister</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#unregister_hw_breakpoint\">unregister_hw_breakpoint</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bp\">bp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_release_kernel\">perf_event_release_kernel</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#unregister_hw_breakpoint\">unregister_hw_breakpoint</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * register_wide_hw_breakpoint - register a wide breakpoint in the kernel</span>", 
"<span class=\"comment\"> * @attr: breakpoint attributes</span>", 
"<span class=\"comment\"> * @triggered: callback to trigger when we hit the breakpoint</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @return a set of per_cpu pointers to perf events</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#perf_event\">perf_event</a> * <a class=\"id\" href=\"#__percpu\">__percpu</a> *", 
"<a class=\"id\" href=\"#register_wide_hw_breakpoint\">register_wide_hw_breakpoint</a>(struct <a class=\"id\" href=\"#perf_event_attr\">perf_event_attr</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#perf_overflow_handler_t\">perf_overflow_handler_t</a> <a class=\"id\" href=\"#triggered\">triggered</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> * <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#cpu_events\">cpu_events</a>, **<a class=\"id\" href=\"#pevent\">pevent</a>, *<a class=\"id\" href=\"#bp\">bp</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_events\">cpu_events</a> = <a class=\"id\" href=\"#alloc_percpu\">alloc_percpu</a>(<a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#cpu_events\">cpu_events</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_events\">cpu_events</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return (void <a class=\"id\" href=\"#__percpu\">__percpu</a> <a class=\"id\" href=\"#__force\">__force</a> *)<a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pevent\">pevent</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#cpu_events\">cpu_events</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a> = <a class=\"id\" href=\"#perf_event_create_kernel_counter\">perf_event_create_kernel_counter</a>(<a class=\"id\" href=\"#attr\">attr</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, -1, <a class=\"id\" href=\"#triggered\">triggered</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pevent\">pevent</a> = <a class=\"id\" href=\"#bp\">bp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#bp\">bp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu_events\">cpu_events</a>;", 
"", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pevent\">pevent</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#cpu_events\">cpu_events</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(*<a class=\"id\" href=\"#pevent\">pevent</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_hw_breakpoint\">unregister_hw_breakpoint</a>(*<a class=\"id\" href=\"#pevent\">pevent</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#cpu_events\">cpu_events</a>);", 
"<span class=\"ts\"/>return (void <a class=\"id\" href=\"#__percpu\">__percpu</a> <a class=\"id\" href=\"#__force\">__force</a> *)<a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#register_wide_hw_breakpoint\">register_wide_hw_breakpoint</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * unregister_wide_hw_breakpoint - unregister a wide breakpoint in the kernel</span>", 
"<span class=\"comment\"> * @cpu_events: the per cpu set of events to unregister</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#unregister_wide_hw_breakpoint\">unregister_wide_hw_breakpoint</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> * <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#cpu_events\">cpu_events</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> **<a class=\"id\" href=\"#pevent\">pevent</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pevent\">pevent</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#cpu_events\">cpu_events</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_hw_breakpoint\">unregister_hw_breakpoint</a>(*<a class=\"id\" href=\"#pevent\">pevent</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#cpu_events\">cpu_events</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#unregister_wide_hw_breakpoint\">unregister_wide_hw_breakpoint</a>);", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#hw_breakpoint_exceptions_nb\">hw_breakpoint_exceptions_nb</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#hw_breakpoint_exceptions_notify\">hw_breakpoint_exceptions_notify</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* we need to be notified first */</span>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#priority\">priority</a> = 0x7fffffff", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_hw_breakpoint\">init_hw_breakpoint</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int **<a class=\"id\" href=\"#task_bp_pinned\">task_bp_pinned</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#err_cpu\">err_cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#TYPE_MAX\">TYPE_MAX</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_slots\">nr_slots</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#hw_breakpoint_slots\">hw_breakpoint_slots</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#TYPE_MAX\">TYPE_MAX</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_bp_pinned\">task_bp_pinned</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#nr_task_bp_pinned\">nr_task_bp_pinned</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#task_bp_pinned\">task_bp_pinned</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(int) * <a class=\"id\" href=\"#nr_slots\">nr_slots</a>[<a class=\"id\" href=\"#i\">i</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#task_bp_pinned\">task_bp_pinned</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_alloc\">err_alloc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#constraints_initialized\">constraints_initialized</a> = 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#register_die_notifier\">register_die_notifier</a>(&amp;<a class=\"id\" href=\"#hw_breakpoint_exceptions_nb\">hw_breakpoint_exceptions_nb</a>);", 
"", 
" <a class=\"id\" href=\"#err_alloc\">err_alloc</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#err_cpu\">err_cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err_cpu\">err_cpu</a> == <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#TYPE_MAX\">TYPE_MAX</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#nr_task_bp_pinned\">nr_task_bp_pinned</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"<a class=\"id\" href=\"#core_initcall\">core_initcall</a>(<a class=\"id\" href=\"#init_hw_breakpoint\">init_hw_breakpoint</a>);", 
"", 
"", 
"struct <a class=\"id\" href=\"#pmu\">pmu</a> <a class=\"id\" href=\"#perf_ops_bp\">perf_ops_bp</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#enable\">enable</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#arch_install_hw_breakpoint\">arch_install_hw_breakpoint</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#disable\">disable</a><span class=\"ts\"/>= <a class=\"id\" href=\"#arch_uninstall_hw_breakpoint\">arch_uninstall_hw_breakpoint</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#hw_breakpoint_pmu_read\">hw_breakpoint_pmu_read</a>,", 
"};", 
];
xr_frag_insert('l/3c/2441ff04065cac38473e1a37e2bd2aa6b4abfd.xr', __xr_tmp);
