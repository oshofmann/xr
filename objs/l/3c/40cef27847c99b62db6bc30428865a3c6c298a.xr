var __xr_tmp = [
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: hwvalid - I/O request validation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_HARDWARE\">ACPI_HARDWARE</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"hwvalid\")", 
"", 
"<span class=\"comment\">/* Local prototypes */</span>", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_hw_validate_io_request\">acpi_hw_validate_io_request</a>(<a class=\"id\" href=\"#acpi_io_address\">acpi_io_address</a> <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#bit_width\">bit_width</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Protected I/O ports. Some ports are always illegal, and some are</span>", 
"<span class=\"comment\"> * conditionally illegal. This table must remain ordered by port address.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The table is used to implement the Microsoft port access rules that</span>", 
"<span class=\"comment\"> * first appeared in Windows XP. Some ports are always illegal, and some</span>", 
"<span class=\"comment\"> * ports are only illegal if the BIOS calls _OSI with a win_xP string or</span>", 
"<span class=\"comment\"> * later (meaning that the BIOS itelf is post-XP.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This provides ACPICA with the desired port protections and</span>", 
"<span class=\"comment\"> * Microsoft compatibility.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description of port entries:</span>", 
"<span class=\"comment\"> *  DMA:   DMA controller</span>", 
"<span class=\"comment\"> *  PIC0:  Programmable Interrupt Controller (8259_a)</span>", 
"<span class=\"comment\"> *  PIT1:  System Timer 1</span>", 
"<span class=\"comment\"> *  PIT2:  System Timer 2 failsafe</span>", 
"<span class=\"comment\"> *  RTC:   Real-time clock</span>", 
"<span class=\"comment\"> *  CMOS:  Extended CMOS</span>", 
"<span class=\"comment\"> *  DMA1:  DMA 1 page registers</span>", 
"<span class=\"comment\"> *  DMA1L: DMA 1 Ch 0 low page</span>", 
"<span class=\"comment\"> *  DMA2:  DMA 2 page registers</span>", 
"<span class=\"comment\"> *  DMA2L: DMA 2 low page refresh</span>", 
"<span class=\"comment\"> *  ARBC:  Arbitration control</span>", 
"<span class=\"comment\"> *  SETUP: Reserved system board setup</span>", 
"<span class=\"comment\"> *  POS:   POS channel select</span>", 
"<span class=\"comment\"> *  PIC1:  Cascaded PIC</span>", 
"<span class=\"comment\"> *  IDMA:  ISA DMA</span>", 
"<span class=\"comment\"> *  ELCR:  PIC edge/level registers</span>", 
"<span class=\"comment\"> *  PCI:   PCI configuration space</span>", 
"<span class=\"comment\"> */</span>", 
"static const struct <a class=\"id\" href=\"#acpi_port_info\">acpi_port_info</a> <a class=\"id\" href=\"#acpi_protected_ports\">acpi_protected_ports</a>[] = {", 
"<span class=\"ts\"/>{\"DMA\", 0x0000, 0x000F, <a class=\"id\" href=\"#ACPI_OSI_WIN_XP\">ACPI_OSI_WIN_XP</a>},", 
"<span class=\"ts\"/>{\"PIC0\", 0x0020, 0x0021, <a class=\"id\" href=\"#ACPI_ALWAYS_ILLEGAL\">ACPI_ALWAYS_ILLEGAL</a>},", 
"<span class=\"ts\"/>{\"PIT1\", 0x0040, 0x0043, <a class=\"id\" href=\"#ACPI_OSI_WIN_XP\">ACPI_OSI_WIN_XP</a>},", 
"<span class=\"ts\"/>{\"PIT2\", 0x0048, 0x004B, <a class=\"id\" href=\"#ACPI_OSI_WIN_XP\">ACPI_OSI_WIN_XP</a>},", 
"<span class=\"ts\"/>{\"RTC\", 0x0070, 0x0071, <a class=\"id\" href=\"#ACPI_OSI_WIN_XP\">ACPI_OSI_WIN_XP</a>},", 
"<span class=\"ts\"/>{\"CMOS\", 0x0074, 0x0076, <a class=\"id\" href=\"#ACPI_OSI_WIN_XP\">ACPI_OSI_WIN_XP</a>},", 
"<span class=\"ts\"/>{\"DMA1\", 0x0081, 0x0083, <a class=\"id\" href=\"#ACPI_OSI_WIN_XP\">ACPI_OSI_WIN_XP</a>},", 
"<span class=\"ts\"/>{\"DMA1L\", 0x0087, 0x0087, <a class=\"id\" href=\"#ACPI_OSI_WIN_XP\">ACPI_OSI_WIN_XP</a>},", 
"<span class=\"ts\"/>{\"DMA2\", 0x0089, 0x008B, <a class=\"id\" href=\"#ACPI_OSI_WIN_XP\">ACPI_OSI_WIN_XP</a>},", 
"<span class=\"ts\"/>{\"DMA2L\", 0x008F, 0x008F, <a class=\"id\" href=\"#ACPI_OSI_WIN_XP\">ACPI_OSI_WIN_XP</a>},", 
"<span class=\"ts\"/>{\"ARBC\", 0x0090, 0x0091, <a class=\"id\" href=\"#ACPI_OSI_WIN_XP\">ACPI_OSI_WIN_XP</a>},", 
"<span class=\"ts\"/>{\"SETUP\", 0x0093, 0x0094, <a class=\"id\" href=\"#ACPI_OSI_WIN_XP\">ACPI_OSI_WIN_XP</a>},", 
"<span class=\"ts\"/>{\"POS\", 0x0096, 0x0097, <a class=\"id\" href=\"#ACPI_OSI_WIN_XP\">ACPI_OSI_WIN_XP</a>},", 
"<span class=\"ts\"/>{\"PIC1\", 0x00A0, 0x00A1, <a class=\"id\" href=\"#ACPI_ALWAYS_ILLEGAL\">ACPI_ALWAYS_ILLEGAL</a>},", 
"<span class=\"ts\"/>{\"IDMA\", 0x00C0, 0x00DF, <a class=\"id\" href=\"#ACPI_OSI_WIN_XP\">ACPI_OSI_WIN_XP</a>},", 
"<span class=\"ts\"/>{\"ELCR\", 0x04D0, 0x04D1, <a class=\"id\" href=\"#ACPI_ALWAYS_ILLEGAL\">ACPI_ALWAYS_ILLEGAL</a>},", 
"<span class=\"ts\"/>{\"PCI\", 0x0CF8, 0x0CFF, <a class=\"id\" href=\"#ACPI_OSI_WIN_XP\">ACPI_OSI_WIN_XP</a>}", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACPI_PORT_INFO_ENTRIES\">ACPI_PORT_INFO_ENTRIES</a>  <a class=\"id\" href=\"#ACPI_ARRAY_LENGTH\">ACPI_ARRAY_LENGTH</a> (<a class=\"id\" href=\"#acpi_protected_ports\">acpi_protected_ports</a>)", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_hw_validate_io_request</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Address             Address of I/O port/register</span>", 
"<span class=\"comment\"> *              bit_width           Number of bits (8,16,32)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Validates an I/O request (address/length). Certain ports are</span>", 
"<span class=\"comment\"> *              always illegal and some ports are only illegal depending on</span>", 
"<span class=\"comment\"> *              the requests the BIOS AML code makes to the predefined</span>", 
"<span class=\"comment\"> *              _OSI method.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_hw_validate_io_request\">acpi_hw_validate_io_request</a>(<a class=\"id\" href=\"#acpi_io_address\">acpi_io_address</a> <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#bit_width\">bit_width</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#byte_width\">byte_width</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_io_address\">acpi_io_address</a> <a class=\"id\" href=\"#last_address\">last_address</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#acpi_port_info\">acpi_port_info</a> *<a class=\"id\" href=\"#port_info\">port_info</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#hw_validate_io_request\">hw_validate_io_request</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Supported widths are 8/16/32 */</span>", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#bit_width\">bit_width</a> != 8) && (<a class=\"id\" href=\"#bit_width\">bit_width</a> != 16) && (<a class=\"id\" href=\"#bit_width\">bit_width</a> != 32)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#port_info\">port_info</a> = <a class=\"id\" href=\"#acpi_protected_ports\">acpi_protected_ports</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#byte_width\">byte_width</a> = <a class=\"id\" href=\"#ACPI_DIV_8\">ACPI_DIV_8</a>(<a class=\"id\" href=\"#bit_width\">bit_width</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_address\">last_address</a> = <a class=\"id\" href=\"#address\">address</a> + <a class=\"id\" href=\"#byte_width\">byte_width</a> - 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_IO\">ACPI_DB_IO</a>, \"Address %p LastAddress %p Length %X\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(void, <a class=\"id\" href=\"#address\">address</a>), <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(void,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#last_address\">last_address</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#byte_width\">byte_width</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Maximum 16-bit address in I/O space */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#last_address\">last_address</a> &gt; <a class=\"id\" href=\"#ACPI_UINT16_MAX\">ACPI_UINT16_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Illegal I/O port address/length above 64K: %p/0x%X\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(void, <a class=\"id\" href=\"#address\">address</a>), <a class=\"id\" href=\"#byte_width\">byte_width</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_LIMIT\">AE_LIMIT</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Exit if requested address is not within the protected port table */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#address\">address</a> &gt; <a class=\"id\" href=\"#acpi_protected_ports\">acpi_protected_ports</a>[<a class=\"id\" href=\"#ACPI_PORT_INFO_ENTRIES\">ACPI_PORT_INFO_ENTRIES</a> - 1].<a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check request against the list of protected I/O ports */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ACPI_PORT_INFO_ENTRIES\">ACPI_PORT_INFO_ENTRIES</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#port_info\">port_info</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Check if the requested address range will write to a reserved</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * port. Four cases to consider:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 1) Address range is contained completely in the port address range</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 2) Address range overlaps port range at the port range start</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 3) Address range overlaps port range at the port range end</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 4) Address range completely encompasses the port range</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#address\">address</a> <= <a class=\"id\" href=\"#port_info\">port_info</a>-><a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    && (<a class=\"id\" href=\"#last_address\">last_address</a> >= <a class=\"id\" href=\"#port_info\">port_info</a>-><a class=\"id\" href=\"#start\">start</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Port illegality may depend on the _OSI calls made by the BIOS */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_osi_data\">acpi_gbl_osi_data</a> >= <a class=\"id\" href=\"#port_info\">port_info</a>-><a class=\"id\" href=\"#osi_dependency\">osi_dependency</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_IO\">ACPI_DB_IO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Denied AML access to port 0x%p/%X (%s 0x%.4X-0x%.4X)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(void, <a class=\"id\" href=\"#address\">address</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#byte_width\">byte_width</a>, <a class=\"id\" href=\"#port_info\">port_info</a>-><a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#port_info\">port_info</a>-><a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#port_info\">port_info</a>-><a class=\"id\" href=\"#end\">end</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_AML_ILLEGAL_ADDRESS\">AE_AML_ILLEGAL_ADDRESS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Finished if address range ends before the end of this port */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#last_address\">last_address</a> <= <a class=\"id\" href=\"#port_info\">port_info</a>-><a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_hw_read_port</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Address             Address of I/O port/register to read</span>", 
"<span class=\"comment\"> *              Value               Where value is placed</span>", 
"<span class=\"comment\"> *              Width               Number of bits</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status and value read from port</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Read data from an I/O port or register. This is a front-end</span>", 
"<span class=\"comment\"> *              to acpi_os_read_port that performs validation on both the port</span>", 
"<span class=\"comment\"> *              address and the length.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_hw_read_port\">acpi_hw_read_port</a>(<a class=\"id\" href=\"#acpi_io_address\">acpi_io_address</a> <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#width\">width</a>)", 
];
xr_frag_insert('l/3c/40cef27847c99b62db6bc30428865a3c6c298a.xr', __xr_tmp);
