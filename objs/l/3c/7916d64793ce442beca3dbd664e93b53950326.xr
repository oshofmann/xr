var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prof_shift\">prof_shift</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"profile=\", <a class=\"id\" href=\"#profile_setup\">profile_setup</a>);", 
"", 
"", 
"int <a class=\"id\" href=\"#__ref\">__ref</a> <a class=\"id\" href=\"#profile_init\">profile_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#buffer_bytes\">buffer_bytes</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#prof_on\">prof_on</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* only text is profiled */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prof_len\">prof_len</a> = (<a class=\"id\" href=\"#_etext\">_etext</a> - <a class=\"id\" href=\"#_stext\">_stext</a>) >> <a class=\"id\" href=\"#prof_shift\">prof_shift</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer_bytes\">buffer_bytes</a> = <a class=\"id\" href=\"#prof_len\">prof_len</a>*sizeof(<a class=\"id\" href=\"#atomic_t\">atomic_t</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#prof_cpu_mask\">prof_cpu_mask</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#prof_cpu_mask\">prof_cpu_mask</a>, <a class=\"id\" href=\"#cpu_possible_mask\">cpu_possible_mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prof_buffer\">prof_buffer</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#buffer_bytes\">buffer_bytes</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>|<a class=\"id\" href=\"#__GFP_NOWARN\">__GFP_NOWARN</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prof_buffer\">prof_buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prof_buffer\">prof_buffer</a> = <a class=\"id\" href=\"#alloc_pages_exact\">alloc_pages_exact</a>(<a class=\"id\" href=\"#buffer_bytes\">buffer_bytes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>|<a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>|<a class=\"id\" href=\"#__GFP_NOWARN\">__GFP_NOWARN</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prof_buffer\">prof_buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prof_buffer\">prof_buffer</a> = <a class=\"id\" href=\"#vmalloc\">vmalloc</a>(<a class=\"id\" href=\"#buffer_bytes\">buffer_bytes</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prof_buffer\">prof_buffer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#prof_buffer\">prof_buffer</a>, 0, <a class=\"id\" href=\"#buffer_bytes\">buffer_bytes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#prof_cpu_mask\">prof_cpu_mask</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Profile event notifications */</span>", 
"", 
"static <a class=\"id\" href=\"#BLOCKING_NOTIFIER_HEAD\">BLOCKING_NOTIFIER_HEAD</a>(<a class=\"id\" href=\"#task_exit_notifier\">task_exit_notifier</a>);", 
"static <a class=\"id\" href=\"#ATOMIC_NOTIFIER_HEAD\">ATOMIC_NOTIFIER_HEAD</a>(<a class=\"id\" href=\"#task_free_notifier\">task_free_notifier</a>);", 
"static <a class=\"id\" href=\"#BLOCKING_NOTIFIER_HEAD\">BLOCKING_NOTIFIER_HEAD</a>(<a class=\"id\" href=\"#munmap_notifier\">munmap_notifier</a>);", 
"", 
"void <a class=\"id\" href=\"#profile_task_exit\">profile_task_exit</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocking_notifier_call_chain\">blocking_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#task_exit_notifier\">task_exit_notifier</a>, 0, <a class=\"id\" href=\"#task\">task</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#profile_handoff_task\">profile_handoff_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#atomic_notifier_call_chain\">atomic_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#task_free_notifier\">task_free_notifier</a>, 0, <a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>) ? 1 : 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#profile_munmap\">profile_munmap</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocking_notifier_call_chain\">blocking_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#munmap_notifier\">munmap_notifier</a>, 0, (void *)<a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#task_handoff_register\">task_handoff_register</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_notifier_chain_register\">atomic_notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#task_free_notifier\">task_free_notifier</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#task_handoff_register\">task_handoff_register</a>);", 
"", 
"int <a class=\"id\" href=\"#task_handoff_unregister\">task_handoff_unregister</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_notifier_chain_unregister\">atomic_notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#task_free_notifier\">task_free_notifier</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#task_handoff_unregister\">task_handoff_unregister</a>);", 
"", 
"int <a class=\"id\" href=\"#profile_event_register\">profile_event_register</a>(enum <a class=\"id\" href=\"#profile_type\">profile_type</a> <a class=\"id\" href=\"#type\">type</a>, struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PROFILE_TASK_EXIT\">PROFILE_TASK_EXIT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#blocking_notifier_chain_register\">blocking_notifier_chain_register</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#task_exit_notifier\">task_exit_notifier</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PROFILE_MUNMAP\">PROFILE_MUNMAP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#blocking_notifier_chain_register\">blocking_notifier_chain_register</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#munmap_notifier\">munmap_notifier</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#profile_event_register\">profile_event_register</a>);", 
"", 
"int <a class=\"id\" href=\"#profile_event_unregister\">profile_event_unregister</a>(enum <a class=\"id\" href=\"#profile_type\">profile_type</a> <a class=\"id\" href=\"#type\">type</a>, struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PROFILE_TASK_EXIT\">PROFILE_TASK_EXIT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#blocking_notifier_chain_unregister\">blocking_notifier_chain_unregister</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#task_exit_notifier\">task_exit_notifier</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PROFILE_MUNMAP\">PROFILE_MUNMAP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#blocking_notifier_chain_unregister\">blocking_notifier_chain_unregister</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#munmap_notifier\">munmap_notifier</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#profile_event_unregister\">profile_event_unregister</a>);", 
"", 
"int <a class=\"id\" href=\"#register_timer_hook\">register_timer_hook</a>(int (*<a class=\"id\" href=\"#hook\">hook</a>)(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *))", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timer_hook\">timer_hook</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer_hook\">timer_hook</a> = <a class=\"id\" href=\"#hook\">hook</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#register_timer_hook\">register_timer_hook</a>);", 
"", 
"void <a class=\"id\" href=\"#unregister_timer_hook\">unregister_timer_hook</a>(int (*<a class=\"id\" href=\"#hook\">hook</a>)(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#hook\">hook</a> != <a class=\"id\" href=\"#timer_hook\">timer_hook</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer_hook\">timer_hook</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* make sure all CPUs see the NULL hook */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();  <span class=\"comment\">/* Allow ongoing interrupts to complete. */</span>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#unregister_timer_hook\">unregister_timer_hook</a>);", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Each cpu has a pair of open-addressed hashtables for pending</span>", 
"<span class=\"comment\"> * profile hits. read_profile() IPI's all cpus to request them</span>", 
"<span class=\"comment\"> * to flip buffers and flushes their contents to prof_buffer itself.</span>", 
"<span class=\"comment\"> * Flip requests are serialized by the profile_flip_mutex. The sole</span>", 
"<span class=\"comment\"> * use of having a second hashtable is for avoiding cacheline</span>", 
"<span class=\"comment\"> * contention that would otherwise happen during flushes of pending</span>", 
"<span class=\"comment\"> * profile hits required for the accuracy of reported profile hits</span>", 
"<span class=\"comment\"> * and so resurrect the interrupt livelock issue.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The open-addressed hashtables are indexed by profile buffer slot</span>", 
"<span class=\"comment\"> * and hold the number of pending hits to that profile buffer slot on</span>", 
"<span class=\"comment\"> * a cpu in an entry. When the hashtable overflows, all pending hits</span>", 
"<span class=\"comment\"> * are accounted to their corresponding profile buffer slots with</span>", 
"<span class=\"comment\"> * atomic_add() and the hashtable emptied. As numerous pending hits</span>", 
"<span class=\"comment\"> * may be accounted to a profile buffer slot in a hashtable entry,</span>", 
"<span class=\"comment\"> * this amortizes a number of atomic profile buffer increments likely</span>", 
"<span class=\"comment\"> * to be far larger than the number of entries in the hashtable,</span>", 
"<span class=\"comment\"> * particularly given that the number of distinct profile buffer</span>", 
"<span class=\"comment\"> * positions to which hits are accounted during short intervals (e.g.</span>", 
"<span class=\"comment\"> * several seconds) is usually very small. Exclusion from buffer</span>", 
"<span class=\"comment\"> * flipping is provided by interrupt disablement (note that for</span>", 
"<span class=\"comment\"> * SCHED_PROFILING or SLEEP_PROFILING profile_hit() may be called from</span>", 
"<span class=\"comment\"> * process context).</span>", 
"<span class=\"comment\"> * The hash function is meant to be lightweight as opposed to strong,</span>", 
"<span class=\"comment\"> * and was vaguely inspired by ppc64 firmware-supported inverted</span>", 
"<span class=\"comment\"> * pagetable hash functions, but uses a full hashtable full of finite</span>", 
"<span class=\"comment\"> * collision chains, not just pairs of them.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * -- wli</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__profile_flip_buffers\">__profile_flip_buffers</a>(void *<a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_flip\">cpu_profile_flip</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = !<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_flip\">cpu_profile_flip</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#profile_flip_buffers\">profile_flip_buffers</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#profile_flip_mutex\">profile_flip_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_flip\">cpu_profile_flip</a>, <a class=\"id\" href=\"#get_cpu\">get_cpu</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#__profile_flip_buffers\">__profile_flip_buffers</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#profile_hit\">profile_hit</a> *<a class=\"id\" href=\"#hits\">hits</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NR_PROFILE_HIT\">NR_PROFILE_HIT</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#hits\">hits</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#hits\">hits</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hits\">hits</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pc\">pc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hits\">hits</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pc\">pc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#hits\">hits</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#hits\">hits</a>, &amp;<a class=\"id\" href=\"#prof_buffer\">prof_buffer</a>[<a class=\"id\" href=\"#hits\">hits</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pc\">pc</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hits\">hits</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#hits\">hits</a> = <a class=\"id\" href=\"#hits\">hits</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pc\">pc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#profile_flip_mutex\">profile_flip_mutex</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#profile_discard_flip_buffers\">profile_discard_flip_buffers</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#profile_flip_mutex\">profile_flip_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_flip\">cpu_profile_flip</a>, <a class=\"id\" href=\"#get_cpu\">get_cpu</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#__profile_flip_buffers\">__profile_flip_buffers</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#profile_hit\">profile_hit</a> *<a class=\"id\" href=\"#hits\">hits</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#hits\">hits</a>, 0, <a class=\"id\" href=\"#NR_PROFILE_HIT\">NR_PROFILE_HIT</a>*sizeof(struct <a class=\"id\" href=\"#profile_hit\">profile_hit</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#profile_flip_mutex\">profile_flip_mutex</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#profile_hits\">profile_hits</a>(int <a class=\"id\" href=\"#type\">type</a>, void *<a class=\"id\" href=\"#__pc\">__pc</a>, unsigned int <a class=\"id\" href=\"#nr_hits\">nr_hits</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#primary\">primary</a>, <a class=\"id\" href=\"#secondary\">secondary</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a> = (unsigned long)<a class=\"id\" href=\"#__pc\">__pc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#profile_hit\">profile_hit</a> *<a class=\"id\" href=\"#hits\">hits</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prof_on\">prof_on</a> != <a class=\"id\" href=\"#type\">type</a> || !<a class=\"id\" href=\"#prof_buffer\">prof_buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#min\">min</a>((<a class=\"id\" href=\"#pc\">pc</a> - (unsigned long)<a class=\"id\" href=\"#_stext\">_stext</a>) >> <a class=\"id\" href=\"#prof_shift\">prof_shift</a>, <a class=\"id\" href=\"#prof_len\">prof_len</a> - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#primary\">primary</a> = (<a class=\"id\" href=\"#pc\">pc</a> &amp; (<a class=\"id\" href=\"#NR_PROFILE_GRP\">NR_PROFILE_GRP</a> - 1)) << <a class=\"id\" href=\"#PROFILE_GRPSHIFT\">PROFILE_GRPSHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#secondary\">secondary</a> = (~(<a class=\"id\" href=\"#pc\">pc</a> << 1) &amp; (<a class=\"id\" href=\"#NR_PROFILE_GRP\">NR_PROFILE_GRP</a> - 1)) << <a class=\"id\" href=\"#PROFILE_GRPSHIFT\">PROFILE_GRPSHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#get_cpu\">get_cpu</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hits\">hits</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_flip\">cpu_profile_flip</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)];", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hits\">hits</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We buffer the global profiler buffer into a per-CPU</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * queue and thus reduce the number of global (and possibly</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NUMA-alien) accesses. The write-queue is self-coalescing:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#PROFILE_GRPSZ\">PROFILE_GRPSZ</a>; ++<a class=\"id\" href=\"#j\">j</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hits\">hits</a>[<a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#pc\">pc</a> == <a class=\"id\" href=\"#pc\">pc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hits\">hits</a>[<a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#hits\">hits</a> += <a class=\"id\" href=\"#nr_hits\">nr_hits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#hits\">hits</a>[<a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#hits\">hits</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hits\">hits</a>[<a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#pc\">pc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hits\">hits</a>[<a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#hits\">hits</a> = <a class=\"id\" href=\"#nr_hits\">nr_hits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#secondary\">secondary</a>) &amp; (<a class=\"id\" href=\"#NR_PROFILE_HIT\">NR_PROFILE_HIT</a> - 1);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#i\">i</a> != <a class=\"id\" href=\"#primary\">primary</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Add the current hit(s) and flush the write-queue out</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the global buffer:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#nr_hits\">nr_hits</a>, &amp;<a class=\"id\" href=\"#prof_buffer\">prof_buffer</a>[<a class=\"id\" href=\"#pc\">pc</a>]);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NR_PROFILE_HIT\">NR_PROFILE_HIT</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#hits\">hits</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#hits\">hits</a>, &amp;<a class=\"id\" href=\"#prof_buffer\">prof_buffer</a>[<a class=\"id\" href=\"#hits\">hits</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pc\">pc</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hits\">hits</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#hits\">hits</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#hits\">hits</a> = 0;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#profile_cpu_callback\">profile_cpu_callback</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#__cpu\">__cpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#cpu\">cpu</a> = (unsigned long)<a class=\"id\" href=\"#__cpu\">__cpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_PREPARE_FROZEN\">CPU_UP_PREPARE_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#cpu_to_mem\">cpu_to_mem</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_flip\">cpu_profile_flip</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[1]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_pages_exact_node\">alloc_pages_exact_node</a>(<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#notifier_from_errno\">notifier_from_errno</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[1] = <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_pages_exact_node\">alloc_pages_exact_node</a>(<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[0] = <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[1]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[1] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#notifier_from_errno\">notifier_from_errno</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_ONLINE\">CPU_ONLINE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_ONLINE_FROZEN\">CPU_ONLINE_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prof_cpu_mask\">prof_cpu_mask</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#prof_cpu_mask\">prof_cpu_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_CANCELED\">CPU_UP_CANCELED</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_CANCELED_FROZEN\">CPU_UP_CANCELED_FROZEN</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DEAD\">CPU_DEAD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DEAD_FROZEN\">CPU_DEAD_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prof_cpu_mask\">prof_cpu_mask</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#prof_cpu_mask\">prof_cpu_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[0] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[1]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[1]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[1] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"#else <span class=\"comment\">/* !CONFIG_SMP */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#profile_flip_buffers\">profile_flip_buffers</a>()<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#profile_discard_flip_buffers\">profile_discard_flip_buffers</a>()<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#profile_cpu_callback\">profile_cpu_callback</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"", 
"void <a class=\"id\" href=\"#profile_hits\">profile_hits</a>(int <a class=\"id\" href=\"#type\">type</a>, void *<a class=\"id\" href=\"#__pc\">__pc</a>, unsigned int <a class=\"id\" href=\"#nr_hits\">nr_hits</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pc\">pc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prof_on\">prof_on</a> != <a class=\"id\" href=\"#type\">type</a> || !<a class=\"id\" href=\"#prof_buffer\">prof_buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = ((unsigned long)<a class=\"id\" href=\"#__pc\">__pc</a> - (unsigned long)<a class=\"id\" href=\"#_stext\">_stext</a>) >> <a class=\"id\" href=\"#prof_shift\">prof_shift</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#nr_hits\">nr_hits</a>, &amp;<a class=\"id\" href=\"#prof_buffer\">prof_buffer</a>[<a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#pc\">pc</a>, <a class=\"id\" href=\"#prof_len\">prof_len</a> - 1)]);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_SMP */</span>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#profile_hits\">profile_hits</a>);", 
"", 
"void <a class=\"id\" href=\"#profile_tick\">profile_tick</a>(int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a> = <a class=\"id\" href=\"#get_irq_regs\">get_irq_regs</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#CPU_PROFILING\">CPU_PROFILING</a> && <a class=\"id\" href=\"#timer_hook\">timer_hook</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer_hook\">timer_hook</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>) && <a class=\"id\" href=\"#prof_cpu_mask\">prof_cpu_mask</a> != <a class=\"id\" href=\"#NULL\">NULL</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(), <a class=\"id\" href=\"#prof_cpu_mask\">prof_cpu_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#profile_hit\">profile_hit</a>(<a class=\"id\" href=\"#type\">type</a>, (void *)<a class=\"id\" href=\"#profile_pc\">profile_pc</a>(<a class=\"id\" href=\"#regs\">regs</a>));", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static int <a class=\"id\" href=\"#prof_cpu_mask_proc_show\">prof_cpu_mask_proc_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_cpumask\">seq_cpumask</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#prof_cpu_mask\">prof_cpu_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, '\\n');", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#prof_cpu_mask_proc_open\">prof_cpu_mask_proc_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#single_open\">single_open</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#prof_cpu_mask_proc_show\">prof_cpu_mask_proc_show</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#prof_cpu_mask_proc_write\">prof_cpu_mask_proc_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/>const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#new_value\">new_value</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#new_value\">new_value</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#cpumask_parse_user\">cpumask_parse_user</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#new_value\">new_value</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#prof_cpu_mask\">prof_cpu_mask</a>, <a class=\"id\" href=\"#new_value\">new_value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#new_value\">new_value</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#prof_cpu_mask_proc_fops\">prof_cpu_mask_proc_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#prof_cpu_mask_proc_open\">prof_cpu_mask_proc_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#single_release\">single_release</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#prof_cpu_mask_proc_write\">prof_cpu_mask_proc_write</a>,", 
"};", 
"", 
"void <a class=\"id\" href=\"#create_prof_cpu_mask\">create_prof_cpu_mask</a>(struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#root_irq_dir\">root_irq_dir</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* create /proc/irq/prof_cpu_mask */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_create\">proc_create</a>(\"prof_cpu_mask\", 0600, <a class=\"id\" href=\"#root_irq_dir\">root_irq_dir</a>, &amp;<a class=\"id\" href=\"#prof_cpu_mask_proc_fops\">prof_cpu_mask_proc_fops</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function accesses profiling information. The returned data is</span>", 
"<span class=\"comment\"> * binary: the sampling step and the actual contents of the profile</span>", 
"<span class=\"comment\"> * buffer. Use of the program readprofile is recommended in order to</span>", 
"<span class=\"comment\"> * get meaningful info out of these data.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#read_profile\">read_profile</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#p\">p</a> = *<a class=\"id\" href=\"#ppos\">ppos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#read\">read</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#pnt\">pnt</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sample_step\">sample_step</a> = 1 << <a class=\"id\" href=\"#prof_shift\">prof_shift</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#profile_flip_buffers\">profile_flip_buffers</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> >= (<a class=\"id\" href=\"#prof_len\">prof_len</a>+1)*sizeof(unsigned int))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; (<a class=\"id\" href=\"#prof_len\">prof_len</a>+1)*sizeof(unsigned int) - <a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = (<a class=\"id\" href=\"#prof_len\">prof_len</a>+1)*sizeof(unsigned int) - <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read\">read</a> = 0;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#p\">p</a> &lt; sizeof(unsigned int) && <a class=\"id\" href=\"#count\">count</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#put_user\">put_user</a>(*((char *)(&amp;<a class=\"id\" href=\"#sample_step\">sample_step</a>)+<a class=\"id\" href=\"#p\">p</a>), <a class=\"id\" href=\"#buf\">buf</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>++; <a class=\"id\" href=\"#p\">p</a>++; <a class=\"id\" href=\"#count\">count</a>--; <a class=\"id\" href=\"#read\">read</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pnt\">pnt</a> = (char *)<a class=\"id\" href=\"#prof_buffer\">prof_buffer</a> + <a class=\"id\" href=\"#p\">p</a> - sizeof(<a class=\"id\" href=\"#atomic_t\">atomic_t</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#buf\">buf</a>, (void *)<a class=\"id\" href=\"#pnt\">pnt</a>, <a class=\"id\" href=\"#count\">count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read\">read</a> += <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ppos\">ppos</a> += <a class=\"id\" href=\"#read\">read</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#read\">read</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Writing to /proc/profile resets the counters</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Writing a 'profiling multiplier' value into it also re-sets the profiling</span>", 
"<span class=\"comment\"> * interrupt frequency, on architectures that support this.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#write_profile\">write_profile</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>extern int <a class=\"id\" href=\"#setup_profiling_timer\">setup_profiling_timer</a>(unsigned int <a class=\"id\" href=\"#multiplier\">multiplier</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> == sizeof(int)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#multiplier\">multiplier</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#multiplier\">multiplier</a>, <a class=\"id\" href=\"#buf\">buf</a>, sizeof(int)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#setup_profiling_timer\">setup_profiling_timer</a>(<a class=\"id\" href=\"#multiplier\">multiplier</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#profile_discard_flip_buffers\">profile_discard_flip_buffers</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#prof_buffer\">prof_buffer</a>, 0, <a class=\"id\" href=\"#prof_len\">prof_len</a> * sizeof(<a class=\"id\" href=\"#atomic_t\">atomic_t</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#proc_profile_operations\">proc_profile_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#read_profile\">read_profile</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#write_profile\">write_profile</a>,", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"static void <a class=\"id\" href=\"#profile_nop\">profile_nop</a>(void *<a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"}", 
"", 
"static int <a class=\"id\" href=\"#create_hash_tables\">create_hash_tables</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#cpu_to_mem\">cpu_to_mem</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_pages_exact_node\">alloc_pages_exact_node</a>(<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a> | <a class=\"id\" href=\"#GFP_THISNODE\">GFP_THISNODE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_cleanup\">out_cleanup</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[1]", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (struct <a class=\"id\" href=\"#profile_hit\">profile_hit</a> *)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_pages_exact_node\">alloc_pages_exact_node</a>(<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a> | <a class=\"id\" href=\"#GFP_THISNODE\">GFP_THISNODE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_cleanup\">out_cleanup</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[0]", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (struct <a class=\"id\" href=\"#profile_hit\">profile_hit</a> *)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#out_cleanup\">out_cleanup</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prof_on\">prof_on</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#profile_nop\">profile_nop</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[0] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[1]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[1]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_profile_hits\">cpu_profile_hits</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[1] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -1;", 
"}", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#create_hash_tables\">create_hash_tables</a>()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>({ 0; })", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"int <a class=\"id\" href=\"#__ref\">__ref</a> <a class=\"id\" href=\"#create_proc_profile\">create_proc_profile</a>(void) <span class=\"comment\">/* false positive from hotcpu_notifier */</span>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#prof_on\">prof_on</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#create_hash_tables\">create_hash_tables</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#proc_create\">proc_create</a>(\"profile\", <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a> | <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#proc_profile_operations\">proc_profile_operations</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#entry\">entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#size\">size</a> = (1+<a class=\"id\" href=\"#prof_len\">prof_len</a>) * sizeof(<a class=\"id\" href=\"#atomic_t\">atomic_t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hotcpu_notifier\">hotcpu_notifier</a>(<a class=\"id\" href=\"#profile_cpu_callback\">profile_cpu_callback</a>, 0);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#create_proc_profile\">create_proc_profile</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PROC_FS */</span>", 
];
xr_frag_insert('l/3c/7916d64793ce442beca3dbd664e93b53950326.xr', __xr_tmp);
