var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Machine dependent access functions for RTC registers.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_MC146818RTC_H\">_ASM_X86_MC146818RTC_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_MC146818RTC_H\">_ASM_X86_MC146818RTC_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mc146818rtc\">mc146818rtc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#RTC_PORT\">RTC_PORT</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RTC_PORT\">RTC_PORT</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>(0x70 + (<a class=\"id\" href=\"#x\">x</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RTC_ALWAYS_BCD\">RTC_ALWAYS_BCD</a><span class=\"ts\"/>1<span class=\"ts\"/><span class=\"comment\">/* RTC operates in binary mode */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#__HAVE_ARCH_CMPXCHG\">__HAVE_ARCH_CMPXCHG</a>)", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This lock provides nmi access to the CMOS/RTC registers.  It has some</span>", 
"<span class=\"comment\"> * special properties.  It is owned by a CPU and stores the index register</span>", 
"<span class=\"comment\"> * currently being accessed (if owned).  The idea here is that it works</span>", 
"<span class=\"comment\"> * like a normal lock (normally).  However, in an NMI, the NMI code will</span>", 
"<span class=\"comment\"> * first check to see if its CPU owns the lock, meaning that the NMI</span>", 
"<span class=\"comment\"> * interrupted during the read/write of the device.  If it does, it goes ahead</span>", 
"<span class=\"comment\"> * and performs the access and then restores the index register.  If it does</span>", 
"<span class=\"comment\"> * not, it locks normally.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that since we are working with NMIs, we need this lock even in</span>", 
"<span class=\"comment\"> * a non-SMP machine just to mark that the lock is owned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This only works with compare-and-swap.  There is no other way to</span>", 
"<span class=\"comment\"> * atomically claim the lock and set the owner.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"extern volatile unsigned long <a class=\"id\" href=\"#cmos_lock\">cmos_lock</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * All of these below must be called with interrupts off, preempt</span>", 
"<span class=\"comment\"> * disabled, etc.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#lock_cmos\">lock_cmos</a>(unsigned char <a class=\"id\" href=\"#reg\">reg</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = ((<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>() + 1) << 8) | <a class=\"id\" href=\"#reg\">reg</a>;", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cmos_lock\">cmos_lock</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__cmpxchg\">__cmpxchg</a>(&amp;<a class=\"id\" href=\"#cmos_lock\">cmos_lock</a>, 0, <a class=\"id\" href=\"#new\">new</a>, sizeof(<a class=\"id\" href=\"#cmos_lock\">cmos_lock</a>)) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#unlock_cmos\">unlock_cmos</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmos_lock\">cmos_lock</a> = 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#do_i_have_lock_cmos\">do_i_have_lock_cmos</a>(void)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#cmos_lock\">cmos_lock</a> >> 8) == (<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>() + 1);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char <a class=\"id\" href=\"#current_lock_cmos_reg\">current_lock_cmos_reg</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cmos_lock\">cmos_lock</a> &amp; 0xff;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_cmos_prefix\">lock_cmos_prefix</a>(<a class=\"id\" href=\"#reg\">reg</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cmos_flags\">cmos_flags</a>;<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#cmos_flags\">cmos_flags</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_cmos\">lock_cmos</a>(<a class=\"id\" href=\"#reg\">reg</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_cmos_suffix\">lock_cmos_suffix</a>(<a class=\"id\" href=\"#reg\">reg</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_cmos\">unlock_cmos</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#cmos_flags\">cmos_flags</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_cmos_prefix\">lock_cmos_prefix</a>(<a class=\"id\" href=\"#reg\">reg</a>) do {} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_cmos_suffix\">lock_cmos_suffix</a>(<a class=\"id\" href=\"#reg\">reg</a>) do {} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_cmos\">lock_cmos</a>(<a class=\"id\" href=\"#reg\">reg</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#unlock_cmos\">unlock_cmos</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#do_i_have_lock_cmos\">do_i_have_lock_cmos</a>() 0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#current_lock_cmos_reg\">current_lock_cmos_reg</a>() 0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The yet supported machines all access the RTC index register via</span>", 
"<span class=\"comment\"> * an ISA port access but the way to access the date register differs ...</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CMOS_READ\">CMOS_READ</a>(<a class=\"id\" href=\"#addr\">addr</a>) <a class=\"id\" href=\"#rtc_cmos_read\">rtc_cmos_read</a>(<a class=\"id\" href=\"#addr\">addr</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CMOS_WRITE\">CMOS_WRITE</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#addr\">addr</a>) <a class=\"id\" href=\"#rtc_cmos_write\">rtc_cmos_write</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#addr\">addr</a>)", 
"unsigned char <a class=\"id\" href=\"#rtc_cmos_read\">rtc_cmos_read</a>(unsigned char <a class=\"id\" href=\"#addr\">addr</a>);", 
"void <a class=\"id\" href=\"#rtc_cmos_write\">rtc_cmos_write</a>(unsigned char <a class=\"id\" href=\"#val\">val</a>, unsigned char <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"extern int <a class=\"id\" href=\"#mach_set_rtc_mmss\">mach_set_rtc_mmss</a>(unsigned long <a class=\"id\" href=\"#nowtime\">nowtime</a>);", 
"extern unsigned long <a class=\"id\" href=\"#mach_get_cmos_time\">mach_get_cmos_time</a>(void);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RTC_IRQ\">RTC_IRQ</a> 8", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_MC146818RTC_H */</span>", 
];
xr_frag_insert('l/3c/c58f7b1e0486663b74c88f3d94728e97dcb600.xr', __xr_tmp);
