var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * idle-task scheduling class.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (NOTE: these are not related to SCHED_IDLE tasks which are</span>", 
"<span class=\"comment\"> *  handled in sched_fair.c)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"static int", 
"<a class=\"id\" href=\"#select_task_rq_idle\">select_task_rq_idle</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#sd_flag\">sd_flag</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>); <span class=\"comment\">/* IDLE tasks as never migrated */</span>", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Idle tasks are unconditionally rescheduled:</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#check_preempt_curr_idle\">check_preempt_curr_idle</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#idle\">idle</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#pick_next_task_idle\">pick_next_task_idle</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#sched_goidle\">sched_goidle</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#calc_load_account_idle\">calc_load_account_idle</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#idle\">idle</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * It is not legal to sleep in the idle task - print a warning</span>", 
"<span class=\"comment\"> * message if some code attempts to do it:</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#dequeue_task_idle\">dequeue_task_idle</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"bad: scheduling from the idle thread!\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#put_prev_task_idle\">put_prev_task_idle</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>)", 
"{", 
"}", 
"", 
"static void <a class=\"id\" href=\"#task_tick_idle\">task_tick_idle</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#curr\">curr</a>, int <a class=\"id\" href=\"#queued\">queued</a>)", 
"{", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_curr_task_idle\">set_curr_task_idle</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"}", 
"", 
"static void <a class=\"id\" href=\"#switched_to_idle\">switched_to_idle</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#running\">running</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Can this actually happen?? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#running\">running</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_preempt_curr\">check_preempt_curr</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, 0);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#prio_changed_idle\">prio_changed_idle</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#oldprio\">oldprio</a>, int <a class=\"id\" href=\"#running\">running</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* This can happen for hot plug CPUS */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reschedule if we are currently running on this runqueue and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * our priority decreased, or if we are not currently running on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this runqueue and our priority is higher than the current's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#running\">running</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> &gt; <a class=\"id\" href=\"#oldprio\">oldprio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_preempt_curr\">check_preempt_curr</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, 0);", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#get_rr_interval_idle\">get_rr_interval_idle</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Simple, special scheduling class for the per-CPU idle tasks:</span>", 
"<span class=\"comment\"> */</span>", 
"static const struct <a class=\"id\" href=\"#sched_class\">sched_class</a> <a class=\"id\" href=\"#idle_sched_class\">idle_sched_class</a> = {", 
"<span class=\"ts\"/><span class=\"comment\">/* .next is NULL */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* no enqueue/yield_task for idle tasks */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* dequeue is not valid, we print a debug message there: */</span>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#dequeue_task\">dequeue_task</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#dequeue_task_idle\">dequeue_task_idle</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#check_preempt_curr\">check_preempt_curr</a><span class=\"ts\"/>= <a class=\"id\" href=\"#check_preempt_curr_idle\">check_preempt_curr_idle</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pick_next_task\">pick_next_task</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#pick_next_task_idle\">pick_next_task_idle</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#put_prev_task\">put_prev_task</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#put_prev_task_idle\">put_prev_task_idle</a>,", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#select_task_rq\">select_task_rq</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#select_task_rq_idle\">select_task_rq_idle</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_curr_task\">set_curr_task</a>          = <a class=\"id\" href=\"#set_curr_task_idle\">set_curr_task_idle</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#task_tick\">task_tick</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#task_tick_idle\">task_tick_idle</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_rr_interval\">get_rr_interval</a><span class=\"ts\"/>= <a class=\"id\" href=\"#get_rr_interval_idle\">get_rr_interval_idle</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#prio_changed\">prio_changed</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#prio_changed_idle\">prio_changed_idle</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#switched_to\">switched_to</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#switched_to_idle\">switched_to_idle</a>,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* no .task_new for idle tasks */</span>", 
"};", 
];
xr_frag_insert('l/3d/07e5594279f41860bfb28c640d56a1d423c415.xr', __xr_tmp);
