var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/exec.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * #!-checking implemented by tytso.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Demand-loading implemented 01.12.91 - no need to read anything but</span>", 
"<span class=\"comment\"> * the header into memory. The inode of the executable is put into</span>", 
"<span class=\"comment\"> * \"current-&gt;executable\", and page faults do the actual loading. Clean.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Once more I can proudly say that linux stood up to being changed: it</span>", 
"<span class=\"comment\"> * was less than 2 hours work to get demand-loading completely implemented.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Demand loading changed July 1993 by Eric Youngdale.   Use mmap instead,</span>", 
"<span class=\"comment\"> * current-&gt;executable is only used by the procfs.  This allows a dispatch</span>", 
"<span class=\"comment\"> * table to check for several different types  of binary formats.  We keep</span>", 
"<span class=\"comment\"> * trying until we recognize the file or we run out of supported binary</span>", 
"<span class=\"comment\"> * formats. </span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fdtable\">fdtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stat\">stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fcntl\">fcntl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#perf_event\">perf_event</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#personality\">personality</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#binfmts\">binfmts</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#utsname\">utsname</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pid_namespace\">pid_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#namei\">namei</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tsacct_kern\">tsacct_kern</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cn_proc\">cn_proc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tracehook\">tracehook</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmod\">kmod</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fsnotify\">fsnotify</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs_struct\">fs_struct</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pipe_fs_i\">pipe_fs_i</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mmu_context\">mmu_context</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlb\">tlb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"int <a class=\"id\" href=\"#core_uses_pid\">core_uses_pid</a>;", 
"char <a class=\"id\" href=\"#core_pattern\">core_pattern</a>[<a class=\"id\" href=\"#CORENAME_MAX_SIZE\">CORENAME_MAX_SIZE</a>] = \"core\";", 
"unsigned int <a class=\"id\" href=\"#core_pipe_limit\">core_pipe_limit</a>;", 
"int <a class=\"id\" href=\"#suid_dumpable\">suid_dumpable</a> = 0;", 
"", 
"<span class=\"comment\">/* The maximal length of core_pattern is also specified in sysctl.c */</span>", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#formats\">formats</a>);", 
"static <a class=\"id\" href=\"#DEFINE_RWLOCK\">DEFINE_RWLOCK</a>(<a class=\"id\" href=\"#binfmt_lock\">binfmt_lock</a>);", 
"", 
"int <a class=\"id\" href=\"#__register_binfmt\">__register_binfmt</a>(struct <a class=\"id\" href=\"#linux_binfmt\">linux_binfmt</a> * <a class=\"id\" href=\"#fmt\">fmt</a>, int <a class=\"id\" href=\"#insert\">insert</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fmt\">fmt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#binfmt_lock\">binfmt_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insert\">insert</a> ? <a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#fmt\">fmt</a>-><a class=\"id\" href=\"#lh\">lh</a>, &amp;<a class=\"id\" href=\"#formats\">formats</a>) :", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#fmt\">fmt</a>-><a class=\"id\" href=\"#lh\">lh</a>, &amp;<a class=\"id\" href=\"#formats\">formats</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#binfmt_lock\">binfmt_lock</a>);", 
"<span class=\"ts\"/>return 0;<span class=\"ts\"/>", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__register_binfmt\">__register_binfmt</a>);", 
"", 
"void <a class=\"id\" href=\"#unregister_binfmt\">unregister_binfmt</a>(struct <a class=\"id\" href=\"#linux_binfmt\">linux_binfmt</a> * <a class=\"id\" href=\"#fmt\">fmt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#binfmt_lock\">binfmt_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#fmt\">fmt</a>-><a class=\"id\" href=\"#lh\">lh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#binfmt_lock\">binfmt_lock</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unregister_binfmt\">unregister_binfmt</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#put_binfmt\">put_binfmt</a>(struct <a class=\"id\" href=\"#linux_binfmt\">linux_binfmt</a> * <a class=\"id\" href=\"#fmt\">fmt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#fmt\">fmt</a>-><a class=\"id\" href=\"#module\">module</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note that a shared library must be both readable and executable due to</span>", 
"<span class=\"comment\"> * security reasons.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Also note that we take the address to load from from the file itself.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#uselib\">uselib</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#library\">library</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#getname\">getname</a>(<a class=\"id\" href=\"#library\">library</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#tmp\">tmp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#do_filp_open\">do_filp_open</a>(<a class=\"id\" href=\"#AT_FDCWD\">AT_FDCWD</a>, <a class=\"id\" href=\"#tmp\">tmp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#O_LARGEFILE\">O_LARGEFILE</a> | <a class=\"id\" href=\"#O_RDONLY\">O_RDONLY</a> | <a class=\"id\" href=\"#FMODE_EXEC\">FMODE_EXEC</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MAY_READ\">MAY_READ</a> | <a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a> | <a class=\"id\" href=\"#MAY_OPEN\">MAY_OPEN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#putname\">putname</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#file\">file</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &amp; <a class=\"id\" href=\"#MNT_NOEXEC\">MNT_NOEXEC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_open\">fsnotify_open</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a>;", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#linux_binfmt\">linux_binfmt</a> * <a class=\"id\" href=\"#fmt\">fmt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#binfmt_lock\">binfmt_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, &amp;<a class=\"id\" href=\"#formats\">formats</a>, <a class=\"id\" href=\"#lh\">lh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#fmt\">fmt</a>-><a class=\"id\" href=\"#load_shlib\">load_shlib</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#fmt\">fmt</a>-><a class=\"id\" href=\"#module\">module</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#binfmt_lock\">binfmt_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#fmt\">fmt</a>-><a class=\"id\" href=\"#load_shlib\">load_shlib</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#binfmt_lock\">binfmt_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_binfmt\">put_binfmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> != -<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#binfmt_lock\">binfmt_lock</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#exit\">exit</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"  <span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#get_arg_page\">get_arg_page</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>, unsigned long <a class=\"id\" href=\"#pos\">pos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#write\">write</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_STACK_GROWSUP\">CONFIG_STACK_GROWSUP</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#expand_stack_downwards\">expand_stack_downwards</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_user_pages\">get_user_pages</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pos\">pos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1, <a class=\"id\" href=\"#write\">write</a>, 1, &amp;<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rlimit\">rlimit</a> *<a class=\"id\" href=\"#rlim\">rlim</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We've historically supported up to 32 pages (ARG_MAX)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of argument strings even with small stacks</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> <= <a class=\"id\" href=\"#ARG_MAX\">ARG_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Limit to 1/4-th the stack size for the argv+env strings.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This ensures that:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  - the remaining binfmt code will not run out of stack space,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  - the program will have a reasonable amount of stack left</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *    to work from.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rlim\">rlim</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#rlim\">rlim</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#rlim\">rlim</a>[<a class=\"id\" href=\"#RLIMIT_STACK\">RLIMIT_STACK</a>].<a class=\"id\" href=\"#rlim_cur\">rlim_cur</a>) / 4) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#put_arg_page\">put_arg_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_arg_page\">free_arg_page</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>, int <a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_arg_pages\">free_arg_pages</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"}", 
"", 
"static void <a class=\"id\" href=\"#flush_arg_page\">flush_arg_page</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>, unsigned long <a class=\"id\" href=\"#pos\">pos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_cache_page\">flush_cache_page</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__bprm_mm_init\">__bprm_mm_init</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#vm_area_cachep\">vm_area_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a> = <a class=\"id\" href=\"#mm\">mm</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Place the stack at the largest stack address the architecture</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * supports. Later, we'll move this to an appropriate place. We don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * use STACK_TOP because that can depend on attributes which aren't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * configured yet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#VM_STACK_FLAGS\">VM_STACK_FLAGS</a> &amp; <a class=\"id\" href=\"#VM_STACK_INCOMPLETE_SETUP\">VM_STACK_INCOMPLETE_SETUP</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> = <a class=\"id\" href=\"#STACK_TOP_MAX\">STACK_TOP_MAX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> = <a class=\"id\" href=\"#VM_STACK_FLAGS\">VM_STACK_FLAGS</a> | <a class=\"id\" href=\"#VM_STACK_INCOMPLETE_SETUP\">VM_STACK_INCOMPLETE_SETUP</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a> = <a class=\"id\" href=\"#vm_get_page_prot\">vm_get_page_prot</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#insert_vm_struct\">insert_vm_struct</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#stack_vm\">stack_vm</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#total_vm\">total_vm</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - sizeof(void *);", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#vm_area_cachep\">vm_area_cachep</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#valid_arg_len\">valid_arg_len</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>, long <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a> <= <a class=\"id\" href=\"#MAX_ARG_STRLEN\">MAX_ARG_STRLEN</a>;", 
"}", 
"", 
"#else", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#get_arg_page\">get_arg_page</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>, unsigned long <a class=\"id\" href=\"#pos\">pos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#write\">write</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#page\">page</a>[<a class=\"id\" href=\"#pos\">pos</a> / <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>];", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a> && <a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_page\">alloc_page</a>(<a class=\"id\" href=\"#GFP_HIGHUSER\">GFP_HIGHUSER</a>|<a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#page\">page</a>[<a class=\"id\" href=\"#pos\">pos</a> / <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>] = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#put_arg_page\">put_arg_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_arg_page\">free_arg_page</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>, int <a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#page\">page</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#page\">page</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#page\">page</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_arg_pages\">free_arg_pages</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_ARG_PAGES\">MAX_ARG_PAGES</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_arg_page\">free_arg_page</a>(<a class=\"id\" href=\"#bprm\">bprm</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#flush_arg_page\">flush_arg_page</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>, unsigned long <a class=\"id\" href=\"#pos\">pos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__bprm_mm_init\">__bprm_mm_init</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> * <a class=\"id\" href=\"#MAX_ARG_PAGES\">MAX_ARG_PAGES</a> - sizeof(void *);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#valid_arg_len\">valid_arg_len</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>, long <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a> <= <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MMU */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Create a new mm_struct and populate it with a temporary stack</span>", 
"<span class=\"comment\"> * vm_area_struct.  We don't have enough context at this point to set the stack</span>", 
"<span class=\"comment\"> * flags, permissions, and offset, so we use temporary values.  We'll update</span>", 
"<span class=\"comment\"> * them later in setup_arg_pages().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#bprm_mm_init\">bprm_mm_init</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#mm_alloc\">mm_alloc</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#init_new_context\">init_new_context</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__bprm_mm_init\">__bprm_mm_init</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmdrop\">mmdrop</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * count() counts the number of strings in array ARGV.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#count\">count</a>(const char <a class=\"id\" href=\"#__user\">__user</a> * const <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#argv\">argv</a>, int <a class=\"id\" href=\"#max\">max</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#argv\">argv</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#argv\">argv</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#argv\">argv</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>++ >= <a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#E2BIG\">E2BIG</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fatal_signal_pending\">fatal_signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERESTARTNOHAND\">ERESTARTNOHAND</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * 'copy_strings()' copies argument/environment strings from the old</span>", 
"<span class=\"comment\"> * processes's memory to the new process's stack.  The call to get_user_pages()</span>", 
"<span class=\"comment\"> * ensures the destination page is created and not swapped out.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#copy_strings\">copy_strings</a>(int <a class=\"id\" href=\"#argc\">argc</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *const <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#argv\">argv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#kmapped_page\">kmapped_page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#kaddr\">kaddr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#kpos\">kpos</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#argc\">argc</a>-- &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#argv\">argv</a>+<a class=\"id\" href=\"#argc\">argc</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!(<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strnlen_user\">strnlen_user</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#MAX_ARG_STRLEN\">MAX_ARG_STRLEN</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#valid_arg_len\">valid_arg_len</a>(<a class=\"id\" href=\"#bprm\">bprm</a>, <a class=\"id\" href=\"#len\">len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#E2BIG\">E2BIG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We're going to work our way backwords. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a> -= <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#bytes_to_copy\">bytes_to_copy</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fatal_signal_pending\">fatal_signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ERESTARTNOHAND\">ERESTARTNOHAND</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#pos\">pos</a> % <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bytes_to_copy\">bytes_to_copy</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bytes_to_copy\">bytes_to_copy</a> &gt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bytes_to_copy\">bytes_to_copy</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> -= <a class=\"id\" href=\"#bytes_to_copy\">bytes_to_copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> -= <a class=\"id\" href=\"#bytes_to_copy\">bytes_to_copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> -= <a class=\"id\" href=\"#bytes_to_copy\">bytes_to_copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#bytes_to_copy\">bytes_to_copy</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#kmapped_page\">kmapped_page</a> || <a class=\"id\" href=\"#kpos\">kpos</a> != (<a class=\"id\" href=\"#pos\">pos</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#get_arg_page\">get_arg_page</a>(<a class=\"id\" href=\"#bprm\">bprm</a>, <a class=\"id\" href=\"#pos\">pos</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#E2BIG\">E2BIG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kmapped_page\">kmapped_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_kernel_dcache_page\">flush_kernel_dcache_page</a>(<a class=\"id\" href=\"#kmapped_page\">kmapped_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap\">kunmap</a>(<a class=\"id\" href=\"#kmapped_page\">kmapped_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_arg_page\">put_arg_page</a>(<a class=\"id\" href=\"#kmapped_page\">kmapped_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmapped_page\">kmapped_page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kaddr\">kaddr</a> = <a class=\"id\" href=\"#kmap\">kmap</a>(<a class=\"id\" href=\"#kmapped_page\">kmapped_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kpos\">kpos</a> = <a class=\"id\" href=\"#pos\">pos</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_arg_page\">flush_arg_page</a>(<a class=\"id\" href=\"#bprm\">bprm</a>, <a class=\"id\" href=\"#kpos\">kpos</a>, <a class=\"id\" href=\"#kmapped_page\">kmapped_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#kaddr\">kaddr</a>+<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#bytes_to_copy\">bytes_to_copy</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kmapped_page\">kmapped_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_kernel_dcache_page\">flush_kernel_dcache_page</a>(<a class=\"id\" href=\"#kmapped_page\">kmapped_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap\">kunmap</a>(<a class=\"id\" href=\"#kmapped_page\">kmapped_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_arg_page\">put_arg_page</a>(<a class=\"id\" href=\"#kmapped_page\">kmapped_page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Like copy_strings, but get argv and its values from kernel memory.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#copy_strings_kernel\">copy_strings_kernel</a>(int <a class=\"id\" href=\"#argc\">argc</a>, const char *const *<a class=\"id\" href=\"#argv\">argv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_segment_t\">mm_segment_t</a> <a class=\"id\" href=\"#oldfs\">oldfs</a> = <a class=\"id\" href=\"#get_fs\">get_fs</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#KERNEL_DS\">KERNEL_DS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#copy_strings\">copy_strings</a>(<a class=\"id\" href=\"#argc\">argc</a>, (const char <a class=\"id\" href=\"#__user\">__user</a> *const  <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#argv\">argv</a>, <a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#oldfs\">oldfs</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#copy_strings_kernel\">copy_strings_kernel</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * During bprm_mm_init(), we create a temporary stack at STACK_TOP_MAX.  Once</span>", 
"<span class=\"comment\"> * the binfmt code determines where the new stack should reside, we shift it to</span>", 
"<span class=\"comment\"> * its final location.  The process proceeds as follows:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1) Use shift to calculate the new vma endpoints.</span>", 
"<span class=\"comment\"> * 2) Extend vma to cover both the old and new ranges.  This ensures the</span>", 
"<span class=\"comment\"> *    arguments passed to subsequent functions are consistent.</span>", 
"<span class=\"comment\"> * 3) Move vma's page tables to the new range.</span>", 
"<span class=\"comment\"> * 4) Free up any cleared pgd range.</span>", 
"<span class=\"comment\"> * 5) Shrink the vma to cover only the new range.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#shift_arg_pages\">shift_arg_pages</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#shift\">shift</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#old_start\">old_start</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#old_end\">old_end</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#old_end\">old_end</a> - <a class=\"id\" href=\"#old_start\">old_start</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#new_start\">new_start</a> = <a class=\"id\" href=\"#old_start\">old_start</a> - <a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#new_end\">new_end</a> = <a class=\"id\" href=\"#old_end\">old_end</a> - <a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a> *<a class=\"id\" href=\"#tlb\">tlb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#new_start\">new_start</a> &gt; <a class=\"id\" href=\"#new_end\">new_end</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ensure there are no vmas between where we want to go</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and where we are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a> != <a class=\"id\" href=\"#find_vma\">find_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#new_start\">new_start</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cover the whole range: [new_start, old_end)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma_adjust\">vma_adjust</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#new_start\">new_start</a>, <a class=\"id\" href=\"#old_end\">old_end</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>, <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * move the page tables downwards, on failure we rely on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * process cleanup to remove whatever mess we made.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> != <a class=\"id\" href=\"#move_page_tables\">move_page_tables</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#old_start\">old_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#new_start\">new_start</a>, <a class=\"id\" href=\"#length\">length</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lru_add_drain\">lru_add_drain</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tlb\">tlb</a> = <a class=\"id\" href=\"#tlb_gather_mmu\">tlb_gather_mmu</a>(<a class=\"id\" href=\"#mm\">mm</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_end\">new_end</a> &gt; <a class=\"id\" href=\"#old_start\">old_start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * when the old and new regions overlap clear from new_end.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pgd_range\">free_pgd_range</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#new_end\">new_end</a>, <a class=\"id\" href=\"#old_end\">old_end</a>, <a class=\"id\" href=\"#new_end\">new_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a> ? <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> : 0);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * otherwise, clean from old_start; this is done to not touch</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the address space in [new_end, old_start) some architectures</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * have constraints on va-space that make this illegal (IA64) -</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for the others its just a little faster.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pgd_range\">free_pgd_range</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#old_start\">old_start</a>, <a class=\"id\" href=\"#old_end\">old_end</a>, <a class=\"id\" href=\"#new_end\">new_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a> ? <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> : 0);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tlb_finish_mmu\">tlb_finish_mmu</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#new_end\">new_end</a>, <a class=\"id\" href=\"#old_end\">old_end</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Shrink the vma to just the new range.  Always succeeds.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma_adjust\">vma_adjust</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#new_start\">new_start</a>, <a class=\"id\" href=\"#new_end\">new_end</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Finalizes the stack vm_area_struct. The flags and permissions are updated,</span>", 
"<span class=\"comment\"> * the stack is optionally relocated, and some extra space is added.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#setup_arg_pages\">setup_arg_pages</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#stack_top\">stack_top</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#executable_stack\">executable_stack</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#stack_shift\">stack_shift</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vm_flags\">vm_flags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#stack_base\">stack_base</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#stack_size\">stack_size</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#stack_expand\">stack_expand</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rlim_stack\">rlim_stack</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_STACK_GROWSUP\">CONFIG_STACK_GROWSUP</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Limit stack size to 1GB */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stack_base\">stack_base</a> = <a class=\"id\" href=\"#rlimit_max\">rlimit_max</a>(<a class=\"id\" href=\"#RLIMIT_STACK\">RLIMIT_STACK</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#stack_base\">stack_base</a> &gt; (1 << 30))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stack_base\">stack_base</a> = 1 << 30;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure we didn't let the argument array grow too large. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &gt; <a class=\"id\" href=\"#stack_base\">stack_base</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stack_base\">stack_base</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#stack_top\">stack_top</a> - <a class=\"id\" href=\"#stack_base\">stack_base</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stack_shift\">stack_shift</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> - <a class=\"id\" href=\"#stack_base\">stack_base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#arg_start\">arg_start</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a> - <a class=\"id\" href=\"#stack_shift\">stack_shift</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#stack_shift\">stack_shift</a>;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stack_top\">stack_top</a> = <a class=\"id\" href=\"#arch_align_stack\">arch_align_stack</a>(<a class=\"id\" href=\"#stack_top\">stack_top</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stack_top\">stack_top</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#stack_top\">stack_top</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#stack_top\">stack_top</a> &lt; <a class=\"id\" href=\"#mmap_min_addr\">mmap_min_addr</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> >= <a class=\"id\" href=\"#stack_top\">stack_top</a> - <a class=\"id\" href=\"#mmap_min_addr\">mmap_min_addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stack_shift\">stack_shift</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#stack_top\">stack_top</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a> -= <a class=\"id\" href=\"#stack_shift\">stack_shift</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#arg_start\">arg_start</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#loader\">loader</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#loader\">loader</a> -= <a class=\"id\" href=\"#stack_shift\">stack_shift</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#exec\">exec</a> -= <a class=\"id\" href=\"#stack_shift\">stack_shift</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a> = <a class=\"id\" href=\"#VM_STACK_FLAGS\">VM_STACK_FLAGS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Adjust stack execute permissions; explicitly enable for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * EXSTACK_ENABLE_X, disable for EXSTACK_DISABLE_X and leave alone</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (arch default) otherwise.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#executable_stack\">executable_stack</a> == <a class=\"id\" href=\"#EXSTACK_ENABLE_X\">EXSTACK_ENABLE_X</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a> |= <a class=\"id\" href=\"#VM_EXEC\">VM_EXEC</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#executable_stack\">executable_stack</a> == <a class=\"id\" href=\"#EXSTACK_DISABLE_X\">EXSTACK_DISABLE_X</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &= ~<a class=\"id\" href=\"#VM_EXEC\">VM_EXEC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a> |= <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#def_flags\">def_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a> |= <a class=\"id\" href=\"#VM_STACK_INCOMPLETE_SETUP\">VM_STACK_INCOMPLETE_SETUP</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mprotect_fixup\">mprotect_fixup</a>(<a class=\"id\" href=\"#vma\">vma</a>, &amp;<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#prev\">prev</a> != <a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Move stack pages down in memory. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#stack_shift\">stack_shift</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#shift_arg_pages\">shift_arg_pages</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#stack_shift\">stack_shift</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* mprotect_fixup is overkill to remove the temporary stack flags */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &= ~<a class=\"id\" href=\"#VM_STACK_INCOMPLETE_SETUP\">VM_STACK_INCOMPLETE_SETUP</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stack_expand\">stack_expand</a> = 131072UL; <span class=\"comment\">/* randomly 32*4k (or 2*64k) pages */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stack_size\">stack_size</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Align this down to a page boundary as expand_stack</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will align it up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rlim_stack\">rlim_stack</a> = <a class=\"id\" href=\"#rlimit\">rlimit</a>(<a class=\"id\" href=\"#RLIMIT_STACK\">RLIMIT_STACK</a>) &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_STACK_GROWSUP\">CONFIG_STACK_GROWSUP</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#stack_size\">stack_size</a> + <a class=\"id\" href=\"#stack_expand\">stack_expand</a> &gt; <a class=\"id\" href=\"#rlim_stack\">rlim_stack</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stack_base\">stack_base</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> + <a class=\"id\" href=\"#rlim_stack\">rlim_stack</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stack_base\">stack_base</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> + <a class=\"id\" href=\"#stack_expand\">stack_expand</a>;", 
"#else", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#stack_size\">stack_size</a> + <a class=\"id\" href=\"#stack_expand\">stack_expand</a> &gt; <a class=\"id\" href=\"#rlim_stack\">rlim_stack</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stack_base\">stack_base</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#rlim_stack\">rlim_stack</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stack_base\">stack_base</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> - <a class=\"id\" href=\"#stack_expand\">stack_expand</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#start_stack\">start_stack</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#expand_stack\">expand_stack</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#stack_base\">stack_base</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#setup_arg_pages\">setup_arg_pages</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MMU */</span>", 
"", 
"struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#open_exec\">open_exec</a>(const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#do_filp_open\">do_filp_open</a>(<a class=\"id\" href=\"#AT_FDCWD\">AT_FDCWD</a>, <a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#O_LARGEFILE\">O_LARGEFILE</a> | <a class=\"id\" href=\"#O_RDONLY\">O_RDONLY</a> | <a class=\"id\" href=\"#FMODE_EXEC\">FMODE_EXEC</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a> | <a class=\"id\" href=\"#MAY_OPEN\">MAY_OPEN</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#file\">file</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &amp; <a class=\"id\" href=\"#MNT_NOEXEC\">MNT_NOEXEC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_open\">fsnotify_open</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#deny_write_access\">deny_write_access</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#file\">file</a>;", 
"", 
"<a class=\"id\" href=\"#exit\">exit</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#open_exec\">open_exec</a>);", 
"", 
"int <a class=\"id\" href=\"#kernel_read\">kernel_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_segment_t\">mm_segment_t</a> <a class=\"id\" href=\"#old_fs\">old_fs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_fs\">old_fs</a> = <a class=\"id\" href=\"#get_fs\">get_fs</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#get_ds\">get_ds</a>());", 
"<span class=\"ts\"/><span class=\"comment\">/* The cast to a user pointer is valid due to the set_fs() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#vfs_read\">vfs_read</a>(<a class=\"id\" href=\"#file\">file</a>, (void <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#count\">count</a>, &amp;<a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#old_fs\">old_fs</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kernel_read\">kernel_read</a>);", 
"", 
"static int <a class=\"id\" href=\"#exec_mmap\">exec_mmap</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> * <a class=\"id\" href=\"#old_mm\">old_mm</a>, *<a class=\"id\" href=\"#active_mm\">active_mm</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Notify parent that we're no longer interested in the old VM */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_mm\">old_mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sync_mm_rss\">sync_mm_rss</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#old_mm\">old_mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_release\">mm_release</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#old_mm\">old_mm</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_mm\">old_mm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Make sure that if there is a core dump in progress</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for the old mm, we get out and die instead of going</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * through with the exec.  We must hold mmap_sem around</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * checking core_state and changing tsk-&gt;mm.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#old_mm\">old_mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#old_mm\">old_mm</a>-><a class=\"id\" href=\"#core_state\">core_state</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#old_mm\">old_mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#active_mm\">active_mm</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#active_mm\">active_mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#active_mm\">active_mm</a> = <a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#activate_mm\">activate_mm</a>(<a class=\"id\" href=\"#active_mm\">active_mm</a>, <a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_pick_mmap_layout\">arch_pick_mmap_layout</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_mm\">old_mm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#old_mm\">old_mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#active_mm\">active_mm</a> != <a class=\"id\" href=\"#old_mm\">old_mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm_update_next_owner\">mm_update_next_owner</a>(<a class=\"id\" href=\"#old_mm\">old_mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmput\">mmput</a>(<a class=\"id\" href=\"#old_mm\">old_mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
];
xr_frag_insert('l/3d/6b56bdf61ccb2f1dc73c08db8ae1075b2b97fb.xr', __xr_tmp);
