var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#N_EXCEPTION_STACKS_END\">N_EXCEPTION_STACKS_END</a><span class=\"ts\"/>]<span class=\"ts\"/>= \"#DB[?]\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"static unsigned long *<a class=\"id\" href=\"#in_exception_stack\">in_exception_stack</a>(unsigned <a class=\"id\" href=\"#cpu\">cpu</a>, unsigned long <a class=\"id\" href=\"#stack\">stack</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned *<a class=\"id\" href=\"#usedp\">usedp</a>, char **<a class=\"id\" href=\"#idp\">idp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#k\">k</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Iterate over all exception stacks, and figure out whether</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 'stack' is in one of them:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#N_EXCEPTION_STACKS\">N_EXCEPTION_STACKS</a>; <a class=\"id\" href=\"#k\">k</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#orig_ist\">orig_ist</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#ist\">ist</a>[<a class=\"id\" href=\"#k\">k</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Is 'stack' above this exception frame's end?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If yes then skip to the next frame.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#stack\">stack</a> >= <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Is 'stack' above this exception frame's start address?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If yes then we found the right frame.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#stack\">stack</a> >= <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#EXCEPTION_STKSZ\">EXCEPTION_STKSZ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Make sure we only iterate through an exception</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * stack once. If it comes up for the second time</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * then there's something wrong going on - just</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * break out and return NULL:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#usedp\">usedp</a> &amp; (1U << <a class=\"id\" href=\"#k\">k</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#usedp\">usedp</a> |= 1U << <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#idp\">idp</a> = <a class=\"id\" href=\"#x86_stack_ids\">x86_stack_ids</a>[<a class=\"id\" href=\"#k\">k</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (unsigned long *)<a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this is a debug stack, and if it has a larger size than</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the usual exception stacks, then 'stack' might still</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be within the lower portion of the debug stack:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"#if <a class=\"id\" href=\"#DEBUG_STKSZ\">DEBUG_STKSZ</a> &gt; <a class=\"id\" href=\"#EXCEPTION_STKSZ\">EXCEPTION_STKSZ</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#k\">k</a> == <a class=\"id\" href=\"#DEBUG_STACK\">DEBUG_STACK</a> - 1 && <a class=\"id\" href=\"#stack\">stack</a> >= <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#DEBUG_STKSZ\">DEBUG_STKSZ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#N_EXCEPTION_STACKS\">N_EXCEPTION_STACKS</a> - 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Black magic. A large debug stack is composed of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * multiple exception stack entries, which we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * iterate through now. Dont look:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> -= <a class=\"id\" href=\"#EXCEPTION_STKSZ\">EXCEPTION_STKSZ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x86_stack_ids\">x86_stack_ids</a>[<a class=\"id\" href=\"#j\">j</a>][4] = '1' +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#j\">j</a> - <a class=\"id\" href=\"#N_EXCEPTION_STACKS\">N_EXCEPTION_STACKS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#stack\">stack</a> &lt; <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#EXCEPTION_STKSZ\">EXCEPTION_STKSZ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#usedp\">usedp</a> &amp; (1U << <a class=\"id\" href=\"#j\">j</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
];
xr_frag_insert('l/3d/87d0c513e6eeda46b479818adb521509cd59c3.xr', __xr_tmp);
