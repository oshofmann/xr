var __xr_tmp = [
"<span class=\"comment\">/* inffast.c -- fast decoding</span>", 
"<span class=\"comment\"> * Copyright (C) 1995-2004 Mark Adler</span>", 
"<span class=\"comment\"> * For conditions of distribution and use, see copyright notice in zlib.h</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#zutil\">zutil</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"inftrees.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"inflate.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"inffast.h\"", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ASMINF\">ASMINF</a>", 
"", 
"<span class=\"comment\">/* Allow machine dependent optimization for post-increment or pre-increment.</span>", 
"<span class=\"comment\">   Based on testing to date,</span>", 
"<span class=\"comment\">   Pre-increment preferred for:</span>", 
"<span class=\"comment\">   - PowerPC G3 (Adler)</span>", 
"<span class=\"comment\">   - MIPS R5000 (Randers-Pehrson)</span>", 
"<span class=\"comment\">   Post-increment preferred for:</span>", 
"<span class=\"comment\">   - none</span>", 
"<span class=\"comment\">   No measurable difference:</span>", 
"<span class=\"comment\">   - Pentium III (Anderson)</span>", 
"<span class=\"comment\">   - M68060 (Nikl)</span>", 
"<span class=\"comment\"> */</span>", 
"union <a class=\"id\" href=\"#uu\">uu</a> {", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#us\">us</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#b\">b</a>[2];", 
"};", 
"", 
"<span class=\"comment\">/* Endian independed version */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned short", 
"<a class=\"id\" href=\"#get_unaligned16\">get_unaligned16</a>(const unsigned short *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#uu\">uu</a>  <a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#b\">b</a> = (unsigned char *)<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#b\">b</a>[0] = <a class=\"id\" href=\"#b\">b</a>[0];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#b\">b</a>[1] = <a class=\"id\" href=\"#b\">b</a>[1];", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#us\">us</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#POSTINC\">POSTINC</a>", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OFF\">OFF</a> 0", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#a\">a</a>) *(<a class=\"id\" href=\"#a\">a</a>)++", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UP_UNALIGNED\">UP_UNALIGNED</a>(<a class=\"id\" href=\"#a\">a</a>) <a class=\"id\" href=\"#get_unaligned16\">get_unaligned16</a>((<a class=\"id\" href=\"#a\">a</a>)++)", 
"#else", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OFF\">OFF</a> 1", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#a\">a</a>) *++(<a class=\"id\" href=\"#a\">a</a>)", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UP_UNALIGNED\">UP_UNALIGNED</a>(<a class=\"id\" href=\"#a\">a</a>) <a class=\"id\" href=\"#get_unaligned16\">get_unaligned16</a>(++(<a class=\"id\" href=\"#a\">a</a>))", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">   Decode literal, length, and distance codes and write out the resulting</span>", 
"<span class=\"comment\">   literal and match bytes until either not enough input or output is</span>", 
"<span class=\"comment\">   available, an end-of-block is encountered, or a data error is encountered.</span>", 
"<span class=\"comment\">   When large enough input and output buffers are supplied to inflate(), for</span>", 
"<span class=\"comment\">   example, a 16K input buffer and a 64K output buffer, more than 95% of the</span>", 
"<span class=\"comment\">   inflate execution time is spent in this routine.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   Entry assumptions:</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">        state-&gt;mode == LEN</span>", 
"<span class=\"comment\">        strm-&gt;avail_in &gt;= 6</span>", 
"<span class=\"comment\">        strm-&gt;avail_out &gt;= 258</span>", 
"<span class=\"comment\">        start &gt;= strm-&gt;avail_out</span>", 
"<span class=\"comment\">        state-&gt;bits &lt; 8</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   On return, state-&gt;mode is one of:</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">        LEN -- ran out of enough output space or enough available input</span>", 
"<span class=\"comment\">        TYPE -- reached end of block code, inflate() to interpret next block</span>", 
"<span class=\"comment\">        BAD -- error in block data</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   Notes:</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    - The maximum input bits used by a length/distance pair is 15 bits for the</span>", 
"<span class=\"comment\">      length code, 5 bits for the length extra, 15 bits for the distance code,</span>", 
"<span class=\"comment\">      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.</span>", 
"<span class=\"comment\">      Therefore if strm-&gt;avail_in &gt;= 6, then there is enough input to avoid</span>", 
"<span class=\"comment\">      checking for available input while decoding.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    - The maximum bytes that a single length/distance pair can output is 258</span>", 
"<span class=\"comment\">      bytes, which is the maximum length that can be coded.  inflate_fast()</span>", 
"<span class=\"comment\">      requires strm-&gt;avail_out &gt;= 258 for each loop to avoid checking for</span>", 
"<span class=\"comment\">      output space.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    - @start:<span class=\"ts\"/>inflate()'s starting value for strm-&gt;avail_out</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#inflate_fast\">inflate_fast</a>(<a class=\"id\" href=\"#z_streamp\">z_streamp</a> <a class=\"id\" href=\"#strm\">strm</a>, unsigned <a class=\"id\" href=\"#start\">start</a>)", 
"{", 
"    struct <a class=\"id\" href=\"#inflate_state\">inflate_state</a> *<a class=\"id\" href=\"#state\">state</a>;", 
"    const unsigned char *<a class=\"id\" href=\"#in\">in</a>;    <span class=\"comment\">/* local strm-&gt;next_in */</span>", 
"    const unsigned char *<a class=\"id\" href=\"#last\">last</a>;  <span class=\"comment\">/* while in &lt; last, enough input available */</span>", 
"    unsigned char *<a class=\"id\" href=\"#out\">out</a>;         <span class=\"comment\">/* local strm-&gt;next_out */</span>", 
"    unsigned char *<a class=\"id\" href=\"#beg\">beg</a>;         <span class=\"comment\">/* inflate()'s initial strm-&gt;next_out */</span>", 
"    unsigned char *<a class=\"id\" href=\"#end\">end</a>;         <span class=\"comment\">/* while out &lt; end, enough space available */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#INFLATE_STRICT\">INFLATE_STRICT</a>", 
"    unsigned <a class=\"id\" href=\"#dmax\">dmax</a>;              <span class=\"comment\">/* maximum distance from zlib header */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"    unsigned <a class=\"id\" href=\"#wsize\">wsize</a>;             <span class=\"comment\">/* window size or zero if not using window */</span>", 
"    unsigned <a class=\"id\" href=\"#whave\">whave</a>;             <span class=\"comment\">/* valid bytes in the window */</span>", 
"    unsigned <a class=\"id\" href=\"#write\">write</a>;             <span class=\"comment\">/* window write index */</span>", 
"    unsigned char *<a class=\"id\" href=\"#window\">window</a>;      <span class=\"comment\">/* allocated sliding window, if wsize != 0 */</span>", 
"    unsigned long <a class=\"id\" href=\"#hold\">hold</a>;         <span class=\"comment\">/* local strm-&gt;hold */</span>", 
"    unsigned <a class=\"id\" href=\"#bits\">bits</a>;              <span class=\"comment\">/* local strm-&gt;bits */</span>", 
"    <a class=\"id\" href=\"#code\">code</a> const *<a class=\"id\" href=\"#lcode\">lcode</a>;          <span class=\"comment\">/* local strm-&gt;lencode */</span>", 
"    <a class=\"id\" href=\"#code\">code</a> const *<a class=\"id\" href=\"#dcode\">dcode</a>;          <span class=\"comment\">/* local strm-&gt;distcode */</span>", 
"    unsigned <a class=\"id\" href=\"#lmask\">lmask</a>;             <span class=\"comment\">/* mask for first level of length codes */</span>", 
"    unsigned <a class=\"id\" href=\"#dmask\">dmask</a>;             <span class=\"comment\">/* mask for first level of distance codes */</span>", 
"    <a class=\"id\" href=\"#code\">code</a> <a class=\"id\" href=\"#this\">this</a>;                  <span class=\"comment\">/* retrieved table entry */</span>", 
"    unsigned <a class=\"id\" href=\"#op\">op</a>;                <span class=\"comment\">/* code bits, operation, extra bits, or */</span>", 
"                                <span class=\"comment\">/*  window position, window bytes to copy */</span>", 
"    unsigned <a class=\"id\" href=\"#len\">len</a>;               <span class=\"comment\">/* match length, unused bytes */</span>", 
"    unsigned <a class=\"id\" href=\"#dist\">dist</a>;              <span class=\"comment\">/* match distance */</span>", 
"    unsigned char *<a class=\"id\" href=\"#from\">from</a>;        <span class=\"comment\">/* where to copy match from */</span>", 
"", 
"    <span class=\"comment\">/* copy state to local variables */</span>", 
"    <a class=\"id\" href=\"#state\">state</a> = (struct <a class=\"id\" href=\"#inflate_state\">inflate_state</a> *)<a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"    <a class=\"id\" href=\"#in\">in</a> = <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#next_in\">next_in</a> - <a class=\"id\" href=\"#OFF\">OFF</a>;", 
"    <a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#in\">in</a> + (<a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#avail_in\">avail_in</a> - 5);", 
"    <a class=\"id\" href=\"#out\">out</a> = <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#next_out\">next_out</a> - <a class=\"id\" href=\"#OFF\">OFF</a>;", 
"    <a class=\"id\" href=\"#beg\">beg</a> = <a class=\"id\" href=\"#out\">out</a> - (<a class=\"id\" href=\"#start\">start</a> - <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#avail_out\">avail_out</a>);", 
"    <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#out\">out</a> + (<a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#avail_out\">avail_out</a> - 257);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#INFLATE_STRICT\">INFLATE_STRICT</a>", 
"    <a class=\"id\" href=\"#dmax\">dmax</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#dmax\">dmax</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"    <a class=\"id\" href=\"#wsize\">wsize</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wsize\">wsize</a>;", 
"    <a class=\"id\" href=\"#whave\">whave</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#whave\">whave</a>;", 
"    <a class=\"id\" href=\"#write\">write</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#write\">write</a>;", 
"    <a class=\"id\" href=\"#window\">window</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#window\">window</a>;", 
"    <a class=\"id\" href=\"#hold\">hold</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#hold\">hold</a>;", 
"    <a class=\"id\" href=\"#bits\">bits</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bits\">bits</a>;", 
"    <a class=\"id\" href=\"#lcode\">lcode</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lencode\">lencode</a>;", 
"    <a class=\"id\" href=\"#dcode\">dcode</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#distcode\">distcode</a>;", 
"    <a class=\"id\" href=\"#lmask\">lmask</a> = (1U << <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lenbits\">lenbits</a>) - 1;", 
"    <a class=\"id\" href=\"#dmask\">dmask</a> = (1U << <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#distbits\">distbits</a>) - 1;", 
"", 
"    <span class=\"comment\">/* decode literals and length/distances until end-of-block or not enough</span>", 
"<span class=\"comment\">       input data or output space */</span>", 
"    do {", 
"        if (<a class=\"id\" href=\"#bits\">bits</a> &lt; 15) {", 
"            <a class=\"id\" href=\"#hold\">hold</a> += (unsigned long)(<a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#in\">in</a>)) << <a class=\"id\" href=\"#bits\">bits</a>;", 
"            <a class=\"id\" href=\"#bits\">bits</a> += 8;", 
"            <a class=\"id\" href=\"#hold\">hold</a> += (unsigned long)(<a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#in\">in</a>)) << <a class=\"id\" href=\"#bits\">bits</a>;", 
"            <a class=\"id\" href=\"#bits\">bits</a> += 8;", 
"        }", 
"        <a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#lcode\">lcode</a>[<a class=\"id\" href=\"#hold\">hold</a> &amp; <a class=\"id\" href=\"#lmask\">lmask</a>];", 
"      <a class=\"id\" href=\"#dolen\">dolen</a>:", 
"        <a class=\"id\" href=\"#op\">op</a> = (unsigned)(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a>);", 
"        <a class=\"id\" href=\"#hold\">hold</a> >>= <a class=\"id\" href=\"#op\">op</a>;", 
"        <a class=\"id\" href=\"#bits\">bits</a> -= <a class=\"id\" href=\"#op\">op</a>;", 
"        <a class=\"id\" href=\"#op\">op</a> = (unsigned)(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#op\">op</a>);", 
"        if (<a class=\"id\" href=\"#op\">op</a> == 0) {                          <span class=\"comment\">/* literal */</span>", 
"            <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#out\">out</a>) = (unsigned char)(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#val\">val</a>);", 
"        }", 
"        else if (<a class=\"id\" href=\"#op\">op</a> &amp; 16) {                     <span class=\"comment\">/* length base */</span>", 
"            <a class=\"id\" href=\"#len\">len</a> = (unsigned)(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#val\">val</a>);", 
"            <a class=\"id\" href=\"#op\">op</a> &= 15;                           <span class=\"comment\">/* number of extra bits */</span>", 
"            if (<a class=\"id\" href=\"#op\">op</a>) {", 
"                if (<a class=\"id\" href=\"#bits\">bits</a> &lt; <a class=\"id\" href=\"#op\">op</a>) {", 
"                    <a class=\"id\" href=\"#hold\">hold</a> += (unsigned long)(<a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#in\">in</a>)) << <a class=\"id\" href=\"#bits\">bits</a>;", 
"                    <a class=\"id\" href=\"#bits\">bits</a> += 8;", 
"                }", 
"                <a class=\"id\" href=\"#len\">len</a> += (unsigned)<a class=\"id\" href=\"#hold\">hold</a> &amp; ((1U << <a class=\"id\" href=\"#op\">op</a>) - 1);", 
"                <a class=\"id\" href=\"#hold\">hold</a> >>= <a class=\"id\" href=\"#op\">op</a>;", 
"                <a class=\"id\" href=\"#bits\">bits</a> -= <a class=\"id\" href=\"#op\">op</a>;", 
"            }", 
"            if (<a class=\"id\" href=\"#bits\">bits</a> &lt; 15) {", 
"                <a class=\"id\" href=\"#hold\">hold</a> += (unsigned long)(<a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#in\">in</a>)) << <a class=\"id\" href=\"#bits\">bits</a>;", 
"                <a class=\"id\" href=\"#bits\">bits</a> += 8;", 
"                <a class=\"id\" href=\"#hold\">hold</a> += (unsigned long)(<a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#in\">in</a>)) << <a class=\"id\" href=\"#bits\">bits</a>;", 
"                <a class=\"id\" href=\"#bits\">bits</a> += 8;", 
"            }", 
"            <a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#dcode\">dcode</a>[<a class=\"id\" href=\"#hold\">hold</a> &amp; <a class=\"id\" href=\"#dmask\">dmask</a>];", 
"          <a class=\"id\" href=\"#dodist\">dodist</a>:", 
"            <a class=\"id\" href=\"#op\">op</a> = (unsigned)(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a>);", 
"            <a class=\"id\" href=\"#hold\">hold</a> >>= <a class=\"id\" href=\"#op\">op</a>;", 
"            <a class=\"id\" href=\"#bits\">bits</a> -= <a class=\"id\" href=\"#op\">op</a>;", 
"            <a class=\"id\" href=\"#op\">op</a> = (unsigned)(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#op\">op</a>);", 
"            if (<a class=\"id\" href=\"#op\">op</a> &amp; 16) {                      <span class=\"comment\">/* distance base */</span>", 
"                <a class=\"id\" href=\"#dist\">dist</a> = (unsigned)(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#val\">val</a>);", 
"                <a class=\"id\" href=\"#op\">op</a> &= 15;                       <span class=\"comment\">/* number of extra bits */</span>", 
"                if (<a class=\"id\" href=\"#bits\">bits</a> &lt; <a class=\"id\" href=\"#op\">op</a>) {", 
"                    <a class=\"id\" href=\"#hold\">hold</a> += (unsigned long)(<a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#in\">in</a>)) << <a class=\"id\" href=\"#bits\">bits</a>;", 
"                    <a class=\"id\" href=\"#bits\">bits</a> += 8;", 
"                    if (<a class=\"id\" href=\"#bits\">bits</a> &lt; <a class=\"id\" href=\"#op\">op</a>) {", 
"                        <a class=\"id\" href=\"#hold\">hold</a> += (unsigned long)(<a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#in\">in</a>)) << <a class=\"id\" href=\"#bits\">bits</a>;", 
"                        <a class=\"id\" href=\"#bits\">bits</a> += 8;", 
"                    }", 
"                }", 
"                <a class=\"id\" href=\"#dist\">dist</a> += (unsigned)<a class=\"id\" href=\"#hold\">hold</a> &amp; ((1U << <a class=\"id\" href=\"#op\">op</a>) - 1);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#INFLATE_STRICT\">INFLATE_STRICT</a>", 
"                if (<a class=\"id\" href=\"#dist\">dist</a> &gt; <a class=\"id\" href=\"#dmax\">dmax</a>) {", 
"                    <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = (char *)\"invalid distance too far back\";", 
"                    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#BAD\">BAD</a>;", 
"                    break;", 
"                }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"                <a class=\"id\" href=\"#hold\">hold</a> >>= <a class=\"id\" href=\"#op\">op</a>;", 
"                <a class=\"id\" href=\"#bits\">bits</a> -= <a class=\"id\" href=\"#op\">op</a>;", 
"                <a class=\"id\" href=\"#op\">op</a> = (unsigned)(<a class=\"id\" href=\"#out\">out</a> - <a class=\"id\" href=\"#beg\">beg</a>);     <span class=\"comment\">/* max distance in output */</span>", 
"                if (<a class=\"id\" href=\"#dist\">dist</a> &gt; <a class=\"id\" href=\"#op\">op</a>) {                <span class=\"comment\">/* see if copy from window */</span>", 
"                    <a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#dist\">dist</a> - <a class=\"id\" href=\"#op\">op</a>;             <span class=\"comment\">/* distance back in window */</span>", 
"                    if (<a class=\"id\" href=\"#op\">op</a> &gt; <a class=\"id\" href=\"#whave\">whave</a>) {", 
"                        <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = (char *)\"invalid distance too far back\";", 
"                        <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#BAD\">BAD</a>;", 
"                        break;", 
"                    }", 
"                    <a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#window\">window</a> - <a class=\"id\" href=\"#OFF\">OFF</a>;", 
"                    if (<a class=\"id\" href=\"#write\">write</a> == 0) {           <span class=\"comment\">/* very common case */</span>", 
"                        <a class=\"id\" href=\"#from\">from</a> += <a class=\"id\" href=\"#wsize\">wsize</a> - <a class=\"id\" href=\"#op\">op</a>;", 
"                        if (<a class=\"id\" href=\"#op\">op</a> &lt; <a class=\"id\" href=\"#len\">len</a>) {         <span class=\"comment\">/* some from window */</span>", 
"                            <a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#op\">op</a>;", 
"                            do {", 
"                                <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#out\">out</a>) = <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"                            } while (--<a class=\"id\" href=\"#op\">op</a>);", 
"                            <a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#out\">out</a> - <a class=\"id\" href=\"#dist\">dist</a>;  <span class=\"comment\">/* rest from output */</span>", 
"                        }", 
"                    }", 
"                    else if (<a class=\"id\" href=\"#write\">write</a> &lt; <a class=\"id\" href=\"#op\">op</a>) {      <span class=\"comment\">/* wrap around window */</span>", 
"                        <a class=\"id\" href=\"#from\">from</a> += <a class=\"id\" href=\"#wsize\">wsize</a> + <a class=\"id\" href=\"#write\">write</a> - <a class=\"id\" href=\"#op\">op</a>;", 
"                        <a class=\"id\" href=\"#op\">op</a> -= <a class=\"id\" href=\"#write\">write</a>;", 
"                        if (<a class=\"id\" href=\"#op\">op</a> &lt; <a class=\"id\" href=\"#len\">len</a>) {         <span class=\"comment\">/* some from end of window */</span>", 
"                            <a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#op\">op</a>;", 
"                            do {", 
"                                <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#out\">out</a>) = <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"                            } while (--<a class=\"id\" href=\"#op\">op</a>);", 
"                            <a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#window\">window</a> - <a class=\"id\" href=\"#OFF\">OFF</a>;", 
"                            if (<a class=\"id\" href=\"#write\">write</a> &lt; <a class=\"id\" href=\"#len\">len</a>) {  <span class=\"comment\">/* some from start of window */</span>", 
"                                <a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#write\">write</a>;", 
"                                <a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#op\">op</a>;", 
"                                do {", 
"                                    <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#out\">out</a>) = <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"                                } while (--<a class=\"id\" href=\"#op\">op</a>);", 
"                                <a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#out\">out</a> - <a class=\"id\" href=\"#dist\">dist</a>;      <span class=\"comment\">/* rest from output */</span>", 
"                            }", 
"                        }", 
"                    }", 
"                    else {                      <span class=\"comment\">/* contiguous in window */</span>", 
"                        <a class=\"id\" href=\"#from\">from</a> += <a class=\"id\" href=\"#write\">write</a> - <a class=\"id\" href=\"#op\">op</a>;", 
"                        if (<a class=\"id\" href=\"#op\">op</a> &lt; <a class=\"id\" href=\"#len\">len</a>) {         <span class=\"comment\">/* some from window */</span>", 
"                            <a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#op\">op</a>;", 
"                            do {", 
"                                <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#out\">out</a>) = <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"                            } while (--<a class=\"id\" href=\"#op\">op</a>);", 
"                            <a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#out\">out</a> - <a class=\"id\" href=\"#dist\">dist</a>;  <span class=\"comment\">/* rest from output */</span>", 
"                        }", 
"                    }", 
"                    while (<a class=\"id\" href=\"#len\">len</a> &gt; 2) {", 
"                        <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#out\">out</a>) = <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"                        <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#out\">out</a>) = <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"                        <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#out\">out</a>) = <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"                        <a class=\"id\" href=\"#len\">len</a> -= 3;", 
"                    }", 
"                    if (<a class=\"id\" href=\"#len\">len</a>) {", 
"                        <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#out\">out</a>) = <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"                        if (<a class=\"id\" href=\"#len\">len</a> &gt; 1)", 
"                            <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#out\">out</a>) = <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"                    }", 
"                }", 
"                else {", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned short *<a class=\"id\" href=\"#sout\">sout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#loops\">loops</a>;", 
"", 
"                    <a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#out\">out</a> - <a class=\"id\" href=\"#dist\">dist</a>;          <span class=\"comment\">/* copy direct from output */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>    <span class=\"comment\">/* minimum length is three */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>    <span class=\"comment\">/* Align out addr */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>    if (!((long)(<a class=\"id\" href=\"#out\">out</a> - 1 + <a class=\"id\" href=\"#OFF\">OFF</a>) &amp; 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#out\">out</a>) = <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>    }", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sout\">sout</a> = (unsigned short *)(<a class=\"id\" href=\"#out\">out</a> - <a class=\"id\" href=\"#OFF\">OFF</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>    if (<a class=\"id\" href=\"#dist\">dist</a> &gt; 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned short *<a class=\"id\" href=\"#sfrom\">sfrom</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sfrom\">sfrom</a> = (unsigned short *)(<a class=\"id\" href=\"#from\">from</a> - <a class=\"id\" href=\"#OFF\">OFF</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loops\">loops</a> = <a class=\"id\" href=\"#len\">len</a> >> 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS\">CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#sout\">sout</a>) = <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#sfrom\">sfrom</a>);", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#sout\">sout</a>) = <a class=\"id\" href=\"#UP_UNALIGNED\">UP_UNALIGNED</a>(<a class=\"id\" href=\"#sfrom\">sfrom</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (--<a class=\"id\" href=\"#loops\">loops</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a> = (unsigned char *)<a class=\"id\" href=\"#sout\">sout</a> + <a class=\"id\" href=\"#OFF\">OFF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a> = (unsigned char *)<a class=\"id\" href=\"#sfrom\">sfrom</a> + <a class=\"id\" href=\"#OFF\">OFF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>    } else { <span class=\"comment\">/* dist == 1 or dist == 2 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#pat16\">pat16</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pat16\">pat16</a> = *(<a class=\"id\" href=\"#sout\">sout</a>-1+<a class=\"id\" href=\"#OFF\">OFF</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dist\">dist</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>union <a class=\"id\" href=\"#uu\">uu</a> <a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* copy one char pattern to both bytes */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#us\">us</a> = <a class=\"id\" href=\"#pat16\">pat16</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#b\">b</a>[0] = <a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#b\">b</a>[1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pat16\">pat16</a> = <a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#us\">us</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loops\">loops</a> = <a class=\"id\" href=\"#len\">len</a> >> 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#sout\">sout</a>) = <a class=\"id\" href=\"#pat16\">pat16</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (--<a class=\"id\" href=\"#loops\">loops</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a> = (unsigned char *)<a class=\"id\" href=\"#sout\">sout</a> + <a class=\"id\" href=\"#OFF\">OFF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>    }", 
"<span class=\"ts\"/><span class=\"ts\"/>    if (<a class=\"id\" href=\"#len\">len</a> &amp; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#out\">out</a>) = <a class=\"id\" href=\"#PUP\">PUP</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"                }", 
"            }", 
"            else if ((<a class=\"id\" href=\"#op\">op</a> &amp; 64) == 0) {          <span class=\"comment\">/* 2nd level distance code */</span>", 
"                <a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#dcode\">dcode</a>[<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#val\">val</a> + (<a class=\"id\" href=\"#hold\">hold</a> &amp; ((1U << <a class=\"id\" href=\"#op\">op</a>) - 1))];", 
"                goto <a class=\"id\" href=\"#dodist\">dodist</a>;", 
"            }", 
"            else {", 
"                <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = (char *)\"invalid distance code\";", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#BAD\">BAD</a>;", 
"                break;", 
"            }", 
"        }", 
"        else if ((<a class=\"id\" href=\"#op\">op</a> &amp; 64) == 0) {              <span class=\"comment\">/* 2nd level length code */</span>", 
"            <a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#lcode\">lcode</a>[<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#val\">val</a> + (<a class=\"id\" href=\"#hold\">hold</a> &amp; ((1U << <a class=\"id\" href=\"#op\">op</a>) - 1))];", 
"            goto <a class=\"id\" href=\"#dolen\">dolen</a>;", 
"        }", 
"        else if (<a class=\"id\" href=\"#op\">op</a> &amp; 32) {                     <span class=\"comment\">/* end-of-block */</span>", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#TYPE\">TYPE</a>;", 
"            break;", 
"        }", 
"        else {", 
"            <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = (char *)\"invalid literal/length code\";", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#BAD\">BAD</a>;", 
"            break;", 
"        }", 
"    } while (<a class=\"id\" href=\"#in\">in</a> &lt; <a class=\"id\" href=\"#last\">last</a> && <a class=\"id\" href=\"#out\">out</a> &lt; <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"    <span class=\"comment\">/* return unused bytes (on entry, bits &lt; 8, so in won't go too far back) */</span>", 
"    <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#bits\">bits</a> >> 3;", 
"    <a class=\"id\" href=\"#in\">in</a> -= <a class=\"id\" href=\"#len\">len</a>;", 
"    <a class=\"id\" href=\"#bits\">bits</a> -= <a class=\"id\" href=\"#len\">len</a> << 3;", 
"    <a class=\"id\" href=\"#hold\">hold</a> &= (1U << <a class=\"id\" href=\"#bits\">bits</a>) - 1;", 
"", 
"    <span class=\"comment\">/* update state and return */</span>", 
"    <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#next_in\">next_in</a> = <a class=\"id\" href=\"#in\">in</a> + <a class=\"id\" href=\"#OFF\">OFF</a>;", 
"    <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#next_out\">next_out</a> = <a class=\"id\" href=\"#out\">out</a> + <a class=\"id\" href=\"#OFF\">OFF</a>;", 
"    <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#avail_in\">avail_in</a> = (unsigned)(<a class=\"id\" href=\"#in\">in</a> &lt; <a class=\"id\" href=\"#last\">last</a> ? 5 + (<a class=\"id\" href=\"#last\">last</a> - <a class=\"id\" href=\"#in\">in</a>) : 5 - (<a class=\"id\" href=\"#in\">in</a> - <a class=\"id\" href=\"#last\">last</a>));", 
"    <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#avail_out\">avail_out</a> = (unsigned)(<a class=\"id\" href=\"#out\">out</a> &lt; <a class=\"id\" href=\"#end\">end</a> ?", 
"                                 257 + (<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#out\">out</a>) : 257 - (<a class=\"id\" href=\"#out\">out</a> - <a class=\"id\" href=\"#end\">end</a>));", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#hold\">hold</a> = <a class=\"id\" href=\"#hold\">hold</a>;", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bits\">bits</a> = <a class=\"id\" href=\"#bits\">bits</a>;", 
"    return;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">   inflate_fast() speedups that turned out slower (on a PowerPC G3 750CXe):</span>", 
"<span class=\"comment\">   - Using bit fields for code structure</span>", 
"<span class=\"comment\">   - Different op definition to avoid &amp; for extra bits (do &amp; for table bits)</span>", 
"<span class=\"comment\">   - Three separate decoding do-loops for direct, window, and write == 0</span>", 
"<span class=\"comment\">   - Special case for distance &gt; 1 copies to do overlapped load and store copy</span>", 
"<span class=\"comment\">   - Explicit branch predictions (based on measured branch probabilities)</span>", 
"<span class=\"comment\">   - Deferring match copy and interspersed it with decoding subsequent codes</span>", 
"<span class=\"comment\">   - Swapping literal/length else</span>", 
"<span class=\"comment\">   - Swapping window/direct else</span>", 
"<span class=\"comment\">   - Larger unrolled copy loops (three is about right)</span>", 
"<span class=\"comment\">   - Moving len -= 3 statement into middle of loop</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !ASMINF */</span>", 
];
xr_frag_insert('l/3d/9ebb45ec884560eb5bf343424aafac58ebd6ed.xr', __xr_tmp);
