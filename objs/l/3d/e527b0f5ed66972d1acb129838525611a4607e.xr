var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * INET<span class=\"ts\"/><span class=\"ts\"/>An implementation of the TCP/IP protocol suite for the LINUX</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>operating system.  INET is implemented using the  BSD Socket</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>interface as the means of communication with the user level.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>The IP fragmentation functionality.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors:<span class=\"ts\"/>Fred N. van Kempen &lt;waltje@uWalt.NL.Mugnet.ORG&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox &lt;alan@lxorguk.ukuu.org.uk&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Fixes:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Split from ip.c , see ip_input.c for history.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>David S. Miller :<span class=\"ts\"/>Begin massive cleanup...</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Andi Kleen<span class=\"ts\"/>:<span class=\"ts\"/>Add sysctls.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>xxxx<span class=\"ts\"/><span class=\"ts\"/>:<span class=\"ts\"/>Overlapfrag bug.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Ultima          :       ip_expire() kernel panic.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Bill Hawes<span class=\"ts\"/>:<span class=\"ts\"/>Frag accounting and evictor fixes.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>John McDonald<span class=\"ts\"/>:<span class=\"ts\"/>0 length frag bug.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alexey Kuznetsov:<span class=\"ts\"/>SMP races, threading, cleanup.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Patrick McHardy :<span class=\"ts\"/>LRU queue of frag heads for evictor.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#icmp\">icmp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jhash\">jhash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#random\">random</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#route\">route</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#sock\">sock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#icmp\">icmp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#checksum\">checksum</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#inetpeer\">inetpeer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#inet_frag\">inet_frag</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tcp\">tcp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#udp\">udp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#inet\">inet</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netfilter_ipv4\">netfilter_ipv4</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* NOTE. Logic of IP defragmentation is parallel to corresponding IPv6</span>", 
"<span class=\"comment\"> * code now. If you change something here, _PLEASE_ update ipv6/reassembly.c</span>", 
"<span class=\"comment\"> * as well. Or notify me, at least. --ANK</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#sysctl_ipfrag_max_dist\">sysctl_ipfrag_max_dist</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 64;", 
"", 
"struct <a class=\"id\" href=\"#ipfrag_skb_cb\">ipfrag_skb_cb</a>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_skb_parm\">inet_skb_parm</a><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FRAG_CB\">FRAG_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)<span class=\"ts\"/>((struct <a class=\"id\" href=\"#ipfrag_skb_cb\">ipfrag_skb_cb</a> *)((<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#cb\">cb</a>))", 
"", 
"<span class=\"comment\">/* Describe an entry in the \"incomplete datagrams\" queue. */</span>", 
"struct <a class=\"id\" href=\"#ipq\">ipq</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> <a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#user\">user</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#saddr\">saddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#daddr\">daddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#protocol\">protocol</a>;", 
"<span class=\"ts\"/>int             <a class=\"id\" href=\"#iif\">iif</a>;", 
"<span class=\"ts\"/>unsigned int    <a class=\"id\" href=\"#rid\">rid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> *<a class=\"id\" href=\"#peer\">peer</a>;", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#inet_frags\">inet_frags</a> <a class=\"id\" href=\"#ip4_frags\">ip4_frags</a>;", 
"", 
"int <a class=\"id\" href=\"#ip_frag_nqueues\">ip_frag_nqueues</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#nqueues\">nqueues</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#ip_frag_mem\">ip_frag_mem</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#mem\">mem</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ip_frag_reasm\">ip_frag_reasm</a>(struct <a class=\"id\" href=\"#ipq\">ipq</a> *<a class=\"id\" href=\"#qp\">qp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"struct <a class=\"id\" href=\"#ip4_create_arg\">ip4_create_arg</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#user\">user</a>;", 
"};", 
"", 
"static unsigned int <a class=\"id\" href=\"#ipqhashfn\">ipqhashfn</a>(<a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#prot\">prot</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#jhash_3words\">jhash_3words</a>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#id\">id</a> << 16 | <a class=\"id\" href=\"#prot\">prot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#saddr\">saddr</a>, (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#daddr\">daddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ip4_frags\">ip4_frags</a>.<a class=\"id\" href=\"#rnd\">rnd</a>) &amp; (<a class=\"id\" href=\"#INETFRAGS_HASHSZ\">INETFRAGS_HASHSZ</a> - 1);", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#ip4_hashfn\">ip4_hashfn</a>(struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipq\">ipq</a> *<a class=\"id\" href=\"#ipq\">ipq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipq\">ipq</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#ipq\">ipq</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ipqhashfn\">ipqhashfn</a>(<a class=\"id\" href=\"#ipq\">ipq</a>-><a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#ipq\">ipq</a>-><a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#ipq\">ipq</a>-><a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#ipq\">ipq</a>-><a class=\"id\" href=\"#protocol\">protocol</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ip4_frag_match\">ip4_frag_match</a>(struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> *<a class=\"id\" href=\"#q\">q</a>, void *<a class=\"id\" href=\"#a\">a</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipq\">ipq</a> *<a class=\"id\" href=\"#qp\">qp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip4_create_arg\">ip4_create_arg</a> *<a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#a\">a</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#ipq\">ipq</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#id\">id</a> == <a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#id\">id</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#saddr\">saddr</a> == <a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#saddr\">saddr</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#daddr\">daddr</a> == <a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#daddr\">daddr</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#protocol\">protocol</a> == <a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#protocol\">protocol</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#user\">user</a> == <a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#user\">user</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Memory Tracking Functions. */</span>", 
"static void <a class=\"id\" href=\"#frag_kfree_skb\">frag_kfree_skb</a>(struct <a class=\"id\" href=\"#netns_frags\">netns_frags</a> *<a class=\"id\" href=\"#nf\">nf</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_sub\">atomic_sub</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#truesize\">truesize</a>, &amp;<a class=\"id\" href=\"#nf\">nf</a>-><a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ip4_frag_init\">ip4_frag_init</a>(struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> *<a class=\"id\" href=\"#q\">q</a>, void *<a class=\"id\" href=\"#a\">a</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipq\">ipq</a> *<a class=\"id\" href=\"#qp\">qp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#ipq\">ipq</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip4_create_arg\">ip4_create_arg</a> *<a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#a\">a</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#protocol\">protocol</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#saddr\">saddr</a> = <a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#saddr\">saddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#daddr\">daddr</a> = <a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#daddr\">daddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#user\">user</a> = <a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#user\">user</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#peer\">peer</a> = <a class=\"id\" href=\"#sysctl_ipfrag_max_dist\">sysctl_ipfrag_max_dist</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_getpeer\">inet_getpeer</a>(<a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#saddr\">saddr</a>, 1) : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__inline__\">__inline__</a> void <a class=\"id\" href=\"#ip4_frag_free\">ip4_frag_free</a>(struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipq\">ipq</a> *<a class=\"id\" href=\"#qp\">qp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#ipq\">ipq</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#peer\">peer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_putpeer\">inet_putpeer</a>(<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#peer\">peer</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/* Destruction primitives. */</span>", 
"", 
"static <a class=\"id\" href=\"#__inline__\">__inline__</a> void <a class=\"id\" href=\"#ipq_put\">ipq_put</a>(struct <a class=\"id\" href=\"#ipq\">ipq</a> *<a class=\"id\" href=\"#ipq\">ipq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet_frag_put\">inet_frag_put</a>(&amp;<a class=\"id\" href=\"#ipq\">ipq</a>-><a class=\"id\" href=\"#q\">q</a>, &amp;<a class=\"id\" href=\"#ip4_frags\">ip4_frags</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Kill ipq entry. It is not destroyed immediately,</span>", 
"<span class=\"comment\"> * because caller (and someone more) holds reference count.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ipq_kill\">ipq_kill</a>(struct <a class=\"id\" href=\"#ipq\">ipq</a> *<a class=\"id\" href=\"#ipq\">ipq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet_frag_kill\">inet_frag_kill</a>(&amp;<a class=\"id\" href=\"#ipq\">ipq</a>-><a class=\"id\" href=\"#q\">q</a>, &amp;<a class=\"id\" href=\"#ip4_frags\">ip4_frags</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Memory limiting on fragments.  Evictor trashes the oldest</span>", 
"<span class=\"comment\"> * fragment queue until we are back under the threshold.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ip_evictor\">ip_evictor</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#evicted\">evicted</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#evicted\">evicted</a> = <a class=\"id\" href=\"#inet_frag_evictor\">inet_frag_evictor</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags\">frags</a>, &amp;<a class=\"id\" href=\"#ip4_frags\">ip4_frags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#evicted\">evicted</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#IP_ADD_STATS_BH\">IP_ADD_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#IPSTATS_MIB_REASMFAILS\">IPSTATS_MIB_REASMFAILS</a>, <a class=\"id\" href=\"#evicted\">evicted</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Oops, a fragment queue timed out.  Kill it and send an ICMP reply.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ip_expire\">ip_expire</a>(unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipq\">ipq</a> *<a class=\"id\" href=\"#qp\">qp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>((struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> *) <a class=\"id\" href=\"#arg\">arg</a>, struct <a class=\"id\" href=\"#ipq\">ipq</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags\">frags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#last_in\">last_in</a> &amp; <a class=\"id\" href=\"#INET_FRAG_COMPLETE\">INET_FRAG_COMPLETE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipq_kill\">ipq_kill</a>(<a class=\"id\" href=\"#qp\">qp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_INC_STATS_BH\">IP_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#IPSTATS_MIB_REASMTIMEOUT\">IPSTATS_MIB_REASMTIMEOUT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_INC_STATS_BH\">IP_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#IPSTATS_MIB_REASMFAILS\">IPSTATS_MIB_REASMFAILS</a>);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#last_in\">last_in</a> &amp; <a class=\"id\" href=\"#INET_FRAG_FIRST_IN\">INET_FRAG_FIRST_IN</a>) && <a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev_get_by_index_rcu\">dev_get_by_index_rcu</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#iif\">iif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_rcu_unlock\">out_rcu_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Only search router table for the head fragment,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * when defraging timeout at PRE_ROUTING HOOK.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#user\">user</a> == <a class=\"id\" href=\"#IP_DEFRAG_CONNTRACK_IN\">IP_DEFRAG_CONNTRACK_IN</a> && !<a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#head\">head</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a> = <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ip_route_input\">ip_route_input</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#saddr\">saddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#tos\">tos</a>, <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#err\">err</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_rcu_unlock\">out_rcu_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Only an end host needs to send an ICMP</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * \"Fragment Reassembly Timeout\" message, per RFC792.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_rtable\">skb_rtable</a>(<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#rt_type\">rt_type</a> != <a class=\"id\" href=\"#RTN_LOCAL\">RTN_LOCAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_rcu_unlock\">out_rcu_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Send an ICMP \"Fragment Reassembly Timeout\" message. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icmp_send\">icmp_send</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#ICMP_TIME_EXCEEDED\">ICMP_TIME_EXCEEDED</a>, <a class=\"id\" href=\"#ICMP_EXC_FRAGTIME\">ICMP_EXC_FRAGTIME</a>, 0);", 
"<a class=\"id\" href=\"#out_rcu_unlock\">out_rcu_unlock</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipq_put\">ipq_put</a>(<a class=\"id\" href=\"#qp\">qp</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Find the correct entry in the \"incomplete datagrams\" queue for</span>", 
"<span class=\"comment\"> * this IP datagram, and create new one, if nothing is found.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#ipq\">ipq</a> *<a class=\"id\" href=\"#ip_find\">ip_find</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#user\">user</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip4_create_arg\">ip4_create_arg</a> <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hash\">hash</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#iph\">iph</a> = <a class=\"id\" href=\"#iph\">iph</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#user\">user</a> = <a class=\"id\" href=\"#user\">user</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#ip4_frags\">ip4_frags</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#ipqhashfn\">ipqhashfn</a>(<a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#protocol\">protocol</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#inet_frag_find\">inet_frag_find</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags\">frags</a>, &amp;<a class=\"id\" href=\"#ip4_frags\">ip4_frags</a>, &amp;<a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_nomem\">out_nomem</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#ipq\">ipq</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"", 
"<a class=\"id\" href=\"#out_nomem\">out_nomem</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIMIT_NETDEBUG\">LIMIT_NETDEBUG</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ip_frag_create: no memory left !\\n\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Is the fragment too far ahead to be part of ipq? */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ip_frag_too_far\">ip_frag_too_far</a>(struct <a class=\"id\" href=\"#ipq\">ipq</a> *<a class=\"id\" href=\"#qp\">qp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> *<a class=\"id\" href=\"#peer\">peer</a> = <a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#peer\">peer</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#sysctl_ipfrag_max_dist\">sysctl_ipfrag_max_dist</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#peer\">peer</a> || !<a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#rid\">rid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#peer\">peer</a>-><a class=\"id\" href=\"#rid\">rid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#rid\">rid</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a> && (<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>) &gt; <a class=\"id\" href=\"#max\">max</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags\">frags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#IP_INC_STATS_BH\">IP_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#IPSTATS_MIB_REASMFAILS\">IPSTATS_MIB_REASMFAILS</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ip_frag_reinit\">ip_frag_reinit</a>(struct <a class=\"id\" href=\"#ipq\">ipq</a> *<a class=\"id\" href=\"#qp\">qp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#fp\">fp</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#timeout\">timeout</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ETIMEDOUT\">ETIMEDOUT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fp\">fp</a> = <a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#xp\">xp</a> = <a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frag_kfree_skb\">frag_kfree_skb</a>(<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#fp\">fp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fp\">fp</a> = <a class=\"id\" href=\"#xp\">xp</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#fp\">fp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#last_in\">last_in</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#len\">len</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#meat\">meat</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments_tail\">fragments_tail</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#iif\">iif</a> = 0;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Add new segment to existing queue. */</span>", 
"static int <a class=\"id\" href=\"#ip_frag_queue\">ip_frag_queue</a>(struct <a class=\"id\" href=\"#ipq\">ipq</a> *<a class=\"id\" href=\"#qp\">qp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#prev\">prev</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ihl\">ihl</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#last_in\">last_in</a> &amp; <a class=\"id\" href=\"#INET_FRAG_COMPLETE\">INET_FRAG_COMPLETE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#IPCB\">IPCB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IPSKB_FRAG_COMPLETE\">IPSKB_FRAG_COMPLETE</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ip_frag_too_far\">ip_frag_too_far</a>(<a class=\"id\" href=\"#qp\">qp</a>)) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ip_frag_reinit\">ip_frag_reinit</a>(<a class=\"id\" href=\"#qp\">qp</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipq_kill\">ipq_kill</a>(<a class=\"id\" href=\"#qp\">qp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag_off\">frag_off</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#offset\">offset</a> &amp; ~<a class=\"id\" href=\"#IP_OFFSET\">IP_OFFSET</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> &= <a class=\"id\" href=\"#IP_OFFSET\">IP_OFFSET</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> <<= 3;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* offset is in 8-byte chunks */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ihl\">ihl</a> = <a class=\"id\" href=\"#ip_hdrlen\">ip_hdrlen</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Determine the position of this fragment. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#ihl\">ihl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Is this the final fragment? */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IP_MF\">IP_MF</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we already have some bits beyond end</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * or have different end, the segment is corrrupted.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#len\">len</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#last_in\">last_in</a> &amp; <a class=\"id\" href=\"#INET_FRAG_LAST_IN\">INET_FRAG_LAST_IN</a>) && <a class=\"id\" href=\"#end\">end</a> != <a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#last_in\">last_in</a> |= <a class=\"id\" href=\"#INET_FRAG_LAST_IN\">INET_FRAG_LAST_IN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a>&amp;7) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> &= ~7;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> != <a class=\"id\" href=\"#CHECKSUM_UNNECESSARY\">CHECKSUM_UNNECESSARY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_NONE\">CHECKSUM_NONE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Some bits beyond end -&gt; corruption. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#last_in\">last_in</a> &amp; <a class=\"id\" href=\"#INET_FRAG_LAST_IN\">INET_FRAG_LAST_IN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> == <a class=\"id\" href=\"#offset\">offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pskb_pull\">pskb_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#ihl\">ihl</a>) == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#pskb_trim_rcsum\">pskb_trim_rcsum</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find out which fragments are in front and at the back of us</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the chain of fragments so far.  We must know where to put</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this fragment, right?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments_tail\">fragments_tail</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#prev\">prev</a> || <a class=\"id\" href=\"#FRAG_CB\">FRAG_CB</a>(<a class=\"id\" href=\"#prev\">prev</a>)-><a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a>; <a class=\"id\" href=\"#next\">next</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#FRAG_CB\">FRAG_CB</a>(<a class=\"id\" href=\"#next\">next</a>)-><a class=\"id\" href=\"#offset\">offset</a> >= <a class=\"id\" href=\"#offset\">offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"comment\">/* bingo! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* We found where to put this one.  Check for overlap with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * preceding fragment, and, if needed, align things so that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any overlaps are eliminated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#FRAG_CB\">FRAG_CB</a>(<a class=\"id\" href=\"#prev\">prev</a>)-><a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#len\">len</a>) - <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> <= <a class=\"id\" href=\"#offset\">offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_pull\">pskb_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> != <a class=\"id\" href=\"#CHECKSUM_UNNECESSARY\">CHECKSUM_UNNECESSARY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_NONE\">CHECKSUM_NONE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#next\">next</a> && <a class=\"id\" href=\"#FRAG_CB\">FRAG_CB</a>(<a class=\"id\" href=\"#next\">next</a>)-><a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#FRAG_CB\">FRAG_CB</a>(<a class=\"id\" href=\"#next\">next</a>)-><a class=\"id\" href=\"#offset\">offset</a>; <span class=\"comment\">/* overlap is 'i' bytes */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Eat head of the next overlapped fragment</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and leave the loop. The next ones cannot overlap.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_pull\">pskb_pull</a>(<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FRAG_CB\">FRAG_CB</a>(<a class=\"id\" href=\"#next\">next</a>)-><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#meat\">meat</a> -= <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> != <a class=\"id\" href=\"#CHECKSUM_UNNECESSARY\">CHECKSUM_UNNECESSARY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_NONE\">CHECKSUM_NONE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#free_it\">free_it</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Old fragment is completely overridden with</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * new one drop it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#meat\">meat</a> -= <a class=\"id\" href=\"#free_it\">free_it</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frag_kfree_skb\">frag_kfree_skb</a>(<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#free_it\">free_it</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FRAG_CB\">FRAG_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Insert this fragment in the chain of fragments. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments_tail\">fragments_tail</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#iif\">iif</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#stamp\">stamp</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tstamp\">tstamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#meat\">meat</a> += <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#truesize\">truesize</a>, &amp;<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#last_in\">last_in</a> |= <a class=\"id\" href=\"#INET_FRAG_FIRST_IN\">INET_FRAG_FIRST_IN</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#last_in\">last_in</a> == (<a class=\"id\" href=\"#INET_FRAG_FIRST_IN\">INET_FRAG_FIRST_IN</a> | <a class=\"id\" href=\"#INET_FRAG_LAST_IN\">INET_FRAG_LAST_IN</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#meat\">meat</a> == <a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ip_frag_reasm\">ip_frag_reasm</a>(<a class=\"id\" href=\"#qp\">qp</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#ip4_frags\">ip4_frags</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#lru_list\">lru_list</a>, &amp;<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#lru_list\">lru_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#ip4_frags\">ip4_frags</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINPROGRESS\">EINPROGRESS</a>;", 
"", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/* Build a new IP datagram from all its fragments. */</span>", 
"", 
"static int <a class=\"id\" href=\"#ip_frag_reasm\">ip_frag_reasm</a>(struct <a class=\"id\" href=\"#ipq\">ipq</a> *<a class=\"id\" href=\"#qp\">qp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags\">frags</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#fp\">fp</a>, *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ihlen\">ihlen</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipq_kill\">ipq_kill</a>(<a class=\"id\" href=\"#qp\">qp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make the one we just received the head. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fp\">fp</a> = <a class=\"id\" href=\"#skb_clone\">skb_clone</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#fp\">fp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_nomem\">out_nomem</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments_tail\">fragments_tail</a> = <a class=\"id\" href=\"#fp\">fp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#fp\">fp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_morph\">skb_morph</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#head\">head</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#FRAG_CB\">FRAG_CB</a>(<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#offset\">offset</a> != 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate a new buffer for the datagram. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ihlen\">ihlen</a> = <a class=\"id\" href=\"#ip_hdrlen\">ip_hdrlen</a>(<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#ihlen\">ihlen</a> + <a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#E2BIG\">E2BIG</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; 65535)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_oversize\">out_oversize</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Head of list must not be cloned. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_cloned\">skb_cloned</a>(<a class=\"id\" href=\"#head\">head</a>) && <a class=\"id\" href=\"#pskb_expand_head\">pskb_expand_head</a>(<a class=\"id\" href=\"#head\">head</a>, 0, 0, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_nomem\">out_nomem</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the first fragment is fragmented itself, we split</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it to two chunks: the first with data and paged part</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and the second, holding only fragments. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_has_frags\">skb_has_frags</a>(<a class=\"id\" href=\"#head\">head</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#clone\">clone</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#plen\">plen</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#clone\">clone</a> = <a class=\"id\" href=\"#alloc_skb\">alloc_skb</a>(0, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>)) == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_nomem\">out_nomem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#clone\">clone</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#clone\">clone</a>)-><a class=\"id\" href=\"#frag_list\">frag_list</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#frag_list\">frag_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_frag_list_init\">skb_frag_list_init</a>(<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>=0; <a class=\"id\" href=\"#i\">i</a>&lt;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plen\">plen</a> += <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#data_len\">data_len</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#data_len\">data_len</a> - <a class=\"id\" href=\"#plen\">plen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#data_len\">data_len</a> -= <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#csum\">csum</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#truesize\">truesize</a>, &amp;<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#frag_list\">frag_list</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_push\">skb_push</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#data\">data</a> - <a class=\"id\" href=\"#skb_network_header\">skb_network_header</a>(<a class=\"id\" href=\"#head\">head</a>));", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#fp\">fp</a>=<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>; <a class=\"id\" href=\"#fp\">fp</a>; <a class=\"id\" href=\"#fp\">fp</a> = <a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#data_len\">data_len</a> += <a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> != <a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_NONE\">CHECKSUM_NONE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> == <a class=\"id\" href=\"#CHECKSUM_COMPLETE\">CHECKSUM_COMPLETE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_add\">csum_add</a>(<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#csum\">csum</a>, <a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#csum\">csum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#truesize\">truesize</a> += <a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#truesize\">truesize</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_sub\">atomic_sub</a>(<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#truesize\">truesize</a>, &amp;<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#mem\">mem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#tstamp\">tstamp</a> = <a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#stamp\">stamp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iph\">iph</a> = <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#frag_off\">frag_off</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#tot_len\">tot_len</a> = <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_INC_STATS_BH\">IP_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#IPSTATS_MIB_REASMOKS\">IPSTATS_MIB_REASMOKS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments\">fragments</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#fragments_tail\">fragments_tail</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_nomem\">out_nomem</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIMIT_NETDEBUG\">LIMIT_NETDEBUG</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"IP: queue_glue: no memory for gluing \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"queue %p\\n\", <a class=\"id\" href=\"#qp\">qp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out_fail\">out_fail</a>;", 
"<a class=\"id\" href=\"#out_oversize\">out_oversize</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Oversized IP packet from %pI4.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#saddr\">saddr</a>);", 
"<a class=\"id\" href=\"#out_fail\">out_fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_INC_STATS_BH\">IP_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#IPSTATS_MIB_REASMFAILS\">IPSTATS_MIB_REASMFAILS</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Process an incoming IP datagram fragment. */</span>", 
"int <a class=\"id\" href=\"#ip_defrag\">ip_defrag</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#user\">user</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipq\">ipq</a> *<a class=\"id\" href=\"#qp\">qp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a> ? <a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>) : <a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_INC_STATS_BH\">IP_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#IPSTATS_MIB_REASMREQDS\">IPSTATS_MIB_REASMREQDS</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Start by cleaning up the memory. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#mem\">mem</a>) &gt; <a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#high_thresh\">high_thresh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip_evictor\">ip_evictor</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Lookup (or create) queue header */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#qp\">qp</a> = <a class=\"id\" href=\"#ip_find\">ip_find</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>), <a class=\"id\" href=\"#user\">user</a>)) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ip_frag_queue\">ip_frag_queue</a>(<a class=\"id\" href=\"#qp\">qp</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipq_put\">ipq_put</a>(<a class=\"id\" href=\"#qp\">qp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_INC_STATS_BH\">IP_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#IPSTATS_MIB_REASMFAILS\">IPSTATS_MIB_REASMFAILS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ip_defrag\">ip_defrag</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSCTL\">CONFIG_SYSCTL</a>", 
"static int <a class=\"id\" href=\"#zero\">zero</a>;", 
"", 
"static struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> <a class=\"id\" href=\"#ip4_frags_ns_ctl_table\">ip4_frags_ns_ctl_table</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"ipfrag_high_thresh\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#init_net\">init_net</a>.<a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#high_thresh\">high_thresh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"ipfrag_low_thresh\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#init_net\">init_net</a>.<a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#low_thresh\">low_thresh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"ipfrag_time\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#init_net\">init_net</a>.<a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#timeout\">timeout</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec_jiffies\">proc_dointvec_jiffies</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{ }", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> <a class=\"id\" href=\"#ip4_frags_ctl_table\">ip4_frags_ctl_table</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"ipfrag_secret_interval\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#ip4_frags\">ip4_frags</a>.<a class=\"id\" href=\"#secret_interval\">secret_interval</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec_jiffies\">proc_dointvec_jiffies</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"ipfrag_max_dist\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#sysctl_ipfrag_max_dist\">sysctl_ipfrag_max_dist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra1\">extra1</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#zero\">zero</a>", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{ }", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__net_init\">__net_init</a> <a class=\"id\" href=\"#ip4_frags_ns_ctl_register\">ip4_frags_ns_ctl_register</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#hdr\">hdr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#ip4_frags_ns_ctl_table\">ip4_frags_ns_ctl_table</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#net_eq\">net_eq</a>(<a class=\"id\" href=\"#net\">net</a>, &amp;<a class=\"id\" href=\"#init_net\">init_net</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#kmemdup\">kmemdup</a>(<a class=\"id\" href=\"#table\">table</a>, sizeof(<a class=\"id\" href=\"#ip4_frags_ns_ctl_table\">ip4_frags_ns_ctl_table</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#table\">table</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_alloc\">err_alloc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>[0].<a class=\"id\" href=\"#data\">data</a> = &amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#high_thresh\">high_thresh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>[1].<a class=\"id\" href=\"#data\">data</a> = &amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#low_thresh\">low_thresh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>[2].<a class=\"id\" href=\"#data\">data</a> = &amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hdr\">hdr</a> = <a class=\"id\" href=\"#register_net_sysctl_table\">register_net_sysctl_table</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#net_ipv4_ctl_path\">net_ipv4_ctl_path</a>, <a class=\"id\" href=\"#table\">table</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hdr\">hdr</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_reg\">err_reg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags_hdr\">frags_hdr</a> = <a class=\"id\" href=\"#hdr\">hdr</a>;", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#err_reg\">err_reg</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#net_eq\">net_eq</a>(<a class=\"id\" href=\"#net\">net</a>, &amp;<a class=\"id\" href=\"#init_net\">init_net</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#table\">table</a>);", 
"<a class=\"id\" href=\"#err_alloc\">err_alloc</a>:", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__net_exit\">__net_exit</a> <a class=\"id\" href=\"#ip4_frags_ns_ctl_unregister\">ip4_frags_ns_ctl_unregister</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags_hdr\">frags_hdr</a>-><a class=\"id\" href=\"#ctl_table_arg\">ctl_table_arg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_net_sysctl_table\">unregister_net_sysctl_table</a>(<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags_hdr\">frags_hdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#table\">table</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ip4_frags_ctl_register\">ip4_frags_ctl_register</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_net_sysctl_rotable\">register_net_sysctl_rotable</a>(<a class=\"id\" href=\"#net_ipv4_ctl_path\">net_ipv4_ctl_path</a>, <a class=\"id\" href=\"#ip4_frags_ctl_table\">ip4_frags_ctl_table</a>);", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ip4_frags_ns_ctl_register\">ip4_frags_ns_ctl_register</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ip4_frags_ns_ctl_unregister\">ip4_frags_ns_ctl_unregister</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ip4_frags_ctl_register\">ip4_frags_ctl_register</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#__net_init\">__net_init</a> <a class=\"id\" href=\"#ipv4_frags_init_net\">ipv4_frags_init_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fragment cache limits. We will commit 256K at one time. Should we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cross that limit we will prune down to 192K. This should cope with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * even the most extreme cases without allowing an attacker to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * measurably harm machine performance.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#high_thresh\">high_thresh</a> = 256 * 1024;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#low_thresh\">low_thresh</a> = 192 * 1024;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Important NOTE! Fragment queue must be destroyed before MSL expires.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * RFC791 is wrong proposing to prolongate timer each fragment arrival</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by TTL.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags\">frags</a>.<a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#IP_FRAG_TIME\">IP_FRAG_TIME</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet_frags_init_net\">inet_frags_init_net</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags\">frags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ip4_frags_ns_ctl_register\">ip4_frags_ns_ctl_register</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__net_exit\">__net_exit</a> <a class=\"id\" href=\"#ipv4_frags_exit_net\">ipv4_frags_exit_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip4_frags_ns_ctl_unregister\">ip4_frags_ns_ctl_unregister</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet_frags_exit_net\">inet_frags_exit_net</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#frags\">frags</a>, &amp;<a class=\"id\" href=\"#ip4_frags\">ip4_frags</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> <a class=\"id\" href=\"#ip4_frags_ops\">ip4_frags_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#init\">init</a> = <a class=\"id\" href=\"#ipv4_frags_init_net\">ipv4_frags_init_net</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#exit\">exit</a> = <a class=\"id\" href=\"#ipv4_frags_exit_net\">ipv4_frags_exit_net</a>,", 
"};", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ipfrag_init\">ipfrag_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip4_frags_ctl_register\">ip4_frags_ctl_register</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_pernet_subsys\">register_pernet_subsys</a>(&amp;<a class=\"id\" href=\"#ip4_frags_ops\">ip4_frags_ops</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip4_frags\">ip4_frags</a>.<a class=\"id\" href=\"#hashfn\">hashfn</a> = <a class=\"id\" href=\"#ip4_hashfn\">ip4_hashfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip4_frags\">ip4_frags</a>.<a class=\"id\" href=\"#constructor\">constructor</a> = <a class=\"id\" href=\"#ip4_frag_init\">ip4_frag_init</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip4_frags\">ip4_frags</a>.<a class=\"id\" href=\"#destructor\">destructor</a> = <a class=\"id\" href=\"#ip4_frag_free\">ip4_frag_free</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip4_frags\">ip4_frags</a>.<a class=\"id\" href=\"#skb_free\">skb_free</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip4_frags\">ip4_frags</a>.<a class=\"id\" href=\"#qsize\">qsize</a> = sizeof(struct <a class=\"id\" href=\"#ipq\">ipq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip4_frags\">ip4_frags</a>.<a class=\"id\" href=\"#match\">match</a> = <a class=\"id\" href=\"#ip4_frag_match\">ip4_frag_match</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip4_frags\">ip4_frags</a>.<a class=\"id\" href=\"#frag_expire\">frag_expire</a> = <a class=\"id\" href=\"#ip_expire\">ip_expire</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip4_frags\">ip4_frags</a>.<a class=\"id\" href=\"#secret_interval\">secret_interval</a> = 10 * 60 * <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet_frags_init\">inet_frags_init</a>(&amp;<a class=\"id\" href=\"#ip4_frags\">ip4_frags</a>);", 
"}", 
];
xr_frag_insert('l/3d/e527b0f5ed66972d1acb129838525611a4607e.xr', __xr_tmp);
