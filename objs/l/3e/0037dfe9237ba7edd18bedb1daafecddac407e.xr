var __xr_tmp = [
"", 
"static void <a class=\"id\" href=\"#find_module_sections\">find_module_sections</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#kp\">kp</a> = <a class=\"id\" href=\"#section_objs\">section_objs</a>(<a class=\"id\" href=\"#info\">info</a>, \"__param\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       sizeof(*<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#kp\">kp</a>), &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_kp\">num_kp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#syms\">syms</a> = <a class=\"id\" href=\"#section_objs\">section_objs</a>(<a class=\"id\" href=\"#info\">info</a>, \"__ksymtab\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(*<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#syms\">syms</a>), &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_syms\">num_syms</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#crcs\">crcs</a> = <a class=\"id\" href=\"#section_addr\">section_addr</a>(<a class=\"id\" href=\"#info\">info</a>, \"__kcrctab\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#gpl_syms\">gpl_syms</a> = <a class=\"id\" href=\"#section_objs\">section_objs</a>(<a class=\"id\" href=\"#info\">info</a>, \"__ksymtab_gpl\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     sizeof(*<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#gpl_syms\">gpl_syms</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_gpl_syms\">num_gpl_syms</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#gpl_crcs\">gpl_crcs</a> = <a class=\"id\" href=\"#section_addr\">section_addr</a>(<a class=\"id\" href=\"#info\">info</a>, \"__kcrctab_gpl\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#gpl_future_syms\">gpl_future_syms</a> = <a class=\"id\" href=\"#section_objs\">section_objs</a>(<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"__ksymtab_gpl_future\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    sizeof(*<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#gpl_future_syms\">gpl_future_syms</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_gpl_future_syms\">num_gpl_future_syms</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#gpl_future_crcs\">gpl_future_crcs</a> = <a class=\"id\" href=\"#section_addr\">section_addr</a>(<a class=\"id\" href=\"#info\">info</a>, \"__kcrctab_gpl_future\");", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_UNUSED_SYMBOLS\">CONFIG_UNUSED_SYMBOLS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#unused_syms\">unused_syms</a> = <a class=\"id\" href=\"#section_objs\">section_objs</a>(<a class=\"id\" href=\"#info\">info</a>, \"__ksymtab_unused\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(*<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#unused_syms\">unused_syms</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_unused_syms\">num_unused_syms</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#unused_crcs\">unused_crcs</a> = <a class=\"id\" href=\"#section_addr\">section_addr</a>(<a class=\"id\" href=\"#info\">info</a>, \"__kcrctab_unused\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#unused_gpl_syms\">unused_gpl_syms</a> = <a class=\"id\" href=\"#section_objs\">section_objs</a>(<a class=\"id\" href=\"#info\">info</a>, \"__ksymtab_unused_gpl\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    sizeof(*<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#unused_gpl_syms\">unused_gpl_syms</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_unused_gpl_syms\">num_unused_gpl_syms</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#unused_gpl_crcs\">unused_gpl_crcs</a> = <a class=\"id\" href=\"#section_addr\">section_addr</a>(<a class=\"id\" href=\"#info\">info</a>, \"__kcrctab_unused_gpl\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CONSTRUCTORS\">CONFIG_CONSTRUCTORS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#ctors\">ctors</a> = <a class=\"id\" href=\"#section_objs\">section_objs</a>(<a class=\"id\" href=\"#info\">info</a>, \".ctors\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  sizeof(*<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#ctors\">ctors</a>), &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_ctors\">num_ctors</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACEPOINTS\">CONFIG_TRACEPOINTS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#tracepoints\">tracepoints</a> = <a class=\"id\" href=\"#section_objs\">section_objs</a>(<a class=\"id\" href=\"#info\">info</a>, \"__tracepoints\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(*<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#tracepoints\">tracepoints</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_tracepoints\">num_tracepoints</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_EVENT_TRACING\">CONFIG_EVENT_TRACING</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#trace_events\">trace_events</a> = <a class=\"id\" href=\"#section_objs\">section_objs</a>(<a class=\"id\" href=\"#info\">info</a>, \"_ftrace_events\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(*<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#trace_events\">trace_events</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_trace_events\">num_trace_events</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This section contains pointers to allocated objects in the trace</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * code and not scanning it leads to false positives.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_scan_area\">kmemleak_scan_area</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#trace_events\">trace_events</a>, sizeof(*<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#trace_events\">trace_events</a>) *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_trace_events\">num_trace_events</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FTRACE_MCOUNT_RECORD\">CONFIG_FTRACE_MCOUNT_RECORD</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* sechdrs[0].sh_size is always zero */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#ftrace_callsites\">ftrace_callsites</a> = <a class=\"id\" href=\"#section_objs\">section_objs</a>(<a class=\"id\" href=\"#info\">info</a>, \"__mcount_loc\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     sizeof(*<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#ftrace_callsites\">ftrace_callsites</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_ftrace_callsites\">num_ftrace_callsites</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#extable\">extable</a> = <a class=\"id\" href=\"#section_objs\">section_objs</a>(<a class=\"id\" href=\"#info\">info</a>, \"__ex_table\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    sizeof(*<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#extable\">extable</a>), &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_exentries\">num_exentries</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#section_addr\">section_addr</a>(<a class=\"id\" href=\"#info\">info</a>, \"__obsparm\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: Ignoring obsolete parameters\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#debug\">debug</a> = <a class=\"id\" href=\"#section_objs\">section_objs</a>(<a class=\"id\" href=\"#info\">info</a>, \"__verbose\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   sizeof(*<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#debug\">debug</a>), &amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#num_debug\">num_debug</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#move_module\">move_module</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do the allocs. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#module_alloc_update_bounds\">module_alloc_update_bounds</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_size\">core_size</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The pointer to this block is stored in the module structure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which is inside the block. Just mark it as not being a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * leak.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_not_leak\">kmemleak_not_leak</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, 0, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_size\">core_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_core\">module_core</a> = <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#module_alloc_update_bounds\">module_alloc_update_bounds</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#init_size\">init_size</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The pointer to this block is stored in the module structure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which is inside the block. This block doesn't need to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * scanned as it contains data and code that will be freed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * after the module is initialized.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_ignore\">kmemleak_ignore</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ptr\">ptr</a> && <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#init_size\">init_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_free\">module_free</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_core\">module_core</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, 0, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#init_size\">init_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_init\">module_init</a> = <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Transfer each section which specifies SHF_ALLOC */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"final section addresses:\\n\");", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#e_shnum\">e_shnum</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#dest\">dest</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#shdr\">shdr</a> = &amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#shdr\">shdr</a>-><a class=\"id\" href=\"#sh_flags\">sh_flags</a> &amp; <a class=\"id\" href=\"#SHF_ALLOC\">SHF_ALLOC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#shdr\">shdr</a>-><a class=\"id\" href=\"#sh_entsize\">sh_entsize</a> &amp; <a class=\"id\" href=\"#INIT_OFFSET_MASK\">INIT_OFFSET_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a> = <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_init\">module_init</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ (<a class=\"id\" href=\"#shdr\">shdr</a>-><a class=\"id\" href=\"#sh_entsize\">sh_entsize</a> &amp; ~<a class=\"id\" href=\"#INIT_OFFSET_MASK\">INIT_OFFSET_MASK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a> = <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_core\">module_core</a> + <a class=\"id\" href=\"#shdr\">shdr</a>-><a class=\"id\" href=\"#sh_entsize\">sh_entsize</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#shdr\">shdr</a>-><a class=\"id\" href=\"#sh_type\">sh_type</a> != <a class=\"id\" href=\"#SHT_NOBITS\">SHT_NOBITS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dest\">dest</a>, (void *)<a class=\"id\" href=\"#shdr\">shdr</a>-><a class=\"id\" href=\"#sh_addr\">sh_addr</a>, <a class=\"id\" href=\"#shdr\">shdr</a>-><a class=\"id\" href=\"#sh_size\">sh_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Update sh_addr to point to copy in image. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shdr\">shdr</a>-><a class=\"id\" href=\"#sh_addr\">sh_addr</a> = (unsigned long)<a class=\"id\" href=\"#dest\">dest</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"\\t0x%lx %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#shdr\">shdr</a>-><a class=\"id\" href=\"#sh_addr\">sh_addr</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#secstrings\">secstrings</a> + <a class=\"id\" href=\"#shdr\">shdr</a>-><a class=\"id\" href=\"#sh_name\">sh_name</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#check_module_license_and_versions\">check_module_license_and_versions</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ndiswrapper is under GPL by itself, but loads proprietary modules.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't use add_taint_module(), as it would prevent ndiswrapper from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * using GPL-only symbols it needs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, \"ndiswrapper\") == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_taint\">add_taint</a>(<a class=\"id\" href=\"#TAINT_PROPRIETARY_MODULE\">TAINT_PROPRIETARY_MODULE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* driverloader was caught wrongly pretending to be under GPL */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, \"driverloader\") == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_taint_module\">add_taint_module</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#TAINT_PROPRIETARY_MODULE\">TAINT_PROPRIETARY_MODULE</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODVERSIONS\">CONFIG_MODVERSIONS</a>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_syms\">num_syms</a> && !<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#crcs\">crcs</a>)", 
"<span class=\"ts\"/>    || (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_gpl_syms\">num_gpl_syms</a> && !<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#gpl_crcs\">gpl_crcs</a>)", 
"<span class=\"ts\"/>    || (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_gpl_future_syms\">num_gpl_future_syms</a> && !<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#gpl_future_crcs\">gpl_future_crcs</a>)", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_UNUSED_SYMBOLS\">CONFIG_UNUSED_SYMBOLS</a>", 
"<span class=\"ts\"/>    || (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_unused_syms\">num_unused_syms</a> && !<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#unused_crcs\">unused_crcs</a>)", 
"<span class=\"ts\"/>    || (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_unused_gpl_syms\">num_unused_gpl_syms</a> && !<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#unused_gpl_crcs\">unused_gpl_crcs</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#try_to_force_load\">try_to_force_load</a>(<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"no versions for exported symbols\");", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#flush_module_icache\">flush_module_icache</a>(const struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_segment_t\">mm_segment_t</a> <a class=\"id\" href=\"#old_fs\">old_fs</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* flush the icache in correct context */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_fs\">old_fs</a> = <a class=\"id\" href=\"#get_fs\">get_fs</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#KERNEL_DS\">KERNEL_DS</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Flush the instruction cache, since we've played with text.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do it before processing of module parameters, so the module</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can provide parameter accessor functions of its own.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_init\">module_init</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_icache_range\">flush_icache_range</a>((unsigned long)<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_init\">module_init</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (unsigned long)<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_init\">module_init</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#init_size\">init_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_icache_range\">flush_icache_range</a>((unsigned long)<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_core\">module_core</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (unsigned long)<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_core\">module_core</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_size\">core_size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#old_fs\">old_fs</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#layout_and_allocate\">layout_and_allocate</a>(struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Module within temporary copy. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf_Shdr\">Elf_Shdr</a> *<a class=\"id\" href=\"#pcpusec\">pcpusec</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#setup_load_info\">setup_load_info</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#mod\">mod</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#mod\">mod</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#check_modinfo\">check_modinfo</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allow arches to frob section contents and sizes.  */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#module_frob_arch_sections\">module_frob_arch_sections</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#secstrings\">secstrings</a>, <a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpusec\">pcpusec</a> = &amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#pcpu\">pcpu</a>];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcpusec\">pcpusec</a>-><a class=\"id\" href=\"#sh_size\">sh_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have a special allocation for this section. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#percpu_modalloc\">percpu_modalloc</a>(<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#pcpusec\">pcpusec</a>-><a class=\"id\" href=\"#sh_size\">sh_size</a>, <a class=\"id\" href=\"#pcpusec\">pcpusec</a>-><a class=\"id\" href=\"#sh_addralign\">sh_addralign</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpusec\">pcpusec</a>-><a class=\"id\" href=\"#sh_flags\">sh_flags</a> &= ~(unsigned long)<a class=\"id\" href=\"#SHF_ALLOC\">SHF_ALLOC</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Determine total sizes, and put offsets in sh_entsize.  For now</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   this is done generically; there doesn't appear to be any</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   special cases for the architectures. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#layout_sections\">layout_sections</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#strmap\">strmap</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#str\">str</a>].<a class=\"id\" href=\"#sh_size\">sh_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * sizeof(long), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#strmap\">strmap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_percpu\">free_percpu</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#layout_symtab\">layout_symtab</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate and move to the final place */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#move_module\">move_module</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_strmap\">free_strmap</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Module has been copied to its final place now: return it. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a> = (void *)<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#mod\">mod</a>].<a class=\"id\" href=\"#sh_addr\">sh_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_load_module\">kmemleak_load_module</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mod\">mod</a>;", 
"", 
"<a class=\"id\" href=\"#free_strmap\">free_strmap</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#strmap\">strmap</a>);", 
"<a class=\"id\" href=\"#free_percpu\">free_percpu</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_modfree\">percpu_modfree</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"}", 
"", 
"<span class=\"comment\">/* mod is no longer valid after this! */</span>", 
"static void <a class=\"id\" href=\"#module_deallocate\">module_deallocate</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#strmap\">strmap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_modfree\">percpu_modfree</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_free\">module_free</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_init\">module_init</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_free\">module_free</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_core\">module_core</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#post_relocation\">post_relocation</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, const struct <a class=\"id\" href=\"#load_info\">load_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Sort exception table now relocations are done. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sort_extable\">sort_extable</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#extable\">extable</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#extable\">extable</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_exentries\">num_exentries</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy relocated percpu area over. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_modcopy\">percpu_modcopy</a>(<a class=\"id\" href=\"#mod\">mod</a>, (void *)<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#pcpu\">pcpu</a>].<a class=\"id\" href=\"#sh_addr\">sh_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>[<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#pcpu\">pcpu</a>].<a class=\"id\" href=\"#sh_size\">sh_size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Setup kallsyms-specific fields. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_kallsyms\">add_kallsyms</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Arch-specific module finalizing. */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#module_finalize\">module_finalize</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hdr\">hdr</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#sechdrs\">sechdrs</a>, <a class=\"id\" href=\"#mod\">mod</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Allocate and load the module: note that size of section 0 is always</span>", 
"<span class=\"comment\">   zero, and we rely on this for optional sections. */</span>", 
"static struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#load_module\">load_module</a>(void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#umod\">umod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uargs\">uargs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#load_info\">load_info</a> <a class=\"id\" href=\"#info\">info</a> = { <a class=\"id\" href=\"#NULL\">NULL</a>, };", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"load_module: umod=%p, len=%lu, uargs=%p\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#umod\">umod</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#uargs\">uargs</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy in the blobs from userspace, check they are vaguely sane. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#copy_and_check\">copy_and_check</a>(&amp;<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#umod\">umod</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#uargs\">uargs</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Figure out module layout, and allocate all the memory. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#layout_and_allocate\">layout_and_allocate</a>(&amp;<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#mod\">mod</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_copy\">free_copy</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now module is in final location, initialize linked lists, etc. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#module_unload_init\">module_unload_init</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_module\">free_module</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now we've got everything in the final locations, we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * find optional sections. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#find_module_sections\">find_module_sections</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#check_module_license_and_versions\">check_module_license_and_versions</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_unload\">free_unload</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set up MODINFO_ATTR fields */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_modinfo\">setup_modinfo</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Fix up syms, so that st_value is a pointer to location. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#simplify_symbols\">simplify_symbols</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_modinfo\">free_modinfo</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#apply_relocations\">apply_relocations</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_modinfo\">free_modinfo</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#post_relocation\">post_relocation</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_modinfo\">free_modinfo</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_module_icache\">flush_module_icache</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now copy in args */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#args\">args</a> = <a class=\"id\" href=\"#strndup_user\">strndup_user</a>(<a class=\"id\" href=\"#uargs\">uargs</a>, ~0UL >> 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#args\">args</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_arch_cleanup\">free_arch_cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Mark state as coming so strong_try_module_get() ignores us. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#MODULE_STATE_COMING\">MODULE_STATE_COMING</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now sew it into the lists so we can get lockdep and oops</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * info during argument parsing.  Noone should access us, since</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * strong_try_module_get() will fail.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lockdep/oops can run asynchronous, so use the RCU list insertion</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * function to insert in a way safe to concurrent readers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The mutex protects against concurrent writers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#find_module\">find_module</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This has to be done once we're sure module name is unique. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#taints\">taints</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dynamic_debug_setup\">dynamic_debug_setup</a>(<a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#debug\">debug</a>, <a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#num_debug\">num_debug</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find duplicate symbols */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#verify_export_symbols\">verify_export_symbols</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#ddebug\">ddebug</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_bug_finalize\">module_bug_finalize</a>(<a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#hdr\">hdr</a>, <a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#sechdrs\">sechdrs</a>, <a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#modules\">modules</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Module is ready to execute: parsing args may do that. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#parse_args\">parse_args</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#kp\">kp</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_kp\">num_kp</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlink\">unlink</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Link in to syfs. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#mod_sysfs_setup\">mod_sysfs_setup</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#kp\">kp</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_kp\">num_kp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlink\">unlink</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get rid of temporary copy and strmap. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#strmap\">strmap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_copy\">free_copy</a>(&amp;<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Done! */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_module_load\">trace_module_load</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mod\">mod</a>;", 
"", 
" <a class=\"id\" href=\"#unlink\">unlink</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Unlink carefully: kallsyms could be walking list. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_bug_cleanup\">module_bug_cleanup</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"", 
" <a class=\"id\" href=\"#ddebug\">ddebug</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#taints\">taints</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dynamic_debug_remove\">dynamic_debug_remove</a>(<a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#debug\">debug</a>);", 
" <a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#args\">args</a>);", 
" <a class=\"id\" href=\"#free_arch_cleanup\">free_arch_cleanup</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_arch_cleanup\">module_arch_cleanup</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
" <a class=\"id\" href=\"#free_modinfo\">free_modinfo</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_modinfo\">free_modinfo</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
" <a class=\"id\" href=\"#free_unload\">free_unload</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_unload_free\">module_unload_free</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
" <a class=\"id\" href=\"#free_module\">free_module</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_deallocate\">module_deallocate</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#info\">info</a>);", 
" <a class=\"id\" href=\"#free_copy\">free_copy</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_copy\">free_copy</a>(&amp;<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Call module constructors. */</span>", 
"static void <a class=\"id\" href=\"#do_mod_ctors\">do_mod_ctors</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CONSTRUCTORS\">CONFIG_CONSTRUCTORS</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_ctors\">num_ctors</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#ctors\">ctors</a>[<a class=\"id\" href=\"#i\">i</a>]();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/* This is where the real work happens */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE3\">SYSCALL_DEFINE3</a>(<a class=\"id\" href=\"#init_module\">init_module</a>, void <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#umod\">umod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long, <a class=\"id\" href=\"#len\">len</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#uargs\">uargs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Must have permission */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_MODULE\">CAP_SYS_MODULE</a>) || <a class=\"id\" href=\"#modules_disabled\">modules_disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do all the hard work */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#load_module\">load_module</a>(<a class=\"id\" href=\"#umod\">umod</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#uargs\">uargs</a>);", 
];
xr_frag_insert('l/3e/0037dfe9237ba7edd18bedb1daafecddac407e.xr', __xr_tmp);
