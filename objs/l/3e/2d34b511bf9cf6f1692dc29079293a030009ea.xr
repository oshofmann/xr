var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_SPINLOCK_H\">_ASM_X86_SPINLOCK_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_SPINLOCK_H\">_ASM_X86_SPINLOCK_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#rwlock\">rwlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#paravirt\">paravirt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Your basic SMP spinlocks, allowing only a single CPU anywhere</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Simple spin lock operations.  There are two variants, one clears IRQ's</span>", 
"<span class=\"comment\"> * on the local processor, one does not.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These are fair FIFO ticket locks, which are currently limited to 256</span>", 
"<span class=\"comment\"> * CPUs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (the type definitions are in asm/spinlock_types.h)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOCK_PTR_REG\">LOCK_PTR_REG</a> \"a\"", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#REG_PTR_MODE\">REG_PTR_MODE</a> \"k\"", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOCK_PTR_REG\">LOCK_PTR_REG</a> \"D\"", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#REG_PTR_MODE\">REG_PTR_MODE</a> \"q\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>) && \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_OOSTORE\">CONFIG_X86_OOSTORE</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_PPRO_FENCE\">CONFIG_X86_PPRO_FENCE</a>))", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * On PPro SMP or if we are using OOSTORE, we use a locked operation to unlock</span>", 
"<span class=\"comment\"> * (PPro errata 66, 92)</span>", 
"<span class=\"comment\"> */</span>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UNLOCK_LOCK_PREFIX\">UNLOCK_LOCK_PREFIX</a> <a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a>", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UNLOCK_LOCK_PREFIX\">UNLOCK_LOCK_PREFIX</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Ticket locks are conceptually two parts, one indicating the current head of</span>", 
"<span class=\"comment\"> * the queue, and the other indicating the current tail. The lock is acquired</span>", 
"<span class=\"comment\"> * by atomically noting the tail and incrementing it by one (thus adding</span>", 
"<span class=\"comment\"> * ourself to the queue and noting our position), then waiting until the head</span>", 
"<span class=\"comment\"> * becomes equal to the the initial value of the tail.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We use an xadd covering *both* parts of the lock, to increment the tail and</span>", 
"<span class=\"comment\"> * also load the position of the head, which takes care of memory ordering</span>", 
"<span class=\"comment\"> * issues and should be optimal for the uncontended case. Note the tail must be</span>", 
"<span class=\"comment\"> * in the high part, because a wide xadd increment of the low part would carry</span>", 
"<span class=\"comment\"> * up and contaminate the high part.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * With fewer than 2^8 possible CPUs, we can use x86's partial registers to</span>", 
"<span class=\"comment\"> * save some instructions and make the code more elegant. There really isn't</span>", 
"<span class=\"comment\"> * much between them in performance though, especially as locks are out of line.</span>", 
"<span class=\"comment\"> */</span>", 
"#if (<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a> &lt; 256)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TICKET_SHIFT\">TICKET_SHIFT</a> 8", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void <a class=\"id\" href=\"#__ticket_spin_lock\">__ticket_spin_lock</a>(<a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>short <a class=\"id\" href=\"#inc\">inc</a> = 0x0100;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile (", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"xaddw %w0, %1\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"1:\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"cmpb %h0, %b0\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"je 2f\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"rep ; nop\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"movb %1, %b0\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* don't need lfence here, because loads are in-order */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"jmp 1b\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"2:\"", 
"<span class=\"ts\"/><span class=\"ts\"/>: \"+Q\" (<a class=\"id\" href=\"#inc\">inc</a>), \"+m\" (<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#slock\">slock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>:", 
"<span class=\"ts\"/><span class=\"ts\"/>: \"memory\", \"cc\");", 
"}", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> int <a class=\"id\" href=\"#__ticket_spin_trylock\">__ticket_spin_trylock</a>(<a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"movzwl %2, %0\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"cmpb %h0,%b0\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"leal 0x100(%\" <a class=\"id\" href=\"#REG_PTR_MODE\">REG_PTR_MODE</a> \"0), %1\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"jne 1f\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"cmpxchgw %w1,%2\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"1:\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"sete %b1\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"movzbl %b1,%0\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=&a\" (<a class=\"id\" href=\"#tmp\">tmp</a>), \"=&q\" (<a class=\"id\" href=\"#new\">new</a>), \"+m\" (<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#slock\">slock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     :", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"memory\", \"cc\");", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void <a class=\"id\" href=\"#__ticket_spin_unlock\">__ticket_spin_unlock</a>(<a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#UNLOCK_LOCK_PREFIX\">UNLOCK_LOCK_PREFIX</a> \"incb %0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#slock\">slock</a>)", 
];
xr_frag_insert('l/3e/2d34b511bf9cf6f1692dc29079293a030009ea.xr', __xr_tmp);
