var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * drivers/base/power/wakeup.c - System wakeup events framework</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2010 Rafael J. Wysocki &lt;rjw@sisk.pl&gt;, Novell Inc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPLv2.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#suspend\">suspend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm\">pm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If set, the suspend/hibernate code will abort transitions to a sleep state</span>", 
"<span class=\"comment\"> * if wakeup events are registered during or immediately before the transition.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#events_check_enabled\">events_check_enabled</a>;", 
"", 
"<span class=\"comment\">/* The counter of registered wakeup events. */</span>", 
"static unsigned long <a class=\"id\" href=\"#event_count\">event_count</a>;", 
"<span class=\"comment\">/* A preserved old value of event_count. */</span>", 
"static unsigned long <a class=\"id\" href=\"#saved_event_count\">saved_event_count</a>;", 
"<span class=\"comment\">/* The counter of wakeup events being processed. */</span>", 
"static unsigned long <a class=\"id\" href=\"#events_in_progress\">events_in_progress</a>;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#events_lock\">events_lock</a>);", 
"", 
"static void <a class=\"id\" href=\"#pm_wakeup_timer_fn\">pm_wakeup_timer_fn</a>(unsigned long <a class=\"id\" href=\"#data\">data</a>);", 
"", 
"static <a class=\"id\" href=\"#DEFINE_TIMER\">DEFINE_TIMER</a>(<a class=\"id\" href=\"#events_timer\">events_timer</a>, <a class=\"id\" href=\"#pm_wakeup_timer_fn\">pm_wakeup_timer_fn</a>, 0, 0);", 
"static unsigned long <a class=\"id\" href=\"#events_timer_expires\">events_timer_expires</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The functions below use the observation that each wakeup event starts a</span>", 
"<span class=\"comment\"> * period in which the system should not be suspended.  The moment this period</span>", 
"<span class=\"comment\"> * will end depends on how the wakeup event is going to be processed after being</span>", 
"<span class=\"comment\"> * detected and all of the possible cases can be divided into two distinct</span>", 
"<span class=\"comment\"> * groups.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * First, a wakeup event may be detected by the same functional unit that will</span>", 
"<span class=\"comment\"> * carry out the entire processing of it and possibly will pass it to user space</span>", 
"<span class=\"comment\"> * for further processing.  In that case the functional unit that has detected</span>", 
"<span class=\"comment\"> * the event may later \"close\" the \"no suspend\" period associated with it</span>", 
"<span class=\"comment\"> * directly as soon as it has been dealt with.  The pair of pm_stay_awake() and</span>", 
"<span class=\"comment\"> * pm_relax(), balanced with each other, is supposed to be used in such</span>", 
"<span class=\"comment\"> * situations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Second, a wakeup event may be detected by one functional unit and processed</span>", 
"<span class=\"comment\"> * by another one.  In that case the unit that has detected it cannot really</span>", 
"<span class=\"comment\"> * \"close\" the \"no suspend\" period associated with it, unless it knows in</span>", 
"<span class=\"comment\"> * advance what's going to happen to the event during processing.  This</span>", 
"<span class=\"comment\"> * knowledge, however, may not be available to it, so it can simply specify time</span>", 
"<span class=\"comment\"> * to wait before the system can be suspended and pass it as the second</span>", 
"<span class=\"comment\"> * argument of pm_wakeup_event().</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pm_stay_awake - Notify the PM core that a wakeup event is being processed.</span>", 
"<span class=\"comment\"> * @dev: Device the wakeup event is related to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notify the PM core of a wakeup event (signaled by @dev) by incrementing the</span>", 
"<span class=\"comment\"> * counter of wakeup events being processed.  If @dev is not NULL, the counter</span>", 
"<span class=\"comment\"> * of wakeup events related to @dev is incremented too.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Call this function after detecting of a wakeup event if pm_relax() is going</span>", 
"<span class=\"comment\"> * to be called directly after processing the event (and possibly passing it to</span>", 
"<span class=\"comment\"> * user space for further processing).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is safe to call this function from interrupt context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pm_stay_awake\">pm_stay_awake</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#events_lock\">events_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#wakeup_count\">wakeup_count</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#events_in_progress\">events_in_progress</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#events_lock\">events_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pm_relax - Notify the PM core that processing of a wakeup event has ended.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notify the PM core that a wakeup event has been processed by decrementing</span>", 
"<span class=\"comment\"> * the counter of wakeup events being processed and incrementing the counter</span>", 
"<span class=\"comment\"> * of registered wakeup events.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Call this function for wakeup events whose processing started with calling</span>", 
"<span class=\"comment\"> * pm_stay_awake().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is safe to call it from interrupt context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pm_relax\">pm_relax</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#events_lock\">events_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#events_in_progress\">events_in_progress</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#events_in_progress\">events_in_progress</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event_count\">event_count</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#events_lock\">events_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pm_wakeup_timer_fn - Delayed finalization of a wakeup event.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Decrease the counter of wakeup events being processed after it was increased</span>", 
"<span class=\"comment\"> * by pm_wakeup_event().</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pm_wakeup_timer_fn\">pm_wakeup_timer_fn</a>(unsigned long <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#events_lock\">events_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#events_timer_expires\">events_timer_expires</a>", 
"<span class=\"ts\"/>    && <a class=\"id\" href=\"#time_before_eq\">time_before_eq</a>(<a class=\"id\" href=\"#events_timer_expires\">events_timer_expires</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#events_in_progress\">events_in_progress</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#events_timer_expires\">events_timer_expires</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#events_lock\">events_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pm_wakeup_event - Notify the PM core of a wakeup event.</span>", 
"<span class=\"comment\"> * @dev: Device the wakeup event is related to.</span>", 
"<span class=\"comment\"> * @msec: Anticipated event processing time (in milliseconds).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notify the PM core of a wakeup event (signaled by @dev) that will take</span>", 
"<span class=\"comment\"> * approximately @msec milliseconds to be processed by the kernel.  Increment</span>", 
"<span class=\"comment\"> * the counter of registered wakeup events and (if @msec is nonzero) set up</span>", 
"<span class=\"comment\"> * the wakeup events timer to execute pm_wakeup_timer_fn() in future (if the</span>", 
"<span class=\"comment\"> * timer has not been set up already, increment the counter of wakeup events</span>", 
"<span class=\"comment\"> * being processed).  If @dev is not NULL, the counter of wakeup events related</span>", 
"<span class=\"comment\"> * to @dev is incremented too.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is safe to call this function from interrupt context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pm_wakeup_event\">pm_wakeup_event</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#msec\">msec</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#events_lock\">events_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event_count\">event_count</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#wakeup_count\">wakeup_count</a>++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#msec\">msec</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#expires\">expires</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#msec\">msec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#expires\">expires</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires\">expires</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#events_timer_expires\">events_timer_expires</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>    || <a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#events_timer_expires\">events_timer_expires</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#events_timer_expires\">events_timer_expires</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#events_in_progress\">events_in_progress</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#events_timer\">events_timer</a>, <a class=\"id\" href=\"#expires\">expires</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#events_timer_expires\">events_timer_expires</a> = <a class=\"id\" href=\"#expires\">expires</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#events_lock\">events_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pm_check_wakeup_events - Check for new wakeup events.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Compare the current number of registered wakeup events with its preserved</span>", 
"<span class=\"comment\"> * value from the past to check if new wakeup events have been registered since</span>", 
"<span class=\"comment\"> * the old value was stored.  Check if the current number of wakeup events being</span>", 
"<span class=\"comment\"> * processed is zero.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#pm_check_wakeup_events\">pm_check_wakeup_events</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#events_lock\">events_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#events_check_enabled\">events_check_enabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (<a class=\"id\" href=\"#event_count\">event_count</a> == <a class=\"id\" href=\"#saved_event_count\">saved_event_count</a>) && !<a class=\"id\" href=\"#events_in_progress\">events_in_progress</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#events_check_enabled\">events_check_enabled</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#events_lock\">events_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pm_get_wakeup_count - Read the number of registered wakeup events.</span>", 
"<span class=\"comment\"> * @count: Address to store the value at.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Store the number of registered wakeup events at the address in @count.  Block</span>", 
"<span class=\"comment\"> * if the current number of wakeup events being processed is nonzero.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return false if the wait for the number of wakeup events being processed to</span>", 
"<span class=\"comment\"> * drop down to zero has been interrupted by a signal (and the current number</span>", 
"<span class=\"comment\"> * of wakeup events being processed is still nonzero).  Otherwise return true.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#pm_get_wakeup_count\">pm_get_wakeup_count</a>(unsigned long *<a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#events_lock\">events_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#events_check_enabled\">events_check_enabled</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#events_in_progress\">events_in_progress</a> && !<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#events_lock\">events_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_timeout_interruptible\">schedule_timeout_interruptible</a>(<a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(100));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#events_lock\">events_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#event_count\">event_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = !<a class=\"id\" href=\"#events_in_progress\">events_in_progress</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#events_lock\">events_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pm_save_wakeup_count - Save the current number of registered wakeup events.</span>", 
"<span class=\"comment\"> * @count: Value to compare with the current number of registered wakeup events.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @count is equal to the current number of registered wakeup events and the</span>", 
"<span class=\"comment\"> * current number of wakeup events being processed is zero, store @count as the</span>", 
"<span class=\"comment\"> * old number of registered wakeup events to be used by pm_check_wakeup_events()</span>", 
"<span class=\"comment\"> * and return true.  Otherwise return false.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#pm_save_wakeup_count\">pm_save_wakeup_count</a>(unsigned long <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#events_lock\">events_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> == <a class=\"id\" href=\"#event_count\">event_count</a> && !<a class=\"id\" href=\"#events_in_progress\">events_in_progress</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#saved_event_count\">saved_event_count</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#events_check_enabled\">events_check_enabled</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#events_lock\">events_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
];
xr_frag_insert('l/3e/605970a8cc0417992b4ebda2d3eaf0fc9c87d2.xr', __xr_tmp);
