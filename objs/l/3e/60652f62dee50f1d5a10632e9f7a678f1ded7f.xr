var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * trace event based perf event profiling/tracing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2009 Red Hat Inc, Peter Zijlstra &lt;pzijlstr@redhat.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2009-2010 Frederic Weisbecker &lt;fweisbec@gmail.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kprobes\">kprobes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"trace.h\"", 
"", 
"static char *<a class=\"id\" href=\"#perf_trace_buf\">perf_trace_buf</a>[4];", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Force it to be aligned to unsigned long to avoid misaligned accesses</span>", 
"<span class=\"comment\"> * suprises</span>", 
"<span class=\"comment\"> */</span>", 
"typedef <a class=\"id\" href=\"#typeof\">typeof</a>(unsigned long [<a class=\"id\" href=\"#PERF_MAX_TRACE_SIZE\">PERF_MAX_TRACE_SIZE</a> / sizeof(unsigned long)])", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_trace_t\">perf_trace_t</a>;", 
"", 
"<span class=\"comment\">/* Count the events in use (per event id, not per instance) */</span>", 
"static int<span class=\"ts\"/><a class=\"id\" href=\"#total_ref_count\">total_ref_count</a>;", 
"", 
"static int <a class=\"id\" href=\"#perf_trace_event_init\">perf_trace_event_init</a>(struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#tp_event\">tp_event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#p_event\">p_event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p_event\">p_event</a>-><a class=\"id\" href=\"#tp_event\">tp_event</a> = <a class=\"id\" href=\"#tp_event\">tp_event</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp_event\">tp_event</a>-><a class=\"id\" href=\"#perf_refcount\">perf_refcount</a>++ &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#alloc_percpu\">alloc_percpu</a>(struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(<a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#cpu\">cpu</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp_event\">tp_event</a>-><a class=\"id\" href=\"#perf_events\">perf_events</a> = <a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#total_ref_count\">total_ref_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 4; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = (char *)<a class=\"id\" href=\"#alloc_percpu\">alloc_percpu</a>(<a class=\"id\" href=\"#perf_trace_t\">perf_trace_t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_trace_buf\">perf_trace_buf</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#tp_event\">tp_event</a>-><a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#reg\">reg</a>(<a class=\"id\" href=\"#tp_event\">tp_event</a>, <a class=\"id\" href=\"#TRACE_REG_PERF_REGISTER\">TRACE_REG_PERF_REGISTER</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total_ref_count\">total_ref_count</a>++;", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#total_ref_count\">total_ref_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 4; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#perf_trace_buf\">perf_trace_buf</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_trace_buf\">perf_trace_buf</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!--<a class=\"id\" href=\"#tp_event\">tp_event</a>-><a class=\"id\" href=\"#perf_refcount\">perf_refcount</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#tp_event\">tp_event</a>-><a class=\"id\" href=\"#perf_events\">perf_events</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp_event\">tp_event</a>-><a class=\"id\" href=\"#perf_events\">perf_events</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#perf_trace_init\">perf_trace_init</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#p_event\">p_event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#tp_event\">tp_event</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#event_id\">event_id</a> = <a class=\"id\" href=\"#p_event\">p_event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#config\">config</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#event_mutex\">event_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#tp_event\">tp_event</a>, &amp;<a class=\"id\" href=\"#ftrace_events\">ftrace_events</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tp_event\">tp_event</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#event_id\">event_id</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tp_event\">tp_event</a>-><a class=\"id\" href=\"#class\">class</a> && <a class=\"id\" href=\"#tp_event\">tp_event</a>-><a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#reg\">reg</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#tp_event\">tp_event</a>-><a class=\"id\" href=\"#mod\">mod</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#perf_trace_event_init\">perf_trace_event_init</a>(<a class=\"id\" href=\"#tp_event\">tp_event</a>, <a class=\"id\" href=\"#p_event\">p_event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#tp_event\">tp_event</a>-><a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#event_mutex\">event_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#perf_trace_enable\">perf_trace_enable</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#p_event\">p_event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#tp_event\">tp_event</a> = <a class=\"id\" href=\"#p_event\">p_event</a>-><a class=\"id\" href=\"#tp_event\">tp_event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#tp_event\">tp_event</a>-><a class=\"id\" href=\"#perf_events\">perf_events</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!<a class=\"id\" href=\"#list\">list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#this_cpu_ptr\">this_cpu_ptr</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head_rcu\">hlist_add_head_rcu</a>(&amp;<a class=\"id\" href=\"#p_event\">p_event</a>-><a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#perf_trace_disable\">perf_trace_disable</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#p_event\">p_event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_rcu\">hlist_del_rcu</a>(&amp;<a class=\"id\" href=\"#p_event\">p_event</a>-><a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#perf_trace_destroy\">perf_trace_destroy</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#p_event\">p_event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#tp_event\">tp_event</a> = <a class=\"id\" href=\"#p_event\">p_event</a>-><a class=\"id\" href=\"#tp_event\">tp_event</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#event_mutex\">event_mutex</a>);", 
"<span class=\"ts\"/>if (--<a class=\"id\" href=\"#tp_event\">tp_event</a>-><a class=\"id\" href=\"#perf_refcount\">perf_refcount</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp_event\">tp_event</a>-><a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#reg\">reg</a>(<a class=\"id\" href=\"#tp_event\">tp_event</a>, <a class=\"id\" href=\"#TRACE_REG_PERF_UNREGISTER\">TRACE_REG_PERF_UNREGISTER</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ensure our callback won't be called anymore. The buffers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will be freed after that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracepoint_synchronize_unregister\">tracepoint_synchronize_unregister</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#tp_event\">tp_event</a>-><a class=\"id\" href=\"#perf_events\">perf_events</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp_event\">tp_event</a>-><a class=\"id\" href=\"#perf_events\">perf_events</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (!--<a class=\"id\" href=\"#total_ref_count\">total_ref_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 4; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#perf_trace_buf\">perf_trace_buf</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_trace_buf\">perf_trace_buf</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#tp_event\">tp_event</a>-><a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#event_mutex\">event_mutex</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#__kprobes\">__kprobes</a> void *<a class=\"id\" href=\"#perf_trace_buf_prepare\">perf_trace_buf_prepare</a>(int <a class=\"id\" href=\"#size\">size</a>, unsigned short <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, int *<a class=\"id\" href=\"#rctxp\">rctxp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_entry\">trace_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#raw_data\">raw_data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pc\">pc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(<a class=\"id\" href=\"#PERF_MAX_TRACE_SIZE\">PERF_MAX_TRACE_SIZE</a> % sizeof(unsigned long));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#preempt_count\">preempt_count</a>();", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#rctxp\">rctxp</a> = <a class=\"id\" href=\"#perf_swevent_get_recursion_context\">perf_swevent_get_recursion_context</a>();", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#rctxp\">rctxp</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_data\">raw_data</a> = <a class=\"id\" href=\"#this_cpu_ptr\">this_cpu_ptr</a>(<a class=\"id\" href=\"#perf_trace_buf\">perf_trace_buf</a>[*<a class=\"id\" href=\"#rctxp\">rctxp</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* zero the dead bytes from align to not leak stack to user */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#raw_data\">raw_data</a>[<a class=\"id\" href=\"#size\">size</a> - sizeof(<a class=\"id\" href=\"#u64\">u64</a>)], 0, sizeof(<a class=\"id\" href=\"#u64\">u64</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = (struct <a class=\"id\" href=\"#trace_entry\">trace_entry</a> *)<a class=\"id\" href=\"#raw_data\">raw_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_save_flags\">local_save_flags</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_generic_entry_update\">tracing_generic_entry_update</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#raw_data\">raw_data</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#perf_trace_buf_prepare\">perf_trace_buf_prepare</a>);", 
];
xr_frag_insert('l/3e/60652f62dee50f1d5a10632e9f7a678f1ded7f.xr', __xr_tmp);
