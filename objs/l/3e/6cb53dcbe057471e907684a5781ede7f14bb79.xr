var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/mm/vmstat.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Manages VM statistics</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992, 1993, 1994  Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  zoned VM statistics</span>", 
"<span class=\"comment\"> *  Copyright (C) 2006 Silicon Graphics, Inc.,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Christoph Lameter &lt;christoph@lameter.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmstat\">vmstat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#math64\">math64</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_VM_EVENT_COUNTERS\">CONFIG_VM_EVENT_COUNTERS</a>", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#vm_event_state\">vm_event_state</a>, <a class=\"id\" href=\"#vm_event_states\">vm_event_states</a>) = {{0}};", 
"<a class=\"id\" href=\"#EXPORT_PER_CPU_SYMBOL\">EXPORT_PER_CPU_SYMBOL</a>(<a class=\"id\" href=\"#vm_event_states\">vm_event_states</a>);", 
"", 
"static void <a class=\"id\" href=\"#sum_vm_events\">sum_vm_events</a>(unsigned long *<a class=\"id\" href=\"#ret\">ret</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ret\">ret</a>, 0, <a class=\"id\" href=\"#NR_VM_EVENT_ITEMS\">NR_VM_EVENT_ITEMS</a> * sizeof(unsigned long));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_event_state\">vm_event_state</a> *<a class=\"id\" href=\"#this\">this</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#vm_event_states\">vm_event_states</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NR_VM_EVENT_ITEMS\">NR_VM_EVENT_ITEMS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>[<a class=\"id\" href=\"#i\">i</a>] += <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#event\">event</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Accumulate the vm event counters across all CPUs.</span>", 
"<span class=\"comment\"> * The result is unavoidably approximate - it can change</span>", 
"<span class=\"comment\"> * during and after execution of this function.</span>", 
"<span class=\"comment\">*/</span>", 
"void <a class=\"id\" href=\"#all_vm_events\">all_vm_events</a>(unsigned long *<a class=\"id\" href=\"#ret\">ret</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sum_vm_events\">sum_vm_events</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#all_vm_events\">all_vm_events</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG\">CONFIG_HOTPLUG</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Fold the foreign cpu events into our own.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is adding to the events on one processor</span>", 
"<span class=\"comment\"> * but keeps the global counts constant.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#vm_events_fold_cpu\">vm_events_fold_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_event_state\">vm_event_state</a> *<a class=\"id\" href=\"#fold_state\">fold_state</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#vm_event_states\">vm_event_states</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NR_VM_EVENT_ITEMS\">NR_VM_EVENT_ITEMS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_events\">count_vm_events</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#fold_state\">fold_state</a>-><a class=\"id\" href=\"#event\">event</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fold_state\">fold_state</a>-><a class=\"id\" href=\"#event\">event</a>[<a class=\"id\" href=\"#i\">i</a>] = 0;", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HOTPLUG */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_VM_EVENT_COUNTERS */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Manage combined zone based / global counters</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * vm_stat contains the global counters</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#atomic_long_t\">atomic_long_t</a> <a class=\"id\" href=\"#vm_stat\">vm_stat</a>[<a class=\"id\" href=\"#NR_VM_ZONE_STAT_ITEMS\">NR_VM_ZONE_STAT_ITEMS</a>];", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vm_stat\">vm_stat</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"static int <a class=\"id\" href=\"#calculate_threshold\">calculate_threshold</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#threshold\">threshold</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mem\">mem</a>;<span class=\"ts\"/><span class=\"comment\">/* memory in 128 MB units */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The threshold scales with the number of processors and the amount</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of memory per zone. More memory means that we can defer updates for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * longer, more processors could lead to more contention.</span>", 
"<span class=\"comment\"> <span class=\"ts\"/> * fls() is used to have a cheap way of logarithmic scaling.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some sample thresholds:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Threshold<span class=\"ts\"/>Processors<span class=\"ts\"/>(fls)<span class=\"ts\"/>Zonesize<span class=\"ts\"/>fls(mem+1)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ------------------------------------------------------------------</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 8<span class=\"ts\"/><span class=\"ts\"/>1<span class=\"ts\"/><span class=\"ts\"/>1<span class=\"ts\"/>0.9-1 GB<span class=\"ts\"/>4</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 16<span class=\"ts\"/><span class=\"ts\"/>2<span class=\"ts\"/><span class=\"ts\"/>2<span class=\"ts\"/>0.9-1 GB<span class=\"ts\"/>4</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 20 <span class=\"ts\"/><span class=\"ts\"/>2<span class=\"ts\"/><span class=\"ts\"/>2<span class=\"ts\"/>1-2 GB<span class=\"ts\"/><span class=\"ts\"/>5</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 24<span class=\"ts\"/><span class=\"ts\"/>2<span class=\"ts\"/><span class=\"ts\"/>2<span class=\"ts\"/>2-4 GB<span class=\"ts\"/><span class=\"ts\"/>6</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 28<span class=\"ts\"/><span class=\"ts\"/>2<span class=\"ts\"/><span class=\"ts\"/>2<span class=\"ts\"/>4-8 GB<span class=\"ts\"/><span class=\"ts\"/>7</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 32<span class=\"ts\"/><span class=\"ts\"/>2<span class=\"ts\"/><span class=\"ts\"/>2<span class=\"ts\"/>8-16 GB<span class=\"ts\"/><span class=\"ts\"/>8</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 4<span class=\"ts\"/><span class=\"ts\"/>2<span class=\"ts\"/><span class=\"ts\"/>2<span class=\"ts\"/>&lt;128M<span class=\"ts\"/><span class=\"ts\"/>1</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 30<span class=\"ts\"/><span class=\"ts\"/>4<span class=\"ts\"/><span class=\"ts\"/>3<span class=\"ts\"/>2-4 GB<span class=\"ts\"/><span class=\"ts\"/>5</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 48<span class=\"ts\"/><span class=\"ts\"/>4<span class=\"ts\"/><span class=\"ts\"/>3<span class=\"ts\"/>8-16 GB<span class=\"ts\"/><span class=\"ts\"/>8</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 32<span class=\"ts\"/><span class=\"ts\"/>8<span class=\"ts\"/><span class=\"ts\"/>4<span class=\"ts\"/>1-2 GB<span class=\"ts\"/><span class=\"ts\"/>4</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 32<span class=\"ts\"/><span class=\"ts\"/>8<span class=\"ts\"/><span class=\"ts\"/>4<span class=\"ts\"/>0.9-1GB<span class=\"ts\"/><span class=\"ts\"/>4</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 10<span class=\"ts\"/><span class=\"ts\"/>16<span class=\"ts\"/><span class=\"ts\"/>5<span class=\"ts\"/>&lt;128M<span class=\"ts\"/><span class=\"ts\"/>1</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 40<span class=\"ts\"/><span class=\"ts\"/>16<span class=\"ts\"/><span class=\"ts\"/>5<span class=\"ts\"/>900M<span class=\"ts\"/><span class=\"ts\"/>4</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 70<span class=\"ts\"/><span class=\"ts\"/>64<span class=\"ts\"/><span class=\"ts\"/>7<span class=\"ts\"/>2-4 GB<span class=\"ts\"/><span class=\"ts\"/>5</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 84<span class=\"ts\"/><span class=\"ts\"/>64<span class=\"ts\"/><span class=\"ts\"/>7<span class=\"ts\"/>4-8 GB<span class=\"ts\"/><span class=\"ts\"/>6</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 108<span class=\"ts\"/><span class=\"ts\"/>512<span class=\"ts\"/><span class=\"ts\"/>9<span class=\"ts\"/>4-8 GB<span class=\"ts\"/><span class=\"ts\"/>6</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 125<span class=\"ts\"/><span class=\"ts\"/>1024<span class=\"ts\"/><span class=\"ts\"/>10<span class=\"ts\"/>8-16 GB<span class=\"ts\"/><span class=\"ts\"/>8</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 125<span class=\"ts\"/><span class=\"ts\"/>1024<span class=\"ts\"/><span class=\"ts\"/>10<span class=\"ts\"/>16-32 GB<span class=\"ts\"/>9</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a> >> (27 - <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#threshold\">threshold</a> = 2 * <a class=\"id\" href=\"#fls\">fls</a>(<a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>()) * (1 + <a class=\"id\" href=\"#fls\">fls</a>(<a class=\"id\" href=\"#mem\">mem</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Maximum threshold is 125</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#threshold\">threshold</a> = <a class=\"id\" href=\"#min\">min</a>(125, <a class=\"id\" href=\"#threshold\">threshold</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#threshold\">threshold</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Refresh the thresholds for each zone.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#refresh_zone_stat_thresholds\">refresh_zone_stat_thresholds</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#threshold\">threshold</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_populated_zone\">for_each_populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max_drift\">max_drift</a>, <a class=\"id\" href=\"#tolerate_drift\">tolerate_drift</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#threshold\">threshold</a> = <a class=\"id\" href=\"#calculate_threshold\">calculate_threshold</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#pageset\">pageset</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#stat_threshold\">stat_threshold</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#threshold\">threshold</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Only set percpu_drift_mark if there is a danger that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * NR_FREE_PAGES reports the low watermark is ok when in fact</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the min watermark could be breached by an allocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tolerate_drift\">tolerate_drift</a> = <a class=\"id\" href=\"#low_wmark_pages\">low_wmark_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>) - <a class=\"id\" href=\"#min_wmark_pages\">min_wmark_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_drift\">max_drift</a> = <a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>() * <a class=\"id\" href=\"#threshold\">threshold</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#max_drift\">max_drift</a> &gt; <a class=\"id\" href=\"#tolerate_drift\">tolerate_drift</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#percpu_drift_mark\">percpu_drift_mark</a> = <a class=\"id\" href=\"#high_wmark_pages\">high_wmark_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_drift\">max_drift</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For use when we know that interrupts are disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, enum <a class=\"id\" href=\"#zone_stat_item\">zone_stat_item</a> <a class=\"id\" href=\"#item\">item</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#delta\">delta</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#per_cpu_pageset\">per_cpu_pageset</a> *<a class=\"id\" href=\"#pcp\">pcp</a> = <a class=\"id\" href=\"#this_cpu_ptr\">this_cpu_ptr</a>(<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#pageset\">pageset</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s8\">s8</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#vm_stat_diff\">vm_stat_diff</a> + <a class=\"id\" href=\"#item\">item</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#x\">x</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#delta\">delta</a> + *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#x\">x</a> &gt; <a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#stat_threshold\">stat_threshold</a> || <a class=\"id\" href=\"#x\">x</a> &lt; -<a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#stat_threshold\">stat_threshold</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_page_state_add\">zone_page_state_add</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#item\">item</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#x\">x</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For an unknown interrupt state</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mod_zone_page_state\">mod_zone_page_state</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, enum <a class=\"id\" href=\"#zone_stat_item\">zone_stat_item</a> <a class=\"id\" href=\"#item\">item</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#delta\">delta</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#item\">item</a>, <a class=\"id\" href=\"#delta\">delta</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mod_zone_page_state\">mod_zone_page_state</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Optimized increment and decrement functions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These are only for a single page and therefore can take a struct page *</span>", 
"<span class=\"comment\"> * argument instead of struct zone *. This allows the inclusion of the code</span>", 
"<span class=\"comment\"> * generated for page_zone(page) into the optimized functions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * No overflow check is necessary and therefore the differential can be</span>", 
"<span class=\"comment\"> * incremented or decremented in place which may allow the compilers to</span>", 
"<span class=\"comment\"> * generate better code.</span>", 
"<span class=\"comment\"> * The increment or decrement is known and therefore one boundary check can</span>", 
"<span class=\"comment\"> * be omitted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: These functions are very performance sensitive. Change only</span>", 
"<span class=\"comment\"> * with care.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Some processors have inc/dec instructions that are atomic vs an interrupt.</span>", 
"<span class=\"comment\"> * However, the code must first determine the differential location in a zone</span>", 
"<span class=\"comment\"> * based on the processor number and then inc/dec the counter. There is no</span>", 
"<span class=\"comment\"> * guarantee without disabling preemption that the processor will not change</span>", 
"<span class=\"comment\"> * in between and therefore the atomicity vs. interrupt cannot be exploited</span>", 
"<span class=\"comment\"> * in a useful way here.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__inc_zone_state\">__inc_zone_state</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, enum <a class=\"id\" href=\"#zone_stat_item\">zone_stat_item</a> <a class=\"id\" href=\"#item\">item</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#per_cpu_pageset\">per_cpu_pageset</a> *<a class=\"id\" href=\"#pcp\">pcp</a> = <a class=\"id\" href=\"#this_cpu_ptr\">this_cpu_ptr</a>(<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#pageset\">pageset</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s8\">s8</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#vm_stat_diff\">vm_stat_diff</a> + <a class=\"id\" href=\"#item\">item</a>;", 
"", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#p\">p</a>)++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(*<a class=\"id\" href=\"#p\">p</a> &gt; <a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#stat_threshold\">stat_threshold</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#overstep\">overstep</a> = <a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#stat_threshold\">stat_threshold</a> / 2;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_page_state_add\">zone_page_state_add</a>(*<a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#overstep\">overstep</a>, <a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#item\">item</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = -<a class=\"id\" href=\"#overstep\">overstep</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#__inc_zone_page_state\">__inc_zone_page_state</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, enum <a class=\"id\" href=\"#zone_stat_item\">zone_stat_item</a> <a class=\"id\" href=\"#item\">item</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__inc_zone_state\">__inc_zone_state</a>(<a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>), <a class=\"id\" href=\"#item\">item</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__inc_zone_page_state\">__inc_zone_page_state</a>);", 
"", 
"void <a class=\"id\" href=\"#__dec_zone_state\">__dec_zone_state</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, enum <a class=\"id\" href=\"#zone_stat_item\">zone_stat_item</a> <a class=\"id\" href=\"#item\">item</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#per_cpu_pageset\">per_cpu_pageset</a> *<a class=\"id\" href=\"#pcp\">pcp</a> = <a class=\"id\" href=\"#this_cpu_ptr\">this_cpu_ptr</a>(<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#pageset\">pageset</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s8\">s8</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#vm_stat_diff\">vm_stat_diff</a> + <a class=\"id\" href=\"#item\">item</a>;", 
"", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#p\">p</a>)--;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(*<a class=\"id\" href=\"#p\">p</a> &lt; - <a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#stat_threshold\">stat_threshold</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#overstep\">overstep</a> = <a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#stat_threshold\">stat_threshold</a> / 2;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_page_state_add\">zone_page_state_add</a>(*<a class=\"id\" href=\"#p\">p</a> - <a class=\"id\" href=\"#overstep\">overstep</a>, <a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#item\">item</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#overstep\">overstep</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#__dec_zone_page_state\">__dec_zone_page_state</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, enum <a class=\"id\" href=\"#zone_stat_item\">zone_stat_item</a> <a class=\"id\" href=\"#item\">item</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__dec_zone_state\">__dec_zone_state</a>(<a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>), <a class=\"id\" href=\"#item\">item</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__dec_zone_page_state\">__dec_zone_page_state</a>);", 
"", 
"void <a class=\"id\" href=\"#inc_zone_state\">inc_zone_state</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, enum <a class=\"id\" href=\"#zone_stat_item\">zone_stat_item</a> <a class=\"id\" href=\"#item\">item</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__inc_zone_state\">__inc_zone_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#item\">item</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#inc_zone_page_state\">inc_zone_page_state</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, enum <a class=\"id\" href=\"#zone_stat_item\">zone_stat_item</a> <a class=\"id\" href=\"#item\">item</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__inc_zone_state\">__inc_zone_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#item\">item</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#inc_zone_page_state\">inc_zone_page_state</a>);", 
"", 
"void <a class=\"id\" href=\"#dec_zone_page_state\">dec_zone_page_state</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, enum <a class=\"id\" href=\"#zone_stat_item\">zone_stat_item</a> <a class=\"id\" href=\"#item\">item</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__dec_zone_page_state\">__dec_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#item\">item</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dec_zone_page_state\">dec_zone_page_state</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Update the zone counters for one cpu.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The cpu specified must be either the current cpu or a processor that</span>", 
"<span class=\"comment\"> * is not online. If it is the current cpu then the execution thread must</span>", 
"<span class=\"comment\"> * be pinned to the current cpu.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that refresh_cpu_vm_stats strives to only access</span>", 
"<span class=\"comment\"> * node local memory. The per cpu pagesets on remote zones are placed</span>", 
"<span class=\"comment\"> * in the memory local to the processor using that pageset. So the</span>", 
"<span class=\"comment\"> * loop over all zones will access a series of cachelines local to</span>", 
"<span class=\"comment\"> * the processor.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The call to zone_page_state_add updates the cachelines with the</span>", 
"<span class=\"comment\"> * statistics in the remote zone struct as well as the global cachelines</span>", 
"<span class=\"comment\"> * with the global counters. These could cause remote node cache line</span>", 
"<span class=\"comment\"> * bouncing and will have to be only done when necessary.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#refresh_cpu_vm_stats\">refresh_cpu_vm_stats</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#global_diff\">global_diff</a>[<a class=\"id\" href=\"#NR_VM_ZONE_STAT_ITEMS\">NR_VM_ZONE_STAT_ITEMS</a>] = { 0, };", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_populated_zone\">for_each_populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#per_cpu_pageset\">per_cpu_pageset</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#pageset\">pageset</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NR_VM_ZONE_STAT_ITEMS\">NR_VM_ZONE_STAT_ITEMS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#vm_stat_diff\">vm_stat_diff</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#vm_stat_diff\">vm_stat_diff</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#vm_stat_diff\">vm_stat_diff</a>[<a class=\"id\" href=\"#i\">i</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_add\">atomic_long_add</a>(<a class=\"id\" href=\"#v\">v</a>, &amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#vm_stat\">vm_stat</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_diff\">global_diff</a>[<a class=\"id\" href=\"#i\">i</a>] += <a class=\"id\" href=\"#v\">v</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 3 seconds idle till flush */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#expire\">expire</a> = 3;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Deal with draining the remote pageset of this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * processor</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Check if there are pages remaining in this pageset</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if not then there is nothing to expire.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#expire\">expire</a> || !<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pcp\">pcp</a>.<a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We never drain zones local to this processor.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_to_nid\">zone_to_nid</a>(<a class=\"id\" href=\"#zone\">zone</a>) == <a class=\"id\" href=\"#numa_node_id\">numa_node_id</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#expire\">expire</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#expire\">expire</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#expire\">expire</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pcp\">pcp</a>.<a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drain_zone_pages\">drain_zone_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pcp\">pcp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NR_VM_ZONE_STAT_ITEMS\">NR_VM_ZONE_STAT_ITEMS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#global_diff\">global_diff</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_add\">atomic_long_add</a>(<a class=\"id\" href=\"#global_diff\">global_diff</a>[<a class=\"id\" href=\"#i\">i</a>], &amp;<a class=\"id\" href=\"#vm_stat\">vm_stat</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * zonelist = the list of zones passed to the allocator</span>", 
"<span class=\"comment\"> * z <span class=\"ts\"/>    = the zone from which the allocation occurred.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called with interrupts disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#zone_statistics\">zone_statistics</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>, struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#z\">z</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#zone_pgdat\">zone_pgdat</a> == <a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>-><a class=\"id\" href=\"#zone_pgdat\">zone_pgdat</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__inc_zone_state\">__inc_zone_state</a>(<a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#NUMA_HIT\">NUMA_HIT</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__inc_zone_state\">__inc_zone_state</a>(<a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#NUMA_MISS\">NUMA_MISS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__inc_zone_state\">__inc_zone_state</a>(<a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>, <a class=\"id\" href=\"#NUMA_FOREIGN\">NUMA_FOREIGN</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#node\">node</a> == <a class=\"id\" href=\"#numa_node_id\">numa_node_id</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__inc_zone_state\">__inc_zone_state</a>(<a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#NUMA_LOCAL\">NUMA_LOCAL</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__inc_zone_state\">__inc_zone_state</a>(<a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#NUMA_OTHER\">NUMA_OTHER</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPACTION\">CONFIG_COMPACTION</a>", 
"struct <a class=\"id\" href=\"#contig_page_info\">contig_page_info</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#free_pages\">free_pages</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#free_blocks_total\">free_blocks_total</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#free_blocks_suitable\">free_blocks_suitable</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Calculate the number of free pages in a zone, how many contiguous</span>", 
"<span class=\"comment\"> * pages are free and how many are large enough to satisfy an allocation of</span>", 
"<span class=\"comment\"> * the target size. Note that this function makes no attempt to estimate</span>", 
"<span class=\"comment\"> * how many suitable free blocks there *might* be if MOVABLE pages were</span>", 
"<span class=\"comment\"> * migrated. Calculating that is possible, but expensive and can be</span>", 
"<span class=\"comment\"> * figured out from userspace</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#fill_contig_page_info\">fill_contig_page_info</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#suitable_order\">suitable_order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#contig_page_info\">contig_page_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#order\">order</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#free_pages\">free_pages</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#free_blocks_total\">free_blocks_total</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#free_blocks_suitable\">free_blocks_suitable</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#order\">order</a> = 0; <a class=\"id\" href=\"#order\">order</a> &lt; <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>; <a class=\"id\" href=\"#order\">order</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#blocks\">blocks</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Count number of free blocks */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blocks\">blocks</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#free_area\">free_area</a>[<a class=\"id\" href=\"#order\">order</a>].<a class=\"id\" href=\"#nr_free\">nr_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#free_blocks_total\">free_blocks_total</a> += <a class=\"id\" href=\"#blocks\">blocks</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Count free base pages */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#free_pages\">free_pages</a> += <a class=\"id\" href=\"#blocks\">blocks</a> << <a class=\"id\" href=\"#order\">order</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Count the suitable free blocks */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> >= <a class=\"id\" href=\"#suitable_order\">suitable_order</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#free_blocks_suitable\">free_blocks_suitable</a> += <a class=\"id\" href=\"#blocks\">blocks</a> <<", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#order\">order</a> - <a class=\"id\" href=\"#suitable_order\">suitable_order</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A fragmentation index only makes sense if an allocation of a requested</span>", 
"<span class=\"comment\"> * size would fail. If that is true, the fragmentation index indicates</span>", 
"<span class=\"comment\"> * whether external fragmentation or a lack of memory was the problem.</span>", 
"<span class=\"comment\"> * The value can be used to determine if page reclaim or compaction</span>", 
"<span class=\"comment\"> * should be used</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__fragmentation_index\">__fragmentation_index</a>(unsigned int <a class=\"id\" href=\"#order\">order</a>, struct <a class=\"id\" href=\"#contig_page_info\">contig_page_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#requested\">requested</a> = 1UL << <a class=\"id\" href=\"#order\">order</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#free_blocks_total\">free_blocks_total</a>)", 
];
xr_frag_insert('l/3e/6cb53dcbe057471e907684a5781ede7f14bb79.xr', __xr_tmp);
