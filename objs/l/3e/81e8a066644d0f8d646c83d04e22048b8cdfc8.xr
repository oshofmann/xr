var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/fs/jbd2/revoke.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Written by Stephen C. Tweedie &lt;sct@redhat.com&gt;, 2000</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright 2000 Red Hat corp --- All Rights Reserved</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is part of the Linux kernel and is made available under</span>", 
"<span class=\"comment\"> * the terms of the GNU General Public License, version 2, or at your</span>", 
"<span class=\"comment\"> * option, any later version, incorporated herein by reference.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Journal revoke routines for the generic filesystem journaling code;</span>", 
"<span class=\"comment\"> * part of the ext2fs journaling system.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Revoke is the mechanism used to prevent old log records for deleted</span>", 
"<span class=\"comment\"> * metadata from being replayed on top of newer data using the same</span>", 
"<span class=\"comment\"> * blocks.  The revoke mechanism is used in two separate places:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * + Commit: during commit we write the entire list of the current</span>", 
"<span class=\"comment\"> *   transaction's revoked blocks to the journal</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * + Recovery: during recovery we record the transaction ID of all</span>", 
"<span class=\"comment\"> *   revoked blocks.  If there are multiple revoke records in the log</span>", 
"<span class=\"comment\"> *   for a single block, only the last one counts, and if there is a log</span>", 
"<span class=\"comment\"> *   entry for a block beyond the last revoke, then that log entry still</span>", 
"<span class=\"comment\"> *   gets replayed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We can get interactions between revokes and new log data within a</span>", 
"<span class=\"comment\"> * single transaction:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Block is revoked and then journaled:</span>", 
"<span class=\"comment\"> *   The desired end result is the journaling of the new block, so we</span>", 
"<span class=\"comment\"> *   cancel the revoke before the transaction commits.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Block is journaled and then revoked:</span>", 
"<span class=\"comment\"> *   The revoke must take precedence over the write of the block, so we</span>", 
"<span class=\"comment\"> *   need either to cancel the journal entry or to write the revoke</span>", 
"<span class=\"comment\"> *   later in the log than the log block.  In this case, we choose the</span>", 
"<span class=\"comment\"> *   latter: journaling a block cancels any revoke record for that block</span>", 
"<span class=\"comment\"> *   in the current transaction, so any revoke for that block in the</span>", 
"<span class=\"comment\"> *   transaction must have happened after the block was journaled and so</span>", 
"<span class=\"comment\"> *   the revoke must take precedence.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Block is revoked and then written as data:</span>", 
"<span class=\"comment\"> *   The data write is allowed to succeed, but the revoke is _not_</span>", 
"<span class=\"comment\"> *   cancelled.  We still need to prevent old log records from</span>", 
"<span class=\"comment\"> *   overwriting the new data.  We don't even need to clear the revoke</span>", 
"<span class=\"comment\"> *   bit here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Revoke information on buffers is a tri-state value:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RevokeValid clear:<span class=\"ts\"/>no cached revoke status, need to look it up</span>", 
"<span class=\"comment\"> * RevokeValid set, Revoked clear:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>buffer has not been revoked, and cancel_revoke</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>need do nothing.</span>", 
"<span class=\"comment\"> * RevokeValid set, Revoked set:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>buffer has been revoked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Locking rules:</span>", 
"<span class=\"comment\"> * We keep two hash tables of revoke records. One hashtable belongs to the</span>", 
"<span class=\"comment\"> * running transaction (is pointed to by journal-&gt;j_revoke), the other one</span>", 
"<span class=\"comment\"> * belongs to the committing transaction. Accesses to the second hash table</span>", 
"<span class=\"comment\"> * happen only from the kjournald and no other thread touches this table.  Also</span>", 
"<span class=\"comment\"> * journal_switch_revoke_table() which switches which hashtable belongs to the</span>", 
"<span class=\"comment\"> * running and which to the committing transaction is called only from</span>", 
"<span class=\"comment\"> * kjournald. Therefore we need no locks when accessing the hashtable belonging</span>", 
"<span class=\"comment\"> * to the committing transaction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All users operating on the hash table belonging to the running transaction</span>", 
"<span class=\"comment\"> * have a handle to the transaction. Therefore they are safe from kjournald</span>", 
"<span class=\"comment\"> * switching hash tables under them. For operations on the lists of entries in</span>", 
"<span class=\"comment\"> * the hash table j_revoke_lock is used.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Finally, also replay code uses the hash tables but at this moment noone else</span>", 
"<span class=\"comment\"> * can touch them (filesystem isn't mounted yet) and hence no locking is</span>", 
"<span class=\"comment\"> * needed.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"#<a class=\"id\" href=\"#include\">include</a> \"jfs_user.h\"", 
"#else", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jbd2\">jbd2</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bio\">bio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#log2\">log2</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#jbd2_revoke_record_cache\">jbd2_revoke_record_cache</a>;", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#jbd2_revoke_table_cache\">jbd2_revoke_table_cache</a>;", 
"", 
"<span class=\"comment\">/* Each revoke record represents one single revoked block.  During</span>", 
"<span class=\"comment\">   journal replay, this involves recording the transaction ID of the</span>", 
"<span class=\"comment\">   last transaction to revoke this block. */</span>", 
"", 
"struct <a class=\"id\" href=\"#jbd2_revoke_record_s\">jbd2_revoke_record_s</a>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a>  <a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tid_t\">tid_t</a><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sequence\">sequence</a>;<span class=\"ts\"/><span class=\"comment\">/* Used for recovery only */</span>", 
"<span class=\"ts\"/>unsigned long long<span class=\"ts\"/>  <a class=\"id\" href=\"#blocknr\">blocknr</a>;", 
"};", 
"", 
"", 
"<span class=\"comment\">/* The revoke table is just a simple hash table of revoke records. */</span>", 
"struct <a class=\"id\" href=\"#jbd2_revoke_table_s\">jbd2_revoke_table_s</a>", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* It is conceivable that we might want a larger hash table</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for recovery.  Must be a power of two. */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#hash_size\">hash_size</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#hash_shift\">hash_shift</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#hash_table\">hash_table</a>;", 
"};", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"static void <a class=\"id\" href=\"#write_one_revoke_record\">write_one_revoke_record</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *, <a class=\"id\" href=\"#transaction_t\">transaction_t</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#journal_head\">journal_head</a> **, int *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#jbd2_revoke_record_s\">jbd2_revoke_record_s</a> *, int);", 
"static void <a class=\"id\" href=\"#flush_descriptor\">flush_descriptor</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *, struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *, int, int);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Utility functions to maintain the revoke table */</span>", 
];
xr_frag_insert('l/3e/81e8a066644d0f8d646c83d04e22048b8cdfc8.xr', __xr_tmp);
