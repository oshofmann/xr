var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>       \"Use CONFIG_X86_BIGSMP.\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_present_cpu\">for_each_present_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a> >= 8)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_present\">set_cpu_present</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a> >= 8)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_possible\">set_cpu_possible</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> = 8;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#physid_isset\">physid_isset</a>(<a class=\"id\" href=\"#hard_smp_processor_id\">hard_smp_processor_id</a>(), <a class=\"id\" href=\"#phys_cpu_present_map\">phys_cpu_present_map</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"weird, boot CPU (#%d) not listed by the BIOS.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hard_smp_processor_id\">hard_smp_processor_id</a>());", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physid_set\">physid_set</a>(<a class=\"id\" href=\"#hard_smp_processor_id\">hard_smp_processor_id</a>(), <a class=\"id\" href=\"#phys_cpu_present_map\">phys_cpu_present_map</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we couldn't find an SMP configuration at boot time,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * get out of here now!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#smp_found_config\">smp_found_config</a> && !<a class=\"id\" href=\"#acpi_lapic\">acpi_lapic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"SMP motherboard not detected.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_smp\">disable_smp</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#APIC_init_uniprocessor\">APIC_init_uniprocessor</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"Local APIC not detected.\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \" Using dummy APIC emulation.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Should not be necessary because the MP table should list the boot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CPU too, but we do it for the sake of robustness anyway.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#check_phys_apicid_present\">check_phys_apicid_present</a>(<a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"weird, boot CPU (#%d) not listed by the BIOS.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physid_set\">physid_set</a>(<a class=\"id\" href=\"#hard_smp_processor_id\">hard_smp_processor_id</a>(), <a class=\"id\" href=\"#phys_cpu_present_map\">phys_cpu_present_map</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we couldn't find a local APIC, then get out of here now!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#APIC_INTEGRATED\">APIC_INTEGRATED</a>(<a class=\"id\" href=\"#apic_version\">apic_version</a>[<a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a>]) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#cpu_has_apic\">cpu_has_apic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#disable_apic\">disable_apic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"BIOS bug, local APIC #%d not detected!...\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"... forcing use of dummy APIC emulation.\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"(tell your hw vendor)\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smpboot_clear_io_apic\">smpboot_clear_io_apic</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_disable_smp_support\">arch_disable_smp_support</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#verify_local_APIC\">verify_local_APIC</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If SMP should be disabled, then really disable it!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#max_cpus\">max_cpus</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"SMP mode deactivated.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smpboot_clear_io_apic\">smpboot_clear_io_apic</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#localise_nmi_watchdog\">localise_nmi_watchdog</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#connect_bsp_APIC\">connect_bsp_APIC</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_local_APIC\">setup_local_APIC</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_local_APIC_setup\">end_local_APIC_setup</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#smp_cpu_index_default\">smp_cpu_index_default</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = &amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* mark all to hotplug */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpu_index\">cpu_index</a> = <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Prepare for SMP bootup.  The MP table or ACPI has been read</span>", 
"<span class=\"comment\"> * earlier.  Just do some sanity checking here and enable APIC mode.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#native_smp_prepare_cpus\">native_smp_prepare_cpus</a>(unsigned int <a class=\"id\" href=\"#max_cpus\">max_cpus</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_cpu_index_default\">smp_cpu_index_default</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current_cpu_data\">current_cpu_data</a> = <a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#cpu_callin_mask\">cpu_callin_mask</a>, <a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(0));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb\">mb</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Setup boot CPU information</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_store_cpu_info\">smp_store_cpu_info</a>(0); <span class=\"comment\">/* Final full version of the data */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#boot_cpu_logical_apicid\">boot_cpu_logical_apicid</a> = <a class=\"id\" href=\"#logical_smp_processor_id\">logical_smp_processor_id</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#cpu\">cpu</a> = 0;  <span class=\"comment\">/* needed? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zalloc_cpumask_var\">zalloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_sibling_map\">cpu_sibling_map</a>, <a class=\"id\" href=\"#i\">i</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zalloc_cpumask_var\">zalloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_core_map\">cpu_core_map</a>, <a class=\"id\" href=\"#i\">i</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zalloc_cpumask_var\">zalloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#i\">i</a>).<a class=\"id\" href=\"#llc_shared_map\">llc_shared_map</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_sibling_map\">set_cpu_sibling_map</a>(0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enable_IR_x2apic\">enable_IR_x2apic</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#default_setup_apic_routing\">default_setup_apic_routing</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smp_sanity_check\">smp_sanity_check</a>(<a class=\"id\" href=\"#max_cpus\">max_cpus</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"SMP disabled\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_smp\">disable_smp</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_apic_id\">read_apic_id</a>() != <a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Boot APIC ID in local APIC unexpected (%d vs %d)\",", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#read_apic_id\">read_apic_id</a>(), <a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Or can we switch back to PIC here? */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#connect_bsp_APIC\">connect_bsp_APIC</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Switch from PIC to APIC mode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_local_APIC\">setup_local_APIC</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Enable IO APIC before setting up error vector</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skip_ioapic_setup\">skip_ioapic_setup</a> && <a class=\"id\" href=\"#nr_ioapics\">nr_ioapics</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_IO_APIC\">enable_IO_APIC</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_local_APIC_setup\">end_local_APIC_setup</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map_cpu_to_logical_apicid\">map_cpu_to_logical_apicid</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#setup_portio_remap\">setup_portio_remap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#setup_portio_remap\">setup_portio_remap</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smpboot_setup_io_apic\">smpboot_setup_io_apic</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set up local APIC timer on boot CPU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"CPU%d: \", 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_cpu_info\">print_cpu_info</a>(&amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(0));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#timers\">timers</a>.<a class=\"id\" href=\"#setup_percpu_clockev\">setup_percpu_clockev</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_uv_system\">is_uv_system</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uv_system_init\">uv_system_init</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_mtrr_aps_delayed_init\">set_mtrr_aps_delayed_init</a>();", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#arch_enable_nonboot_cpus_begin\">arch_enable_nonboot_cpus_begin</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_mtrr_aps_delayed_init\">set_mtrr_aps_delayed_init</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#arch_enable_nonboot_cpus_end\">arch_enable_nonboot_cpus_end</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mtrr_aps_init\">mtrr_aps_init</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Early setup to make printk work.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#native_smp_prepare_boot_cpu\">native_smp_prepare_boot_cpu</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#me\">me</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#switch_to_new_gdt\">switch_to_new_gdt</a>(<a class=\"id\" href=\"#me\">me</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* already set me in cpu_online_mask in boot_cpu_init() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#me\">me</a>, <a class=\"id\" href=\"#cpu_callout_mask\">cpu_callout_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_state\">cpu_state</a>, <a class=\"id\" href=\"#me\">me</a>) = <a class=\"id\" href=\"#CPU_ONLINE\">CPU_ONLINE</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#native_smp_cpus_done\">native_smp_cpus_done</a>(unsigned int <a class=\"id\" href=\"#max_cpus\">max_cpus</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"Boot done.\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#impress_friends\">impress_friends</a>();", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_IO_APIC\">CONFIG_X86_IO_APIC</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_ioapic_dest\">setup_ioapic_dest</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_nmi_watchdog\">check_nmi_watchdog</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mtrr_aps_init\">mtrr_aps_init</a>();", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#setup_possible_cpus\">setup_possible_cpus</a> = -1;", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#_setup_possible_cpus\">_setup_possible_cpus</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_option\">get_option</a>(&amp;<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#setup_possible_cpus\">setup_possible_cpus</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"possible_cpus\", <a class=\"id\" href=\"#_setup_possible_cpus\">_setup_possible_cpus</a>);", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cpu_possible_mask should be static, it cannot change as cpu's</span>", 
"<span class=\"comment\"> * are onlined, or offlined. The reason is per-cpu data-structures</span>", 
"<span class=\"comment\"> * are allocated by some modules at init time, and dont expect to</span>", 
"<span class=\"comment\"> * do this dynamically on cpu arrival/departure.</span>", 
"<span class=\"comment\"> * cpu_present_mask on the other hand can change dynamically.</span>", 
"<span class=\"comment\"> * In case when cpu_hotplug is not compiled, then we resort to current</span>", 
"<span class=\"comment\"> * behaviour, which is cpu_possible == cpu_present.</span>", 
"<span class=\"comment\"> * - Ashok Raj</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Three ways to find out the number of additional hotplug CPUs:</span>", 
"<span class=\"comment\"> * - If the BIOS specified disabled CPUs in ACPI/mptables use that.</span>", 
"<span class=\"comment\"> * - The user can overwrite it with possible_cpus=NUM</span>", 
"<span class=\"comment\"> * - Otherwise don't reserve additional CPUs.</span>", 
"<span class=\"comment\"> * We do this because additional CPUs waste a lot of memory.</span>", 
"<span class=\"comment\"> * -AK</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#prefill_possible_map\">prefill_possible_map</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#possible\">possible</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* no processor from mptable or madt */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#num_processors\">num_processors</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_processors\">num_processors</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#setup_max_cpus\">setup_max_cpus</a> ?: 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#setup_possible_cpus\">setup_possible_cpus</a> == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#possible\">possible</a> = <a class=\"id\" href=\"#num_processors\">num_processors</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#setup_max_cpus\">setup_max_cpus</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#possible\">possible</a> += <a class=\"id\" href=\"#disabled_cpus\">disabled_cpus</a>;", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#possible\">possible</a> &gt; <a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#possible\">possible</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#possible\">possible</a> = <a class=\"id\" href=\"#setup_possible_cpus\">setup_possible_cpus</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total_cpus\">total_cpus</a> = <a class=\"id\" href=\"#max_t\">max_t</a>(int, <a class=\"id\" href=\"#possible\">possible</a>, <a class=\"id\" href=\"#num_processors\">num_processors</a> + <a class=\"id\" href=\"#disabled_cpus\">disabled_cpus</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* nr_cpu_ids could be reduced via nr_cpus= */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#possible\">possible</a> &gt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%d Processors exceeds NR_CPUS limit of %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#possible\">possible</a>, <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#possible\">possible</a> = <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>;", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#setup_max_cpus\">setup_max_cpus</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#possible\">possible</a> &gt; <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%d Processors exceeds max_cpus limit of %u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#possible\">possible</a>, <a class=\"id\" href=\"#setup_max_cpus\">setup_max_cpus</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#possible\">possible</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"SMP: Allowing %d CPUs, %d hotplug CPUs\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#possible\">possible</a>, <a class=\"id\" href=\"#max_t\">max_t</a>(int, <a class=\"id\" href=\"#possible\">possible</a> - <a class=\"id\" href=\"#num_processors\">num_processors</a>, 0));", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#possible\">possible</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_possible\">set_cpu_possible</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_possible\">set_cpu_possible</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> = <a class=\"id\" href=\"#possible\">possible</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"", 
"static void <a class=\"id\" href=\"#remove_siblinginfo\">remove_siblinginfo</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sibling\">sibling</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a> = &amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#sibling\">sibling</a>, <a class=\"id\" href=\"#cpu_core_mask\">cpu_core_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_core_mask\">cpu_core_mask</a>(<a class=\"id\" href=\"#sibling\">sibling</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*/</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * last thread sibling in this cpu core going down</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_weight\">cpumask_weight</a>(<a class=\"id\" href=\"#cpu_sibling_mask\">cpu_sibling_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)) == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#sibling\">sibling</a>).<a class=\"id\" href=\"#booted_cores\">booted_cores</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#sibling\">sibling</a>, <a class=\"id\" href=\"#cpu_sibling_mask\">cpu_sibling_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_sibling_mask\">cpu_sibling_mask</a>(<a class=\"id\" href=\"#sibling\">sibling</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear\">cpumask_clear</a>(<a class=\"id\" href=\"#cpu_sibling_mask\">cpu_sibling_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear\">cpumask_clear</a>(<a class=\"id\" href=\"#cpu_core_mask\">cpu_core_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#phys_proc_id\">phys_proc_id</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpu_core_id\">cpu_core_id</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_sibling_setup_mask\">cpu_sibling_setup_mask</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__ref\">__ref</a> <a class=\"id\" href=\"#remove_cpu_from_maps\">remove_cpu_from_maps</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_online\">set_cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_callout_mask\">cpu_callout_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_callin_mask\">cpu_callin_mask</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* was set by cpu_init() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_initialized_mask\">cpu_initialized_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#numa_remove_cpu\">numa_remove_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#cpu_disable_common\">cpu_disable_common</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remove_siblinginfo\">remove_siblinginfo</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* It's now safe to remove this processor from the online map */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_vector_lock\">lock_vector_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remove_cpu_from_maps\">remove_cpu_from_maps</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_vector_lock\">unlock_vector_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fixup_irqs\">fixup_irqs</a>();", 
"}", 
"", 
"int <a class=\"id\" href=\"#native_cpu_disable\">native_cpu_disable</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Perhaps use cpufreq to drop frequency, but that could go</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * into generic code.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We won't take down the boot processor on i386 due to some</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * interrupts only being able to be serviced by the BSP.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Especially so if we're not using an IOAPIC<span class=\"ts\"/>-zwane</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a> == <a class=\"id\" href=\"#NMI_LOCAL_APIC\">NMI_LOCAL_APIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stop_apic_nmi_watchdog\">stop_apic_nmi_watchdog</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_local_APIC\">clear_local_APIC</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_disable_common\">cpu_disable_common</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#native_cpu_die\">native_cpu_die</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* We don't do anything here: idle task is faking death itself. */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 10; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* They ack this in play_dead by setting CPU_DEAD */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_state\">cpu_state</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) == <a class=\"id\" href=\"#CPU_DEAD\">CPU_DEAD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#system_state\">system_state</a> == <a class=\"id\" href=\"#SYSTEM_RUNNING\">SYSTEM_RUNNING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"CPU %u is now offline\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (1 == <a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alternatives_smp_switch\">alternatives_smp_switch</a>(0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(100);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"CPU %u didn't die...\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#play_dead_common\">play_dead_common</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idle_task_exit\">idle_task_exit</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reset_lazy_tlbstate\">reset_lazy_tlbstate</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_ctx_exit\">irq_ctx_exit</a>(<a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c1e_remove_cpu\">c1e_remove_cpu</a>(<a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb\">mb</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* Ack it */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_state\">cpu_state</a>) = <a class=\"id\" href=\"#CPU_DEAD\">CPU_DEAD</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * With physical CPU hotplug, we should halt the cpu</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#native_play_dead\">native_play_dead</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#play_dead_common\">play_dead_common</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tboot_shutdown\">tboot_shutdown</a>(<a class=\"id\" href=\"#TB_SHUTDOWN_WFS\">TB_SHUTDOWN_WFS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wbinvd_halt\">wbinvd_halt</a>();", 
"}", 
"", 
"#else <span class=\"comment\">/* ... !CONFIG_HOTPLUG_CPU */</span>", 
"int <a class=\"id\" href=\"#native_cpu_disable\">native_cpu_disable</a>(void)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#native_cpu_die\">native_cpu_die</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* We said \"no\" in __cpu_disable */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#native_play_dead\">native_play_dead</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/3e/c2ad3eabcb67e83bf3b79319984b46911536f6.xr', __xr_tmp);
