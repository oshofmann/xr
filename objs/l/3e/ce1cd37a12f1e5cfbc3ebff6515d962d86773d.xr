var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Copyright (C) 1994-1998   Linus Torvalds &amp; authors (see below)</span>", 
"<span class=\"comment\"> *  Copyright (C) 2005, 2007  Bartlomiej Zolnierkiewicz</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Mostly written by Mark Lord &lt;mlord@pobox.com&gt;</span>", 
"<span class=\"comment\"> *                and Gadi Oxman &lt;gadio@netvision.net.il&gt;</span>", 
"<span class=\"comment\"> *                and Andre Hedrick &lt;andre@linux-ide.org&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  See linux/MAINTAINERS for address of current maintainer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the IDE probe module, as evolved from hd.c and ide.c.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * -- increase WAIT_PIDENTIFY to avoid CD-ROM locking at boot</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/> by Andrea Arcangeli</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#major\">major</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#genhd\">genhd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ide\">ide</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmod\">kmod</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#scatterlist\">scatterlist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#byteorder\">byteorder</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#irq\">irq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>generic_id<span class=\"ts\"/><span class=\"ts\"/>-<span class=\"ts\"/>add a generic drive id</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@drive:<span class=\"ts\"/>drive to make an ID block for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/></span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Add a fake id field to the drive we are passed. This allows</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>use to skip a ton of NULL checks (which people always miss) </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and make drive properties unconditional outside of this file</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"static void <a class=\"id\" href=\"#generic_id\">generic_id</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CUR_CYLS\">ATA_ID_CUR_CYLS</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CYLS\">ATA_ID_CYLS</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#cyl\">cyl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CUR_HEADS\">ATA_ID_CUR_HEADS</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_HEADS\">ATA_ID_HEADS</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CUR_SECTORS\">ATA_ID_CUR_SECTORS</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_SECTORS\">ATA_ID_SECTORS</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#sect\">sect</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ide_disk_init_chs\">ide_disk_init_chs</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Extract geometry if we did not already have one for the drive */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#cyl\">cyl</a> || !<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#head\">head</a> || !<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#sect\">sect</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#cyl\">cyl</a>  = <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#bios_cyl\">bios_cyl</a>  = <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CYLS\">ATA_ID_CYLS</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#bios_head\">bios_head</a> = <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_HEADS\">ATA_ID_HEADS</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#sect\">sect</a> = <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#bios_sect\">bios_sect</a> = <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_SECTORS\">ATA_ID_SECTORS</a>];", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Handle logical geometry translation by the drive */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_current_chs_valid\">ata_id_current_chs_valid</a>(<a class=\"id\" href=\"#id\">id</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#cyl\">cyl</a>  = <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CUR_CYLS\">ATA_ID_CUR_CYLS</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CUR_HEADS\">ATA_ID_CUR_HEADS</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#sect\">sect</a> = <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CUR_SECTORS\">ATA_ID_CUR_SECTORS</a>];", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Use physical geometry if what we have still makes no sense */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#head\">head</a> &gt; 16 && <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_HEADS\">ATA_ID_HEADS</a>] && <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_HEADS\">ATA_ID_HEADS</a>] <= 16) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#cyl\">cyl</a>  = <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CYLS\">ATA_ID_CYLS</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_HEADS\">ATA_ID_HEADS</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#sect\">sect</a> = <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_SECTORS\">ATA_ID_SECTORS</a>];", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ide_disk_init_mult_count\">ide_disk_init_mult_count</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#max_multsect\">max_multsect</a> = <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_MAX_MULTSECT\">ATA_ID_MAX_MULTSECT</a>] &amp; 0xff;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_multsect\">max_multsect</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#max_multsect\">max_multsect</a> / 2) &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_MULTSECT\">ATA_ID_MULTSECT</a>] = <a class=\"id\" href=\"#max_multsect\">max_multsect</a> | 0x100;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_MULTSECT\">ATA_ID_MULTSECT</a>] &= ~0x1ff;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#mult_req\">mult_req</a> = <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_MULTSECT\">ATA_ID_MULTSECT</a>] &amp; 0xff;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#mult_req\">mult_req</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#special_flags\">special_flags</a> |= <a class=\"id\" href=\"#IDE_SFLAG_SET_MULTMODE\">IDE_SFLAG_SET_MULTMODE</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ide_classify_ata_dev\">ide_classify_ata_dev</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#m\">m</a> = (char *)&amp;<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_PROD\">ATA_ID_PROD</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_cfa\">is_cfa</a> = <a class=\"id\" href=\"#ata_id_is_cfa\">ata_id_is_cfa</a>(<a class=\"id\" href=\"#id\">id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* CF devices are *not* removable in Linux definition of the term */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_cfa\">is_cfa</a> == 0 && (<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CONFIG\">ATA_ID_CONFIG</a>] &amp; (1 << 7)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> |= <a class=\"id\" href=\"#IDE_DFLAG_REMOVABLE\">IDE_DFLAG_REMOVABLE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#media\">media</a> = <a class=\"id\" href=\"#ide_disk\">ide_disk</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ata_id_has_unload\">ata_id_has_unload</a>(<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#id\">id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> |= <a class=\"id\" href=\"#IDE_DFLAG_NO_UNLOAD\">IDE_DFLAG_NO_UNLOAD</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s: %s, %s DISK drive\\n\", <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#m\">m</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_cfa\">is_cfa</a> ? \"CFA\" : \"ATA\");", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ide_classify_atapi_dev\">ide_classify_atapi_dev</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#m\">m</a> = (char *)&amp;<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_PROD\">ATA_ID_PROD</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a> = (<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CONFIG\">ATA_ID_CONFIG</a>] >> 8) &amp; 0x1f;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s: %s, ATAPI \", <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#m\">m</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ide_floppy\">ide_floppy</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strstr\">strstr</a>(<a class=\"id\" href=\"#m\">m</a>, \"CD-ROM\")) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strstr\">strstr</a>(<a class=\"id\" href=\"#m\">m</a>, \"oppy\") &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#strstr\">strstr</a>(<a class=\"id\" href=\"#m\">m</a>, \"poyp\") &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#strstr\">strstr</a>(<a class=\"id\" href=\"#m\">m</a>, \"ZIP\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"cdrom or floppy?, assuming \");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#media\">media</a> != <a class=\"id\" href=\"#ide_cdrom\">ide_cdrom</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"FLOPPY\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> |= <a class=\"id\" href=\"#IDE_DFLAG_REMOVABLE\">IDE_DFLAG_REMOVABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Early cdrom models used zero */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ide_cdrom\">ide_cdrom</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ide_cdrom\">ide_cdrom</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> |= <a class=\"id\" href=\"#IDE_DFLAG_REMOVABLE\">IDE_DFLAG_REMOVABLE</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PPC\">CONFIG_PPC</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* kludge for Apple PowerBook internal zip */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strstr\">strstr</a>(<a class=\"id\" href=\"#m\">m</a>, \"CD-ROM\") && <a class=\"id\" href=\"#strstr\">strstr</a>(<a class=\"id\" href=\"#m\">m</a>, \"ZIP\")) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"FLOPPY\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ide_floppy\">ide_floppy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"CD/DVD-ROM\");", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ide_tape\">ide_tape</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"TAPE\");", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ide_optical\">ide_optical</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"OPTICAL\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> |= <a class=\"id\" href=\"#IDE_DFLAG_REMOVABLE\">IDE_DFLAG_REMOVABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"UNKNOWN (type %d)\", <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \" drive\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#media\">media</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* an ATAPI device ignores DRDY */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#ready_stat\">ready_stat</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_cdb_intr\">ata_id_cdb_intr</a>(<a class=\"id\" href=\"#id\">id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#atapi_flags\">atapi_flags</a> |= <a class=\"id\" href=\"#IDE_AFLAG_DRQ_INTERRUPT\">IDE_AFLAG_DRQ_INTERRUPT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> |= <a class=\"id\" href=\"#IDE_DFLAG_DOORLOCKING\">IDE_DFLAG_DOORLOCKING</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* we don't do head unloading on ATAPI devices */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> |= <a class=\"id\" href=\"#IDE_DFLAG_NO_UNLOAD\">IDE_DFLAG_NO_UNLOAD</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>do_identify<span class=\"ts\"/>-<span class=\"ts\"/>identify a drive</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@drive: drive to identify </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd: command used</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@id: buffer for IDENTIFY data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called when we have issued a drive identify command to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>read and parse the results. This function is run with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interrupts disabled. </span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#do_identify\">do_identify</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a> = <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#hwif\">hwif</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#m\">m</a> = (char *)&amp;<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_PROD\">ATA_ID_PROD</a>];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bswap\">bswap</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* local CPU only; some systems need this */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* read 512 bytes of id info */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#input_data\">input_data</a>(<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#SECTOR_SIZE\">SECTOR_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> |= <a class=\"id\" href=\"#IDE_DFLAG_ID_READ\">IDE_DFLAG_ID_READ</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s: dumping identify data\\n\", <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_dump_identify\">ide_dump_identify</a>((<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#id\">id</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_fix_driveid\">ide_fix_driveid</a>(<a class=\"id\" href=\"#id\">id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  ATA_CMD_ID_ATA returns little-endian info,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  ATA_CMD_ID_ATAPI *usually* returns little-endian info.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a> == <a class=\"id\" href=\"#ATA_CMD_ID_ATAPI\">ATA_CMD_ID_ATAPI</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#m\">m</a>[0] == 'N' && <a class=\"id\" href=\"#m\">m</a>[1] == 'E') ||  <span class=\"comment\">/* NEC */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#m\">m</a>[0] == 'F' && <a class=\"id\" href=\"#m\">m</a>[1] == 'X') ||  <span class=\"comment\">/* Mitsumi */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#m\">m</a>[0] == 'P' && <a class=\"id\" href=\"#m\">m</a>[1] == 'i'))    <span class=\"comment\">/* Pioneer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Vertos drives may still be weird */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bswap\">bswap</a> ^= 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_fixstring\">ide_fixstring</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#ATA_ID_PROD_LEN\">ATA_ID_PROD_LEN</a>, <a class=\"id\" href=\"#bswap\">bswap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_fixstring\">ide_fixstring</a>((char *)&amp;<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_FW_REV\">ATA_ID_FW_REV</a>], <a class=\"id\" href=\"#ATA_ID_FW_REV_LEN\">ATA_ID_FW_REV_LEN</a>, <a class=\"id\" href=\"#bswap\">bswap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_fixstring\">ide_fixstring</a>((char *)&amp;<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_SERNO\">ATA_ID_SERNO</a>], <a class=\"id\" href=\"#ATA_ID_SERNO_LEN\">ATA_ID_SERNO_LEN</a>, <a class=\"id\" href=\"#bswap\">bswap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we depend on this a lot! */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>[<a class=\"id\" href=\"#ATA_ID_PROD_LEN\">ATA_ID_PROD_LEN</a> - 1] = '\\0';", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strstr\">strstr</a>(<a class=\"id\" href=\"#m\">m</a>, \"E X A B Y T E N E S T\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &= ~<a class=\"id\" href=\"#IDE_DFLAG_PRESENT\">IDE_DFLAG_PRESENT</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> |= <a class=\"id\" href=\"#IDE_DFLAG_PRESENT\">IDE_DFLAG_PRESENT</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ide_dev_read_id<span class=\"ts\"/>-<span class=\"ts\"/>send ATA/ATAPI IDENTIFY command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@drive: drive to identify</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd: command to use</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@id: buffer for IDENTIFY data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@irq_ctx: flag set when called from the IRQ context</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Sends an ATA(PI) IDENTIFY request to a drive and waits for a response.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns:<span class=\"ts\"/>0  device was identified</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1  device timed-out (no response to identify request)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>2  device aborted the command (refused to identify itself)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#ide_dev_read_id\">ide_dev_read_id</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>, int <a class=\"id\" href=\"#irq_ctx\">irq_ctx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a> = <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#hwif\">hwif</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_io_ports\">ide_io_ports</a> *<a class=\"id\" href=\"#io_ports\">io_ports</a> = &amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#io_ports\">io_ports</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ide_tp_ops\">ide_tp_ops</a> *<a class=\"id\" href=\"#tp_ops\">tp_ops</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#tp_ops\">tp_ops</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#use_altstatus\">use_altstatus</a> = 0, <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#s\">s</a> = 0, <a class=\"id\" href=\"#a\">a</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Disable device IRQ.  Otherwise we'll get spurious interrupts</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * during the identify phase that the IRQ handler isn't expecting.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#io_ports\">io_ports</a>-><a class=\"id\" href=\"#ctl_addr\">ctl_addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#write_devctl\">write_devctl</a>(<a class=\"id\" href=\"#hwif\">hwif</a>, <a class=\"id\" href=\"#ATA_NIEN\">ATA_NIEN</a> | <a class=\"id\" href=\"#ATA_DEVCTL_OBS\">ATA_DEVCTL_OBS</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* take a deep breath */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#irq_ctx\">irq_ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mdelay\">mdelay</a>(50);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(50);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#io_ports\">io_ports</a>-><a class=\"id\" href=\"#ctl_addr\">ctl_addr</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a> &amp; <a class=\"id\" href=\"#IDE_HFLAG_BROKEN_ALTSTATUS\">IDE_HFLAG_BROKEN_ALTSTATUS</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a> = <a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#read_altstatus\">read_altstatus</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#read_status\">read_status</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#a\">a</a> ^ <a class=\"id\" href=\"#s\">s</a>) &amp; ~<a class=\"id\" href=\"#ATA_IDX\">ATA_IDX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ancient Seagate drives, broken interfaces */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s: probing with STATUS(0x%02x) \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"instead of ALTSTATUS(0x%02x)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#a\">a</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* use non-intrusive polling */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#use_altstatus\">use_altstatus</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set features register for atapi</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * identify command to be sure of reply</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a> == <a class=\"id\" href=\"#ATA_CMD_ID_ATAPI\">ATA_CMD_ID_ATAPI</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_taskfile\">ide_taskfile</a> <a class=\"id\" href=\"#tf\">tf</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#tf\">tf</a>, 0, sizeof(<a class=\"id\" href=\"#tf\">tf</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* disable DMA &amp; overlap */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#tf_load\">tf_load</a>(<a class=\"id\" href=\"#drive\">drive</a>, &amp;<a class=\"id\" href=\"#tf\">tf</a>, <a class=\"id\" href=\"#IDE_VALID_FEATURE\">IDE_VALID_FEATURE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ask drive for ID */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#exec_command\">exec_command</a>(<a class=\"id\" href=\"#hwif\">hwif</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = ((<a class=\"id\" href=\"#cmd\">cmd</a> == <a class=\"id\" href=\"#ATA_CMD_ID_ATA\">ATA_CMD_ID_ATA</a>) ? <a class=\"id\" href=\"#WAIT_WORSTCASE\">WAIT_WORSTCASE</a> : <a class=\"id\" href=\"#WAIT_PIDENTIFY\">WAIT_PIDENTIFY</a>) / 2;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* wait for IRQ and ATA_DRQ */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#irq_ctx\">irq_ctx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#__ide_wait_stat\">__ide_wait_stat</a>(<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#ATA_DRQ\">ATA_DRQ</a>, <a class=\"id\" href=\"#BAD_R_STAT\">BAD_R_STAT</a>, <a class=\"id\" href=\"#timeout\">timeout</a>, &amp;<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ide_busy_sleep\">ide_busy_sleep</a>(<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#timeout\">timeout</a>, <a class=\"id\" href=\"#use_altstatus\">use_altstatus</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(50);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#read_status\">read_status</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#OK_STAT\">OK_STAT</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#ATA_DRQ\">ATA_DRQ</a>, <a class=\"id\" href=\"#BAD_R_STAT\">BAD_R_STAT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* drive returned ID */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_identify\">do_identify</a>(<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* drive responded with ID */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* clear drive IRQ */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#read_status\">read_status</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* drive refused ID */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 2;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#ide_busy_sleep\">ide_busy_sleep</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>, unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>, int <a class=\"id\" href=\"#altstatus\">altstatus</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a> = <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#hwif\">hwif</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#stat\">stat</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> += <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(50);<span class=\"ts\"/><span class=\"comment\">/* give drive a breather */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stat\">stat</a> = <a class=\"id\" href=\"#altstatus\">altstatus</a> ? <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#read_altstatus\">read_altstatus</a>(<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> : <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#read_status\">read_status</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#stat\">stat</a> &amp; <a class=\"id\" href=\"#ATA_BUSY\">ATA_BUSY</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#timeout\">timeout</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: timeout in %s\\n\", <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"", 
"<span class=\"ts\"/>return 1;<span class=\"ts\"/><span class=\"comment\">/* drive timed-out */</span>", 
"}", 
"", 
"static <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ide_read_device\">ide_read_device</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_taskfile\">ide_taskfile</a> <a class=\"id\" href=\"#tf\">tf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#tf_read\">tf_read</a>(<a class=\"id\" href=\"#drive\">drive</a>, &amp;<a class=\"id\" href=\"#tf\">tf</a>, <a class=\"id\" href=\"#IDE_VALID_DEVICE\">IDE_VALID_DEVICE</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#device\">device</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>do_probe<span class=\"ts\"/><span class=\"ts\"/>-<span class=\"ts\"/>probe an IDE device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@drive: drive to probe</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd: command to use</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>do_probe() has the difficult job of finding a drive if it exists,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>without getting hung up if it doesn't exist, without trampling on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ethernet cards, and without leaving any IRQs dangling to haunt us later.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If a drive is \"known\" to exist (from CMOS or kernel parameters),</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>but does not respond right away, the probe will \"hang in there\"</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for the maximum wait time (about 30 seconds), otherwise it will</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>exit much more quickly.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:<span class=\"ts\"/>0  device was identified</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>1  device timed-out (no response to identify request)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>2  device aborted the command (refused to identify itself)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>3  bad status from device (possible for ATAPI drives)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>4  probe was not attempted because failure was obvious</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#do_probe\">do_probe</a> (<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a> = <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#hwif\">hwif</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ide_tp_ops\">ide_tp_ops</a> *<a class=\"id\" href=\"#tp_ops\">tp_ops</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#tp_ops\">tp_ops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#present\">present</a> = !!(<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &amp; <a class=\"id\" href=\"#IDE_DFLAG_PRESENT\">IDE_DFLAG_PRESENT</a>), <a class=\"id\" href=\"#stat\">stat</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* avoid waiting for inappropriate probes */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#present\">present</a> && <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#media\">media</a> != <a class=\"id\" href=\"#ide_disk\">ide_disk</a> && <a class=\"id\" href=\"#cmd\">cmd</a> == <a class=\"id\" href=\"#ATA_CMD_ID_ATA\">ATA_CMD_ID_ATA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 4;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"probing for %s: present=%d, media=%d, probetype=%s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#present\">present</a>, <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#media\">media</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cmd\">cmd</a> == <a class=\"id\" href=\"#ATA_CMD_ID_ATA\">ATA_CMD_ID_ATA</a>) ? \"ATA\" : \"ATAPI\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* needed for some systems</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (e.g. crw9624 as drive0 with disk as slave)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(50);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#dev_select\">dev_select</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(50);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ide_read_device\">ide_read_device</a>(<a class=\"id\" href=\"#drive\">drive</a>) != <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#select\">select</a> && <a class=\"id\" href=\"#present\">present</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dn\">dn</a> &amp; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* exit with drive0 selected */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#dev_select\">dev_select</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#devices\">devices</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* allow ATA_BUSY to assert &amp; clear */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(50);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no i/f present: mmm.. this should be a 4 -ml */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 3;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stat\">stat</a> = <a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#read_status\">read_status</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#OK_STAT\">OK_STAT</a>(<a class=\"id\" href=\"#stat\">stat</a>, <a class=\"id\" href=\"#ATA_DRDY\">ATA_DRDY</a>, <a class=\"id\" href=\"#ATA_BUSY\">ATA_BUSY</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#present\">present</a> || <a class=\"id\" href=\"#cmd\">cmd</a> == <a class=\"id\" href=\"#ATA_CMD_ID_ATAPI\">ATA_CMD_ID_ATAPI</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ide_dev_read_id\">ide_dev_read_id</a>(<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#id\">id</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* failed: try again */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ide_dev_read_id\">ide_dev_read_id</a>(<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#id\">id</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stat\">stat</a> = <a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#read_status\">read_status</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#stat\">stat</a> == (<a class=\"id\" href=\"#ATA_BUSY\">ATA_BUSY</a> | <a class=\"id\" href=\"#ATA_DRDY\">ATA_DRDY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 4;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 1 && <a class=\"id\" href=\"#cmd\">cmd</a> == <a class=\"id\" href=\"#ATA_CMD_ID_ATAPI\">ATA_CMD_ID_ATAPI</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: no response (status = 0x%02x), \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"resetting drive\\n\", <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#stat\">stat</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(50);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#dev_select\">dev_select</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(50);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#exec_command\">exec_command</a>(<a class=\"id\" href=\"#hwif\">hwif</a>, <a class=\"id\" href=\"#ATA_CMD_DEV_RESET\">ATA_CMD_DEV_RESET</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#ide_busy_sleep\">ide_busy_sleep</a>(<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#WAIT_WORSTCASE\">WAIT_WORSTCASE</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ide_dev_read_id\">ide_dev_read_id</a>(<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#id\">id</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ensure drive IRQ is clear */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stat\">stat</a> = <a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#read_status\">read_status</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: no response (status = 0x%02x)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#stat\">stat</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* not present or maybe ATAPI */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 3;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dn\">dn</a> &amp; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* exit with drive0 selected */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#dev_select\">dev_select</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#devices\">devices</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(50);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ensure drive irq is clear */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#read_status\">read_status</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>probe_for_drives<span class=\"ts\"/>-<span class=\"ts\"/>upper level drive probe</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@drive: drive to probe for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>probe_for_drive() tests for existence of a given drive using do_probe()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and presents things to the user as needed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns:<span class=\"ts\"/>0  no device was found</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1  device was found</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (note: IDE_DFLAG_PRESENT might still be not set)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#probe_for_drive\">probe_for_drive</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#cmd\">cmd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &= ~<a class=\"id\" href=\"#IDE_DFLAG_ID_READ\">IDE_DFLAG_ID_READ</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = (char *)&amp;<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_PROD\">ATA_ID_PROD</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#m\">m</a>, \"UNKNOWN\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* skip probing? */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &amp; <a class=\"id\" href=\"#IDE_DFLAG_NOPROBE\">IDE_DFLAG_NOPROBE</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if !(success||timed-out) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#ATA_CMD_ID_ATA\">ATA_CMD_ID_ATA</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#do_probe\">do_probe</a>(<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> >= 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* look for ATAPI device */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#ATA_CMD_ID_ATAPI\">ATA_CMD_ID_ATAPI</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#do_probe\">do_probe</a>(<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &amp; <a class=\"id\" href=\"#IDE_DFLAG_PRESENT\">IDE_DFLAG_PRESENT</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* identification failed? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &amp; <a class=\"id\" href=\"#IDE_DFLAG_ID_READ\">IDE_DFLAG_ID_READ</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#media\">media</a> == <a class=\"id\" href=\"#ide_disk\">ide_disk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s: non-IDE drive, CHS=%d/%d/%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#cyl\">cyl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#media\">media</a> == <a class=\"id\" href=\"#ide_cdrom\">ide_cdrom</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s: ATAPI cdrom (?)\\n\", <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nuke it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: Unknown device on bus refused identification. Ignoring.\\n\", <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &= ~<a class=\"id\" href=\"#IDE_DFLAG_PRESENT\">IDE_DFLAG_PRESENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a> == <a class=\"id\" href=\"#ATA_CMD_ID_ATAPI\">ATA_CMD_ID_ATAPI</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_classify_atapi_dev\">ide_classify_atapi_dev</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_classify_ata_dev\">ide_classify_ata_dev</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &amp; <a class=\"id\" href=\"#IDE_DFLAG_PRESENT\">IDE_DFLAG_PRESENT</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The drive wasn't being helpful. Add generic info only */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &amp; <a class=\"id\" href=\"#IDE_DFLAG_ID_READ\">IDE_DFLAG_ID_READ</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#generic_id\">generic_id</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#media\">media</a> == <a class=\"id\" href=\"#ide_disk\">ide_disk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_disk_init_chs\">ide_disk_init_chs</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_disk_init_mult_count\">ide_disk_init_mult_count</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#hwif_release_dev\">hwif_release_dev</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a>, <a class=\"id\" href=\"#gendev\">gendev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#gendev_rel_comp\">gendev_rel_comp</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ide_register_port\">ide_register_port</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* register with global device tree */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_name\">dev_set_name</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#gendev\">gendev</a>, <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_drvdata\">dev_set_drvdata</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#gendev\">gendev</a>, <a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#gendev\">gendev</a>.<a class=\"id\" href=\"#parent\">parent</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#gendev\">gendev</a>.<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#gendev\">gendev</a>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#hwif_release_dev\">hwif_release_dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#device_register\">device_register</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#gendev\">gendev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"IDE: %s: device_register error: %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#portdev\">portdev</a> = <a class=\"id\" href=\"#device_create\">device_create</a>(<a class=\"id\" href=\"#ide_port_class\">ide_port_class</a>, &amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#gendev\">gendev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(0, 0), <a class=\"id\" href=\"#hwif\">hwif</a>, <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#portdev\">portdev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#portdev\">portdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_unregister\">device_unregister</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#gendev\">gendev</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ide_port_wait_ready<span class=\"ts\"/>-<span class=\"ts\"/>wait for port to become ready</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@hwif: IDE port</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is needed on some PPCs and a bunch of BIOS-less embedded</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>platforms.  Typical cases are:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- The firmware hard reset the disk before booting the kernel,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  the drive is still doing it's poweron-reset sequence, that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  can take up to 30 seconds.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- The firmware does nothing (or no firmware), the device is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  still in POST state (same as above actually).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Some CD/DVD/Writer combo drives tend to drive the bus during</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  their reset sequence even when they are non-selected slave</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  devices, thus preventing discovery of the main HD.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Doing this wait-for-non-busy should not harm any existing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>configuration and fix some issues like the above.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>BenH.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns 0 on success, error code (&lt; 0) otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#ide_port_wait_ready\">ide_port_wait_ready</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ide_tp_ops\">ide_tp_ops</a> *<a class=\"id\" href=\"#tp_ops\">tp_ops</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#tp_ops\">tp_ops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"Probing IDE interface %s...\\n\", <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Let HW settle down a bit from whatever init state we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * come from */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdelay\">mdelay</a>(2);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait for BSY bit to go away, spec timeout is 30 seconds,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * I know of at least one disk who takes 31 seconds, I use 35</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here to be safe</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ide_wait_not_busy\">ide_wait_not_busy</a>(<a class=\"id\" href=\"#hwif\">hwif</a>, 35000);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now make sure both master &amp; slave are ready */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_port_for_each_dev\">ide_port_for_each_dev</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#hwif\">hwif</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ignore disks that we will not probe for later. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &amp; <a class=\"id\" href=\"#IDE_DFLAG_NOPROBE\">IDE_DFLAG_NOPROBE</a>) == 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &amp; <a class=\"id\" href=\"#IDE_DFLAG_PRESENT\">IDE_DFLAG_PRESENT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#dev_select\">dev_select</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#write_devctl\">write_devctl</a>(<a class=\"id\" href=\"#hwif\">hwif</a>, <a class=\"id\" href=\"#ATA_DEVCTL_OBS\">ATA_DEVCTL_OBS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mdelay\">mdelay</a>(2);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ide_wait_not_busy\">ide_wait_not_busy</a>(<a class=\"id\" href=\"#hwif\">hwif</a>, 35000);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"%s: ide_wait_not_busy() skipped\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Exit function with master reselected (let's be sane) */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#dev_select\">dev_select</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#devices\">devices</a>[0]);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ide_undecoded_slave<span class=\"ts\"/>-<span class=\"ts\"/>look for bad CF adapters</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev1: slave device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Analyse the drives on the interface and attempt to decide if we</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>have the same drive viewed twice. This occurs with crap CF adapters</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and PCMCIA sometimes.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#ide_undecoded_slave\">ide_undecoded_slave</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#dev1\">dev1</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#dev0\">dev0</a> = <a class=\"id\" href=\"#dev1\">dev1</a>-><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#devices\">devices</a>[0];", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev1\">dev1</a>-><a class=\"id\" href=\"#dn\">dn</a> &amp; 1) == 0 || (<a class=\"id\" href=\"#dev0\">dev0</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &amp; <a class=\"id\" href=\"#IDE_DFLAG_PRESENT\">IDE_DFLAG_PRESENT</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the models don't match they are not the same product */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>((char *)&amp;<a class=\"id\" href=\"#dev0\">dev0</a>-><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_PROD\">ATA_ID_PROD</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/>   (char *)&amp;<a class=\"id\" href=\"#dev1\">dev1</a>-><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_PROD\">ATA_ID_PROD</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Serial numbers do not match */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>((char *)&amp;<a class=\"id\" href=\"#dev0\">dev0</a>-><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_SERNO\">ATA_ID_SERNO</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/>    (char *)&amp;<a class=\"id\" href=\"#dev1\">dev1</a>-><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_SERNO\">ATA_ID_SERNO</a>], <a class=\"id\" href=\"#ATA_ID_SERNO_LEN\">ATA_ID_SERNO_LEN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No serial number, thankfully very rare for CF */</span>", 
"<span class=\"ts\"/>if (*(char *)&amp;<a class=\"id\" href=\"#dev0\">dev0</a>-><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_SERNO\">ATA_ID_SERNO</a>] == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Appears to be an IDE flash adapter with decode bugs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"ide-probe: ignoring undecoded slave\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev1\">dev1</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &= ~<a class=\"id\" href=\"#IDE_DFLAG_PRESENT\">IDE_DFLAG_PRESENT</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ide_undecoded_slave\">ide_undecoded_slave</a>);", 
"", 
"static int <a class=\"id\" href=\"#ide_probe_port\">ide_probe_port</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#irqd\">irqd</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#present\">present</a>);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#devices\">devices</a>[0]-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &amp; <a class=\"id\" href=\"#IDE_DFLAG_NOPROBE\">IDE_DFLAG_NOPROBE</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#devices\">devices</a>[1]-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &amp; <a class=\"id\" href=\"#IDE_DFLAG_NOPROBE\">IDE_DFLAG_NOPROBE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We must always disable IRQ, as probe_for_drive will assert IRQ, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we'll install our IRQ driver much later...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irqd\">irqd</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#irq\">irq</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#irqd\">irqd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_irq\">disable_irq</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ide_port_wait_ready\">ide_port_wait_ready</a>(<a class=\"id\" href=\"#hwif\">hwif</a>) == -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"%s: Wait for ready failed before probe !\\n\", <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Second drive should only exist if first drive was found,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but a lot of cdrom drives are configured as single slaves.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_port_for_each_dev\">ide_port_for_each_dev</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#hwif\">hwif</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>(void) <a class=\"id\" href=\"#probe_for_drive\">probe_for_drive</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &amp; <a class=\"id\" href=\"#IDE_DFLAG_PRESENT\">IDE_DFLAG_PRESENT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Use cached IRQ number. It might be (and is...) changed by probe</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * code above</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#irqd\">irqd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_irq\">enable_irq</a>(<a class=\"id\" href=\"#irqd\">irqd</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ide_port_tune_devices\">ide_port_tune_devices</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ide_port_ops\">ide_port_ops</a> *<a class=\"id\" href=\"#port_ops\">port_ops</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#port_ops\">port_ops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_port_for_each_present_dev\">ide_port_for_each_present_dev</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#hwif\">hwif</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_check_nien_quirk_list\">ide_check_nien_quirk_list</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#port_ops\">port_ops</a> && <a class=\"id\" href=\"#port_ops\">port_ops</a>-><a class=\"id\" href=\"#quirkproc\">quirkproc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port_ops\">port_ops</a>-><a class=\"id\" href=\"#quirkproc\">quirkproc</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_port_for_each_present_dev\">ide_port_for_each_present_dev</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#hwif\">hwif</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_set_max_pio\">ide_set_max_pio</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> |= <a class=\"id\" href=\"#IDE_DFLAG_NICE1\">IDE_DFLAG_NICE1</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#dma_ops\">dma_ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_set_dma\">ide_set_dma</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * init request queue</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ide_init_queue\">ide_init_queue</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a> = <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#hwif\">hwif</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_sectors\">max_sectors</a> = 256;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_sg_entries\">max_sg_entries</a> = <a class=\"id\" href=\"#PRD_ENTRIES\">PRD_ENTRIES</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Our default set up assumes the normal IDE case,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>that is 64K segmenting, standard PRD setup</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>and LBA28. Some drivers then impose their own</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>limits and LBA48 we could raise it but as yet</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>do not.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#blk_init_queue_node\">blk_init_queue_node</a>(<a class=\"id\" href=\"#do_ide_request\">do_ide_request</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#hwif_to_node\">hwif_to_node</a>(<a class=\"id\" href=\"#hwif\">hwif</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queuedata\">queuedata</a> = <a class=\"id\" href=\"#drive\">drive</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_segment_boundary\">blk_queue_segment_boundary</a>(<a class=\"id\" href=\"#q\">q</a>, 0xffff);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#rqsize\">rqsize</a> &lt; <a class=\"id\" href=\"#max_sectors\">max_sectors</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_sectors\">max_sectors</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#rqsize\">rqsize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_max_hw_sectors\">blk_queue_max_hw_sectors</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#max_sectors\">max_sectors</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PCI\">CONFIG_PCI</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* When we have an IOMMU, we may have a problem where pci_map_sg()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * creates segments that don't completely match our boundary</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * requirements and thus need to be broken up again. Because it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * doesn't align properly either, we may actually have to break up</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to more segments than what was we got in the first place, a max</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * worst case is twice as many.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This will be fixed once we teach pci_map_sg() about our boundary</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * requirements, hopefully soon. *FIXME*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PCI_DMA_BUS_IS_PHYS\">PCI_DMA_BUS_IS_PHYS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_sg_entries\">max_sg_entries</a> >>= 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PCI */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_max_segments\">blk_queue_max_segments</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#max_sg_entries\">max_sg_entries</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* assign drive queue */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#queue\">queue</a> = <a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* needs drive-&gt;queue to be set */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_toggle_bounce\">ide_toggle_bounce</a>(<a class=\"id\" href=\"#drive\">drive</a>, 1);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#ide_cfg_mtx\">ide_cfg_mtx</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For any present drive:</span>", 
"<span class=\"comment\"> * - allocate the block device queue</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ide_port_setup_devices\">ide_port_setup_devices</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ide_cfg_mtx\">ide_cfg_mtx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_port_for_each_present_dev\">ide_port_for_each_present_dev</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#hwif\">hwif</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ide_init_queue\">ide_init_queue</a>(<a class=\"id\" href=\"#drive\">drive</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ide: failed to init %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &= ~<a class=\"id\" href=\"#IDE_DFLAG_PRESENT\">IDE_DFLAG_PRESENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ide_cfg_mtx\">ide_cfg_mtx</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#j\">j</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ide_host_enable_irqs\">ide_host_enable_irqs</a>(struct <a class=\"id\" href=\"#ide_host\">ide_host</a> *<a class=\"id\" href=\"#host\">host</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_host_for_each_port\">ide_host_for_each_port</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#hwif\">hwif</a>, <a class=\"id\" href=\"#host\">host</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* clear any pending IRQs */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#read_status\">read_status</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* unmask IRQs */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#io_ports\">io_ports</a>.<a class=\"id\" href=\"#ctl_addr\">ctl_addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#write_devctl\">write_devctl</a>(<a class=\"id\" href=\"#hwif\">hwif</a>, <a class=\"id\" href=\"#ATA_DEVCTL_OBS\">ATA_DEVCTL_OBS</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This routine sets up the IRQ for an IDE interface.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#init_irq\">init_irq</a> (<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_io_ports\">ide_io_ports</a> *<a class=\"id\" href=\"#io_ports\">io_ports</a> = &amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#io_ports\">io_ports</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_host\">ide_host</a> *<a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_handler_t\">irq_handler_t</a> <a class=\"id\" href=\"#irq_handler\">irq_handler</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#irq_handler\">irq_handler</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sa\">sa</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#irq_flags\">irq_flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#irq_handler\">irq_handler</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_handler\">irq_handler</a> = <a class=\"id\" href=\"#ide_intr\">ide_intr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#request_irq\">request_irq</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#irq_handler\">irq_handler</a>, <a class=\"id\" href=\"#sa\">sa</a>, <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#hwif\">hwif</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_up\">out_up</a>;", 
"", 
"#if !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#__mc68000__\">__mc68000__</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s at 0x%03lx-0x%03lx,0x%03lx on irq %d\", <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_ports\">io_ports</a>-><a class=\"id\" href=\"#data_addr\">data_addr</a>, <a class=\"id\" href=\"#io_ports\">io_ports</a>-><a class=\"id\" href=\"#status_addr\">status_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_ports\">io_ports</a>-><a class=\"id\" href=\"#ctl_addr\">ctl_addr</a>, <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#irq\">irq</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s at 0x%08lx on irq %d\", <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_ports\">io_ports</a>-><a class=\"id\" href=\"#data_addr\">data_addr</a>, <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#irq\">irq</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __mc68000__ */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a> &amp; <a class=\"id\" href=\"#IDE_HFLAG_SERIALIZE\">IDE_HFLAG_SERIALIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \" (serialized)\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"\\n\");", 
"", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#out_up\">out_up</a>:", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ata_lock\">ata_lock</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* FIXME: we want to pin hwif down */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#ata_probe\">ata_probe</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>, int *<a class=\"id\" href=\"#part\">part</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#unit\">unit</a> = *<a class=\"id\" href=\"#part\">part</a> >> <a class=\"id\" href=\"#PARTN_BITS\">PARTN_BITS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#devices\">devices</a>[<a class=\"id\" href=\"#unit\">unit</a>];", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &amp; <a class=\"id\" href=\"#IDE_DFLAG_PRESENT\">IDE_DFLAG_PRESENT</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#media\">media</a> == <a class=\"id\" href=\"#ide_disk\">ide_disk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request_module\">request_module</a>(\"ide-disk\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#media\">media</a> == <a class=\"id\" href=\"#ide_cdrom\">ide_cdrom</a> || <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#media\">media</a> == <a class=\"id\" href=\"#ide_optical\">ide_optical</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request_module\">request_module</a>(\"ide-cd\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#media\">media</a> == <a class=\"id\" href=\"#ide_tape\">ide_tape</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request_module\">request_module</a>(\"ide-tape\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#media\">media</a> == <a class=\"id\" href=\"#ide_floppy\">ide_floppy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request_module\">request_module</a>(\"ide-floppy\");", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#exact_match\">exact_match</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>, int *<a class=\"id\" href=\"#part\">part</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#part\">part</a> &= (1 << <a class=\"id\" href=\"#PARTN_BITS\">PARTN_BITS</a>) - 1;", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#disk_to_dev\">disk_to_dev</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#kobj\">kobj</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#exact_lock\">exact_lock</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#get_disk\">get_disk</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#ide_register_region\">ide_register_region</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_register_region\">blk_register_region</a>(<a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#major\">major</a>, <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#first_minor\">first_minor</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#minors\">minors</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#exact_match\">exact_match</a>, <a class=\"id\" href=\"#exact_lock\">exact_lock</a>, <a class=\"id\" href=\"#disk\">disk</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ide_register_region\">ide_register_region</a>);", 
"", 
"void <a class=\"id\" href=\"#ide_unregister_region\">ide_unregister_region</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_unregister_region\">blk_unregister_region</a>(<a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#major\">major</a>, <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#first_minor\">first_minor</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#minors\">minors</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ide_unregister_region\">ide_unregister_region</a>);", 
"", 
"void <a class=\"id\" href=\"#ide_init_disk\">ide_init_disk</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>, <a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a> = <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#hwif\">hwif</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#unit\">unit</a> = <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dn\">dn</a> &amp; 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#major\">major</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#major\">major</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#first_minor\">first_minor</a> = <a class=\"id\" href=\"#unit\">unit</a> << <a class=\"id\" href=\"#PARTN_BITS\">PARTN_BITS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#disk_name\">disk_name</a>, \"hd%c\", 'a' + <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#index\">index</a> * <a class=\"id\" href=\"#MAX_DRIVES\">MAX_DRIVES</a> + <a class=\"id\" href=\"#unit\">unit</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#queue\">queue</a> = <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#queue\">queue</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ide_init_disk\">ide_init_disk</a>);", 
"", 
"static void <a class=\"id\" href=\"#drive_release_dev\">drive_release_dev</a> (struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a>, <a class=\"id\" href=\"#gendev\">gendev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_proc_unregister_device\">ide_proc_unregister_device</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_cleanup_queue\">blk_cleanup_queue</a>(<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#queue\">queue</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#queue\">queue</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &= ~<a class=\"id\" href=\"#IDE_DFLAG_PRESENT\">IDE_DFLAG_PRESENT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#gendev_rel_comp\">gendev_rel_comp</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#hwif_init\">hwif_init</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#irq\">irq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: disabled, no IRQ\\n\", <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#register_blkdev\">register_blkdev</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#major\">major</a>, <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#sg_max_nents\">sg_max_nents</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#sg_max_nents\">sg_max_nents</a> = <a class=\"id\" href=\"#PRD_ENTRIES\">PRD_ENTRIES</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#sg_table\">sg_table</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a>)*<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#sg_max_nents\">sg_max_nents</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#sg_table\">sg_table</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: unable to allocate SG table.\\n\", <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg_init_table\">sg_init_table</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#sg_table\">sg_table</a>, <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#sg_max_nents\">sg_max_nents</a>);", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#init_irq\">init_irq</a>(<a class=\"id\" href=\"#hwif\">hwif</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: disabled, unable to get IRQ %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_register_region\">blk_register_region</a>(<a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#major\">major</a>, 0), <a class=\"id\" href=\"#MAX_DRIVES\">MAX_DRIVES</a> << <a class=\"id\" href=\"#PARTN_BITS\">PARTN_BITS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>, <a class=\"id\" href=\"#ata_probe\">ata_probe</a>, <a class=\"id\" href=\"#ata_lock\">ata_lock</a>, <a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/>return 1;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_blkdev\">unregister_blkdev</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#major\">major</a>, <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#hwif_register_devices\">hwif_register_devices</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_port_for_each_present_dev\">ide_port_for_each_present_dev</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#hwif\">hwif</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a> = &amp;<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#gendev\">gendev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_set_name\">dev_set_name</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"%u.%u\", <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_set_drvdata\">dev_set_drvdata</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#drive\">drive</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#parent\">parent</a> = &amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#gendev\">gendev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a> = &amp;<a class=\"id\" href=\"#ide_bus_type\">ide_bus_type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#drive_release_dev\">drive_release_dev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#device_register\">device_register</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"IDE: %s: device_register error: \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"%d\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ide_port_init_devices\">ide_port_init_devices</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ide_port_ops\">ide_port_ops</a> *<a class=\"id\" href=\"#port_ops\">port_ops</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#port_ops\">port_ops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_port_for_each_dev\">ide_port_for_each_dev</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#hwif\">hwif</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dn\">dn</a> = <a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#channel\">channel</a> * 2;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a> &amp; <a class=\"id\" href=\"#IDE_HFLAG_IO_32BIT\">IDE_HFLAG_IO_32BIT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#io_32bit\">io_32bit</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a> &amp; <a class=\"id\" href=\"#IDE_HFLAG_NO_IO_32BIT\">IDE_HFLAG_NO_IO_32BIT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> |= <a class=\"id\" href=\"#IDE_DFLAG_NO_IO_32BIT\">IDE_DFLAG_NO_IO_32BIT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a> &amp; <a class=\"id\" href=\"#IDE_HFLAG_UNMASK_IRQS\">IDE_HFLAG_UNMASK_IRQS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> |= <a class=\"id\" href=\"#IDE_DFLAG_UNMASK\">IDE_DFLAG_UNMASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a> &amp; <a class=\"id\" href=\"#IDE_HFLAG_NO_UNMASK_IRQS\">IDE_HFLAG_NO_UNMASK_IRQS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> |= <a class=\"id\" href=\"#IDE_DFLAG_NO_UNMASK\">IDE_DFLAG_NO_UNMASK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#pio_mode\">pio_mode</a> = <a class=\"id\" href=\"#XFER_PIO_0\">XFER_PIO_0</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#port_ops\">port_ops</a> && <a class=\"id\" href=\"#port_ops\">port_ops</a>-><a class=\"id\" href=\"#init_dev\">init_dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port_ops\">port_ops</a>-><a class=\"id\" href=\"#init_dev\">init_dev</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ide_init_port\">ide_init_port</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>, unsigned int <a class=\"id\" href=\"#port\">port</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#ide_port_info\">ide_port_info</a> *<a class=\"id\" href=\"#d\">d</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#channel\">channel</a> = <a class=\"id\" href=\"#port\">port</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#chipset\">chipset</a> = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#chipset\">chipset</a> ? <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#chipset\">chipset</a> : <a class=\"id\" href=\"#ide_pci\">ide_pci</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#init_iops\">init_iops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#init_iops\">init_iops</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* -&gt;host_flags may be set by -&gt;init_iops (or even earlier...) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a> |= <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#pio_mask\">pio_mask</a> = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#pio_mask\">pio_mask</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tp_ops\">tp_ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#tp_ops\">tp_ops</a> = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tp_ops\">tp_ops</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* -&gt;set_pio_mode for DTC2278 is currently limited to port 0 */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a> &amp; <a class=\"id\" href=\"#IDE_HFLAG_DTC2278\">IDE_HFLAG_DTC2278</a>) == 0 || <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#channel\">channel</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#port_ops\">port_ops</a> = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#port_ops\">port_ops</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#swdma_mask\">swdma_mask</a> = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#swdma_mask\">swdma_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a> = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#ultra_mask\">ultra_mask</a> = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#udma_mask\">udma_mask</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a> &amp; <a class=\"id\" href=\"#IDE_HFLAG_NO_DMA\">IDE_HFLAG_NO_DMA</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#dma_ops\">dma_ops</a> = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#dma_ops\">dma_ops</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#init_dma\">init_dma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#init_dma\">init_dma</a>(<a class=\"id\" href=\"#hwif\">hwif</a>, <a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ide_hwif_setup_dma\">ide_hwif_setup_dma</a>(<a class=\"id\" href=\"#hwif\">hwif</a>, <a class=\"id\" href=\"#d\">d</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s: DMA disabled\\n\", <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#dma_ops\">dma_ops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#dma_base\">dma_base</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#swdma_mask\">swdma_mask</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#ultra_mask\">ultra_mask</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a> &amp; <a class=\"id\" href=\"#IDE_HFLAG_SERIALIZE\">IDE_HFLAG_SERIALIZE</a>) ||", 
"<span class=\"ts\"/>    ((<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a> &amp; <a class=\"id\" href=\"#IDE_HFLAG_SERIALIZE_DMA\">IDE_HFLAG_SERIALIZE_DMA</a>) && <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#dma_base\">dma_base</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a> |= <a class=\"id\" href=\"#IDE_HFLAG_SERIALIZE\">IDE_HFLAG_SERIALIZE</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#max_sectors\">max_sectors</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#rqsize\">rqsize</a> = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#max_sectors\">max_sectors</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a> &amp; <a class=\"id\" href=\"#IDE_HFLAG_NO_LBA48\">IDE_HFLAG_NO_LBA48</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a> &amp; <a class=\"id\" href=\"#IDE_HFLAG_NO_LBA48_DMA\">IDE_HFLAG_NO_LBA48_DMA</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#rqsize\">rqsize</a> = 256;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#rqsize\">rqsize</a> = 65536;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* call chipset specific routine for each enabled port */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#init_hwif\">init_hwif</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#init_hwif\">init_hwif</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ide_port_cable_detect\">ide_port_cable_detect</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ide_port_ops\">ide_port_ops</a> *<a class=\"id\" href=\"#port_ops\">port_ops</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#port_ops\">port_ops</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#port_ops\">port_ops</a> && <a class=\"id\" href=\"#port_ops\">port_ops</a>-><a class=\"id\" href=\"#cable_detect\">cable_detect</a> && (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#ultra_mask\">ultra_mask</a> &amp; 0x78)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#cbl\">cbl</a> != <a class=\"id\" href=\"#ATA_CBL_PATA40_SHORT\">ATA_CBL_PATA40_SHORT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#cbl\">cbl</a> = <a class=\"id\" href=\"#port_ops\">port_ops</a>-><a class=\"id\" href=\"#cable_detect\">cable_detect</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ide_hwif_to_major\">ide_hwif_to_major</a>[] =", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#IDE0_MAJOR\">IDE0_MAJOR</a>, <a class=\"id\" href=\"#IDE1_MAJOR\">IDE1_MAJOR</a>, <a class=\"id\" href=\"#IDE2_MAJOR\">IDE2_MAJOR</a>, <a class=\"id\" href=\"#IDE3_MAJOR\">IDE3_MAJOR</a>, <a class=\"id\" href=\"#IDE4_MAJOR\">IDE4_MAJOR</a>,", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#IDE5_MAJOR\">IDE5_MAJOR</a>, <a class=\"id\" href=\"#IDE6_MAJOR\">IDE6_MAJOR</a>, <a class=\"id\" href=\"#IDE7_MAJOR\">IDE7_MAJOR</a>, <a class=\"id\" href=\"#IDE8_MAJOR\">IDE8_MAJOR</a>, <a class=\"id\" href=\"#IDE9_MAJOR\">IDE9_MAJOR</a> };", 
"", 
"static void <a class=\"id\" href=\"#ide_port_init_devices_data\">ide_port_init_devices_data</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_port_for_each_dev\">ide_port_for_each_dev</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#hwif\">hwif</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#j\">j</a> = (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#index\">index</a> * <a class=\"id\" href=\"#MAX_DRIVES\">MAX_DRIVES</a>) + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#saved_id\">saved_id</a> = <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#drive\">drive</a>, 0, sizeof(*<a class=\"id\" href=\"#drive\">drive</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#saved_id\">saved_id</a>, 0, <a class=\"id\" href=\"#SECTOR_SIZE\">SECTOR_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#saved_id\">saved_id</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#media\">media</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ide_disk\">ide_disk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#select\">select</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (<a class=\"id\" href=\"#i\">i</a> << 4) | <a class=\"id\" href=\"#ATA_DEVICE_OBS\">ATA_DEVICE_OBS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#hwif\">hwif</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#hwif\">hwif</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#ready_stat\">ready_stat</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ATA_DRDY\">ATA_DRDY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#bad_wstat\">bad_wstat</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#BAD_W_STAT\">BAD_W_STAT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#special_flags\">special_flags</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#IDE_SFLAG_RECALIBRATE\">IDE_SFLAG_RECALIBRATE</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#IDE_SFLAG_SET_GEOMETRY\">IDE_SFLAG_SET_GEOMETRY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#name\">name</a>[0]<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 'h';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#name\">name</a>[1]<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 'd';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#name\">name</a>[2]<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 'a' + <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#max_failures\">max_failures</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#IDE_DEFAULT_MAX_FAILURES\">IDE_DEFAULT_MAX_FAILURES</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#gendev_rel_comp\">gendev_rel_comp</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ide_init_port_data\">ide_init_port_data</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>, unsigned int <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* fill in any non-zero initial values */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#index\">index</a><span class=\"ts\"/>= <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#major\">major</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ide_hwif_to_major\">ide_hwif_to_major</a>[<a class=\"id\" href=\"#index\">index</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>[0]<span class=\"ts\"/>= 'i';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>[1]<span class=\"ts\"/>= 'd';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>[2]<span class=\"ts\"/>= 'e';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>[3]<span class=\"ts\"/>= '0' + <a class=\"id\" href=\"#index\">index</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_timer\">init_timer</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#function\">function</a> = &amp;<a class=\"id\" href=\"#ide_timer_expiry\">ide_timer_expiry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#data\">data</a> = (unsigned long)<a class=\"id\" href=\"#hwif\">hwif</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#gendev_rel_comp\">gendev_rel_comp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#tp_ops\">tp_ops</a> = &amp;<a class=\"id\" href=\"#default_tp_ops\">default_tp_ops</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_port_init_devices_data\">ide_port_init_devices_data</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ide_init_port_hw\">ide_init_port_hw</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>, struct <a class=\"id\" href=\"#ide_hw\">ide_hw</a> *<a class=\"id\" href=\"#hw\">hw</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#io_ports\">io_ports</a>, &amp;<a class=\"id\" href=\"#hw\">hw</a>-><a class=\"id\" href=\"#io_ports\">io_ports</a>, sizeof(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#io_ports\">io_ports</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#irq\">irq</a> = <a class=\"id\" href=\"#hw\">hw</a>-><a class=\"id\" href=\"#irq\">irq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#hw\">hw</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#gendev\">gendev</a>.<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#hw\">hw</a>-><a class=\"id\" href=\"#parent\">parent</a> ? <a class=\"id\" href=\"#hw\">hw</a>-><a class=\"id\" href=\"#parent\">parent</a> : <a class=\"id\" href=\"#hw\">hw</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#config_data\">config_data</a> = <a class=\"id\" href=\"#hw\">hw</a>-><a class=\"id\" href=\"#config\">config</a>;", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#ide_indexes\">ide_indexes</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ide_find_port_slot<span class=\"ts\"/>-<span class=\"ts\"/>find free port slot</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@d: IDE port info</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return the new port slot index or -ENOENT if we are out of free slots.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#ide_find_port_slot\">ide_find_port_slot</a>(const struct <a class=\"id\" href=\"#ide_port_info\">ide_port_info</a> *<a class=\"id\" href=\"#d\">d</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#bootable\">bootable</a> = (<a class=\"id\" href=\"#d\">d</a> && (<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a> &amp; <a class=\"id\" href=\"#IDE_HFLAG_NON_BOOTABLE\">IDE_HFLAG_NON_BOOTABLE</a>)) ? 0 : 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#d\">d</a> && (<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a> &amp; <a class=\"id\" href=\"#IDE_HFLAG_QD_2ND_PORT\">IDE_HFLAG_QD_2ND_PORT</a>)) ? 1 : 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Claim an unassigned slot.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Give preference to claiming other slots before claiming ide0/ide1,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * just in case there's another interface yet-to-be-scanned</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which uses ports 0x1f0/0x170 (the ide0/ide1 defaults).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Unless there is a bootable card that does not use the standard</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ports 0x1f0/0x170 (the ide0/ide1 defaults).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ide_cfg_mtx\">ide_cfg_mtx</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bootable\">bootable</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ide_indexes\">ide_indexes</a> | <a class=\"id\" href=\"#i\">i</a>) != (1 << <a class=\"id\" href=\"#MAX_HWIFS\">MAX_HWIFS</a>) - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#ffz\">ffz</a>(<a class=\"id\" href=\"#ide_indexes\">ide_indexes</a> | <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ide_indexes\">ide_indexes</a> | 3) != (1 << <a class=\"id\" href=\"#MAX_HWIFS\">MAX_HWIFS</a>) - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#ffz\">ffz</a>(<a class=\"id\" href=\"#ide_indexes\">ide_indexes</a> | 3);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if ((<a class=\"id\" href=\"#ide_indexes\">ide_indexes</a> &amp; 3) != 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#ffz\">ffz</a>(<a class=\"id\" href=\"#ide_indexes\">ide_indexes</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_indexes\">ide_indexes</a> |= (1 << <a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ide_cfg_mtx\">ide_cfg_mtx</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#idx\">idx</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ide_free_port_slot\">ide_free_port_slot</a>(int <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ide_cfg_mtx\">ide_cfg_mtx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_indexes\">ide_indexes</a> &= ~(1 << <a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ide_cfg_mtx\">ide_cfg_mtx</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ide_port_free_devices\">ide_port_free_devices</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_port_for_each_dev\">ide_port_for_each_dev</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#hwif\">hwif</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ide_port_alloc_devices\">ide_port_alloc_devices</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_DRIVES\">MAX_DRIVES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a> = <a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(sizeof(*<a class=\"id\" href=\"#drive\">drive</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#drive\">drive</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_nomem\">out_nomem</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In order to keep things simple we have an id</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * block for all drives at all times. If the device</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is pre ATA or refuses ATA/ATAPI identify we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will add faked data to this.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Also note that 0 everywhere means \"can't do X\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(<a class=\"id\" href=\"#SECTOR_SIZE\">SECTOR_SIZE</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#id\">id</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_nomem\">out_nomem</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#devices\">devices</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#drive\">drive</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_nomem\">out_nomem</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_port_free_devices\">ide_port_free_devices</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#ide_host\">ide_host</a> *<a class=\"id\" href=\"#ide_host_alloc\">ide_host_alloc</a>(const struct <a class=\"id\" href=\"#ide_port_info\">ide_port_info</a> *<a class=\"id\" href=\"#d\">d</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_hw\">ide_hw</a> **<a class=\"id\" href=\"#hws\">hws</a>, unsigned int <a class=\"id\" href=\"#n_ports\">n_ports</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_host\">ide_host</a> *<a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#hws\">hws</a>[0] ? <a class=\"id\" href=\"#hws\">hws</a>[0]-><a class=\"id\" href=\"#dev\">dev</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#dev\">dev</a> ? <a class=\"id\" href=\"#dev_to_node\">dev_to_node</a>(<a class=\"id\" href=\"#dev\">dev</a>) : -1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(sizeof(*<a class=\"id\" href=\"#host\">host</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#host\">host</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#n_ports\">n_ports</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hws\">hws</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a> = <a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(sizeof(*<a class=\"id\" href=\"#hwif\">hwif</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ide_port_alloc_devices\">ide_port_alloc_devices</a>(<a class=\"id\" href=\"#hwif\">hwif</a>, <a class=\"id\" href=\"#node\">node</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#ide_find_port_slot\">ide_find_port_slot</a>(<a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: no free slot for interface\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> ? <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#name\">name</a> : \"ide\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_port_free_devices\">ide_port_free_devices</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_init_port_data\">ide_init_port_data</a>(<a class=\"id\" href=\"#hwif\">hwif</a>, <a class=\"id\" href=\"#idx\">idx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#host\">host</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#hwif\">hwif</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#n_ports\">n_ports</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#n_ports\">n_ports</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#dev\">dev</a>[0] = <a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#init_chipset\">init_chipset</a> = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#init_chipset\">init_chipset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#get_lock\">get_lock</a>     = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#get_lock\">get_lock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#release_lock\">release_lock</a> = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#release_lock\">release_lock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a> = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#irq_flags\">irq_flags</a> = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#irq_flags\">irq_flags</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#host\">host</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ide_host_alloc\">ide_host_alloc</a>);", 
"", 
"static void <a class=\"id\" href=\"#ide_port_free\">ide_port_free</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_port_free_devices\">ide_port_free_devices</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_free_port_slot\">ide_free_port_slot</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ide_disable_port\">ide_disable_port</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_host\">ide_host</a> *<a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s: disabling port\\n\", <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_HOST_PORTS\">MAX_HOST_PORTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#hwif\">hwif</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#n_ports\">n_ports</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_port_free\">ide_port_free</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#ide_host_register\">ide_host_register</a>(struct <a class=\"id\" href=\"#ide_host\">ide_host</a> *<a class=\"id\" href=\"#host\">host</a>, const struct <a class=\"id\" href=\"#ide_port_info\">ide_port_info</a> *<a class=\"id\" href=\"#d\">d</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ide_hw\">ide_hw</a> **<a class=\"id\" href=\"#hws\">hws</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>, *<a class=\"id\" href=\"#mate\">mate</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_host_for_each_port\">ide_host_for_each_port</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#hwif\">hwif</a>, <a class=\"id\" href=\"#host\">host</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mate\">mate</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_init_port_hw\">ide_init_port_hw</a>(<a class=\"id\" href=\"#hwif\">hwif</a>, <a class=\"id\" href=\"#hws\">hws</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_port_apply_params\">ide_port_apply_params</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#i\">i</a> &amp; 1) && <a class=\"id\" href=\"#mate\">mate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#mate\">mate</a> = <a class=\"id\" href=\"#mate\">mate</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mate\">mate</a>-><a class=\"id\" href=\"#mate\">mate</a> = <a class=\"id\" href=\"#hwif\">hwif</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mate\">mate</a> = (<a class=\"id\" href=\"#i\">i</a> &amp; 1) ? <a class=\"id\" href=\"#NULL\">NULL</a> : <a class=\"id\" href=\"#hwif\">hwif</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_init_port\">ide_init_port</a>(<a class=\"id\" href=\"#hwif\">hwif</a>, <a class=\"id\" href=\"#i\">i</a> &amp; 1, <a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_port_cable_detect\">ide_port_cable_detect</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#port_flags\">port_flags</a> |= <a class=\"id\" href=\"#IDE_PFLAG_PROBING\">IDE_PFLAG_PROBING</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_port_init_devices\">ide_port_init_devices</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_host_for_each_port\">ide_host_for_each_port</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#hwif\">hwif</a>, <a class=\"id\" href=\"#host\">host</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ide_probe_port\">ide_probe_port</a>(<a class=\"id\" href=\"#hwif\">hwif</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#present\">present</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#port_flags\">port_flags</a> &= ~<a class=\"id\" href=\"#IDE_PFLAG_PROBING\">IDE_PFLAG_PROBING</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#host_flags\">host_flags</a> &amp; <a class=\"id\" href=\"#IDE_HFLAG_4DRIVES\">IDE_HFLAG_4DRIVES</a>) == 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#mate\">mate</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#mate\">mate</a>-><a class=\"id\" href=\"#present\">present</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ide_register_port\">ide_register_port</a>(<a class=\"id\" href=\"#hwif\">hwif</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_disable_port\">ide_disable_port</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#present\">present</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_port_tune_devices\">ide_port_tune_devices</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_host_enable_irqs\">ide_host_enable_irqs</a>(<a class=\"id\" href=\"#host\">host</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_host_for_each_port\">ide_host_for_each_port</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#hwif\">hwif</a>, <a class=\"id\" href=\"#host\">host</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif_init\">hwif_init</a>(<a class=\"id\" href=\"#hwif\">hwif</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s: failed to initialize IDE \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"interface\\n\", <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_unregister\">device_unregister</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#gendev\">gendev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_disable_port\">ide_disable_port</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#present\">present</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ide_port_setup_devices\">ide_port_setup_devices</a>(<a class=\"id\" href=\"#hwif\">hwif</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#present\">present</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_acpi_init_port\">ide_acpi_init_port</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#present\">present</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_acpi_port_init_devices\">ide_acpi_port_init_devices</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_host_for_each_port\">ide_host_for_each_port</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#hwif\">hwif</a>, <a class=\"id\" href=\"#host\">host</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_sysfs_register_port\">ide_sysfs_register_port</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_proc_register_port\">ide_proc_register_port</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#present\">present</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_proc_port_register_devices\">ide_proc_port_register_devices</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif_register_devices\">hwif_register_devices</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#j\">j</a> ? 0 : -1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ide_host_register\">ide_host_register</a>);", 
"", 
"int <a class=\"id\" href=\"#ide_host_add\">ide_host_add</a>(const struct <a class=\"id\" href=\"#ide_port_info\">ide_port_info</a> *<a class=\"id\" href=\"#d\">d</a>, struct <a class=\"id\" href=\"#ide_hw\">ide_hw</a> **<a class=\"id\" href=\"#hws\">hws</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#n_ports\">n_ports</a>, struct <a class=\"id\" href=\"#ide_host\">ide_host</a> **<a class=\"id\" href=\"#hostp\">hostp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_host\">ide_host</a> *<a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#ide_host_alloc\">ide_host_alloc</a>(<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#hws\">hws</a>, <a class=\"id\" href=\"#n_ports\">n_ports</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#host\">host</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ide_host_register\">ide_host_register</a>(<a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#hws\">hws</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_host_free\">ide_host_free</a>(<a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hostp\">hostp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#hostp\">hostp</a> = <a class=\"id\" href=\"#host\">host</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ide_host_add\">ide_host_add</a>);", 
"", 
"static void <a class=\"id\" href=\"#__ide_port_unregister_devices\">__ide_port_unregister_devices</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_port_for_each_present_dev\">ide_port_for_each_present_dev</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#hwif\">hwif</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_unregister\">device_unregister</a>(&amp;<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#gendev\">gendev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#gendev_rel_comp\">gendev_rel_comp</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#ide_port_unregister_devices\">ide_port_unregister_devices</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ide_cfg_mtx\">ide_cfg_mtx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ide_port_unregister_devices\">__ide_port_unregister_devices</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#present\">present</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_port_init_devices_data\">ide_port_init_devices_data</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ide_cfg_mtx\">ide_cfg_mtx</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ide_port_unregister_devices\">ide_port_unregister_devices</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ide_unregister<span class=\"ts\"/><span class=\"ts\"/>-<span class=\"ts\"/>free an IDE interface</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@hwif: IDE interface</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Perform the final unregister of an IDE interface.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Locking:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The caller must not hold the IDE locks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>It is up to the caller to be sure there is no pending I/O here,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and that the interface will not be reopened (present/vanishing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>locking isn't yet done BTW).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#ide_unregister\">ide_unregister</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ide_cfg_mtx\">ide_cfg_mtx</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#present\">present</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ide_port_unregister_devices\">__ide_port_unregister_devices</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#present\">present</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_proc_unregister_port\">ide_proc_unregister_port</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_irq\">free_irq</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#hwif\">hwif</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_unregister\">device_unregister</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#portdev\">portdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_unregister\">device_unregister</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#gendev\">gendev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#gendev_rel_comp\">gendev_rel_comp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Remove us from the kernel's knowledge</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_unregister_region\">blk_unregister_region</a>(<a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#major\">major</a>, 0), <a class=\"id\" href=\"#MAX_DRIVES\">MAX_DRIVES</a><<<a class=\"id\" href=\"#PARTN_BITS\">PARTN_BITS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#sg_table\">sg_table</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_blkdev\">unregister_blkdev</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#major\">major</a>, <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_release_dma_engine\">ide_release_dma_engine</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ide_cfg_mtx\">ide_cfg_mtx</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#ide_host_free\">ide_host_free</a>(struct <a class=\"id\" href=\"#ide_host\">ide_host</a> *<a class=\"id\" href=\"#host\">host</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_host_for_each_port\">ide_host_for_each_port</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#hwif\">hwif</a>, <a class=\"id\" href=\"#host\">host</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_port_free\">ide_port_free</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#host\">host</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ide_host_free\">ide_host_free</a>);", 
"", 
"void <a class=\"id\" href=\"#ide_host_remove\">ide_host_remove</a>(struct <a class=\"id\" href=\"#ide_host\">ide_host</a> *<a class=\"id\" href=\"#host\">host</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_host_for_each_port\">ide_host_for_each_port</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#hwif\">hwif</a>, <a class=\"id\" href=\"#host\">host</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_unregister\">ide_unregister</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_host_free\">ide_host_free</a>(<a class=\"id\" href=\"#host\">host</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ide_host_remove\">ide_host_remove</a>);", 
"", 
"void <a class=\"id\" href=\"#ide_port_scan\">ide_port_scan</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_port_apply_params\">ide_port_apply_params</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_port_cable_detect\">ide_port_cable_detect</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#port_flags\">port_flags</a> |= <a class=\"id\" href=\"#IDE_PFLAG_PROBING\">IDE_PFLAG_PROBING</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_port_init_devices\">ide_port_init_devices</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ide_probe_port\">ide_probe_port</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#port_flags\">port_flags</a> &= ~<a class=\"id\" href=\"#IDE_PFLAG_PROBING\">IDE_PFLAG_PROBING</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#present\">present</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_port_tune_devices\">ide_port_tune_devices</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_port_setup_devices\">ide_port_setup_devices</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_acpi_port_init_devices\">ide_acpi_port_init_devices</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif_register_devices\">hwif_register_devices</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_proc_port_register_devices\">ide_proc_port_register_devices</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ide_port_scan\">ide_port_scan</a>);", 
];
xr_frag_insert('l/3e/ce1cd37a12f1e5cfbc3ebff6515d962d86773d.xr', __xr_tmp);
