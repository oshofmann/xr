var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * xHCI host controller driver</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2008 Intel Corp.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author: Sarah Sharp</span>", 
"<span class=\"comment\"> * Some code borrowed from the Linux EHCI driver.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License version 2 as</span>", 
"<span class=\"comment\"> * published by the Free Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful, but</span>", 
"<span class=\"comment\"> * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY</span>", 
"<span class=\"comment\"> * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License</span>", 
"<span class=\"comment\"> * for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software Foundation,</span>", 
"<span class=\"comment\"> * Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/* Up to 16 microframes to halt an HC - one microframe is 125 microsectonds */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_MAX_HALT_USEC\">XHCI_MAX_HALT_USEC</a><span class=\"ts\"/>(16*125)", 
"<span class=\"comment\">/* HC not running - set to 1 when run/stop bit is cleared. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_STS_HALT\">XHCI_STS_HALT</a><span class=\"ts\"/><span class=\"ts\"/>(1<<0)", 
"", 
"<span class=\"comment\">/* HCCPARAMS offset from PCI base address */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_HCC_PARAMS_OFFSET\">XHCI_HCC_PARAMS_OFFSET</a><span class=\"ts\"/>0x10", 
"<span class=\"comment\">/* HCCPARAMS contains the first extended capability pointer */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_HCC_EXT_CAPS\">XHCI_HCC_EXT_CAPS</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/>(((<a class=\"id\" href=\"#p\">p</a>)>>16)&amp;0xffff)", 
"", 
"<span class=\"comment\">/* Command and Status registers offset from the Operational Registers address */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_CMD_OFFSET\">XHCI_CMD_OFFSET</a><span class=\"ts\"/><span class=\"ts\"/>0x00", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_STS_OFFSET\">XHCI_STS_OFFSET</a><span class=\"ts\"/><span class=\"ts\"/>0x04", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_MAX_EXT_CAPS\">XHCI_MAX_EXT_CAPS</a><span class=\"ts\"/><span class=\"ts\"/>50", 
"", 
"<span class=\"comment\">/* Capability Register */</span>", 
"<span class=\"comment\">/* bits 7:0 - how long is the Capabilities register */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_HC_LENGTH\">XHCI_HC_LENGTH</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/>(((<a class=\"id\" href=\"#p\">p</a>)>>00)&amp;0x00ff)", 
"", 
"<span class=\"comment\">/* Extended capability register fields */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_EXT_CAPS_ID\">XHCI_EXT_CAPS_ID</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/>(((<a class=\"id\" href=\"#p\">p</a>)>>0)&amp;0xff)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_EXT_CAPS_NEXT\">XHCI_EXT_CAPS_NEXT</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/>(((<a class=\"id\" href=\"#p\">p</a>)>>8)&amp;0xff)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#XHCI_EXT_CAPS_VAL\">XHCI_EXT_CAPS_VAL</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#p\">p</a>)>>16)", 
"<span class=\"comment\">/* Extended capability IDs - ID 0 reserved */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_EXT_CAPS_LEGACY\">XHCI_EXT_CAPS_LEGACY</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_EXT_CAPS_PROTOCOL\">XHCI_EXT_CAPS_PROTOCOL</a><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_EXT_CAPS_PM\">XHCI_EXT_CAPS_PM</a><span class=\"ts\"/>3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_EXT_CAPS_VIRT\">XHCI_EXT_CAPS_VIRT</a><span class=\"ts\"/>4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_EXT_CAPS_ROUTE\">XHCI_EXT_CAPS_ROUTE</a><span class=\"ts\"/>5", 
"<span class=\"comment\">/* IDs 6-9 reserved */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_EXT_CAPS_DEBUG\">XHCI_EXT_CAPS_DEBUG</a><span class=\"ts\"/>10", 
"<span class=\"comment\">/* USB Legacy Support Capability - section 7.1.1 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_HC_BIOS_OWNED\">XHCI_HC_BIOS_OWNED</a><span class=\"ts\"/>(1 << 16)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_HC_OS_OWNED\">XHCI_HC_OS_OWNED</a><span class=\"ts\"/>(1 << 24)", 
"", 
"<span class=\"comment\">/* USB Legacy Support Capability - section 7.1.1 */</span>", 
"<span class=\"comment\">/* Add this offset, plus the value of xECP in HCCPARAMS to the base address */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_LEGACY_SUPPORT_OFFSET\">XHCI_LEGACY_SUPPORT_OFFSET</a><span class=\"ts\"/>(0x00)", 
"", 
"<span class=\"comment\">/* USB Legacy Support Control and Status Register  - section 7.1.2 */</span>", 
"<span class=\"comment\">/* Add this offset, plus the value of xECP in HCCPARAMS to the base address */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_LEGACY_CONTROL_OFFSET\">XHCI_LEGACY_CONTROL_OFFSET</a><span class=\"ts\"/>(0x04)", 
"<span class=\"comment\">/* bits 1:2, 5:12, and 17:19 need to be preserved; bits 21:28 should be zero */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#XHCI_LEGACY_DISABLE_SMI\">XHCI_LEGACY_DISABLE_SMI</a><span class=\"ts\"/><span class=\"ts\"/>((0x3 << 1) + (0xff << 5) + (0x7 << 17))", 
"", 
"<span class=\"comment\">/* command register values to disable interrupts and halt the HC */</span>", 
"<span class=\"comment\">/* start/stop HC execution - do not write unless HC is halted*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_CMD_RUN\">XHCI_CMD_RUN</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 0)", 
"<span class=\"comment\">/* Event Interrupt Enable - get irq when EINT bit is set in USBSTS register */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_CMD_EIE\">XHCI_CMD_EIE</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 2)", 
"<span class=\"comment\">/* Host System Error Interrupt Enable - get irq when HSEIE bit set in USBSTS */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_CMD_HSEIE\">XHCI_CMD_HSEIE</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 3)", 
"<span class=\"comment\">/* Enable Wrap Event - '1' means xHC generates an event when MFINDEX wraps. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_CMD_EWE\">XHCI_CMD_EWE</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 10)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_IRQS\">XHCI_IRQS</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#XHCI_CMD_EIE\">XHCI_CMD_EIE</a> | <a class=\"id\" href=\"#XHCI_CMD_HSEIE\">XHCI_CMD_HSEIE</a> | <a class=\"id\" href=\"#XHCI_CMD_EWE\">XHCI_CMD_EWE</a>)", 
"", 
"<span class=\"comment\">/* true: Controller Not Ready to accept doorbell or op reg writes after reset */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XHCI_STS_CNR\">XHCI_STS_CNR</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 11)", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * Return the next extended capability pointer register.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @base<span class=\"ts\"/>PCI register base address.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ext_offset<span class=\"ts\"/>Offset of the 32-bit register that contains the extended</span>", 
"<span class=\"comment\"> * capabilites pointer.  If searching for the first extended capability, pass</span>", 
"<span class=\"comment\"> * in XHCI_HCC_PARAMS_OFFSET.  If searching for the next extended capability,</span>", 
"<span class=\"comment\"> * pass in the offset of the current extended capability register.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if there is no next extended capability register or returns the register offset</span>", 
"<span class=\"comment\"> * from the PCI registers base address.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#xhci_find_next_cap_offset\">xhci_find_next_cap_offset</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#base\">base</a>, int <a class=\"id\" href=\"#ext_offset\">ext_offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#ext_offset\">ext_offset</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext_offset\">ext_offset</a> == <a class=\"id\" href=\"#XHCI_HCC_PARAMS_OFFSET\">XHCI_HCC_PARAMS_OFFSET</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Find the first extended capability */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#XHCI_HCC_EXT_CAPS\">XHCI_HCC_EXT_CAPS</a>(<a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext_offset\">ext_offset</a> = 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Find the next extended capability */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#XHCI_EXT_CAPS_NEXT\">XHCI_EXT_CAPS_NEXT</a>(<a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Address calculation from offset of extended capabilities</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (or HCCPARAMS) register - see section 5.3.6 and section 7.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ext_offset\">ext_offset</a> + (<a class=\"id\" href=\"#next\">next</a> << 2);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * Find the offset of the extended capabilities with capability ID id.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @base PCI MMIO registers base address.</span>", 
"<span class=\"comment\"> * @ext_offset Offset from base of the first extended capability to look at,</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>or the address of HCCPARAMS.</span>", 
"<span class=\"comment\"> * @id Extended capability ID to search for.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This uses an arbitrary limit of XHCI_MAX_EXT_CAPS extended capabilities</span>", 
"<span class=\"comment\"> * to make sure that the list doesn't contain a loop.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#xhci_find_ext_cap_by_id\">xhci_find_ext_cap_by_id</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#base\">base</a>, int <a class=\"id\" href=\"#ext_offset\">ext_offset</a>, int <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#XHCI_MAX_EXT_CAPS\">XHCI_MAX_EXT_CAPS</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#ext_offset\">ext_offset</a> && <a class=\"id\" href=\"#limit\">limit</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#ext_offset\">ext_offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#XHCI_EXT_CAPS_ID\">XHCI_EXT_CAPS_ID</a>(<a class=\"id\" href=\"#val\">val</a>) == <a class=\"id\" href=\"#id\">id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext_offset\">ext_offset</a> = <a class=\"id\" href=\"#xhci_find_next_cap_offset\">xhci_find_next_cap_offset</a>(<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#ext_offset\">ext_offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a>--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#limit\">limit</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ext_offset\">ext_offset</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/3e/ef493aa1b9e2add6987975abcf706659aa57bf.xr', __xr_tmp);
