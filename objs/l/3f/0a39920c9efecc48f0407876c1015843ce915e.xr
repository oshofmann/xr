var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Lockless get_user_pages_fast for x86</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2008 Nick Piggin</span>", 
"<span class=\"comment\"> * Copyright (C) 2008 Novell Inc.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmstat\">vmstat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#gup_get_pte\">gup_get_pte</a>(<a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_X86_PAE\">CONFIG_X86_PAE</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(*<a class=\"id\" href=\"#ptep\">ptep</a>);", 
"#else", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * With get_user_pages_fast, we walk down the pagetables without taking</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any locks.  For this we would like to load the pointers atomically,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but that is not possible (without expensive cmpxchg8b) on PAE.  What</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we do have is the guarantee that a pte will only either go from not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * present to present, or present to not present or both -- it will not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * switch to a completely different present page without a TLB flush in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * between; something that we are blocking by holding interrupts off.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Setting ptes from not present to present goes:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ptep-&gt;pte_high = h;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * smp_wmb();</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ptep-&gt;pte_low = l;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * And present to not present goes:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ptep-&gt;pte_low = 0;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * smp_wmb();</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ptep-&gt;pte_high = 0;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We must ensure here that the load of pte_low sees l iff pte_high</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sees h. We load pte_high *after* loading pte_low, which ensures we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * don't see an older value of pte_high.  *Then* we recheck pte_low,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which ensures that we haven't picked up a changed pte high. We might</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have got rubbish values from pte_low and pte_high, but we are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * guaranteed that pte_low will not have the present bit set *unless*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it is 'l'. And get_user_pages_fast only operates on present ptes, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we're safe.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * gup_get_pte should not be used or copied outside gup.c without being</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * very careful -- it does not atomically load the pte or anything that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is likely to be useful for you.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a>.<a class=\"id\" href=\"#pte_low\">pte_low</a> = <a class=\"id\" href=\"#ptep\">ptep</a>-><a class=\"id\" href=\"#pte_low\">pte_low</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a>.<a class=\"id\" href=\"#pte_high\">pte_high</a> = <a class=\"id\" href=\"#ptep\">ptep</a>-><a class=\"id\" href=\"#pte_high\">pte_high</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pte\">pte</a>.<a class=\"id\" href=\"#pte_low\">pte_low</a> != <a class=\"id\" href=\"#ptep\">ptep</a>-><a class=\"id\" href=\"#pte_low\">pte_low</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pte\">pte</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The performance critical leaf functions are made noinline otherwise gcc</span>", 
"<span class=\"comment\"> * inlines everything into a single function which results in too much</span>", 
"<span class=\"comment\"> * register pressure.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> int <a class=\"id\" href=\"#gup_pte_range\">gup_pte_range</a>(<a class=\"id\" href=\"#pmd_t\">pmd_t</a> <a class=\"id\" href=\"#pmd\">pmd</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>, int <a class=\"id\" href=\"#write\">write</a>, struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, int *<a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#_PAGE_PRESENT\">_PAGE_PRESENT</a>|<a class=\"id\" href=\"#_PAGE_USER\">_PAGE_USER</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> |= <a class=\"id\" href=\"#_PAGE_RW\">_PAGE_RW</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptep\">ptep</a> = <a class=\"id\" href=\"#pte_offset_map\">pte_offset_map</a>(&amp;<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#gup_get_pte\">gup_get_pte</a>(<a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#pte_flags\">pte_flags</a>(<a class=\"id\" href=\"#pte\">pte</a>) &amp; (<a class=\"id\" href=\"#mask\">mask</a> | <a class=\"id\" href=\"#_PAGE_SPECIAL\">_PAGE_SPECIAL</a>)) != <a class=\"id\" href=\"#mask\">mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap\">pte_unmap</a>(<a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(<a class=\"id\" href=\"#pte\">pte</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pte_page\">pte_page</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a>[*<a class=\"id\" href=\"#nr\">nr</a>] = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#nr\">nr</a>)++;", 
"", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#ptep\">ptep</a>++, <a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap\">pte_unmap</a>(<a class=\"id\" href=\"#ptep\">ptep</a> - 1);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#get_head_page_multiple\">get_head_page_multiple</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#page\">page</a> != <a class=\"id\" href=\"#compound_head\">compound_head</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>) == 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#nr\">nr</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_count\">_count</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> int <a class=\"id\" href=\"#gup_huge_pmd\">gup_huge_pmd</a>(<a class=\"id\" href=\"#pmd_t\">pmd_t</a> <a class=\"id\" href=\"#pmd\">pmd</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>, int <a class=\"id\" href=\"#write\">write</a>, struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, int *<a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a> = *(<a class=\"id\" href=\"#pte_t\">pte_t</a> *)&amp;<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#head\">head</a>, *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#refs\">refs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#_PAGE_PRESENT\">_PAGE_PRESENT</a>|<a class=\"id\" href=\"#_PAGE_USER\">_PAGE_USER</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> |= <a class=\"id\" href=\"#_PAGE_RW\">_PAGE_RW</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pte_flags\">pte_flags</a>(<a class=\"id\" href=\"#pte\">pte</a>) &amp; <a class=\"id\" href=\"#mask\">mask</a>) != <a class=\"id\" href=\"#mask\">mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* hugepages are never \"special\" */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#pte_flags\">pte_flags</a>(<a class=\"id\" href=\"#pte\">pte</a>) &amp; <a class=\"id\" href=\"#_PAGE_SPECIAL\">_PAGE_SPECIAL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(<a class=\"id\" href=\"#pte\">pte</a>)));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#refs\">refs</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#pte_page\">pte_page</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#head\">head</a> + ((<a class=\"id\" href=\"#addr\">addr</a> &amp; ~<a class=\"id\" href=\"#PMD_MASK\">PMD_MASK</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#compound_head\">compound_head</a>(<a class=\"id\" href=\"#page\">page</a>) != <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a>[*<a class=\"id\" href=\"#nr\">nr</a>] = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#nr\">nr</a>)++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#refs\">refs</a>++;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_head_page_multiple\">get_head_page_multiple</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#refs\">refs</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#gup_pmd_range\">gup_pmd_range</a>(<a class=\"id\" href=\"#pud_t\">pud_t</a> <a class=\"id\" href=\"#pud\">pud</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#write\">write</a>, struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, int *<a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmdp\">pmdp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmdp\">pmdp</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(&amp;<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> <a class=\"id\" href=\"#pmd\">pmd</a> = *<a class=\"id\" href=\"#pmdp\">pmdp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pmd_addr_end\">pmd_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd_none\">pmd_none</a>(<a class=\"id\" href=\"#pmd\">pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pmd_large\">pmd_large</a>(<a class=\"id\" href=\"#pmd\">pmd</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#gup_huge_pmd\">gup_huge_pmd</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#nr\">nr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#gup_pte_range\">gup_pte_range</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#nr\">nr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pmdp\">pmdp</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> int <a class=\"id\" href=\"#gup_huge_pud\">gup_huge_pud</a>(<a class=\"id\" href=\"#pud_t\">pud_t</a> <a class=\"id\" href=\"#pud\">pud</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>, int <a class=\"id\" href=\"#write\">write</a>, struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, int *<a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a> = *(<a class=\"id\" href=\"#pte_t\">pte_t</a> *)&amp;<a class=\"id\" href=\"#pud\">pud</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#head\">head</a>, *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#refs\">refs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#_PAGE_PRESENT\">_PAGE_PRESENT</a>|<a class=\"id\" href=\"#_PAGE_USER\">_PAGE_USER</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> |= <a class=\"id\" href=\"#_PAGE_RW\">_PAGE_RW</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pte_flags\">pte_flags</a>(<a class=\"id\" href=\"#pte\">pte</a>) &amp; <a class=\"id\" href=\"#mask\">mask</a>) != <a class=\"id\" href=\"#mask\">mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* hugepages are never \"special\" */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#pte_flags\">pte_flags</a>(<a class=\"id\" href=\"#pte\">pte</a>) &amp; <a class=\"id\" href=\"#_PAGE_SPECIAL\">_PAGE_SPECIAL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(<a class=\"id\" href=\"#pte\">pte</a>)));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#refs\">refs</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#pte_page\">pte_page</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#head\">head</a> + ((<a class=\"id\" href=\"#addr\">addr</a> &amp; ~<a class=\"id\" href=\"#PUD_MASK\">PUD_MASK</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#compound_head\">compound_head</a>(<a class=\"id\" href=\"#page\">page</a>) != <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a>[*<a class=\"id\" href=\"#nr\">nr</a>] = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#nr\">nr</a>)++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#refs\">refs</a>++;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_head_page_multiple\">get_head_page_multiple</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#refs\">refs</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#gup_pud_range\">gup_pud_range</a>(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> <a class=\"id\" href=\"#pgd\">pgd</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#write\">write</a>, struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, int *<a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pudp\">pudp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pudp\">pudp</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(&amp;<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> <a class=\"id\" href=\"#pud\">pud</a> = *<a class=\"id\" href=\"#pudp\">pudp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pud_addr_end\">pud_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pud_none\">pud_none</a>(<a class=\"id\" href=\"#pud\">pud</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pud_large\">pud_large</a>(<a class=\"id\" href=\"#pud\">pud</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#gup_huge_pud\">gup_huge_pud</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#nr\">nr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#gup_pmd_range\">gup_pmd_range</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#nr\">nr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pudp\">pudp</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Like get_user_pages_fast() except its IRQ-safe in that it won't fall</span>", 
"<span class=\"comment\"> * back to the regular GUP.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__get_user_pages_fast\">__get_user_pages_fast</a>(unsigned long <a class=\"id\" href=\"#start\">start</a>, int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgdp\">pgdp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = (unsigned long) <a class=\"id\" href=\"#nr_pages\">nr_pages</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#write\">write</a> ? <a class=\"id\" href=\"#VERIFY_WRITE\">VERIFY_WRITE</a> : <a class=\"id\" href=\"#VERIFY_READ\">VERIFY_READ</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(void <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#len\">len</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * XXX: batch / limit 'nr', to avoid large irq off latency</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * needs some instrumenting to determine the common sizes used by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * important workloads (eg. DB2), and whether limiting the batch size</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will decrease performance.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It seems like we're in the clear for the moment. Direct-IO is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the main guy that batches up lots of get_user_pages, and even</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * they are limited to 64-at-a-time which is not so many.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This doesn't prevent pagetable teardown, but does prevent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the pagetables and pages from being freed on x86.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So long as we atomically load page table pointers versus teardown</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (which we do on x86, with the above PAE exception), we can follow the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * address down to the the page and take a ref on it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdp\">pgdp</a> = <a class=\"id\" href=\"#pgd_offset\">pgd_offset</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> <a class=\"id\" href=\"#pgd\">pgd</a> = *<a class=\"id\" href=\"#pgdp\">pgdp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pgd_addr_end\">pgd_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pgd_none\">pgd_none</a>(<a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#gup_pud_range\">gup_pud_range</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#pages\">pages</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pgdp\">pgdp</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr\">nr</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_user_pages_fast() - pin user pages in memory</span>", 
"<span class=\"comment\"> * @start:<span class=\"ts\"/>starting user address</span>", 
"<span class=\"comment\"> * @nr_pages:<span class=\"ts\"/>number of pages from start to pin</span>", 
"<span class=\"comment\"> * @write:<span class=\"ts\"/>whether pages will be written to</span>", 
"<span class=\"comment\"> * @pages:<span class=\"ts\"/>array that receives pointers to the pages pinned.</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>Should be at least nr_pages long.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Attempt to pin user pages in memory without taking mm-&gt;mmap_sem.</span>", 
"<span class=\"comment\"> * If not successful, it will fall back to taking the lock and</span>", 
"<span class=\"comment\"> * calling get_user_pages().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns number of pages pinned. This may be fewer than the number</span>", 
"<span class=\"comment\"> * requested. If nr_pages is 0 or negative, returns 0. If no pages</span>", 
"<span class=\"comment\"> * were pinned, returns -errno.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#get_user_pages_fast\">get_user_pages_fast</a>(unsigned long <a class=\"id\" href=\"#start\">start</a>, int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgdp\">pgdp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = (unsigned long) <a class=\"id\" href=\"#nr_pages\">nr_pages</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#slow_irqon\">slow_irqon</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> >> <a class=\"id\" href=\"#__VIRTUAL_MASK_SHIFT\">__VIRTUAL_MASK_SHIFT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#slow_irqon\">slow_irqon</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * XXX: batch / limit 'nr', to avoid large irq off latency</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * needs some instrumenting to determine the common sizes used by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * important workloads (eg. DB2), and whether limiting the batch size</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will decrease performance.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It seems like we're in the clear for the moment. Direct-IO is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the main guy that batches up lots of get_user_pages, and even</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * they are limited to 64-at-a-time which is not so many.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This doesn't prevent pagetable teardown, but does prevent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the pagetables and pages from being freed on x86.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So long as we atomically load page table pointers versus teardown</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (which we do on x86, with the above PAE exception), we can follow the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * address down to the the page and take a ref on it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdp\">pgdp</a> = <a class=\"id\" href=\"#pgd_offset\">pgd_offset</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> <a class=\"id\" href=\"#pgd\">pgd</a> = *<a class=\"id\" href=\"#pgdp\">pgdp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pgd_addr_end\">pgd_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pgd_none\">pgd_none</a>(<a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#slow\">slow</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#gup_pud_range\">gup_pud_range</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#pages\">pages</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#slow\">slow</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pgdp\">pgdp</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#nr\">nr</a> != (<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr\">nr</a>;", 
"", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<a class=\"id\" href=\"#slow\">slow</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<a class=\"id\" href=\"#slow_irqon\">slow_irqon</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Try to get the remaining pages with get_user_pages */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> += <a class=\"id\" href=\"#nr\">nr</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> += <a class=\"id\" href=\"#nr\">nr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_user_pages\">get_user_pages</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>, <a class=\"id\" href=\"#write\">write</a>, 0, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Have to be a bit careful with return values */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"}", 
];
xr_frag_insert('l/3f/0a39920c9efecc48f0407876c1015843ce915e.xr', __xr_tmp);
