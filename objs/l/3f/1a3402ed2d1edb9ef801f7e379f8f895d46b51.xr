var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Bitbanged MDIO support.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author: Scott Wood &lt;scottwood@freescale.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (c) 2007 Freescale Semiconductor</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on CPM2 MDIO code which is:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2003 Intracom S.A.</span>", 
"<span class=\"comment\"> *  by Pantelis Antoniou &lt;panto@intracom.gr&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 2005 (c) MontaVista Software, Inc.</span>", 
"<span class=\"comment\"> * Vitaly Bordug &lt;vbordug@ru.mvista.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is licensed under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> * version 2. This program is licensed \"as is\" without any warranty of any</span>", 
"<span class=\"comment\"> * kind, whether express or implied.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mdio\">mdio</a>-<a class=\"id\" href=\"#bitbang\">bitbang</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MDIO_READ\">MDIO_READ</a> 2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MDIO_WRITE\">MDIO_WRITE</a> 1", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MDIO_C45\">MDIO_C45</a> (1<<15)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MDIO_C45_ADDR\">MDIO_C45_ADDR</a> (<a class=\"id\" href=\"#MDIO_C45\">MDIO_C45</a> | 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MDIO_C45_READ\">MDIO_C45_READ</a> (<a class=\"id\" href=\"#MDIO_C45\">MDIO_C45</a> | 3)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MDIO_C45_WRITE\">MDIO_C45_WRITE</a> (<a class=\"id\" href=\"#MDIO_C45\">MDIO_C45</a> | 1)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MDIO_SETUP_TIME\">MDIO_SETUP_TIME</a> 10", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MDIO_HOLD_TIME\">MDIO_HOLD_TIME</a> 10", 
"", 
"<span class=\"comment\">/* Minimum MDC period is 400 ns, plus some margin for error.  MDIO_DELAY</span>", 
"<span class=\"comment\"> * is done twice per period.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MDIO_DELAY\">MDIO_DELAY</a> 250", 
"", 
"<span class=\"comment\">/* The PHY may take up to 300 ns to produce data, plus some margin</span>", 
"<span class=\"comment\"> * for error.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MDIO_READ_DELAY\">MDIO_READ_DELAY</a> 350", 
"", 
"<span class=\"comment\">/* MDIO must already be configured as output. */</span>", 
"static void <a class=\"id\" href=\"#mdiobb_send_bit\">mdiobb_send_bit</a>(struct <a class=\"id\" href=\"#mdiobb_ctrl\">mdiobb_ctrl</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>, int <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#mdiobb_ops\">mdiobb_ops</a> *<a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#ops\">ops</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#set_mdio_data\">set_mdio_data</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ndelay\">ndelay</a>(<a class=\"id\" href=\"#MDIO_DELAY\">MDIO_DELAY</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#set_mdc\">set_mdc</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ndelay\">ndelay</a>(<a class=\"id\" href=\"#MDIO_DELAY\">MDIO_DELAY</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#set_mdc\">set_mdc</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/* MDIO must already be configured as input. */</span>", 
"static int <a class=\"id\" href=\"#mdiobb_get_bit\">mdiobb_get_bit</a>(struct <a class=\"id\" href=\"#mdiobb_ctrl\">mdiobb_ctrl</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#mdiobb_ops\">mdiobb_ops</a> *<a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#ops\">ops</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ndelay\">ndelay</a>(<a class=\"id\" href=\"#MDIO_DELAY\">MDIO_DELAY</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#set_mdc\">set_mdc</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ndelay\">ndelay</a>(<a class=\"id\" href=\"#MDIO_READ_DELAY\">MDIO_READ_DELAY</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#set_mdc\">set_mdc</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, 0);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#get_mdio_data\">get_mdio_data</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"}", 
"", 
"<span class=\"comment\">/* MDIO must already be configured as output. */</span>", 
"static void <a class=\"id\" href=\"#mdiobb_send_num\">mdiobb_send_num</a>(struct <a class=\"id\" href=\"#mdiobb_ctrl\">mdiobb_ctrl</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#val\">val</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#bits\">bits</a> - 1; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_send_bit\">mdiobb_send_bit</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, (<a class=\"id\" href=\"#val\">val</a> >> <a class=\"id\" href=\"#i\">i</a>) &amp; 1);", 
"}", 
"", 
"<span class=\"comment\">/* MDIO must already be configured as input. */</span>", 
"static <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#mdiobb_get_num\">mdiobb_get_num</a>(struct <a class=\"id\" href=\"#mdiobb_ctrl\">mdiobb_ctrl</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#bits\">bits</a> - 1; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> <<= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> |= <a class=\"id\" href=\"#mdiobb_get_bit\">mdiobb_get_bit</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Utility to send the preamble, address, and</span>", 
"<span class=\"comment\"> * register (common to read and write).</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#mdiobb_cmd\">mdiobb_cmd</a>(struct <a class=\"id\" href=\"#mdiobb_ctrl\">mdiobb_ctrl</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>, int <a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#phy\">phy</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#reg\">reg</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#mdiobb_ops\">mdiobb_ops</a> *<a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#set_mdio_dir\">set_mdio_dir</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Send a 32 bit preamble ('1's) with an extra '1' bit for good</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * measure.  The IEEE spec says this is a PHY optional</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * requirement.  The AMD 79C874 requires one after power up and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * one after a MII communications error.  This means that we are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * doing more preambles than we need, but it is safer and will be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * much more robust.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 32; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_send_bit\">mdiobb_send_bit</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* send the start bit (01) and the read opcode (10) or write (10).</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   Clause 45 operation uses 00 for the start and 11, 10 for</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   read/write */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_send_bit\">mdiobb_send_bit</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a> &amp; <a class=\"id\" href=\"#MDIO_C45\">MDIO_C45</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_send_bit\">mdiobb_send_bit</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, 0);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_send_bit\">mdiobb_send_bit</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_send_bit\">mdiobb_send_bit</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, (<a class=\"id\" href=\"#op\">op</a> >> 1) &amp; 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_send_bit\">mdiobb_send_bit</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, (<a class=\"id\" href=\"#op\">op</a> >> 0) &amp; 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_send_num\">mdiobb_send_num</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#phy\">phy</a>, 5);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_send_num\">mdiobb_send_num</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#reg\">reg</a>, 5);", 
"}", 
"", 
"<span class=\"comment\">/* In clause 45 mode all commands are prefixed by MDIO_ADDR to specify the</span>", 
"<span class=\"comment\">   lower 16 bits of the 21 bit address. This transfer is done identically to a</span>", 
"<span class=\"comment\">   MDIO_WRITE except for a different code. To enable clause 45 mode or</span>", 
"<span class=\"comment\">   MII_ADDR_C45 into the address. Theoretically clause 45 and normal devices</span>", 
"<span class=\"comment\">   can exist on the same bus. Normal devices should ignore the MDIO_ADDR</span>", 
"<span class=\"comment\">   phase. */</span>", 
"static int <a class=\"id\" href=\"#mdiobb_cmd_addr\">mdiobb_cmd_addr</a>(struct <a class=\"id\" href=\"#mdiobb_ctrl\">mdiobb_ctrl</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>, int <a class=\"id\" href=\"#phy\">phy</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#dev_addr\">dev_addr</a> = (<a class=\"id\" href=\"#addr\">addr</a> >> 16) &amp; 0x1F;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#reg\">reg</a> = <a class=\"id\" href=\"#addr\">addr</a> &amp; 0xFFFF;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_cmd\">mdiobb_cmd</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#MDIO_C45_ADDR\">MDIO_C45_ADDR</a>, <a class=\"id\" href=\"#phy\">phy</a>, <a class=\"id\" href=\"#dev_addr\">dev_addr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* send the turnaround (10) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_send_bit\">mdiobb_send_bit</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_send_bit\">mdiobb_send_bit</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_send_num\">mdiobb_send_num</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#reg\">reg</a>, 16);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#set_mdio_dir\">set_mdio_dir</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_get_bit\">mdiobb_get_bit</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev_addr\">dev_addr</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mdiobb_read\">mdiobb_read</a>(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, int <a class=\"id\" href=\"#phy\">phy</a>, int <a class=\"id\" href=\"#reg\">reg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mdiobb_ctrl\">mdiobb_ctrl</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#priv\">priv</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a> &amp; <a class=\"id\" href=\"#MII_ADDR_C45\">MII_ADDR_C45</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reg\">reg</a> = <a class=\"id\" href=\"#mdiobb_cmd_addr\">mdiobb_cmd_addr</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#phy\">phy</a>, <a class=\"id\" href=\"#reg\">reg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_cmd\">mdiobb_cmd</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#MDIO_C45_READ\">MDIO_C45_READ</a>, <a class=\"id\" href=\"#phy\">phy</a>, <a class=\"id\" href=\"#reg\">reg</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_cmd\">mdiobb_cmd</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#MDIO_READ\">MDIO_READ</a>, <a class=\"id\" href=\"#phy\">phy</a>, <a class=\"id\" href=\"#reg\">reg</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#set_mdio_dir\">set_mdio_dir</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check the turnaround bit: the PHY should be driving it to zero */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mdiobb_get_bit\">mdiobb_get_bit</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* PHY didn't drive TA low -- flush any bits it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * may be trying to send.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 32; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_get_bit\">mdiobb_get_bit</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0xffff;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mdiobb_get_num\">mdiobb_get_num</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, 16);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_get_bit\">mdiobb_get_bit</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mdiobb_write\">mdiobb_write</a>(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, int <a class=\"id\" href=\"#phy\">phy</a>, int <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mdiobb_ctrl\">mdiobb_ctrl</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#priv\">priv</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a> &amp; <a class=\"id\" href=\"#MII_ADDR_C45\">MII_ADDR_C45</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reg\">reg</a> = <a class=\"id\" href=\"#mdiobb_cmd_addr\">mdiobb_cmd_addr</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#phy\">phy</a>, <a class=\"id\" href=\"#reg\">reg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_cmd\">mdiobb_cmd</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#MDIO_C45_WRITE\">MDIO_C45_WRITE</a>, <a class=\"id\" href=\"#phy\">phy</a>, <a class=\"id\" href=\"#reg\">reg</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_cmd\">mdiobb_cmd</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#MDIO_WRITE\">MDIO_WRITE</a>, <a class=\"id\" href=\"#phy\">phy</a>, <a class=\"id\" href=\"#reg\">reg</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* send the turnaround (10) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_send_bit\">mdiobb_send_bit</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_send_bit\">mdiobb_send_bit</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_send_num\">mdiobb_send_num</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#val\">val</a>, 16);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#set_mdio_dir\">set_mdio_dir</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdiobb_get_bit\">mdiobb_get_bit</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#alloc_mdio_bitbang\">alloc_mdio_bitbang</a>(struct <a class=\"id\" href=\"#mdiobb_ctrl\">mdiobb_ctrl</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus\">bus</a> = <a class=\"id\" href=\"#mdiobus_alloc\">mdiobus_alloc</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bus\">bus</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__module_get\">__module_get</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#mdiobb_read\">mdiobb_read</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#write\">write</a> = <a class=\"id\" href=\"#mdiobb_write\">mdiobb_write</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#priv\">priv</a> = <a class=\"id\" href=\"#ctrl\">ctrl</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bus\">bus</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#alloc_mdio_bitbang\">alloc_mdio_bitbang</a>);", 
"", 
"void <a class=\"id\" href=\"#free_mdio_bitbang\">free_mdio_bitbang</a>(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mdiobb_ctrl\">mdiobb_ctrl</a> *<a class=\"id\" href=\"#ctrl\">ctrl</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#priv\">priv</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#ctrl\">ctrl</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdiobus_free\">mdiobus_free</a>(<a class=\"id\" href=\"#bus\">bus</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#free_mdio_bitbang\">free_mdio_bitbang</a>);", 
"", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
];
xr_frag_insert('l/3f/1a3402ed2d1edb9ef801f7e379f8f895d46b51.xr', __xr_tmp);
