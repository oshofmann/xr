var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: tbxfroot - Find the root ACPI table (RSDT)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"actables.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_TABLES\">ACPI_TABLES</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"tbxfroot\")", 
"", 
"<span class=\"comment\">/* Local prototypes */</span>", 
"static <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#acpi_tb_scan_memory_for_rsdp\">acpi_tb_scan_memory_for_rsdp</a>(<a class=\"id\" href=\"#u8\">u8</a> * <a class=\"id\" href=\"#start_address\">start_address</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#length\">length</a>);", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_tb_validate_rsdp\">acpi_tb_validate_rsdp</a>(struct <a class=\"id\" href=\"#acpi_table_rsdp\">acpi_table_rsdp</a> *<a class=\"id\" href=\"#rsdp\">rsdp</a>);", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_tb_validate_rsdp</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Rsdp                - Pointer to unvalidated RSDP</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Validate the RSDP (ptr)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_tb_validate_rsdp\">acpi_tb_validate_rsdp</a>(struct <a class=\"id\" href=\"#acpi_table_rsdp\">acpi_table_rsdp</a> *<a class=\"id\" href=\"#rsdp\">rsdp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The signature and checksum must both be correct</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note: Sometimes there exists more than one RSDP in memory; the valid</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * RSDP has a valid checksum, all others have an invalid checksum.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_STRNCMP\">ACPI_STRNCMP</a>((char *)<a class=\"id\" href=\"#rsdp\">rsdp</a>, <a class=\"id\" href=\"#ACPI_SIG_RSDP\">ACPI_SIG_RSDP</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(<a class=\"id\" href=\"#ACPI_SIG_RSDP\">ACPI_SIG_RSDP</a>) - 1) != 0) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Nope, BAD Signature */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_SIGNATURE\">AE_BAD_SIGNATURE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check the standard checksum */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_tb_checksum\">acpi_tb_checksum</a>((<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#rsdp\">rsdp</a>, <a class=\"id\" href=\"#ACPI_RSDP_CHECKSUM_LENGTH\">ACPI_RSDP_CHECKSUM_LENGTH</a>) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_CHECKSUM\">AE_BAD_CHECKSUM</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check extended checksum if table version &gt;= 2 */</span>", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#rsdp\">rsdp</a>-><a class=\"id\" href=\"#revision\">revision</a> >= 2) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#acpi_tb_checksum\">acpi_tb_checksum</a>((<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#rsdp\">rsdp</a>, <a class=\"id\" href=\"#ACPI_RSDP_XCHECKSUM_LENGTH\">ACPI_RSDP_XCHECKSUM_LENGTH</a>) != 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_CHECKSUM\">AE_BAD_CHECKSUM</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_find_root_pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  table_address           - Where the table pointer is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status, RSDP physical address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Search lower 1_mbyte of memory for the root system descriptor</span>", 
"<span class=\"comment\"> *              pointer structure.  If it is found, set *RSDP to point to it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE1:       The RSDP must be either in the first 1_k of the Extended</span>", 
"<span class=\"comment\"> *              BIOS Data Area or between E0000 and FFFFF (From ACPI Spec.)</span>", 
"<span class=\"comment\"> *              Only a 32-bit physical address is necessary.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE2:       This function is always available, regardless of the</span>", 
"<span class=\"comment\"> *              initialization state of the rest of ACPI.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_find_root_pointer\">acpi_find_root_pointer</a>(<a class=\"id\" href=\"#acpi_size\">acpi_size</a> *<a class=\"id\" href=\"#table_address\">table_address</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#table_ptr\">table_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#mem_rover\">mem_rover</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#physical_address\">physical_address</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#acpi_find_root_pointer\">acpi_find_root_pointer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 1a) Get the location of the Extended BIOS Data Area (EBDA) */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#table_ptr\">table_ptr</a> = <a class=\"id\" href=\"#acpi_os_map_memory\">acpi_os_map_memory</a>((<a class=\"id\" href=\"#acpi_physical_address\">acpi_physical_address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ACPI_EBDA_PTR_LOCATION\">ACPI_EBDA_PTR_LOCATION</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ACPI_EBDA_PTR_LENGTH\">ACPI_EBDA_PTR_LENGTH</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#table_ptr\">table_ptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Could not map memory at 0x%8.8X for length %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_EBDA_PTR_LOCATION\">ACPI_EBDA_PTR_LOCATION</a>, <a class=\"id\" href=\"#ACPI_EBDA_PTR_LENGTH\">ACPI_EBDA_PTR_LENGTH</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MOVE_16_TO_32\">ACPI_MOVE_16_TO_32</a>(&amp;<a class=\"id\" href=\"#physical_address\">physical_address</a>, <a class=\"id\" href=\"#table_ptr\">table_ptr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Convert segment part to physical address */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#physical_address\">physical_address</a> <<= 4;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_unmap_memory\">acpi_os_unmap_memory</a>(<a class=\"id\" href=\"#table_ptr\">table_ptr</a>, <a class=\"id\" href=\"#ACPI_EBDA_PTR_LENGTH\">ACPI_EBDA_PTR_LENGTH</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* EBDA present? */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#physical_address\">physical_address</a> &gt; 0x400) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 1b) Search EBDA paragraphs (EBDA is required to be a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *     minimum of 1_k length)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table_ptr\">table_ptr</a> = <a class=\"id\" href=\"#acpi_os_map_memory\">acpi_os_map_memory</a>((<a class=\"id\" href=\"#acpi_physical_address\">acpi_physical_address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#physical_address\">physical_address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ACPI_EBDA_WINDOW_SIZE\">ACPI_EBDA_WINDOW_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#table_ptr\">table_ptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Could not map memory at 0x%8.8X for length %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#physical_address\">physical_address</a>, <a class=\"id\" href=\"#ACPI_EBDA_WINDOW_SIZE\">ACPI_EBDA_WINDOW_SIZE</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_rover\">mem_rover</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_tb_scan_memory_for_rsdp\">acpi_tb_scan_memory_for_rsdp</a>(<a class=\"id\" href=\"#table_ptr\">table_ptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_EBDA_WINDOW_SIZE\">ACPI_EBDA_WINDOW_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_unmap_memory\">acpi_os_unmap_memory</a>(<a class=\"id\" href=\"#table_ptr\">table_ptr</a>, <a class=\"id\" href=\"#ACPI_EBDA_WINDOW_SIZE\">ACPI_EBDA_WINDOW_SIZE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_rover\">mem_rover</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Return the physical address */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physical_address\">physical_address</a> +=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#ACPI_PTR_DIFF\">ACPI_PTR_DIFF</a>(<a class=\"id\" href=\"#mem_rover\">mem_rover</a>, <a class=\"id\" href=\"#table_ptr\">table_ptr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#table_address\">table_address</a> = <a class=\"id\" href=\"#physical_address\">physical_address</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) Search upper memory: 16-byte boundaries in E0000h-FFFFFh</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#table_ptr\">table_ptr</a> = <a class=\"id\" href=\"#acpi_os_map_memory\">acpi_os_map_memory</a>((<a class=\"id\" href=\"#acpi_physical_address\">acpi_physical_address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ACPI_HI_RSDP_WINDOW_BASE\">ACPI_HI_RSDP_WINDOW_BASE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ACPI_HI_RSDP_WINDOW_SIZE\">ACPI_HI_RSDP_WINDOW_SIZE</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#table_ptr\">table_ptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Could not map memory at 0x%8.8X for length %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_HI_RSDP_WINDOW_BASE\">ACPI_HI_RSDP_WINDOW_BASE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_HI_RSDP_WINDOW_SIZE\">ACPI_HI_RSDP_WINDOW_SIZE</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_rover\">mem_rover</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_tb_scan_memory_for_rsdp\">acpi_tb_scan_memory_for_rsdp</a>(<a class=\"id\" href=\"#table_ptr\">table_ptr</a>, <a class=\"id\" href=\"#ACPI_HI_RSDP_WINDOW_SIZE\">ACPI_HI_RSDP_WINDOW_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_unmap_memory\">acpi_os_unmap_memory</a>(<a class=\"id\" href=\"#table_ptr\">table_ptr</a>, <a class=\"id\" href=\"#ACPI_HI_RSDP_WINDOW_SIZE\">ACPI_HI_RSDP_WINDOW_SIZE</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_rover\">mem_rover</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Return the physical address */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physical_address\">physical_address</a> = (<a class=\"id\" href=\"#u32\">u32</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#ACPI_HI_RSDP_WINDOW_BASE\">ACPI_HI_RSDP_WINDOW_BASE</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ACPI_PTR_DIFF\">ACPI_PTR_DIFF</a>(<a class=\"id\" href=\"#mem_rover\">mem_rover</a>, <a class=\"id\" href=\"#table_ptr\">table_ptr</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#table_address\">table_address</a> = <a class=\"id\" href=\"#physical_address\">physical_address</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* A valid RSDP was not found */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"A valid RSDP was not found\"));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_tb_scan_memory_for_rsdp</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  start_address       - Starting pointer for search</span>", 
"<span class=\"comment\"> *              Length              - Maximum length to search</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Pointer to the RSDP if found, otherwise NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Search a block of memory for the RSDP signature</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"static <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#acpi_tb_scan_memory_for_rsdp\">acpi_tb_scan_memory_for_rsdp</a>(<a class=\"id\" href=\"#u8\">u8</a> * <a class=\"id\" href=\"#start_address\">start_address</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#mem_rover\">mem_rover</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#end_address\">end_address</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#tb_scan_memory_for_rsdp\">tb_scan_memory_for_rsdp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_address\">end_address</a> = <a class=\"id\" href=\"#start_address\">start_address</a> + <a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Search from given start address for the requested length */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#mem_rover\">mem_rover</a> = <a class=\"id\" href=\"#start_address\">start_address</a>; <a class=\"id\" href=\"#mem_rover\">mem_rover</a> &lt; <a class=\"id\" href=\"#end_address\">end_address</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#mem_rover\">mem_rover</a> += <a class=\"id\" href=\"#ACPI_RSDP_SCAN_STEP\">ACPI_RSDP_SCAN_STEP</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The RSDP signature and checksum must both be correct */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_tb_validate_rsdp\">acpi_tb_validate_rsdp</a>(<a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (struct <a class=\"id\" href=\"#acpi_table_rsdp\">acpi_table_rsdp</a>, <a class=\"id\" href=\"#mem_rover\">mem_rover</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Sig and checksum valid, we have found a real RSDP */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"RSDP located at physical address %p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#mem_rover\">mem_rover</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_PTR\">return_PTR</a>(<a class=\"id\" href=\"#mem_rover\">mem_rover</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No sig match or bad checksum, keep searching */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Searched entire block, no RSDP was found */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Searched entire block from %p, valid RSDP was not found\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#start_address\">start_address</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_PTR\">return_PTR</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
];
xr_frag_insert('l/3f/2108429c68ba1589107c9b6af93377f0b16b34.xr', __xr_tmp);
