var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * AGPGART backend specific includes. Not for userspace consumption.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2004 Silicon Graphics, Inc.</span>", 
"<span class=\"comment\"> * Copyright (C) 2002-2003 Dave Jones</span>", 
"<span class=\"comment\"> * Copyright (C) 1999 Jeff Hartmann</span>", 
"<span class=\"comment\"> * Copyright (C) 1999 Precision Insight, Inc.</span>", 
"<span class=\"comment\"> * Copyright (C) 1999 Xi Graphics, Inc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Permission is hereby granted, free of charge, to any person obtaining a</span>", 
"<span class=\"comment\"> * copy of this software and associated documentation files (the \"Software\"),</span>", 
"<span class=\"comment\"> * to deal in the Software without restriction, including without limitation</span>", 
"<span class=\"comment\"> * the rights to use, copy, modify, merge, publish, distribute, sublicense,</span>", 
"<span class=\"comment\"> * and/or sell copies of the Software, and to permit persons to whom the</span>", 
"<span class=\"comment\"> * Software is furnished to do so, subject to the following conditions:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The above copyright notice and this permission notice shall be included</span>", 
"<span class=\"comment\"> * in all copies or substantial portions of the Software.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS</span>", 
"<span class=\"comment\"> * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>", 
"<span class=\"comment\"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL</span>", 
"<span class=\"comment\"> * JEFF HARTMANN, OR ANY OTHER CONTRIBUTORS BE LIABLE FOR ANY CLAIM, </span>", 
"<span class=\"comment\"> * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR </span>", 
"<span class=\"comment\"> * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE </span>", 
"<span class=\"comment\"> * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_AGP_BACKEND_H\">_AGP_BACKEND_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_AGP_BACKEND_H\">_AGP_BACKEND_H</a> 1", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"enum <a class=\"id\" href=\"#chipset_type\">chipset_type</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NOT_SUPPORTED\">NOT_SUPPORTED</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SUPPORTED\">SUPPORTED</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#agp_version\">agp_version</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#major\">major</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#minor\">minor</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#agp_kern_info\">agp_kern_info</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#agp_version\">agp_version</a> <a class=\"id\" href=\"#version\">version</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#chipset_type\">chipset_type</a> <a class=\"id\" href=\"#chipset\">chipset</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#aper_base\">aper_base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#aper_size\">aper_size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_memory\">max_memory</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* In pages */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#current_memory\">current_memory</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#cant_use_aperture\">cant_use_aperture</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#page_mask\">page_mask</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#vm_operations_struct\">vm_operations_struct</a> *<a class=\"id\" href=\"#vm_ops\">vm_ops</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The agp_memory structure has information about the block of agp memory</span>", 
"<span class=\"comment\"> * allocated.  A caller may manipulate the next and prev pointers to link</span>", 
"<span class=\"comment\"> * each allocated item into a list.  These pointers are ignored by the backend.</span>", 
"<span class=\"comment\"> * Everything else should never be written to, but the caller may read any of</span>", 
"<span class=\"comment\"> * the items to determine the status of this block of agp memory.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#agp_bridge_data\">agp_bridge_data</a>;", 
"", 
"struct <a class=\"id\" href=\"#agp_memory\">agp_memory</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#agp_memory\">agp_memory</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#agp_memory\">agp_memory</a> *<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#agp_bridge_data\">agp_bridge_data</a> *<a class=\"id\" href=\"#bridge\">bridge</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#page_count\">page_count</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num_scratch_pages\">num_scratch_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#off_t\">off_t</a> <a class=\"id\" href=\"#pg_start\">pg_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#physical\">physical</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_bound\">is_bound</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_flushed\">is_flushed</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* list of agp_memory mapped to the aperture */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#mapped_list\">mapped_list</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* DMA-mapped addresses */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg_list\">sg_list</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num_sg\">num_sg</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AGP_NORMAL_MEMORY\">AGP_NORMAL_MEMORY</a> 0", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AGP_USER_TYPES\">AGP_USER_TYPES</a> (1 << 16)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AGP_USER_MEMORY\">AGP_USER_MEMORY</a> (<a class=\"id\" href=\"#AGP_USER_TYPES\">AGP_USER_TYPES</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AGP_USER_CACHED_MEMORY\">AGP_USER_CACHED_MEMORY</a> (<a class=\"id\" href=\"#AGP_USER_TYPES\">AGP_USER_TYPES</a> + 1)", 
"", 
"extern struct <a class=\"id\" href=\"#agp_bridge_data\">agp_bridge_data</a> *<a class=\"id\" href=\"#agp_bridge\">agp_bridge</a>;", 
"extern struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#agp_bridges\">agp_bridges</a>;", 
"", 
"extern struct <a class=\"id\" href=\"#agp_bridge_data\">agp_bridge_data</a> *(*<a class=\"id\" href=\"#agp_find_bridge\">agp_find_bridge</a>)(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *);", 
"", 
"extern void <a class=\"id\" href=\"#agp_free_memory\">agp_free_memory</a>(struct <a class=\"id\" href=\"#agp_memory\">agp_memory</a> *);", 
"extern struct <a class=\"id\" href=\"#agp_memory\">agp_memory</a> *<a class=\"id\" href=\"#agp_allocate_memory\">agp_allocate_memory</a>(struct <a class=\"id\" href=\"#agp_bridge_data\">agp_bridge_data</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#u32\">u32</a>);", 
"extern int <a class=\"id\" href=\"#agp_copy_info\">agp_copy_info</a>(struct <a class=\"id\" href=\"#agp_bridge_data\">agp_bridge_data</a> *, struct <a class=\"id\" href=\"#agp_kern_info\">agp_kern_info</a> *);", 
"extern int <a class=\"id\" href=\"#agp_bind_memory\">agp_bind_memory</a>(struct <a class=\"id\" href=\"#agp_memory\">agp_memory</a> *, <a class=\"id\" href=\"#off_t\">off_t</a>);", 
"extern int <a class=\"id\" href=\"#agp_unbind_memory\">agp_unbind_memory</a>(struct <a class=\"id\" href=\"#agp_memory\">agp_memory</a> *);", 
"extern int <a class=\"id\" href=\"#agp_rebind_memory\">agp_rebind_memory</a>(void);", 
"extern void <a class=\"id\" href=\"#agp_enable\">agp_enable</a>(struct <a class=\"id\" href=\"#agp_bridge_data\">agp_bridge_data</a> *, <a class=\"id\" href=\"#u32\">u32</a>);", 
"extern struct <a class=\"id\" href=\"#agp_bridge_data\">agp_bridge_data</a> *<a class=\"id\" href=\"#agp_backend_acquire\">agp_backend_acquire</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *);", 
"extern void <a class=\"id\" href=\"#agp_backend_release\">agp_backend_release</a>(struct <a class=\"id\" href=\"#agp_bridge_data\">agp_bridge_data</a> *);", 
"extern void <a class=\"id\" href=\"#agp_flush_chipset\">agp_flush_chipset</a>(struct <a class=\"id\" href=\"#agp_bridge_data\">agp_bridge_data</a> *);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* _AGP_BACKEND_H */</span>", 
];
xr_frag_insert('l/3f/2c65485f1b5d963c6281c1468689eadea4af5b.xr', __xr_tmp);
