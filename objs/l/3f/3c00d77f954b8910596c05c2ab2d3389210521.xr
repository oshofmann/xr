var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#child_mnt\">child_mnt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#child_mnt\">child_mnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a> = <a class=\"id\" href=\"#mntget\">mntget</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#child_mnt\">child_mnt</a>-><a class=\"id\" href=\"#mnt_mountpoint\">mnt_mountpoint</a> = <a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_mounted\">d_mounted</a>++;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * vfsmount lock must be held for write</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#attach_mnt\">attach_mnt</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt_set_mountpoint\">mnt_set_mountpoint</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_hash\">mnt_hash</a>, <a class=\"id\" href=\"#mount_hashtable\">mount_hashtable</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_child\">mnt_child</a>, &amp;<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_mounts\">mnt_mounts</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * vfsmount lock must be held for write</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#commit_tree\">commit_tree</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mnt_namespace\">mnt_namespace</a> *<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#mnt_ns\">mnt_ns</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#parent\">parent</a> == <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#head\">head</a>, &amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_list\">mnt_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#m\">m</a>, &amp;<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#mnt_list\">mnt_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#mnt_ns\">mnt_ns</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_splice\">list_splice</a>(&amp;<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#prev\">prev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_hash\">mnt_hash</a>, <a class=\"id\" href=\"#mount_hashtable\">mount_hashtable</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_mountpoint\">mnt_mountpoint</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_child\">mnt_child</a>, &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#mnt_mounts\">mnt_mounts</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#touch_mnt_namespace\">touch_mnt_namespace</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#next_mnt\">next_mnt</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_mounts\">mnt_mounts</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> == &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_mounts\">mnt_mounts</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#root\">root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_child\">mnt_child</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> != &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a>-><a class=\"id\" href=\"#mnt_mounts\">mnt_mounts</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a>, <a class=\"id\" href=\"#mnt_child\">mnt_child</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#skip_mnt_tree\">skip_mnt_tree</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_mounts\">mnt_mounts</a>.<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#prev\">prev</a> != &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_mounts\">mnt_mounts</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a>, <a class=\"id\" href=\"#mnt_child\">mnt_child</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_mounts\">mnt_mounts</a>.<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#clone_mnt\">clone_mnt</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#old\">old</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#alloc_vfsmnt\">alloc_vfsmnt</a>(<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#mnt_devname\">mnt_devname</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt\">mnt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flag\">flag</a> &amp; (<a class=\"id\" href=\"#CL_SLAVE\">CL_SLAVE</a> | <a class=\"id\" href=\"#CL_PRIVATE\">CL_PRIVATE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_group_id\">mnt_group_id</a> = 0; <span class=\"comment\">/* not a peer of original */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_group_id\">mnt_group_id</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#mnt_group_id\">mnt_group_id</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#flag\">flag</a> &amp; <a class=\"id\" href=\"#CL_MAKE_SHARED\">CL_MAKE_SHARED</a>) && !<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_group_id\">mnt_group_id</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#mnt_alloc_group_id\">mnt_alloc_group_id</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_active\">s_active</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a> = <a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a> = <a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_mountpoint\">mnt_mountpoint</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a> = <a class=\"id\" href=\"#mnt\">mnt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flag\">flag</a> &amp; <a class=\"id\" href=\"#CL_SLAVE\">CL_SLAVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_slave\">mnt_slave</a>, &amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#mnt_slave_list\">mnt_slave_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_master\">mnt_master</a> = <a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#CLEAR_MNT_SHARED\">CLEAR_MNT_SHARED</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (!(<a class=\"id\" href=\"#flag\">flag</a> &amp; <a class=\"id\" href=\"#CL_PRIVATE\">CL_PRIVATE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#flag\">flag</a> &amp; <a class=\"id\" href=\"#CL_MAKE_SHARED\">CL_MAKE_SHARED</a>) || <a class=\"id\" href=\"#IS_MNT_SHARED\">IS_MNT_SHARED</a>(<a class=\"id\" href=\"#old\">old</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_share\">mnt_share</a>, &amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#mnt_share\">mnt_share</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_MNT_SLAVE\">IS_MNT_SLAVE</a>(<a class=\"id\" href=\"#old\">old</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_slave\">mnt_slave</a>, &amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#mnt_slave\">mnt_slave</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_master\">mnt_master</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#mnt_master\">mnt_master</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flag\">flag</a> &amp; <a class=\"id\" href=\"#CL_MAKE_SHARED\">CL_MAKE_SHARED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_mnt_shared\">set_mnt_shared</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* stick the duplicate mount on the same expiry list</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * as the original if that was on one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flag\">flag</a> &amp; <a class=\"id\" href=\"#CL_EXPIRE\">CL_EXPIRE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#mnt_expire\">mnt_expire</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_expire\">mnt_expire</a>, &amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#mnt_expire\">mnt_expire</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mnt\">mnt</a>;", 
"", 
" <a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_vfsmnt\">free_vfsmnt</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__mntput\">__mntput</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This probably indicates that somebody messed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * up a mnt_want/drop_write() pair.  If this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * happens, the filesystem was probably unable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to make r/w-&gt;r/o transitions.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * atomic_dec_and_lock() used to deal with -&gt;mnt_count decrements</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * provides barriers, so count_mnt_writers() below is safe.  AV</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#count_mnt_writers\">count_mnt_writers</a>(<a class=\"id\" href=\"#mnt\">mnt</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_vfsmount_delete\">fsnotify_vfsmount_delete</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_vfsmnt\">free_vfsmnt</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#deactivate_super\">deactivate_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#mntput_no_expire\">mntput_no_expire</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_add_unless\">atomic_add_unless</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_count\">mnt_count</a>, -1, 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_lock\">br_write_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_count\">mnt_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#br_write_unlock\">br_write_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_pinned\">mnt_pinned</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#br_write_unlock\">br_write_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mntput\">__mntput</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_pinned\">mnt_pinned</a> + 1, &amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_count\">mnt_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_pinned\">mnt_pinned</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_unlock\">br_write_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acct_auto_close_mnt\">acct_auto_close_mnt</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mntput_no_expire\">mntput_no_expire</a>);", 
"", 
"void <a class=\"id\" href=\"#mnt_pin\">mnt_pin</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_lock\">br_write_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_pinned\">mnt_pinned</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_unlock\">br_write_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mnt_pin\">mnt_pin</a>);", 
"", 
"void <a class=\"id\" href=\"#mnt_unpin\">mnt_unpin</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_lock\">br_write_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_pinned\">mnt_pinned</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_count\">mnt_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_pinned\">mnt_pinned</a>--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_unlock\">br_write_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mnt_unpin\">mnt_unpin</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mangle\">mangle</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, const char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_escape\">seq_escape</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#s\">s</a>, \" \\t\\n\\\\\");", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Simple .show_options callback for filesystems which don't want to</span>", 
"<span class=\"comment\"> * implement more complex mount option showing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See also save_mount_options().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#generic_show_options\">generic_show_options</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#options\">options</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#options\">options</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_options\">s_options</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#options\">options</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#options\">options</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, ',');", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mangle\">mangle</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#options\">options</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_show_options\">generic_show_options</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If filesystem uses generic_show_options(), this function should be</span>", 
"<span class=\"comment\"> * called from the fill_super() callback.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The .remount_fs callback usually needs to be handled in a special</span>", 
"<span class=\"comment\"> * way, to make sure, that previous options are not overwritten if the</span>", 
"<span class=\"comment\"> * remount fails.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Also note, that if the filesystem's .remount_fs function doesn't</span>", 
"<span class=\"comment\"> * reset all options to their default value, but changes only newly</span>", 
"<span class=\"comment\"> * given options, then the displayed options will not reflect reality</span>", 
"<span class=\"comment\"> * any more.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#save_mount_options\">save_mount_options</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, char *<a class=\"id\" href=\"#options\">options</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_options\">s_options</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_options\">s_options</a>, <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#options\">options</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#save_mount_options\">save_mount_options</a>);", 
"", 
"void <a class=\"id\" href=\"#replace_mount_options\">replace_mount_options</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, char *<a class=\"id\" href=\"#options\">options</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_options\">s_options</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_options\">s_options</a>, <a class=\"id\" href=\"#options\">options</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#replace_mount_options\">replace_mount_options</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"<span class=\"comment\">/* iterator */</span>", 
"static void *<a class=\"id\" href=\"#m_start\">m_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_mounts\">proc_mounts</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_list_start\">seq_list_start</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#list\">list</a>, *<a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#m_next\">m_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_mounts\">proc_mounts</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_list_next\">seq_list_next</a>(<a class=\"id\" href=\"#v\">v</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#m_stop\">m_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#mnt_had_events\">mnt_had_events</a>(struct <a class=\"id\" href=\"#proc_mounts\">proc_mounts</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mnt_namespace\">mnt_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ns\">ns</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_read_lock\">br_read_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#event\">event</a> != <a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#event\">event</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_read_unlock\">br_read_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#proc_fs_info\">proc_fs_info</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flag\">flag</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#str\">str</a>;", 
"};", 
"", 
"static int <a class=\"id\" href=\"#show_sb_opts\">show_sb_opts</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>static const struct <a class=\"id\" href=\"#proc_fs_info\">proc_fs_info</a> <a class=\"id\" href=\"#fs_info\">fs_info</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#MS_SYNCHRONOUS\">MS_SYNCHRONOUS</a>, \",sync\" },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#MS_DIRSYNC\">MS_DIRSYNC</a>, \",dirsync\" },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#MS_MANDLOCK\">MS_MANDLOCK</a>, \",mand\" },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ 0, <a class=\"id\" href=\"#NULL\">NULL</a> }", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#proc_fs_info\">proc_fs_info</a> *<a class=\"id\" href=\"#fs_infop\">fs_infop</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#fs_infop\">fs_infop</a> = <a class=\"id\" href=\"#fs_info\">fs_info</a>; <a class=\"id\" href=\"#fs_infop\">fs_infop</a>-><a class=\"id\" href=\"#flag\">flag</a>; <a class=\"id\" href=\"#fs_infop\">fs_infop</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#fs_infop\">fs_infop</a>-><a class=\"id\" href=\"#flag\">flag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#fs_infop\">fs_infop</a>-><a class=\"id\" href=\"#str\">str</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#security_sb_show_options\">security_sb_show_options</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#sb\">sb</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#show_mnt_opts\">show_mnt_opts</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>static const struct <a class=\"id\" href=\"#proc_fs_info\">proc_fs_info</a> <a class=\"id\" href=\"#mnt_info\">mnt_info</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#MNT_NOSUID\">MNT_NOSUID</a>, \",nosuid\" },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#MNT_NODEV\">MNT_NODEV</a>, \",nodev\" },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#MNT_NOEXEC\">MNT_NOEXEC</a>, \",noexec\" },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#MNT_NOATIME\">MNT_NOATIME</a>, \",noatime\" },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#MNT_NODIRATIME\">MNT_NODIRATIME</a>, \",nodiratime\" },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#MNT_RELATIME\">MNT_RELATIME</a>, \",relatime\" },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ 0, <a class=\"id\" href=\"#NULL\">NULL</a> }", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#proc_fs_info\">proc_fs_info</a> *<a class=\"id\" href=\"#fs_infop\">fs_infop</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#fs_infop\">fs_infop</a> = <a class=\"id\" href=\"#mnt_info\">mnt_info</a>; <a class=\"id\" href=\"#fs_infop\">fs_infop</a>-><a class=\"id\" href=\"#flag\">flag</a>; <a class=\"id\" href=\"#fs_infop\">fs_infop</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &amp; <a class=\"id\" href=\"#fs_infop\">fs_infop</a>-><a class=\"id\" href=\"#flag\">flag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#fs_infop\">fs_infop</a>-><a class=\"id\" href=\"#str\">str</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#show_type\">show_type</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mangle\">mangle</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_type\">s_type</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_subtype\">s_subtype</a> && <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_subtype\">s_subtype</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, '.');", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mangle\">mangle</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_subtype\">s_subtype</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#show_vfsmnt\">show_vfsmnt</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#v\">v</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a>, <a class=\"id\" href=\"#mnt_list\">mnt_list</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#mnt_path\">mnt_path</a> = { .<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>, .<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#mnt\">mnt</a> };", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mangle\">mangle</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_devname\">mnt_devname</a> ? <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_devname\">mnt_devname</a> : \"none\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, ' ');", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_path\">seq_path</a>(<a class=\"id\" href=\"#m\">m</a>, &amp;<a class=\"id\" href=\"#mnt_path\">mnt_path</a>, \" \\t\\n\\\\\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, ' ');", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_type\">show_type</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#__mnt_is_readonly\">__mnt_is_readonly</a>(<a class=\"id\" href=\"#mnt\">mnt</a>) ? \" ro\" : \" rw\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#show_sb_opts\">show_sb_opts</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_mnt_opts\">show_mnt_opts</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#show_options\">show_options</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#show_options\">show_options</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \" 0 0\\n\");", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#mounts_op\">mounts_op</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a><span class=\"ts\"/>= <a class=\"id\" href=\"#m_start\">m_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a><span class=\"ts\"/>= <a class=\"id\" href=\"#m_next\">m_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a><span class=\"ts\"/>= <a class=\"id\" href=\"#m_stop\">m_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a><span class=\"ts\"/>= <a class=\"id\" href=\"#show_vfsmnt\">show_vfsmnt</a>", 
"};", 
"", 
"static int <a class=\"id\" href=\"#show_mountinfo\">show_mountinfo</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_mounts\">proc_mounts</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#v\">v</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a>, <a class=\"id\" href=\"#mnt_list\">mnt_list</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#mnt_path\">mnt_path</a> = { .<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>, .<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#mnt\">mnt</a> };", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%i %i %u:%u \", <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_id\">mnt_id</a>, <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a>-><a class=\"id\" href=\"#mnt_id\">mnt_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_dev\">s_dev</a>), <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_dev\">s_dev</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_dentry\">seq_dentry</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>, \" \\t\\n\\\\\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, ' ');", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_path_root\">seq_path_root</a>(<a class=\"id\" href=\"#m\">m</a>, &amp;<a class=\"id\" href=\"#mnt_path\">mnt_path</a>, &amp;<a class=\"id\" href=\"#root\">root</a>, \" \\t\\n\\\\\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#root\">root</a>.<a class=\"id\" href=\"#mnt\">mnt</a> != <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#root\">root</a>.<a class=\"id\" href=\"#mnt\">mnt</a> || <a class=\"id\" href=\"#root\">root</a>.<a class=\"id\" href=\"#dentry\">dentry</a> != <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#root\">root</a>.<a class=\"id\" href=\"#dentry\">dentry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Mountpoint is outside root, discard that one.  Ugly,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but less so than trying to do that in iterator in a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * race-free way (due to renames).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SEQ_SKIP\">SEQ_SKIP</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &amp; <a class=\"id\" href=\"#MNT_READONLY\">MNT_READONLY</a> ? \" ro\" : \" rw\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_mnt_opts\">show_mnt_opts</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Tagged fields (\"foo:X\" or \"bar\") */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_MNT_SHARED\">IS_MNT_SHARED</a>(<a class=\"id\" href=\"#mnt\">mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" shared:%i\", <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_group_id\">mnt_group_id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_MNT_SLAVE\">IS_MNT_SLAVE</a>(<a class=\"id\" href=\"#mnt\">mnt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#master\">master</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_master\">mnt_master</a>-><a class=\"id\" href=\"#mnt_group_id\">mnt_group_id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#dom\">dom</a> = <a class=\"id\" href=\"#get_dominating_id\">get_dominating_id</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" master:%i\", <a class=\"id\" href=\"#master\">master</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dom\">dom</a> && <a class=\"id\" href=\"#dom\">dom</a> != <a class=\"id\" href=\"#master\">master</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" propagate_from:%i\", <a class=\"id\" href=\"#dom\">dom</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_MNT_UNBINDABLE\">IS_MNT_UNBINDABLE</a>(<a class=\"id\" href=\"#mnt\">mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \" unbindable\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Filesystem specific data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \" - \");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_type\">show_type</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, ' ');", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mangle\">mangle</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_devname\">mnt_devname</a> ? <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_devname\">mnt_devname</a> : \"none\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a> ? \" ro\" : \" rw\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#show_sb_opts\">show_sb_opts</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#show_options\">show_options</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#show_options\">show_options</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, '\\n');", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#mountinfo_op\">mountinfo_op</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a><span class=\"ts\"/>= <a class=\"id\" href=\"#m_start\">m_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a><span class=\"ts\"/>= <a class=\"id\" href=\"#m_next\">m_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a><span class=\"ts\"/>= <a class=\"id\" href=\"#m_stop\">m_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a><span class=\"ts\"/>= <a class=\"id\" href=\"#show_mountinfo\">show_mountinfo</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#show_vfsstat\">show_vfsstat</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#v\">v</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a>, <a class=\"id\" href=\"#mnt_list\">mnt_list</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#mnt_path\">mnt_path</a> = { .<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>, .<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#mnt\">mnt</a> };", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* device */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_devname\">mnt_devname</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \"device \");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mangle\">mangle</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_devname\">mnt_devname</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \"no device\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* mount point */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \" mounted on \");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_path\">seq_path</a>(<a class=\"id\" href=\"#m\">m</a>, &amp;<a class=\"id\" href=\"#mnt_path\">mnt_path</a>, \" \\t\\n\\\\\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, ' ');", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* file system type */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \"with fstype \");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_type\">show_type</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* optional statistics */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#show_stats\">show_stats</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, ' ');", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#show_stats\">show_stats</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, '\\n');", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#mountstats_op\">mountstats_op</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a><span class=\"ts\"/>= <a class=\"id\" href=\"#m_start\">m_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a><span class=\"ts\"/>= <a class=\"id\" href=\"#m_next\">m_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a><span class=\"ts\"/>= <a class=\"id\" href=\"#m_stop\">m_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a><span class=\"ts\"/>= <a class=\"id\" href=\"#show_vfsstat\">show_vfsstat</a>,", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a>  <span class=\"comment\">/* CONFIG_PROC_FS */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * may_umount_tree - check if a mount tree is busy</span>", 
"<span class=\"comment\"> * @mnt: root of mount tree</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is called to check if a tree of mounts has any</span>", 
"<span class=\"comment\"> * open files, pwds, chroots or sub mounts that are</span>", 
"<span class=\"comment\"> * busy.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#may_umount_tree\">may_umount_tree</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#actual_refs\">actual_refs</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#minimum_refs\">minimum_refs</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_read_lock\">br_read_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#mnt\">mnt</a>; <a class=\"id\" href=\"#p\">p</a>; <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#next_mnt\">next_mnt</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#mnt\">mnt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#actual_refs\">actual_refs</a> += <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_count\">mnt_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#minimum_refs\">minimum_refs</a> += 2;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_read_unlock\">br_read_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#actual_refs\">actual_refs</a> &gt; <a class=\"id\" href=\"#minimum_refs\">minimum_refs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#may_umount_tree\">may_umount_tree</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * may_umount - check if a mount point is busy</span>", 
"<span class=\"comment\"> * @mnt: root of mount</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is called to check if a mount point has any</span>", 
"<span class=\"comment\"> * open files, pwds, chroots or sub mounts. If the</span>", 
"<span class=\"comment\"> * mount has sub mounts this will return busy</span>", 
"<span class=\"comment\"> * regardless of whether the sub mounts are busy.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Doesn't take quota and stuff into account. IOW, in some cases it will</span>", 
"<span class=\"comment\"> * give false negatives. The main reason why it's here is that we need</span>", 
"<span class=\"comment\"> * a non-destructive way to look for easily umountable filesystems.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#may_umount\">may_umount</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_read_lock\">br_read_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#propagate_mount_busy\">propagate_mount_busy</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, 2))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_read_unlock\">br_read_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#may_umount\">may_umount</a>);", 
"", 
"void <a class=\"id\" href=\"#release_mounts\">release_mounts</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#head\">head</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a>, <a class=\"id\" href=\"#mnt_hash\">mnt_hash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_hash\">mnt_hash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a> != <a class=\"id\" href=\"#mnt\">mnt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#m\">m</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#br_write_lock\">br_write_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_mountpoint\">mnt_mountpoint</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_mountpoint\">mnt_mountpoint</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a> = <a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#mnt_ghosts\">mnt_ghosts</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#br_write_unlock\">br_write_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mntput\">mntput</a>(<a class=\"id\" href=\"#m\">m</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mntput\">mntput</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * vfsmount lock must be held for write</span>", 
"<span class=\"comment\"> * namespace_sem must be held for write</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#umount_tree\">umount_tree</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, int <a class=\"id\" href=\"#propagate\">propagate</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#kill\">kill</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#mnt\">mnt</a>; <a class=\"id\" href=\"#p\">p</a>; <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#next_mnt\">next_mnt</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#mnt\">mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_hash\">mnt_hash</a>, <a class=\"id\" href=\"#kill\">kill</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#propagate\">propagate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#propagate_umount\">propagate_umount</a>(<a class=\"id\" href=\"#kill\">kill</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#kill\">kill</a>, <a class=\"id\" href=\"#mnt_hash\">mnt_hash</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_expire\">mnt_expire</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_list\">mnt_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__touch_mnt_namespace\">__touch_mnt_namespace</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_ns\">mnt_ns</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_ns\">mnt_ns</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_child\">mnt_child</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a> != <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a>-><a class=\"id\" href=\"#mnt_ghosts\">mnt_ghosts</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_mountpoint\">mnt_mountpoint</a>-><a class=\"id\" href=\"#d_mounted\">d_mounted</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#change_mnt_propagation\">change_mnt_propagation</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#MS_PRIVATE\">MS_PRIVATE</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#shrink_submounts\">shrink_submounts</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#umounts\">umounts</a>);", 
"", 
"static int <a class=\"id\" href=\"#do_umount\">do_umount</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#umount_list\">umount_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#security_sb_umount\">security_sb_umount</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allow userspace to request a mountpoint be expired rather than</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unmounting unconditionally. Unmount only happens if:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  (1) the mark is already set (the mark is cleared by mntput())</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  (2) the usage count == 1 [parent vfsmount] + 1 [sys_umount]</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MNT_EXPIRE\">MNT_EXPIRE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt\">mnt</a> == <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#root\">root</a>.<a class=\"id\" href=\"#mnt\">mnt</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#MNT_FORCE\">MNT_FORCE</a> | <a class=\"id\" href=\"#MNT_DETACH\">MNT_DETACH</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_count\">mnt_count</a>) != 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#xchg\">xchg</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_expiry_mark\">mnt_expiry_mark</a>, 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we may have to abort operations to get out of this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mount, and they will themselves hold resources we must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allow the fs to do things. In the Unix tradition of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 'Gee thats tricky lets do it in userspace' the umount_begin</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * might fail to complete on the first run through as other tasks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * must return, and the like. Thats for the mount program to worry</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * about for the moment.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MNT_FORCE\">MNT_FORCE</a> && <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#umount_begin\">umount_begin</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#umount_begin\">umount_begin</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No sense to grab the lock for this test, but test itself looks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * somewhat bogus. Suggestions for better replacement?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ho-hum... In principle, we might treat that as umount + switch</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to rootfs. GC would eventually take care of the old vfsmount.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Actually it makes sense, especially if rootfs would contain a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * /reboot - static binary that would close all descriptors and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * call reboot(9). Then init(8) could umount root and exec /reboot.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt\">mnt</a> == <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#root\">root</a>.<a class=\"id\" href=\"#mnt\">mnt</a> && !(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MNT_DETACH\">MNT_DETACH</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Special case for \"unmounting\" root ...</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we just try to remount it readonly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#do_remount_sb\">do_remount_sb</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_lock\">br_write_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>++;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MNT_DETACH\">MNT_DETACH</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shrink_submounts\">shrink_submounts</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, &amp;<a class=\"id\" href=\"#umount_list\">umount_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MNT_DETACH\">MNT_DETACH</a> || !<a class=\"id\" href=\"#propagate_mount_busy\">propagate_mount_busy</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, 2)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_list\">mnt_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#umount_tree\">umount_tree</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, 1, &amp;<a class=\"id\" href=\"#umount_list\">umount_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_unlock\">br_write_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_mounts\">release_mounts</a>(&amp;<a class=\"id\" href=\"#umount_list\">umount_list</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Now umount can handle mount points as well as block devices.</span>", 
"<span class=\"comment\"> * This is important for filesystems which use unnamed block devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We now support a flag for forced unmount like the other 'big iron'</span>", 
"<span class=\"comment\"> * unixes. Our API is identical to OSF/1 to avoid making a mess of AMD</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#umount\">umount</a>, char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#name\">name</a>, int, <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lookup_flags\">lookup_flags</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; ~(<a class=\"id\" href=\"#MNT_FORCE\">MNT_FORCE</a> | <a class=\"id\" href=\"#MNT_DETACH\">MNT_DETACH</a> | <a class=\"id\" href=\"#MNT_EXPIRE\">MNT_EXPIRE</a> | <a class=\"id\" href=\"#UMOUNT_NOFOLLOW\">UMOUNT_NOFOLLOW</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#UMOUNT_NOFOLLOW\">UMOUNT_NOFOLLOW</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lookup_flags\">lookup_flags</a> |= <a class=\"id\" href=\"#LOOKUP_FOLLOW\">LOOKUP_FOLLOW</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#user_path_at\">user_path_at</a>(<a class=\"id\" href=\"#AT_FDCWD\">AT_FDCWD</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#lookup_flags\">lookup_flags</a>, &amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> != <a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#dput_and_out\">dput_and_out</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_mnt\">check_mnt</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#dput_and_out\">dput_and_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#dput_and_out\">dput_and_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#do_umount\">do_umount</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<a class=\"id\" href=\"#dput_and_out\">dput_and_out</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* we mustn't call path_put() as that would clear mnt_expiry_mark */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mntput_no_expire\">mntput_no_expire</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__ARCH_WANT_SYS_OLDUMOUNT\">__ARCH_WANT_SYS_OLDUMOUNT</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The 2.0 compatible umount. No flags.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#oldumount\">oldumount</a>, char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sys_umount\">sys_umount</a>(<a class=\"id\" href=\"#name\">name</a>, 0);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#mount_is_safe\">mount_is_safe</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#notyet\">notyet</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISLNK\">S_ISLNK</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> &amp; <a class=\"id\" href=\"#S_ISVTX\">S_ISVTX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#current_uid\">current_uid</a>() != <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode_permission\">inode_permission</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#copy_tree\">copy_tree</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#res\">res</a>, *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#q\">q</a>, *<a class=\"id\" href=\"#r\">r</a>, *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#path\">path</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flag\">flag</a> &amp; <a class=\"id\" href=\"#CL_COPY_ALL\">CL_COPY_ALL</a>) && <a class=\"id\" href=\"#IS_MNT_UNBINDABLE\">IS_MNT_UNBINDABLE</a>(<a class=\"id\" href=\"#mnt\">mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#clone_mnt\">clone_mnt</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#flag\">flag</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Enomem\">Enomem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#mnt_mountpoint\">mnt_mountpoint</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_mountpoint\">mnt_mountpoint</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#r\">r</a>, &amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_mounts\">mnt_mounts</a>, <a class=\"id\" href=\"#mnt_child\">mnt_child</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_subdir\">is_subdir</a>(<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#mnt_mountpoint\">mnt_mountpoint</a>, <a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#r\">r</a>; <a class=\"id\" href=\"#s\">s</a>; <a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#next_mnt\">next_mnt</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#r\">r</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flag\">flag</a> &amp; <a class=\"id\" href=\"#CL_COPY_ALL\">CL_COPY_ALL</a>) && <a class=\"id\" href=\"#IS_MNT_UNBINDABLE\">IS_MNT_UNBINDABLE</a>(<a class=\"id\" href=\"#s\">s</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#skip_mnt_tree\">skip_mnt_tree</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_mountpoint\">mnt_mountpoint</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#clone_mnt\">clone_mnt</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>, <a class=\"id\" href=\"#flag\">flag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Enomem\">Enomem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#br_write_lock\">br_write_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#mnt_list\">mnt_list</a>, &amp;<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#mnt_list\">mnt_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attach_mnt\">attach_mnt</a>(<a class=\"id\" href=\"#q\">q</a>, &amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#br_write_unlock\">br_write_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"<a class=\"id\" href=\"#Enomem\">Enomem</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#umount_list\">umount_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#br_write_lock\">br_write_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#umount_tree\">umount_tree</a>(<a class=\"id\" href=\"#res\">res</a>, 0, &amp;<a class=\"id\" href=\"#umount_list\">umount_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#br_write_unlock\">br_write_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_mounts\">release_mounts</a>(&amp;<a class=\"id\" href=\"#umount_list\">umount_list</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#collect_mounts\">collect_mounts</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#tree\">tree</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tree\">tree</a> = <a class=\"id\" href=\"#copy_tree\">copy_tree</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#CL_COPY_ALL\">CL_COPY_ALL</a> | <a class=\"id\" href=\"#CL_PRIVATE\">CL_PRIVATE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tree\">tree</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#drop_collected_mounts\">drop_collected_mounts</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#umount_list\">umount_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_lock\">br_write_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#umount_tree\">umount_tree</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, 0, &amp;<a class=\"id\" href=\"#umount_list\">umount_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_unlock\">br_write_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_mounts\">release_mounts</a>(&amp;<a class=\"id\" href=\"#umount_list\">umount_list</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#iterate_mounts\">iterate_mounts</a>(int (*<a class=\"id\" href=\"#f\">f</a>)(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *, void *), void *<a class=\"id\" href=\"#arg\">arg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#f\">f</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, &amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#mnt_list\">mnt_list</a>, <a class=\"id\" href=\"#mnt_list\">mnt_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#f\">f</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cleanup_group_ids\">cleanup_group_ids</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#mnt\">mnt</a>; <a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#next_mnt\">next_mnt</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#mnt\">mnt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_group_id\">mnt_group_id</a> && !<a class=\"id\" href=\"#IS_MNT_SHARED\">IS_MNT_SHARED</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt_release_group_id\">mnt_release_group_id</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#invent_group_ids\">invent_group_ids</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#recurse\">recurse</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#mnt\">mnt</a>; <a class=\"id\" href=\"#p\">p</a>; <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#recurse\">recurse</a> ? <a class=\"id\" href=\"#next_mnt\">next_mnt</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#mnt\">mnt</a>) : <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_group_id\">mnt_group_id</a> && !<a class=\"id\" href=\"#IS_MNT_SHARED\">IS_MNT_SHARED</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#mnt_alloc_group_id\">mnt_alloc_group_id</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cleanup_group_ids\">cleanup_group_ids</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  @source_mnt : mount tree to be attached</span>", 
"<span class=\"comment\"> *  @nd         : place the mount tree @source_mnt is attached</span>", 
"<span class=\"comment\"> *  @parent_nd  : if non-null, detach the source_mnt from its parent and</span>", 
"<span class=\"comment\"> *  <span class=\"ts\"/><span class=\"ts\"/>   store the parent mount and mountpoint dentry.</span>", 
"<span class=\"comment\"> *  <span class=\"ts\"/><span class=\"ts\"/>   (done when source_mnt is moved)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  NOTE: in the table below explains the semantics when a source mount</span>", 
"<span class=\"comment\"> *  of a given type is attached to a destination mount of a given type.</span>", 
"<span class=\"comment\"> * ---------------------------------------------------------------------------</span>", 
"<span class=\"comment\"> * |         BIND MOUNT OPERATION                                            |</span>", 
"<span class=\"comment\"> * |**************************************************************************</span>", 
"<span class=\"comment\"> * | source--&gt;| shared        |       private  |       slave    | unbindable |</span>", 
"<span class=\"comment\"> * | dest     |               |                |                |            |</span>", 
"<span class=\"comment\"> * |   |      |               |                |                |            |</span>", 
"<span class=\"comment\"> * |   v      |               |                |                |            |</span>", 
"<span class=\"comment\"> * |**************************************************************************</span>", 
"<span class=\"comment\"> * |  shared  | shared (++)   |     shared (+) |     shared(+++)|  invalid   |</span>", 
"<span class=\"comment\"> * |          |               |                |                |            |</span>", 
"<span class=\"comment\"> * |non-shared| shared (+)    |      private   |      slave (*) |  invalid   |</span>", 
"<span class=\"comment\"> * ***************************************************************************</span>", 
"<span class=\"comment\"> * A bind operation clones the source mount and mounts the clone on the</span>", 
"<span class=\"comment\"> * destination mount.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (++)  the cloned mount is propagated to all the mounts in the propagation</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/> tree of the destination mount and the cloned mount is added to</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/> the peer group of the source mount.</span>", 
"<span class=\"comment\"> * (+)   the cloned mount is created under the destination mount and is marked</span>", 
"<span class=\"comment\"> *       as shared. The cloned mount is added to the peer group of the source</span>", 
"<span class=\"comment\"> *       mount.</span>", 
"<span class=\"comment\"> * (+++) the mount is propagated to all the mounts in the propagation tree</span>", 
"<span class=\"comment\"> *       of the destination mount and the cloned mount is made slave</span>", 
"<span class=\"comment\"> *       of the same master as that of the source mount. The cloned mount</span>", 
"<span class=\"comment\"> *       is marked as 'shared and slave'.</span>", 
"<span class=\"comment\"> * (*)   the cloned mount is made a slave of the same master as that of the</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/> source mount.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ---------------------------------------------------------------------------</span>", 
"<span class=\"comment\"> * |         <span class=\"ts\"/><span class=\"ts\"/>MOVE MOUNT OPERATION                                 |</span>", 
"<span class=\"comment\"> * |**************************************************************************</span>", 
"<span class=\"comment\"> * | source--&gt;| shared        |       private  |       slave    | unbindable |</span>", 
"<span class=\"comment\"> * | dest     |               |                |                |            |</span>", 
"<span class=\"comment\"> * |   |      |               |                |                |            |</span>", 
"<span class=\"comment\"> * |   v      |               |                |                |            |</span>", 
"<span class=\"comment\"> * |**************************************************************************</span>", 
"<span class=\"comment\"> * |  shared  | shared (+)    |     shared (+) |    shared(+++) |  invalid   |</span>", 
"<span class=\"comment\"> * |          |               |                |                |            |</span>", 
"<span class=\"comment\"> * |non-shared| shared (+*)   |      private   |    slave (*)   | unbindable |</span>", 
"<span class=\"comment\"> * ***************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (+)  the mount is moved to the destination. And is then propagated to</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>all the mounts in the propagation tree of the destination mount.</span>", 
"<span class=\"comment\"> * (+*)  the mount is moved to the destination.</span>", 
"<span class=\"comment\"> * (+++)  the mount is moved to the destination and is then propagated to</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>all the mounts belonging to the destination mount's propagation tree.</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>the mount is marked as 'shared and slave'.</span>", 
"<span class=\"comment\"> * (*)<span class=\"ts\"/>the mount continues to be a slave at the new location.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * if the source mount is a tree, the operations explained above is</span>", 
"<span class=\"comment\"> * applied to each mount in the tree.</span>", 
"<span class=\"comment\"> * Must be called without spinlocks held, since this function can sleep</span>", 
"<span class=\"comment\"> * in allocations.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#attach_recursive_mnt\">attach_recursive_mnt</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#source_mnt\">source_mnt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#parent_path\">parent_path</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#tree_list\">tree_list</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#dest_mnt\">dest_mnt</a> = <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dest_dentry\">dest_dentry</a> = <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#child\">child</a>, *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_MNT_SHARED\">IS_MNT_SHARED</a>(<a class=\"id\" href=\"#dest_mnt\">dest_mnt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#invent_group_ids\">invent_group_ids</a>(<a class=\"id\" href=\"#source_mnt\">source_mnt</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#propagate_mnt\">propagate_mnt</a>(<a class=\"id\" href=\"#dest_mnt\">dest_mnt</a>, <a class=\"id\" href=\"#dest_dentry\">dest_dentry</a>, <a class=\"id\" href=\"#source_mnt\">source_mnt</a>, &amp;<a class=\"id\" href=\"#tree_list\">tree_list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_cleanup_ids\">out_cleanup_ids</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_lock\">br_write_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_MNT_SHARED\">IS_MNT_SHARED</a>(<a class=\"id\" href=\"#dest_mnt\">dest_mnt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#source_mnt\">source_mnt</a>; <a class=\"id\" href=\"#p\">p</a>; <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#next_mnt\">next_mnt</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#source_mnt\">source_mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_mnt_shared\">set_mnt_shared</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent_path\">parent_path</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#detach_mnt\">detach_mnt</a>(<a class=\"id\" href=\"#source_mnt\">source_mnt</a>, <a class=\"id\" href=\"#parent_path\">parent_path</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attach_mnt\">attach_mnt</a>(<a class=\"id\" href=\"#source_mnt\">source_mnt</a>, <a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_mnt_namespace\">touch_mnt_namespace</a>(<a class=\"id\" href=\"#parent_path\">parent_path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_ns\">mnt_ns</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt_set_mountpoint\">mnt_set_mountpoint</a>(<a class=\"id\" href=\"#dest_mnt\">dest_mnt</a>, <a class=\"id\" href=\"#dest_dentry\">dest_dentry</a>, <a class=\"id\" href=\"#source_mnt\">source_mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#commit_tree\">commit_tree</a>(<a class=\"id\" href=\"#source_mnt\">source_mnt</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#tree_list\">tree_list</a>, <a class=\"id\" href=\"#mnt_hash\">mnt_hash</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#mnt_hash\">mnt_hash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#commit_tree\">commit_tree</a>(<a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_unlock\">br_write_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#out_cleanup_ids\">out_cleanup_ids</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_MNT_SHARED\">IS_MNT_SHARED</a>(<a class=\"id\" href=\"#dest_mnt\">dest_mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cleanup_group_ids\">cleanup_group_ids</a>(<a class=\"id\" href=\"#source_mnt\">source_mnt</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#graft_tree\">graft_tree</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#MS_NOUSER\">MS_NOUSER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) !=", 
"<span class=\"ts\"/>      <a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOTDIR\">ENOTDIR</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cant_mount\">cant_mount</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#d_unlinked\">d_unlinked</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#attach_recursive_mnt\">attach_recursive_mnt</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Sanity check the flags to change_mnt_propagation.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#flags_to_propagation_type\">flags_to_propagation_type</a>(int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#flags\">flags</a> &amp; ~<a class=\"id\" href=\"#MS_REC\">MS_REC</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Fail if any non-propagation flags are set */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> &amp; ~(<a class=\"id\" href=\"#MS_SHARED\">MS_SHARED</a> | <a class=\"id\" href=\"#MS_PRIVATE\">MS_PRIVATE</a> | <a class=\"id\" href=\"#MS_SLAVE\">MS_SLAVE</a> | <a class=\"id\" href=\"#MS_UNBINDABLE\">MS_UNBINDABLE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* Only one propagation flag should be set */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_power_of_2\">is_power_of_2</a>(<a class=\"id\" href=\"#type\">type</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#type\">type</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * recursively change the type of the mountpoint.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#do_change_type\">do_change_type</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#m\">m</a>, *<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#recurse\">recurse</a> = <a class=\"id\" href=\"#flag\">flag</a> &amp; <a class=\"id\" href=\"#MS_REC\">MS_REC</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a> != <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#flags_to_propagation_type\">flags_to_propagation_type</a>(<a class=\"id\" href=\"#flag\">flag</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#MS_SHARED\">MS_SHARED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#invent_group_ids\">invent_group_ids</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#recurse\">recurse</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_lock\">br_write_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#mnt\">mnt</a>; <a class=\"id\" href=\"#m\">m</a>; <a class=\"id\" href=\"#m\">m</a> = (<a class=\"id\" href=\"#recurse\">recurse</a> ? <a class=\"id\" href=\"#next_mnt\">next_mnt</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#mnt\">mnt</a>) : <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#change_mnt_propagation\">change_mnt_propagation</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_unlock\">br_write_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"", 
" <a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * do loopback mount.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#do_loopback\">do_loopback</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, char *<a class=\"id\" href=\"#old_name\">old_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#recurse\">recurse</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#old_path\">old_path</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#mount_is_safe\">mount_is_safe</a>(<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#old_name\">old_name</a> || !*<a class=\"id\" href=\"#old_name\">old_name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#kern_path\">kern_path</a>(<a class=\"id\" href=\"#old_name\">old_name</a>, <a class=\"id\" href=\"#LOOKUP_FOLLOW\">LOOKUP_FOLLOW</a>, &amp;<a class=\"id\" href=\"#old_path\">old_path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_MNT_UNBINDABLE\">IS_MNT_UNBINDABLE</a>(<a class=\"id\" href=\"#old_path\">old_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_mnt\">check_mnt</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>) || !<a class=\"id\" href=\"#check_mnt\">check_mnt</a>(<a class=\"id\" href=\"#old_path\">old_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#recurse\">recurse</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#copy_tree\">copy_tree</a>(<a class=\"id\" href=\"#old_path\">old_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#old_path\">old_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>, 0);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#clone_mnt\">clone_mnt</a>(<a class=\"id\" href=\"#old_path\">old_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#old_path\">old_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>, 0);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#graft_tree\">graft_tree</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#umount_list\">umount_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#br_write_lock\">br_write_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#umount_tree\">umount_tree</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, 0, &amp;<a class=\"id\" href=\"#umount_list\">umount_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#br_write_unlock\">br_write_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_mounts\">release_mounts</a>(&amp;<a class=\"id\" href=\"#umount_list\">umount_list</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#old_path\">old_path</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#change_mount_flags\">change_mount_flags</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, int <a class=\"id\" href=\"#ms_flags\">ms_flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#readonly_request\">readonly_request</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ms_flags\">ms_flags</a> &amp; <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#readonly_request\">readonly_request</a> = 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#readonly_request\">readonly_request</a> == <a class=\"id\" href=\"#__mnt_is_readonly\">__mnt_is_readonly</a>(<a class=\"id\" href=\"#mnt\">mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#readonly_request\">readonly_request</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#mnt_make_readonly\">mnt_make_readonly</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mnt_unmake_readonly\">__mnt_unmake_readonly</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * change filesystem flags. dir should be a physical root of filesystem.</span>", 
"<span class=\"comment\"> * If you've mounted a non-root directory somewhere and want to do remount</span>", 
"<span class=\"comment\"> * on it - tough luck.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#do_remount\">do_remount</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, int <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#mnt_flags\">mnt_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_mnt\">check_mnt</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a> != <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_BIND\">MS_BIND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#change_mount_flags\">change_mount_flags</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#do_remount_sb\">do_remount_sb</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#data\">data</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#br_write_lock\">br_write_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> |= <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &amp; <a class=\"id\" href=\"#MNT_PROPAGATION_MASK\">MNT_PROPAGATION_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> = <a class=\"id\" href=\"#mnt_flags\">mnt_flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#br_write_unlock\">br_write_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#br_write_lock\">br_write_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_mnt_namespace\">touch_mnt_namespace</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_ns\">mnt_ns</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#br_write_unlock\">br_write_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#tree_contains_unbindable\">tree_contains_unbindable</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#mnt\">mnt</a>; <a class=\"id\" href=\"#p\">p</a>; <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#next_mnt\">next_mnt</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#mnt\">mnt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_MNT_UNBINDABLE\">IS_MNT_UNBINDABLE</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#do_move_mount\">do_move_mount</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, char *<a class=\"id\" href=\"#old_name\">old_name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#old_path\">old_path</a>, <a class=\"id\" href=\"#parent_path\">parent_path</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#old_name\">old_name</a> || !*<a class=\"id\" href=\"#old_name\">old_name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#kern_path\">kern_path</a>(<a class=\"id\" href=\"#old_name\">old_name</a>, <a class=\"id\" href=\"#LOOKUP_FOLLOW\">LOOKUP_FOLLOW</a>, &amp;<a class=\"id\" href=\"#old_path\">old_path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#d_mountpoint\">d_mountpoint</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>) &&", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#follow_down\">follow_down</a>(<a class=\"id\" href=\"#path\">path</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_mnt\">check_mnt</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>) || !<a class=\"id\" href=\"#check_mnt\">check_mnt</a>(<a class=\"id\" href=\"#old_path\">old_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cant_mount\">cant_mount</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out1\">out1</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d_unlinked\">d_unlinked</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out1\">out1</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_path\">old_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> != <a class=\"id\" href=\"#old_path\">old_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out1\">out1</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_path\">old_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a> == <a class=\"id\" href=\"#old_path\">old_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out1\">out1</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) !=", 
"<span class=\"ts\"/>      <a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#old_path\">old_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out1\">out1</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't move a mount residing in a shared parent.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_path\">old_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#IS_MNT_SHARED\">IS_MNT_SHARED</a>(<a class=\"id\" href=\"#old_path\">old_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out1\">out1</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't move a mount tree containing unbindable mounts to a destination</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mount which is shared.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_MNT_SHARED\">IS_MNT_SHARED</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#tree_contains_unbindable\">tree_contains_unbindable</a>(<a class=\"id\" href=\"#old_path\">old_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out1\">out1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ELOOP\">ELOOP</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>; <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a> != <a class=\"id\" href=\"#p\">p</a>; <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#old_path\">old_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out1\">out1</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#attach_recursive_mnt\">attach_recursive_mnt</a>(<a class=\"id\" href=\"#old_path\">old_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#path\">path</a>, &amp;<a class=\"id\" href=\"#parent_path\">parent_path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out1\">out1</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if the mount is moved, it should no longer be expire</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * automatically */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#old_path\">old_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_expire\">mnt_expire</a>);", 
"<a class=\"id\" href=\"#out1\">out1</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#parent_path\">parent_path</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#old_path\">old_path</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * create a new mount for userspace and request it to be added into the</span>", 
"<span class=\"comment\"> * namespace's tree</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#do_new_mount\">do_new_mount</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, char *<a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#mnt_flags\">mnt_flags</a>, char *<a class=\"id\" href=\"#name\">name</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we need capabilities... */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#do_kern_mount\">do_kern_mount</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#mnt\">mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_add_mount\">do_add_mount</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#mnt_flags\">mnt_flags</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * add a mount into a namespace's mount tree</span>", 
"<span class=\"comment\"> * - provide the option of adding the new mount to an expiration list</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#do_add_mount\">do_add_mount</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#newmnt\">newmnt</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#mnt_flags\">mnt_flags</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#fslist\">fslist</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &= ~(<a class=\"id\" href=\"#MNT_SHARED\">MNT_SHARED</a> | <a class=\"id\" href=\"#MNT_WRITE_HOLD\">MNT_WRITE_HOLD</a> | <a class=\"id\" href=\"#MNT_INTERNAL\">MNT_INTERNAL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Something was mounted here while we slept */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#d_mountpoint\">d_mountpoint</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>) &&", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#follow_down\">follow_down</a>(<a class=\"id\" href=\"#path\">path</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &amp; <a class=\"id\" href=\"#MNT_SHRINKABLE\">MNT_SHRINKABLE</a>) && !<a class=\"id\" href=\"#check_mnt\">check_mnt</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Refuse the same filesystem on the same mount point */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a> == <a class=\"id\" href=\"#newmnt\">newmnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a> == <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISLNK\">S_ISLNK</a>(<a class=\"id\" href=\"#newmnt\">newmnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newmnt\">newmnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> = <a class=\"id\" href=\"#mnt_flags\">mnt_flags</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#graft_tree\">graft_tree</a>(<a class=\"id\" href=\"#newmnt\">newmnt</a>, <a class=\"id\" href=\"#path\">path</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fslist\">fslist</a>) <span class=\"comment\">/* add to the specified expiration list */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#newmnt\">newmnt</a>-><a class=\"id\" href=\"#mnt_expire\">mnt_expire</a>, <a class=\"id\" href=\"#fslist\">fslist</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mntput\">mntput</a>(<a class=\"id\" href=\"#newmnt\">newmnt</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#do_add_mount\">do_add_mount</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * process a list of expirable mountpoints with the intent of discarding any</span>", 
"<span class=\"comment\"> * mountpoints that aren't in use and haven't been touched since last we came</span>", 
"<span class=\"comment\"> * here</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mark_mounts_for_expiry\">mark_mounts_for_expiry</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#mounts\">mounts</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#graveyard\">graveyard</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#umounts\">umounts</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#mounts\">mounts</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_lock\">br_write_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* extract from the expiration list every vfsmount that matches the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * following criteria:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - only referenced by its parent vfsmount</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - still marked for expiry (marked on the last call here; marks are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   cleared by mntput())</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#mounts\">mounts</a>, <a class=\"id\" href=\"#mnt_expire\">mnt_expire</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#xchg\">xchg</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_expiry_mark\">mnt_expiry_mark</a>, 1) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#propagate_mount_busy\">propagate_mount_busy</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_expire\">mnt_expire</a>, &amp;<a class=\"id\" href=\"#graveyard\">graveyard</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#graveyard\">graveyard</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#graveyard\">graveyard</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a>, <a class=\"id\" href=\"#mnt_expire\">mnt_expire</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_mnt_namespace\">touch_mnt_namespace</a>(<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_ns\">mnt_ns</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#umount_tree\">umount_tree</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, 1, &amp;<a class=\"id\" href=\"#umounts\">umounts</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_unlock\">br_write_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_mounts\">release_mounts</a>(&amp;<a class=\"id\" href=\"#umounts\">umounts</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#mark_mounts_for_expiry\">mark_mounts_for_expiry</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Ripoff of 'select_parent()'</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * search the list of submounts for a given mountpoint, and move any</span>", 
"<span class=\"comment\"> * shrinkable submounts to the 'graveyard' list.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#select_submounts\">select_submounts</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#graveyard\">graveyard</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#this_parent\">this_parent</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#found\">found</a> = 0;", 
"", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#this_parent\">this_parent</a>-><a class=\"id\" href=\"#mnt_mounts\">mnt_mounts</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<a class=\"id\" href=\"#resume\">resume</a>:", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#next\">next</a> != &amp;<a class=\"id\" href=\"#this_parent\">this_parent</a>-><a class=\"id\" href=\"#mnt_mounts\">mnt_mounts</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a>, <a class=\"id\" href=\"#mnt_child\">mnt_child</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &amp; <a class=\"id\" href=\"#MNT_SHRINKABLE\">MNT_SHRINKABLE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Descend a level if the d_mounts list is non-empty.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_mounts\">mnt_mounts</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_parent\">this_parent</a> = <a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#propagate_mount_busy\">propagate_mount_busy</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_expire\">mnt_expire</a>, <a class=\"id\" href=\"#graveyard\">graveyard</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * All done at this level ... ascend and resume the search</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#this_parent\">this_parent</a> != <a class=\"id\" href=\"#parent\">parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#this_parent\">this_parent</a>-><a class=\"id\" href=\"#mnt_child\">mnt_child</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_parent\">this_parent</a> = <a class=\"id\" href=\"#this_parent\">this_parent</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#resume\">resume</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#found\">found</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * process a list of expirable mountpoints with the intent of discarding any</span>", 
"<span class=\"comment\"> * submounts of a specific parent mountpoint</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * vfsmount_lock must be held for write</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#shrink_submounts\">shrink_submounts</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#umounts\">umounts</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#graveyard\">graveyard</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#m\">m</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* extract submounts of 'mountpoint' from the expiration list */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#select_submounts\">select_submounts</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, &amp;<a class=\"id\" href=\"#graveyard\">graveyard</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#graveyard\">graveyard</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#graveyard\">graveyard</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt_expire\">mnt_expire</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_mnt_namespace\">touch_mnt_namespace</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#mnt_ns\">mnt_ns</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#umount_tree\">umount_tree</a>(<a class=\"id\" href=\"#m\">m</a>, 1, <a class=\"id\" href=\"#umounts\">umounts</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some copy_from_user() implementations do not return the exact number of</span>", 
"<span class=\"comment\"> * bytes remaining to copy on a fault.  But copy_mount_options() requires that.</span>", 
"<span class=\"comment\"> * Note that this function differs from copy_from_user() in that it will oops</span>", 
"<span class=\"comment\"> * on bad values of `to', rather than returning a short copy.</span>", 
"<span class=\"comment\"> */</span>", 
"static long <a class=\"id\" href=\"#exact_copy_from_user\">exact_copy_from_user</a>(void *<a class=\"id\" href=\"#to\">to</a>, const void <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/>const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_READ\">VERIFY_READ</a>, <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#n\">n</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__get_user\">__get_user</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#f\">f</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#t\">t</a>, 0, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#t\">t</a>++ = <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#copy_mount_options\">copy_mount_options</a>(const void <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#data\">data</a>, unsigned long *<a class=\"id\" href=\"#where\">where</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#where\">where</a> = 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We only care that *some* data at the address the user</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * gave us is valid.  Just in case, we'll zero</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the remainder of the page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* copy_from_user cannot cross TASK_SIZE ! */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a> - (unsigned long)<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#exact_copy_from_user\">exact_copy_from_user</a>((void *)<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> != <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>((char *)<a class=\"id\" href=\"#page\">page</a> + <a class=\"id\" href=\"#i\">i</a>, 0, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#where\">where</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#copy_mount_string\">copy_mount_string</a>(const void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#data\">data</a>, char **<a class=\"id\" href=\"#where\">where</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#where\">where</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#strndup_user\">strndup_user</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#tmp\">tmp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#where\">where</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Flags is a 32-bit value that allows up to 31 non-fs dependent flags to</span>", 
"<span class=\"comment\"> * be given to the mount() call (ie: read-only, no-dev, no-suid etc).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * data is a (void *) that can point to any structure up to</span>", 
"<span class=\"comment\"> * PAGE_SIZE-1 bytes, which can contain arbitrary fs-dependent</span>", 
"<span class=\"comment\"> * information (or be NULL).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Pre-0.97 versions of mount() didn't have a flags word.</span>", 
"<span class=\"comment\"> * When the flags word was introduced its top half was required</span>", 
"<span class=\"comment\"> * to have the magic value 0xC0ED, and this remained so until 2.4.0-test9.</span>", 
"<span class=\"comment\"> * Therefore, if this magic number is present, it carries no information</span>", 
"<span class=\"comment\"> * and must be discarded.</span>", 
"<span class=\"comment\"> */</span>", 
"long <a class=\"id\" href=\"#do_mount\">do_mount</a>(char *<a class=\"id\" href=\"#dev_name\">dev_name</a>, char *<a class=\"id\" href=\"#dir_name\">dir_name</a>, char *<a class=\"id\" href=\"#type_page\">type_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#data_page\">data_page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Discard magic */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_MGC_MSK\">MS_MGC_MSK</a>) == <a class=\"id\" href=\"#MS_MGC_VAL\">MS_MGC_VAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#MS_MGC_MSK\">MS_MGC_MSK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Basic sanity checks */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dir_name\">dir_name</a> || !*<a class=\"id\" href=\"#dir_name\">dir_name</a> || !<a class=\"id\" href=\"#memchr\">memchr</a>(<a class=\"id\" href=\"#dir_name\">dir_name</a>, 0, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data_page\">data_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>((char *)<a class=\"id\" href=\"#data_page\">data_page</a>)[<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1] = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ... and get the mountpoint */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#kern_path\">kern_path</a>(<a class=\"id\" href=\"#dir_name\">dir_name</a>, <a class=\"id\" href=\"#LOOKUP_FOLLOW\">LOOKUP_FOLLOW</a>, &amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#security_sb_mount\">security_sb_mount</a>(<a class=\"id\" href=\"#dev_name\">dev_name</a>, &amp;<a class=\"id\" href=\"#path\">path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#type_page\">type_page</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#data_page\">data_page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#dput_out\">dput_out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Default to relatime unless overriden */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_NOATIME\">MS_NOATIME</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> |= <a class=\"id\" href=\"#MNT_RELATIME\">MNT_RELATIME</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Separate the per-mountpoint flags */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_NOSUID\">MS_NOSUID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> |= <a class=\"id\" href=\"#MNT_NOSUID\">MNT_NOSUID</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_NODEV\">MS_NODEV</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> |= <a class=\"id\" href=\"#MNT_NODEV\">MNT_NODEV</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_NOEXEC\">MS_NOEXEC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> |= <a class=\"id\" href=\"#MNT_NOEXEC\">MNT_NOEXEC</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_NOATIME\">MS_NOATIME</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> |= <a class=\"id\" href=\"#MNT_NOATIME\">MNT_NOATIME</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_NODIRATIME\">MS_NODIRATIME</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> |= <a class=\"id\" href=\"#MNT_NODIRATIME\">MNT_NODIRATIME</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_STRICTATIME\">MS_STRICTATIME</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &= ~(<a class=\"id\" href=\"#MNT_RELATIME\">MNT_RELATIME</a> | <a class=\"id\" href=\"#MNT_NOATIME\">MNT_NOATIME</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> |= <a class=\"id\" href=\"#MNT_READONLY\">MNT_READONLY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> &= ~(<a class=\"id\" href=\"#MS_NOSUID\">MS_NOSUID</a> | <a class=\"id\" href=\"#MS_NOEXEC\">MS_NOEXEC</a> | <a class=\"id\" href=\"#MS_NODEV\">MS_NODEV</a> | <a class=\"id\" href=\"#MS_ACTIVE\">MS_ACTIVE</a> | <a class=\"id\" href=\"#MS_BORN\">MS_BORN</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#MS_NOATIME\">MS_NOATIME</a> | <a class=\"id\" href=\"#MS_NODIRATIME\">MS_NODIRATIME</a> | <a class=\"id\" href=\"#MS_RELATIME\">MS_RELATIME</a>| <a class=\"id\" href=\"#MS_KERNMOUNT\">MS_KERNMOUNT</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#MS_STRICTATIME\">MS_STRICTATIME</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_REMOUNT\">MS_REMOUNT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#do_remount\">do_remount</a>(&amp;<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#flags\">flags</a> &amp; ~<a class=\"id\" href=\"#MS_REMOUNT\">MS_REMOUNT</a>, <a class=\"id\" href=\"#mnt_flags\">mnt_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#data_page\">data_page</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_BIND\">MS_BIND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#do_loopback\">do_loopback</a>(&amp;<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#dev_name\">dev_name</a>, <a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_REC\">MS_REC</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#MS_SHARED\">MS_SHARED</a> | <a class=\"id\" href=\"#MS_PRIVATE\">MS_PRIVATE</a> | <a class=\"id\" href=\"#MS_SLAVE\">MS_SLAVE</a> | <a class=\"id\" href=\"#MS_UNBINDABLE\">MS_UNBINDABLE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#do_change_type\">do_change_type</a>(&amp;<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_MOVE\">MS_MOVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#do_move_mount\">do_move_mount</a>(&amp;<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#dev_name\">dev_name</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#do_new_mount\">do_new_mount</a>(&amp;<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#type_page\">type_page</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#mnt_flags\">mnt_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#dev_name\">dev_name</a>, <a class=\"id\" href=\"#data_page\">data_page</a>);", 
"<a class=\"id\" href=\"#dput_out\">dput_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#mnt_namespace\">mnt_namespace</a> *<a class=\"id\" href=\"#alloc_mnt_ns\">alloc_mnt_ns</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mnt_namespace\">mnt_namespace</a> *<a class=\"id\" href=\"#new_ns\">new_ns</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_ns\">new_ns</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#mnt_namespace\">mnt_namespace</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_ns\">new_ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#new_ns\">new_ns</a>-><a class=\"id\" href=\"#count\">count</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_ns\">new_ns</a>-><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#new_ns\">new_ns</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#new_ns\">new_ns</a>-><a class=\"id\" href=\"#poll\">poll</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_ns\">new_ns</a>-><a class=\"id\" href=\"#event\">event</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new_ns\">new_ns</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate a new namespace structure and populate it with contents</span>", 
"<span class=\"comment\"> * copied from the namespace of the passed in task structure.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#mnt_namespace\">mnt_namespace</a> *<a class=\"id\" href=\"#dup_mnt_ns\">dup_mnt_ns</a>(struct <a class=\"id\" href=\"#mnt_namespace\">mnt_namespace</a> *<a class=\"id\" href=\"#mnt_ns\">mnt_ns</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fs_struct\">fs_struct</a> *<a class=\"id\" href=\"#fs\">fs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mnt_namespace\">mnt_namespace</a> *<a class=\"id\" href=\"#new_ns\">new_ns</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#rootmnt\">rootmnt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#pwdmnt\">pwdmnt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_ns\">new_ns</a> = <a class=\"id\" href=\"#alloc_mnt_ns\">alloc_mnt_ns</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#new_ns\">new_ns</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#new_ns\">new_ns</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* First pass: copy the tree topology */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_ns\">new_ns</a>-><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#copy_tree\">copy_tree</a>(<a class=\"id\" href=\"#mnt_ns\">mnt_ns</a>-><a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#mnt_ns\">mnt_ns</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#CL_COPY_ALL\">CL_COPY_ALL</a> | <a class=\"id\" href=\"#CL_EXPIRE\">CL_EXPIRE</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_ns\">new_ns</a>-><a class=\"id\" href=\"#root\">root</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#new_ns\">new_ns</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_lock\">br_write_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#new_ns\">new_ns</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#new_ns\">new_ns</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#mnt_list\">mnt_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_write_unlock\">br_write_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Second pass: switch the tsk-&gt;fs-&gt;* elements and mark new vfsmounts</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * as belonging to new namespace.  We have already acquired a private</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fs_struct, so tsk-&gt;fs-&gt;lock is not needed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#mnt_ns\">mnt_ns</a>-><a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#new_ns\">new_ns</a>-><a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#mnt_ns\">mnt_ns</a> = <a class=\"id\" href=\"#new_ns\">new_ns</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fs\">fs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#root\">root</a>.<a class=\"id\" href=\"#mnt\">mnt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rootmnt\">rootmnt</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#root\">root</a>.<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#mntget\">mntget</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#pwd\">pwd</a>.<a class=\"id\" href=\"#mnt\">mnt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pwdmnt\">pwdmnt</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#pwd\">pwd</a>.<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#mntget\">mntget</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#next_mnt\">next_mnt</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#mnt_ns\">mnt_ns</a>-><a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#next_mnt\">next_mnt</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#new_ns\">new_ns</a>-><a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#namespace_sem\">namespace_sem</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rootmnt\">rootmnt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mntput\">mntput</a>(<a class=\"id\" href=\"#rootmnt\">rootmnt</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pwdmnt\">pwdmnt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mntput\">mntput</a>(<a class=\"id\" href=\"#pwdmnt\">pwdmnt</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new_ns\">new_ns</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#mnt_namespace\">mnt_namespace</a> *<a class=\"id\" href=\"#copy_mnt_ns\">copy_mnt_ns</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>, struct <a class=\"id\" href=\"#mnt_namespace\">mnt_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fs_struct\">fs_struct</a> *<a class=\"id\" href=\"#new_fs\">new_fs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mnt_namespace\">mnt_namespace</a> *<a class=\"id\" href=\"#new_ns\">new_ns</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_mnt_ns\">get_mnt_ns</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CLONE_NEWNS\">CLONE_NEWNS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ns\">ns</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_ns\">new_ns</a> = <a class=\"id\" href=\"#dup_mnt_ns\">dup_mnt_ns</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#new_fs\">new_fs</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_mnt_ns\">put_mnt_ns</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new_ns\">new_ns</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * create_mnt_ns - creates a private namespace and adds a root filesystem</span>", 
"<span class=\"comment\"> * @mnt: pointer to the new root filesystem mountpoint</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mnt_namespace\">mnt_namespace</a> *<a class=\"id\" href=\"#create_mnt_ns\">create_mnt_ns</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mnt_namespace\">mnt_namespace</a> *<a class=\"id\" href=\"#new_ns\">new_ns</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_ns\">new_ns</a> = <a class=\"id\" href=\"#alloc_mnt_ns\">alloc_mnt_ns</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#new_ns\">new_ns</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_ns\">mnt_ns</a> = <a class=\"id\" href=\"#new_ns\">new_ns</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_ns\">new_ns</a>-><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#new_ns\">new_ns</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#new_ns\">new_ns</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#mnt_list\">mnt_list</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new_ns\">new_ns</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#create_mnt_ns\">create_mnt_ns</a>);", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE5\">SYSCALL_DEFINE5</a>(<a class=\"id\" href=\"#mount\">mount</a>, char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#dev_name\">dev_name</a>, char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#dir_name\">dir_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#type\">type</a>, unsigned long, <a class=\"id\" href=\"#flags\">flags</a>, void <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#kernel_type\">kernel_type</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#kernel_dir\">kernel_dir</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#kernel_dev\">kernel_dev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#data_page\">data_page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#copy_mount_string\">copy_mount_string</a>(<a class=\"id\" href=\"#type\">type</a>, &amp;<a class=\"id\" href=\"#kernel_type\">kernel_type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_type\">out_type</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kernel_dir\">kernel_dir</a> = <a class=\"id\" href=\"#getname\">getname</a>(<a class=\"id\" href=\"#dir_name\">dir_name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#kernel_dir\">kernel_dir</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#kernel_dir\">kernel_dir</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_dir\">out_dir</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#copy_mount_string\">copy_mount_string</a>(<a class=\"id\" href=\"#dev_name\">dev_name</a>, &amp;<a class=\"id\" href=\"#kernel_dev\">kernel_dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_dev\">out_dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#copy_mount_options\">copy_mount_options</a>(<a class=\"id\" href=\"#data\">data</a>, &amp;<a class=\"id\" href=\"#data_page\">data_page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_data\">out_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_mount\">do_mount</a>(<a class=\"id\" href=\"#kernel_dev\">kernel_dev</a>, <a class=\"id\" href=\"#kernel_dir\">kernel_dir</a>, <a class=\"id\" href=\"#kernel_type\">kernel_type</a>, <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>(void *) <a class=\"id\" href=\"#data_page\">data_page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>(<a class=\"id\" href=\"#data_page\">data_page</a>);", 
"<a class=\"id\" href=\"#out_data\">out_data</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#kernel_dev\">kernel_dev</a>);", 
"<a class=\"id\" href=\"#out_dev\">out_dev</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#putname\">putname</a>(<a class=\"id\" href=\"#kernel_dir\">kernel_dir</a>);", 
"<a class=\"id\" href=\"#out_dir\">out_dir</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#kernel_type\">kernel_type</a>);", 
"<a class=\"id\" href=\"#out_type\">out_type</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * pivot_root Semantics:</span>", 
"<span class=\"comment\"> * Moves the root file system of the current process to the directory put_old,</span>", 
"<span class=\"comment\"> * makes new_root as the new root file system of the current process, and sets</span>", 
"<span class=\"comment\"> * root/cwd of all processes which had them on the current root to new_root.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Restrictions:</span>", 
"<span class=\"comment\"> * The new_root and put_old must be directories, and  must not be on the</span>", 
"<span class=\"comment\"> * same file  system as the current process root. The put_old  must  be</span>", 
"<span class=\"comment\"> * underneath new_root,  i.e. adding a non-zero number of /.. to the string</span>", 
"<span class=\"comment\"> * pointed to by put_old must yield the same directory as new_root. No other</span>", 
"<span class=\"comment\"> * file system may be mounted on put_old. After all, new_root is a mountpoint.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Also, the current root cannot be on the 'rootfs' (initial ramfs) filesystem.</span>", 
"<span class=\"comment\"> * See Documentation/filesystems/ramfs-rootfs-initramfs.txt for alternatives</span>", 
"<span class=\"comment\"> * in this situation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *  - we don't move root/cwd if they are not at the root (reason: if something</span>", 
"<span class=\"comment\"> *    cared enough to change them, it's probably wrong to force them elsewhere)</span>", 
"<span class=\"comment\"> *  - it's okay to pick a root that isn't the root of a file system, e.g.</span>", 
"<span class=\"comment\"> *    /nfs/my_root where /nfs is the mount point. It must be a mountpoint,</span>", 
"<span class=\"comment\"> *    though, so you may need to say mount --bind /nfs/my_root /nfs/my_root</span>", 
"<span class=\"comment\"> *    first.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#pivot_root\">pivot_root</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#new_root\">new_root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#put_old\">put_old</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#parent_path\">parent_path</a>, <a class=\"id\" href=\"#root_parent\">root_parent</a>, <a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#user_path_dir\">user_path_dir</a>(<a class=\"id\" href=\"#new_root\">new_root</a>, &amp;<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out0\">out0</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_mnt\">check_mnt</a>(<a class=\"id\" href=\"#new\">new</a>.<a class=\"id\" href=\"#mnt\">mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out1\">out1</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#user_path_dir\">user_path_dir</a>(<a class=\"id\" href=\"#put_old\">put_old</a>, &amp;<a class=\"id\" href=\"#old\">old</a>);", 
];
xr_frag_insert('l/3f/3c00d77f954b8910596c05c2ab2d3389210521.xr', __xr_tmp);
