var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> * grant_table.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Interface for granting foreign access to page frames, and receiving</span>", 
"<span class=\"comment\"> * page-ownership transfers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span>", 
"<span class=\"comment\"> * of this software and associated documentation files (the \"Software\"), to</span>", 
"<span class=\"comment\"> * deal in the Software without restriction, including without limitation the</span>", 
"<span class=\"comment\"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span>", 
"<span class=\"comment\"> * sell copies of the Software, and to permit persons to whom the Software is</span>", 
"<span class=\"comment\"> * furnished to do so, subject to the following conditions:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The above copyright notice and this permission notice shall be included in</span>", 
"<span class=\"comment\"> * all copies or substantial portions of the Software.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>", 
"<span class=\"comment\"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>", 
"<span class=\"comment\"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>", 
"<span class=\"comment\"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>", 
"<span class=\"comment\"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING</span>", 
"<span class=\"comment\"> * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER</span>", 
"<span class=\"comment\"> * DEALINGS IN THE SOFTWARE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2004, K A Fraser</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__XEN_PUBLIC_GRANT_TABLE_H__\">__XEN_PUBLIC_GRANT_TABLE_H__</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__XEN_PUBLIC_GRANT_TABLE_H__\">__XEN_PUBLIC_GRANT_TABLE_H__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#interface\">interface</a>/<a class=\"id\" href=\"#xen\">xen</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/***********************************</span>", 
"<span class=\"comment\"> * GRANT TABLE REPRESENTATION</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Some rough guidelines on accessing and updating grant-table entries</span>", 
"<span class=\"comment\"> * in a concurrency-safe manner. For more information, Linux contains a</span>", 
"<span class=\"comment\"> * reference implementation for guest OSes (arch/xen/kernel/grant_table.c).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NB. WMB is a no-op on current-generation x86 processors. However, a</span>", 
"<span class=\"comment\"> *     compiler barrier will still be required.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Introducing a valid entry into the grant table:</span>", 
"<span class=\"comment\"> *  1. Write ent-&gt;domid.</span>", 
"<span class=\"comment\"> *  2. Write ent-&gt;frame:</span>", 
"<span class=\"comment\"> *      GTF_permit_access:   Frame to which access is permitted.</span>", 
"<span class=\"comment\"> *      GTF_accept_transfer: Pseudo-phys frame slot being filled by new</span>", 
"<span class=\"comment\"> *                           frame, or zero if none.</span>", 
"<span class=\"comment\"> *  3. Write memory barrier (WMB).</span>", 
"<span class=\"comment\"> *  4. Write ent-&gt;flags, inc. valid type.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Invalidating an unused GTF_permit_access entry:</span>", 
"<span class=\"comment\"> *  1. flags = ent-&gt;flags.</span>", 
"<span class=\"comment\"> *  2. Observe that !(flags &amp; (GTF_reading|GTF_writing)).</span>", 
"<span class=\"comment\"> *  3. Check result of SMP-safe CMPXCHG(&amp;ent-&gt;flags, flags, 0).</span>", 
"<span class=\"comment\"> *  NB. No need for WMB as reuse of entry is control-dependent on success of</span>", 
"<span class=\"comment\"> *      step 3, and all architectures guarantee ordering of ctrl-dep writes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Invalidating an in-use GTF_permit_access entry:</span>", 
"<span class=\"comment\"> *  This cannot be done directly. Request assistance from the domain controller</span>", 
"<span class=\"comment\"> *  which can set a timeout on the use of a grant entry and take necessary</span>", 
"<span class=\"comment\"> *  action. (NB. This is not yet implemented!).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Invalidating an unused GTF_accept_transfer entry:</span>", 
"<span class=\"comment\"> *  1. flags = ent-&gt;flags.</span>", 
"<span class=\"comment\"> *  2. Observe that !(flags &amp; GTF_transfer_committed). [*]</span>", 
"<span class=\"comment\"> *  3. Check result of SMP-safe CMPXCHG(&amp;ent-&gt;flags, flags, 0).</span>", 
"<span class=\"comment\"> *  NB. No need for WMB as reuse of entry is control-dependent on success of</span>", 
"<span class=\"comment\"> *      step 3, and all architectures guarantee ordering of ctrl-dep writes.</span>", 
"<span class=\"comment\"> *  [*] If GTF_transfer_committed is set then the grant entry is 'committed'.</span>", 
"<span class=\"comment\"> *      The guest must /not/ modify the grant entry until the address of the</span>", 
"<span class=\"comment\"> *      transferred frame is written. It is safe for the guest to spin waiting</span>", 
"<span class=\"comment\"> *      for this to occur (detect by observing GTF_transfer_completed in</span>", 
"<span class=\"comment\"> *      ent-&gt;flags).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Invalidating a committed GTF_accept_transfer entry:</span>", 
"<span class=\"comment\"> *  1. Wait for (ent-&gt;flags &amp; GTF_transfer_completed).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Changing a GTF_permit_access from writable to read-only:</span>", 
"<span class=\"comment\"> *  Use SMP-safe CMPXCHG to set GTF_readonly, while checking !GTF_writing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Changing a GTF_permit_access from read-only to writable:</span>", 
"<span class=\"comment\"> *  Use SMP-safe bit-setting instruction.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A grant table comprises a packed array of grant entries in one or more</span>", 
"<span class=\"comment\"> * page frames shared between Xen and a guest.</span>", 
"<span class=\"comment\"> * [XEN]: This field is written by Xen and read by the sharing guest.</span>", 
"<span class=\"comment\"> * [GST]: This field is written by the guest and read by Xen.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#grant_entry\">grant_entry</a> {", 
"    <span class=\"comment\">/* GTF_xxx: various type and flag information.  [XEN,GST] */</span>", 
"    <a class=\"id\" href=\"#uint16_t\">uint16_t</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"    <span class=\"comment\">/* The domain being granted foreign privileges. [GST] */</span>", 
"    <a class=\"id\" href=\"#domid_t\">domid_t</a>  <a class=\"id\" href=\"#domid\">domid</a>;", 
"    <span class=\"comment\">/*</span>", 
"<span class=\"comment\">     * GTF_permit_access: Frame that @domid is allowed to map and access. [GST]</span>", 
"<span class=\"comment\">     * GTF_accept_transfer: Frame whose ownership transferred by @domid. [XEN]</span>", 
"<span class=\"comment\">     */</span>", 
"    <a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#frame\">frame</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Type of grant entry.</span>", 
"<span class=\"comment\"> *  GTF_invalid: This grant entry grants no privileges.</span>", 
"<span class=\"comment\"> *  GTF_permit_access: Allow @domid to map/access @frame.</span>", 
"<span class=\"comment\"> *  GTF_accept_transfer: Allow @domid to transfer ownership of one page frame</span>", 
"<span class=\"comment\"> *                       to this guest. Xen writes the page number to @frame.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GTF_invalid\">GTF_invalid</a>         (0U<<0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GTF_permit_access\">GTF_permit_access</a>   (1U<<0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GTF_accept_transfer\">GTF_accept_transfer</a> (2U<<0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GTF_type_mask\">GTF_type_mask</a>       (3U<<0)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Subflags for GTF_permit_access.</span>", 
"<span class=\"comment\"> *  GTF_readonly: Restrict @domid to read-only mappings and accesses. [GST]</span>", 
"<span class=\"comment\"> *  GTF_reading: Grant entry is currently mapped for reading by @domid. [XEN]</span>", 
"<span class=\"comment\"> *  GTF_writing: Grant entry is currently mapped for writing by @domid. [XEN]</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_GTF_readonly\">_GTF_readonly</a>       (2)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GTF_readonly\">GTF_readonly</a>        (1U<<<a class=\"id\" href=\"#_GTF_readonly\">_GTF_readonly</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_GTF_reading\">_GTF_reading</a>        (3)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GTF_reading\">GTF_reading</a>         (1U<<<a class=\"id\" href=\"#_GTF_reading\">_GTF_reading</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_GTF_writing\">_GTF_writing</a>        (4)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GTF_writing\">GTF_writing</a>         (1U<<<a class=\"id\" href=\"#_GTF_writing\">_GTF_writing</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Subflags for GTF_accept_transfer:</span>", 
"<span class=\"comment\"> *  GTF_transfer_committed: Xen sets this flag to indicate that it is committed</span>", 
"<span class=\"comment\"> *      to transferring ownership of a page frame. When a guest sees this flag</span>", 
"<span class=\"comment\"> *      it must /not/ modify the grant entry until GTF_transfer_completed is</span>", 
"<span class=\"comment\"> *      set by Xen.</span>", 
"<span class=\"comment\"> *  GTF_transfer_completed: It is safe for the guest to spin-wait on this flag</span>", 
"<span class=\"comment\"> *      after reading GTF_transfer_committed. Xen will always write the frame</span>", 
"<span class=\"comment\"> *      address, followed by ORing this flag, in a timely manner.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_GTF_transfer_committed\">_GTF_transfer_committed</a> (2)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GTF_transfer_committed\">GTF_transfer_committed</a>  (1U<<<a class=\"id\" href=\"#_GTF_transfer_committed\">_GTF_transfer_committed</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_GTF_transfer_completed\">_GTF_transfer_completed</a> (3)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GTF_transfer_completed\">GTF_transfer_completed</a>  (1U<<<a class=\"id\" href=\"#_GTF_transfer_completed\">_GTF_transfer_completed</a>)", 
"", 
"", 
"<span class=\"comment\">/***********************************</span>", 
"<span class=\"comment\"> * GRANT TABLE QUERIES AND USES</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Reference to a grant entry in a specified domain's grant table.</span>", 
"<span class=\"comment\"> */</span>", 
"typedef <a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#grant_ref_t\">grant_ref_t</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle to track a mapping created via a grant reference.</span>", 
"<span class=\"comment\"> */</span>", 
"typedef <a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#grant_handle_t\">grant_handle_t</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * GNTTABOP_map_grant_ref: Map the grant entry (&lt;dom&gt;,&lt;ref&gt;) for access</span>", 
"<span class=\"comment\"> * by devices and/or host CPUs. If successful, &lt;handle&gt; is a tracking number</span>", 
"<span class=\"comment\"> * that must be presented later to destroy the mapping(s). On error, &lt;handle&gt;</span>", 
"<span class=\"comment\"> * is a negative status code.</span>", 
"<span class=\"comment\"> * NOTES:</span>", 
"<span class=\"comment\"> *  1. If GNTMAP_device_map is specified then &lt;dev_bus_addr&gt; is the address</span>", 
"<span class=\"comment\"> *     via which I/O devices may access the granted frame.</span>", 
"<span class=\"comment\"> *  2. If GNTMAP_host_map is specified then a mapping will be added at</span>", 
"<span class=\"comment\"> *     either a host virtual address in the current address space, or at</span>", 
"<span class=\"comment\"> *     a PTE at the specified machine address.  The type of mapping to</span>", 
"<span class=\"comment\"> *     perform is selected through the GNTMAP_contains_pte flag, and the</span>", 
"<span class=\"comment\"> *     address is specified in &lt;host_addr&gt;.</span>", 
"<span class=\"comment\"> *  3. Mappings should only be destroyed via GNTTABOP_unmap_grant_ref. If a</span>", 
"<span class=\"comment\"> *     host mapping is destroyed by other means then it is *NOT* guaranteed</span>", 
"<span class=\"comment\"> *     to be accounted to the correct grant reference!</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTTABOP_map_grant_ref\">GNTTABOP_map_grant_ref</a>        0", 
"struct <a class=\"id\" href=\"#gnttab_map_grant_ref\">gnttab_map_grant_ref</a> {", 
"    <span class=\"comment\">/* IN parameters. */</span>", 
"    <a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#host_addr\">host_addr</a>;", 
"    <a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#flags\">flags</a>;               <span class=\"comment\">/* GNTMAP_* */</span>", 
"    <a class=\"id\" href=\"#grant_ref_t\">grant_ref_t</a> <a class=\"id\" href=\"#ref\">ref</a>;", 
"    <a class=\"id\" href=\"#domid_t\">domid_t</a>  <a class=\"id\" href=\"#dom\">dom</a>;", 
"    <span class=\"comment\">/* OUT parameters. */</span>", 
"    <a class=\"id\" href=\"#int16_t\">int16_t</a>  <a class=\"id\" href=\"#status\">status</a>;              <span class=\"comment\">/* GNTST_* */</span>", 
"    <a class=\"id\" href=\"#grant_handle_t\">grant_handle_t</a> <a class=\"id\" href=\"#handle\">handle</a>;", 
"    <a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#dev_bus_addr\">dev_bus_addr</a>;", 
"};", 
"<a class=\"id\" href=\"#DEFINE_GUEST_HANDLE_STRUCT\">DEFINE_GUEST_HANDLE_STRUCT</a>(<a class=\"id\" href=\"#gnttab_map_grant_ref\">gnttab_map_grant_ref</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * GNTTABOP_unmap_grant_ref: Destroy one or more grant-reference mappings</span>", 
"<span class=\"comment\"> * tracked by &lt;handle&gt;. If &lt;host_addr&gt; or &lt;dev_bus_addr&gt; is zero, that</span>", 
"<span class=\"comment\"> * field is ignored. If non-zero, they must refer to a device/host mapping</span>", 
"<span class=\"comment\"> * that is tracked by &lt;handle&gt;</span>", 
"<span class=\"comment\"> * NOTES:</span>", 
"<span class=\"comment\"> *  1. The call may fail in an undefined manner if either mapping is not</span>", 
"<span class=\"comment\"> *     tracked by &lt;handle&gt;.</span>", 
"<span class=\"comment\"> *  3. After executing a batch of unmaps, it is guaranteed that no stale</span>", 
"<span class=\"comment\"> *     mappings will remain in the device or host TLBs.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTTABOP_unmap_grant_ref\">GNTTABOP_unmap_grant_ref</a>      1", 
"struct <a class=\"id\" href=\"#gnttab_unmap_grant_ref\">gnttab_unmap_grant_ref</a> {", 
"    <span class=\"comment\">/* IN parameters. */</span>", 
"    <a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#host_addr\">host_addr</a>;", 
"    <a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#dev_bus_addr\">dev_bus_addr</a>;", 
"    <a class=\"id\" href=\"#grant_handle_t\">grant_handle_t</a> <a class=\"id\" href=\"#handle\">handle</a>;", 
"    <span class=\"comment\">/* OUT parameters. */</span>", 
"    <a class=\"id\" href=\"#int16_t\">int16_t</a>  <a class=\"id\" href=\"#status\">status</a>;              <span class=\"comment\">/* GNTST_* */</span>", 
"};", 
"<a class=\"id\" href=\"#DEFINE_GUEST_HANDLE_STRUCT\">DEFINE_GUEST_HANDLE_STRUCT</a>(<a class=\"id\" href=\"#gnttab_unmap_grant_ref\">gnttab_unmap_grant_ref</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * GNTTABOP_setup_table: Set up a grant table for &lt;dom&gt; comprising at least</span>", 
"<span class=\"comment\"> * &lt;nr_frames&gt; pages. The frame addresses are written to the &lt;frame_list&gt;.</span>", 
"<span class=\"comment\"> * Only &lt;nr_frames&gt; addresses are written, even if the table is larger.</span>", 
"<span class=\"comment\"> * NOTES:</span>", 
"<span class=\"comment\"> *  1. &lt;dom&gt; may be specified as DOMID_SELF.</span>", 
"<span class=\"comment\"> *  2. Only a sufficiently-privileged domain may specify &lt;dom&gt; != DOMID_SELF.</span>", 
"<span class=\"comment\"> *  3. Xen may not support more than a single grant-table page per domain.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTTABOP_setup_table\">GNTTABOP_setup_table</a>          2", 
"struct <a class=\"id\" href=\"#gnttab_setup_table\">gnttab_setup_table</a> {", 
"    <span class=\"comment\">/* IN parameters. */</span>", 
"    <a class=\"id\" href=\"#domid_t\">domid_t</a>  <a class=\"id\" href=\"#dom\">dom</a>;", 
"    <a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#nr_frames\">nr_frames</a>;", 
"    <span class=\"comment\">/* OUT parameters. */</span>", 
"    <a class=\"id\" href=\"#int16_t\">int16_t</a>  <a class=\"id\" href=\"#status\">status</a>;              <span class=\"comment\">/* GNTST_* */</span>", 
"    <a class=\"id\" href=\"#GUEST_HANDLE\">GUEST_HANDLE</a>(<a class=\"id\" href=\"#ulong\">ulong</a>) <a class=\"id\" href=\"#frame_list\">frame_list</a>;", 
"};", 
"<a class=\"id\" href=\"#DEFINE_GUEST_HANDLE_STRUCT\">DEFINE_GUEST_HANDLE_STRUCT</a>(<a class=\"id\" href=\"#gnttab_setup_table\">gnttab_setup_table</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * GNTTABOP_dump_table: Dump the contents of the grant table to the</span>", 
"<span class=\"comment\"> * xen console. Debugging use only.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTTABOP_dump_table\">GNTTABOP_dump_table</a>           3", 
"struct <a class=\"id\" href=\"#gnttab_dump_table\">gnttab_dump_table</a> {", 
"    <span class=\"comment\">/* IN parameters. */</span>", 
"    <a class=\"id\" href=\"#domid_t\">domid_t</a> <a class=\"id\" href=\"#dom\">dom</a>;", 
"    <span class=\"comment\">/* OUT parameters. */</span>", 
"    <a class=\"id\" href=\"#int16_t\">int16_t</a> <a class=\"id\" href=\"#status\">status</a>;               <span class=\"comment\">/* GNTST_* */</span>", 
"};", 
"<a class=\"id\" href=\"#DEFINE_GUEST_HANDLE_STRUCT\">DEFINE_GUEST_HANDLE_STRUCT</a>(<a class=\"id\" href=\"#gnttab_dump_table\">gnttab_dump_table</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * GNTTABOP_transfer_grant_ref: Transfer &lt;frame&gt; to a foreign domain. The</span>", 
"<span class=\"comment\"> * foreign domain has previously registered its interest in the transfer via</span>", 
"<span class=\"comment\"> * &lt;domid, ref&gt;.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that, even if the transfer fails, the specified page no longer belongs</span>", 
"<span class=\"comment\"> * to the calling domain *unless* the error is GNTST_bad_page.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTTABOP_transfer\">GNTTABOP_transfer</a>                4", 
"struct <a class=\"id\" href=\"#gnttab_transfer\">gnttab_transfer</a> {", 
"    <span class=\"comment\">/* IN parameters. */</span>", 
"    unsigned long <a class=\"id\" href=\"#mfn\">mfn</a>;", 
"    <a class=\"id\" href=\"#domid_t\">domid_t</a>       <a class=\"id\" href=\"#domid\">domid</a>;", 
"    <a class=\"id\" href=\"#grant_ref_t\">grant_ref_t</a>   <a class=\"id\" href=\"#ref\">ref</a>;", 
"    <span class=\"comment\">/* OUT parameters. */</span>", 
"    <a class=\"id\" href=\"#int16_t\">int16_t</a>       <a class=\"id\" href=\"#status\">status</a>;", 
"};", 
"<a class=\"id\" href=\"#DEFINE_GUEST_HANDLE_STRUCT\">DEFINE_GUEST_HANDLE_STRUCT</a>(<a class=\"id\" href=\"#gnttab_transfer\">gnttab_transfer</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * GNTTABOP_copy: Hypervisor based copy</span>", 
"<span class=\"comment\"> * source and destinations can be eithers MFNs or, for foreign domains,</span>", 
"<span class=\"comment\"> * grant references. the foreign domain has to grant read/write access</span>", 
"<span class=\"comment\"> * in its grant table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The flags specify what type source and destinations are (either MFN</span>", 
"<span class=\"comment\"> * or grant reference).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that this can also be used to copy data between two domains</span>", 
"<span class=\"comment\"> * via a third party if the source and destination domains had previously</span>", 
"<span class=\"comment\"> * grant appropriate access to their pages to the third party.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * source_offset specifies an offset in the source frame, dest_offset</span>", 
"<span class=\"comment\"> * the offset in the target frame and  len specifies the number of</span>", 
"<span class=\"comment\"> * bytes to be copied.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_GNTCOPY_source_gref\">_GNTCOPY_source_gref</a>      (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTCOPY_source_gref\">GNTCOPY_source_gref</a>       (1<<<a class=\"id\" href=\"#_GNTCOPY_source_gref\">_GNTCOPY_source_gref</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_GNTCOPY_dest_gref\">_GNTCOPY_dest_gref</a>        (1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTCOPY_dest_gref\">GNTCOPY_dest_gref</a>         (1<<<a class=\"id\" href=\"#_GNTCOPY_dest_gref\">_GNTCOPY_dest_gref</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTTABOP_copy\">GNTTABOP_copy</a>                 5", 
"struct <a class=\"id\" href=\"#gnttab_copy\">gnttab_copy</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* IN parameters. */</span>", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grant_ref_t\">grant_ref_t</a> <a class=\"id\" href=\"#ref\">ref</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long   <a class=\"id\" href=\"#gmfn\">gmfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#u\">u</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#domid_t\">domid_t</a>  <a class=\"id\" href=\"#domid\">domid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uint16_t\">uint16_t</a> <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#source\">source</a>, <a class=\"id\" href=\"#dest\">dest</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint16_t\">uint16_t</a>      <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint16_t\">uint16_t</a>      <a class=\"id\" href=\"#flags\">flags</a>;          <span class=\"comment\">/* GNTCOPY_* */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* OUT parameters. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#int16_t\">int16_t</a>       <a class=\"id\" href=\"#status\">status</a>;", 
"};", 
"<a class=\"id\" href=\"#DEFINE_GUEST_HANDLE_STRUCT\">DEFINE_GUEST_HANDLE_STRUCT</a>(<a class=\"id\" href=\"#gnttab_copy\">gnttab_copy</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * GNTTABOP_query_size: Query the current and maximum sizes of the shared</span>", 
"<span class=\"comment\"> * grant table.</span>", 
"<span class=\"comment\"> * NOTES:</span>", 
"<span class=\"comment\"> *  1. &lt;dom&gt; may be specified as DOMID_SELF.</span>", 
"<span class=\"comment\"> *  2. Only a sufficiently-privileged domain may specify &lt;dom&gt; != DOMID_SELF.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTTABOP_query_size\">GNTTABOP_query_size</a>           6", 
"struct <a class=\"id\" href=\"#gnttab_query_size\">gnttab_query_size</a> {", 
"    <span class=\"comment\">/* IN parameters. */</span>", 
"    <a class=\"id\" href=\"#domid_t\">domid_t</a>  <a class=\"id\" href=\"#dom\">dom</a>;", 
"    <span class=\"comment\">/* OUT parameters. */</span>", 
"    <a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#nr_frames\">nr_frames</a>;", 
"    <a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#max_nr_frames\">max_nr_frames</a>;", 
"    <a class=\"id\" href=\"#int16_t\">int16_t</a>  <a class=\"id\" href=\"#status\">status</a>;              <span class=\"comment\">/* GNTST_* */</span>", 
"};", 
"<a class=\"id\" href=\"#DEFINE_GUEST_HANDLE_STRUCT\">DEFINE_GUEST_HANDLE_STRUCT</a>(<a class=\"id\" href=\"#gnttab_query_size\">gnttab_query_size</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Bitfield values for update_pin_status.flags.</span>", 
"<span class=\"comment\"> */</span>", 
" <span class=\"comment\">/* Map the grant entry for access by I/O devices. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_GNTMAP_device_map\">_GNTMAP_device_map</a>      (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTMAP_device_map\">GNTMAP_device_map</a>       (1<<<a class=\"id\" href=\"#_GNTMAP_device_map\">_GNTMAP_device_map</a>)", 
" <span class=\"comment\">/* Map the grant entry for access by host CPUs. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_GNTMAP_host_map\">_GNTMAP_host_map</a>        (1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTMAP_host_map\">GNTMAP_host_map</a>         (1<<<a class=\"id\" href=\"#_GNTMAP_host_map\">_GNTMAP_host_map</a>)", 
" <span class=\"comment\">/* Accesses to the granted frame will be restricted to read-only access. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_GNTMAP_readonly\">_GNTMAP_readonly</a>        (2)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTMAP_readonly\">GNTMAP_readonly</a>         (1<<<a class=\"id\" href=\"#_GNTMAP_readonly\">_GNTMAP_readonly</a>)", 
" <span class=\"comment\">/*</span>", 
"<span class=\"comment\">  * GNTMAP_host_map subflag:</span>", 
"<span class=\"comment\">  *  0 =&gt; The host mapping is usable only by the guest OS.</span>", 
"<span class=\"comment\">  *  1 =&gt; The host mapping is usable by guest OS + current application.</span>", 
"<span class=\"comment\">  */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_GNTMAP_application_map\">_GNTMAP_application_map</a> (3)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTMAP_application_map\">GNTMAP_application_map</a>  (1<<<a class=\"id\" href=\"#_GNTMAP_application_map\">_GNTMAP_application_map</a>)", 
"", 
" <span class=\"comment\">/*</span>", 
"<span class=\"comment\">  * GNTMAP_contains_pte subflag:</span>", 
"<span class=\"comment\">  *  0 =&gt; This map request contains a host virtual address.</span>", 
"<span class=\"comment\">  *  1 =&gt; This map request contains the machine addess of the PTE to update.</span>", 
"<span class=\"comment\">  */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_GNTMAP_contains_pte\">_GNTMAP_contains_pte</a>    (4)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTMAP_contains_pte\">GNTMAP_contains_pte</a>     (1<<<a class=\"id\" href=\"#_GNTMAP_contains_pte\">_GNTMAP_contains_pte</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Values for error status returns. All errors are -ve.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTST_okay\">GNTST_okay</a>             (0)  <span class=\"comment\">/* Normal return.                        */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTST_general_error\">GNTST_general_error</a>    (-1) <span class=\"comment\">/* General undefined error.              */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTST_bad_domain\">GNTST_bad_domain</a>       (-2) <span class=\"comment\">/* Unrecognsed domain id.                */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTST_bad_gntref\">GNTST_bad_gntref</a>       (-3) <span class=\"comment\">/* Unrecognised or inappropriate gntref. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTST_bad_handle\">GNTST_bad_handle</a>       (-4) <span class=\"comment\">/* Unrecognised or inappropriate handle. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTST_bad_virt_addr\">GNTST_bad_virt_addr</a>    (-5) <span class=\"comment\">/* Inappropriate virtual address to map. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTST_bad_dev_addr\">GNTST_bad_dev_addr</a>     (-6) <span class=\"comment\">/* Inappropriate device address to unmap.*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTST_no_device_space\">GNTST_no_device_space</a>  (-7) <span class=\"comment\">/* Out of space in I/O MMU.              */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTST_permission_denied\">GNTST_permission_denied</a> (-8) <span class=\"comment\">/* Not enough privilege for operation.  */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTST_bad_page\">GNTST_bad_page</a>         (-9) <span class=\"comment\">/* Specified page was invalid for op.    */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTST_bad_copy_arg\">GNTST_bad_copy_arg</a>    (-10) <span class=\"comment\">/* copy arguments cross page boundary */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GNTTABOP_error_msgs\">GNTTABOP_error_msgs</a> {                   \\", 
"    \"okay\",                                     \\", 
"    \"undefined error\",                          \\", 
"    \"unrecognised domain id\",                   \\", 
"    \"invalid grant reference\",                  \\", 
"    \"invalid mapping handle\",                   \\", 
"    \"invalid virtual address\",                  \\", 
"    \"invalid device address\",                   \\", 
"    \"no spare translation slot in the I/O MMU\", \\", 
"    \"permission denied\",                        \\", 
"    \"bad page\",                                 \\", 
"    \"copy arguments cross page boundary\"        \\", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __XEN_PUBLIC_GRANT_TABLE_H__ */</span>", 
];
xr_frag_insert('l/3f/4d9ffa3eada8014b6dc87f41dfadeeaec74835.xr', __xr_tmp);
