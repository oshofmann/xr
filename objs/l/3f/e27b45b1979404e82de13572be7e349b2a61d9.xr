var __xr_tmp = [
"<span class=\"comment\"> * FUNCTION:    acpi_ex_enter_interpreter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Enter the interpreter execution region. Failure to enter</span>", 
"<span class=\"comment\"> *              the interpreter region is a fatal system error. Used in</span>", 
"<span class=\"comment\"> *              conjunction with exit_interpreter.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ex_enter_interpreter\">acpi_ex_enter_interpreter</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ex_enter_interpreter\">ex_enter_interpreter</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_acquire_mutex\">acpi_ut_acquire_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_INTERPRETER\">ACPI_MTX_INTERPRETER</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Could not acquire AML Interpreter mutex\"));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_reacquire_interpreter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Reacquire the interpreter execution region from within the</span>", 
"<span class=\"comment\"> *              interpreter code. Failure to enter the interpreter region is a</span>", 
"<span class=\"comment\"> *              fatal system error. Used in  conjunction with</span>", 
"<span class=\"comment\"> *              relinquish_interpreter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ex_reacquire_interpreter\">acpi_ex_reacquire_interpreter</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ex_reacquire_interpreter\">ex_reacquire_interpreter</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the global serialized flag is set, do not release the interpreter,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * since it was not actually released by acpi_ex_relinquish_interpreter.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This forces the interpreter to be single threaded.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_gbl_all_methods_serialized\">acpi_gbl_all_methods_serialized</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ex_enter_interpreter\">acpi_ex_enter_interpreter</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_exit_interpreter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Exit the interpreter execution region. This is the top level</span>", 
"<span class=\"comment\"> *              routine used to exit the interpreter when all processing has</span>", 
"<span class=\"comment\"> *              been completed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ex_exit_interpreter\">acpi_ex_exit_interpreter</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ex_exit_interpreter\">ex_exit_interpreter</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_release_mutex\">acpi_ut_release_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_INTERPRETER\">ACPI_MTX_INTERPRETER</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Could not release AML Interpreter mutex\"));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_relinquish_interpreter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Exit the interpreter execution region, from within the</span>", 
"<span class=\"comment\"> *              interpreter - before attempting an operation that will possibly</span>", 
"<span class=\"comment\"> *              block the running thread.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Cases where the interpreter is unlocked internally</span>", 
"<span class=\"comment\"> *      1) Method to be blocked on a Sleep() AML opcode</span>", 
"<span class=\"comment\"> *      2) Method to be blocked on an Acquire() AML opcode</span>", 
"<span class=\"comment\"> *      3) Method to be blocked on a Wait() AML opcode</span>", 
"<span class=\"comment\"> *      4) Method to be blocked to acquire the global lock</span>", 
"<span class=\"comment\"> *      5) Method to be blocked waiting to execute a serialized control method</span>", 
"<span class=\"comment\"> *          that is currently executing</span>", 
"<span class=\"comment\"> *      6) About to invoke a user-installed opregion handler</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ex_relinquish_interpreter\">acpi_ex_relinquish_interpreter</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ex_relinquish_interpreter\">ex_relinquish_interpreter</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the global serialized flag is set, do not release the interpreter.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This forces the interpreter to be single threaded.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_gbl_all_methods_serialized\">acpi_gbl_all_methods_serialized</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ex_exit_interpreter\">acpi_ex_exit_interpreter</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_truncate_for32bit_table</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  obj_desc        - Object to be truncated</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      none</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Truncate an ACPI Integer to 32 bits if the execution mode is</span>", 
"<span class=\"comment\"> *              32-bit, as determined by the revision of the DSDT.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ex_truncate_for32bit_table\">acpi_ex_truncate_for32bit_table</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc\">obj_desc</a>)", 
"{", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Object must be a valid number and we must be executing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a control method. NS node could be there for AML_INT_NAMEPATH_OP.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((!<a class=\"id\" href=\"#obj_desc\">obj_desc</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#ACPI_GET_DESCRIPTOR_TYPE\">ACPI_GET_DESCRIPTOR_TYPE</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>) != <a class=\"id\" href=\"#ACPI_DESC_TYPE_OPERAND\">ACPI_DESC_TYPE_OPERAND</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_TYPE_INTEGER\">ACPI_TYPE_INTEGER</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_integer_byte_width\">acpi_gbl_integer_byte_width</a> == 4) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We are running a method that exists in a 32-bit ACPI table.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Truncate the value to 32 bits by zeroing out the upper 32-bit field</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a> &= (<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#ACPI_UINT32_MAX\">ACPI_UINT32_MAX</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_acquire_global_lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  field_flags           - Flags with Lock rule:</span>", 
"<span class=\"comment\"> *                                      always_lock or never_lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Obtain the ACPI hardware Global Lock, only if the field</span>", 
"<span class=\"comment\"> *              flags specifiy that it is to be obtained before field access.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ex_acquire_global_lock\">acpi_ex_acquire_global_lock</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#field_flags\">field_flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ex_acquire_global_lock\">ex_acquire_global_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only use the lock if the always_lock bit is set */</span>", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#field_flags\">field_flags</a> &amp; <a class=\"id\" href=\"#AML_FIELD_LOCK_RULE_MASK\">AML_FIELD_LOCK_RULE_MASK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Attempt to get the global lock, wait forever */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ex_acquire_mutex_object\">acpi_ex_acquire_mutex_object</a>(<a class=\"id\" href=\"#ACPI_WAIT_FOREVER\">ACPI_WAIT_FOREVER</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#acpi_gbl_global_lock_mutex\">acpi_gbl_global_lock_mutex</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#acpi_os_get_thread_id\">acpi_os_get_thread_id</a>());", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_EXCEPTION\">ACPI_EXCEPTION</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Could not acquire Global Lock\"));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_release_global_lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  field_flags           - Flags with Lock rule:</span>", 
"<span class=\"comment\"> *                                      always_lock or never_lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Release the ACPI hardware Global Lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ex_release_global_lock\">acpi_ex_release_global_lock</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#field_flags\">field_flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ex_release_global_lock\">ex_release_global_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only use the lock if the always_lock bit is set */</span>", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#field_flags\">field_flags</a> &amp; <a class=\"id\" href=\"#AML_FIELD_LOCK_RULE_MASK\">AML_FIELD_LOCK_RULE_MASK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Release the global lock */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ex_release_mutex_object\">acpi_ex_release_mutex_object</a>(<a class=\"id\" href=\"#acpi_gbl_global_lock_mutex\">acpi_gbl_global_lock_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Report the error, but there isn't much else we can do */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_EXCEPTION\">ACPI_EXCEPTION</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Could not release Global Lock\"));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_digits_needed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Value           - Value to be represented</span>", 
"<span class=\"comment\"> *              Base            - Base of representation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      The number of digits.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Calculate the number of digits needed to represent the Value</span>", 
"<span class=\"comment\"> *              in the given Base (Radix)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#acpi_ex_digits_needed\">acpi_ex_digits_needed</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#base\">base</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#num_digits\">num_digits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#current_value\">current_value</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ex_digits_needed\">ex_digits_needed</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* u64 is unsigned, so we don't worry about a '-' prefix */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_UINT32\">return_UINT32</a>(1);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current_value\">current_value</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num_digits\">num_digits</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Count the digits in the requested base */</span>", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#current_value\">current_value</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ut_short_divide\">acpi_ut_short_divide</a>(<a class=\"id\" href=\"#current_value\">current_value</a>, <a class=\"id\" href=\"#base\">base</a>, &amp;<a class=\"id\" href=\"#current_value\">current_value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_digits\">num_digits</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_UINT32\">return_UINT32</a>(<a class=\"id\" href=\"#num_digits\">num_digits</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_eisa_id_to_string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  compressed_id   - EISAID to be converted</span>", 
"<span class=\"comment\"> *              out_string      - Where to put the converted string (8 bytes)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Convert a numeric EISAID to string representation. Return</span>", 
"<span class=\"comment\"> *              buffer must be large enough to hold the string. The string</span>", 
];
xr_frag_insert('l/3f/e27b45b1979404e82de13572be7e349b2a61d9.xr', __xr_tmp);
