var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>NET3<span class=\"ts\"/>Protocol independent device support routines.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Derived from the non IP parts of dev.c 1.0.19</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>Authors:<span class=\"ts\"/>Ross Biro</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Fred N. van Kempen, &lt;waltje@uWalt.NL.Mugnet.ORG&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Mark Evans, &lt;evansmp@uhura.aston.ac.uk&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Additional Authors:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Florian la Roche &lt;rzsfl@rz.uni-sb.de&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox &lt;gw4pts@gw4pts.ampr.org&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>David Hinds &lt;dahinds@users.sourceforge.net&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alexey Kuznetsov &lt;kuznet@ms2.inr.ac.ru&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Adam Sulmicki &lt;adam@cfar.umd.edu&gt;</span>", 
"<span class=\"comment\"> *              Pekka Riikonen &lt;priikone@poesidon.pspt.fi&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Changes:</span>", 
"<span class=\"comment\"> *              D.J. Barrow     :       Fixed bug where dev-&gt;refcnt gets set</span>", 
"<span class=\"comment\"> *              <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>to 2 if register_netdev gets called</span>", 
"<span class=\"comment\"> *              <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>before net_dev_init &amp; also removed a</span>", 
"<span class=\"comment\"> *              <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>few lines of code in the process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>device private ioctl copies fields back.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Transmit queue code does relevant</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>stunts to keep the queue safe.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Fixed double lock.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Fixed promisc NULL pointer trap</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>????????<span class=\"ts\"/>:<span class=\"ts\"/>Support the full private ioctl range</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Moved ioctl permission check into</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>drivers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Tim Kordas<span class=\"ts\"/>:<span class=\"ts\"/>SIOCADDMULTI/SIOCDELMULTI</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>100 backlog just doesn't cut it when</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>you start doing multicast video 8)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Rewrote net_bh and list manager.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>: <span class=\"ts\"/>Fix ETH_P_ALL echoback lengths.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Took out transmit every packet pass</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Saved a few bytes in the ioctl handler</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Network driver sets packet type before</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>calling netif_rx. Saves a function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>call a packet.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Hashed net_bh()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Richard Kooijman:<span class=\"ts\"/>Timestamp fixes.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Wrong field in SIOCGIFDSTADDR</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Device lock protection.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>: <span class=\"ts\"/>Fixed nasty side effect of device close</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>changes.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Rudi Cilibrasi<span class=\"ts\"/>:<span class=\"ts\"/>Pass the right thing to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>set_mac_address()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Dave Miller<span class=\"ts\"/>:<span class=\"ts\"/>32bit quantity for the device lock to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>make it work out on a Sparc.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Bjorn Ekwall<span class=\"ts\"/>:<span class=\"ts\"/>Added KERNELD hack.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Cleaned up the backlog initialise.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Craig Metz<span class=\"ts\"/>:<span class=\"ts\"/>SIOCGIFCONF fix if space for under</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1 device.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    Thomas Bogendoerfer :<span class=\"ts\"/>Return ENODEV for dev_open, if there</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>is no device open function.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Andi Kleen<span class=\"ts\"/>:<span class=\"ts\"/>Fix error reporting for SIOCGIFCONF</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    Michael Chastain<span class=\"ts\"/>:<span class=\"ts\"/>Fix signed/unsigned for SIOCGIFCONF</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Cyrus Durgin<span class=\"ts\"/>:<span class=\"ts\"/>Cleaned for KMOD</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Adam Sulmicki   :<span class=\"ts\"/>Bug Fix : Network Device Unload</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>A network device unload needs to purge</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>the backlog queue.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Paul Rusty Russell<span class=\"ts\"/>:<span class=\"ts\"/>SIOCSIFNAME</span>", 
"<span class=\"comment\"> *              Pekka Riikonen  :<span class=\"ts\"/>Netdev boot-time settings code</span>", 
"<span class=\"comment\"> *              Andrew Morton   :       Make unregister_netdevice wait</span>", 
"<span class=\"comment\"> *              <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>indefinitely on dev-&gt;refcnt</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>J Hadi Salim<span class=\"ts\"/>:<span class=\"ts\"/>- Backlog queue sampling</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>        - netif_rx() feedback</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hash\">hash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sockios\">sockios</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#if_ether\">if_ether</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#etherdevice\">etherdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ethtool\">ethtool</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#net_namespace\">net_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#sock\">sock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rtnetlink\">rtnetlink</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stat\">stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#pkt_sched\">pkt_sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#checksum\">checksum</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#xfrm\">xfrm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmod\">kmod</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netpoll\">netpoll</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#wext\">wext</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#iw_handler\">iw_handler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#current\">current</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dmaengine\">dmaengine</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#if_arp\">if_arp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#if_vlan\">if_vlan</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jhash\">jhash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#random\">random</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#napi\">napi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"net-sysfs.h\"", 
"", 
"<span class=\"comment\">/* Instead of increasing this, you should create a hash table. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_GRO_SKBS\">MAX_GRO_SKBS</a> 8", 
"", 
"<span class=\"comment\">/* This should be increased if a protocol with a bigger head is added. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GRO_MAX_HEAD\">GRO_MAX_HEAD</a> (<a class=\"id\" href=\"#MAX_HEADER\">MAX_HEADER</a> + 128)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The list of packet types we will receive (as opposed to discard)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and the routines to invoke.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Why 16. Because with 16 the only overlap we get on a hash of the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>low nibble of the protocol value is RARP/SNAP/X.25.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      NOTE:  That is no longer true with the addition of VLAN tags.  Not</span>", 
"<span class=\"comment\"> *             sure which should go first, but I bet it won't make much</span>", 
"<span class=\"comment\"> *             difference if we are running VLANs.  The good news is that</span>", 
"<span class=\"comment\"> *             this protocol won't be in the list unless compiled in, so</span>", 
"<span class=\"comment\"> *             the average user (w/out VLANs) will not be adversely affected.</span>", 
"<span class=\"comment\"> *             --BLG</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>0800<span class=\"ts\"/>IP</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>8100    802.1Q VLAN</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>0001<span class=\"ts\"/>802.3</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>0002<span class=\"ts\"/>AX.25</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>0004<span class=\"ts\"/>802.2</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>8035<span class=\"ts\"/>RARP</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>0005<span class=\"ts\"/>SNAP</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>0805<span class=\"ts\"/>X.25</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>0806<span class=\"ts\"/>ARP</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>8137<span class=\"ts\"/>IPX</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>0009<span class=\"ts\"/>Localtalk</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>86DD<span class=\"ts\"/>IPv6</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTYPE_HASH_SIZE\">PTYPE_HASH_SIZE</a><span class=\"ts\"/>(16)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTYPE_HASH_MASK\">PTYPE_HASH_MASK</a><span class=\"ts\"/>(<a class=\"id\" href=\"#PTYPE_HASH_SIZE\">PTYPE_HASH_SIZE</a> - 1)", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#ptype_lock\">ptype_lock</a>);", 
"static struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#ptype_base\">ptype_base</a>[<a class=\"id\" href=\"#PTYPE_HASH_SIZE\">PTYPE_HASH_SIZE</a>] <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#ptype_all\">ptype_all</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;<span class=\"ts\"/><span class=\"comment\">/* Taps */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The @dev_base_head list is protected by @dev_base_lock and the rtnl</span>", 
"<span class=\"comment\"> * semaphore.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Pure readers hold dev_base_lock for reading, or rcu_read_lock()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Writers must hold the rtnl semaphore while they loop through the</span>", 
"<span class=\"comment\"> * dev_base_head list, and hold dev_base_lock for writing when they do the</span>", 
"<span class=\"comment\"> * actual updates.  This allows pure readers to access the list even</span>", 
"<span class=\"comment\"> * while a writer is preparing to update it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To put it another way, dev_base_lock is held for writing only to</span>", 
"<span class=\"comment\"> * protect against pure readers; the rtnl semaphore provides the</span>", 
"<span class=\"comment\"> * protection against other writers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See, for example usages, register_netdevice() and</span>", 
"<span class=\"comment\"> * unregister_netdevice(), which must be called with the rtnl</span>", 
"<span class=\"comment\"> * semaphore held.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#DEFINE_RWLOCK\">DEFINE_RWLOCK</a>(<a class=\"id\" href=\"#dev_base_lock\">dev_base_lock</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_base_lock\">dev_base_lock</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#dev_name_hash\">dev_name_hash</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#full_name_hash\">full_name_hash</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#strnlen\">strnlen</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>));", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#dev_name_head\">dev_name_head</a>[<a class=\"id\" href=\"#hash_32\">hash_32</a>(<a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#NETDEV_HASHBITS\">NETDEV_HASHBITS</a>)];", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#dev_index_hash\">dev_index_hash</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, int <a class=\"id\" href=\"#ifindex\">ifindex</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#dev_index_head\">dev_index_head</a>[<a class=\"id\" href=\"#ifindex\">ifindex</a> &amp; (<a class=\"id\" href=\"#NETDEV_HASHENTRIES\">NETDEV_HASHENTRIES</a> - 1)];", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rps_lock\">rps_lock</a>(struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RPS\">CONFIG_RPS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#input_pkt_queue\">input_pkt_queue</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rps_unlock\">rps_unlock</a>(struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RPS\">CONFIG_RPS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#input_pkt_queue\">input_pkt_queue</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/* Device list insertion */</span>", 
"static int <a class=\"id\" href=\"#list_netdevice\">list_netdevice</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSERT_RTNL\">ASSERT_RTNL</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_bh\">write_lock_bh</a>(&amp;<a class=\"id\" href=\"#dev_base_lock\">dev_base_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail_rcu\">list_add_tail_rcu</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_list\">dev_list</a>, &amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#dev_base_head\">dev_base_head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head_rcu\">hlist_add_head_rcu</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name_hlist\">name_hlist</a>, <a class=\"id\" href=\"#dev_name_hash\">dev_name_hash</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head_rcu\">hlist_add_head_rcu</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#index_hlist\">index_hlist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#dev_index_hash\">dev_index_hash</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_bh\">write_unlock_bh</a>(&amp;<a class=\"id\" href=\"#dev_base_lock\">dev_base_lock</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Device list removal</span>", 
"<span class=\"comment\"> * caller must respect a RCU grace period before freeing/reusing dev</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#unlist_netdevice\">unlist_netdevice</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSERT_RTNL\">ASSERT_RTNL</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Unlink dev from the device chain */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_bh\">write_lock_bh</a>(&amp;<a class=\"id\" href=\"#dev_base_lock\">dev_base_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_list\">dev_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_rcu\">hlist_del_rcu</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name_hlist\">name_hlist</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_rcu\">hlist_del_rcu</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#index_hlist\">index_hlist</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_bh\">write_unlock_bh</a>(&amp;<a class=\"id\" href=\"#dev_base_lock\">dev_base_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Our notifier list</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#RAW_NOTIFIER_HEAD\">RAW_NOTIFIER_HEAD</a>(<a class=\"id\" href=\"#netdev_chain\">netdev_chain</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Device drivers call our routines to queue packets here. We empty the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>queue in the local softnet handler.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU_ALIGNED\">DEFINE_PER_CPU_ALIGNED</a>(struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a>, <a class=\"id\" href=\"#softnet_data\">softnet_data</a>);", 
"<a class=\"id\" href=\"#EXPORT_PER_CPU_SYMBOL\">EXPORT_PER_CPU_SYMBOL</a>(<a class=\"id\" href=\"#softnet_data\">softnet_data</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKDEP\">CONFIG_LOCKDEP</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * register_netdevice() inits txq-&gt;_xmit_lock and sets lockdep class</span>", 
"<span class=\"comment\"> * according to dev-&gt;type</span>", 
"<span class=\"comment\"> */</span>", 
"static const unsigned short <a class=\"id\" href=\"#netdev_lock_type\">netdev_lock_type</a>[] =", 
"<span class=\"ts\"/>{<a class=\"id\" href=\"#ARPHRD_NETROM\">ARPHRD_NETROM</a>, <a class=\"id\" href=\"#ARPHRD_ETHER\">ARPHRD_ETHER</a>, <a class=\"id\" href=\"#ARPHRD_EETHER\">ARPHRD_EETHER</a>, <a class=\"id\" href=\"#ARPHRD_AX25\">ARPHRD_AX25</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ARPHRD_PRONET\">ARPHRD_PRONET</a>, <a class=\"id\" href=\"#ARPHRD_CHAOS\">ARPHRD_CHAOS</a>, <a class=\"id\" href=\"#ARPHRD_IEEE802\">ARPHRD_IEEE802</a>, <a class=\"id\" href=\"#ARPHRD_ARCNET\">ARPHRD_ARCNET</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ARPHRD_APPLETLK\">ARPHRD_APPLETLK</a>, <a class=\"id\" href=\"#ARPHRD_DLCI\">ARPHRD_DLCI</a>, <a class=\"id\" href=\"#ARPHRD_ATM\">ARPHRD_ATM</a>, <a class=\"id\" href=\"#ARPHRD_METRICOM\">ARPHRD_METRICOM</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ARPHRD_IEEE1394\">ARPHRD_IEEE1394</a>, <a class=\"id\" href=\"#ARPHRD_EUI64\">ARPHRD_EUI64</a>, <a class=\"id\" href=\"#ARPHRD_INFINIBAND\">ARPHRD_INFINIBAND</a>, <a class=\"id\" href=\"#ARPHRD_SLIP\">ARPHRD_SLIP</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ARPHRD_CSLIP\">ARPHRD_CSLIP</a>, <a class=\"id\" href=\"#ARPHRD_SLIP6\">ARPHRD_SLIP6</a>, <a class=\"id\" href=\"#ARPHRD_CSLIP6\">ARPHRD_CSLIP6</a>, <a class=\"id\" href=\"#ARPHRD_RSRVD\">ARPHRD_RSRVD</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ARPHRD_ADAPT\">ARPHRD_ADAPT</a>, <a class=\"id\" href=\"#ARPHRD_ROSE\">ARPHRD_ROSE</a>, <a class=\"id\" href=\"#ARPHRD_X25\">ARPHRD_X25</a>, <a class=\"id\" href=\"#ARPHRD_HWX25\">ARPHRD_HWX25</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ARPHRD_PPP\">ARPHRD_PPP</a>, <a class=\"id\" href=\"#ARPHRD_CISCO\">ARPHRD_CISCO</a>, <a class=\"id\" href=\"#ARPHRD_LAPB\">ARPHRD_LAPB</a>, <a class=\"id\" href=\"#ARPHRD_DDCMP\">ARPHRD_DDCMP</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ARPHRD_RAWHDLC\">ARPHRD_RAWHDLC</a>, <a class=\"id\" href=\"#ARPHRD_TUNNEL\">ARPHRD_TUNNEL</a>, <a class=\"id\" href=\"#ARPHRD_TUNNEL6\">ARPHRD_TUNNEL6</a>, <a class=\"id\" href=\"#ARPHRD_FRAD\">ARPHRD_FRAD</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ARPHRD_SKIP\">ARPHRD_SKIP</a>, <a class=\"id\" href=\"#ARPHRD_LOOPBACK\">ARPHRD_LOOPBACK</a>, <a class=\"id\" href=\"#ARPHRD_LOCALTLK\">ARPHRD_LOCALTLK</a>, <a class=\"id\" href=\"#ARPHRD_FDDI\">ARPHRD_FDDI</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ARPHRD_BIF\">ARPHRD_BIF</a>, <a class=\"id\" href=\"#ARPHRD_SIT\">ARPHRD_SIT</a>, <a class=\"id\" href=\"#ARPHRD_IPDDP\">ARPHRD_IPDDP</a>, <a class=\"id\" href=\"#ARPHRD_IPGRE\">ARPHRD_IPGRE</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ARPHRD_PIMREG\">ARPHRD_PIMREG</a>, <a class=\"id\" href=\"#ARPHRD_HIPPI\">ARPHRD_HIPPI</a>, <a class=\"id\" href=\"#ARPHRD_ASH\">ARPHRD_ASH</a>, <a class=\"id\" href=\"#ARPHRD_ECONET\">ARPHRD_ECONET</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ARPHRD_IRDA\">ARPHRD_IRDA</a>, <a class=\"id\" href=\"#ARPHRD_FCPP\">ARPHRD_FCPP</a>, <a class=\"id\" href=\"#ARPHRD_FCAL\">ARPHRD_FCAL</a>, <a class=\"id\" href=\"#ARPHRD_FCPL\">ARPHRD_FCPL</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ARPHRD_FCFABRIC\">ARPHRD_FCFABRIC</a>, <a class=\"id\" href=\"#ARPHRD_IEEE802_TR\">ARPHRD_IEEE802_TR</a>, <a class=\"id\" href=\"#ARPHRD_IEEE80211\">ARPHRD_IEEE80211</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ARPHRD_IEEE80211_PRISM\">ARPHRD_IEEE80211_PRISM</a>, <a class=\"id\" href=\"#ARPHRD_IEEE80211_RADIOTAP\">ARPHRD_IEEE80211_RADIOTAP</a>, <a class=\"id\" href=\"#ARPHRD_PHONET\">ARPHRD_PHONET</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ARPHRD_PHONET_PIPE\">ARPHRD_PHONET_PIPE</a>, <a class=\"id\" href=\"#ARPHRD_IEEE802154\">ARPHRD_IEEE802154</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ARPHRD_VOID\">ARPHRD_VOID</a>, <a class=\"id\" href=\"#ARPHRD_NONE\">ARPHRD_NONE</a>};", 
"", 
"static const char *const <a class=\"id\" href=\"#netdev_lock_name\">netdev_lock_name</a>[] =", 
"<span class=\"ts\"/>{\"_xmit_NETROM\", \"_xmit_ETHER\", \"_xmit_EETHER\", \"_xmit_AX25\",", 
"<span class=\"ts\"/> \"_xmit_PRONET\", \"_xmit_CHAOS\", \"_xmit_IEEE802\", \"_xmit_ARCNET\",", 
"<span class=\"ts\"/> \"_xmit_APPLETLK\", \"_xmit_DLCI\", \"_xmit_ATM\", \"_xmit_METRICOM\",", 
"<span class=\"ts\"/> \"_xmit_IEEE1394\", \"_xmit_EUI64\", \"_xmit_INFINIBAND\", \"_xmit_SLIP\",", 
"<span class=\"ts\"/> \"_xmit_CSLIP\", \"_xmit_SLIP6\", \"_xmit_CSLIP6\", \"_xmit_RSRVD\",", 
"<span class=\"ts\"/> \"_xmit_ADAPT\", \"_xmit_ROSE\", \"_xmit_X25\", \"_xmit_HWX25\",", 
"<span class=\"ts\"/> \"_xmit_PPP\", \"_xmit_CISCO\", \"_xmit_LAPB\", \"_xmit_DDCMP\",", 
"<span class=\"ts\"/> \"_xmit_RAWHDLC\", \"_xmit_TUNNEL\", \"_xmit_TUNNEL6\", \"_xmit_FRAD\",", 
"<span class=\"ts\"/> \"_xmit_SKIP\", \"_xmit_LOOPBACK\", \"_xmit_LOCALTLK\", \"_xmit_FDDI\",", 
"<span class=\"ts\"/> \"_xmit_BIF\", \"_xmit_SIT\", \"_xmit_IPDDP\", \"_xmit_IPGRE\",", 
"<span class=\"ts\"/> \"_xmit_PIMREG\", \"_xmit_HIPPI\", \"_xmit_ASH\", \"_xmit_ECONET\",", 
"<span class=\"ts\"/> \"_xmit_IRDA\", \"_xmit_FCPP\", \"_xmit_FCAL\", \"_xmit_FCPL\",", 
"<span class=\"ts\"/> \"_xmit_FCFABRIC\", \"_xmit_IEEE802_TR\", \"_xmit_IEEE80211\",", 
"<span class=\"ts\"/> \"_xmit_IEEE80211_PRISM\", \"_xmit_IEEE80211_RADIOTAP\", \"_xmit_PHONET\",", 
"<span class=\"ts\"/> \"_xmit_PHONET_PIPE\", \"_xmit_IEEE802154\",", 
"<span class=\"ts\"/> \"_xmit_VOID\", \"_xmit_NONE\"};", 
"", 
"static struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#netdev_xmit_lock_key\">netdev_xmit_lock_key</a>[<a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#netdev_lock_type\">netdev_lock_type</a>)];", 
"static struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#netdev_addr_lock_key\">netdev_addr_lock_key</a>[<a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#netdev_lock_type\">netdev_lock_type</a>)];", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned short <a class=\"id\" href=\"#netdev_lock_pos\">netdev_lock_pos</a>(unsigned short <a class=\"id\" href=\"#dev_type\">dev_type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#netdev_lock_type\">netdev_lock_type</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#netdev_lock_type\">netdev_lock_type</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#dev_type\">dev_type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* the last key is used by default */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#netdev_lock_type\">netdev_lock_type</a>) - 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#netdev_set_xmit_lockdep_class\">netdev_set_xmit_lockdep_class</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned short <a class=\"id\" href=\"#dev_type\">dev_type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#netdev_lock_pos\">netdev_lock_pos</a>(<a class=\"id\" href=\"#dev_type\">dev_type</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class_and_name\">lockdep_set_class_and_name</a>(<a class=\"id\" href=\"#lock\">lock</a>, &amp;<a class=\"id\" href=\"#netdev_xmit_lock_key\">netdev_xmit_lock_key</a>[<a class=\"id\" href=\"#i\">i</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#netdev_lock_name\">netdev_lock_name</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#netdev_set_addr_lockdep_class\">netdev_set_addr_lockdep_class</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#netdev_lock_pos\">netdev_lock_pos</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class_and_name\">lockdep_set_class_and_name</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#addr_list_lock\">addr_list_lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#netdev_addr_lock_key\">netdev_addr_lock_key</a>[<a class=\"id\" href=\"#i\">i</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#netdev_lock_name\">netdev_lock_name</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#netdev_set_xmit_lockdep_class\">netdev_set_xmit_lockdep_class</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned short <a class=\"id\" href=\"#dev_type\">dev_type</a>)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#netdev_set_addr_lockdep_class\">netdev_set_addr_lockdep_class</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>Protocol management and registration routines</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">*******************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Add a protocol ID to the list. Now that the input handler is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>smarter we can dispense with all the messy stuff that used to be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>BEWARE!!! Protocol handlers, mangling input packets,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>MUST BE last in hash buckets and checking protocol handlers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>MUST start from promiscuous ptype_all chain in net_bh.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>It is true now, do not change it.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Explanation follows: if protocol handler, mangling packet, will</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be the first on list, it is not able to sense, that packet</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is cloned and should be copied-on-write, so that it will</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>change it and subsequent readers will get broken packet.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>--ANK (980803)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_add_pack - add packet handler</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pt: packet type declaration</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Add a protocol handler to the networking stack. The passed &amp;packet_type</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is linked into kernel lists and may not be freed until it has been</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>removed from the kernel lists.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This call does not sleep therefore it can not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>guarantee all CPU's that are in middle of receiving packets</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>will see the new packet type (until the next received packet).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#dev_add_pack\">dev_add_pack</a>(struct <a class=\"id\" href=\"#packet_type\">packet_type</a> *<a class=\"id\" href=\"#pt\">pt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#hash\">hash</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#ptype_lock\">ptype_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#ETH_P_ALL\">ETH_P_ALL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#ptype_all\">ptype_all</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#type\">type</a>) &amp; <a class=\"id\" href=\"#PTYPE_HASH_MASK\">PTYPE_HASH_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#ptype_base\">ptype_base</a>[<a class=\"id\" href=\"#hash\">hash</a>]);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#ptype_lock\">ptype_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_add_pack\">dev_add_pack</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__dev_remove_pack<span class=\"ts\"/> - remove packet handler</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pt: packet type declaration</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Remove a protocol handler that was previously added to the kernel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>protocol handlers by dev_add_pack(). The passed &amp;packet_type is removed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from the kernel lists and can be freed or reused once this function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>returns.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      The packet type might still be in use by receivers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and must not be freed until after all the CPU's have gone</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>through a quiescent state.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__dev_remove_pack\">__dev_remove_pack</a>(struct <a class=\"id\" href=\"#packet_type\">packet_type</a> *<a class=\"id\" href=\"#pt\">pt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#packet_type\">packet_type</a> *<a class=\"id\" href=\"#pt1\">pt1</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#ptype_lock\">ptype_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#ETH_P_ALL\">ETH_P_ALL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#ptype_all\">ptype_all</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#ptype_base\">ptype_base</a>[<a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#type\">type</a>) &amp; <a class=\"id\" href=\"#PTYPE_HASH_MASK\">PTYPE_HASH_MASK</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#pt1\">pt1</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pt\">pt</a> == <a class=\"id\" href=\"#pt1\">pt1</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"dev_remove_pack: %p not found.\\n\", <a class=\"id\" href=\"#pt\">pt</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#ptype_lock\">ptype_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__dev_remove_pack\">__dev_remove_pack</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_remove_pack<span class=\"ts\"/> - remove packet handler</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pt: packet type declaration</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Remove a protocol handler that was previously added to the kernel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>protocol handlers by dev_add_pack(). The passed &amp;packet_type is removed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from the kernel lists and can be freed or reused once this function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>returns.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This call sleeps to guarantee that no CPU is looking at the packet</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>type after return.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dev_remove_pack\">dev_remove_pack</a>(struct <a class=\"id\" href=\"#packet_type\">packet_type</a> *<a class=\"id\" href=\"#pt\">pt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__dev_remove_pack\">__dev_remove_pack</a>(<a class=\"id\" href=\"#pt\">pt</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_net\">synchronize_net</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_remove_pack\">dev_remove_pack</a>);", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>      Device Boot-time Settings Routines</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">*******************************************************************************/</span>", 
"", 
"<span class=\"comment\">/* Boot time configuration table */</span>", 
"static struct <a class=\"id\" href=\"#netdev_boot_setup\">netdev_boot_setup</a> <a class=\"id\" href=\"#dev_boot_setup\">dev_boot_setup</a>[<a class=\"id\" href=\"#NETDEV_BOOT_SETUP_MAX\">NETDEV_BOOT_SETUP_MAX</a>];", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netdev_boot_setup_add<span class=\"ts\"/>- add new setup entry</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@name: name of the device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@map: configured settings for the device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Adds new setup entry to the dev_boot_setup list.  The function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>returns 0 on error and 1 on success.  This is a generic routine to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>all netdevices.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#netdev_boot_setup_add\">netdev_boot_setup_add</a>(char *<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#ifmap\">ifmap</a> *<a class=\"id\" href=\"#map\">map</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_boot_setup\">netdev_boot_setup</a> *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#dev_boot_setup\">dev_boot_setup</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NETDEV_BOOT_SETUP_MAX\">NETDEV_BOOT_SETUP_MAX</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>[0] == '\\0' || <a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>[0] == ' ') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>, 0, sizeof(<a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#map\">map</a>, sizeof(<a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#map\">map</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#NETDEV_BOOT_SETUP_MAX\">NETDEV_BOOT_SETUP_MAX</a> ? 0 : 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netdev_boot_setup_check<span class=\"ts\"/>- check boot time settings</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: the netdevice</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Check boot time settings for the device.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The found settings are set for the device to be used</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>later in the device probing.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns 0 if no settings found, 1 if they are.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#netdev_boot_setup_check\">netdev_boot_setup_check</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_boot_setup\">netdev_boot_setup</a> *<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#dev_boot_setup\">dev_boot_setup</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NETDEV_BOOT_SETUP_MAX\">NETDEV_BOOT_SETUP_MAX</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>[0] != '\\0' && <a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>[0] != ' ' &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#irq\">irq</a> <span class=\"ts\"/>= <a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#irq\">irq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#base_addr\">base_addr</a> <span class=\"ts\"/>= <a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#base_addr\">base_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mem_start\">mem_start</a> <span class=\"ts\"/>= <a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#mem_start\">mem_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mem_end\">mem_end</a> <span class=\"ts\"/>= <a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#mem_end\">mem_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#netdev_boot_setup_check\">netdev_boot_setup_check</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netdev_boot_base<span class=\"ts\"/>- get address from boot time settings</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@prefix: prefix for network device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@unit: id for network device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Check boot time settings for the base address of device.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The found settings are set for the device to be used</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>later in the device probing.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns 0 if no settings found.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#netdev_boot_base\">netdev_boot_base</a>(const char *<a class=\"id\" href=\"#prefix\">prefix</a>, int <a class=\"id\" href=\"#unit\">unit</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#netdev_boot_setup\">netdev_boot_setup</a> *<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#dev_boot_setup\">dev_boot_setup</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#name\">name</a>, \"%s%d\", <a class=\"id\" href=\"#prefix\">prefix</a>, <a class=\"id\" href=\"#unit\">unit</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If device already registered then return base of 1</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to indicate not to probe for this interface</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__dev_get_by_name\">__dev_get_by_name</a>(&amp;<a class=\"id\" href=\"#init_net\">init_net</a>, <a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NETDEV_BOOT_SETUP_MAX\">NETDEV_BOOT_SETUP_MAX</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#base_addr\">base_addr</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Saves at boot time configured settings for any netdevice.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#netdev_boot_setup\">netdev_boot_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ints\">ints</a>[5];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ifmap\">ifmap</a> <a class=\"id\" href=\"#map\">map</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#get_options\">get_options</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#ints\">ints</a>), <a class=\"id\" href=\"#ints\">ints</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#str\">str</a> || !*<a class=\"id\" href=\"#str\">str</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Save settings */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#map\">map</a>, 0, sizeof(<a class=\"id\" href=\"#map\">map</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ints\">ints</a>[0] &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#irq\">irq</a> = <a class=\"id\" href=\"#ints\">ints</a>[1];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ints\">ints</a>[0] &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#base_addr\">base_addr</a> = <a class=\"id\" href=\"#ints\">ints</a>[2];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ints\">ints</a>[0] &gt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#mem_start\">mem_start</a> = <a class=\"id\" href=\"#ints\">ints</a>[3];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ints\">ints</a>[0] &gt; 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#mem_end\">mem_end</a> = <a class=\"id\" href=\"#ints\">ints</a>[4];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add new entry to the list */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#netdev_boot_setup_add\">netdev_boot_setup_add</a>(<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#map\">map</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"netdev=\", <a class=\"id\" href=\"#netdev_boot_setup\">netdev_boot_setup</a>);", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    Device Interface Subroutines</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">*******************************************************************************/</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__dev_get_by_name<span class=\"ts\"/>- find a device by its name</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@net: the applicable net namespace</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@name: name to find</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Find an interface by name. Must be called under RTNL semaphore</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or @dev_base_lock. If the name is found a pointer to the device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is returned. If the name is not found then %NULL is returned. The</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>reference counters are not incremented so the caller must be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>careful with locks.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#__dev_get_by_name\">__dev_get_by_name</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#dev_name_hash\">dev_name_hash</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#name_hlist\">name_hlist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__dev_get_by_name\">__dev_get_by_name</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_get_by_name_rcu<span class=\"ts\"/>- find a device by its name</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@net: the applicable net namespace</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@name: name to find</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Find an interface by name.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If the name is found a pointer to the device is returned.</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>If the name is not found then %NULL is returned.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The reference counters are not incremented so the caller must be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>careful with locks. The caller must hold RCU lock.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev_get_by_name_rcu\">dev_get_by_name_rcu</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#dev_name_hash\">dev_name_hash</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#name_hlist\">name_hlist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_get_by_name_rcu\">dev_get_by_name_rcu</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_get_by_name<span class=\"ts\"/><span class=\"ts\"/>- find a device by its name</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@net: the applicable net namespace</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@name: name to find</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Find an interface by name. This can be called from any</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>context and does its own locking. The returned handle has</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the usage count incremented and the caller must use dev_put() to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>release it when it is no longer needed. %NULL is returned if no</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>matching device is found.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev_get_by_name\">dev_get_by_name</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev_get_by_name_rcu\">dev_get_by_name_rcu</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_hold\">dev_hold</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_get_by_name\">dev_get_by_name</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__dev_get_by_index - find a device by its ifindex</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@net: the applicable net namespace</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ifindex: index of device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Search for an interface by index. Returns %NULL if the device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is not found or a pointer to the device. The device has not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>had its reference counter increased so the caller must be careful</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>about locking. The caller must hold either the RTNL semaphore</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or @dev_base_lock.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#__dev_get_by_index\">__dev_get_by_index</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, int <a class=\"id\" href=\"#ifindex\">ifindex</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#dev_index_hash\">dev_index_hash</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#index_hlist\">index_hlist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a> == <a class=\"id\" href=\"#ifindex\">ifindex</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__dev_get_by_index\">__dev_get_by_index</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_get_by_index_rcu - find a device by its ifindex</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@net: the applicable net namespace</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ifindex: index of device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Search for an interface by index. Returns %NULL if the device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is not found or a pointer to the device. The device has not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>had its reference counter increased so the caller must be careful</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>about locking. The caller must hold RCU lock.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev_get_by_index_rcu\">dev_get_by_index_rcu</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, int <a class=\"id\" href=\"#ifindex\">ifindex</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#dev_index_hash\">dev_index_hash</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#index_hlist\">index_hlist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a> == <a class=\"id\" href=\"#ifindex\">ifindex</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_get_by_index_rcu\">dev_get_by_index_rcu</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_get_by_index - find a device by its ifindex</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@net: the applicable net namespace</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ifindex: index of device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Search for an interface by index. Returns NULL if the device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is not found or a pointer to the device. The device returned has</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>had a reference added and the pointer is safe until the user calls</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_put to indicate they have finished with it.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev_get_by_index\">dev_get_by_index</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, int <a class=\"id\" href=\"#ifindex\">ifindex</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev_get_by_index_rcu\">dev_get_by_index_rcu</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_hold\">dev_hold</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_get_by_index\">dev_get_by_index</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_getbyhwaddr - find a device by its hardware address</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@net: the applicable net namespace</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@type: media type of device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ha: hardware address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Search for an interface by MAC address. Returns NULL if the device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is not found or a pointer to the device. The caller must hold the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>rtnl semaphore. The returned device has not had its ref count increased</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and the caller must therefore be careful about locking</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>BUGS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If the API was consistent this would be __dev_get_by_hwaddr</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev_getbyhwaddr\">dev_getbyhwaddr</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, unsigned short <a class=\"id\" href=\"#type\">type</a>, char *<a class=\"id\" href=\"#ha\">ha</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSERT_RTNL\">ASSERT_RTNL</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_netdev\">for_each_netdev</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#type\">type</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_addr\">dev_addr</a>, <a class=\"id\" href=\"#ha\">ha</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_getbyhwaddr\">dev_getbyhwaddr</a>);", 
"", 
"struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#__dev_getfirstbyhwtype\">__dev_getfirstbyhwtype</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, unsigned short <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSERT_RTNL\">ASSERT_RTNL</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_netdev\">for_each_netdev</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__dev_getfirstbyhwtype\">__dev_getfirstbyhwtype</a>);", 
"", 
"struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev_getfirstbyhwtype\">dev_getfirstbyhwtype</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, unsigned short <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_netdev_rcu\">for_each_netdev_rcu</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_hold\">dev_hold</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_getfirstbyhwtype\">dev_getfirstbyhwtype</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_get_by_flags_rcu - find any device with given flags</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@net: the applicable net namespace</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@if_flags: IFF_* values</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mask: bitmask of bits in if_flags to check</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Search for any interface with the given flags. Returns NULL if a device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is not found or a pointer to the device. Must be called inside</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>rcu_read_lock(), and result refcount is unchanged.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev_get_by_flags_rcu\">dev_get_by_flags_rcu</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, unsigned short <a class=\"id\" href=\"#if_flags\">if_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned short <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, *<a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_netdev_rcu\">for_each_netdev_rcu</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (((<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> ^ <a class=\"id\" href=\"#if_flags\">if_flags</a>) &amp; <a class=\"id\" href=\"#mask\">mask</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_get_by_flags_rcu\">dev_get_by_flags_rcu</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_valid_name - check if name is okay for network device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@name: name string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Network device names need to be valid file names to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to allow sysfs to work.  We also disallow any kind of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>whitespace.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dev_valid_name\">dev_valid_name</a>(const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#name\">name</a> == '\\0')", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#name\">name</a>) >= <a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, \".\") || !<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, \"..\"))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#name\">name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#name\">name</a> == '/' || <a class=\"id\" href=\"#isspace\">isspace</a>(*<a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_valid_name\">dev_valid_name</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
];
xr_frag_insert('l/40/3a98256077705ab8c9a65ba52f378eb6928558.xr', __xr_tmp);
