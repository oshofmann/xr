var __xr_tmp = [
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#memcpy\">memcpy</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_MEMMOVE\">__HAVE_ARCH_MEMMOVE</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * memmove - Copy one area of memory to another</span>", 
"<span class=\"comment\"> * @dest: Where to copy to</span>", 
"<span class=\"comment\"> * @src: Where to copy from</span>", 
"<span class=\"comment\"> * @count: The size of the area.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unlike memcpy(), memmove() copes with overlapping areas.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#memmove\">memmove</a>(void *<a class=\"id\" href=\"#dest\">dest</a>, const void *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#s\">s</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dest\">dest</a> <= <a class=\"id\" href=\"#src\">src</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#dest\">dest</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#src\">src</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tmp\">tmp</a>++ = *<a class=\"id\" href=\"#s\">s</a>++;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#dest\">dest</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> += <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#src\">src</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> += <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*--<a class=\"id\" href=\"#tmp\">tmp</a> = *--<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dest\">dest</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#memmove\">memmove</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_MEMCMP\">__HAVE_ARCH_MEMCMP</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * memcmp - Compare two areas of memory</span>", 
"<span class=\"comment\"> * @cs: One area of memory</span>", 
"<span class=\"comment\"> * @ct: Another area of memory</span>", 
"<span class=\"comment\"> * @count: The size of the area.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#memcmp\">memcmp</a>", 
"int <a class=\"id\" href=\"#memcmp\">memcmp</a>(const void *<a class=\"id\" href=\"#cs\">cs</a>, const void *<a class=\"id\" href=\"#ct\">ct</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned char *<a class=\"id\" href=\"#su1\">su1</a>, *<a class=\"id\" href=\"#su2\">su2</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#su1\">su1</a> = <a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#su2\">su2</a> = <a class=\"id\" href=\"#ct\">ct</a>; 0 &lt; <a class=\"id\" href=\"#count\">count</a>; ++<a class=\"id\" href=\"#su1\">su1</a>, ++<a class=\"id\" href=\"#su2\">su2</a>, <a class=\"id\" href=\"#count\">count</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#res\">res</a> = *<a class=\"id\" href=\"#su1\">su1</a> - *<a class=\"id\" href=\"#su2\">su2</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#memcmp\">memcmp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_MEMSCAN\">__HAVE_ARCH_MEMSCAN</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * memscan - Find a character in an area of memory.</span>", 
"<span class=\"comment\"> * @addr: The memory area</span>", 
"<span class=\"comment\"> * @c: The byte to search for</span>", 
"<span class=\"comment\"> * @size: The size of the area.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * returns the address of the first occurrence of @c, or 1 byte past</span>", 
"<span class=\"comment\"> * the area if @c is not found</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#memscan\">memscan</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#c\">c</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (void *)<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>--;", 
"<span class=\"ts\"/>}", 
"  <span class=\"ts\"/>return (void *)<a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#memscan\">memscan</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRSTR\">__HAVE_ARCH_STRSTR</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strstr - Find the first substring in a %NUL terminated string</span>", 
"<span class=\"comment\"> * @s1: The string to be searched</span>", 
"<span class=\"comment\"> * @s2: The string to search for</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#strstr\">strstr</a>(const char *<a class=\"id\" href=\"#s1\">s1</a>, const char *<a class=\"id\" href=\"#s2\">s2</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#l1\">l1</a>, <a class=\"id\" href=\"#l2\">l2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l2\">l2</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#s2\">s2</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#l2\">l2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return (char *)<a class=\"id\" href=\"#s1\">s1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l1\">l1</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#s1\">s1</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#l1\">l1</a> >= <a class=\"id\" href=\"#l2\">l2</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l1\">l1</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#s1\">s1</a>, <a class=\"id\" href=\"#s2\">s2</a>, <a class=\"id\" href=\"#l2\">l2</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (char *)<a class=\"id\" href=\"#s1\">s1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s1\">s1</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strstr\">strstr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRNSTR\">__HAVE_ARCH_STRNSTR</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strnstr - Find the first substring in a length-limited string</span>", 
"<span class=\"comment\"> * @s1: The string to be searched</span>", 
"<span class=\"comment\"> * @s2: The string to search for</span>", 
"<span class=\"comment\"> * @len: the maximum number of characters to search</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#strnstr\">strnstr</a>(const char *<a class=\"id\" href=\"#s1\">s1</a>, const char *<a class=\"id\" href=\"#s2\">s2</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#l2\">l2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l2\">l2</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#s2\">s2</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#l2\">l2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return (char *)<a class=\"id\" href=\"#s1\">s1</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a> >= <a class=\"id\" href=\"#l2\">l2</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#s1\">s1</a>, <a class=\"id\" href=\"#s2\">s2</a>, <a class=\"id\" href=\"#l2\">l2</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (char *)<a class=\"id\" href=\"#s1\">s1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s1\">s1</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strnstr\">strnstr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_MEMCHR\">__HAVE_ARCH_MEMCHR</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * memchr - Find a character in an area of memory.</span>", 
"<span class=\"comment\"> * @s: The memory area</span>", 
"<span class=\"comment\"> * @c: The byte to search for</span>", 
"<span class=\"comment\"> * @n: The size of the area.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * returns the address of the first occurrence of @c, or %NULL</span>", 
"<span class=\"comment\"> * if @c is not found</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#memchr\">memchr</a>(const void *<a class=\"id\" href=\"#s\">s</a>, int <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned char *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a>-- != 0) {", 
"        <span class=\"ts\"/>if ((unsigned char)<a class=\"id\" href=\"#c\">c</a> == *<a class=\"id\" href=\"#p\">p</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (void *)(<a class=\"id\" href=\"#p\">p</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#memchr\">memchr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/40/f16cf30cdf8f6b4cafcf4bdd75e1f9a66d5cc7.xr', __xr_tmp);
