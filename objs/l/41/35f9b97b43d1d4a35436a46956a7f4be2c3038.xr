var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_SPINLOCK_H\">__LINUX_SPINLOCK_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_SPINLOCK_H\">__LINUX_SPINLOCK_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * include/linux/spinlock.h - generic spinlock/rwlock declarations</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * here's the role of the various spinlock/rwlock related include files:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * on SMP builds:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  asm/spinlock_types.h: contains the arch_spinlock_t/arch_rwlock_t and the</span>", 
"<span class=\"comment\"> *                        initializers</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  linux/spinlock_types.h:</span>", 
"<span class=\"comment\"> *                        defines the generic type and initializers</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  asm/spinlock.h:       contains the arch_spin_*()/etc. lowlevel</span>", 
"<span class=\"comment\"> *                        implementations, mostly inline assembly code</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   (also included on UP-debug builds:)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  linux/spinlock_api_smp.h:</span>", 
"<span class=\"comment\"> *                        contains the prototypes for the _spin_*() APIs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  linux/spinlock.h:     builds the final spin_*() APIs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * on UP builds:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  linux/spinlock_type_up.h:</span>", 
"<span class=\"comment\"> *                        contains the generic, simplified UP spinlock type.</span>", 
"<span class=\"comment\"> *                        (which is an empty structure on non-debug builds)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  linux/spinlock_types.h:</span>", 
"<span class=\"comment\"> *                        defines the generic type and initializers</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  linux/spinlock_up.h:</span>", 
"<span class=\"comment\"> *                        contains the arch_spin_*()/etc. version of UP</span>", 
"<span class=\"comment\"> *                        builds. (which are NOPs on non-debug, non-preempt</span>", 
"<span class=\"comment\"> *                        builds)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   (included on UP-non-debug builds:)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  linux/spinlock_api_up.h:</span>", 
"<span class=\"comment\"> *                        builds the _spin_*() APIs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  linux/spinlock.h:     builds the final spin_*() APIs.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#typecheck\">typecheck</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#preempt\">preempt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#linkage\">linkage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#thread_info\">thread_info</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stringify\">stringify</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bottom_half\">bottom_half</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Must define these before including other files, inline functions need them</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOCK_SECTION_NAME\">LOCK_SECTION_NAME</a> \".text..lock.\"<a class=\"id\" href=\"#KBUILD_BASENAME\">KBUILD_BASENAME</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOCK_SECTION_START\">LOCK_SECTION_START</a>(<a class=\"id\" href=\"#extra\">extra</a>)               \\", 
"        \".subsection 1\\n\\t\"                     \\", 
"        <a class=\"id\" href=\"#extra\">extra</a>                                   \\", 
"        \".ifndef \" <a class=\"id\" href=\"#LOCK_SECTION_NAME\">LOCK_SECTION_NAME</a> \"\\n\\t\"     \\", 
"        <a class=\"id\" href=\"#LOCK_SECTION_NAME\">LOCK_SECTION_NAME</a> \":\\n\\t\"               \\", 
"        \".endif\\n\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOCK_SECTION_END\">LOCK_SECTION_END</a>                        \\", 
"        \".previous\\n\\t\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__lockfunc\">__lockfunc</a> <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#section\">section</a>(\".spinlock.text\")))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Pull the arch_spinlock_t and arch_rwlock_t definitions:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock_types\">spinlock_types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Pull the arch_spin*() functions/declarations (UP-nondebug doesnt need them):</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"# <a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#else", 
"# <a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock_up\">spinlock_up</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SPINLOCK\">CONFIG_DEBUG_SPINLOCK</a>", 
"  extern void <a class=\"id\" href=\"#__raw_spin_lock_init\">__raw_spin_lock_init</a>(<a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>);", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_lock_init\">raw_spin_lock_init</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#__key\">__key</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__raw_spin_lock_init\">__raw_spin_lock_init</a>((<a class=\"id\" href=\"#lock\">lock</a>), #<a class=\"id\" href=\"#lock\">lock</a>, &amp;<a class=\"id\" href=\"#__key\">__key</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_lock_init\">raw_spin_lock_init</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do { *(<a class=\"id\" href=\"#lock\">lock</a>) = <a class=\"id\" href=\"#__RAW_SPIN_LOCK_UNLOCKED\">__RAW_SPIN_LOCK_UNLOCKED</a>(<a class=\"id\" href=\"#lock\">lock</a>); } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_is_locked\">raw_spin_is_locked</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_is_locked\">arch_spin_is_locked</a>(&amp;(<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#raw_lock\">raw_lock</a>)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_GENERIC_LOCKBREAK\">CONFIG_GENERIC_LOCKBREAK</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_is_contended\">raw_spin_is_contended</a>(<a class=\"id\" href=\"#lock\">lock</a>) ((<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#break_lock\">break_lock</a>)", 
"#else", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#arch_spin_is_contended\">arch_spin_is_contended</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_is_contended\">raw_spin_is_contended</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_is_contended\">arch_spin_is_contended</a>(&amp;(<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#raw_lock\">raw_lock</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_is_contended\">raw_spin_is_contended</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/>(((void)(<a class=\"id\" href=\"#lock\">lock</a>), 0))", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/*arch_spin_is_contended*/</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* The lock does not imply full memory barrier. */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ARCH_HAS_SMP_MB_AFTER_LOCK\">ARCH_HAS_SMP_MB_AFTER_LOCK</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#smp_mb__after_lock\">smp_mb__after_lock</a>(void) { <a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * raw_spin_unlock_wait - wait until the spinlock gets unlocked</span>", 
"<span class=\"comment\"> * @lock: the spinlock in question.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_unlock_wait\">raw_spin_unlock_wait</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_unlock_wait\">arch_spin_unlock_wait</a>(&amp;(<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#raw_lock\">raw_lock</a>)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SPINLOCK\">CONFIG_DEBUG_SPINLOCK</a>", 
" extern void <a class=\"id\" href=\"#do_raw_spin_lock\">do_raw_spin_lock</a>(<a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>) <a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#do_raw_spin_lock_flags\">do_raw_spin_lock_flags</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>) <a class=\"id\" href=\"#do_raw_spin_lock\">do_raw_spin_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>)", 
" extern int <a class=\"id\" href=\"#do_raw_spin_trylock\">do_raw_spin_trylock</a>(<a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>);", 
" extern void <a class=\"id\" href=\"#do_raw_spin_unlock\">do_raw_spin_unlock</a>(<a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>) <a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#do_raw_spin_lock\">do_raw_spin_lock</a>(<a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>) <a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquire\">__acquire</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_lock\">arch_spin_lock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#raw_lock\">raw_lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#do_raw_spin_lock_flags\">do_raw_spin_lock_flags</a>(<a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>, unsigned long *<a class=\"id\" href=\"#flags\">flags</a>) <a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquire\">__acquire</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_lock_flags\">arch_spin_lock_flags</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#raw_lock\">raw_lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#do_raw_spin_trylock\">do_raw_spin_trylock</a>(<a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#arch_spin_trylock\">arch_spin_trylock</a>(&amp;(<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#raw_lock\">raw_lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#do_raw_spin_unlock\">do_raw_spin_unlock</a>(<a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>) <a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_unlock\">arch_spin_unlock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#raw_lock\">raw_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__release\">__release</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Define the various spin_lock methods.  Note we define these</span>", 
"<span class=\"comment\"> * regardless of whether CONFIG_SMP or CONFIG_PREEMPT are set. The</span>", 
"<span class=\"comment\"> * various methods are defined as nops in the case they are not</span>", 
"<span class=\"comment\"> * required.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_trylock\">raw_spin_trylock</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__cond_lock\">__cond_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#_raw_spin_trylock\">_raw_spin_trylock</a>(<a class=\"id\" href=\"#lock\">lock</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><a class=\"id\" href=\"#_raw_spin_lock\">_raw_spin_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_lock_nested\">raw_spin_lock_nested</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#subclass\">subclass</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_raw_spin_lock_nested\">_raw_spin_lock_nested</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#subclass\">subclass</a>)", 
"", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_lock_nest_lock\">raw_spin_lock_nest_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#nest_lock\">nest_lock</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/> do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#typecheck\">typecheck</a>(struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> *, &amp;(<a class=\"id\" href=\"#nest_lock\">nest_lock</a>)-><a class=\"id\" href=\"#dep_map\">dep_map</a>);\\", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#_raw_spin_lock_nest_lock\">_raw_spin_lock_nest_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>, &amp;(<a class=\"id\" href=\"#nest_lock\">nest_lock</a>)-><a class=\"id\" href=\"#dep_map\">dep_map</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> } while (0)", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_lock_nested\">raw_spin_lock_nested</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#subclass\">subclass</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_raw_spin_lock\">_raw_spin_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_lock_nest_lock\">raw_spin_lock_nest_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#nest_lock\">nest_lock</a>)<span class=\"ts\"/><a class=\"id\" href=\"#_raw_spin_lock\">_raw_spin_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_DEBUG_SPINLOCK\">CONFIG_DEBUG_SPINLOCK</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#typecheck\">typecheck</a>(unsigned long, <a class=\"id\" href=\"#flags\">flags</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#_raw_spin_lock_irqsave\">_raw_spin_lock_irqsave</a>(<a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_lock_irqsave_nested\">raw_spin_lock_irqsave_nested</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#subclass\">subclass</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#typecheck\">typecheck</a>(unsigned long, <a class=\"id\" href=\"#flags\">flags</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#_raw_spin_lock_irqsave_nested\">_raw_spin_lock_irqsave_nested</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#subclass\">subclass</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_lock_irqsave_nested\">raw_spin_lock_irqsave_nested</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#subclass\">subclass</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#typecheck\">typecheck</a>(unsigned long, <a class=\"id\" href=\"#flags\">flags</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#_raw_spin_lock_irqsave\">_raw_spin_lock_irqsave</a>(<a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#else", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#typecheck\">typecheck</a>(unsigned long, <a class=\"id\" href=\"#flags\">flags</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_raw_spin_lock_irqsave\">_raw_spin_lock_irqsave</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_lock_irqsave_nested\">raw_spin_lock_irqsave_nested</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#subclass\">subclass</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_raw_spin_lock_irq\">_raw_spin_lock_irq</a>(<a class=\"id\" href=\"#lock\">lock</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_lock_bh\">raw_spin_lock_bh</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_raw_spin_lock_bh\">_raw_spin_lock_bh</a>(<a class=\"id\" href=\"#lock\">lock</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_raw_spin_unlock\">_raw_spin_unlock</a>(<a class=\"id\" href=\"#lock\">lock</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><a class=\"id\" href=\"#_raw_spin_unlock_irq\">_raw_spin_unlock_irq</a>(<a class=\"id\" href=\"#lock\">lock</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#typecheck\">typecheck</a>(unsigned long, <a class=\"id\" href=\"#flags\">flags</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_raw_spin_unlock_irqrestore\">_raw_spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_unlock_bh\">raw_spin_unlock_bh</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><a class=\"id\" href=\"#_raw_spin_unlock_bh\">_raw_spin_unlock_bh</a>(<a class=\"id\" href=\"#lock\">lock</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_trylock_bh\">raw_spin_trylock_bh</a>(<a class=\"id\" href=\"#lock\">lock</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__cond_lock\">__cond_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#_raw_spin_trylock_bh\">_raw_spin_trylock_bh</a>(<a class=\"id\" href=\"#lock\">lock</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_trylock_irq\">raw_spin_trylock_irq</a>(<a class=\"id\" href=\"#lock\">lock</a>) \\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>(); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_trylock\">raw_spin_trylock</a>(<a class=\"id\" href=\"#lock\">lock</a>) ? \\", 
"<span class=\"ts\"/>1 : ({ <a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>(); 0;  }); \\", 
"})", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_trylock_irqsave\">raw_spin_trylock_irqsave</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>) \\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_trylock\">raw_spin_trylock</a>(<a class=\"id\" href=\"#lock\">lock</a>) ? \\", 
"<span class=\"ts\"/>1 : ({ <a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>); 0; }); \\", 
"})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * raw_spin_can_lock - would raw_spin_trylock() succeed?</span>", 
"<span class=\"comment\"> * @lock: the spinlock in question.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_spin_can_lock\">raw_spin_can_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/>(!<a class=\"id\" href=\"#raw_spin_is_locked\">raw_spin_is_locked</a>(<a class=\"id\" href=\"#lock\">lock</a>))", 
"", 
"<span class=\"comment\">/* Include rwlock functions */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rwlock\">rwlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Pull the _spin_*()/_read_*()/_write_*() functions/declarations:</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_DEBUG_SPINLOCK\">CONFIG_DEBUG_SPINLOCK</a>)", 
"# <a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock_api_smp\">spinlock_api_smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#else", 
"# <a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock_api_up\">spinlock_api_up</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Map the spin_lock functions to the raw variants for PREEMPT_RT=n</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a> *<a class=\"id\" href=\"#spinlock_check\">spinlock_check</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#rlock\">rlock</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(<a class=\"id\" href=\"#_lock\">_lock</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_check\">spinlock_check</a>(<a class=\"id\" href=\"#_lock\">_lock</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_init\">raw_spin_lock_init</a>(&amp;(<a class=\"id\" href=\"#_lock\">_lock</a>)-><a class=\"id\" href=\"#rlock\">rlock</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#rlock\">rlock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_bh\">raw_spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#rlock\">rlock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#spin_trylock\">spin_trylock</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#raw_spin_trylock\">raw_spin_trylock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#rlock\">rlock</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spin_lock_nested\">spin_lock_nested</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#subclass\">subclass</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_nested\">raw_spin_lock_nested</a>(<a class=\"id\" href=\"#spinlock_check\">spinlock_check</a>(<a class=\"id\" href=\"#lock\">lock</a>), <a class=\"id\" href=\"#subclass\">subclass</a>);<span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spin_lock_nest_lock\">spin_lock_nest_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#nest_lock\">nest_lock</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_nest_lock\">raw_spin_lock_nest_lock</a>(<a class=\"id\" href=\"#spinlock_check\">spinlock_check</a>(<a class=\"id\" href=\"#lock\">lock</a>), <a class=\"id\" href=\"#nest_lock\">nest_lock</a>);<span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#rlock\">rlock</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(<a class=\"id\" href=\"#spinlock_check\">spinlock_check</a>(<a class=\"id\" href=\"#lock\">lock</a>), <a class=\"id\" href=\"#flags\">flags</a>);<span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spin_lock_irqsave_nested\">spin_lock_irqsave_nested</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#subclass\">subclass</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave_nested\">raw_spin_lock_irqsave_nested</a>(<a class=\"id\" href=\"#spinlock_check\">spinlock_check</a>(<a class=\"id\" href=\"#lock\">lock</a>), <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#subclass\">subclass</a>); \\", 
"} while (0)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#rlock\">rlock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_bh\">raw_spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#rlock\">rlock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#rlock\">rlock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#rlock\">rlock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#spin_trylock_bh\">spin_trylock_bh</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#raw_spin_trylock_bh\">raw_spin_trylock_bh</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#rlock\">rlock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#spin_trylock_irq\">spin_trylock_irq</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#raw_spin_trylock_irq\">raw_spin_trylock_irq</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#rlock\">rlock</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spin_trylock_irqsave\">spin_trylock_irqsave</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_trylock_irqsave\">raw_spin_trylock_irqsave</a>(<a class=\"id\" href=\"#spinlock_check\">spinlock_check</a>(<a class=\"id\" href=\"#lock\">lock</a>), <a class=\"id\" href=\"#flags\">flags</a>); \\", 
"})", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#spin_unlock_wait\">spin_unlock_wait</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_wait\">raw_spin_unlock_wait</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#rlock\">rlock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#spin_is_locked\">spin_is_locked</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#raw_spin_is_locked\">raw_spin_is_locked</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#rlock\">rlock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#spin_is_contended\">spin_is_contended</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#raw_spin_is_contended\">raw_spin_is_contended</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#rlock\">rlock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#spin_can_lock\">spin_can_lock</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#raw_spin_can_lock\">raw_spin_can_lock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#rlock\">rlock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_raw_spin_locked\">assert_raw_spin_locked</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#rlock\">rlock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Pull the atomic_t declaration:</span>", 
"<span class=\"comment\"> * (asm-mips/atomic.h needs above definitions)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic_dec_and_lock - lock on reaching reference count zero</span>", 
"<span class=\"comment\"> * @atomic: the atomic counter</span>", 
"<span class=\"comment\"> * @lock: the spinlock in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Decrements @atomic by 1.  If the result is 0, returns true and locks</span>", 
"<span class=\"comment\"> * @lock.  Returns false for all other cases.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#_atomic_dec_and_lock\">_atomic_dec_and_lock</a>(<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#atomic\">atomic</a>, <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#atomic_dec_and_lock\">atomic_dec_and_lock</a>(<a class=\"id\" href=\"#atomic\">atomic</a>, <a class=\"id\" href=\"#lock\">lock</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__cond_lock\">__cond_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#_atomic_dec_and_lock\">_atomic_dec_and_lock</a>(<a class=\"id\" href=\"#atomic\">atomic</a>, <a class=\"id\" href=\"#lock\">lock</a>))", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __LINUX_SPINLOCK_H */</span>", 
];
xr_frag_insert('l/41/35f9b97b43d1d4a35436a46956a7f4be2c3038.xr', __xr_tmp);
