var __xr_tmp = [
"<span class=\"comment\"> *<span class=\"ts\"/>granted when the attributes are changed.  This is called immediately</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>before commit_creds().</span>", 
"<span class=\"comment\"> * @bprm_committed_creds:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Tidy up after the installation of the new security attributes of a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>process being transformed by an execve operation.  The new credentials</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>have, by this point, been set to @current-&gt;cred.  @bprm points to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>linux_binprm structure.  This hook is a good place to perform state</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>changes on the process such as clearing out non-inheritable signal</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>state.  This is called immediately after commit_creds().</span>", 
"<span class=\"comment\"> * @bprm_secureexec:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return a boolean value (0 or 1) indicating whether a \"secure exec\"</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is required.  The flag is passed in the auxiliary table</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on the initial stack to the ELF interpreter to indicate whether libc</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>should enable secure mode.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bprm contains the linux_binprm structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Security hooks for filesystem operations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @sb_alloc_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate and attach a security structure to the sb-&gt;s_security field.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The s_security field is initialized to NULL when the structure is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>allocated.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sb contains the super_block structure to be modified.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if operation was successful.</span>", 
"<span class=\"comment\"> * @sb_free_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Deallocate and clear the sb-&gt;s_security field.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sb contains the super_block structure to be modified.</span>", 
"<span class=\"comment\"> * @sb_statfs:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before obtaining filesystem statistics for the @mnt</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>mountpoint.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry is a handle on the superblock for the filesystem.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @sb_mount:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before an object specified by @dev_name is mounted on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the mount point named by @nd.  For an ordinary mount, @dev_name</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>identifies a device if the file system type requires a device.  For a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>remount (@flags &amp; MS_REMOUNT), @dev_name is irrelevant.  For a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>loopback/bind mount (@flags &amp; MS_BIND), @dev_name identifies the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pathname of the object being mounted.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev_name contains the name for object being mounted.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@path contains the path for mount point object.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@type contains the filesystem type.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flags contains the mount flags.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@data contains the filesystem-specific data.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @sb_copy_data:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allow mount option data to be copied prior to parsing by the filesystem,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>so that the security module can extract security-specific mount</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>options cleanly (a filesystem may modify the data e.g. with strsep()).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This also allows the original mount data to be stripped of security-</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>specific options to avoid having to make filesystems aware of them.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@type the type of filesystem being mounted.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@orig the original mount data copied from userspace.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@copy copied data which will be passed to the security module.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns 0 if the copy was successful.</span>", 
"<span class=\"comment\"> * @sb_umount:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before the @mnt file system is unmounted.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mnt contains the mounted file system.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flags contains the unmount flags, e.g. MNT_FORCE.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @sb_pivotroot:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before pivoting the root filesystem.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@old_path contains the path for the new location of the current root (put_old).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new_path contains the path for the new root (new_root).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @sb_set_mnt_opts:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Set the security relevant mount options used for a superblock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sb the superblock to set security mount options for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@opts binary data structure containing all lsm mount data</span>", 
"<span class=\"comment\"> * @sb_clone_mnt_opts:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Copy all security options from a given superblock to another</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@oldsb old superblock which contain information to clone</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@newsb new superblock which needs filled in</span>", 
"<span class=\"comment\"> * @sb_parse_opts_str:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Parse a string of security data filling in the opts structure</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@options string containing all mount options known by the LSM</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@opts binary data structure usable by the LSM</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Security hooks for inode operations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @inode_alloc_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate and attach a security structure to @inode-&gt;i_security.  The</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>i_security field is initialized to NULL when the inode structure is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>allocated.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode contains the inode structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if operation was successful.</span>", 
"<span class=\"comment\"> * @inode_free_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode contains the inode structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Deallocate the inode security structure and set @inode-&gt;i_security to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NULL.</span>", 
"<span class=\"comment\"> * @inode_init_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Obtain the security attribute name suffix and value to set on a newly</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>created inode and set up the incore security field for the new inode.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This hook is called by the fs code as part of the inode creation</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>transaction and provides for atomic labeling of the inode, unlike</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the post_create/mkdir/... hooks called by the VFS.  The hook function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is expected to allocate the name and value via kmalloc, with the caller</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>being responsible for calling kfree after using them.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If the security module does not use security attributes or does</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>not wish to put a security attribute on this particular inode,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>then it should return -EOPNOTSUPP to skip this processing.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode contains the inode structure of the newly created inode.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dir contains the inode structure of the parent directory.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@name will be set to the allocated name suffix (e.g. selinux).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@value will be set to the allocated attribute value.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len will be set to the length of the value.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns 0 if @name and @value have been successfully set,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>-EOPNOTSUPP if no security attribute is needed, or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>-ENOMEM on memory allocation failure.</span>", 
"<span class=\"comment\"> * @inode_create:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission to create a regular file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dir contains inode structure of the parent of the new file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry contains the dentry structure for the file to be created.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mode contains the file mode of the file to be created.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @inode_link:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before creating a new hard link to a file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@old_dentry contains the dentry structure for an existing link to the file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dir contains the inode structure of the parent directory of the new link.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new_dentry contains the dentry structure for the new link.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @path_link:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before creating a new hard link to a file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@old_dentry contains the dentry structure for an existing link</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to the file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new_dir contains the path structure of the parent directory of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the new link.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new_dentry contains the dentry structure for the new link.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @inode_unlink:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check the permission to remove a hard link to a file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dir contains the inode structure of parent directory of the file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry contains the dentry structure for file to be unlinked.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @path_unlink:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check the permission to remove a hard link to a file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dir contains the path structure of parent directory of the file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry contains the dentry structure for file to be unlinked.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @inode_symlink:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check the permission to create a symbolic link to a file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dir contains the inode structure of parent directory of the symbolic link.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry contains the dentry structure of the symbolic link.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@old_name contains the pathname of file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @path_symlink:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check the permission to create a symbolic link to a file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dir contains the path structure of parent directory of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the symbolic link.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry contains the dentry structure of the symbolic link.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@old_name contains the pathname of file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @inode_mkdir:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permissions to create a new directory in the existing directory</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>associated with inode strcture @dir.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dir containst the inode structure of parent of the directory to be created.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry contains the dentry structure of new directory.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mode contains the mode of new directory.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @path_mkdir:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permissions to create a new directory in the existing directory</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>associated with path strcture @path.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dir containst the path structure of parent of the directory</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to be created.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry contains the dentry structure of new directory.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mode contains the mode of new directory.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @inode_rmdir:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check the permission to remove a directory.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dir contains the inode structure of parent of the directory to be removed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry contains the dentry structure of directory to be removed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @path_rmdir:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check the permission to remove a directory.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dir contains the path structure of parent of the directory to be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>removed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry contains the dentry structure of directory to be removed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @inode_mknod:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permissions when creating a special file (or a socket or a fifo</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>file created via the mknod system call).  Note that if mknod operation</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is being done for a regular file, then the create hook will be called</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and not this hook.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dir contains the inode structure of parent of the new file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry contains the dentry structure of the new file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mode contains the mode of the new file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev contains the device number.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @path_mknod:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permissions when creating a file. Note that this hook is called</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>even if mknod operation is being done for a regular file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dir contains the path structure of parent of the new file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry contains the dentry structure of the new file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mode contains the mode of the new file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev contains the undecoded device number. Use new_decode_dev() to get</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the decoded device number.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @inode_rename:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check for permission to rename a file or directory.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@old_dir contains the inode structure for parent of the old link.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@old_dentry contains the dentry structure of the old link.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new_dir contains the inode structure for parent of the new link.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new_dentry contains the dentry structure of the new link.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @path_rename:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check for permission to rename a file or directory.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@old_dir contains the path structure for parent of the old link.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@old_dentry contains the dentry structure of the old link.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new_dir contains the path structure for parent of the new link.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new_dentry contains the dentry structure of the new link.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @path_chmod:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check for permission to change DAC's permission of a file or directory.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry contains the dentry structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mnt contains the vfsmnt structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mode contains DAC's mode.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @path_chown:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check for permission to change owner/group of a file or directory.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@path contains the path structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@uid contains new owner's ID.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gid contains new group's ID.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @path_chroot:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check for permission to change root directory.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@path contains the path structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @inode_readlink:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check the permission to read the symbolic link.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry contains the dentry structure for the file link.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @inode_follow_link:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission to follow a symbolic link when looking up a pathname.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry contains the dentry structure for the link.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nd contains the nameidata structure for the parent directory.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @inode_permission:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before accessing an inode.  This hook is called by the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>existing Linux permission function, so a security module can use it to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>provide additional checking for existing Linux permission checks.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Notice that this hook is called when a file is opened (as well as many</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>other operations), whereas the file_security_ops permission hook is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>called when the actual read/write operations are performed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode contains the inode structure to check.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mask contains the permission mask.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nd contains the nameidata (may be NULL).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @inode_setattr:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before setting file attributes.  Note that the kernel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>call to notify_change is performed from several locations, whenever</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>file attributes change (such as when a file is truncated, chown/chmod</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>operations, transferring disk quotas, etc).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry contains the dentry structure for the file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@attr is the iattr structure containing the new file attributes.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @path_truncate:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before truncating a file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@path contains the path structure for the file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @inode_getattr:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before obtaining file attributes.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mnt is the vfsmount where the dentry was looked up</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry contains the dentry structure for the file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @inode_setxattr:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before setting the extended attributes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@value identified by @name for @dentry.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @inode_post_setxattr:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Update inode security field after successful setxattr operation.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@value identified by @name for @dentry.</span>", 
"<span class=\"comment\"> * @inode_getxattr:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before obtaining the extended attributes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>identified by @name for @dentry.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @inode_listxattr:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before obtaining the list of extended attribute</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>names for @dentry.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @inode_removexattr:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before removing the extended attribute</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>identified by @name for @dentry.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @inode_getsecurity:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Retrieve a copy of the extended attribute representation of the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>security label associated with @name for @inode via @buffer.  Note that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@name is the remainder of the attribute name after the security prefix</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>has been removed. @alloc is used to specify of the call should return a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>value via the buffer or just the value length Return size of buffer on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>success.</span>", 
"<span class=\"comment\"> * @inode_setsecurity:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Set the security label associated with @name for @inode from the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>extended attribute value @value.  @size indicates the size of the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@value in bytes.  @flags may be XATTR_CREATE, XATTR_REPLACE, or 0.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note that @name is the remainder of the attribute name after the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>security. prefix has been removed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 on success.</span>", 
"<span class=\"comment\"> * @inode_listsecurity:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Copy the extended attribute names for the security labels</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>associated with @inode into @buffer.  The maximum size of @buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is specified by @buffer_size.  @buffer may be NULL to request</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the size of the buffer required.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns number of bytes used/required on success.</span>", 
"<span class=\"comment\"> * @inode_need_killpriv:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called when an inode has been changed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry is the dentry being changed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return &lt;0 on error to abort the inode change operation.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if inode_killpriv does not need to be called.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return &gt;0 if inode_killpriv does need to be called.</span>", 
"<span class=\"comment\"> * @inode_killpriv:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The setuid bit is being removed.  Remove similar security labels.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called with the dentry-&gt;d_inode-&gt;i_mutex held.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry is the dentry being changed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 on success.  If error is returned, then the operation</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>causing setuid bit removal is failed.</span>", 
"<span class=\"comment\"> * @inode_getsecid:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Get the secid associated with the node.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode contains a pointer to the inode.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@secid contains a pointer to the location where result will be saved.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>In case of failure, @secid will be set to zero.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Security hooks for file operations</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @file_permission:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check file permissions before accessing an open file.  This hook is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>called by various operations that read or write files.  A security</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>module can use this hook to perform additional checking on these</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>operations, e.g.  to revalidate permissions on use to support privilege</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>bracketing or policy changes.  Notice that this hook is used when the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>actual read/write operations are performed, whereas the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>inode_security_ops hook is called when a file is opened (as well as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>many other operations).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Caveat:  Although this hook can be used to revalidate permissions for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>various system call operations that read or write files, it does not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>address the revalidation of permissions for memory-mapped files.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Security modules must handle this separately if they need such</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>revalidation.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@file contains the file structure being accessed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mask contains the requested permissions.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @file_alloc_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate and attach a security structure to the file-&gt;f_security field.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The security field is initialized to NULL when the structure is first</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>created.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@file contains the file structure to secure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if the hook is successful and permission is granted.</span>", 
"<span class=\"comment\"> * @file_free_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Deallocate and free any security structures stored in file-&gt;f_security.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@file contains the file structure being modified.</span>", 
"<span class=\"comment\"> * @file_ioctl:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@file contains the file structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd contains the operation to perform.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@arg contains the operational arguments.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission for an ioctl operation on @file.  Note that @arg can</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sometimes represents a user space pointer; in other cases, it may be a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>simple integer value.  When @arg represents a user space pointer, it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>should never be used by the security module.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @file_mmap :</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permissions for a mmap operation.  The @file may be NULL, e.g.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if mapping anonymous memory.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@file contains the file structure for file to map (may be NULL).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@reqprot contains the protection requested by the application.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@prot contains the protection that will be applied by the kernel.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flags contains the operational flags.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @file_mprotect:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permissions before changing memory access permissions.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@vma contains the memory region to modify.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@reqprot contains the protection requested by the application.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@prot contains the protection that will be applied by the kernel.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @file_lock:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before performing file locking operations.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note: this hook mediates both flock and fcntl style locks.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@file contains the file structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd contains the posix-translated lock operation to perform</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(e.g. F_RDLCK, F_WRLCK).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @file_fcntl:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before allowing the file operation specified by @cmd</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from being performed on the file @file.  Note that @arg can sometimes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>represents a user space pointer; in other cases, it may be a simple</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>integer value.  When @arg represents a user space pointer, it should</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>never be used by the security module.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@file contains the file structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd contains the operation to be performed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@arg contains the operational arguments.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @file_set_fowner:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Save owner security information (typically from current-&gt;security) in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>file-&gt;f_security for later use by the send_sigiotask hook.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@file contains the file structure to update.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 on success.</span>", 
"<span class=\"comment\"> * @file_send_sigiotask:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission for the file owner @fown to send SIGIO or SIGURG to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>process @tsk.  Note that this hook is sometimes called from interrupt.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note that the fown_struct, @fown, is never outside the context of a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>struct file, so the file structure (and associated security information)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>can always be obtained:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>container_of(fown, struct file, f_owner)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tsk contains the structure of task receiving signal.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@fown contains the file owner information.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sig is the signal that will be sent.  When 0, kernel sends SIGIO.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @file_receive:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This hook allows security modules to control the ability of a process</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to receive an open file descriptor via socket IPC.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@file contains the file structure being received.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Security hook for dentry</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @dentry_open</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Save open-time permission checking state for later use upon</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>file_permission, and recheck access if anything has changed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>since inode_permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Security hooks for task operations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @task_create:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before creating a child process.  See the clone(2)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>manual page for definitions of the @clone_flags.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@clone_flags contains the flags indicating what should be shared.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @cred_alloc_blank:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cred points to the credentials.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gfp indicates the atomicity of any memory allocations.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Only allocate sufficient memory and attach to @cred such that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cred_transfer() will not get ENOMEM.</span>", 
"<span class=\"comment\"> * @cred_free:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cred points to the credentials.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Deallocate and clear the cred-&gt;security field in a set of credentials.</span>", 
"<span class=\"comment\"> * @cred_prepare:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new points to the new credentials.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@old points to the original credentials.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gfp indicates the atomicity of any memory allocations.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Prepare a new set of credentials by copying the data from the old set.</span>", 
"<span class=\"comment\"> * @cred_transfer:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new points to the new credentials.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@old points to the original credentials.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Transfer data from original creds to new creds</span>", 
"<span class=\"comment\"> * @kernel_act_as:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Set the credentials for a kernel service to act as (subjective context).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new points to the credentials to be modified.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@secid specifies the security ID to be set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The current task must be the one that nominated @secid.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if successful.</span>", 
"<span class=\"comment\"> * @kernel_create_files_as:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Set the file creation context in a set of credentials to be the same as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the objective context of the specified inode.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new points to the credentials to be modified.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode points to the inode to use as a reference.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The current task must be the one that nominated @inode.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if successful.</span>", 
"<span class=\"comment\"> * @kernel_module_request:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Ability to trigger the kernel to automatically upcall to userspace for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>userspace to load a kernel module with the given name.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@kmod_name name of the module requested by the kernel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if successful.</span>", 
"<span class=\"comment\"> * @task_fix_setuid:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Update the module's state after setting one or more of the user</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>identity attributes of the current process.  The @flags parameter</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>indicates which of the set*uid system calls invoked this hook.  If</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new is the set of credentials that will be installed.  Modifications</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>should be made to this rather than to @current-&gt;cred.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@old is the set of credentials that are being replaces</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flags contains one of the LSM_SETID_* values.</span>", 
];
xr_frag_insert('l/41/8958a644c0d7d0d56d2f52ff688f3a445cc665.xr', __xr_tmp);
