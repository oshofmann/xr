var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_safe\">hlist_for_each_entry_safe</a>(<a class=\"id\" href=\"#ri\">ri</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#empty_rp\">empty_rp</a>, <a class=\"id\" href=\"#hlist\">hlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del\">hlist_del</a>(&amp;<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ri\">ri</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#free_rp_inst\">free_rp_inst</a>(struct <a class=\"id\" href=\"#kretprobe\">kretprobe</a> *<a class=\"id\" href=\"#rp\">rp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kretprobe_instance\">kretprobe_instance</a> *<a class=\"id\" href=\"#ri\">ri</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#pos\">pos</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_safe\">hlist_for_each_entry_safe</a>(<a class=\"id\" href=\"#ri\">ri</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#free_instances\">free_instances</a>, <a class=\"id\" href=\"#hlist\">hlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del\">hlist_del</a>(&amp;<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ri\">ri</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#cleanup_rp_inst\">cleanup_rp_inst</a>(struct <a class=\"id\" href=\"#kretprobe\">kretprobe</a> *<a class=\"id\" href=\"#rp\">rp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kretprobe_instance\">kretprobe_instance</a> *<a class=\"id\" href=\"#ri\">ri</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#pos\">pos</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No race here */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#hash\">hash</a> = 0; <a class=\"id\" href=\"#hash\">hash</a> &lt; <a class=\"id\" href=\"#KPROBE_TABLE_SIZE\">KPROBE_TABLE_SIZE</a>; <a class=\"id\" href=\"#hash\">hash</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kretprobe_table_lock\">kretprobe_table_lock</a>(<a class=\"id\" href=\"#hash\">hash</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#kretprobe_inst_table\">kretprobe_inst_table</a>[<a class=\"id\" href=\"#hash\">hash</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_safe\">hlist_for_each_entry_safe</a>(<a class=\"id\" href=\"#ri\">ri</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#hlist\">hlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#rp\">rp</a> == <a class=\"id\" href=\"#rp\">rp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#rp\">rp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kretprobe_table_unlock\">kretprobe_table_unlock</a>(<a class=\"id\" href=\"#hash\">hash</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_rp_inst\">free_rp_inst</a>(<a class=\"id\" href=\"#rp\">rp</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">* Add the new probe to ap-&gt;list. Fail if this is the</span>", 
"<span class=\"comment\">* second jprobe at the address - two jprobes can't coexist</span>", 
"<span class=\"comment\">*/</span>", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#add_new_kprobe\">add_new_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#ap\">ap</a>, struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#kprobe_gone\">kprobe_gone</a>(<a class=\"id\" href=\"#ap\">ap</a>) || <a class=\"id\" href=\"#kprobe_gone\">kprobe_gone</a>(<a class=\"id\" href=\"#p\">p</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#break_handler\">break_handler</a> || <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#post_handler\">post_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unoptimize_kprobe\">unoptimize_kprobe</a>(<a class=\"id\" href=\"#ap\">ap</a>);<span class=\"ts\"/><span class=\"comment\">/* Fall back to normal kprobe */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#break_handler\">break_handler</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#break_handler\">break_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail_rcu\">list_add_tail_rcu</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#break_handler\">break_handler</a> = <a class=\"id\" href=\"#aggr_break_handler\">aggr_break_handler</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#post_handler\">post_handler</a> && !<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#post_handler\">post_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#post_handler\">post_handler</a> = <a class=\"id\" href=\"#aggr_post_handler\">aggr_post_handler</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(<a class=\"id\" href=\"#ap\">ap</a>) && !<a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#KPROBE_FLAG_DISABLED\">KPROBE_FLAG_DISABLED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#kprobes_all_disarmed\">kprobes_all_disarmed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Arm the breakpoint again. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__arm_kprobe\">__arm_kprobe</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Fill in the required fields of the \"manager kprobe\". Replace the</span>", 
"<span class=\"comment\"> * earlier kprobe in the hlist with the manager kprobe</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#init_aggr_kprobe\">init_aggr_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#ap\">ap</a>, struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy p's insn slot to ap */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copy_kprobe\">copy_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_insn_slot\">flush_insn_slot</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; ~<a class=\"id\" href=\"#KPROBE_FLAG_OPTIMIZED\">KPROBE_FLAG_OPTIMIZED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pre_handler\">pre_handler</a> = <a class=\"id\" href=\"#aggr_pre_handler\">aggr_pre_handler</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#fault_handler\">fault_handler</a> = <a class=\"id\" href=\"#aggr_fault_handler\">aggr_fault_handler</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* We don't care the kprobe which has gone. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#post_handler\">post_handler</a> && !<a class=\"id\" href=\"#kprobe_gone\">kprobe_gone</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#post_handler\">post_handler</a> = <a class=\"id\" href=\"#aggr_post_handler\">aggr_post_handler</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#break_handler\">break_handler</a> && !<a class=\"id\" href=\"#kprobe_gone\">kprobe_gone</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#break_handler\">break_handler</a> = <a class=\"id\" href=\"#aggr_break_handler\">aggr_break_handler</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_NODE\">INIT_HLIST_NODE</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_replace_rcu\">hlist_replace_rcu</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#hlist\">hlist</a>, &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the second or subsequent kprobe at the address - handle</span>", 
"<span class=\"comment\"> * the intricacies</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#register_aggr_kprobe\">register_aggr_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#old_p\">old_p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#old_p\">old_p</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kprobe_aggrprobe\">kprobe_aggrprobe</a>(<a class=\"id\" href=\"#old_p\">old_p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If old_p is not an aggr_kprobe, create new aggr_kprobe. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#alloc_aggr_kprobe\">alloc_aggr_kprobe</a>(<a class=\"id\" href=\"#old_p\">old_p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ap\">ap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_aggr_kprobe\">init_aggr_kprobe</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#old_p\">old_p</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kprobe_gone\">kprobe_gone</a>(<a class=\"id\" href=\"#ap\">ap</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Attempting to insert new probe at the same location that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * had a probe in the module vaddr area which already</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * freed. So, the instruction slot has already been</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * released. We need a new slot for the new probe.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#arch_prepare_kprobe\">arch_prepare_kprobe</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Even if fail to allocate new slot, don't need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * free aggr_probe. It will be used next time, or</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * freed by unregister_kprobe.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Prepare optimized instructions if possible. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_optimized_kprobe\">prepare_optimized_kprobe</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Clear gone flag to prevent allocating new slot again, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * set disabled flag because it is not armed yet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> = (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; ~<a class=\"id\" href=\"#KPROBE_FLAG_GONE\">KPROBE_FLAG_GONE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    | <a class=\"id\" href=\"#KPROBE_FLAG_DISABLED\">KPROBE_FLAG_DISABLED</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy ap's insn slot to p */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copy_kprobe\">copy_kprobe</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#add_new_kprobe\">add_new_kprobe</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Try to disable aggr_kprobe, and return 1 if succeeded.*/</span>", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#try_to_disable_aggr_kprobe\">try_to_disable_aggr_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#kp\">kp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#kp\">kp</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(<a class=\"id\" href=\"#kp\">kp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * There is an active probe on the list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We can't disable aggr_kprobe.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#KPROBE_FLAG_DISABLED\">KPROBE_FLAG_DISABLED</a>;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#in_kprobes_functions\">in_kprobes_functions</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe_blackpoint\">kprobe_blackpoint</a> *<a class=\"id\" href=\"#kb\">kb</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> >= (unsigned long)<a class=\"id\" href=\"#__kprobes_text_start\">__kprobes_text_start</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#addr\">addr</a> &lt; (unsigned long)<a class=\"id\" href=\"#__kprobes_text_end\">__kprobes_text_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If there exists a kprobe_blacklist, verify and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fail any probe registration in the prohibited area</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#kb\">kb</a> = <a class=\"id\" href=\"#kprobe_blacklist\">kprobe_blacklist</a>; <a class=\"id\" href=\"#kb\">kb</a>-><a class=\"id\" href=\"#name\">name</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#kb\">kb</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kb\">kb</a>-><a class=\"id\" href=\"#start_addr\">start_addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#kb\">kb</a>-><a class=\"id\" href=\"#start_addr\">start_addr</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#addr\">addr</a> &lt; (<a class=\"id\" href=\"#kb\">kb</a>-><a class=\"id\" href=\"#start_addr\">start_addr</a> + <a class=\"id\" href=\"#kb\">kb</a>-><a class=\"id\" href=\"#range\">range</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If we have a symbol_name argument, look it up and add the offset field</span>", 
"<span class=\"comment\"> * to it. This way, we can specify a relative address to a symbol.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a> *<a class=\"id\" href=\"#kprobe_addr\">kprobe_addr</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#symbol_name\">symbol_name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kprobe_lookup_name\">kprobe_lookup_name</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#symbol_name\">symbol_name</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *)(((char *)<a class=\"id\" href=\"#addr\">addr</a>) + <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#offset\">offset</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Check passed kprobe is valid and return kprobe in kprobe_table. */</span>", 
"static struct <a class=\"id\" href=\"#kprobe\">kprobe</a> * <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#__get_valid_kprobe\">__get_valid_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#old_p\">old_p</a>, *<a class=\"id\" href=\"#list_p\">list_p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_p\">old_p</a> = <a class=\"id\" href=\"#get_kprobe\">get_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#old_p\">old_p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#old_p\">old_p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#list_p\">list_p</a>, &amp;<a class=\"id\" href=\"#old_p\">old_p</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_p\">list_p</a> == <a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* kprobe p is a valid probe */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#valid\">valid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#valid\">valid</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#old_p\">old_p</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Return error if the kprobe is being re-registered */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#check_kprobe_rereg\">check_kprobe_rereg</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#old_p\">old_p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_p\">old_p</a> = <a class=\"id\" href=\"#__get_valid_kprobe\">__get_valid_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_p\">old_p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#register_kprobe\">register_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#old_p\">old_p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#probed_mod\">probed_mod</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *<a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#kprobe_addr\">kprobe_addr</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#check_kprobe_rereg\">check_kprobe_rereg</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kernel_text_address\">kernel_text_address</a>((unsigned long) <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#in_kprobes_functions\">in_kprobes_functions</a>((unsigned long) <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ftrace_text_reserved\">ftrace_text_reserved</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* User can pass only KPROBE_FLAG_DISABLED to register_kprobe */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &= <a class=\"id\" href=\"#KPROBE_FLAG_DISABLED\">KPROBE_FLAG_DISABLED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check if are we probing a module.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#probed_mod\">probed_mod</a> = <a class=\"id\" href=\"#__module_text_address\">__module_text_address</a>((unsigned long) <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#probed_mod\">probed_mod</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We must hold a refcount of the probed module while updating</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * its code to prohibit unexpected unloading.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#probed_mod\">probed_mod</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the module freed .init.text, we couldn't insert</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * kprobes in there.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#within_module_init\">within_module_init</a>((unsigned long)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#probed_mod\">probed_mod</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#probed_mod\">probed_mod</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#MODULE_STATE_COMING\">MODULE_STATE_COMING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#probed_mod\">probed_mod</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#nmissed\">nmissed</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();<span class=\"ts\"/><span class=\"comment\">/* For avoiding text_mutex deadlock. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_p\">old_p</a> = <a class=\"id\" href=\"#get_kprobe\">get_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_p\">old_p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Since this may unoptimize old_p, locking text_mutex. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_aggr_kprobe\">register_aggr_kprobe</a>(<a class=\"id\" href=\"#old_p\">old_p</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#arch_prepare_kprobe\">arch_prepare_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_NODE\">INIT_HLIST_NODE</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head_rcu\">hlist_add_head_rcu</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#hlist\">hlist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#kprobe_table\">kprobe_table</a>[<a class=\"id\" href=\"#hash_ptr\">hash_ptr</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#KPROBE_HASH_BITS\">KPROBE_HASH_BITS</a>)]);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kprobes_all_disarmed\">kprobes_all_disarmed</a> && !<a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__arm_kprobe\">__arm_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Try to optimize kprobe */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#try_to_optimize_kprobe\">try_to_optimize_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#probed_mod\">probed_mod</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#probed_mod\">probed_mod</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#register_kprobe\">register_kprobe</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unregister a kprobe without a scheduler synchronization.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#__unregister_kprobe_top\">__unregister_kprobe_top</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#old_p\">old_p</a>, *<a class=\"id\" href=\"#list_p\">list_p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_p\">old_p</a> = <a class=\"id\" href=\"#__get_valid_kprobe\">__get_valid_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_p\">old_p</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_p\">old_p</a> == <a class=\"id\" href=\"#p\">p</a> ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#kprobe_aggrprobe\">kprobe_aggrprobe</a>(<a class=\"id\" href=\"#old_p\">old_p</a>) &&", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#list_is_singular\">list_is_singular</a>(&amp;<a class=\"id\" href=\"#old_p\">old_p</a>-><a class=\"id\" href=\"#list\">list</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Only probe on the hash list. Disarm only if kprobes are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * enabled and not gone - otherwise, the breakpoint would</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * already have been removed. We save on flushing icache.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#kprobes_all_disarmed\">kprobes_all_disarmed</a> && !<a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(<a class=\"id\" href=\"#old_p\">old_p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disarm_kprobe\">disarm_kprobe</a>(<a class=\"id\" href=\"#old_p\">old_p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_rcu\">hlist_del_rcu</a>(&amp;<a class=\"id\" href=\"#old_p\">old_p</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#break_handler\">break_handler</a> && !<a class=\"id\" href=\"#kprobe_gone\">kprobe_gone</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_p\">old_p</a>-><a class=\"id\" href=\"#break_handler\">break_handler</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#post_handler\">post_handler</a> && !<a class=\"id\" href=\"#kprobe_gone\">kprobe_gone</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#list_p\">list_p</a>, &amp;<a class=\"id\" href=\"#old_p\">old_p</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#list_p\">list_p</a> != <a class=\"id\" href=\"#p\">p</a>) && (<a class=\"id\" href=\"#list_p\">list_p</a>-><a class=\"id\" href=\"#post_handler\">post_handler</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#noclean\">noclean</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_p\">old_p</a>-><a class=\"id\" href=\"#post_handler\">post_handler</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#noclean\">noclean</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(<a class=\"id\" href=\"#old_p\">old_p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_to_disable_aggr_kprobe\">try_to_disable_aggr_kprobe</a>(<a class=\"id\" href=\"#old_p\">old_p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#kprobes_all_disarmed\">kprobes_all_disarmed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(<a class=\"id\" href=\"#old_p\">old_p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disarm_kprobe\">disarm_kprobe</a>(<a class=\"id\" href=\"#old_p\">old_p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Try to optimize this probe again */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#optimize_kprobe\">optimize_kprobe</a>(<a class=\"id\" href=\"#old_p\">old_p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#__unregister_kprobe_bottom\">__unregister_kprobe_bottom</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#old_p\">old_p</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_remove_kprobe\">arch_remove_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#list_is_singular\">list_is_singular</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* \"p\" is the last child of an aggr_kprobe */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_p\">old_p</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#kprobe\">kprobe</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_remove_kprobe\">arch_remove_kprobe</a>(<a class=\"id\" href=\"#old_p\">old_p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_aggr_kprobe\">free_aggr_kprobe</a>(<a class=\"id\" href=\"#old_p\">old_p</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#register_kprobes\">register_kprobes</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> **<a class=\"id\" href=\"#kps\">kps</a>, int <a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num\">num</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_kprobe\">register_kprobe</a>(<a class=\"id\" href=\"#kps\">kps</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_kprobes\">unregister_kprobes</a>(<a class=\"id\" href=\"#kps\">kps</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#register_kprobes\">register_kprobes</a>);", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#unregister_kprobe\">unregister_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_kprobes\">unregister_kprobes</a>(&amp;<a class=\"id\" href=\"#p\">p</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#unregister_kprobe\">unregister_kprobe</a>);", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#unregister_kprobes\">unregister_kprobes</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> **<a class=\"id\" href=\"#kps\">kps</a>, int <a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num\">num</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__unregister_kprobe_top\">__unregister_kprobe_top</a>(<a class=\"id\" href=\"#kps\">kps</a>[<a class=\"id\" href=\"#i\">i</a>]) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kps\">kps</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kps\">kps</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__unregister_kprobe_bottom\">__unregister_kprobe_bottom</a>(<a class=\"id\" href=\"#kps\">kps</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#unregister_kprobes\">unregister_kprobes</a>);", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#kprobe_exceptions_nb\">kprobe_exceptions_nb</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#kprobe_exceptions_notify\">kprobe_exceptions_notify</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#priority\">priority</a> = 0x7fffffff <span class=\"comment\">/* we need to be notified first */</span>", 
"};", 
"", 
"unsigned long <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#arch_deref_entry_point\">arch_deref_entry_point</a>(void *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>return (unsigned long)<a class=\"id\" href=\"#entry\">entry</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#register_jprobes\">register_jprobes</a>(struct <a class=\"id\" href=\"#jprobe\">jprobe</a> **<a class=\"id\" href=\"#jps\">jps</a>, int <a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#jprobe\">jprobe</a> *<a class=\"id\" href=\"#jp\">jp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num\">num</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jp\">jp</a> = <a class=\"id\" href=\"#jps\">jps</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#arch_deref_entry_point\">arch_deref_entry_point</a>(<a class=\"id\" href=\"#jp\">jp</a>-><a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#kernel_text_address\">kernel_text_address</a>(<a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Todo: Verify probepoint is a function entry point */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jp\">jp</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#pre_handler\">pre_handler</a> = <a class=\"id\" href=\"#setjmp_pre_handler\">setjmp_pre_handler</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jp\">jp</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#break_handler\">break_handler</a> = <a class=\"id\" href=\"#longjmp_break_handler\">longjmp_break_handler</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_kprobe\">register_kprobe</a>(&amp;<a class=\"id\" href=\"#jp\">jp</a>-><a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_jprobes\">unregister_jprobes</a>(<a class=\"id\" href=\"#jps\">jps</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#register_jprobes\">register_jprobes</a>);", 
"", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#register_jprobe\">register_jprobe</a>(struct <a class=\"id\" href=\"#jprobe\">jprobe</a> *<a class=\"id\" href=\"#jp\">jp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#register_jprobes\">register_jprobes</a>(&amp;<a class=\"id\" href=\"#jp\">jp</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#register_jprobe\">register_jprobe</a>);", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#unregister_jprobe\">unregister_jprobe</a>(struct <a class=\"id\" href=\"#jprobe\">jprobe</a> *<a class=\"id\" href=\"#jp\">jp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_jprobes\">unregister_jprobes</a>(&amp;<a class=\"id\" href=\"#jp\">jp</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#unregister_jprobe\">unregister_jprobe</a>);", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#unregister_jprobes\">unregister_jprobes</a>(struct <a class=\"id\" href=\"#jprobe\">jprobe</a> **<a class=\"id\" href=\"#jps\">jps</a>, int <a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num\">num</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__unregister_kprobe_top\">__unregister_kprobe_top</a>(&amp;<a class=\"id\" href=\"#jps\">jps</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#kp\">kp</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jps\">jps</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jps\">jps</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__unregister_kprobe_bottom\">__unregister_kprobe_bottom</a>(&amp;<a class=\"id\" href=\"#jps\">jps</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#unregister_jprobes\">unregister_jprobes</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KRETPROBES\">CONFIG_KRETPROBES</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This kprobe pre_handler is registered with every kretprobe. When probe</span>", 
"<span class=\"comment\"> * hits it will set up the return probe.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#pre_handler_kretprobe\">pre_handler_kretprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kretprobe\">kretprobe</a> *<a class=\"id\" href=\"#rp\">rp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#kretprobe\">kretprobe</a>, <a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kretprobe_instance\">kretprobe_instance</a> *<a class=\"id\" href=\"#ri\">ri</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*TODO: consider to only swap the RA after the last pre_handler fired */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#hash_ptr\">hash_ptr</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#KPROBE_HASH_BITS\">KPROBE_HASH_BITS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hlist_empty\">hlist_empty</a>(&amp;<a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#free_instances\">free_instances</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ri\">ri</a> = <a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>(<a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#free_instances\">free_instances</a>.<a class=\"id\" href=\"#first\">first</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kretprobe_instance\">kretprobe_instance</a>, <a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del\">hlist_del</a>(&amp;<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#rp\">rp</a> = <a class=\"id\" href=\"#rp\">rp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#entry_handler\">entry_handler</a> && <a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#entry_handler\">entry_handler</a>(<a class=\"id\" href=\"#ri\">ri</a>, <a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_prepare_kretprobe\">arch_prepare_kretprobe</a>(<a class=\"id\" href=\"#ri\">ri</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* XXX(hch): why is there no hlist_move_head? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_NODE\">INIT_HLIST_NODE</a>(&amp;<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kretprobe_table_lock\">kretprobe_table_lock</a>(<a class=\"id\" href=\"#hash\">hash</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#hlist\">hlist</a>, &amp;<a class=\"id\" href=\"#kretprobe_inst_table\">kretprobe_inst_table</a>[<a class=\"id\" href=\"#hash\">hash</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kretprobe_table_unlock\">kretprobe_table_unlock</a>(<a class=\"id\" href=\"#hash\">hash</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#nmissed\">nmissed</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#register_kretprobe\">register_kretprobe</a>(struct <a class=\"id\" href=\"#kretprobe\">kretprobe</a> *<a class=\"id\" href=\"#rp\">rp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kretprobe_instance\">kretprobe_instance</a> *<a class=\"id\" href=\"#inst\">inst</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kretprobe_blacklist_size\">kretprobe_blacklist_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#kprobe_addr\">kprobe_addr</a>(&amp;<a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#kretprobe_blacklist\">kretprobe_blacklist</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kretprobe_blacklist\">kretprobe_blacklist</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#addr\">addr</a> == <a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#pre_handler\">pre_handler</a> = <a class=\"id\" href=\"#pre_handler_kretprobe\">pre_handler_kretprobe</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#post_handler\">post_handler</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#fault_handler\">fault_handler</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#break_handler\">break_handler</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Pre-allocate memory for max kretprobe instances */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#maxactive\">maxactive</a> <= 0) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#maxactive\">maxactive</a> = <a class=\"id\" href=\"#max_t\">max_t</a>(unsigned int, 10, 2*<a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>());", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#maxactive\">maxactive</a> = <a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#free_instances\">free_instances</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#maxactive\">maxactive</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inst\">inst</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#kretprobe_instance\">kretprobe_instance</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#data_size\">data_size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inst\">inst</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_rp_inst\">free_rp_inst</a>(<a class=\"id\" href=\"#rp\">rp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_NODE\">INIT_HLIST_NODE</a>(&amp;<a class=\"id\" href=\"#inst\">inst</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#inst\">inst</a>-><a class=\"id\" href=\"#hlist\">hlist</a>, &amp;<a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#free_instances\">free_instances</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#nmissed\">nmissed</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* Establish function entry probe point */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_kprobe\">register_kprobe</a>(&amp;<a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_rp_inst\">free_rp_inst</a>(<a class=\"id\" href=\"#rp\">rp</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#register_kretprobe\">register_kretprobe</a>);", 
"", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#register_kretprobes\">register_kretprobes</a>(struct <a class=\"id\" href=\"#kretprobe\">kretprobe</a> **<a class=\"id\" href=\"#rps\">rps</a>, int <a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num\">num</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_kretprobe\">register_kretprobe</a>(<a class=\"id\" href=\"#rps\">rps</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_kretprobes\">unregister_kretprobes</a>(<a class=\"id\" href=\"#rps\">rps</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#register_kretprobes\">register_kretprobes</a>);", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#unregister_kretprobe\">unregister_kretprobe</a>(struct <a class=\"id\" href=\"#kretprobe\">kretprobe</a> *<a class=\"id\" href=\"#rp\">rp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_kretprobes\">unregister_kretprobes</a>(&amp;<a class=\"id\" href=\"#rp\">rp</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#unregister_kretprobe\">unregister_kretprobe</a>);", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#unregister_kretprobes\">unregister_kretprobes</a>(struct <a class=\"id\" href=\"#kretprobe\">kretprobe</a> **<a class=\"id\" href=\"#rps\">rps</a>, int <a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num\">num</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__unregister_kprobe_top\">__unregister_kprobe_top</a>(&amp;<a class=\"id\" href=\"#rps\">rps</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#kp\">kp</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rps\">rps</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rps\">rps</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__unregister_kprobe_bottom\">__unregister_kprobe_bottom</a>(&amp;<a class=\"id\" href=\"#rps\">rps</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cleanup_rp_inst\">cleanup_rp_inst</a>(<a class=\"id\" href=\"#rps\">rps</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#unregister_kretprobes\">unregister_kretprobes</a>);", 
"", 
"#else <span class=\"comment\">/* CONFIG_KRETPROBES */</span>", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#register_kretprobe\">register_kretprobe</a>(struct <a class=\"id\" href=\"#kretprobe\">kretprobe</a> *<a class=\"id\" href=\"#rp\">rp</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#register_kretprobe\">register_kretprobe</a>);", 
"", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#register_kretprobes\">register_kretprobes</a>(struct <a class=\"id\" href=\"#kretprobe\">kretprobe</a> **<a class=\"id\" href=\"#rps\">rps</a>, int <a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#register_kretprobes\">register_kretprobes</a>);", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#unregister_kretprobe\">unregister_kretprobe</a>(struct <a class=\"id\" href=\"#kretprobe\">kretprobe</a> *<a class=\"id\" href=\"#rp\">rp</a>)", 
"{", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#unregister_kretprobe\">unregister_kretprobe</a>);", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#unregister_kretprobes\">unregister_kretprobes</a>(struct <a class=\"id\" href=\"#kretprobe\">kretprobe</a> **<a class=\"id\" href=\"#rps\">rps</a>, int <a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#unregister_kretprobes\">unregister_kretprobes</a>);", 
"", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#pre_handler_kretprobe\">pre_handler_kretprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_KRETPROBES */</span>", 
"", 
"<span class=\"comment\">/* Set the kprobe gone and remove its instruction buffer. */</span>", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#kill_kprobe\">kill_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#kp\">kp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#KPROBE_FLAG_GONE\">KPROBE_FLAG_GONE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kprobe_aggrprobe\">kprobe_aggrprobe</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this is an aggr_kprobe, we have to list all the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * chained probes and mark them GONE.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#kp\">kp</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#KPROBE_FLAG_GONE\">KPROBE_FLAG_GONE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#post_handler\">post_handler</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#break_handler\">break_handler</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_optimized_kprobe\">kill_optimized_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Here, we can remove insn_slot safely, because no thread calls</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the original probed function (which will be freed soon) any more.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_remove_kprobe\">arch_remove_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Disable one kprobe */</span>", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#disable_kprobe\">disable_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#kp\">kp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check whether specified probe is valid. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#__get_valid_kprobe\">__get_valid_kprobe</a>(<a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the probe is already disabled (or gone), just return */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(<a class=\"id\" href=\"#kp\">kp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#KPROBE_FLAG_DISABLED\">KPROBE_FLAG_DISABLED</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#kp\">kp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* When kp != p, p is always enabled. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_to_disable_aggr_kprobe\">try_to_disable_aggr_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kprobes_all_disarmed\">kprobes_all_disarmed</a> && <a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disarm_kprobe\">disarm_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#disable_kprobe\">disable_kprobe</a>);", 
"", 
"<span class=\"comment\">/* Enable one kprobe */</span>", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#enable_kprobe\">enable_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#kp\">kp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check whether specified probe is valid. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#__get_valid_kprobe\">__get_valid_kprobe</a>(<a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kprobe_gone\">kprobe_gone</a>(<a class=\"id\" href=\"#kp\">kp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This kprobe has gone, we couldn't enable it. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#kp\">kp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#KPROBE_FLAG_DISABLED\">KPROBE_FLAG_DISABLED</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kprobes_all_disarmed\">kprobes_all_disarmed</a> && <a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#KPROBE_FLAG_DISABLED\">KPROBE_FLAG_DISABLED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arm_kprobe\">arm_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#enable_kprobe\">enable_kprobe</a>);", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#dump_kprobe\">dump_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#kp\">kp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Dumping kprobe:\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Name: %s\\nAddress: %p\\nOffset: %x\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#symbol_name\">symbol_name</a>, <a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#offset\">offset</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Module notifier call back, checking kprobes on the module */</span>", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#kprobes_module_callback\">kprobes_module_callback</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#checkcore\">checkcore</a> = (<a class=\"id\" href=\"#val\">val</a> == <a class=\"id\" href=\"#MODULE_STATE_GOING\">MODULE_STATE_GOING</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> != <a class=\"id\" href=\"#MODULE_STATE_GOING\">MODULE_STATE_GOING</a> && <a class=\"id\" href=\"#val\">val</a> != <a class=\"id\" href=\"#MODULE_STATE_LIVE\">MODULE_STATE_LIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When MODULE_STATE_GOING was notified, both of module .text and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * .init.text sections would be freed. When MODULE_STATE_LIVE was</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * notified, only .init.text section would be freed. We need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disable kprobes which have been inserted in the sections.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#KPROBE_TABLE_SIZE\">KPROBE_TABLE_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#kprobe_table\">kprobe_table</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#hlist\">hlist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#within_module_init\">within_module_init</a>((unsigned long)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#mod\">mod</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#checkcore\">checkcore</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#within_module_core\">within_module_core</a>((unsigned long)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#mod\">mod</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The vaddr this probe is installed will soon</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * be vfreed buy not synced to disk. Hence,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * disarming the breakpoint isn't needed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_kprobe\">kill_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#kprobe_module_nb\">kprobe_module_nb</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#kprobes_module_callback\">kprobes_module_callback</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#priority\">priority</a> = 0", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_kprobes\">init_kprobes</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a> = 0, <a class=\"id\" href=\"#size\">size</a> = 0;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#modname\">modname</a>, <a class=\"id\" href=\"#namebuf\">namebuf</a>[128];", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#symbol_name\">symbol_name</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe_blackpoint\">kprobe_blackpoint</a> *<a class=\"id\" href=\"#kb\">kb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* FIXME allocate the probe table, currently defined statically */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* initialize all list heads */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#KPROBE_TABLE_SIZE\">KPROBE_TABLE_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#kprobe_table\">kprobe_table</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#kretprobe_inst_table\">kretprobe_inst_table</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;(<a class=\"id\" href=\"#kretprobe_table_locks\">kretprobe_table_locks</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#lock\">lock</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Lookup and populate the kprobe_blacklist.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Unlike the kretprobe blacklist, we'll need to determine</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the range of addresses that belong to the said functions,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * since a kprobe need not necessarily be at the beginning</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of a function.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#kb\">kb</a> = <a class=\"id\" href=\"#kprobe_blacklist\">kprobe_blacklist</a>; <a class=\"id\" href=\"#kb\">kb</a>-><a class=\"id\" href=\"#name\">name</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#kb\">kb</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kprobe_lookup_name\">kprobe_lookup_name</a>(<a class=\"id\" href=\"#kb\">kb</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kb\">kb</a>-><a class=\"id\" href=\"#start_addr\">start_addr</a> = (unsigned long)<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#symbol_name\">symbol_name</a> = <a class=\"id\" href=\"#kallsyms_lookup\">kallsyms_lookup</a>(<a class=\"id\" href=\"#kb\">kb</a>-><a class=\"id\" href=\"#start_addr\">start_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#size\">size</a>, &amp;<a class=\"id\" href=\"#offset\">offset</a>, &amp;<a class=\"id\" href=\"#modname\">modname</a>, <a class=\"id\" href=\"#namebuf\">namebuf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#symbol_name\">symbol_name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kb\">kb</a>-><a class=\"id\" href=\"#range\">range</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kb\">kb</a>-><a class=\"id\" href=\"#range\">range</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kretprobe_blacklist_size\">kretprobe_blacklist_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* lookup the function address from its name */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#kretprobe_blacklist\">kretprobe_blacklist</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kprobe_lookup_name\">kprobe_lookup_name</a>(<a class=\"id\" href=\"#kretprobe_blacklist\">kretprobe_blacklist</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#kretprobe_blacklist\">kretprobe_blacklist</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#kretprobe_blacklist\">kretprobe_blacklist</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"kretprobe: lookup failed: %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#kretprobe_blacklist\">kretprobe_blacklist</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_OPTPROBES\">CONFIG_OPTPROBES</a>)", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#__ARCH_WANT_KPROBES_INSN_SLOT\">__ARCH_WANT_KPROBES_INSN_SLOT</a>)", 
"<span class=\"ts\"/><span class=\"comment\">/* Init kprobe_optinsn_slots */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobe_optinsn_slots\">kprobe_optinsn_slots</a>.<a class=\"id\" href=\"#insn_size\">insn_size</a> = <a class=\"id\" href=\"#MAX_OPTINSN_SIZE\">MAX_OPTINSN_SIZE</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* By default, kprobes can be optimized */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobes_allow_optimization\">kprobes_allow_optimization</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* By default, kprobes are armed */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobes_all_disarmed\">kprobes_all_disarmed</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#arch_init_kprobes\">arch_init_kprobes</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#register_die_notifier\">register_die_notifier</a>(&amp;<a class=\"id\" href=\"#kprobe_exceptions_nb\">kprobe_exceptions_nb</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#register_module_notifier\">register_module_notifier</a>(&amp;<a class=\"id\" href=\"#kprobe_module_nb\">kprobe_module_nb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobes_initialized\">kprobes_initialized</a> = (<a class=\"id\" href=\"#err\">err</a> == 0);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_test_probes\">init_test_probes</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_FS\">CONFIG_DEBUG_FS</a>", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#report_probe\">report_probe</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#pi\">pi</a>, struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#sym\">sym</a>, int <a class=\"id\" href=\"#offset\">offset</a>, char *<a class=\"id\" href=\"#modname\">modname</a>, struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#pp\">pp</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#kprobe_type\">kprobe_type</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pre_handler\">pre_handler</a> == <a class=\"id\" href=\"#pre_handler_kretprobe\">pre_handler_kretprobe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kprobe_type\">kprobe_type</a> = \"r\";", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pre_handler\">pre_handler</a> == <a class=\"id\" href=\"#setjmp_pre_handler\">setjmp_pre_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kprobe_type\">kprobe_type</a> = \"j\";", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kprobe_type\">kprobe_type</a> = \"k\";", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sym\">sym</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#pi\">pi</a>, \"%p  %s  %s+0x%x  %s \",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#kprobe_type\">kprobe_type</a>, <a class=\"id\" href=\"#sym\">sym</a>, <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#modname\">modname</a> ? <a class=\"id\" href=\"#modname\">modname</a> : \" \"));", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#pi\">pi</a>, \"%p  %s  %p \",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#kprobe_type\">kprobe_type</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pp\">pp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pp\">pp</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#pi\">pi</a>, \"%s%s%s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#kprobe_gone\">kprobe_gone</a>(<a class=\"id\" href=\"#p\">p</a>) ? \"[GONE]\" : \"\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(<a class=\"id\" href=\"#p\">p</a>) && !<a class=\"id\" href=\"#kprobe_gone\">kprobe_gone</a>(<a class=\"id\" href=\"#p\">p</a>)) ?  \"[DISABLED]\" : \"\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#kprobe_optimized\">kprobe_optimized</a>(<a class=\"id\" href=\"#pp\">pp</a>) ? \"[OPTIMIZED]\" : \"\"));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> *<a class=\"id\" href=\"#kprobe_seq_start\">kprobe_seq_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>return (*<a class=\"id\" href=\"#pos\">pos</a> &lt; <a class=\"id\" href=\"#KPROBE_TABLE_SIZE\">KPROBE_TABLE_SIZE</a>) ? <a class=\"id\" href=\"#pos\">pos</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> *<a class=\"id\" href=\"#kprobe_seq_next\">kprobe_seq_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#f\">f</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#pos\">pos</a>)++;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#pos\">pos</a> >= <a class=\"id\" href=\"#KPROBE_TABLE_SIZE\">KPROBE_TABLE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pos\">pos</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#kprobe_seq_stop\">kprobe_seq_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#f\">f</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Nothing to do */</span>", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#show_kprobe_addr\">show_kprobe_addr</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#pi\">pi</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#kp\">kp</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#sym\">sym</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a> = *(<a class=\"id\" href=\"#loff_t\">loff_t</a> *) <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#modname\">modname</a>, <a class=\"id\" href=\"#namebuf\">namebuf</a>[128];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#kprobe_table\">kprobe_table</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#hlist\">hlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sym\">sym</a> = <a class=\"id\" href=\"#kallsyms_lookup\">kallsyms_lookup</a>((unsigned long)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#offset\">offset</a>, &amp;<a class=\"id\" href=\"#modname\">modname</a>, <a class=\"id\" href=\"#namebuf\">namebuf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kprobe_aggrprobe\">kprobe_aggrprobe</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#kp\">kp</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#report_probe\">report_probe</a>(<a class=\"id\" href=\"#pi\">pi</a>, <a class=\"id\" href=\"#kp\">kp</a>, <a class=\"id\" href=\"#sym\">sym</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#modname\">modname</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#report_probe\">report_probe</a>(<a class=\"id\" href=\"#pi\">pi</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#sym\">sym</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#modname\">modname</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#kprobes_seq_ops\">kprobes_seq_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#kprobe_seq_start\">kprobe_seq_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a>  = <a class=\"id\" href=\"#kprobe_seq_next\">kprobe_seq_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a>  = <a class=\"id\" href=\"#kprobe_seq_stop\">kprobe_seq_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a>  = <a class=\"id\" href=\"#show_kprobe_addr\">show_kprobe_addr</a>", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#kprobes_open\">kprobes_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#filp\">filp</a>, &amp;<a class=\"id\" href=\"#kprobes_seq_ops\">kprobes_seq_ops</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#debugfs_kprobes_operations\">debugfs_kprobes_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a>           = <a class=\"id\" href=\"#kprobes_open\">kprobes_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a>           = <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a>         = <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a>        = <a class=\"id\" href=\"#seq_release\">seq_release</a>,", 
"};", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#arm_all_kprobes\">arm_all_kprobes</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If kprobes are armed, just return */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kprobes_all_disarmed\">kprobes_all_disarmed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#already_enabled\">already_enabled</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Arming kprobes doesn't optimize kprobe itself */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#KPROBE_TABLE_SIZE\">KPROBE_TABLE_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#kprobe_table\">kprobe_table</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#hlist\">hlist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__arm_kprobe\">__arm_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobes_all_disarmed\">kprobes_all_disarmed</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Kprobes globally enabled\\n\");", 
"", 
"<a class=\"id\" href=\"#already_enabled\">already_enabled</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#disarm_all_kprobes\">disarm_all_kprobes</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If kprobes are already disarmed, just return */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kprobes_all_disarmed\">kprobes_all_disarmed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#already_disabled\">already_disabled</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobes_all_disarmed\">kprobes_all_disarmed</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Kprobes globally disabled\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Here we call get_online_cpus() for avoiding text_mutex deadlock,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because disarming may also unoptimize kprobes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#KPROBE_TABLE_SIZE\">KPROBE_TABLE_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#kprobe_table\">kprobe_table</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#hlist\">hlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#arch_trampoline_kprobe\">arch_trampoline_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>) && !<a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__disarm_kprobe\">__disarm_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Allow all currently running kprobes to complete */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();", 
"<span class=\"ts\"/>return;", 
"", 
"<a class=\"id\" href=\"#already_disabled\">already_disabled</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * XXX: The debugfs bool file interface doesn't allow for callbacks</span>", 
"<span class=\"comment\"> * when the bool state is switched. We can reuse that facility when</span>", 
"<span class=\"comment\"> * available</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#read_enabled_file_bool\">read_enabled_file_bool</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/>       char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#user_buf\">user_buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[3];", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kprobes_all_disarmed\">kprobes_all_disarmed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[0] = '1';", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[0] = '0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[1] = '\\n';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[2] = 0x00;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#simple_read_from_buffer\">simple_read_from_buffer</a>(<a class=\"id\" href=\"#user_buf\">user_buf</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#buf\">buf</a>, 2);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#write_enabled_file_bool\">write_enabled_file_bool</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/>       const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#user_buf\">user_buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[32];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#buf_size\">buf_size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf_size\">buf_size</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#count\">count</a>, (sizeof(<a class=\"id\" href=\"#buf\">buf</a>)-1));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#user_buf\">user_buf</a>, <a class=\"id\" href=\"#buf_size\">buf_size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#buf\">buf</a>[0]) {", 
"<span class=\"ts\"/>case 'y':", 
"<span class=\"ts\"/>case 'Y':", 
"<span class=\"ts\"/>case '1':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arm_all_kprobes\">arm_all_kprobes</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 'n':", 
"<span class=\"ts\"/>case 'N':", 
"<span class=\"ts\"/>case '0':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disarm_all_kprobes\">disarm_all_kprobes</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#fops_kp\">fops_kp</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> =         <a class=\"id\" href=\"#read_enabled_file_bool\">read_enabled_file_bool</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a> =        <a class=\"id\" href=\"#write_enabled_file_bool\">write_enabled_file_bool</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#debugfs_kprobe_init\">debugfs_kprobe_init</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dir\">dir</a>, *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#value\">value</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dir\">dir</a> = <a class=\"id\" href=\"#debugfs_create_dir\">debugfs_create_dir</a>(\"kprobes\", <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dir\">dir</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(\"list\", 0444, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#debugfs_kprobes_operations\">debugfs_kprobes_operations</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debugfs_remove\">debugfs_remove</a>(<a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(\"enabled\", 0600, <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#fops_kp\">fops_kp</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debugfs_remove\">debugfs_remove</a>(<a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#debugfs_kprobe_init\">debugfs_kprobe_init</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_DEBUG_FS */</span>", 
"", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#init_kprobes\">init_kprobes</a>);", 
"", 
"<span class=\"comment\">/* defined in arch/.../kernel/kprobes.c */</span>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#jprobe_return\">jprobe_return</a>);", 
];
xr_frag_insert('l/41/96c5039389a0c90ee3e44030270e73062c0024.xr', __xr_tmp);
