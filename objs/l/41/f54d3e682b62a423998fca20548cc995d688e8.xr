var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#works\">works</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_work_on\">schedule_work_on</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_work\">flush_work</a>(<a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#works\">works</a>, <a class=\"id\" href=\"#cpu\">cpu</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#works\">works</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * flush_scheduled_work - ensure that any scheduled work has run to completion.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Forces execution of the kernel-global workqueue and blocks until its</span>", 
"<span class=\"comment\"> * completion.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Think twice before calling this function!  It's very easy to get into</span>", 
"<span class=\"comment\"> * trouble if you don't take great care.  Either of the following situations</span>", 
"<span class=\"comment\"> * will lead to deadlock:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>One of the work items currently on the workqueue needs to acquire</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a lock held by your code or its caller.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Your code is running in the context of a work routine.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * They will be detected by lockdep when they occur, but the first might not</span>", 
"<span class=\"comment\"> * occur very often.  It depends on what work items are on the workqueue and</span>", 
"<span class=\"comment\"> * what locks they need, which you have no control over.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In most situations flushing the entire workqueue is overkill; you merely</span>", 
"<span class=\"comment\"> * need to know that a particular work item isn't queued and isn't running.</span>", 
"<span class=\"comment\"> * In such cases you should use cancel_delayed_work_sync() or</span>", 
"<span class=\"comment\"> * cancel_work_sync() instead.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#flush_scheduled_work\">flush_scheduled_work</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_workqueue\">flush_workqueue</a>(<a class=\"id\" href=\"#system_wq\">system_wq</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#flush_scheduled_work\">flush_scheduled_work</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * execute_in_process_context - reliably execute the routine with user context</span>", 
"<span class=\"comment\"> * @fn:<span class=\"ts\"/><span class=\"ts\"/>the function to execute</span>", 
"<span class=\"comment\"> * @ew:<span class=\"ts\"/><span class=\"ts\"/>guaranteed storage for the execute work structure (must</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>be available when the work executes)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Executes the function immediately if process context is available,</span>", 
"<span class=\"comment\"> * otherwise schedules the function for delayed execution.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:<span class=\"ts\"/>0 - function was executed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>1 - function was scheduled for execution</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#execute_in_process_context\">execute_in_process_context</a>(<a class=\"id\" href=\"#work_func_t\">work_func_t</a> <a class=\"id\" href=\"#fn\">fn</a>, struct <a class=\"id\" href=\"#execute_work\">execute_work</a> *<a class=\"id\" href=\"#ew\">ew</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fn\">fn</a>(&amp;<a class=\"id\" href=\"#ew\">ew</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;<a class=\"id\" href=\"#ew\">ew</a>-><a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#fn\">fn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#ew\">ew</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#execute_in_process_context\">execute_in_process_context</a>);", 
"", 
"int <a class=\"id\" href=\"#keventd_up\">keventd_up</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#system_wq\">system_wq</a> != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#alloc_cwqs\">alloc_cwqs</a>(struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cwqs are forced aligned according to WORK_STRUCT_FLAG_BITS.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure that the alignment isn't lower than that of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unsigned long long.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a> = sizeof(struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a>);", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#align\">align</a> = <a class=\"id\" href=\"#max_t\">max_t</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, 1 << <a class=\"id\" href=\"#WORK_STRUCT_FLAG_BITS\">WORK_STRUCT_FLAG_BITS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#__alignof__\">__alignof__</a>(unsigned long long));", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#percpu\">percpu</a> = !(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_UNBOUND\">WQ_UNBOUND</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#percpu\">percpu</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#percpu\">percpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#cpu_wq\">cpu_wq</a>.<a class=\"id\" href=\"#pcpu\">pcpu</a> = <a class=\"id\" href=\"#__alloc_percpu\">__alloc_percpu</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Allocate enough room to align cwq and put an extra</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pointer at the end pointing back to the originally</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allocated pointer which will be used for free.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#size\">size</a> + <a class=\"id\" href=\"#align\">align</a> + sizeof(void *), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ptr\">ptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#cpu_wq\">cpu_wq</a>.<a class=\"id\" href=\"#single\">single</a> = <a class=\"id\" href=\"#PTR_ALIGN\">PTR_ALIGN</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(void **)(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#cpu_wq\">cpu_wq</a>.<a class=\"id\" href=\"#single\">single</a> + 1) = <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* just in case, make sure it's actually aligned */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#IS_ALIGNED\">IS_ALIGNED</a>(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#cpu_wq\">cpu_wq</a>.<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#align\">align</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#cpu_wq\">cpu_wq</a>.<a class=\"id\" href=\"#v\">v</a> ? 0 : -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_cwqs\">free_cwqs</a>(struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#percpu\">percpu</a> = !(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_UNBOUND\">WQ_UNBOUND</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#percpu\">percpu</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#percpu\">percpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#cpu_wq\">cpu_wq</a>.<a class=\"id\" href=\"#pcpu\">pcpu</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#cpu_wq\">cpu_wq</a>.<a class=\"id\" href=\"#single\">single</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the pointer to free is stored right after the cwq */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(*(void **)(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#cpu_wq\">cpu_wq</a>.<a class=\"id\" href=\"#single\">single</a> + 1));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#wq_clamp_max_active\">wq_clamp_max_active</a>(int <a class=\"id\" href=\"#max_active\">max_active</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lim\">lim</a> = <a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_UNBOUND\">WQ_UNBOUND</a> ? <a class=\"id\" href=\"#WQ_UNBOUND_MAX_ACTIVE\">WQ_UNBOUND_MAX_ACTIVE</a> : <a class=\"id\" href=\"#WQ_MAX_ACTIVE\">WQ_MAX_ACTIVE</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_active\">max_active</a> &lt; 1 || <a class=\"id\" href=\"#max_active\">max_active</a> &gt; <a class=\"id\" href=\"#lim\">lim</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"workqueue: max_active %d requested for %s \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"is out of range, clamping between %d and %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#max_active\">max_active</a>, <a class=\"id\" href=\"#name\">name</a>, 1, <a class=\"id\" href=\"#lim\">lim</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#clamp_val\">clamp_val</a>(<a class=\"id\" href=\"#max_active\">max_active</a>, 1, <a class=\"id\" href=\"#lim\">lim</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#__alloc_workqueue_key\">__alloc_workqueue_key</a>(const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#max_active\">max_active</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const char *<a class=\"id\" href=\"#lock_name\">lock_name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Unbound workqueues aren't concurrency managed and should be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dispatched to workers immediately.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_UNBOUND\">WQ_UNBOUND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#WQ_HIGHPRI\">WQ_HIGHPRI</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_active\">max_active</a> = <a class=\"id\" href=\"#max_active\">max_active</a> ?: <a class=\"id\" href=\"#WQ_DFL_ACTIVE\">WQ_DFL_ACTIVE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_active\">max_active</a> = <a class=\"id\" href=\"#wq_clamp_max_active\">wq_clamp_max_active</a>(<a class=\"id\" href=\"#max_active\">max_active</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#wq\">wq</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#wq\">wq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#saved_max_active\">saved_max_active</a> = <a class=\"id\" href=\"#max_active\">max_active</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flush_mutex\">flush_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#nr_cwqs_to_flush\">nr_cwqs_to_flush</a>, 0);", 
];
xr_frag_insert('l/41/f54d3e682b62a423998fca20548cc995d688e8.xr', __xr_tmp);
