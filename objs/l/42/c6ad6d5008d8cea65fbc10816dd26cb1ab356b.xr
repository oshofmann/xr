var __xr_tmp = [
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we can do a simple return here or be paranoid :)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#clear_state\">clear_state</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Use more nops than strictly needed in case the compiler</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   varies code */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alternative_input\">alternative_input</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/>\"fnsave %[fx] ;fwait;\" <a class=\"id\" href=\"#GENERIC_NOP8\">GENERIC_NOP8</a> <a class=\"id\" href=\"#GENERIC_NOP4\">GENERIC_NOP4</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>\"fxsave %[fx]\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"bt $7,%[fsw] ; jnc 1f ; fnclex\\n1:\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#X86_FEATURE_FXSR\">X86_FEATURE_FXSR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#fx\">fx</a>] \"m\" (<a class=\"id\" href=\"#fpu\">fpu</a>-><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#fxsave\">fxsave</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#fsw\">fsw</a>] \"m\" (<a class=\"id\" href=\"#fpu\">fpu</a>-><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#fxsave\">fxsave</a>.<a class=\"id\" href=\"#swd\">swd</a>) : \"memory\");", 
"<a class=\"id\" href=\"#clear_state\">clear_state</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* AMD K7/K8 CPUs don't save/restore FDP/FIP/FOP unless an exception</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   is pending.  Clear the x87 state here by setting it to fixed</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   values. safe_address is a random variable that should be in L1 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alternative_input\">alternative_input</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GENERIC_NOP8\">GENERIC_NOP8</a> <a class=\"id\" href=\"#GENERIC_NOP2\">GENERIC_NOP2</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>\"emms\\n\\t\"<span class=\"ts\"/>  <span class=\"ts\"/><span class=\"comment\">/* clear stack tags */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"fildl %[addr]\", <span class=\"ts\"/><span class=\"comment\">/* set F?P to defined value */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#X86_FEATURE_FXSAVE_LEAK\">X86_FEATURE_FXSAVE_LEAK</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#addr\">addr</a>] \"m\" (<a class=\"id\" href=\"#safe_address\">safe_address</a>));", 
"<a class=\"id\" href=\"#end\">end</a>:", 
"<span class=\"ts\"/>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__save_init_fpu\">__save_init_fpu</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fpu_save_init\">fpu_save_init</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fpu\">fpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)-><a class=\"id\" href=\"#status\">status</a> &= ~<a class=\"id\" href=\"#TS_USEDFPU\">TS_USEDFPU</a>;", 
"}", 
"", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_X86_64 */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#fpu_fxrstor_checking\">fpu_fxrstor_checking</a>(struct <a class=\"id\" href=\"#fpu\">fpu</a> *<a class=\"id\" href=\"#fpu\">fpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fxrstor_checking\">fxrstor_checking</a>(&amp;<a class=\"id\" href=\"#fpu\">fpu</a>-><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#fxsave\">fxsave</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#fpu_restore_checking\">fpu_restore_checking</a>(struct <a class=\"id\" href=\"#fpu\">fpu</a> *<a class=\"id\" href=\"#fpu\">fpu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#use_xsave\">use_xsave</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#fpu_xrstor_checking\">fpu_xrstor_checking</a>(<a class=\"id\" href=\"#fpu\">fpu</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#fpu_fxrstor_checking\">fpu_fxrstor_checking</a>(<a class=\"id\" href=\"#fpu\">fpu</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#restore_fpu_checking\">restore_fpu_checking</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fpu_restore_checking\">fpu_restore_checking</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fpu\">fpu</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Signal frame handlers...</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#save_i387_xstate\">save_i387_xstate</a>(void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>);", 
"extern int <a class=\"id\" href=\"#restore_i387_xstate\">restore_i387_xstate</a>(void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__unlazy_fpu\">__unlazy_fpu</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#TS_USEDFPU\">TS_USEDFPU</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__save_init_fpu\">__save_init_fpu</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stts\">stts</a>();", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#fpu_counter\">fpu_counter</a> = 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__clear_fpu\">__clear_fpu</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#TS_USEDFPU\">TS_USEDFPU</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tolerant_fwait\">tolerant_fwait</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)-><a class=\"id\" href=\"#status\">status</a> &= ~<a class=\"id\" href=\"#TS_USEDFPU\">TS_USEDFPU</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stts\">stts</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#kernel_fpu_begin\">kernel_fpu_begin</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#me\">me</a> = <a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#me\">me</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#TS_USEDFPU\">TS_USEDFPU</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__save_init_fpu\">__save_init_fpu</a>(<a class=\"id\" href=\"#me\">me</a>-><a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clts\">clts</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#kernel_fpu_end\">kernel_fpu_end</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stts\">stts</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#irq_fpu_usable\">irq_fpu_usable</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>;", 
"", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>() || !(<a class=\"id\" href=\"#regs\">regs</a> = <a class=\"id\" href=\"#get_irq_regs\">get_irq_regs</a>()) || \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>) || (<a class=\"id\" href=\"#read_cr0\">read_cr0</a>() &amp; <a class=\"id\" href=\"#X86_CR0_TS\">X86_CR0_TS</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some instructions like VIA's padlock instructions generate a spurious</span>", 
"<span class=\"comment\"> * DNA fault but don't modify SSE registers. And these instructions</span>", 
"<span class=\"comment\"> * get used from interrupt context as well. To prevent these kernel instructions</span>", 
"<span class=\"comment\"> * in interrupt context interacting wrongly with other user/kernel fpu usage, we</span>", 
"<span class=\"comment\"> * should use them only in the context of irq_ts_save/restore()</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#irq_ts_save\">irq_ts_save</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If in process context and not atomic, we can take a spurious DNA fault.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Otherwise, doing clts() in process context requires disabling preemption</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or some heavy lifting like kernel_fpu_begin()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#in_atomic\">in_atomic</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_cr0\">read_cr0</a>() &amp; <a class=\"id\" href=\"#X86_CR0_TS\">X86_CR0_TS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clts\">clts</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#irq_ts_restore\">irq_ts_restore</a>(int <a class=\"id\" href=\"#TS_state\">TS_state</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#TS_state\">TS_state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stts\">stts</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#save_init_fpu\">save_init_fpu</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__save_init_fpu\">__save_init_fpu</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stts\">stts</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#unlazy_fpu\">unlazy_fpu</a><span class=\"ts\"/><a class=\"id\" href=\"#__unlazy_fpu\">__unlazy_fpu</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#clear_fpu\">clear_fpu</a><span class=\"ts\"/><a class=\"id\" href=\"#__clear_fpu\">__clear_fpu</a>", 
"", 
"#else  <span class=\"comment\">/* CONFIG_X86_32 */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These disable preemption on their own and are safe</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#save_init_fpu\">save_init_fpu</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__save_init_fpu\">__save_init_fpu</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stts\">stts</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#unlazy_fpu\">unlazy_fpu</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__unlazy_fpu\">__unlazy_fpu</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clear_fpu\">clear_fpu</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__clear_fpu\">__clear_fpu</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_X86_64 */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * i387 state interaction</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned short <a class=\"id\" href=\"#get_fpu_cwd\">get_fpu_cwd</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_fxsr\">cpu_has_fxsr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fpu\">fpu</a>.<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#fxsave\">fxsave</a>.<a class=\"id\" href=\"#cwd\">cwd</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (unsigned short)<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fpu\">fpu</a>.<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#fsave\">fsave</a>.<a class=\"id\" href=\"#cwd\">cwd</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned short <a class=\"id\" href=\"#get_fpu_swd\">get_fpu_swd</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_fxsr\">cpu_has_fxsr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fpu\">fpu</a>.<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#fxsave\">fxsave</a>.<a class=\"id\" href=\"#swd\">swd</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (unsigned short)<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fpu\">fpu</a>.<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#fsave\">fsave</a>.<a class=\"id\" href=\"#swd\">swd</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned short <a class=\"id\" href=\"#get_fpu_mxcsr\">get_fpu_mxcsr</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_xmm\">cpu_has_xmm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fpu\">fpu</a>.<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#fxsave\">fxsave</a>.<a class=\"id\" href=\"#mxcsr\">mxcsr</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#MXCSR_DEFAULT\">MXCSR_DEFAULT</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#fpu_allocated\">fpu_allocated</a>(struct <a class=\"id\" href=\"#fpu\">fpu</a> *<a class=\"id\" href=\"#fpu\">fpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fpu\">fpu</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#fpu_alloc\">fpu_alloc</a>(struct <a class=\"id\" href=\"#fpu\">fpu</a> *<a class=\"id\" href=\"#fpu\">fpu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fpu_allocated\">fpu_allocated</a>(<a class=\"id\" href=\"#fpu\">fpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fpu\">fpu</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#task_xstate_cachep\">task_xstate_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fpu\">fpu</a>-><a class=\"id\" href=\"#state\">state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>((unsigned long)<a class=\"id\" href=\"#fpu\">fpu</a>-><a class=\"id\" href=\"#state\">state</a> &amp; 15);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#fpu_free\">fpu_free</a>(struct <a class=\"id\" href=\"#fpu\">fpu</a> *<a class=\"id\" href=\"#fpu\">fpu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fpu\">fpu</a>-><a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#task_xstate_cachep\">task_xstate_cachep</a>, <a class=\"id\" href=\"#fpu\">fpu</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fpu\">fpu</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#fpu_copy\">fpu_copy</a>(struct <a class=\"id\" href=\"#fpu\">fpu</a> *<a class=\"id\" href=\"#dst\">dst</a>, struct <a class=\"id\" href=\"#fpu\">fpu</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#xstate_size\">xstate_size</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#fpu_finit\">fpu_finit</a>(struct <a class=\"id\" href=\"#fpu\">fpu</a> *<a class=\"id\" href=\"#fpu\">fpu</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __ASSEMBLY__ */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PSHUFB_XMM5_XMM0\">PSHUFB_XMM5_XMM0</a> .<a class=\"id\" href=\"#byte\">byte</a> 0x66, 0x0f, 0x38, 0x00, 0xc5", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PSHUFB_XMM5_XMM6\">PSHUFB_XMM5_XMM6</a> .<a class=\"id\" href=\"#byte\">byte</a> 0x66, 0x0f, 0x38, 0x00, 0xf5", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_I387_H */</span>", 
];
xr_frag_insert('l/42/c6ad6d5008d8cea65fbc10816dd26cb1ab356b.xr', __xr_tmp);
