var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In this case, swapped-out-but-not-discarded swap-cache</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is remapped. So, no need to update page-&gt;mapping here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We convice anon_vma poitned by page-&gt;mapping is not obsolete</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * because vma-&gt;anon_vma is necessary to be a family of it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_vma\">anon_vma</a> = (void *) <a class=\"id\" href=\"#anon_vma\">anon_vma</a> + <a class=\"id\" href=\"#PAGE_MAPPING_ANON\">PAGE_MAPPING_ANON</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> = (struct <a class=\"id\" href=\"#address_space\">address_space</a> *) <a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#linear_page_index\">linear_page_index</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __page_check_anon_rmap - sanity check anonymous rmap addition</span>", 
"<span class=\"comment\"> * @page:<span class=\"ts\"/>the page to add the mapping to</span>", 
"<span class=\"comment\"> * @vma:<span class=\"ts\"/>the vm area in which the mapping is added</span>", 
"<span class=\"comment\"> * @address:<span class=\"ts\"/>the user virtual address mapped</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__page_check_anon_rmap\">__page_check_anon_rmap</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_VM\">CONFIG_DEBUG_VM</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The page's anon-rmap details (mapping and index) are guaranteed to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be set up correctly at this point.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We have exclusion against page_add_anon_rmap because the caller</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * always holds the page locked, except if called from page_dup_rmap,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in which case the page is already known to be setup.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We have exclusion against page_add_new_anon_rmap because those pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are initially only visible via the pagetables, and the pte is locked</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * over the call to page_add_new_anon_rmap.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#page_anon_vma\">page_anon_vma</a>(<a class=\"id\" href=\"#page\">page</a>)-><a class=\"id\" href=\"#root\">root</a> != <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> != <a class=\"id\" href=\"#linear_page_index\">linear_page_index</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * page_add_anon_rmap - add pte mapping to an anonymous page</span>", 
"<span class=\"comment\"> * @page:<span class=\"ts\"/>the page to add the mapping to</span>", 
"<span class=\"comment\"> * @vma:<span class=\"ts\"/>the vm area in which the mapping is added</span>", 
"<span class=\"comment\"> * @address:<span class=\"ts\"/>the user virtual address mapped</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller needs to hold the pte lock, and the page must be locked in</span>", 
"<span class=\"comment\"> * the anon_vma case: to serialize mapping,index checking after setting,</span>", 
"<span class=\"comment\"> * and to ensure that PageAnon is not being upgraded racily to PageKsm</span>", 
"<span class=\"comment\"> * (but PageKsm is never downgraded to PageAnon).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#page_add_anon_rmap\">page_add_anon_rmap</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_page_add_anon_rmap\">do_page_add_anon_rmap</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Special version of the above for do_swap_page, which often runs</span>", 
"<span class=\"comment\"> * into pages that are exclusively owned by the current process.</span>", 
"<span class=\"comment\"> * Everybody else should continue to use page_add_anon_rmap above.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#do_page_add_anon_rmap\">do_page_add_anon_rmap</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>, int <a class=\"id\" href=\"#exclusive\">exclusive</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#atomic_inc_and_test\">atomic_inc_and_test</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_mapcount\">_mapcount</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__inc_zone_page_state\">__inc_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_ANON_PAGES\">NR_ANON_PAGES</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#PageKsm\">PageKsm</a>(<a class=\"id\" href=\"#page\">page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#address\">address</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> || <a class=\"id\" href=\"#address\">address</a> >= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__page_set_anon_rmap\">__page_set_anon_rmap</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#exclusive\">exclusive</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__page_check_anon_rmap\">__page_check_anon_rmap</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * page_add_new_anon_rmap - add pte mapping to a new anonymous page</span>", 
"<span class=\"comment\"> * @page:<span class=\"ts\"/>the page to add the mapping to</span>", 
"<span class=\"comment\"> * @vma:<span class=\"ts\"/>the vm area in which the mapping is added</span>", 
"<span class=\"comment\"> * @address:<span class=\"ts\"/>the user virtual address mapped</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Same as page_add_anon_rmap but must only be called on *new* pages.</span>", 
"<span class=\"comment\"> * This means the inc-and-test can be bypassed.</span>", 
"<span class=\"comment\"> * Page does not have to be locked.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#page_add_new_anon_rmap\">page_add_new_anon_rmap</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#address\">address</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> || <a class=\"id\" href=\"#address\">address</a> >= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SetPageSwapBacked\">SetPageSwapBacked</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_mapcount\">_mapcount</a>, 0); <span class=\"comment\">/* increment count (starts at -1) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__inc_zone_page_state\">__inc_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_ANON_PAGES\">NR_ANON_PAGES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__page_set_anon_rmap\">__page_set_anon_rmap</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_evictable\">page_evictable</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru_cache_add_lru\">lru_cache_add_lru</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#LRU_ACTIVE_ANON\">LRU_ACTIVE_ANON</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_page_to_unevictable_list\">add_page_to_unevictable_list</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * page_add_file_rmap - add pte mapping to a file page</span>", 
"<span class=\"comment\"> * @page: the page to add the mapping to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller needs to hold the pte lock.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#page_add_file_rmap\">page_add_file_rmap</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_inc_and_test\">atomic_inc_and_test</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_mapcount\">_mapcount</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__inc_zone_page_state\">__inc_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_FILE_MAPPED\">NR_FILE_MAPPED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_update_file_mapped\">mem_cgroup_update_file_mapped</a>(<a class=\"id\" href=\"#page\">page</a>, 1);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * page_remove_rmap - take down pte mapping from a page</span>", 
"<span class=\"comment\"> * @page: page to remove mapping from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller needs to hold the pte lock.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#page_remove_rmap\">page_remove_rmap</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* page still mapped by someone else? */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_add_negative\">atomic_add_negative</a>(-1, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_mapcount\">_mapcount</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now that the last pte has gone, s390 must transfer dirty</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * flag from storage key to struct page.  We can usually skip</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this if the page is anon, so about to be freed; but perhaps</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not if it's in swapcache - there might be another pte slot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * containing the swap entry, but page not yet written to swap.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((!<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>) || <a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>)) && <a class=\"id\" href=\"#page_test_dirty\">page_test_dirty</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_clear_dirty\">page_clear_dirty</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Hugepages are not counted in NR_ANON_PAGES nor NR_FILE_MAPPED</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and not charged by memcg for now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#PageHuge\">PageHuge</a>(<a class=\"id\" href=\"#page\">page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_uncharge_page\">mem_cgroup_uncharge_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dec_zone_page_state\">__dec_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_ANON_PAGES\">NR_ANON_PAGES</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dec_zone_page_state\">__dec_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_FILE_MAPPED\">NR_FILE_MAPPED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_update_file_mapped\">mem_cgroup_update_file_mapped</a>(<a class=\"id\" href=\"#page\">page</a>, -1);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It would be tidy to reset the PageAnon mapping here,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but that might overwrite a racing page_add_anon_rmap</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which increments mapcount after us but sets mapping</span>", 
];
xr_frag_insert('l/43/1bcde82d202faa043e9b918b14d57458f872f0.xr', __xr_tmp);
