var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove a prio_tree_node @node from a radix priority search tree @root. The</span>", 
"<span class=\"comment\"> * algorithm takes O(log n) time where 'log n' is the number of bits required</span>", 
"<span class=\"comment\"> * to represent the maximum heap_index.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#prio_tree_remove\">prio_tree_remove</a>(struct <a class=\"id\" href=\"#prio_tree_root\">prio_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>, struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *<a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r_index\">r_index</a>, <a class=\"id\" href=\"#h_index_right\">h_index_right</a>, <a class=\"id\" href=\"#h_index_left\">h_index_left</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#prio_tree_left_empty\">prio_tree_left_empty</a>(<a class=\"id\" href=\"#cur\">cur</a>) || !<a class=\"id\" href=\"#prio_tree_right_empty\">prio_tree_right_empty</a>(<a class=\"id\" href=\"#cur\">cur</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#prio_tree_left_empty\">prio_tree_left_empty</a>(<a class=\"id\" href=\"#cur\">cur</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_index\">get_index</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#left\">left</a>, &amp;<a class=\"id\" href=\"#r_index\">r_index</a>, &amp;<a class=\"id\" href=\"#h_index_left\">h_index_left</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#right\">right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#prio_tree_right_empty\">prio_tree_right_empty</a>(<a class=\"id\" href=\"#cur\">cur</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_index\">get_index</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#right\">right</a>, &amp;<a class=\"id\" href=\"#r_index\">r_index</a>, &amp;<a class=\"id\" href=\"#h_index_right\">h_index_right</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#left\">left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* both h_index_left and h_index_right cannot be 0 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#h_index_left\">h_index_left</a> >= <a class=\"id\" href=\"#h_index_right\">h_index_right</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#left\">left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#right\">right</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prio_tree_root\">prio_tree_root</a>(<a class=\"id\" href=\"#cur\">cur</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> != <a class=\"id\" href=\"#cur\">cur</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__INIT_PRIO_TREE_ROOT\">__INIT_PRIO_TREE_ROOT</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#raw\">raw</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#right\">right</a> == <a class=\"id\" href=\"#cur\">cur</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#right\">right</a> = <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#cur\">cur</a> != <a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#prio_tree_replace\">prio_tree_replace</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#cur\">cur</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Following functions help to enumerate all prio_tree_nodes in the tree that</span>", 
"<span class=\"comment\"> * overlap with the input interval X [radix_index, heap_index]. The enumeration</span>", 
"<span class=\"comment\"> * takes O(log n + m) time where 'log n' is the height of the tree (which is</span>", 
"<span class=\"comment\"> * proportional to # of bits required to represent the maximum heap_index) and</span>", 
"<span class=\"comment\"> * 'm' is the number of prio_tree_nodes that overlap the interval X.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *<a class=\"id\" href=\"#prio_tree_left\">prio_tree_left</a>(struct <a class=\"id\" href=\"#prio_tree_iter\">prio_tree_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#r_index\">r_index</a>, unsigned long *<a class=\"id\" href=\"#h_index\">h_index</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prio_tree_left_empty\">prio_tree_left_empty</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_index\">get_index</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#left\">left</a>, <a class=\"id\" href=\"#r_index\">r_index</a>, <a class=\"id\" href=\"#h_index\">h_index</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#r_index\">r_index</a> <= *<a class=\"id\" href=\"#h_index\">h_index</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#left\">left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a> >>= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#size_level\">size_level</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#size_level\">size_level</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#size_level\">size_level</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#prio_tree_left_empty\">prio_tree_left_empty</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#prio_tree_right_empty\">prio_tree_right_empty</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#size_level\">size_level</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#size_level\">size_level</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a> = 1UL << (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *<a class=\"id\" href=\"#prio_tree_right\">prio_tree_right</a>(struct <a class=\"id\" href=\"#prio_tree_iter\">prio_tree_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#r_index\">r_index</a>, unsigned long *<a class=\"id\" href=\"#h_index\">h_index</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prio_tree_right_empty\">prio_tree_right_empty</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#size_level\">size_level</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#value\">value</a> | <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#h_index\">h_index</a> &lt; <a class=\"id\" href=\"#value\">value</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_index\">get_index</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#right\">right</a>, <a class=\"id\" href=\"#r_index\">r_index</a>, <a class=\"id\" href=\"#h_index\">h_index</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#r_index\">r_index</a> <= *<a class=\"id\" href=\"#h_index\">h_index</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#right\">right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a> >>= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#size_level\">size_level</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#size_level\">size_level</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#size_level\">size_level</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#prio_tree_left_empty\">prio_tree_left_empty</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#prio_tree_right_empty\">prio_tree_right_empty</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#size_level\">size_level</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#size_level\">size_level</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a> = 1UL << (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *<a class=\"id\" href=\"#prio_tree_parent\">prio_tree_parent</a>(struct <a class=\"id\" href=\"#prio_tree_iter\">prio_tree_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a> == <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a> = 1UL;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#size_level\">size_level</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a> = 1UL;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a> <<= 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#size_level\">size_level</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#size_level\">size_level</a>--;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#size_level\">size_level</a> && (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#value\">value</a> &amp; <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#value\">value</a> ^= <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#overlap\">overlap</a>(struct <a class=\"id\" href=\"#prio_tree_iter\">prio_tree_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r_index\">r_index</a>, unsigned long <a class=\"id\" href=\"#h_index\">h_index</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#h_index\">h_index</a> >= <a class=\"id\" href=\"#r_index\">r_index</a> && <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#r_index\">r_index</a> <= <a class=\"id\" href=\"#h_index\">h_index</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * prio_tree_first:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Get the first prio_tree_node that overlaps with the interval [radix_index,</span>", 
"<span class=\"comment\"> * heap_index]. Note that always radix_index &lt;= heap_index. We do a pre-order</span>", 
"<span class=\"comment\"> * traversal of the tree.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *<a class=\"id\" href=\"#prio_tree_first\">prio_tree_first</a>(struct <a class=\"id\" href=\"#prio_tree_iter\">prio_tree_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prio_tree_root\">prio_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r_index\">r_index</a>, <a class=\"id\" href=\"#h_index\">h_index</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_PRIO_TREE_ITER\">INIT_PRIO_TREE_ITER</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prio_tree_empty\">prio_tree_empty</a>(<a class=\"id\" href=\"#root\">root</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_index\">get_index</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a>, &amp;<a class=\"id\" href=\"#r_index\">r_index</a>, &amp;<a class=\"id\" href=\"#h_index\">h_index</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#r_index\">r_index</a> &gt; <a class=\"id\" href=\"#h_index\">h_index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a> = 1UL << (<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#index_bits\">index_bits</a> - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a>;", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#overlap\">overlap</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#r_index\">r_index</a>, <a class=\"id\" href=\"#h_index\">h_index</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prio_tree_left\">prio_tree_left</a>(<a class=\"id\" href=\"#iter\">iter</a>, &amp;<a class=\"id\" href=\"#r_index\">r_index</a>, &amp;<a class=\"id\" href=\"#h_index\">h_index</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prio_tree_right\">prio_tree_right</a>(<a class=\"id\" href=\"#iter\">iter</a>, &amp;<a class=\"id\" href=\"#r_index\">r_index</a>, &amp;<a class=\"id\" href=\"#h_index\">h_index</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * prio_tree_next:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Get the next prio_tree_node that overlaps with the input interval in iter</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *<a class=\"id\" href=\"#prio_tree_next\">prio_tree_next</a>(struct <a class=\"id\" href=\"#prio_tree_iter\">prio_tree_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r_index\">r_index</a>, <a class=\"id\" href=\"#h_index\">h_index</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#prio_tree_first\">prio_tree_first</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#prio_tree_left\">prio_tree_left</a>(<a class=\"id\" href=\"#iter\">iter</a>, &amp;<a class=\"id\" href=\"#r_index\">r_index</a>, &amp;<a class=\"id\" href=\"#h_index\">h_index</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#overlap\">overlap</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#r_index\">r_index</a>, <a class=\"id\" href=\"#h_index\">h_index</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>;", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#prio_tree_right\">prio_tree_right</a>(<a class=\"id\" href=\"#iter\">iter</a>, &amp;<a class=\"id\" href=\"#r_index\">r_index</a>, &amp;<a class=\"id\" href=\"#h_index\">h_index</a>)) {", 
"<span class=\"ts\"/>    <span class=\"ts\"/>while (!<a class=\"id\" href=\"#prio_tree_root\">prio_tree_root</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#right\">right</a> == <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prio_tree_parent\">prio_tree_parent</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prio_tree_root\">prio_tree_root</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prio_tree_parent\">prio_tree_parent</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#overlap\">overlap</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#r_index\">r_index</a>, <a class=\"id\" href=\"#h_index\">h_index</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cur\">cur</a>;", 
"", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"}", 
];
xr_frag_insert('l/43/882ce49ef0916473fc99b20f66e2ab6f68812d.xr', __xr_tmp);
