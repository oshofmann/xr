var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2001 Sistina Software (UK) Limited.</span>", 
"<span class=\"comment\"> * Copyright (C) 2004-2008 Red Hat, Inc. All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the LGPL.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_DEVICE_MAPPER_H\">_LINUX_DEVICE_MAPPER_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_DEVICE_MAPPER_H\">_LINUX_DEVICE_MAPPER_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bio\">bio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#dm_dev\">dm_dev</a>;", 
"struct <a class=\"id\" href=\"#dm_target\">dm_target</a>;", 
"struct <a class=\"id\" href=\"#dm_table\">dm_table</a>;", 
"struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a>;", 
"struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a>;", 
"", 
"typedef enum { <a class=\"id\" href=\"#STATUSTYPE_INFO\">STATUSTYPE_INFO</a>, <a class=\"id\" href=\"#STATUSTYPE_TABLE\">STATUSTYPE_TABLE</a> } <a class=\"id\" href=\"#status_type_t\">status_type_t</a>;", 
"", 
"union <a class=\"id\" href=\"#map_info\">map_info</a> {", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#ll\">ll</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#target_request_nr\">target_request_nr</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In the constructor the target parameter will already have the</span>", 
"<span class=\"comment\"> * table, type, begin and len fields filled in.</span>", 
"<span class=\"comment\"> */</span>", 
"typedef int (*<a class=\"id\" href=\"#dm_ctr_fn\">dm_ctr_fn</a>) (struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#target\">target</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#argc\">argc</a>, char **<a class=\"id\" href=\"#argv\">argv</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The destructor doesn't need to free the dm_target, just</span>", 
"<span class=\"comment\"> * anything hidden ti-&gt;private.</span>", 
"<span class=\"comment\"> */</span>", 
"typedef void (*<a class=\"id\" href=\"#dm_dtr_fn\">dm_dtr_fn</a>) (struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The map function must return:</span>", 
"<span class=\"comment\"> * &lt; 0: error</span>", 
"<span class=\"comment\"> * = 0: The target will handle the io by resubmitting it later</span>", 
"<span class=\"comment\"> * = 1: simple remap complete</span>", 
"<span class=\"comment\"> * = 2: The target wants to push back the io</span>", 
"<span class=\"comment\"> */</span>", 
"typedef int (*<a class=\"id\" href=\"#dm_map_fn\">dm_map_fn</a>) (struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  union <a class=\"id\" href=\"#map_info\">map_info</a> *<a class=\"id\" href=\"#map_context\">map_context</a>);", 
"typedef int (*<a class=\"id\" href=\"#dm_map_request_fn\">dm_map_request_fn</a>) (struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#clone\">clone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  union <a class=\"id\" href=\"#map_info\">map_info</a> *<a class=\"id\" href=\"#map_context\">map_context</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> * &lt; 0 : error (currently ignored)</span>", 
"<span class=\"comment\"> * 0   : ended successfully</span>", 
"<span class=\"comment\"> * 1   : for some reason the io has still not completed (eg,</span>", 
"<span class=\"comment\"> *       multipath target might want to requeue a failed io).</span>", 
"<span class=\"comment\"> * 2   : The target wants to push back the io</span>", 
"<span class=\"comment\"> */</span>", 
"typedef int (*<a class=\"id\" href=\"#dm_endio_fn\">dm_endio_fn</a>) (struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, int <a class=\"id\" href=\"#error\">error</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    union <a class=\"id\" href=\"#map_info\">map_info</a> *<a class=\"id\" href=\"#map_context\">map_context</a>);", 
"typedef int (*<a class=\"id\" href=\"#dm_request_endio_fn\">dm_request_endio_fn</a>) (struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#clone\">clone</a>, int <a class=\"id\" href=\"#error\">error</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    union <a class=\"id\" href=\"#map_info\">map_info</a> *<a class=\"id\" href=\"#map_context\">map_context</a>);", 
"", 
"typedef void (*<a class=\"id\" href=\"#dm_flush_fn\">dm_flush_fn</a>) (struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>);", 
"typedef void (*<a class=\"id\" href=\"#dm_presuspend_fn\">dm_presuspend_fn</a>) (struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>);", 
"typedef void (*<a class=\"id\" href=\"#dm_postsuspend_fn\">dm_postsuspend_fn</a>) (struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>);", 
"typedef int (*<a class=\"id\" href=\"#dm_preresume_fn\">dm_preresume_fn</a>) (struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>);", 
"typedef void (*<a class=\"id\" href=\"#dm_resume_fn\">dm_resume_fn</a>) (struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>);", 
"", 
"typedef int (*<a class=\"id\" href=\"#dm_status_fn\">dm_status_fn</a>) (struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#status_type_t\">status_type_t</a> <a class=\"id\" href=\"#status_type\">status_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     char *<a class=\"id\" href=\"#result\">result</a>, unsigned int <a class=\"id\" href=\"#maxlen\">maxlen</a>);", 
"", 
"typedef int (*<a class=\"id\" href=\"#dm_message_fn\">dm_message_fn</a>) (struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, unsigned <a class=\"id\" href=\"#argc\">argc</a>, char **<a class=\"id\" href=\"#argv\">argv</a>);", 
"", 
"typedef int (*<a class=\"id\" href=\"#dm_ioctl_fn\">dm_ioctl_fn</a>) (struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"typedef int (*<a class=\"id\" href=\"#dm_merge_fn\">dm_merge_fn</a>) (struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, struct <a class=\"id\" href=\"#bvec_merge_data\">bvec_merge_data</a> *<a class=\"id\" href=\"#bvm\">bvm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#biovec\">biovec</a>, int <a class=\"id\" href=\"#max_size\">max_size</a>);", 
"", 
"typedef int (*<a class=\"id\" href=\"#iterate_devices_callout_fn\">iterate_devices_callout_fn</a>) (struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#dm_dev\">dm_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   void *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"typedef int (*<a class=\"id\" href=\"#dm_iterate_devices_fn\">dm_iterate_devices_fn</a>) (struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#iterate_devices_callout_fn\">iterate_devices_callout_fn</a> <a class=\"id\" href=\"#fn\">fn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"typedef void (*<a class=\"id\" href=\"#dm_io_hints_fn\">dm_io_hints_fn</a>) (struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#queue_limits\">queue_limits</a> *<a class=\"id\" href=\"#limits\">limits</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> *    0: The target can handle the next I/O immediately.</span>", 
"<span class=\"comment\"> *    1: The target can't handle the next I/O immediately.</span>", 
"<span class=\"comment\"> */</span>", 
"typedef int (*<a class=\"id\" href=\"#dm_busy_fn\">dm_busy_fn</a>) (struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>);", 
"", 
"void <a class=\"id\" href=\"#dm_error\">dm_error</a>(const char *<a class=\"id\" href=\"#message\">message</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Combine device limits.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dm_set_device_limits\">dm_set_device_limits</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, struct <a class=\"id\" href=\"#dm_dev\">dm_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#len\">len</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"struct <a class=\"id\" href=\"#dm_dev\">dm_dev</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[16];", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Constructors should call these functions to ensure destination devices</span>", 
"<span class=\"comment\"> * are opened/closed correctly.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dm_get_device\">dm_get_device</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, const char *<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#dm_dev\">dm_dev</a> **<a class=\"id\" href=\"#result\">result</a>);", 
"void <a class=\"id\" href=\"#dm_put_device\">dm_put_device</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, struct <a class=\"id\" href=\"#dm_dev\">dm_dev</a> *<a class=\"id\" href=\"#d\">d</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Information about a target type</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Target features</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#target_type\">target_type</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#features\">features</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#module\">module</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#version\">version</a>[3];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_ctr_fn\">dm_ctr_fn</a> <a class=\"id\" href=\"#ctr\">ctr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_dtr_fn\">dm_dtr_fn</a> <a class=\"id\" href=\"#dtr\">dtr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_map_fn\">dm_map_fn</a> <a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_map_request_fn\">dm_map_request_fn</a> <a class=\"id\" href=\"#map_rq\">map_rq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_endio_fn\">dm_endio_fn</a> <a class=\"id\" href=\"#end_io\">end_io</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_request_endio_fn\">dm_request_endio_fn</a> <a class=\"id\" href=\"#rq_end_io\">rq_end_io</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_flush_fn\">dm_flush_fn</a> <a class=\"id\" href=\"#flush\">flush</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_presuspend_fn\">dm_presuspend_fn</a> <a class=\"id\" href=\"#presuspend\">presuspend</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_postsuspend_fn\">dm_postsuspend_fn</a> <a class=\"id\" href=\"#postsuspend\">postsuspend</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_preresume_fn\">dm_preresume_fn</a> <a class=\"id\" href=\"#preresume\">preresume</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_resume_fn\">dm_resume_fn</a> <a class=\"id\" href=\"#resume\">resume</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_status_fn\">dm_status_fn</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_message_fn\">dm_message_fn</a> <a class=\"id\" href=\"#message\">message</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_ioctl_fn\">dm_ioctl_fn</a> <a class=\"id\" href=\"#ioctl\">ioctl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_merge_fn\">dm_merge_fn</a> <a class=\"id\" href=\"#merge\">merge</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_busy_fn\">dm_busy_fn</a> <a class=\"id\" href=\"#busy\">busy</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_iterate_devices_fn\">dm_iterate_devices_fn</a> <a class=\"id\" href=\"#iterate_devices\">iterate_devices</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_io_hints_fn\">dm_io_hints_fn</a> <a class=\"id\" href=\"#io_hints\">io_hints</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* For internal device-mapper use. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#dm_target\">dm_target</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#table\">table</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#target_type\">target_type</a> *<a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* target limits */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#begin\">begin</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Always a power of 2 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#split_io\">split_io</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A number of zero-length barrier requests that will be submitted</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the target for the purpose of flushing cache.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The request number will be placed in union map_info-&gt;target_request_nr.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is a responsibility of the target driver to remap these requests</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the real underlying devices.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#num_flush_requests\">num_flush_requests</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The number of discard requests that will be submitted to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * target.  map_info-&gt;request_nr is used just like num_flush_requests.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#num_discard_requests\">num_discard_requests</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* target specific data */</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Used to provide an error string from the ctr */</span>", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#error\">error</a>;", 
"};", 
"", 
"int <a class=\"id\" href=\"#dm_register_target\">dm_register_target</a>(struct <a class=\"id\" href=\"#target_type\">target_type</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"void <a class=\"id\" href=\"#dm_unregister_target\">dm_unregister_target</a>(struct <a class=\"id\" href=\"#target_type\">target_type</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"comment\">/*-----------------------------------------------------------------</span>", 
"<span class=\"comment\"> * Functions for creating and manipulating mapped devices.</span>", 
"<span class=\"comment\"> * Drop the reference with dm_put when you finish with the object.</span>", 
"<span class=\"comment\"> *---------------------------------------------------------------*/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * DM_ANY_MINOR chooses the next available minor number.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DM_ANY_MINOR\">DM_ANY_MINOR</a> (-1)", 
"int <a class=\"id\" href=\"#dm_create\">dm_create</a>(int <a class=\"id\" href=\"#minor\">minor</a>, struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> **<a class=\"id\" href=\"#md\">md</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Reference counting for md.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#dm_get_md\">dm_get_md</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>);", 
"void <a class=\"id\" href=\"#dm_get\">dm_get</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>);", 
"void <a class=\"id\" href=\"#dm_put\">dm_put</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * An arbitrary pointer may be stored alongside a mapped device.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dm_set_mdptr\">dm_set_mdptr</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>, void *<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"void *<a class=\"id\" href=\"#dm_get_mdptr\">dm_get_mdptr</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A device can still be used while suspended, but I/O is deferred.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dm_suspend\">dm_suspend</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>, unsigned <a class=\"id\" href=\"#suspend_flags\">suspend_flags</a>);", 
"int <a class=\"id\" href=\"#dm_resume\">dm_resume</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Event functions.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#dm_get_event_nr\">dm_get_event_nr</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>);", 
"int <a class=\"id\" href=\"#dm_wait_event\">dm_wait_event</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>, int <a class=\"id\" href=\"#event_nr\">event_nr</a>);", 
"<a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#dm_next_uevent_seq\">dm_next_uevent_seq</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>);", 
"void <a class=\"id\" href=\"#dm_uevent_add\">dm_uevent_add</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#elist\">elist</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Info functions.</span>", 
"<span class=\"comment\"> */</span>", 
"const char *<a class=\"id\" href=\"#dm_device_name\">dm_device_name</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>);", 
"int <a class=\"id\" href=\"#dm_copy_name_and_uuid\">dm_copy_name_and_uuid</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>, char *<a class=\"id\" href=\"#name\">name</a>, char *<a class=\"id\" href=\"#uuid\">uuid</a>);", 
"struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#dm_disk\">dm_disk</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>);", 
"int <a class=\"id\" href=\"#dm_suspended\">dm_suspended</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>);", 
"int <a class=\"id\" href=\"#dm_noflush_suspending\">dm_noflush_suspending</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>);", 
"union <a class=\"id\" href=\"#map_info\">map_info</a> *<a class=\"id\" href=\"#dm_get_mapinfo\">dm_get_mapinfo</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>);", 
"union <a class=\"id\" href=\"#map_info\">map_info</a> *<a class=\"id\" href=\"#dm_get_rq_mapinfo\">dm_get_rq_mapinfo</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Geometry functions.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dm_get_geometry\">dm_get_geometry</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>, struct <a class=\"id\" href=\"#hd_geometry\">hd_geometry</a> *<a class=\"id\" href=\"#geo\">geo</a>);", 
"int <a class=\"id\" href=\"#dm_set_geometry\">dm_set_geometry</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>, struct <a class=\"id\" href=\"#hd_geometry\">hd_geometry</a> *<a class=\"id\" href=\"#geo\">geo</a>);", 
"", 
"", 
"<span class=\"comment\">/*-----------------------------------------------------------------</span>", 
"<span class=\"comment\"> * Functions for manipulating device-mapper tables.</span>", 
"<span class=\"comment\"> *---------------------------------------------------------------*/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * First create an empty table.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dm_table_create\">dm_table_create</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> **<a class=\"id\" href=\"#result\">result</a>, <a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned <a class=\"id\" href=\"#num_targets\">num_targets</a>, struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Then call this once for each target.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dm_table_add_target\">dm_table_add_target</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>, const char *<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#len\">len</a>, char *<a class=\"id\" href=\"#params\">params</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Finally call this to make the table ready for use.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dm_table_complete\">dm_table_complete</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unplug all devices in a table.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dm_table_unplug_all\">dm_table_unplug_all</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Table reference counting.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#dm_get_live_table\">dm_get_live_table</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>);", 
"void <a class=\"id\" href=\"#dm_table_get\">dm_table_get</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"void <a class=\"id\" href=\"#dm_table_put\">dm_table_put</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Queries</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#dm_table_get_size\">dm_table_get_size</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"unsigned int <a class=\"id\" href=\"#dm_table_get_num_targets\">dm_table_get_num_targets</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"<a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#dm_table_get_mode\">dm_table_get_mode</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#dm_table_get_md\">dm_table_get_md</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Trigger an event.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dm_table_event\">dm_table_event</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The device must be suspended before calling this method.</span>", 
"<span class=\"comment\"> * Returns the previous table, which the caller must destroy.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#dm_swap_table\">dm_swap_table</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A wrapper around vmalloc.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#dm_vcalloc\">dm_vcalloc</a>(unsigned long <a class=\"id\" href=\"#nmemb\">nmemb</a>, unsigned long <a class=\"id\" href=\"#elem_size\">elem_size</a>);", 
"", 
"<span class=\"comment\">/*-----------------------------------------------------------------</span>", 
"<span class=\"comment\"> * Macros.</span>", 
"<span class=\"comment\"> *---------------------------------------------------------------*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DM_NAME\">DM_NAME</a> \"device-mapper\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMCRIT\">DMCRIT</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#arg\">arg</a>...) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> <a class=\"id\" href=\"#DM_NAME\">DM_NAME</a> \": \" <a class=\"id\" href=\"#DM_MSG_PREFIX\">DM_MSG_PREFIX</a> \": \" <a class=\"id\" href=\"#f\">f</a> \"\\n\", ## <a class=\"id\" href=\"#arg\">arg</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMERR\">DMERR</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#arg\">arg</a>...) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#DM_NAME\">DM_NAME</a> \": \" <a class=\"id\" href=\"#DM_MSG_PREFIX\">DM_MSG_PREFIX</a> \": \" <a class=\"id\" href=\"#f\">f</a> \"\\n\", ## <a class=\"id\" href=\"#arg\">arg</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMERR_LIMIT\">DMERR_LIMIT</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#arg\">arg</a>...) \\", 
"<span class=\"ts\"/>do { \\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>())<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#DM_NAME\">DM_NAME</a> \": \" <a class=\"id\" href=\"#DM_MSG_PREFIX\">DM_MSG_PREFIX</a> \": \" \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#f\">f</a> \"\\n\", ## <a class=\"id\" href=\"#arg\">arg</a>); \\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMWARN\">DMWARN</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#arg\">arg</a>...) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> <a class=\"id\" href=\"#DM_NAME\">DM_NAME</a> \": \" <a class=\"id\" href=\"#DM_MSG_PREFIX\">DM_MSG_PREFIX</a> \": \" <a class=\"id\" href=\"#f\">f</a> \"\\n\", ## <a class=\"id\" href=\"#arg\">arg</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMWARN_LIMIT\">DMWARN_LIMIT</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#arg\">arg</a>...) \\", 
"<span class=\"ts\"/>do { \\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>())<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> <a class=\"id\" href=\"#DM_NAME\">DM_NAME</a> \": \" <a class=\"id\" href=\"#DM_MSG_PREFIX\">DM_MSG_PREFIX</a> \": \" \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#f\">f</a> \"\\n\", ## <a class=\"id\" href=\"#arg\">arg</a>); \\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMINFO\">DMINFO</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#arg\">arg</a>...) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> <a class=\"id\" href=\"#DM_NAME\">DM_NAME</a> \": \" <a class=\"id\" href=\"#DM_MSG_PREFIX\">DM_MSG_PREFIX</a> \": \" <a class=\"id\" href=\"#f\">f</a> \"\\n\", ## <a class=\"id\" href=\"#arg\">arg</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMINFO_LIMIT\">DMINFO_LIMIT</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#arg\">arg</a>...) \\", 
"<span class=\"ts\"/>do { \\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>())<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> <a class=\"id\" href=\"#DM_NAME\">DM_NAME</a> \": \" <a class=\"id\" href=\"#DM_MSG_PREFIX\">DM_MSG_PREFIX</a> \": \" <a class=\"id\" href=\"#f\">f</a> \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"\\n\", ## <a class=\"id\" href=\"#arg\">arg</a>); \\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DM_DEBUG\">CONFIG_DM_DEBUG</a>", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMDEBUG\">DMDEBUG</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#arg\">arg</a>...) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> <a class=\"id\" href=\"#DM_NAME\">DM_NAME</a> \": \" <a class=\"id\" href=\"#DM_MSG_PREFIX\">DM_MSG_PREFIX</a> \" DEBUG: \" <a class=\"id\" href=\"#f\">f</a> \"\\n\", ## <a class=\"id\" href=\"#arg\">arg</a>)", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMDEBUG_LIMIT\">DMDEBUG_LIMIT</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#arg\">arg</a>...) \\", 
"<span class=\"ts\"/>do { \\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>())<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> <a class=\"id\" href=\"#DM_NAME\">DM_NAME</a> \": \" <a class=\"id\" href=\"#DM_MSG_PREFIX\">DM_MSG_PREFIX</a> \": \" <a class=\"id\" href=\"#f\">f</a> \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"\\n\", ## <a class=\"id\" href=\"#arg\">arg</a>); \\", 
"<span class=\"ts\"/>} while (0)", 
"#else", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMDEBUG\">DMDEBUG</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#arg\">arg</a>...) do {} while (0)", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMDEBUG_LIMIT\">DMDEBUG_LIMIT</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#arg\">arg</a>...) do {} while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMEMIT\">DMEMIT</a>(<a class=\"id\" href=\"#x\">x</a>...) <a class=\"id\" href=\"#sz\">sz</a> += ((<a class=\"id\" href=\"#sz\">sz</a> >= <a class=\"id\" href=\"#maxlen\">maxlen</a>) ? \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  0 : <a class=\"id\" href=\"#scnprintf\">scnprintf</a>(<a class=\"id\" href=\"#result\">result</a> + <a class=\"id\" href=\"#sz\">sz</a>, <a class=\"id\" href=\"#maxlen\">maxlen</a> - <a class=\"id\" href=\"#sz\">sz</a>, <a class=\"id\" href=\"#x\">x</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a> 9", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Definitions of return values from target end_io function.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DM_ENDIO_INCOMPLETE\">DM_ENDIO_INCOMPLETE</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DM_ENDIO_REQUEUE\">DM_ENDIO_REQUEUE</a><span class=\"ts\"/>2", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Definitions of return values from target map function.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DM_MAPIO_SUBMITTED\">DM_MAPIO_SUBMITTED</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DM_MAPIO_REMAPPED\">DM_MAPIO_REMAPPED</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DM_MAPIO_REQUEUE\">DM_MAPIO_REQUEUE</a><span class=\"ts\"/><a class=\"id\" href=\"#DM_ENDIO_REQUEUE\">DM_ENDIO_REQUEUE</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Ceiling(n / sz)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dm_div_up\">dm_div_up</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#sz\">sz</a>) (((<a class=\"id\" href=\"#n\">n</a>) + (<a class=\"id\" href=\"#sz\">sz</a>) - 1) / (<a class=\"id\" href=\"#sz\">sz</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dm_sector_div_up\">dm_sector_div_up</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#sz\">sz</a>) ( \\", 
"{ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#_r\">_r</a> = ((<a class=\"id\" href=\"#n\">n</a>) + (<a class=\"id\" href=\"#sz\">sz</a>) - 1); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_div\">sector_div</a>(<a class=\"id\" href=\"#_r\">_r</a>, (<a class=\"id\" href=\"#sz\">sz</a>)); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_r\">_r</a>; \\", 
"} \\", 
")", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ceiling(n / size) * size</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dm_round_up\">dm_round_up</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#sz\">sz</a>) (<a class=\"id\" href=\"#dm_div_up\">dm_div_up</a>((<a class=\"id\" href=\"#n\">n</a>), (<a class=\"id\" href=\"#sz\">sz</a>)) * (<a class=\"id\" href=\"#sz\">sz</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dm_array_too_big\">dm_array_too_big</a>(<a class=\"id\" href=\"#fixed\">fixed</a>, <a class=\"id\" href=\"#obj\">obj</a>, <a class=\"id\" href=\"#num\">num</a>) \\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#num\">num</a>) &gt; (<a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a> - (<a class=\"id\" href=\"#fixed\">fixed</a>)) / (<a class=\"id\" href=\"#obj\">obj</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Sector offset taken relative to the start of the target instead of</span>", 
"<span class=\"comment\"> * relative to the start of the device.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dm_target_offset\">dm_target_offset</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#sector\">sector</a>) ((<a class=\"id\" href=\"#sector\">sector</a>) - (<a class=\"id\" href=\"#ti\">ti</a>)-><a class=\"id\" href=\"#begin\">begin</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#to_sector\">to_sector</a>(unsigned long <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#n\">n</a> >> <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#to_bytes\">to_bytes</a>(<a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#n\">n</a> << <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a>);", 
"}", 
"", 
"<span class=\"comment\">/*-----------------------------------------------------------------</span>", 
"<span class=\"comment\"> * Helper for block layer and dm core operations</span>", 
"<span class=\"comment\"> *---------------------------------------------------------------*/</span>", 
"void <a class=\"id\" href=\"#dm_dispatch_request\">dm_dispatch_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>);", 
"void <a class=\"id\" href=\"#dm_requeue_unmapped_request\">dm_requeue_unmapped_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>);", 
"void <a class=\"id\" href=\"#dm_kill_unmapped_request\">dm_kill_unmapped_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, int <a class=\"id\" href=\"#error\">error</a>);", 
"int <a class=\"id\" href=\"#dm_underlying_device_busy\">dm_underlying_device_busy</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* _LINUX_DEVICE_MAPPER_H */</span>", 
];
xr_frag_insert('l/43/9b626856185550d8671b058a244636ce6d1041.xr', __xr_tmp);
