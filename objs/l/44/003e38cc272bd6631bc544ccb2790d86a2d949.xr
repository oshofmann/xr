var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * class.c - basic device class management</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2002-3 Patrick Mochel</span>", 
"<span class=\"comment\"> * Copyright (c) 2002-3 Open Source Development Labs</span>", 
"<span class=\"comment\"> * Copyright (c) 2003-2004 Greg Kroah-Hartman</span>", 
"<span class=\"comment\"> * Copyright (c) 2003-2004 IBM Corp.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPLv2</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdev_t\">kdev_t</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#genhd\">genhd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"base.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_class_attr\">to_class_attr</a>(<a class=\"id\" href=\"#_attr\">_attr</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#_attr\">_attr</a>, struct <a class=\"id\" href=\"#class_attribute\">class_attribute</a>, <a class=\"id\" href=\"#attr\">attr</a>)", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#class_attr_show\">class_attr_show</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#attribute\">attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class_attribute\">class_attribute</a> *<a class=\"id\" href=\"#class_attr\">class_attr</a> = <a class=\"id\" href=\"#to_class_attr\">to_class_attr</a>(<a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class_private\">class_private</a> *<a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#to_class\">to_class</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#class_attr\">class_attr</a>-><a class=\"id\" href=\"#show\">show</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#class_attr\">class_attr</a>-><a class=\"id\" href=\"#show\">show</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#class\">class</a>, <a class=\"id\" href=\"#class_attr\">class_attr</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#class_attr_store\">class_attr_store</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#attribute\">attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class_attribute\">class_attribute</a> *<a class=\"id\" href=\"#class_attr\">class_attr</a> = <a class=\"id\" href=\"#to_class_attr\">to_class_attr</a>(<a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class_private\">class_private</a> *<a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#to_class\">to_class</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#class_attr\">class_attr</a>-><a class=\"id\" href=\"#store\">store</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#class_attr\">class_attr</a>-><a class=\"id\" href=\"#store\">store</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#class\">class</a>, <a class=\"id\" href=\"#class_attr\">class_attr</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#class_release\">class_release</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class_private\">class_private</a> *<a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#to_class\">to_class</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#class\">class</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"class '%s': release.\\n\", <a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#class_release\">class_release</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#class_release\">class_release</a>(<a class=\"id\" href=\"#class\">class</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"class '%s' does not have a release() function, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"be careful\\n\", <a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cp\">cp</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#kobj_ns_type_operations\">kobj_ns_type_operations</a> *<a class=\"id\" href=\"#class_child_ns_type\">class_child_ns_type</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class_private\">class_private</a> *<a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#to_class\">to_class</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#class\">class</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#ns_type\">ns_type</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#sysfs_ops\">sysfs_ops</a> <a class=\"id\" href=\"#class_sysfs_ops\">class_sysfs_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a><span class=\"ts\"/>= <a class=\"id\" href=\"#class_attr_show\">class_attr_show</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#store\">store</a><span class=\"ts\"/>= <a class=\"id\" href=\"#class_attr_store\">class_attr_store</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#kobj_type\">kobj_type</a> <a class=\"id\" href=\"#class_ktype\">class_ktype</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sysfs_ops\">sysfs_ops</a><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#class_sysfs_ops\">class_sysfs_ops</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#class_release\">class_release</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#child_ns_type\">child_ns_type</a><span class=\"ts\"/>= <a class=\"id\" href=\"#class_child_ns_type\">class_child_ns_type</a>,", 
"};", 
"", 
"<span class=\"comment\">/* Hotplug events for classes go to the class class_subsys */</span>", 
"static struct <a class=\"id\" href=\"#kset\">kset</a> *<a class=\"id\" href=\"#class_kset\">class_kset</a>;", 
"", 
"", 
"int <a class=\"id\" href=\"#class_create_file\">class_create_file</a>(struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#cls\">cls</a>, const struct <a class=\"id\" href=\"#class_attribute\">class_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cls\">cls</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysfs_create_file\">sysfs_create_file</a>(&amp;<a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#class_subsys\">class_subsys</a>.<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#class_remove_file\">class_remove_file</a>(struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#cls\">cls</a>, const struct <a class=\"id\" href=\"#class_attribute\">class_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cls\">cls</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_file\">sysfs_remove_file</a>(&amp;<a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#class_subsys\">class_subsys</a>.<a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#attr\">attr</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#class_get\">class_get</a>(struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#cls\">cls</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cls\">cls</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kset_get\">kset_get</a>(&amp;<a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#class_subsys\">class_subsys</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cls\">cls</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#class_put\">class_put</a>(struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#cls\">cls</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cls\">cls</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kset_put\">kset_put</a>(&amp;<a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#class_subsys\">class_subsys</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#add_class_attrs\">add_class_attrs</a>(struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#cls\">cls</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#class_attrs\">class_attrs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#attr_name\">attr_name</a>(<a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#class_attrs\">class_attrs</a>[<a class=\"id\" href=\"#i\">i</a>]); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#class_create_file\">class_create_file</a>(<a class=\"id\" href=\"#cls\">cls</a>, &amp;<a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#class_attrs\">class_attrs</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/>while (--<a class=\"id\" href=\"#i\">i</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#class_remove_file\">class_remove_file</a>(<a class=\"id\" href=\"#cls\">cls</a>, &amp;<a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#class_attrs\">class_attrs</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#remove_class_attrs\">remove_class_attrs</a>(struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#cls\">cls</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#class_attrs\">class_attrs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#attr_name\">attr_name</a>(<a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#class_attrs\">class_attrs</a>[<a class=\"id\" href=\"#i\">i</a>]); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#class_remove_file\">class_remove_file</a>(<a class=\"id\" href=\"#cls\">cls</a>, &amp;<a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#class_attrs\">class_attrs</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#klist_class_dev_get\">klist_class_dev_get</a>(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#knode_class\">knode_class</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_device\">get_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#klist_class_dev_put\">klist_class_dev_put</a>(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#knode_class\">knode_class</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#__class_register\">__class_register</a>(struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#cls\">cls</a>, struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class_private\">class_private</a> *<a class=\"id\" href=\"#cp\">cp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"device class '%s': registering\\n\", <a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#cp\">cp</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cp\">cp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist_init\">klist_init</a>(&amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#class_devices\">class_devices</a>, <a class=\"id\" href=\"#klist_class_dev_get\">klist_class_dev_get</a>, <a class=\"id\" href=\"#klist_class_dev_put\">klist_class_dev_put</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#class_interfaces\">class_interfaces</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kset_init\">kset_init</a>(&amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#class_dirs\">class_dirs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mutex_init\">__mutex_init</a>(&amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#class_mutex\">class_mutex</a>, \"struct class mutex\", <a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#kobject_set_name\">kobject_set_name</a>(&amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#class_subsys\">class_subsys</a>.<a class=\"id\" href=\"#kobj\">kobj</a>, \"%s\", <a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cp\">cp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set the default /sys/dev directory for devices of this class */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#dev_kobj\">dev_kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#dev_kobj\">dev_kobj</a> = <a class=\"id\" href=\"#sysfs_dev_char_kobj\">sysfs_dev_char_kobj</a>;", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SYSFS_DEPRECATED\">CONFIG_SYSFS_DEPRECATED</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_BLOCK\">CONFIG_BLOCK</a>)", 
"<span class=\"ts\"/><span class=\"comment\">/* let the block class directory show up in the root of sysfs */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cls\">cls</a> != &amp;<a class=\"id\" href=\"#block_class\">block_class</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#class_subsys\">class_subsys</a>.<a class=\"id\" href=\"#kobj\">kobj</a>.<a class=\"id\" href=\"#kset\">kset</a> = <a class=\"id\" href=\"#class_kset\">class_kset</a>;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#class_subsys\">class_subsys</a>.<a class=\"id\" href=\"#kobj\">kobj</a>.<a class=\"id\" href=\"#kset\">kset</a> = <a class=\"id\" href=\"#class_kset\">class_kset</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#class_subsys\">class_subsys</a>.<a class=\"id\" href=\"#kobj\">kobj</a>.<a class=\"id\" href=\"#ktype\">ktype</a> = &amp;<a class=\"id\" href=\"#class_ktype\">class_ktype</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#cls\">cls</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#cp\">cp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#kset_register\">kset_register</a>(&amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#class_subsys\">class_subsys</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cp\">cp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#add_class_attrs\">add_class_attrs</a>(<a class=\"id\" href=\"#class_get\">class_get</a>(<a class=\"id\" href=\"#cls\">cls</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_put\">class_put</a>(<a class=\"id\" href=\"#cls\">cls</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__class_register\">__class_register</a>);", 
"", 
"void <a class=\"id\" href=\"#class_unregister\">class_unregister</a>(struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#cls\">cls</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"device class '%s': unregistering\\n\", <a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remove_class_attrs\">remove_class_attrs</a>(<a class=\"id\" href=\"#cls\">cls</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kset_unregister\">kset_unregister</a>(&amp;<a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#class_subsys\">class_subsys</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#class_create_release\">class_create_release</a>(struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#cls\">cls</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s called for %s\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cls\">cls</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * class_create - create a struct class structure</span>", 
"<span class=\"comment\"> * @owner: pointer to the module that is to \"own\" this struct class</span>", 
"<span class=\"comment\"> * @name: pointer to a string for the name of this class.</span>", 
"<span class=\"comment\"> * @key: the lock_class_key for this class; used by mutex lock debugging</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is used to create a struct class pointer that can then be used</span>", 
"<span class=\"comment\"> * in calls to device_create().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns &amp;struct class pointer on success, or ERR_PTR() on error.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note, the pointer created here is to be destroyed when finished by</span>", 
"<span class=\"comment\"> * making a call to class_destroy().</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#__class_create\">__class_create</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#cls\">cls</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cls\">cls</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#cls\">cls</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cls\">cls</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#class_release\">class_release</a> = <a class=\"id\" href=\"#class_create_release\">class_create_release</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#__class_register\">__class_register</a>(<a class=\"id\" href=\"#cls\">cls</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cls\">cls</a>;", 
"", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cls\">cls</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#retval\">retval</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__class_create\">__class_create</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * class_destroy - destroys a struct class structure</span>", 
"<span class=\"comment\"> * @cls: pointer to the struct class that is to be destroyed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note, the pointer to be destroyed must have been created with a call</span>", 
"<span class=\"comment\"> * to class_create().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#class_destroy\">class_destroy</a>(struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#cls\">cls</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#cls\">cls</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) || (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#cls\">cls</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_unregister\">class_unregister</a>(<a class=\"id\" href=\"#cls\">cls</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSFS_DEPRECATED\">CONFIG_SYSFS_DEPRECATED</a>", 
"char *<a class=\"id\" href=\"#make_class_name\">make_class_name</a>(const char *<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#class_name\">class_name</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#name\">name</a>) + <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#kobj\">kobj</a>)) + 2;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_name\">class_name</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#class_name\">class_name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#class_name\">class_name</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcat\">strcat</a>(<a class=\"id\" href=\"#class_name\">class_name</a>, \":\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcat\">strcat</a>(<a class=\"id\" href=\"#class_name\">class_name</a>, <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#kobj\">kobj</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#class_name\">class_name</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * class_dev_iter_init - initialize class device iterator</span>", 
"<span class=\"comment\"> * @iter: class iterator to initialize</span>", 
"<span class=\"comment\"> * @class: the class we wanna iterate over</span>", 
"<span class=\"comment\"> * @start: the device to start iterating from, if any</span>", 
"<span class=\"comment\"> * @type: device_type of the devices to iterate over, NULL for all</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Initialize class iterator @iter such that it iterates over devices</span>", 
"<span class=\"comment\"> * of @class.  If @start is set, the list iteration will start there,</span>", 
"<span class=\"comment\"> * otherwise if it is NULL, the iteration starts at the beginning of</span>", 
"<span class=\"comment\"> * the list.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#class_dev_iter_init\">class_dev_iter_init</a>(struct <a class=\"id\" href=\"#class_dev_iter\">class_dev_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>, struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#class\">class</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#start\">start</a>, const struct <a class=\"id\" href=\"#device_type\">device_type</a> *<a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#start_knode\">start_knode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_knode\">start_knode</a> = &amp;<a class=\"id\" href=\"#start\">start</a>-><a class=\"id\" href=\"#knode_class\">knode_class</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist_iter_init_node\">klist_iter_init_node</a>(&amp;<a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#class_devices\">class_devices</a>, &amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#ki\">ki</a>, <a class=\"id\" href=\"#start_knode\">start_knode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#class_dev_iter_init\">class_dev_iter_init</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * class_dev_iter_next - iterate to the next device</span>", 
"<span class=\"comment\"> * @iter: class iterator to proceed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Proceed @iter to the next device and return it.  Returns NULL if</span>", 
"<span class=\"comment\"> * iteration is complete.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The returned device is referenced and won't be released till</span>", 
"<span class=\"comment\"> * iterator is proceed to the next device or exited.  The caller is</span>", 
"<span class=\"comment\"> * free to do whatever it wants to do with the device including</span>", 
"<span class=\"comment\"> * calling back into class code.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#class_dev_iter_next\">class_dev_iter_next</a>(struct <a class=\"id\" href=\"#class_dev_iter\">class_dev_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#knode\">knode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#knode\">knode</a> = <a class=\"id\" href=\"#klist_next\">klist_next</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#ki\">ki</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#knode\">knode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#knode\">knode</a>, struct <a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#knode_class\">knode_class</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#type\">type</a> || <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#class_dev_iter_next\">class_dev_iter_next</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * class_dev_iter_exit - finish iteration</span>", 
"<span class=\"comment\"> * @iter: class iterator to finish</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Finish an iteration.  Always call this function after iteration is</span>", 
"<span class=\"comment\"> * complete whether the iteration ran till the end or not.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#class_dev_iter_exit\">class_dev_iter_exit</a>(struct <a class=\"id\" href=\"#class_dev_iter\">class_dev_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist_iter_exit\">klist_iter_exit</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#ki\">ki</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#class_dev_iter_exit\">class_dev_iter_exit</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * class_for_each_device - device iterator</span>", 
"<span class=\"comment\"> * @class: the class we're iterating</span>", 
"<span class=\"comment\"> * @start: the device to start with in the list, if any.</span>", 
"<span class=\"comment\"> * @data: data for the callback</span>", 
"<span class=\"comment\"> * @fn: function to be called for each device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Iterate over @class's list of devices, and call @fn for each,</span>", 
"<span class=\"comment\"> * passing it @data.  If @start is set, the list iteration will start</span>", 
"<span class=\"comment\"> * there, otherwise if it is NULL, the iteration starts at the</span>", 
"<span class=\"comment\"> * beginning of the list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We check the return of @fn each time. If it returns anything</span>", 
"<span class=\"comment\"> * other than 0, we break out and return that value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @fn is allowed to do anything including calling back into class</span>", 
"<span class=\"comment\"> * code.  There's no locking restriction.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#class_for_each_device\">class_for_each_device</a>(struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#class\">class</a>, struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#data\">data</a>, int (*<a class=\"id\" href=\"#fn\">fn</a>)(struct <a class=\"id\" href=\"#device\">device</a> *, void *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class_dev_iter\">class_dev_iter</a> <a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#class\">class</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, \"%s called for class '%s' before it was initialized\",", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_dev_iter_init\">class_dev_iter_init</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#class\">class</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#class_dev_iter_next\">class_dev_iter_next</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_dev_iter_exit\">class_dev_iter_exit</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#class_for_each_device\">class_for_each_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * class_find_device - device iterator for locating a particular device</span>", 
"<span class=\"comment\"> * @class: the class we're iterating</span>", 
"<span class=\"comment\"> * @start: Device to begin with</span>", 
"<span class=\"comment\"> * @data: data for the match function</span>", 
"<span class=\"comment\"> * @match: function to check device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is similar to the class_for_each_dev() function above, but it</span>", 
"<span class=\"comment\"> * returns a reference to a device that is 'found' for later use, as</span>", 
"<span class=\"comment\"> * determined by the @match callback.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The callback should return 0 if the device doesn't match and non-zero</span>", 
"<span class=\"comment\"> * if it does.  If the callback returns non-zero, this function will</span>", 
"<span class=\"comment\"> * return to the caller and not iterate over any more devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note, you will need to drop the reference with put_device() after use.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @fn is allowed to do anything including calling back into class</span>", 
"<span class=\"comment\"> * code.  There's no locking restriction.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#class_find_device\">class_find_device</a>(struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#class\">class</a>, struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int (*<a class=\"id\" href=\"#match\">match</a>)(struct <a class=\"id\" href=\"#device\">device</a> *, void *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class_dev_iter\">class_dev_iter</a> <a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#class\">class</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, \"%s called for class '%s' before it was initialized\",", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_dev_iter_init\">class_dev_iter_init</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#class\">class</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#class_dev_iter_next\">class_dev_iter_next</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#match\">match</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#data\">data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_device\">get_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_dev_iter_exit\">class_dev_iter_exit</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#class_find_device\">class_find_device</a>);", 
"", 
"int <a class=\"id\" href=\"#class_interface_register\">class_interface_register</a>(struct <a class=\"id\" href=\"#class_interface\">class_interface</a> *<a class=\"id\" href=\"#class_intf\">class_intf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class_dev_iter\">class_dev_iter</a> <a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#class_intf\">class_intf</a> || !<a class=\"id\" href=\"#class_intf\">class_intf</a>-><a class=\"id\" href=\"#class\">class</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#class_get\">class_get</a>(<a class=\"id\" href=\"#class_intf\">class_intf</a>-><a class=\"id\" href=\"#class\">class</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#class_mutex\">class_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#class_intf\">class_intf</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#class_interfaces\">class_interfaces</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#class_intf\">class_intf</a>-><a class=\"id\" href=\"#add_dev\">add_dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#class_dev_iter_init\">class_dev_iter_init</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while ((<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#class_dev_iter_next\">class_dev_iter_next</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#class_intf\">class_intf</a>-><a class=\"id\" href=\"#add_dev\">add_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#class_intf\">class_intf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#class_dev_iter_exit\">class_dev_iter_exit</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#class_mutex\">class_mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#class_interface_unregister\">class_interface_unregister</a>(struct <a class=\"id\" href=\"#class_interface\">class_interface</a> *<a class=\"id\" href=\"#class_intf\">class_intf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#class_intf\">class_intf</a>-><a class=\"id\" href=\"#class\">class</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class_dev_iter\">class_dev_iter</a> <a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#class_mutex\">class_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#class_intf\">class_intf</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#class_intf\">class_intf</a>-><a class=\"id\" href=\"#remove_dev\">remove_dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#class_dev_iter_init\">class_dev_iter_init</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while ((<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#class_dev_iter_next\">class_dev_iter_next</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#class_intf\">class_intf</a>-><a class=\"id\" href=\"#remove_dev\">remove_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#class_intf\">class_intf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#class_dev_iter_exit\">class_dev_iter_exit</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#class_mutex\">class_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_put\">class_put</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#show_class_attr_string\">show_class_attr_string</a>(struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#class\">class</a>, struct <a class=\"id\" href=\"#class_attribute\">class_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"                        <span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class_attribute_string\">class_attribute_string</a> *<a class=\"id\" href=\"#cs\">cs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#attr\">attr</a>, struct <a class=\"id\" href=\"#class_attribute_string\">class_attribute_string</a>, <a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, \"%s\\n\", <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#str\">str</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#show_class_attr_string\">show_class_attr_string</a>);", 
"", 
"struct <a class=\"id\" href=\"#class_compat\">class_compat</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * class_compat_register - register a compatibility class</span>", 
"<span class=\"comment\"> * @name: the name of the class</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Compatibility class are meant as a temporary user-space compatibility</span>", 
"<span class=\"comment\"> * workaround when converting a family of class devices to a bus devices.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#class_compat\">class_compat</a> *<a class=\"id\" href=\"#class_compat_register\">class_compat_register</a>(const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class_compat\">class_compat</a> *<a class=\"id\" href=\"#cls\">cls</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cls\">cls</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#class_compat\">class_compat</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cls\">cls</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#kobj\">kobj</a> = <a class=\"id\" href=\"#kobject_create_and_add\">kobject_create_and_add</a>(<a class=\"id\" href=\"#name\">name</a>, &amp;<a class=\"id\" href=\"#class_kset\">class_kset</a>-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#kobj\">kobj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cls\">cls</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cls\">cls</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#class_compat_register\">class_compat_register</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * class_compat_unregister - unregister a compatibility class</span>", 
"<span class=\"comment\"> * @cls: the class to unregister</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#class_compat_unregister\">class_compat_unregister</a>(struct <a class=\"id\" href=\"#class_compat\">class_compat</a> *<a class=\"id\" href=\"#cls\">cls</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cls\">cls</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#class_compat_unregister\">class_compat_unregister</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * class_compat_create_link - create a compatibility class device link to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      a bus device</span>", 
"<span class=\"comment\"> * @cls: the compatibility class</span>", 
"<span class=\"comment\"> * @dev: the target bus device</span>", 
"<span class=\"comment\"> * @device_link: an optional device to which a \"device\" link should be created</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#class_compat_create_link\">class_compat_create_link</a>(struct <a class=\"id\" href=\"#class_compat\">class_compat</a> *<a class=\"id\" href=\"#cls\">cls</a>, struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#device_link\">device_link</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysfs_create_link\">sysfs_create_link</a>(<a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#dev_name\">dev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Optionally add a \"device\" link (typically to the parent), as a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * class device would have one and we want to provide as much</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * backwards compatibility as possible.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#device_link\">device_link</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysfs_create_link\">sysfs_create_link</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#device_link\">device_link</a>-><a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"device\");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_link\">sysfs_remove_link</a>(<a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#dev_name\">dev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#class_compat_create_link\">class_compat_create_link</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * class_compat_remove_link - remove a compatibility class device link to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      a bus device</span>", 
"<span class=\"comment\"> * @cls: the compatibility class</span>", 
"<span class=\"comment\"> * @dev: the target bus device</span>", 
"<span class=\"comment\"> * @device_link: an optional device to which a \"device\" link was previously</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/> created</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#class_compat_remove_link\">class_compat_remove_link</a>(struct <a class=\"id\" href=\"#class_compat\">class_compat</a> *<a class=\"id\" href=\"#cls\">cls</a>, struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#device_link\">device_link</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#device_link\">device_link</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_link\">sysfs_remove_link</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, \"device\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_link\">sysfs_remove_link</a>(<a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#dev_name\">dev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#class_compat_remove_link\">class_compat_remove_link</a>);", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#classes_init\">classes_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_kset\">class_kset</a> = <a class=\"id\" href=\"#kset_create_and_add\">kset_create_and_add</a>(\"class\", <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#class_kset\">class_kset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#class_create_file\">class_create_file</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#class_remove_file\">class_remove_file</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#class_unregister\">class_unregister</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#class_destroy\">class_destroy</a>);", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#class_interface_register\">class_interface_register</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#class_interface_unregister\">class_interface_unregister</a>);", 
];
xr_frag_insert('l/44/003e38cc272bd6631bc544ccb2790d86a2d949.xr', __xr_tmp);
