var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_VIRTIO_RING_H\">_LINUX_VIRTIO_RING_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_VIRTIO_RING_H\">_LINUX_VIRTIO_RING_H</a>", 
"<span class=\"comment\">/* An interface for efficient virtio implementation, currently for use by KVM</span>", 
"<span class=\"comment\"> * and lguest, but hopefully others soon.  Do NOT change this since it will</span>", 
"<span class=\"comment\"> * break existing servers and clients.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This header is BSD licensed so anyone can use the definitions to implement</span>", 
"<span class=\"comment\"> * compatible drivers/servers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright Rusty Russell IBM Corporation 2007. */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* This marks a buffer as continuing via the next field. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VRING_DESC_F_NEXT\">VRING_DESC_F_NEXT</a><span class=\"ts\"/>1", 
"<span class=\"comment\">/* This marks a buffer as write-only (otherwise read-only). */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VRING_DESC_F_WRITE\">VRING_DESC_F_WRITE</a><span class=\"ts\"/>2", 
"<span class=\"comment\">/* This means the buffer contains a list of buffer descriptors. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VRING_DESC_F_INDIRECT\">VRING_DESC_F_INDIRECT</a><span class=\"ts\"/>4", 
"", 
"<span class=\"comment\">/* The Host uses this in used-&gt;flags to advise the Guest: don't kick me when</span>", 
"<span class=\"comment\"> * you add a buffer.  It's unreliable, so it's simply an optimization.  Guest</span>", 
"<span class=\"comment\"> * will still kick if it's out of buffers. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VRING_USED_F_NO_NOTIFY\">VRING_USED_F_NO_NOTIFY</a><span class=\"ts\"/>1", 
"<span class=\"comment\">/* The Guest uses this in avail-&gt;flags to advise the Host: don't interrupt me</span>", 
"<span class=\"comment\"> * when you consume a buffer.  It's unreliable, so it's simply an</span>", 
"<span class=\"comment\"> * optimization.  */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VRING_AVAIL_F_NO_INTERRUPT\">VRING_AVAIL_F_NO_INTERRUPT</a><span class=\"ts\"/>1", 
"", 
"<span class=\"comment\">/* We support indirect buffer descriptors */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRTIO_RING_F_INDIRECT_DESC\">VIRTIO_RING_F_INDIRECT_DESC</a><span class=\"ts\"/>28", 
"", 
"<span class=\"comment\">/* Virtio ring descriptors: 16 bytes.  These can chain together via \"next\". */</span>", 
"struct <a class=\"id\" href=\"#vring_desc\">vring_desc</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* Address (guest-physical). */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a> <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Length. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* The flags as indicated above. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* We chain unused descriptors via this, too */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#next\">next</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#vring_avail\">vring_avail</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#ring\">ring</a>[];", 
"};", 
"", 
"<span class=\"comment\">/* u32 is used here for ids for padding reasons. */</span>", 
"struct <a class=\"id\" href=\"#vring_used_elem\">vring_used_elem</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* Index of start of used descriptor chain. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Total length of the descriptor chain which was used (written to) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#len\">len</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#vring_used\">vring_used</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vring_used_elem\">vring_used_elem</a> <a class=\"id\" href=\"#ring\">ring</a>[];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#vring\">vring</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num\">num</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vring_desc\">vring_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vring_avail\">vring_avail</a> *<a class=\"id\" href=\"#avail\">avail</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vring_used\">vring_used</a> *<a class=\"id\" href=\"#used\">used</a>;", 
"};", 
"", 
"<span class=\"comment\">/* The standard layout for the ring is a continuous chunk of memory which looks</span>", 
"<span class=\"comment\"> * like this.  We assume num is a power of 2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * struct vring</span>", 
"<span class=\"comment\"> * {</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>// The actual descriptors (16 bytes each)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>struct vring_desc desc[num];</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>// A ring of available descriptor heads with free-running index.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__u16 avail_flags;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__u16 avail_idx;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__u16 available[num];</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>// Padding to the next align boundary.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>char pad[];</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>// A ring of used descriptor heads with free-running index.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__u16 used_flags;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__u16 used_idx;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>struct vring_used_elem used[num];</span>", 
"<span class=\"comment\"> * };</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#vring_init\">vring_init</a>(struct <a class=\"id\" href=\"#vring\">vring</a> *<a class=\"id\" href=\"#vr\">vr</a>, unsigned int <a class=\"id\" href=\"#num\">num</a>, void *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#align\">align</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vr\">vr</a>-><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vr\">vr</a>-><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vr\">vr</a>-><a class=\"id\" href=\"#avail\">avail</a> = <a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#num\">num</a>*sizeof(struct <a class=\"id\" href=\"#vring_desc\">vring_desc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vr\">vr</a>-><a class=\"id\" href=\"#used\">used</a> = (void *)(((unsigned long)&amp;<a class=\"id\" href=\"#vr\">vr</a>-><a class=\"id\" href=\"#avail\">avail</a>-><a class=\"id\" href=\"#ring\">ring</a>[<a class=\"id\" href=\"#num\">num</a>] + <a class=\"id\" href=\"#align\">align</a>-1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp; ~(<a class=\"id\" href=\"#align\">align</a> - 1));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#vring_size\">vring_size</a>(unsigned int <a class=\"id\" href=\"#num\">num</a>, unsigned long <a class=\"id\" href=\"#align\">align</a>)", 
"{", 
"<span class=\"ts\"/>return ((sizeof(struct <a class=\"id\" href=\"#vring_desc\">vring_desc</a>) * <a class=\"id\" href=\"#num\">num</a> + sizeof(<a class=\"id\" href=\"#__u16\">__u16</a>) * (2 + <a class=\"id\" href=\"#num\">num</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/> + <a class=\"id\" href=\"#align\">align</a> - 1) &amp; ~(<a class=\"id\" href=\"#align\">align</a> - 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>+ sizeof(<a class=\"id\" href=\"#__u16\">__u16</a>) * 2 + sizeof(struct <a class=\"id\" href=\"#vring_used_elem\">vring_used_elem</a>) * <a class=\"id\" href=\"#num\">num</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#irqreturn\">irqreturn</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a>;", 
"struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a>;", 
"", 
"struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#vring_new_virtqueue\">vring_new_virtqueue</a>(unsigned int <a class=\"id\" href=\"#num\">num</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#vring_align\">vring_align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#vdev\">vdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#pages\">pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void (*<a class=\"id\" href=\"#notify\">notify</a>)(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void (*<a class=\"id\" href=\"#callback\">callback</a>)(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const char *<a class=\"id\" href=\"#name\">name</a>);", 
"void <a class=\"id\" href=\"#vring_del_virtqueue\">vring_del_virtqueue</a>(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a>);", 
"<span class=\"comment\">/* Filter out transport-specific feature bits. */</span>", 
"void <a class=\"id\" href=\"#vring_transport_features\">vring_transport_features</a>(struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#vdev\">vdev</a>);", 
"", 
"<a class=\"id\" href=\"#irqreturn_t\">irqreturn_t</a> <a class=\"id\" href=\"#vring_interrupt\">vring_interrupt</a>(int <a class=\"id\" href=\"#irq\">irq</a>, void *<a class=\"id\" href=\"#_vq\">_vq</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_VIRTIO_RING_H */</span>", 
];
xr_frag_insert('l/44/247b314877fb4e19ec2a944dd2b9b5060ef8ed.xr', __xr_tmp);
