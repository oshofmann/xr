var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * net/dsa/tag_dsa.c - (Non-ethertype) DSA tagging</span>", 
"<span class=\"comment\"> * Copyright (c) 2008-2009 Marvell Semiconductor</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#etherdevice\">etherdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"dsa_priv.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DSA_HLEN\">DSA_HLEN</a><span class=\"ts\"/>4", 
"", 
"<a class=\"id\" href=\"#netdev_tx_t\">netdev_tx_t</a> <a class=\"id\" href=\"#dsa_xmit\">dsa_xmit</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dsa_slave_priv\">dsa_slave_priv</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#netdev_priv\">netdev_priv</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#dsa_header\">dsa_header</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#tx_packets\">tx_packets</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#tx_bytes\">tx_bytes</a> += <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Convert the outermost 802.1q tag to a DSA tag for tagged</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * packets, or insert a DSA tag between the addresses and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the ethertype field for untagged packets.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a> == <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#ETH_P_8021Q\">ETH_P_8021Q</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_cow_head\">skb_cow_head</a>(<a class=\"id\" href=\"#skb\">skb</a>, 0) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Construct tagged FROM_CPU DSA tag from 802.1q tag.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dsa_header\">dsa_header</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + 2 * <a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dsa_header\">dsa_header</a>[0] = 0x60 | <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dsa_header\">dsa_header</a>[1] = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#port\">port</a> << 3;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Move CFI field from byte 2 to byte 1.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dsa_header\">dsa_header</a>[2] &amp; 0x10) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dsa_header\">dsa_header</a>[1] |= 0x01;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dsa_header\">dsa_header</a>[2] &= ~0x10;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_cow_head\">skb_cow_head</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#DSA_HLEN\">DSA_HLEN</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_push\">skb_push</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#DSA_HLEN\">DSA_HLEN</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#DSA_HLEN\">DSA_HLEN</a>, 2 * <a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Construct untagged FROM_CPU DSA tag.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dsa_header\">dsa_header</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + 2 * <a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dsa_header\">dsa_header</a>[0] = 0x40 | <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dsa_header\">dsa_header</a>[1] = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#port\">port</a> << 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dsa_header\">dsa_header</a>[2] = 0x00;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dsa_header\">dsa_header</a>[3] = 0x00;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#ETH_P_DSA\">ETH_P_DSA</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#master_netdev\">master_netdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_queue_xmit\">dev_queue_xmit</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NETDEV_TX_OK\">NETDEV_TX_OK</a>;", 
"", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NETDEV_TX_OK\">NETDEV_TX_OK</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#dsa_rcv\">dsa_rcv</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#packet_type\">packet_type</a> *<a class=\"id\" href=\"#pt\">pt</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#orig_dev\">orig_dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dsa_switch_tree\">dsa_switch_tree</a> *<a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dsa_ptr\">dsa_ptr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dsa_switch\">dsa_switch</a> *<a class=\"id\" href=\"#ds\">ds</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#dsa_header\">dsa_header</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#source_device\">source_device</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#source_port\">source_port</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#dst\">dst</a> == <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_drop\">out_drop</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb_unshare\">skb_unshare</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#DSA_HLEN\">DSA_HLEN</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_drop\">out_drop</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The ethertype field is part of the DSA header.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dsa_header\">dsa_header</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> - 2;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check that frame type is either TO_CPU or FORWARD.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dsa_header\">dsa_header</a>[0] &amp; 0xc0) != 0x00 && (<a class=\"id\" href=\"#dsa_header\">dsa_header</a>[0] &amp; 0xc0) != 0xc0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_drop\">out_drop</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Determine source device and port.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#source_device\">source_device</a> = <a class=\"id\" href=\"#dsa_header\">dsa_header</a>[0] &amp; 0x1f;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#source_port\">source_port</a> = (<a class=\"id\" href=\"#dsa_header\">dsa_header</a>[1] >> 3) &amp; 0x1f;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check that the source device exists and that the source</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * port is a registered DSA port.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#source_device\">source_device</a> >= <a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#nr_chips\">nr_chips</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_drop\">out_drop</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ds\">ds</a> = <a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#ds\">ds</a>[<a class=\"id\" href=\"#source_device\">source_device</a>];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#source_port\">source_port</a> >= <a class=\"id\" href=\"#DSA_MAX_PORTS\">DSA_MAX_PORTS</a> || <a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#source_port\">source_port</a>] == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_drop\">out_drop</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Convert the DSA header to an 802.1q header if the 'tagged'</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bit in the DSA header is set.  If the 'tagged' bit is clear,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * delete the DSA header entirely.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dsa_header\">dsa_header</a>[0] &amp; 0x20) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#new_header\">new_header</a>[4];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Insert 802.1q ethertype and copy the VLAN-related</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fields, but clear the bit that will hold CFI (since</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * DSA uses that bit location for another purpose).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_header\">new_header</a>[0] = (<a class=\"id\" href=\"#ETH_P_8021Q\">ETH_P_8021Q</a> >> 8) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_header\">new_header</a>[1] = <a class=\"id\" href=\"#ETH_P_8021Q\">ETH_P_8021Q</a> &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_header\">new_header</a>[2] = <a class=\"id\" href=\"#dsa_header\">dsa_header</a>[2] &amp; ~0x10;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_header\">new_header</a>[3] = <a class=\"id\" href=\"#dsa_header\">dsa_header</a>[3];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Move CFI bit from its place in the DSA header to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * its 802.1q-designated place.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dsa_header\">dsa_header</a>[1] &amp; 0x01)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_header\">new_header</a>[2] |= 0x10;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Update packet checksum if skb is CHECKSUM_COMPLETE.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> == <a class=\"id\" href=\"#CHECKSUM_COMPLETE\">CHECKSUM_COMPLETE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum\">csum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#csum_add\">csum_add</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#csum_partial\">csum_partial</a>(<a class=\"id\" href=\"#new_header\">new_header</a> + 2, 2, 0));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#csum_sub\">csum_sub</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#csum_partial\">csum_partial</a>(<a class=\"id\" href=\"#dsa_header\">dsa_header</a> + 2, 2, 0));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dsa_header\">dsa_header</a>, <a class=\"id\" href=\"#new_header\">new_header</a>, <a class=\"id\" href=\"#DSA_HLEN\">DSA_HLEN</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Remove DSA tag and update checksum.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_pull_rcsum\">skb_pull_rcsum</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#DSA_HLEN\">DSA_HLEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> - <a class=\"id\" href=\"#ETH_HLEN\">ETH_HLEN</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> - <a class=\"id\" href=\"#ETH_HLEN\">ETH_HLEN</a> - <a class=\"id\" href=\"#DSA_HLEN\">DSA_HLEN</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>2 * <a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#source_port\">source_port</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_push\">skb_push</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#ETH_HLEN\">ETH_HLEN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#pkt_type\">pkt_type</a> = <a class=\"id\" href=\"#PACKET_HOST\">PACKET_HOST</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#eth_type_trans\">eth_type_trans</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#rx_packets\">rx_packets</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#rx_bytes\">rx_bytes</a> += <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_receive_skb\">netif_receive_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_drop\">out_drop</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#packet_type\">packet_type</a> <a class=\"id\" href=\"#dsa_packet_type\">dsa_packet_type</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#type\">type</a><span class=\"ts\"/>= <a class=\"id\" href=\"#cpu_to_be16\">cpu_to_be16</a>(<a class=\"id\" href=\"#ETH_P_DSA\">ETH_P_DSA</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#func\">func</a><span class=\"ts\"/>= <a class=\"id\" href=\"#dsa_rcv\">dsa_rcv</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dsa_init_module\">dsa_init_module</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_add_pack\">dev_add_pack</a>(&amp;<a class=\"id\" href=\"#dsa_packet_type\">dsa_packet_type</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#dsa_init_module\">dsa_init_module</a>);", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#dsa_cleanup_module\">dsa_cleanup_module</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_remove_pack\">dev_remove_pack</a>(&amp;<a class=\"id\" href=\"#dsa_packet_type\">dsa_packet_type</a>);", 
"}", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#dsa_cleanup_module\">dsa_cleanup_module</a>);", 
];
xr_frag_insert('l/44/d0cf33793231dc81605e5587c6bdd28c0aa853.xr', __xr_tmp);
