var __xr_tmp = [
"", 
"<span class=\"comment\">/* USB_DT_INTERFACE: Interface descriptor */</span>", 
"struct <a class=\"id\" href=\"#usb_interface_descriptor\">usb_interface_descriptor</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a>  <a class=\"id\" href=\"#bLength\">bLength</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a>  <a class=\"id\" href=\"#bDescriptorType\">bDescriptorType</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a>  <a class=\"id\" href=\"#bInterfaceNumber\">bInterfaceNumber</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a>  <a class=\"id\" href=\"#bAlternateSetting\">bAlternateSetting</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a>  <a class=\"id\" href=\"#bNumEndpoints\">bNumEndpoints</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a>  <a class=\"id\" href=\"#bInterfaceClass\">bInterfaceClass</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a>  <a class=\"id\" href=\"#bInterfaceSubClass\">bInterfaceSubClass</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a>  <a class=\"id\" href=\"#bInterfaceProtocol\">bInterfaceProtocol</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a>  <a class=\"id\" href=\"#iInterface\">iInterface</a>;", 
"} <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#packed\">packed</a>));", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_DT_INTERFACE_SIZE\">USB_DT_INTERFACE_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>9", 
"", 
"<span class=\"comment\">/*-------------------------------------------------------------------------*/</span>", 
"", 
"<span class=\"comment\">/* USB_DT_ENDPOINT: Endpoint descriptor */</span>", 
"struct <a class=\"id\" href=\"#usb_endpoint_descriptor\">usb_endpoint_descriptor</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a>  <a class=\"id\" href=\"#bLength\">bLength</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a>  <a class=\"id\" href=\"#bDescriptorType\">bDescriptorType</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a>  <a class=\"id\" href=\"#bEndpointAddress\">bEndpointAddress</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a>  <a class=\"id\" href=\"#bmAttributes\">bmAttributes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le16\">__le16</a> <a class=\"id\" href=\"#wMaxPacketSize\">wMaxPacketSize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a>  <a class=\"id\" href=\"#bInterval\">bInterval</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* NOTE:  these two are _only_ in audio endpoints. */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* use USB_DT_ENDPOINT*_SIZE in bLength, not sizeof. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a>  <a class=\"id\" href=\"#bRefresh\">bRefresh</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a>  <a class=\"id\" href=\"#bSynchAddress\">bSynchAddress</a>;", 
"} <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#packed\">packed</a>));", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_DT_ENDPOINT_SIZE\">USB_DT_ENDPOINT_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>7", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_DT_ENDPOINT_AUDIO_SIZE\">USB_DT_ENDPOINT_AUDIO_SIZE</a><span class=\"ts\"/>9<span class=\"ts\"/><span class=\"comment\">/* Audio extension */</span>", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Endpoints</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_ENDPOINT_NUMBER_MASK\">USB_ENDPOINT_NUMBER_MASK</a><span class=\"ts\"/>0x0f<span class=\"ts\"/><span class=\"comment\">/* in bEndpointAddress */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_ENDPOINT_DIR_MASK\">USB_ENDPOINT_DIR_MASK</a><span class=\"ts\"/><span class=\"ts\"/>0x80", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_ENDPOINT_SYNCTYPE\">USB_ENDPOINT_SYNCTYPE</a><span class=\"ts\"/><span class=\"ts\"/>0x0c", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_ENDPOINT_SYNC_NONE\">USB_ENDPOINT_SYNC_NONE</a><span class=\"ts\"/><span class=\"ts\"/>(0 << 2)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_ENDPOINT_SYNC_ASYNC\">USB_ENDPOINT_SYNC_ASYNC</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 2)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_ENDPOINT_SYNC_ADAPTIVE\">USB_ENDPOINT_SYNC_ADAPTIVE</a><span class=\"ts\"/>(2 << 2)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_ENDPOINT_SYNC_SYNC\">USB_ENDPOINT_SYNC_SYNC</a><span class=\"ts\"/><span class=\"ts\"/>(3 << 2)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_ENDPOINT_XFERTYPE_MASK\">USB_ENDPOINT_XFERTYPE_MASK</a><span class=\"ts\"/>0x03<span class=\"ts\"/><span class=\"comment\">/* in bmAttributes */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_ENDPOINT_XFER_CONTROL\">USB_ENDPOINT_XFER_CONTROL</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_ENDPOINT_XFER_ISOC\">USB_ENDPOINT_XFER_ISOC</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_ENDPOINT_XFER_BULK\">USB_ENDPOINT_XFER_BULK</a><span class=\"ts\"/><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_ENDPOINT_XFER_INT\">USB_ENDPOINT_XFER_INT</a><span class=\"ts\"/><span class=\"ts\"/>3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USB_ENDPOINT_MAX_ADJUSTABLE\">USB_ENDPOINT_MAX_ADJUSTABLE</a><span class=\"ts\"/>0x80", 
"", 
"<span class=\"comment\">/*-------------------------------------------------------------------------*/</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_endpoint_num - get the endpoint's number</span>", 
"<span class=\"comment\"> * @epd: endpoint to be checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns @epd's number: 0 to 15.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_endpoint_num\">usb_endpoint_num</a>(const struct <a class=\"id\" href=\"#usb_endpoint_descriptor\">usb_endpoint_descriptor</a> *<a class=\"id\" href=\"#epd\">epd</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#epd\">epd</a>-><a class=\"id\" href=\"#bEndpointAddress\">bEndpointAddress</a> &amp; <a class=\"id\" href=\"#USB_ENDPOINT_NUMBER_MASK\">USB_ENDPOINT_NUMBER_MASK</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_endpoint_type - get the endpoint's transfer type</span>", 
"<span class=\"comment\"> * @epd: endpoint to be checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns one of USB_ENDPOINT_XFER_{CONTROL, ISOC, BULK, INT} according</span>", 
"<span class=\"comment\"> * to @epd's transfer type.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_endpoint_type\">usb_endpoint_type</a>(const struct <a class=\"id\" href=\"#usb_endpoint_descriptor\">usb_endpoint_descriptor</a> *<a class=\"id\" href=\"#epd\">epd</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#epd\">epd</a>-><a class=\"id\" href=\"#bmAttributes\">bmAttributes</a> &amp; <a class=\"id\" href=\"#USB_ENDPOINT_XFERTYPE_MASK\">USB_ENDPOINT_XFERTYPE_MASK</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_endpoint_dir_in - check if the endpoint has IN direction</span>", 
"<span class=\"comment\"> * @epd: endpoint to be checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if the endpoint is of type IN, otherwise it returns false.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_endpoint_dir_in\">usb_endpoint_dir_in</a>(const struct <a class=\"id\" href=\"#usb_endpoint_descriptor\">usb_endpoint_descriptor</a> *<a class=\"id\" href=\"#epd\">epd</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#epd\">epd</a>-><a class=\"id\" href=\"#bEndpointAddress\">bEndpointAddress</a> &amp; <a class=\"id\" href=\"#USB_ENDPOINT_DIR_MASK\">USB_ENDPOINT_DIR_MASK</a>) == <a class=\"id\" href=\"#USB_DIR_IN\">USB_DIR_IN</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_endpoint_dir_out - check if the endpoint has OUT direction</span>", 
"<span class=\"comment\"> * @epd: endpoint to be checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if the endpoint is of type OUT, otherwise it returns false.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_endpoint_dir_out\">usb_endpoint_dir_out</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#usb_endpoint_descriptor\">usb_endpoint_descriptor</a> *<a class=\"id\" href=\"#epd\">epd</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#epd\">epd</a>-><a class=\"id\" href=\"#bEndpointAddress\">bEndpointAddress</a> &amp; <a class=\"id\" href=\"#USB_ENDPOINT_DIR_MASK\">USB_ENDPOINT_DIR_MASK</a>) == <a class=\"id\" href=\"#USB_DIR_OUT\">USB_DIR_OUT</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_endpoint_xfer_bulk - check if the endpoint has bulk transfer type</span>", 
"<span class=\"comment\"> * @epd: endpoint to be checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if the endpoint is of type bulk, otherwise it returns false.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_endpoint_xfer_bulk\">usb_endpoint_xfer_bulk</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#usb_endpoint_descriptor\">usb_endpoint_descriptor</a> *<a class=\"id\" href=\"#epd\">epd</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#epd\">epd</a>-><a class=\"id\" href=\"#bmAttributes\">bmAttributes</a> &amp; <a class=\"id\" href=\"#USB_ENDPOINT_XFERTYPE_MASK\">USB_ENDPOINT_XFERTYPE_MASK</a>) ==", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#USB_ENDPOINT_XFER_BULK\">USB_ENDPOINT_XFER_BULK</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_endpoint_xfer_control - check if the endpoint has control transfer type</span>", 
"<span class=\"comment\"> * @epd: endpoint to be checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if the endpoint is of type control, otherwise it returns false.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_endpoint_xfer_control\">usb_endpoint_xfer_control</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#usb_endpoint_descriptor\">usb_endpoint_descriptor</a> *<a class=\"id\" href=\"#epd\">epd</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#epd\">epd</a>-><a class=\"id\" href=\"#bmAttributes\">bmAttributes</a> &amp; <a class=\"id\" href=\"#USB_ENDPOINT_XFERTYPE_MASK\">USB_ENDPOINT_XFERTYPE_MASK</a>) ==", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#USB_ENDPOINT_XFER_CONTROL\">USB_ENDPOINT_XFER_CONTROL</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_endpoint_xfer_int - check if the endpoint has interrupt transfer type</span>", 
"<span class=\"comment\"> * @epd: endpoint to be checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if the endpoint is of type interrupt, otherwise it returns</span>", 
"<span class=\"comment\"> * false.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_endpoint_xfer_int\">usb_endpoint_xfer_int</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#usb_endpoint_descriptor\">usb_endpoint_descriptor</a> *<a class=\"id\" href=\"#epd\">epd</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#epd\">epd</a>-><a class=\"id\" href=\"#bmAttributes\">bmAttributes</a> &amp; <a class=\"id\" href=\"#USB_ENDPOINT_XFERTYPE_MASK\">USB_ENDPOINT_XFERTYPE_MASK</a>) ==", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#USB_ENDPOINT_XFER_INT\">USB_ENDPOINT_XFER_INT</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_endpoint_xfer_isoc - check if the endpoint has isochronous transfer type</span>", 
"<span class=\"comment\"> * @epd: endpoint to be checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if the endpoint is of type isochronous, otherwise it returns</span>", 
"<span class=\"comment\"> * false.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_endpoint_xfer_isoc\">usb_endpoint_xfer_isoc</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#usb_endpoint_descriptor\">usb_endpoint_descriptor</a> *<a class=\"id\" href=\"#epd\">epd</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#epd\">epd</a>-><a class=\"id\" href=\"#bmAttributes\">bmAttributes</a> &amp; <a class=\"id\" href=\"#USB_ENDPOINT_XFERTYPE_MASK\">USB_ENDPOINT_XFERTYPE_MASK</a>) ==", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#USB_ENDPOINT_XFER_ISOC\">USB_ENDPOINT_XFER_ISOC</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_endpoint_is_bulk_in - check if the endpoint is bulk IN</span>", 
"<span class=\"comment\"> * @epd: endpoint to be checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if the endpoint has bulk transfer type and IN direction,</span>", 
"<span class=\"comment\"> * otherwise it returns false.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_endpoint_is_bulk_in\">usb_endpoint_is_bulk_in</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#usb_endpoint_descriptor\">usb_endpoint_descriptor</a> *<a class=\"id\" href=\"#epd\">epd</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#usb_endpoint_xfer_bulk\">usb_endpoint_xfer_bulk</a>(<a class=\"id\" href=\"#epd\">epd</a>) && <a class=\"id\" href=\"#usb_endpoint_dir_in\">usb_endpoint_dir_in</a>(<a class=\"id\" href=\"#epd\">epd</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_endpoint_is_bulk_out - check if the endpoint is bulk OUT</span>", 
"<span class=\"comment\"> * @epd: endpoint to be checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if the endpoint has bulk transfer type and OUT direction,</span>", 
"<span class=\"comment\"> * otherwise it returns false.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_endpoint_is_bulk_out\">usb_endpoint_is_bulk_out</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#usb_endpoint_descriptor\">usb_endpoint_descriptor</a> *<a class=\"id\" href=\"#epd\">epd</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#usb_endpoint_xfer_bulk\">usb_endpoint_xfer_bulk</a>(<a class=\"id\" href=\"#epd\">epd</a>) && <a class=\"id\" href=\"#usb_endpoint_dir_out\">usb_endpoint_dir_out</a>(<a class=\"id\" href=\"#epd\">epd</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_endpoint_is_int_in - check if the endpoint is interrupt IN</span>", 
"<span class=\"comment\"> * @epd: endpoint to be checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if the endpoint has interrupt transfer type and IN direction,</span>", 
"<span class=\"comment\"> * otherwise it returns false.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_endpoint_is_int_in\">usb_endpoint_is_int_in</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#usb_endpoint_descriptor\">usb_endpoint_descriptor</a> *<a class=\"id\" href=\"#epd\">epd</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#usb_endpoint_xfer_int\">usb_endpoint_xfer_int</a>(<a class=\"id\" href=\"#epd\">epd</a>) && <a class=\"id\" href=\"#usb_endpoint_dir_in\">usb_endpoint_dir_in</a>(<a class=\"id\" href=\"#epd\">epd</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_endpoint_is_int_out - check if the endpoint is interrupt OUT</span>", 
"<span class=\"comment\"> * @epd: endpoint to be checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if the endpoint has interrupt transfer type and OUT direction,</span>", 
"<span class=\"comment\"> * otherwise it returns false.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_endpoint_is_int_out\">usb_endpoint_is_int_out</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#usb_endpoint_descriptor\">usb_endpoint_descriptor</a> *<a class=\"id\" href=\"#epd\">epd</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#usb_endpoint_xfer_int\">usb_endpoint_xfer_int</a>(<a class=\"id\" href=\"#epd\">epd</a>) && <a class=\"id\" href=\"#usb_endpoint_dir_out\">usb_endpoint_dir_out</a>(<a class=\"id\" href=\"#epd\">epd</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_endpoint_is_isoc_in - check if the endpoint is isochronous IN</span>", 
"<span class=\"comment\"> * @epd: endpoint to be checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if the endpoint has isochronous transfer type and IN direction,</span>", 
"<span class=\"comment\"> * otherwise it returns false.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#usb_endpoint_is_isoc_in\">usb_endpoint_is_isoc_in</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#usb_endpoint_descriptor\">usb_endpoint_descriptor</a> *<a class=\"id\" href=\"#epd\">epd</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#usb_endpoint_xfer_isoc\">usb_endpoint_xfer_isoc</a>(<a class=\"id\" href=\"#epd\">epd</a>) && <a class=\"id\" href=\"#usb_endpoint_dir_in\">usb_endpoint_dir_in</a>(<a class=\"id\" href=\"#epd\">epd</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * usb_endpoint_is_isoc_out - check if the endpoint is isochronous OUT</span>", 
"<span class=\"comment\"> * @epd: endpoint to be checked</span>", 
"<span class=\"comment\"> *</span>", 
];
xr_frag_insert('l/45/06cc532390dfda2ed1328e408c2ea82d368178.xr', __xr_tmp);
