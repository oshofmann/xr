var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (c) 2003-2006, Cluster File Systems, Inc, info@clusterfs.com</span>", 
"<span class=\"comment\"> * Written by Alex Tomas &lt;alex@clusterfs.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License version 2 as</span>", 
"<span class=\"comment\"> * published by the Free Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public Licens</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_EXT4_EXTENTS\">_EXT4_EXTENTS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_EXT4_EXTENTS\">_EXT4_EXTENTS</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"ext4.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * With AGGRESSIVE_TEST defined, the capacity of index/leaf blocks</span>", 
"<span class=\"comment\"> * becomes very small, so index split, in-depth growing and</span>", 
"<span class=\"comment\"> * other hard changes happen much more often.</span>", 
"<span class=\"comment\"> * This is for debug purposes only.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AGGRESSIVE_TEST_\">AGGRESSIVE_TEST_</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * With EXTENTS_STATS defined, the number of blocks and extents</span>", 
"<span class=\"comment\"> * are collected in the truncate path. They'll be shown at</span>", 
"<span class=\"comment\"> * umount time.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXTENTS_STATS__\">EXTENTS_STATS__</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If CHECK_BINSEARCH is defined, then the results of the binary search</span>", 
"<span class=\"comment\"> * will also be checked by linear search.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CHECK_BINSEARCH__\">CHECK_BINSEARCH__</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Turn on EXT_DEBUG to get lots of info about extents operations.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXT_DEBUG__\">EXT_DEBUG__</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#EXT_DEBUG\">EXT_DEBUG</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ext_debug\">ext_debug</a>(<a class=\"id\" href=\"#a\">a</a>...)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#a\">a</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ext_debug\">ext_debug</a>(<a class=\"id\" href=\"#a\">a</a>...)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If EXT_STATS is defined then stats numbers are collected.</span>", 
"<span class=\"comment\"> * These number will be displayed at umount time.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXT_STATS_\">EXT_STATS_</a>", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ext4_inode has i_block array (60 bytes total).</span>", 
"<span class=\"comment\"> * The first 12 bytes store ext4_extent_header;</span>", 
"<span class=\"comment\"> * the remainder stores an array of ext4_extent.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the extent on-disk structure.</span>", 
"<span class=\"comment\"> * It's used at the bottom of the tree.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a><span class=\"ts\"/><a class=\"id\" href=\"#ee_block\">ee_block</a>;<span class=\"ts\"/><span class=\"comment\">/* first logical block extent covers */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le16\">__le16</a><span class=\"ts\"/><a class=\"id\" href=\"#ee_len\">ee_len</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* number of blocks covered by extent */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le16\">__le16</a><span class=\"ts\"/><a class=\"id\" href=\"#ee_start_hi\">ee_start_hi</a>;<span class=\"ts\"/><span class=\"comment\">/* high 16 bits of physical block */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a><span class=\"ts\"/><a class=\"id\" href=\"#ee_start_lo\">ee_start_lo</a>;<span class=\"ts\"/><span class=\"comment\">/* low 32 bits of physical block */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is index on-disk structure.</span>", 
"<span class=\"comment\"> * It's used at all the levels except the bottom.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ext4_extent_idx\">ext4_extent_idx</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a><span class=\"ts\"/><a class=\"id\" href=\"#ei_block\">ei_block</a>;<span class=\"ts\"/><span class=\"comment\">/* index covers logical blocks from 'block' */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a><span class=\"ts\"/><a class=\"id\" href=\"#ei_leaf_lo\">ei_leaf_lo</a>;<span class=\"ts\"/><span class=\"comment\">/* pointer to the physical block of the next *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * level. leaf or next index could be there */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le16\">__le16</a><span class=\"ts\"/><a class=\"id\" href=\"#ei_leaf_hi\">ei_leaf_hi</a>;<span class=\"ts\"/><span class=\"comment\">/* high 16 bits of physical block */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><a class=\"id\" href=\"#ei_unused\">ei_unused</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Each block (leaves and indexes), even inode-stored has header.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ext4_extent_header\">ext4_extent_header</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le16\">__le16</a><span class=\"ts\"/><a class=\"id\" href=\"#eh_magic\">eh_magic</a>;<span class=\"ts\"/><span class=\"comment\">/* probably will support different formats */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le16\">__le16</a><span class=\"ts\"/><a class=\"id\" href=\"#eh_entries\">eh_entries</a>;<span class=\"ts\"/><span class=\"comment\">/* number of valid entries */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le16\">__le16</a><span class=\"ts\"/><a class=\"id\" href=\"#eh_max\">eh_max</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* capacity of store in entries */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le16\">__le16</a><span class=\"ts\"/><a class=\"id\" href=\"#eh_depth\">eh_depth</a>;<span class=\"ts\"/><span class=\"comment\">/* has tree real underlying blocks? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a><span class=\"ts\"/><a class=\"id\" href=\"#eh_generation\">eh_generation</a>;<span class=\"ts\"/><span class=\"comment\">/* generation of the tree */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXT4_EXT_MAGIC\">EXT4_EXT_MAGIC</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(0xf30a)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Array of ext4_ext_path contains path to some extent.</span>", 
"<span class=\"comment\"> * Creation/lookup routines use it for traversal/splitting/etc.</span>", 
"<span class=\"comment\"> * Truncate uses it to simulate recursive walking.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ext4_ext_path\">ext4_ext_path</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p_block\">p_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p_depth\">p_depth</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p_ext\">p_ext</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_extent_idx\">ext4_extent_idx</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p_idx\">p_idx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_extent_header\">ext4_extent_header</a><span class=\"ts\"/>*<a class=\"id\" href=\"#p_hdr\">p_hdr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p_bh\">p_bh</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * structure for external API</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXT4_EXT_CACHE_NO\">EXT4_EXT_CACHE_NO</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXT4_EXT_CACHE_GAP\">EXT4_EXT_CACHE_GAP</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXT4_EXT_CACHE_EXTENT\">EXT4_EXT_CACHE_EXTENT</a><span class=\"ts\"/>2", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * to be called by ext4_ext_walk_space()</span>", 
"<span class=\"comment\"> * negative retcode - error</span>", 
"<span class=\"comment\"> * positive retcode - signal for ext4_ext_walk_space(), see below</span>", 
"<span class=\"comment\"> * callback must return valid extent (passed or newly created)</span>", 
"<span class=\"comment\"> */</span>", 
"typedef int (*<a class=\"id\" href=\"#ext_prepare_callback\">ext_prepare_callback</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#ext4_ext_path\">ext4_ext_path</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_ext_cache\">ext4_ext_cache</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a> *, void *);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXT_CONTINUE\">EXT_CONTINUE</a>   0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXT_BREAK\">EXT_BREAK</a>      1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXT_REPEAT\">EXT_REPEAT</a>     2", 
"", 
"<span class=\"comment\">/* Maximum logical block in a file; ext4_extent's ee_block is __le32 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXT_MAX_BLOCK\">EXT_MAX_BLOCK</a><span class=\"ts\"/>0xffffffff", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * EXT_INIT_MAX_LEN is the maximum number of blocks we can have in an</span>", 
"<span class=\"comment\"> * initialized extent. This is 2^15 and not (2^16 - 1), since we use the</span>", 
"<span class=\"comment\"> * MSB of ee_len field in the extent datastructure to signify if this</span>", 
"<span class=\"comment\"> * particular extent is an initialized extent or an uninitialized (i.e.</span>", 
"<span class=\"comment\"> * preallocated).</span>", 
"<span class=\"comment\"> * EXT_UNINIT_MAX_LEN is the maximum number of blocks we can have in an</span>", 
"<span class=\"comment\"> * uninitialized extent.</span>", 
"<span class=\"comment\"> * If ee_len is &lt;= 0x8000, it is an initialized extent. Otherwise, it is an</span>", 
"<span class=\"comment\"> * uninitialized one. In other words, if MSB of ee_len is set, it is an</span>", 
"<span class=\"comment\"> * uninitialized extent with only one special scenario when ee_len = 0x8000.</span>", 
"<span class=\"comment\"> * In this case we can not have an uninitialized extent of zero length and</span>", 
"<span class=\"comment\"> * thus we make it as a special case of initialized extent with 0x8000 length.</span>", 
"<span class=\"comment\"> * This way we get better extent-to-group alignment for initialized extents.</span>", 
"<span class=\"comment\"> * Hence, the maximum number of blocks we can have in an *initialized*</span>", 
"<span class=\"comment\"> * extent is 2^15 (32768) and in an *uninitialized* extent is 2^15-1 (32767).</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXT_INIT_MAX_LEN\">EXT_INIT_MAX_LEN</a><span class=\"ts\"/>(1UL << 15)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXT_UNINIT_MAX_LEN\">EXT_UNINIT_MAX_LEN</a><span class=\"ts\"/>(<a class=\"id\" href=\"#EXT_INIT_MAX_LEN\">EXT_INIT_MAX_LEN</a> - 1)", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXT_FIRST_EXTENT\">EXT_FIRST_EXTENT</a>(<a class=\"id\" href=\"#__hdr__\">__hdr__</a>) \\", 
"<span class=\"ts\"/>((struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a> *) (((char *) (<a class=\"id\" href=\"#__hdr__\">__hdr__</a>)) +<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(struct <a class=\"id\" href=\"#ext4_extent_header\">ext4_extent_header</a>)))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXT_FIRST_INDEX\">EXT_FIRST_INDEX</a>(<a class=\"id\" href=\"#__hdr__\">__hdr__</a>) \\", 
"<span class=\"ts\"/>((struct <a class=\"id\" href=\"#ext4_extent_idx\">ext4_extent_idx</a> *) (((char *) (<a class=\"id\" href=\"#__hdr__\">__hdr__</a>)) +<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     sizeof(struct <a class=\"id\" href=\"#ext4_extent_header\">ext4_extent_header</a>)))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXT_HAS_FREE_INDEX\">EXT_HAS_FREE_INDEX</a>(<a class=\"id\" href=\"#__path__\">__path__</a>) \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>((<a class=\"id\" href=\"#__path__\">__path__</a>)-><a class=\"id\" href=\"#p_hdr\">p_hdr</a>-><a class=\"id\" href=\"#eh_entries\">eh_entries</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &lt; <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>((<a class=\"id\" href=\"#__path__\">__path__</a>)-><a class=\"id\" href=\"#p_hdr\">p_hdr</a>-><a class=\"id\" href=\"#eh_max\">eh_max</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXT_LAST_EXTENT\">EXT_LAST_EXTENT</a>(<a class=\"id\" href=\"#__hdr__\">__hdr__</a>) \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#EXT_FIRST_EXTENT\">EXT_FIRST_EXTENT</a>((<a class=\"id\" href=\"#__hdr__\">__hdr__</a>)) + <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>((<a class=\"id\" href=\"#__hdr__\">__hdr__</a>)-><a class=\"id\" href=\"#eh_entries\">eh_entries</a>) - 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXT_LAST_INDEX\">EXT_LAST_INDEX</a>(<a class=\"id\" href=\"#__hdr__\">__hdr__</a>) \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#EXT_FIRST_INDEX\">EXT_FIRST_INDEX</a>((<a class=\"id\" href=\"#__hdr__\">__hdr__</a>)) + <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>((<a class=\"id\" href=\"#__hdr__\">__hdr__</a>)-><a class=\"id\" href=\"#eh_entries\">eh_entries</a>) - 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXT_MAX_EXTENT\">EXT_MAX_EXTENT</a>(<a class=\"id\" href=\"#__hdr__\">__hdr__</a>) \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#EXT_FIRST_EXTENT\">EXT_FIRST_EXTENT</a>((<a class=\"id\" href=\"#__hdr__\">__hdr__</a>)) + <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>((<a class=\"id\" href=\"#__hdr__\">__hdr__</a>)-><a class=\"id\" href=\"#eh_max\">eh_max</a>) - 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXT_MAX_INDEX\">EXT_MAX_INDEX</a>(<a class=\"id\" href=\"#__hdr__\">__hdr__</a>) \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#EXT_FIRST_INDEX\">EXT_FIRST_INDEX</a>((<a class=\"id\" href=\"#__hdr__\">__hdr__</a>)) + <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>((<a class=\"id\" href=\"#__hdr__\">__hdr__</a>)-><a class=\"id\" href=\"#eh_max\">eh_max</a>) - 1)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#ext4_extent_header\">ext4_extent_header</a> *<a class=\"id\" href=\"#ext_inode_hdr\">ext_inode_hdr</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#ext4_extent_header\">ext4_extent_header</a> *) <a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_data\">i_data</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#ext4_extent_header\">ext4_extent_header</a> *<a class=\"id\" href=\"#ext_block_hdr\">ext_block_hdr</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#ext4_extent_header\">ext4_extent_header</a> *) <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned short <a class=\"id\" href=\"#ext_depth\">ext_depth</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#ext_inode_hdr\">ext_inode_hdr</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#eh_depth\">eh_depth</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#ext4_ext_invalidate_cache\">ext4_ext_invalidate_cache</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_cached_extent\">i_cached_extent</a>.<a class=\"id\" href=\"#ec_type\">ec_type</a> = <a class=\"id\" href=\"#EXT4_EXT_CACHE_NO\">EXT4_EXT_CACHE_NO</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ext4_ext_mark_uninitialized\">ext4_ext_mark_uninitialized</a>(struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a> *<a class=\"id\" href=\"#ext\">ext</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* We can not have an uninitialized extent of zero length! */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#ext\">ext</a>-><a class=\"id\" href=\"#ee_len\">ee_len</a>) &amp; ~<a class=\"id\" href=\"#EXT_INIT_MAX_LEN\">EXT_INIT_MAX_LEN</a>) == 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext\">ext</a>-><a class=\"id\" href=\"#ee_len\">ee_len</a> |= <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#EXT_INIT_MAX_LEN\">EXT_INIT_MAX_LEN</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ext4_ext_is_uninitialized\">ext4_ext_is_uninitialized</a>(struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a> *<a class=\"id\" href=\"#ext\">ext</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Extent with ee_len of 0x8000 is treated as an initialized extent */</span>", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#ext\">ext</a>-><a class=\"id\" href=\"#ee_len\">ee_len</a>) &gt; <a class=\"id\" href=\"#EXT_INIT_MAX_LEN\">EXT_INIT_MAX_LEN</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ext4_ext_get_actual_len\">ext4_ext_get_actual_len</a>(struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a> *<a class=\"id\" href=\"#ext\">ext</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#ext\">ext</a>-><a class=\"id\" href=\"#ee_len\">ee_len</a>) <= <a class=\"id\" href=\"#EXT_INIT_MAX_LEN\">EXT_INIT_MAX_LEN</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#ext\">ext</a>-><a class=\"id\" href=\"#ee_len\">ee_len</a>) :", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#ext\">ext</a>-><a class=\"id\" href=\"#ee_len\">ee_len</a>) - <a class=\"id\" href=\"#EXT_INIT_MAX_LEN\">EXT_INIT_MAX_LEN</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ext4_ext_mark_initialized\">ext4_ext_mark_initialized</a>(struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a> *<a class=\"id\" href=\"#ext\">ext</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext\">ext</a>-><a class=\"id\" href=\"#ee_len\">ee_len</a> = <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#ext4_ext_get_actual_len\">ext4_ext_get_actual_len</a>(<a class=\"id\" href=\"#ext\">ext</a>));", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#ext4_ext_calc_metadata_amount\">ext4_ext_calc_metadata_amount</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#lblocks\">lblocks</a>);", 
"extern <a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#ext_pblock\">ext_pblock</a>(struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a> *<a class=\"id\" href=\"#ex\">ex</a>);", 
"extern <a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#idx_pblock\">idx_pblock</a>(struct <a class=\"id\" href=\"#ext4_extent_idx\">ext4_extent_idx</a> *);", 
"extern void <a class=\"id\" href=\"#ext4_ext_store_pblock\">ext4_ext_store_pblock</a>(struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a> *, <a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a>);", 
"extern int <a class=\"id\" href=\"#ext4_extent_tree_init\">ext4_extent_tree_init</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *, struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern int <a class=\"id\" href=\"#ext4_ext_calc_credits_for_single_extent\">ext4_ext_calc_credits_for_single_extent</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#num\">num</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#ext4_ext_path\">ext4_ext_path</a> *<a class=\"id\" href=\"#path\">path</a>);", 
"extern int <a class=\"id\" href=\"#ext4_can_extents_be_merged\">ext4_can_extents_be_merged</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a> *<a class=\"id\" href=\"#ex1\">ex1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a> *<a class=\"id\" href=\"#ex2\">ex2</a>);", 
"extern int <a class=\"id\" href=\"#ext4_ext_try_to_merge\">ext4_ext_try_to_merge</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#ext4_ext_path\">ext4_ext_path</a> *<a class=\"id\" href=\"#path\">path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a> *);", 
"extern unsigned int <a class=\"id\" href=\"#ext4_ext_check_overlap\">ext4_ext_check_overlap</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a> *, struct <a class=\"id\" href=\"#ext4_ext_path\">ext4_ext_path</a> *);", 
"extern int <a class=\"id\" href=\"#ext4_ext_insert_extent\">ext4_ext_insert_extent</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *, struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#ext4_ext_path\">ext4_ext_path</a> *, struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a> *, int);", 
"extern int <a class=\"id\" href=\"#ext4_ext_walk_space\">ext4_ext_walk_space</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, <a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a>, <a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext_prepare_callback\">ext_prepare_callback</a>, void *);", 
"extern struct <a class=\"id\" href=\"#ext4_ext_path\">ext4_ext_path</a> *<a class=\"id\" href=\"#ext4_ext_find_extent\">ext4_ext_find_extent</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, <a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_ext_path\">ext4_ext_path</a> *);", 
"extern int <a class=\"id\" href=\"#ext4_ext_search_left\">ext4_ext_search_left</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#ext4_ext_path\">ext4_ext_path</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> *, <a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> *);", 
"extern int <a class=\"id\" href=\"#ext4_ext_search_right\">ext4_ext_search_right</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#ext4_ext_path\">ext4_ext_path</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> *, <a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> *);", 
"extern void <a class=\"id\" href=\"#ext4_ext_drop_refs\">ext4_ext_drop_refs</a>(struct <a class=\"id\" href=\"#ext4_ext_path\">ext4_ext_path</a> *);", 
"extern int <a class=\"id\" href=\"#ext4_ext_check_inode\">ext4_ext_check_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _EXT4_EXTENTS */</span>", 
"", 
];
xr_frag_insert('l/45/13fd73e9c6b1acbd219e91864ff4c9df2ed115.xr', __xr_tmp);
