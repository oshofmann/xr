var __xr_tmp = [
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GCWQ_HIGHPRI_PENDING\">GCWQ_HIGHPRI_PENDING</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#nwork\">nwork</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#worklist\">worklist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#worklist\">worklist</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#get_work_cwq\">get_work_cwq</a>(<a class=\"id\" href=\"#nwork\">nwork</a>)-><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_HIGHPRI\">WQ_HIGHPRI</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_worker\">wake_up_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#GCWQ_HIGHPRI_PENDING\">GCWQ_HIGHPRI_PENDING</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CPU intensive works don't participate in concurrency</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * management.  They're the scheduler's responsibility.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cpu_intensive\">cpu_intensive</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker_set_flags\">worker_set_flags</a>(<a class=\"id\" href=\"#worker\">worker</a>, <a class=\"id\" href=\"#WORKER_CPU_INTENSIVE\">WORKER_CPU_INTENSIVE</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#work_clear_pending\">work_clear_pending</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_map_acquire\">lock_map_acquire</a>(&amp;<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_map_acquire\">lock_map_acquire</a>(&amp;<a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_workqueue_execute_start\">trace_workqueue_execute_start</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * While we must be careful to not use \"work\" after this, the trace</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * point will only record its address.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_workqueue_execute_end\">trace_workqueue_execute_end</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_map_release\">lock_map_release</a>(&amp;<a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_map_release\">lock_map_release</a>(&amp;<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#in_atomic\">in_atomic</a>() || <a class=\"id\" href=\"#lockdep_depth\">lockdep_depth</a>(<a class=\"id\" href=\"#current\">current</a>) &gt; 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"BUG: workqueue leaked lock or atomic: \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"%s/0x%08x/%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#preempt_count\">preempt_count</a>(), <a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(<a class=\"id\" href=\"#current\">current</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"    last function: \");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_symbol\">print_symbol</a>(\"%s\\n\", (unsigned long)<a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_show_held_locks\">debug_show_held_locks</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* clear cpu intensive status */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cpu_intensive\">cpu_intensive</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker_clr_flags\">worker_clr_flags</a>(<a class=\"id\" href=\"#worker\">worker</a>, <a class=\"id\" href=\"#WORKER_CPU_INTENSIVE\">WORKER_CPU_INTENSIVE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we're done with it, release */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_init\">hlist_del_init</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#hentry\">hentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#current_work\">current_work</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#current_cwq\">current_cwq</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cwq_dec_nr_in_flight\">cwq_dec_nr_in_flight</a>(<a class=\"id\" href=\"#cwq\">cwq</a>, <a class=\"id\" href=\"#work_color\">work_color</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * process_scheduled_works - process scheduled works</span>", 
"<span class=\"comment\"> * @worker: self</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Process all scheduled works.  Please note that the scheduled list</span>", 
"<span class=\"comment\"> * may change while processing a work, so this function repeatedly</span>", 
"<span class=\"comment\"> * fetches a work from the top and executes it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock) which may be released and regrabbed</span>", 
"<span class=\"comment\"> * multiple times.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#process_scheduled_works\">process_scheduled_works</a>(struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a>)", 
"{", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#scheduled\">scheduled</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#scheduled\">scheduled</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#process_one_work\">process_one_work</a>(<a class=\"id\" href=\"#worker\">worker</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * worker_thread - the worker thread function</span>", 
"<span class=\"comment\"> * @__worker: self</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The gcwq worker thread function.  There's a single dynamic pool of</span>", 
"<span class=\"comment\"> * these per each cpu.  These workers process all works regardless of</span>", 
"<span class=\"comment\"> * their specific target workqueue.  The only exception is works which</span>", 
"<span class=\"comment\"> * belong to workqueues with a rescuer which will be explained in</span>", 
"<span class=\"comment\"> * rescuer_thread().</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#worker_thread\">worker_thread</a>(void *<a class=\"id\" href=\"#__worker\">__worker</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a> = <a class=\"id\" href=\"#__worker\">__worker</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* tell the scheduler that this is a workqueue worker */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_WQ_WORKER\">PF_WQ_WORKER</a>;", 
"<a class=\"id\" href=\"#woke_up\">woke_up</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* DIE can be set only while we're idle, checking here is enough */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WORKER_DIE\">WORKER_DIE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PF_WQ_WORKER\">PF_WQ_WORKER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker_leave_idle\">worker_leave_idle</a>(<a class=\"id\" href=\"#worker\">worker</a>);", 
"<a class=\"id\" href=\"#recheck\">recheck</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* no more worker necessary? */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#need_more_worker\">need_more_worker</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#sleep\">sleep</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do we need to manage? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#may_start_working\">may_start_working</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>)) && <a class=\"id\" href=\"#manage_workers\">manage_workers</a>(<a class=\"id\" href=\"#worker\">worker</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#recheck\">recheck</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * -&gt;scheduled list can only be filled while a worker is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * preparing to process a work or actually processing it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure nobody diddled with it while I was sleeping.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#scheduled\">scheduled</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When control reaches this point, we're guaranteed to have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at least one idle worker or that someone else has already</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * assumed the manager role.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker_clr_flags\">worker_clr_flags</a>(<a class=\"id\" href=\"#worker\">worker</a>, <a class=\"id\" href=\"#WORKER_PREP\">WORKER_PREP</a>);", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#worklist\">worklist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#work_struct\">work_struct</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!(*<a class=\"id\" href=\"#work_data_bits\">work_data_bits</a>(<a class=\"id\" href=\"#work\">work</a>) &amp; <a class=\"id\" href=\"#WORK_STRUCT_LINKED\">WORK_STRUCT_LINKED</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* optimization path, not strictly necessary */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#process_one_work\">process_one_work</a>(<a class=\"id\" href=\"#worker\">worker</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#scheduled\">scheduled</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#process_scheduled_works\">process_scheduled_works</a>(<a class=\"id\" href=\"#worker\">worker</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#move_linked_works\">move_linked_works</a>(<a class=\"id\" href=\"#work\">work</a>, &amp;<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#scheduled\">scheduled</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#process_scheduled_works\">process_scheduled_works</a>(<a class=\"id\" href=\"#worker\">worker</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#keep_working\">keep_working</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker_set_flags\">worker_set_flags</a>(<a class=\"id\" href=\"#worker\">worker</a>, <a class=\"id\" href=\"#WORKER_PREP\">WORKER_PREP</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<a class=\"id\" href=\"#sleep\">sleep</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#need_to_manage_workers\">need_to_manage_workers</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>)) && <a class=\"id\" href=\"#manage_workers\">manage_workers</a>(<a class=\"id\" href=\"#worker\">worker</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#recheck\">recheck</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * gcwq-&gt;lock is held and there's no work to process and no</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to manage, sleep.  Workers are woken up only while</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * holding gcwq-&gt;lock or from local cpu, so setting the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * current state before releasing gcwq-&gt;lock is enough to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * prevent losing any event.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker_enter_idle\">worker_enter_idle</a>(<a class=\"id\" href=\"#worker\">worker</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#woke_up\">woke_up</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rescuer_thread - the rescuer thread function</span>", 
"<span class=\"comment\"> * @__wq: the associated workqueue</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Workqueue rescuer thread function.  There's one rescuer for each</span>", 
"<span class=\"comment\"> * workqueue which has WQ_RESCUER set.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Regular work processing on a gcwq may block trying to create a new</span>", 
"<span class=\"comment\"> * worker which uses GFP_KERNEL allocation which has slight chance of</span>", 
"<span class=\"comment\"> * developing into deadlock if some works currently on the same queue</span>", 
"<span class=\"comment\"> * need to be processed to satisfy the GFP_KERNEL allocation.  This is</span>", 
"<span class=\"comment\"> * the problem rescuer solves.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When such condition is possible, the gcwq summons rescuers of all</span>", 
"<span class=\"comment\"> * workqueues which have works queued on the gcwq and let them process</span>", 
"<span class=\"comment\"> * those works so that forward progress can be guaranteed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This should happen rarely.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rescuer_thread\">rescuer_thread</a>(void *<a class=\"id\" href=\"#__wq\">__wq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a> = <a class=\"id\" href=\"#__wq\">__wq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#rescuer\">rescuer</a> = <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#rescuer\">rescuer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#scheduled\">scheduled</a> = &amp;<a class=\"id\" href=\"#rescuer\">rescuer</a>-><a class=\"id\" href=\"#scheduled\">scheduled</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_unbound\">is_unbound</a> = <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_UNBOUND\">WQ_UNBOUND</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_user_nice\">set_user_nice</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#RESCUER_NICE_LEVEL\">RESCUER_NICE_LEVEL</a>);", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * See whether any cpu is asking for help.  Unbounded</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * workqueues use cpu 0 in mayday_mask for CPU_UNBOUND.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_mayday_cpu\">for_each_mayday_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#mayday_mask\">mayday_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#tcpu\">tcpu</a> = <a class=\"id\" href=\"#is_unbound\">is_unbound</a> ? <a class=\"id\" href=\"#WORK_CPU_UNBOUND\">WORK_CPU_UNBOUND</a> : <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#cwq\">cwq</a> = <a class=\"id\" href=\"#get_cwq\">get_cwq</a>(<a class=\"id\" href=\"#tcpu\">tcpu</a>, <a class=\"id\" href=\"#wq\">wq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>, *<a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mayday_clear_cpu\">mayday_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#mayday_mask\">mayday_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* migrate to the target cpu if possible */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rescuer\">rescuer</a>-><a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker_maybe_bind_and_lock\">worker_maybe_bind_and_lock</a>(<a class=\"id\" href=\"#rescuer\">rescuer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Slurp in all works issued via this workqueue and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * process'em.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#rescuer\">rescuer</a>-><a class=\"id\" href=\"#scheduled\">scheduled</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#worklist\">worklist</a>, <a class=\"id\" href=\"#entry\">entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_work_cwq\">get_work_cwq</a>(<a class=\"id\" href=\"#work\">work</a>) == <a class=\"id\" href=\"#cwq\">cwq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#move_linked_works\">move_linked_works</a>(<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#scheduled\">scheduled</a>, &amp;<a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#process_scheduled_works\">process_scheduled_works</a>(<a class=\"id\" href=\"#rescuer\">rescuer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#wq_barrier\">wq_barrier</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a><span class=\"ts\"/><a class=\"id\" href=\"#done\">done</a>;", 
"};", 
"", 
"static void <a class=\"id\" href=\"#wq_barrier_func\">wq_barrier_func</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wq_barrier\">wq_barrier</a> *<a class=\"id\" href=\"#barr\">barr</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#wq_barrier\">wq_barrier</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#barr\">barr</a>-><a class=\"id\" href=\"#done\">done</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * insert_wq_barrier - insert a barrier work</span>", 
"<span class=\"comment\"> * @cwq: cwq to insert barrier into</span>", 
"<span class=\"comment\"> * @barr: wq_barrier to insert</span>", 
"<span class=\"comment\"> * @target: target work to attach @barr to</span>", 
"<span class=\"comment\"> * @worker: worker currently executing @target, NULL if @target is not executing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @barr is linked to @target such that @barr is completed only after</span>", 
"<span class=\"comment\"> * @target finishes execution.  Please note that the ordering</span>", 
"<span class=\"comment\"> * guarantee is observed only with respect to @target and on the local</span>", 
"<span class=\"comment\"> * cpu.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Currently, a queued barrier can't be canceled.  This is because</span>", 
"<span class=\"comment\"> * try_to_grab_pending() can't determine whether the work to be</span>", 
"<span class=\"comment\"> * grabbed is at the head of the queue and thus can't clear LINKED</span>", 
"<span class=\"comment\"> * flag of the previous work while there must be a valid next work</span>", 
"<span class=\"comment\"> * after a work with LINKED flag set.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that when @worker is non-NULL, @target may be modified</span>", 
"<span class=\"comment\"> * underneath us, so we can't reliably determine cwq from @target.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock_irq(gcwq-&gt;lock).</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#insert_wq_barrier\">insert_wq_barrier</a>(struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#cwq\">cwq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#wq_barrier\">wq_barrier</a> *<a class=\"id\" href=\"#barr\">barr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#target\">target</a>, struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#linked\">linked</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * debugobject calls are safe here even with gcwq-&gt;lock locked</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * as we know for sure that this will not trigger any of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * checks and call back into the fixup functions where we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * might deadlock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK_ON_STACK\">INIT_WORK_ON_STACK</a>(&amp;<a class=\"id\" href=\"#barr\">barr</a>-><a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#wq_barrier_func\">wq_barrier_func</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#WORK_STRUCT_PENDING_BIT\">WORK_STRUCT_PENDING_BIT</a>, <a class=\"id\" href=\"#work_data_bits\">work_data_bits</a>(&amp;<a class=\"id\" href=\"#barr\">barr</a>-><a class=\"id\" href=\"#work\">work</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#barr\">barr</a>-><a class=\"id\" href=\"#done\">done</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If @target is currently being executed, schedule the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * barrier to the worker; otherwise, put it after @target.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#worker\">worker</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#scheduled\">scheduled</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#bits\">bits</a> = <a class=\"id\" href=\"#work_data_bits\">work_data_bits</a>(<a class=\"id\" href=\"#target\">target</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#target\">target</a>-><a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* there can already be other linked works, inherit and set */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#linked\">linked</a> = *<a class=\"id\" href=\"#bits\">bits</a> &amp; <a class=\"id\" href=\"#WORK_STRUCT_LINKED\">WORK_STRUCT_LINKED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#WORK_STRUCT_LINKED_BIT\">WORK_STRUCT_LINKED_BIT</a>, <a class=\"id\" href=\"#bits\">bits</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_work_activate\">debug_work_activate</a>(&amp;<a class=\"id\" href=\"#barr\">barr</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insert_work\">insert_work</a>(<a class=\"id\" href=\"#cwq\">cwq</a>, &amp;<a class=\"id\" href=\"#barr\">barr</a>-><a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#work_color_to_flags\">work_color_to_flags</a>(<a class=\"id\" href=\"#WORK_NO_COLOR\">WORK_NO_COLOR</a>) | <a class=\"id\" href=\"#linked\">linked</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * flush_workqueue_prep_cwqs - prepare cwqs for workqueue flushing</span>", 
"<span class=\"comment\"> * @wq: workqueue being flushed</span>", 
"<span class=\"comment\"> * @flush_color: new flush color, &lt; 0 for no-op</span>", 
"<span class=\"comment\"> * @work_color: new work color, &lt; 0 for no-op</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Prepare cwqs for workqueue flushing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @flush_color is non-negative, flush_color on all cwqs should be</span>", 
"<span class=\"comment\"> * -1.  If no cwq has in-flight commands at the specified color, all</span>", 
"<span class=\"comment\"> * cwq-&gt;flush_color's stay at -1 and %false is returned.  If any cwq</span>", 
"<span class=\"comment\"> * has in flight commands, its cwq-&gt;flush_color is set to</span>", 
"<span class=\"comment\"> * @flush_color, @wq-&gt;nr_cwqs_to_flush is updated accordingly, cwq</span>", 
"<span class=\"comment\"> * wakeup logic is armed and %true is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller should have initialized @wq-&gt;first_flusher prior to</span>", 
"<span class=\"comment\"> * calling this function with non-negative @flush_color.  If</span>", 
"<span class=\"comment\"> * @flush_color is negative, no flush color update is done and %false</span>", 
"<span class=\"comment\"> * is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @work_color is non-negative, all cwqs should have the same</span>", 
"<span class=\"comment\"> * work_color which is previous to @work_color and all will be</span>", 
"<span class=\"comment\"> * advanced to @work_color.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * mutex_lock(wq-&gt;flush_mutex).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * %true if @flush_color &gt;= 0 and there's something to flush.  %false</span>", 
"<span class=\"comment\"> * otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#flush_workqueue_prep_cwqs\">flush_workqueue_prep_cwqs</a>(struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#flush_color\">flush_color</a>, int <a class=\"id\" href=\"#work_color\">work_color</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#wait\">wait</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flush_color\">flush_color</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#nr_cwqs_to_flush\">nr_cwqs_to_flush</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#nr_cwqs_to_flush\">nr_cwqs_to_flush</a>, 1);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cwq_cpu\">for_each_cwq_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#wq\">wq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#cwq\">cwq</a> = <a class=\"id\" href=\"#get_cwq\">get_cwq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#wq\">wq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flush_color\">flush_color</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a> != -1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#nr_in_flight\">nr_in_flight</a>[<a class=\"id\" href=\"#flush_color\">flush_color</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a> = <a class=\"id\" href=\"#flush_color\">flush_color</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#nr_cwqs_to_flush\">nr_cwqs_to_flush</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait\">wait</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#work_color\">work_color</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#work_color\">work_color</a> != <a class=\"id\" href=\"#work_next_color\">work_next_color</a>(<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#work_color\">work_color</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#work_color\">work_color</a> = <a class=\"id\" href=\"#work_color\">work_color</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flush_color\">flush_color</a> >= 0 && <a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#nr_cwqs_to_flush\">nr_cwqs_to_flush</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#first_flusher\">first_flusher</a>-><a class=\"id\" href=\"#done\">done</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#wait\">wait</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * flush_workqueue - ensure that any scheduled work has run to completion.</span>", 
"<span class=\"comment\"> * @wq: workqueue to flush</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Forces execution of the workqueue and blocks until its completion.</span>", 
"<span class=\"comment\"> * This is typically used in driver shutdown handlers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We sleep until all works which were queued on entry have been handled,</span>", 
"<span class=\"comment\"> * but we are not livelocked by new incoming ones.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#flush_workqueue\">flush_workqueue</a>(struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wq_flusher\">wq_flusher</a> <a class=\"id\" href=\"#this_flusher\">this_flusher</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#LIST_HEAD_INIT\">LIST_HEAD_INIT</a>(<a class=\"id\" href=\"#this_flusher\">this_flusher</a>.<a class=\"id\" href=\"#list\">list</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#flush_color\">flush_color</a> = -1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#done\">done</a> = <a class=\"id\" href=\"#COMPLETION_INITIALIZER_ONSTACK\">COMPLETION_INITIALIZER_ONSTACK</a>(<a class=\"id\" href=\"#this_flusher\">this_flusher</a>.<a class=\"id\" href=\"#done\">done</a>),", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#next_color\">next_color</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_map_acquire\">lock_map_acquire</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_map_release\">lock_map_release</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flush_mutex\">flush_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Start-to-wait phase</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_color\">next_color</a> = <a class=\"id\" href=\"#work_next_color\">work_next_color</a>(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#work_color\">work_color</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next_color\">next_color</a> != <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Color space is not full.  The current work_color</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * becomes our flush_color and work_color is advanced</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * by one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flusher_overflow\">flusher_overflow</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_flusher\">this_flusher</a>.<a class=\"id\" href=\"#flush_color\">flush_color</a> = <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#work_color\">work_color</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#work_color\">work_color</a> = <a class=\"id\" href=\"#next_color\">next_color</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#first_flusher\">first_flusher</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no flush in progress, become the first flusher */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a> != <a class=\"id\" href=\"#this_flusher\">this_flusher</a>.<a class=\"id\" href=\"#flush_color\">flush_color</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#first_flusher\">first_flusher</a> = &amp;<a class=\"id\" href=\"#this_flusher\">this_flusher</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#flush_workqueue_prep_cwqs\">flush_workqueue_prep_cwqs</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#work_color\">work_color</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nothing to flush, done */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a> = <a class=\"id\" href=\"#next_color\">next_color</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#first_flusher\">first_flusher</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* wait in queue */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a> == <a class=\"id\" href=\"#this_flusher\">this_flusher</a>.<a class=\"id\" href=\"#flush_color\">flush_color</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#this_flusher\">this_flusher</a>.<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flusher_queue\">flusher_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_workqueue_prep_cwqs\">flush_workqueue_prep_cwqs</a>(<a class=\"id\" href=\"#wq\">wq</a>, -1, <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#work_color\">work_color</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Oops, color space is full, wait on overflow queue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The next flush completion will assign us</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * flush_color and transfer to flusher_queue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#this_flusher\">this_flusher</a>.<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flusher_overflow\">flusher_overflow</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flush_mutex\">flush_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#this_flusher\">this_flusher</a>.<a class=\"id\" href=\"#done\">done</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wake-up-and-cascade phase</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First flushers are responsible for cascading flushes and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * handling overflow.  Non-first flushers can simply return.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#first_flusher\">first_flusher</a> != &amp;<a class=\"id\" href=\"#this_flusher\">this_flusher</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flush_mutex\">flush_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we might have raced, check again with mutex held */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#first_flusher\">first_flusher</a> != &amp;<a class=\"id\" href=\"#this_flusher\">this_flusher</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#first_flusher\">first_flusher</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#this_flusher\">this_flusher</a>.<a class=\"id\" href=\"#list\">list</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a> != <a class=\"id\" href=\"#this_flusher\">this_flusher</a>.<a class=\"id\" href=\"#flush_color\">flush_color</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#true\">true</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#wq_flusher\">wq_flusher</a> *<a class=\"id\" href=\"#next\">next</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* complete all the flushers sharing the current flush color */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flusher_queue\">flusher_queue</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a> != <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#done\">done</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flusher_overflow\">flusher_overflow</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a> != <a class=\"id\" href=\"#work_next_color\">work_next_color</a>(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#work_color\">work_color</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this flush_color is finished, advance by one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a> = <a class=\"id\" href=\"#work_next_color\">work_next_color</a>(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* one color has been freed, handle overflow queue */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flusher_overflow\">flusher_overflow</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Assign the same color to all overflowed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * flushers, advance work_color and append to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * flusher_queue.  This is the start-to-wait</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * phase for these overflowed flushers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flusher_overflow\">flusher_overflow</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a> = <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#work_color\">work_color</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#work_color\">work_color</a> = <a class=\"id\" href=\"#work_next_color\">work_next_color</a>(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#work_color\">work_color</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_splice_tail_init\">list_splice_tail_init</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flusher_overflow\">flusher_overflow</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flusher_queue\">flusher_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_workqueue_prep_cwqs\">flush_workqueue_prep_cwqs</a>(<a class=\"id\" href=\"#wq\">wq</a>, -1, <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#work_color\">work_color</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flusher_queue\">flusher_queue</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a> != <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#work_color\">work_color</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Need to flush more colors.  Make the next flusher</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the new first flusher and arm cwqs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a> == <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#work_color\">work_color</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a> != <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#first_flusher\">first_flusher</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flush_workqueue_prep_cwqs\">flush_workqueue_prep_cwqs</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flush_color\">flush_color</a>, -1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Meh... this color is already done, clear first</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * flusher and repeat cascading.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#first_flusher\">first_flusher</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flush_mutex\">flush_mutex</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#flush_workqueue\">flush_workqueue</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * flush_work - block until a work_struct's callback has terminated</span>", 
"<span class=\"comment\"> * @work: the work which is to be flushed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns false if @work has already terminated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is expected that, prior to calling flush_work(), the caller has</span>", 
"<span class=\"comment\"> * arranged for the work to not be requeued, otherwise it doesn't make</span>", 
"<span class=\"comment\"> * sense to use this function.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#flush_work\">flush_work</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#cwq\">cwq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wq_barrier\">wq_barrier</a> <a class=\"id\" href=\"#barr\">barr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#get_work_gcwq\">get_work_gcwq</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gcwq\">gcwq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#entry\">entry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * See the comment near try_to_grab_pending()-&gt;smp_rmb().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If it was re-queued to a different gcwq under us, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * are not going to wait.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cwq\">cwq</a> = <a class=\"id\" href=\"#get_work_cwq\">get_work_cwq</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#cwq\">cwq</a> || <a class=\"id\" href=\"#gcwq\">gcwq</a> != <a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#gcwq\">gcwq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#already_gone\">already_gone</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a> = <a class=\"id\" href=\"#find_worker_executing_work\">find_worker_executing_work</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#worker\">worker</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#already_gone\">already_gone</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cwq\">cwq</a> = <a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#current_cwq\">current_cwq</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insert_wq_barrier\">insert_wq_barrier</a>(<a class=\"id\" href=\"#cwq\">cwq</a>, &amp;<a class=\"id\" href=\"#barr\">barr</a>, <a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#worker\">worker</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_map_acquire\">lock_map_acquire</a>(&amp;<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_map_release\">lock_map_release</a>(&amp;<a class=\"id\" href=\"#cwq\">cwq</a>-><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#barr\">barr</a>.<a class=\"id\" href=\"#done\">done</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destroy_work_on_stack\">destroy_work_on_stack</a>(&amp;<a class=\"id\" href=\"#barr\">barr</a>.<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>return 1;", 
"<a class=\"id\" href=\"#already_gone\">already_gone</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#flush_work\">flush_work</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Upon a successful return (&gt;= 0), the caller \"owns\" WORK_STRUCT_PENDING bit,</span>", 
"<span class=\"comment\"> * so this work can't be re-armed in any way.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#try_to_grab_pending\">try_to_grab_pending</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#WORK_STRUCT_PENDING_BIT\">WORK_STRUCT_PENDING_BIT</a>, <a class=\"id\" href=\"#work_data_bits\">work_data_bits</a>(<a class=\"id\" href=\"#work\">work</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The queueing is in progress, or it is already queued. Try to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * steal it from -&gt;worklist without clearing WORK_STRUCT_PENDING.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gcwq\">gcwq</a> = <a class=\"id\" href=\"#get_work_gcwq\">get_work_gcwq</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gcwq\">gcwq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#entry\">entry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This work is queued, but perhaps we locked the wrong gcwq.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In that case we must see the new value after rmb(), see</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * insert_work()-&gt;wmb().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#gcwq\">gcwq</a> == <a class=\"id\" href=\"#get_work_gcwq\">get_work_gcwq</a>(<a class=\"id\" href=\"#work\">work</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_work_deactivate\">debug_work_deactivate</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cwq_dec_nr_in_flight\">cwq_dec_nr_in_flight</a>(<a class=\"id\" href=\"#get_work_cwq\">get_work_cwq</a>(<a class=\"id\" href=\"#work\">work</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_work_color\">get_work_color</a>(<a class=\"id\" href=\"#work\">work</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#work_data_bits\">work_data_bits</a>(<a class=\"id\" href=\"#work\">work</a>) &amp; <a class=\"id\" href=\"#WORK_STRUCT_DELAYED\">WORK_STRUCT_DELAYED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#wait_on_cpu_work\">wait_on_cpu_work</a>(struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#gcwq\">gcwq</a>, struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wq_barrier\">wq_barrier</a> <a class=\"id\" href=\"#barr\">barr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#worker\">worker</a> *<a class=\"id\" href=\"#worker\">worker</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#worker\">worker</a> = <a class=\"id\" href=\"#find_worker_executing_work\">find_worker_executing_work</a>(<a class=\"id\" href=\"#gcwq\">gcwq</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#worker\">worker</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insert_wq_barrier\">insert_wq_barrier</a>(<a class=\"id\" href=\"#worker\">worker</a>-><a class=\"id\" href=\"#current_cwq\">current_cwq</a>, &amp;<a class=\"id\" href=\"#barr\">barr</a>, <a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#worker\">worker</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#gcwq\">gcwq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#worker\">worker</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#barr\">barr</a>.<a class=\"id\" href=\"#done\">done</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#destroy_work_on_stack\">destroy_work_on_stack</a>(&amp;<a class=\"id\" href=\"#barr\">barr</a>.<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#wait_on_work\">wait_on_work</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_map_acquire\">lock_map_acquire</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_map_release\">lock_map_release</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_gcwq_cpu\">for_each_gcwq_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_cpu_work\">wait_on_cpu_work</a>(<a class=\"id\" href=\"#get_gcwq\">get_gcwq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#work\">work</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__cancel_work_timer\">__cancel_work_timer</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a>* <a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (<a class=\"id\" href=\"#timer\">timer</a> && <a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#del_timer\">del_timer</a>(<a class=\"id\" href=\"#timer\">timer</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#try_to_grab_pending\">try_to_grab_pending</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_work\">wait_on_work</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a> &lt; 0));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_work_data\">clear_work_data</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cancel_work_sync - block until a work_struct's callback has terminated</span>", 
"<span class=\"comment\"> * @work: the work which is to be flushed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if @work was pending.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cancel_work_sync() will cancel the work if it is queued. If the work's</span>", 
"<span class=\"comment\"> * callback appears to be running, cancel_work_sync() will block until it</span>", 
"<span class=\"comment\"> * has completed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is possible to use this function if the work re-queues itself. It can</span>", 
"<span class=\"comment\"> * cancel the work even if it migrates to another workqueue, however in that</span>", 
"<span class=\"comment\"> * case it only guarantees that work-&gt;func() has completed on the last queued</span>", 
"<span class=\"comment\"> * workqueue.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cancel_work_sync(&amp;delayed_work-&gt;work) should be used only if -&gt;timer is not</span>", 
"<span class=\"comment\"> * pending, otherwise it goes into a busy-wait loop until the timer expires.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must ensure that workqueue_struct on which this work was last</span>", 
"<span class=\"comment\"> * queued can't be destroyed before this function returns.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cancel_work_sync\">cancel_work_sync</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__cancel_work_timer\">__cancel_work_timer</a>(<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#cancel_work_sync\">cancel_work_sync</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cancel_delayed_work_sync - reliably kill off a delayed work.</span>", 
"<span class=\"comment\"> * @dwork: the delayed work struct</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if @dwork was pending.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is possible to use this function if @dwork rearms itself via queue_work()</span>", 
"<span class=\"comment\"> * or queue_delayed_work(). See also the comment for cancel_work_sync().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cancel_delayed_work_sync\">cancel_delayed_work_sync</a>(struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *<a class=\"id\" href=\"#dwork\">dwork</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__cancel_work_timer\">__cancel_work_timer</a>(&amp;<a class=\"id\" href=\"#dwork\">dwork</a>-><a class=\"id\" href=\"#work\">work</a>, &amp;<a class=\"id\" href=\"#dwork\">dwork</a>-><a class=\"id\" href=\"#timer\">timer</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#cancel_delayed_work_sync\">cancel_delayed_work_sync</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * schedule_work - put work task in global workqueue</span>", 
"<span class=\"comment\"> * @work: job to be done</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns zero if @work was already on the kernel-global workqueue and</span>", 
"<span class=\"comment\"> * non-zero otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This puts a job in the kernel-global workqueue if it was not already</span>", 
"<span class=\"comment\"> * queued and leaves it in the same position on the kernel-global</span>", 
"<span class=\"comment\"> * workqueue otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#schedule_work\">schedule_work</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#queue_work\">queue_work</a>(<a class=\"id\" href=\"#system_wq\">system_wq</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#schedule_work\">schedule_work</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * schedule_work_on - put work task on a specific cpu</span>", 
"<span class=\"comment\"> * @cpu: cpu to put the work task on</span>", 
"<span class=\"comment\"> * @work: job to be done</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This puts a job on a specific cpu</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#schedule_work_on\">schedule_work_on</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#queue_work_on\">queue_work_on</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#system_wq\">system_wq</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#schedule_work_on\">schedule_work_on</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * schedule_delayed_work - put work task in global workqueue after delay</span>", 
"<span class=\"comment\"> * @dwork: job to be done</span>", 
"<span class=\"comment\"> * @delay: number of jiffies to wait or 0 for immediate execution</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After waiting for a given time this puts a job in the kernel-global</span>", 
"<span class=\"comment\"> * workqueue.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#schedule_delayed_work\">schedule_delayed_work</a>(struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *<a class=\"id\" href=\"#dwork\">dwork</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#delay\">delay</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#queue_delayed_work\">queue_delayed_work</a>(<a class=\"id\" href=\"#system_wq\">system_wq</a>, <a class=\"id\" href=\"#dwork\">dwork</a>, <a class=\"id\" href=\"#delay\">delay</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#schedule_delayed_work\">schedule_delayed_work</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * flush_delayed_work - block until a dwork_struct's callback has terminated</span>", 
"<span class=\"comment\"> * @dwork: the delayed work which is to be flushed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Any timeout is cancelled, and any pending work is run immediately.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#flush_delayed_work\">flush_delayed_work</a>(struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *<a class=\"id\" href=\"#dwork\">dwork</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#del_timer_sync\">del_timer_sync</a>(&amp;<a class=\"id\" href=\"#dwork\">dwork</a>-><a class=\"id\" href=\"#timer\">timer</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__queue_work\">__queue_work</a>(<a class=\"id\" href=\"#get_cpu\">get_cpu</a>(), <a class=\"id\" href=\"#get_work_cwq\">get_work_cwq</a>(&amp;<a class=\"id\" href=\"#dwork\">dwork</a>-><a class=\"id\" href=\"#work\">work</a>)-><a class=\"id\" href=\"#wq\">wq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#dwork\">dwork</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_work\">flush_work</a>(&amp;<a class=\"id\" href=\"#dwork\">dwork</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#flush_delayed_work\">flush_delayed_work</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * schedule_delayed_work_on - queue work in global workqueue on CPU after delay</span>", 
"<span class=\"comment\"> * @cpu: cpu to use</span>", 
"<span class=\"comment\"> * @dwork: job to be done</span>", 
"<span class=\"comment\"> * @delay: number of jiffies to wait</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After waiting for a given time this puts a job in the kernel-global</span>", 
"<span class=\"comment\"> * workqueue on the specified CPU.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#schedule_delayed_work_on\">schedule_delayed_work_on</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *<a class=\"id\" href=\"#dwork\">dwork</a>, unsigned long <a class=\"id\" href=\"#delay\">delay</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#queue_delayed_work_on\">queue_delayed_work_on</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#system_wq\">system_wq</a>, <a class=\"id\" href=\"#dwork\">dwork</a>, <a class=\"id\" href=\"#delay\">delay</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#schedule_delayed_work_on\">schedule_delayed_work_on</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * schedule_on_each_cpu - call a function on each online CPU from keventd</span>", 
"<span class=\"comment\"> * @func: the function to call</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns zero on success.</span>", 
"<span class=\"comment\"> * Returns -ve errno on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * schedule_on_each_cpu() is very slow.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#schedule_on_each_cpu\">schedule_on_each_cpu</a>(<a class=\"id\" href=\"#work_func_t\">work_func_t</a> <a class=\"id\" href=\"#func\">func</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#works\">works</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#works\">works</a> = <a class=\"id\" href=\"#alloc_percpu\">alloc_percpu</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#works\">works</a>)", 
];
xr_frag_insert('l/45/36f318836ce6b228da61cfa6a98054677b9162.xr', __xr_tmp);
