var __xr_tmp = [
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check this allocation failure is caused by cpuset's wall function */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_zone_zonelist_nodemask\">for_each_zone_zonelist_nodemask</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#zonelist\">zonelist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpuset_zone_allowed_softwall\">cpuset_zone_allowed_softwall</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuset_limited\">cpuset_limited</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuset_limited\">cpuset_limited</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#totalpages\">totalpages</a> = <a class=\"id\" href=\"#total_swap_pages\">total_swap_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#cpuset_current_mems_allowed\">cpuset_current_mems_allowed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#totalpages\">totalpages</a> += <a class=\"id\" href=\"#node_spanned_pages\">node_spanned_pages</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#CONSTRAINT_CPUSET\">CONSTRAINT_CPUSET</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#CONSTRAINT_NONE\">CONSTRAINT_NONE</a>;", 
"}", 
"#else", 
"static enum <a class=\"id\" href=\"#oom_constraint\">oom_constraint</a> <a class=\"id\" href=\"#constrained_alloc\">constrained_alloc</a>(struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#totalpages\">totalpages</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#totalpages\">totalpages</a> = <a class=\"id\" href=\"#totalram_pages\">totalram_pages</a> + <a class=\"id\" href=\"#total_swap_pages\">total_swap_pages</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#CONSTRAINT_NONE\">CONSTRAINT_NONE</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Simple selection loop. We chose the process with the highest</span>", 
"<span class=\"comment\"> * number of 'points'. We expect the caller will lock the tasklist.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (not docbooked, we don't want this one cluttering up the manual)</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#select_bad_process\">select_bad_process</a>(unsigned int *<a class=\"id\" href=\"#ppoints\">ppoints</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#totalpages\">totalpages</a>, struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#chosen\">chosen</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ppoints\">ppoints</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_process\">for_each_process</a>(<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#points\">points</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#oom_unkillable_task\">oom_unkillable_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This task already has access to memory reserves and is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * being killed. Don't allow any other task access to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * memory reserve.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note: this may have a chance of deadlock if it gets</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * blocked waiting for another task which itself is waiting</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for memory. Is there a better alternative?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#TIF_MEMDIE\">TIF_MEMDIE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-1UL);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is in the process of releasing memory so wait for it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to finish before killing some other task by mistake.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * However, if p is the current task, we allow the 'kill' to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * go ahead if it is exiting: this will simply set TIF_MEMDIE,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * which will allow it to gain access to memory reserves in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the process of exiting and releasing its resources.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Otherwise we could get an easy OOM deadlock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#thread_group_empty\">thread_group_empty</a>(<a class=\"id\" href=\"#p\">p</a>) && (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_EXITING\">PF_EXITING</a>) && <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mm\">mm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-1UL);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chosen\">chosen</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ppoints\">ppoints</a> = 1000;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#points\">points</a> = <a class=\"id\" href=\"#oom_badness\">oom_badness</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>, <a class=\"id\" href=\"#totalpages\">totalpages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#points\">points</a> &gt; *<a class=\"id\" href=\"#ppoints\">ppoints</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chosen\">chosen</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ppoints\">ppoints</a> = <a class=\"id\" href=\"#points\">points</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#chosen\">chosen</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dump_tasks - dump current memory state of all system tasks</span>", 
"<span class=\"comment\"> * @mem: current's memory controller, if constrained</span>", 
"<span class=\"comment\"> * @nodemask: nodemask passed to page allocator for mempolicy ooms</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Dumps the current memory state of all eligible tasks.  Tasks not in the same</span>", 
"<span class=\"comment\"> * memcg, not in the same cpuset, or bound to a disjoint set of mempolicy nodes</span>", 
"<span class=\"comment\"> * are not shown.</span>", 
"<span class=\"comment\"> * State information includes task's pid, uid, tgid, vm size, rss, cpu, oom_adj</span>", 
"<span class=\"comment\"> * value, oom_score_adj value, and name.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Call with tasklist_lock read-locked.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dump_tasks\">dump_tasks</a>(const struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"[ pid ]   uid  tgid total_vm      rss cpu oom_adj oom_score_adj name\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_process\">for_each_process</a>(<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#oom_unkillable_task\">oom_unkillable_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#find_lock_task_mm\">find_lock_task_mm</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#task\">task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This is a kthread or all of p's threads have already</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * detached their mm's.  There's no need to report</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * them; they can't be oom killed anyway.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"[%5d] %5d %5d %8lu %8lu %3u     %3d         %5d %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#task_uid\">task_uid</a>(<a class=\"id\" href=\"#task\">task</a>), <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#tgid\">tgid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#total_vm\">total_vm</a>, <a class=\"id\" href=\"#get_mm_rss\">get_mm_rss</a>(<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#mm\">mm</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#task\">task</a>), <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#oom_adj\">oom_adj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#oom_score_adj\">oom_score_adj</a>, <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#comm\">comm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#dump_header\">dump_header</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"%s invoked oom-killer: gfp_mask=0x%x, order=%d, \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"oom_adj=%d, oom_score_adj=%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#oom_adj\">oom_adj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#oom_score_adj\">oom_score_adj</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuset_print_task_mems_allowed\">cpuset_print_task_mems_allowed</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_print_oom_info\">mem_cgroup_print_oom_info</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_mem\">show_mem</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_oom_dump_tasks\">sysctl_oom_dump_tasks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_tasks\">dump_tasks</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#x\">x</a>) ((<a class=\"id\" href=\"#x\">x</a>) << (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>-10))", 
"static int <a class=\"id\" href=\"#oom_kill_task\">oom_kill_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#find_lock_task_mm\">find_lock_task_mm</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"Killed process %d (%s) total-vm:%lukB, anon-rss:%lukB, file-rss:%lukB\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(<a class=\"id\" href=\"#p\">p</a>), <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#total_vm\">total_vm</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#get_mm_counter\">get_mm_counter</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#MM_ANONPAGES\">MM_ANONPAGES</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#get_mm_counter\">get_mm_counter</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#MM_FILEPAGES\">MM_FILEPAGES</a>)));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_thread_flag\">set_tsk_thread_flag</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#TIF_MEMDIE\">TIF_MEMDIE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#force_sig\">force_sig</a>(<a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We give our sacrificial lamb high priority and access to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * all the memory it needs. That way it should be able to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * exit() and clear out its resources quickly...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#boost_dying_task_prio\">boost_dying_task_prio</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#mem\">mem</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#K\">K</a>", 
"", 
"static int <a class=\"id\" href=\"#oom_kill_process\">oom_kill_process</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#points\">points</a>, unsigned long <a class=\"id\" href=\"#totalpages\">totalpages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const char *<a class=\"id\" href=\"#message\">message</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#victim\">victim</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#victim_points\">victim_points</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_header\">dump_header</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the task is already exiting, don't alarm the sysadmin or kill</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * its children or threads, just set TIF_MEMDIE so it can die quickly</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_EXITING\">PF_EXITING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_thread_flag\">set_tsk_thread_flag</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#TIF_MEMDIE\">TIF_MEMDIE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boost_dying_task_prio\">boost_dying_task_prio</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"%s: Kill process %d (%s) score %d or sacrifice child\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#message\">message</a>, <a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(<a class=\"id\" href=\"#p\">p</a>), <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#points\">points</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If any of p's children has a different mm and is eligible for kill,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the one with the highest badness() score is sacrificed for its</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * parent.  This attempts to lose the minimal amount of work done while</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * still freeing memory.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#child\">child</a>, &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#children\">children</a>, <a class=\"id\" href=\"#sibling\">sibling</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#child_points\">child_points</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * oom_badness() returns 0 if the thread is unkillable</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child_points\">child_points</a> = <a class=\"id\" href=\"#oom_badness\">oom_badness</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#totalpages\">totalpages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#child_points\">child_points</a> &gt; <a class=\"id\" href=\"#victim_points\">victim_points</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#victim\">victim</a> = <a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#victim_points\">victim_points</a> = <a class=\"id\" href=\"#child_points\">child_points</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#oom_kill_task\">oom_kill_task</a>(<a class=\"id\" href=\"#victim\">victim</a>, <a class=\"id\" href=\"#mem\">mem</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Determines whether the kernel must panic because of the panic_on_oom sysctl.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#check_panic_on_oom\">check_panic_on_oom</a>(enum <a class=\"id\" href=\"#oom_constraint\">oom_constraint</a> <a class=\"id\" href=\"#constraint\">constraint</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#sysctl_panic_on_oom\">sysctl_panic_on_oom</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_panic_on_oom\">sysctl_panic_on_oom</a> != 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * panic_on_oom == 1 only affects CONSTRAINT_NONE, the kernel</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * does not panic for cpuset, mempolicy, or memcg allocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * failures.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#constraint\">constraint</a> != <a class=\"id\" href=\"#CONSTRAINT_NONE\">CONSTRAINT_NONE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump_header\">dump_header</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Out of memory: %s panic_on_oom is enabled\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysctl_panic_on_oom\">sysctl_panic_on_oom</a> == 2 ? \"compulsory\" : \"system-wide\");", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_MEM_RES_CTLR\">CONFIG_CGROUP_MEM_RES_CTLR</a>", 
"void <a class=\"id\" href=\"#mem_cgroup_out_of_memory\">mem_cgroup_out_of_memory</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#limit\">limit</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#points\">points</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_panic_on_oom\">check_panic_on_oom</a>(<a class=\"id\" href=\"#CONSTRAINT_MEMCG\">CONSTRAINT_MEMCG</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#mem_cgroup_get_limit\">mem_cgroup_get_limit</a>(<a class=\"id\" href=\"#mem\">mem</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#select_bad_process\">select_bad_process</a>(&amp;<a class=\"id\" href=\"#points\">points</a>, <a class=\"id\" href=\"#limit\">limit</a>, <a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a> || <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#p\">p</a>) == -1UL)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#oom_kill_process\">oom_kill_process</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, 0, <a class=\"id\" href=\"#points\">points</a>, <a class=\"id\" href=\"#limit\">limit</a>, <a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Memory cgroup out of memory\"))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#BLOCKING_NOTIFIER_HEAD\">BLOCKING_NOTIFIER_HEAD</a>(<a class=\"id\" href=\"#oom_notify_list\">oom_notify_list</a>);", 
"", 
"int <a class=\"id\" href=\"#register_oom_notifier\">register_oom_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#blocking_notifier_chain_register\">blocking_notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#oom_notify_list\">oom_notify_list</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#register_oom_notifier\">register_oom_notifier</a>);", 
"", 
"int <a class=\"id\" href=\"#unregister_oom_notifier\">unregister_oom_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#blocking_notifier_chain_unregister\">blocking_notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#oom_notify_list\">oom_notify_list</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#unregister_oom_notifier\">unregister_oom_notifier</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Try to acquire the OOM killer lock for the zones in zonelist.  Returns zero</span>", 
"<span class=\"comment\"> * if a parallel OOM killing is already taking place that includes a zone in</span>", 
"<span class=\"comment\"> * the zonelist.  Otherwise, locks all zones in the zonelist and returns 1.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#try_set_zonelist_oom\">try_set_zonelist_oom</a>(struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#z\">z</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#zone_scan_lock\">zone_scan_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_zone_zonelist\">for_each_zone_zonelist</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#gfp_zone\">gfp_zone</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_is_oom_locked\">zone_is_oom_locked</a>(<a class=\"id\" href=\"#zone\">zone</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_zone_zonelist\">for_each_zone_zonelist</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#gfp_zone\">gfp_zone</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Lock each zone in the zonelist under zone_scan_lock so a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * parallel invocation of try_set_zonelist_oom() doesn't succeed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * when it shouldn't.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_set_flag\">zone_set_flag</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#ZONE_OOM_LOCKED\">ZONE_OOM_LOCKED</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#zone_scan_lock\">zone_scan_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Clears the ZONE_OOM_LOCKED flag for all zones in the zonelist so that failed</span>", 
"<span class=\"comment\"> * allocation attempts with zonelists containing them may now recall the OOM</span>", 
"<span class=\"comment\"> * killer, if necessary.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#clear_zonelist_oom\">clear_zonelist_oom</a>(struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#z\">z</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#zone_scan_lock\">zone_scan_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_zone_zonelist\">for_each_zone_zonelist</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#gfp_zone\">gfp_zone</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_clear_flag\">zone_clear_flag</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#ZONE_OOM_LOCKED\">ZONE_OOM_LOCKED</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#zone_scan_lock\">zone_scan_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Try to acquire the oom killer lock for all system zones.  Returns zero if a</span>", 
"<span class=\"comment\"> * parallel oom killing is taking place, otherwise locks all zones and returns</span>", 
"<span class=\"comment\"> * non-zero.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#try_set_system_oom\">try_set_system_oom</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#zone_scan_lock\">zone_scan_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_populated_zone\">for_each_populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_is_oom_locked\">zone_is_oom_locked</a>(<a class=\"id\" href=\"#zone\">zone</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_populated_zone\">for_each_populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_set_flag\">zone_set_flag</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#ZONE_OOM_LOCKED\">ZONE_OOM_LOCKED</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#zone_scan_lock\">zone_scan_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Clears ZONE_OOM_LOCKED for all system zones so that failed allocation</span>", 
"<span class=\"comment\"> * attempts or page faults may now recall the oom killer, if necessary.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#clear_system_oom\">clear_system_oom</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#zone_scan_lock\">zone_scan_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_populated_zone\">for_each_populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_clear_flag\">zone_clear_flag</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#ZONE_OOM_LOCKED\">ZONE_OOM_LOCKED</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#zone_scan_lock\">zone_scan_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * out_of_memory - kill the \"best\" process when we run out of memory</span>", 
"<span class=\"comment\"> * @zonelist: zonelist pointer</span>", 
"<span class=\"comment\"> * @gfp_mask: memory allocation flags</span>", 
"<span class=\"comment\"> * @order: amount of memory being requested as a power of 2</span>", 
"<span class=\"comment\"> * @nodemask: nodemask passed to page allocator</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If we run out of memory, we have the choice between either</span>", 
"<span class=\"comment\"> * killing a random task (bad), letting the system crash (worse)</span>", 
"<span class=\"comment\"> * OR try to be smart about which process to kill. Note that we</span>", 
"<span class=\"comment\"> * don't have to be perfect here, we just have to be good.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#out_of_memory\">out_of_memory</a>(struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#mpol_mask\">mpol_mask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#totalpages\">totalpages</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#freed\">freed</a> = 0;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#points\">points</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#oom_constraint\">oom_constraint</a> <a class=\"id\" href=\"#constraint\">constraint</a> = <a class=\"id\" href=\"#CONSTRAINT_NONE\">CONSTRAINT_NONE</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#killed\">killed</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocking_notifier_call_chain\">blocking_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#oom_notify_list\">oom_notify_list</a>, 0, &amp;<a class=\"id\" href=\"#freed\">freed</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#freed\">freed</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Got some memory back in the last second. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If current has a pending SIGKILL, then automatically select it.  The</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * goal is to allow it to allocate so that it may quickly exit and free</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * its memory.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fatal_signal_pending\">fatal_signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_thread_flag\">set_thread_flag</a>(<a class=\"id\" href=\"#TIF_MEMDIE\">TIF_MEMDIE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boost_dying_task_prio\">boost_dying_task_prio</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check if there were limitations on the allocation (only relevant for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NUMA) that may require different handling.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#constraint\">constraint</a> = <a class=\"id\" href=\"#constrained_alloc\">constrained_alloc</a>(<a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#totalpages\">totalpages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpol_mask\">mpol_mask</a> = (<a class=\"id\" href=\"#constraint\">constraint</a> == <a class=\"id\" href=\"#CONSTRAINT_MEMORY_POLICY\">CONSTRAINT_MEMORY_POLICY</a>) ? <a class=\"id\" href=\"#nodemask\">nodemask</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_panic_on_oom\">check_panic_on_oom</a>(<a class=\"id\" href=\"#constraint\">constraint</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#mpol_mask\">mpol_mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_oom_kill_allocating_task\">sysctl_oom_kill_allocating_task</a> &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#oom_unkillable_task\">oom_unkillable_task</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#oom_adj\">oom_adj</a> != <a class=\"id\" href=\"#OOM_DISABLE\">OOM_DISABLE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * oom_kill_process() needs tasklist_lock held.  If it returns</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * non-zero, current could not be killed so we must fallback to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the tasklist scan.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#oom_kill_process\">oom_kill_process</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>, 0, <a class=\"id\" href=\"#totalpages\">totalpages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Out of memory (oom_kill_allocating_task)\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#select_bad_process\">select_bad_process</a>(&amp;<a class=\"id\" href=\"#points\">points</a>, <a class=\"id\" href=\"#totalpages\">totalpages</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#mpol_mask\">mpol_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#p\">p</a>) == -1UL)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Found nothing?!?! Either we hang forever, or we panic. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_header\">dump_header</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#mpol_mask\">mpol_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Out of memory and no killable processes...\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#oom_kill_process\">oom_kill_process</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#points\">points</a>, <a class=\"id\" href=\"#totalpages\">totalpages</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodemask\">nodemask</a>, \"Out of memory\"))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#killed\">killed</a> = 1;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Give \"p\" a good chance of killing itself before we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * retry to allocate memory unless \"p\" is current</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#killed\">killed</a> && !<a class=\"id\" href=\"#test_thread_flag\">test_thread_flag</a>(<a class=\"id\" href=\"#TIF_MEMDIE\">TIF_MEMDIE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_timeout_uninterruptible\">schedule_timeout_uninterruptible</a>(1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The pagefault handler calls here because it is out of memory, so kill a</span>", 
"<span class=\"comment\"> * memory-hogging task.  If a populated zone has ZONE_OOM_LOCKED set, a parallel</span>", 
"<span class=\"comment\"> * oom killing is already in progress so do nothing.  If a task is found with</span>", 
"<span class=\"comment\"> * TIF_MEMDIE set, it has been killed so do nothing and allow it to exit.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pagefault_out_of_memory\">pagefault_out_of_memory</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#try_set_system_oom\">try_set_system_oom</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out_of_memory\">out_of_memory</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, 0, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_system_oom\">clear_system_oom</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_thread_flag\">test_thread_flag</a>(<a class=\"id\" href=\"#TIF_MEMDIE\">TIF_MEMDIE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_timeout_uninterruptible\">schedule_timeout_uninterruptible</a>(1);", 
"}", 
];
xr_frag_insert('l/45/44f82c9a9cbc6ef7a171175a8b360d1de640b2.xr', __xr_tmp);
