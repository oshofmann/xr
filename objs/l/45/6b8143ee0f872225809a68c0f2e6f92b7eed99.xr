var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Functions related to generic timeout handling of requests.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fault\">fault</a>-<a class=\"id\" href=\"#inject\">inject</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"blk.h\"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIL_IO_TIMEOUT\">CONFIG_FAIL_IO_TIMEOUT</a>", 
"", 
"static <a class=\"id\" href=\"#DECLARE_FAULT_ATTR\">DECLARE_FAULT_ATTR</a>(<a class=\"id\" href=\"#fail_io_timeout\">fail_io_timeout</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_fail_io_timeout\">setup_fail_io_timeout</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#setup_fault_attr\">setup_fault_attr</a>(&amp;<a class=\"id\" href=\"#fail_io_timeout\">fail_io_timeout</a>, <a class=\"id\" href=\"#str\">str</a>);", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"fail_io_timeout=\", <a class=\"id\" href=\"#setup_fail_io_timeout\">setup_fail_io_timeout</a>);", 
"", 
"int <a class=\"id\" href=\"#blk_should_fake_timeout\">blk_should_fake_timeout</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#QUEUE_FLAG_FAIL_IO\">QUEUE_FLAG_FAIL_IO</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_flags\">queue_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#should_fail\">should_fail</a>(&amp;<a class=\"id\" href=\"#fail_io_timeout\">fail_io_timeout</a>, 1);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#fail_io_timeout_debugfs\">fail_io_timeout_debugfs</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#init_fault_attr_dentries\">init_fault_attr_dentries</a>(&amp;<a class=\"id\" href=\"#fail_io_timeout\">fail_io_timeout</a>, \"fail_io_timeout\");", 
"}", 
"", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#fail_io_timeout_debugfs\">fail_io_timeout_debugfs</a>);", 
"", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#part_timeout_show\">part_timeout_show</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#dev_to_disk\">dev_to_disk</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#set\">set</a> = <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#QUEUE_FLAG_FAIL_IO\">QUEUE_FLAG_FAIL_IO</a>, &amp;<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#queue\">queue</a>-><a class=\"id\" href=\"#queue_flags\">queue_flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%d\\n\", <a class=\"id\" href=\"#set\">set</a> != 0);", 
"}", 
"", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#part_timeout_store\">part_timeout_store</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#dev_to_disk\">dev_to_disk</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#queue\">queue</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a> = (char *) <a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#p\">p</a>, 10);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_set\">queue_flag_set</a>(<a class=\"id\" href=\"#QUEUE_FLAG_FAIL_IO\">QUEUE_FLAG_FAIL_IO</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_clear\">queue_flag_clear</a>(<a class=\"id\" href=\"#QUEUE_FLAG_FAIL_IO\">QUEUE_FLAG_FAIL_IO</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FAIL_IO_TIMEOUT */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * blk_delete_timer - Delete/cancel timer for a given function.</span>", 
"<span class=\"comment\"> * @req:<span class=\"ts\"/>request that we are canceling timer for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_delete_timer\">blk_delete_timer</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#timeout_list\">timeout_list</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#blk_rq_timed_out\">blk_rq_timed_out</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#blk_eh_timer_return\">blk_eh_timer_return</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#rq_timed_out_fn\">rq_timed_out_fn</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BLK_EH_HANDLED\">BLK_EH_HANDLED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__blk_complete_request\">__blk_complete_request</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BLK_EH_RESET_TIMER\">BLK_EH_RESET_TIMER</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_clear_rq_complete\">blk_clear_rq_complete</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_add_timer\">blk_add_timer</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BLK_EH_NOT_HANDLED\">BLK_EH_NOT_HANDLED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * LLD handles this for now but in the future</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we can send a request msg to abort the command</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and we can move more of the generic scsi eh code to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the blk layer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"block: bad eh return: %d\\n\", <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#blk_rq_timed_out_timer\">blk_rq_timed_out_timer</a>(unsigned long <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = (struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *) <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#next\">next</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#next_set\">next_set</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#timeout_list\">timeout_list</a>, <a class=\"id\" href=\"#timeout_list\">timeout_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after_eq\">time_after_eq</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#deadline\">deadline</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#timeout_list\">timeout_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Check if we raced with end io completion</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_mark_rq_complete\">blk_mark_rq_complete</a>(<a class=\"id\" href=\"#rq\">rq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_rq_timed_out\">blk_rq_timed_out</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#next_set\">next_set</a> || <a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#deadline\">deadline</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#deadline\">deadline</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_set\">next_set</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next_set\">next_set</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#timeout\">timeout</a>, <a class=\"id\" href=\"#round_jiffies_up\">round_jiffies_up</a>(<a class=\"id\" href=\"#next\">next</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_abort_request -- Request request recovery for the specified command</span>", 
"<span class=\"comment\"> * @req:<span class=\"ts\"/>pointer to the request of interest</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function requests that the block layer start recovery for the</span>", 
"<span class=\"comment\"> * request by deleting the timer and calling the q's timeout function.</span>", 
"<span class=\"comment\"> * LLDDs who implement their own error recovery MAY ignore the timeout</span>", 
"<span class=\"comment\"> * event if they generated blk_abort_req. Must hold queue lock.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_abort_request\">blk_abort_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_mark_rq_complete\">blk_mark_rq_complete</a>(<a class=\"id\" href=\"#req\">req</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_delete_timer\">blk_delete_timer</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_rq_timed_out\">blk_rq_timed_out</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blk_abort_request\">blk_abort_request</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_add_timer - Start timeout timer for a single request</span>", 
"<span class=\"comment\"> * @req:<span class=\"ts\"/>request that is about to start running.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *    Each request has its own timer, and as it is added to the queue, we</span>", 
"<span class=\"comment\"> *    set up the timer. When the request completes, we cancel the timer.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_add_timer\">blk_add_timer</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#expiry\">expiry</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#rq_timed_out_fn\">rq_timed_out_fn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#timeout_list\">timeout_list</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#REQ_ATOM_COMPLETE\">REQ_ATOM_COMPLETE</a>, &amp;<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#atomic_flags\">atomic_flags</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some LLDs, like scsi, peek at the timeout to prevent a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * command from being retried forever.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#timeout\">timeout</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#rq_timeout\">rq_timeout</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#deadline\">deadline</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#timeout_list\">timeout_list</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#timeout_list\">timeout_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the timer isn't already pending or this timeout is earlier</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * than an existing one, modify the timer. Round up to next nearest</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * second.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#expiry\">expiry</a> = <a class=\"id\" href=\"#round_jiffies_up\">round_jiffies_up</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#deadline\">deadline</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#timer_pending\">timer_pending</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#timeout\">timeout</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#expiry\">expiry</a>, <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#timeout\">timeout</a>.<a class=\"id\" href=\"#expires\">expires</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#timeout\">timeout</a>, <a class=\"id\" href=\"#expiry\">expiry</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_abort_queue -- Abort all request on given queue</span>", 
"<span class=\"comment\"> * @queue:<span class=\"ts\"/>pointer to queue</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_abort_queue\">blk_abort_queue</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Not a request based block device, nothing to abort</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#request_fn\">request_fn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elv_abort_queue\">elv_abort_queue</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Splice entries to local list, to avoid deadlocking if entries</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * get readded to the timeout list by error handling</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_splice_init\">list_splice_init</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#timeout_list\">timeout_list</a>, &amp;<a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#timeout_list\">timeout_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_abort_request\">blk_abort_request</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Occasionally, blk_abort_request() will return without</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * deleting the element from the list. Make sure we add those back</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * instead of leaving them on the local stack list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_splice\">list_splice</a>(&amp;<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#timeout_list\">timeout_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blk_abort_queue\">blk_abort_queue</a>);", 
];
xr_frag_insert('l/45/6b8143ee0f872225809a68c0f2e6f92b7eed99.xr', __xr_tmp);
