var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/fs/seq_file.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * helper functions for making synthetic files from sequences of records.</span>", 
"<span class=\"comment\"> * initial implementation -- AV, Oct 2001.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>seq_open -<span class=\"ts\"/>initialize sequential file</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@file: file we initialize</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@op: method table describing the sequence</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>seq_open() sets @file, associating it with a sequence described</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>by @op.  @op-&gt;start() sets the iterator up and returns the first</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>element of sequence. @op-&gt;stop() shuts it down.  @op-&gt;next()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>returns the next element of sequence.  @op-&gt;show() prints element</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>into the buffer.  In case of error -&gt;start() and -&gt;next() return</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ERR_PTR(error).  In the end of sequence they return %NULL. -&gt;show()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>returns 0 in case of success and negative number in case of error.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returning SEQ_SKIP means \"discard this element and move on\".</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#seq_open\">seq_open</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> *<a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#p\">p</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#p\">p</a>, 0, sizeof(*<a class=\"id\" href=\"#p\">p</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#op\">op</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wrappers around seq_open(e.g. swaps_open) need to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * aware of this. If they set f_version themselves, they</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * should call seq_open first and then set f_version.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_version\">f_version</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * seq_files support lseek() and pread().  They do not implement</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * write() at all, but we clear FMODE_PWRITE here for historical</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reasons.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If a client of seq_files a) implements file.write() and b) wishes to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * support pwrite() then that client will need to implement its own</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * file.open() which calls seq_open() and then sets FMODE_PWRITE.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &= ~<a class=\"id\" href=\"#FMODE_PWRITE\">FMODE_PWRITE</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_open\">seq_open</a>);", 
"", 
"static int <a class=\"id\" href=\"#traverse\">traverse</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a> = 0, <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#version\">version</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#from\">from</a> = 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#start\">start</a>(<a class=\"id\" href=\"#m\">m</a>, &amp;<a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#show\">show</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#error\">error</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> == <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Eoverflow\">Eoverflow</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#offset\">offset</a> - <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> -= <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> += <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> == <a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#next\">next</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#stop\">stop</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<a class=\"id\" href=\"#Eoverflow\">Eoverflow</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#stop\">stop</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a> <<= 1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a> ? -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a> : -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>seq_read -<span class=\"ts\"/>-&gt;read() method for sequential files.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@file: the file to read from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf: the buffer to read to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size: the maximum number of bytes to read</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ppos: the current position in the file</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Ready-made -&gt;f_op-&gt;read()</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#seq_read\">seq_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a> = (struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *)<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#copied\">copied</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't assume *ppos is where we left it */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(*<a class=\"id\" href=\"#ppos\">ppos</a> != <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#read_pos\">read_pos</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#read_pos\">read_pos</a> = *<a class=\"id\" href=\"#ppos\">ppos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while ((<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#traverse\">traverse</a>(<a class=\"id\" href=\"#m\">m</a>, *<a class=\"id\" href=\"#ppos\">ppos</a>)) == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* With prejudice... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#read_pos\">read_pos</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#version\">version</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#index\">index</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Done\">Done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * seq_file-&gt;op-&gt;..m_start/m_stop/m_next may do special actions</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or optimisations based on the file-&gt;f_version, so we want to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pass the file-&gt;f_version to those methods.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * seq_file-&gt;version is just copy of f_version, and seq_file</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * methods can treat it simply as file version.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is copied in first and copied out after all operations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is convenient to have it as  part of structure to avoid the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need of passing another argument to all the seq_file methods.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#version\">version</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_version\">f_version</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* grab buffer if we didn't have one */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Enomem\">Enomem</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* if not empty - flush it first */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Efault\">Efault</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> -= <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#from\">from</a> += <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copied\">copied</a> += <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#index\">index</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Done\">Done</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* we need at least one record in buffer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#start\">start</a>(<a class=\"id\" href=\"#m\">m</a>, &amp;<a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a> || <a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#show\">show</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#err\">err</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#next\">next</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Fill\">Fill</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#stop\">stop</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a> <<= 1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Enomem\">Enomem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#version\">version</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#start\">start</a>(<a class=\"id\" href=\"#m\">m</a>, &amp;<a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#stop\">stop</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#Done\">Done</a>;", 
"<a class=\"id\" href=\"#Fill\">Fill</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* they want more? let's try to get some more */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#offs\">offs</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#next\">next</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a> || <a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#show\">show</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> == <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a> || <a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#offs\">offs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#err\">err</a> <= 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#stop\">stop</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Efault\">Efault</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copied\">copied</a> += <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> -= <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#pos\">pos</a>;", 
"<a class=\"id\" href=\"#Done\">Done</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#copied\">copied</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copied\">copied</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ppos\">ppos</a> += <a class=\"id\" href=\"#copied\">copied</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#read_pos\">read_pos</a> += <a class=\"id\" href=\"#copied\">copied</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_version\">f_version</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#version\">version</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#copied\">copied</a>;", 
"<a class=\"id\" href=\"#Enomem\">Enomem</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#Done\">Done</a>;", 
"<a class=\"id\" href=\"#Efault\">Efault</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#Done\">Done</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_read\">seq_read</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>seq_lseek -<span class=\"ts\"/>-&gt;llseek() method for sequential files.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@file: the file in question</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@offset: new position</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@origin: 0 for absolute, 1 for relative position</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Ready-made -&gt;f_op-&gt;llseek()</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#origin\">origin</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a> = (struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *)<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#version\">version</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_version\">f_version</a>;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#origin\">origin</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> != <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#read_pos\">read_pos</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while ((<a class=\"id\" href=\"#retval\">retval</a>=<a class=\"id\" href=\"#traverse\">traverse</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#offset\">offset</a>)) == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* with extreme prejudice... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#read_pos\">read_pos</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#version\">version</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#index\">index</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#read_pos\">read_pos</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_version\">f_version</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#version\">version</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>seq_release -<span class=\"ts\"/>free the structures associated with sequential file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@file: file in question</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: file-&gt;f_path.dentry-&gt;d_inode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Frees the structures associated with sequential file; can be used</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>as -&gt;f_op-&gt;release() if you don't have private data to destroy.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#seq_release\">seq_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a> = (struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *)<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#m\">m</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_release\">seq_release</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>seq_escape -<span class=\"ts\"/>print string into buffer, escaping some characters</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@m:<span class=\"ts\"/>target buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@s:<span class=\"ts\"/>string</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@esc:<span class=\"ts\"/>set of characters that need escaping</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Puts string into buffer, replacing each occurrence of character from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@esc with usual octal escape.  Returns 0 in case of success, -1 - in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>case of overflow.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#seq_escape\">seq_escape</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, const char *<a class=\"id\" href=\"#s\">s</a>, const char *<a class=\"id\" href=\"#esc\">esc</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"        char *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"        for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a>; (<a class=\"id\" href=\"#c\">c</a> = *<a class=\"id\" href=\"#s\">s</a>) != '\\0' && <a class=\"id\" href=\"#p\">p</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#s\">s</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#esc\">esc</a>, <a class=\"id\" href=\"#c\">c</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> + 3 &lt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = '\\\\';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = '0' + ((<a class=\"id\" href=\"#c\">c</a> &amp; 0300) >> 6);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = '0' + ((<a class=\"id\" href=\"#c\">c</a> &amp; 070) >> 3);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = '0' + (<a class=\"id\" href=\"#c\">c</a> &amp; 07);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"        }", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#p\">p</a> - <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a>;", 
"        return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_escape\">seq_escape</a>);", 
"", 
"int <a class=\"id\" href=\"#seq_printf\">seq_printf</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, const char *<a class=\"id\" href=\"#f\">f</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> + <a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>return -1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_printf\">seq_printf</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>mangle_path -<span class=\"ts\"/>mangle and copy path to buffer beginning</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@s: buffer start</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p: beginning of path in above buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@esc: set of characters that need escaping</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      Copy the path from @p to @s, replacing each occurrence of character from</span>", 
"<span class=\"comment\"> *      @esc with usual octal escape.</span>", 
"<span class=\"comment\"> *      Returns pointer past last written character in @s, or NULL in case of</span>", 
"<span class=\"comment\"> *      failure.</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#mangle_path\">mangle_path</a>(char *<a class=\"id\" href=\"#s\">s</a>, char *<a class=\"id\" href=\"#p\">p</a>, char *<a class=\"id\" href=\"#esc\">esc</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#s\">s</a> <= <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#c\">c</a> = *<a class=\"id\" href=\"#p\">p</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#c\">c</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#esc\">esc</a>, <a class=\"id\" href=\"#c\">c</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a>++ = <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#s\">s</a> + 4 &gt; <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a>++ = '\\\\';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a>++ = '0' + ((<a class=\"id\" href=\"#c\">c</a> &amp; 0300) >> 6);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a>++ = '0' + ((<a class=\"id\" href=\"#c\">c</a> &amp; 070) >> 3);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a>++ = '0' + (<a class=\"id\" href=\"#c\">c</a> &amp; 07);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mangle_path\">mangle_path</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * seq_path - seq_file interface to print a pathname</span>", 
"<span class=\"comment\"> * @m: the seq_file handle</span>", 
"<span class=\"comment\"> * @path: the struct path to print</span>", 
"<span class=\"comment\"> * @esc: set of characters to escape in the output</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * return the absolute path of 'path', as represented by the</span>", 
"<span class=\"comment\"> * dentry / mnt pair in the path parameter.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#seq_path\">seq_path</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, char *<a class=\"id\" href=\"#esc\">esc</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#seq_get_buf\">seq_get_buf</a>(<a class=\"id\" href=\"#m\">m</a>, &amp;<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#d_path\">d_path</a>(<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#mangle_path\">mangle_path</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#esc\">esc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_commit\">seq_commit</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_path\">seq_path</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Same as seq_path, but relative to supplied root.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * root may be changed, see __d_path().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#seq_path_root\">seq_path_root</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  char *<a class=\"id\" href=\"#esc\">esc</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#seq_get_buf\">seq_get_buf</a>(<a class=\"id\" href=\"#m\">m</a>, &amp;<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = -<a class=\"id\" href=\"#ENAMETOOLONG\">ENAMETOOLONG</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#__d_path\">__d_path</a>(<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#mangle_path\">mangle_path</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#esc\">esc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = -<a class=\"id\" href=\"#ENAMETOOLONG\">ENAMETOOLONG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_commit\">seq_commit</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a> &lt; 0 ? <a class=\"id\" href=\"#res\">res</a> : 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * returns the path of the 'dentry' from the root of its filesystem.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#seq_dentry\">seq_dentry</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, char *<a class=\"id\" href=\"#esc\">esc</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#seq_get_buf\">seq_get_buf</a>(<a class=\"id\" href=\"#m\">m</a>, &amp;<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#dentry_path\">dentry_path</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#mangle_path\">mangle_path</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#esc\">esc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_commit\">seq_commit</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#seq_bitmap\">seq_bitmap</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, const unsigned long *<a class=\"id\" href=\"#bits\">bits</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#nr_bits\">nr_bits</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#bitmap_scnprintf\">bitmap_scnprintf</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nr_bits\">nr_bits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> + <a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>return -1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_bitmap\">seq_bitmap</a>);", 
"", 
"int <a class=\"id\" href=\"#seq_bitmap_list\">seq_bitmap_list</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, const unsigned long *<a class=\"id\" href=\"#bits\">bits</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_bits\">nr_bits</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#bitmap_scnlistprintf\">bitmap_scnlistprintf</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nr_bits\">nr_bits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> + <a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>return -1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_bitmap_list\">seq_bitmap_list</a>);", 
"", 
"static void *<a class=\"id\" href=\"#single_start\">single_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a> + (*<a class=\"id\" href=\"#pos\">pos</a> == 0);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#single_next\">single_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#p\">p</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>++*<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#single_stop\">single_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#p\">p</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"}", 
"", 
"int <a class=\"id\" href=\"#single_open\">single_open</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int (*<a class=\"id\" href=\"#show\">show</a>)(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *, void *),", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> *<a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#op\">op</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#single_start\">single_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#single_next\">single_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#stop\">stop</a> = <a class=\"id\" href=\"#single_stop\">single_stop</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#show\">show</a> = <a class=\"id\" href=\"#show\">show</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#op\">op</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *)<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>)-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#op\">op</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#single_open\">single_open</a>);", 
"", 
"int <a class=\"id\" href=\"#single_release\">single_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> *<a class=\"id\" href=\"#op\">op</a> = ((struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *)<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>)-><a class=\"id\" href=\"#op\">op</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#seq_release\">seq_release</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#op\">op</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#single_release\">single_release</a>);", 
"", 
"int <a class=\"id\" href=\"#seq_release_private\">seq_release_private</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_release\">seq_release</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_release_private\">seq_release_private</a>);", 
"", 
"void *<a class=\"id\" href=\"#__seq_open_private\">__seq_open_private</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a>, const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#psize\">psize</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#psize\">psize</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#private\">private</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#ops\">ops</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#private\">private</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__seq_open_private\">__seq_open_private</a>);", 
"", 
"int <a class=\"id\" href=\"#seq_open_private\">seq_open_private</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#psize\">psize</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__seq_open_private\">__seq_open_private</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#ops\">ops</a>, <a class=\"id\" href=\"#psize\">psize</a>) ? 0 : -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_open_private\">seq_open_private</a>);", 
"", 
"int <a class=\"id\" href=\"#seq_putc\">seq_putc</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, char <a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a>++] = <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_putc\">seq_putc</a>);", 
"", 
"int <a class=\"id\" href=\"#seq_puts\">seq_puts</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, const char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> + <a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>return -1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_puts\">seq_puts</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * seq_write - write arbitrary data to buffer</span>", 
"<span class=\"comment\"> * @seq: seq_file identifying the buffer to which data should be written</span>", 
"<span class=\"comment\"> * @data: data address</span>", 
"<span class=\"comment\"> * @len: number of bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 0 on success, non-zero otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#seq_write\">seq_write</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, const void *<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#count\">count</a> + <a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>return -1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_write\">seq_write</a>);", 
"", 
"struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#seq_list_start\">seq_list_start</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#lh\">lh</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each\">list_for_each</a>(<a class=\"id\" href=\"#lh\">lh</a>, <a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a>-- == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#lh\">lh</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_list_start\">seq_list_start</a>);", 
"", 
"struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#seq_list_start_head\">seq_list_start_head</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_list_start\">seq_list_start</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#pos\">pos</a> - 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_list_start_head\">seq_list_start_head</a>);", 
"", 
"struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#seq_list_next\">seq_list_next</a>(void *<a class=\"id\" href=\"#v\">v</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#lh\">lh</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lh\">lh</a> = ((struct <a class=\"id\" href=\"#list_head\">list_head</a> *)<a class=\"id\" href=\"#v\">v</a>)-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>++*<a class=\"id\" href=\"#ppos\">ppos</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#lh\">lh</a> == <a class=\"id\" href=\"#head\">head</a> ? <a class=\"id\" href=\"#NULL\">NULL</a> : <a class=\"id\" href=\"#lh\">lh</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_list_next\">seq_list_next</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * seq_hlist_start - start an iteration of a hlist</span>", 
"<span class=\"comment\"> * @head: the head of the hlist</span>", 
"<span class=\"comment\"> * @pos:  the start position of the sequence</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called at seq_file-&gt;op-&gt;start().</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#seq_hlist_start\">seq_hlist_start</a>(struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each\">hlist_for_each</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a>-- == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_hlist_start\">seq_hlist_start</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * seq_hlist_start_head - start an iteration of a hlist</span>", 
"<span class=\"comment\"> * @head: the head of the hlist</span>", 
"<span class=\"comment\"> * @pos:  the start position of the sequence</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called at seq_file-&gt;op-&gt;start(). Call this function if you want to</span>", 
"<span class=\"comment\"> * print a header at the top of the output.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#seq_hlist_start_head\">seq_hlist_start_head</a>(struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SEQ_START_TOKEN\">SEQ_START_TOKEN</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_hlist_start\">seq_hlist_start</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#pos\">pos</a> - 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_hlist_start_head\">seq_hlist_start_head</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * seq_hlist_next - move to the next position of the hlist</span>", 
"<span class=\"comment\"> * @v:    the current iterator</span>", 
"<span class=\"comment\"> * @head: the head of the hlist</span>", 
"<span class=\"comment\"> * @ppos: the current position</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called at seq_file-&gt;op-&gt;next().</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#seq_hlist_next\">seq_hlist_next</a>(void *<a class=\"id\" href=\"#v\">v</a>, struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/>++*<a class=\"id\" href=\"#ppos\">ppos</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a> == <a class=\"id\" href=\"#SEQ_START_TOKEN\">SEQ_START_TOKEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_hlist_next\">seq_hlist_next</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * seq_hlist_start_rcu - start an iteration of a hlist protected by RCU</span>", 
"<span class=\"comment\"> * @head: the head of the hlist</span>", 
"<span class=\"comment\"> * @pos:  the start position of the sequence</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called at seq_file-&gt;op-&gt;start().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This list-traversal primitive may safely run concurrently with</span>", 
"<span class=\"comment\"> * the _rcu list-mutation primitives such as hlist_add_head_rcu()</span>", 
"<span class=\"comment\"> * as long as the traversal is guarded by rcu_read_lock().</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#seq_hlist_start_rcu\">seq_hlist_start_rcu</a>(struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__hlist_for_each_rcu\">__hlist_for_each_rcu</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a>-- == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_hlist_start_rcu\">seq_hlist_start_rcu</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * seq_hlist_start_head_rcu - start an iteration of a hlist protected by RCU</span>", 
"<span class=\"comment\"> * @head: the head of the hlist</span>", 
"<span class=\"comment\"> * @pos:  the start position of the sequence</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called at seq_file-&gt;op-&gt;start(). Call this function if you want to</span>", 
"<span class=\"comment\"> * print a header at the top of the output.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This list-traversal primitive may safely run concurrently with</span>", 
"<span class=\"comment\"> * the _rcu list-mutation primitives such as hlist_add_head_rcu()</span>", 
"<span class=\"comment\"> * as long as the traversal is guarded by rcu_read_lock().</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#seq_hlist_start_head_rcu\">seq_hlist_start_head_rcu</a>(struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SEQ_START_TOKEN\">SEQ_START_TOKEN</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_hlist_start_rcu\">seq_hlist_start_rcu</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#pos\">pos</a> - 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_hlist_start_head_rcu\">seq_hlist_start_head_rcu</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * seq_hlist_next_rcu - move to the next position of the hlist protected by RCU</span>", 
"<span class=\"comment\"> * @v:    the current iterator</span>", 
"<span class=\"comment\"> * @head: the head of the hlist</span>", 
"<span class=\"comment\"> * @ppos: the current position</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called at seq_file-&gt;op-&gt;next().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This list-traversal primitive may safely run concurrently with</span>", 
"<span class=\"comment\"> * the _rcu list-mutation primitives such as hlist_add_head_rcu()</span>", 
"<span class=\"comment\"> * as long as the traversal is guarded by rcu_read_lock().</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#seq_hlist_next_rcu\">seq_hlist_next_rcu</a>(void *<a class=\"id\" href=\"#v\">v</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/>++*<a class=\"id\" href=\"#ppos\">ppos</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a> == <a class=\"id\" href=\"#SEQ_START_TOKEN\">SEQ_START_TOKEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#first\">first</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#seq_hlist_next_rcu\">seq_hlist_next_rcu</a>);", 
];
xr_frag_insert('l/45/806c534807dae81f118aae346b7f2a5d09944d.xr', __xr_tmp);
