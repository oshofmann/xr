var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mm/mmap.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Written by obz.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Address space accounting code<span class=\"ts\"/>&lt;alan@lxorguk.ukuu.org.uk&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#backing\">backing</a>-<a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#shm\">shm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mman\">mman</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#personality\">personality</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hugetlb\">hugetlb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#profile\">profile</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mempolicy\">mempolicy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rmap\">rmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#perf_event\">perf_event</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cacheflush\">cacheflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlb\">tlb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mmu_context\">mmu_context</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#arch_mmap_check\">arch_mmap_check</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_mmap_check\">arch_mmap_check</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/>(0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#arch_rebalance_pgtables\">arch_rebalance_pgtables</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_rebalance_pgtables\">arch_rebalance_pgtables</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#len\">len</a>)<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#addr\">addr</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#unmap_region\">unmap_region</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * WARNING: the debugging will use recursive algorithms so never enable this</span>", 
"<span class=\"comment\"> * unless you know what you are doing.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#DEBUG_MM_RB\">DEBUG_MM_RB</a>", 
"", 
"<span class=\"comment\">/* description of effects of mapping type and prot in current implementation.</span>", 
"<span class=\"comment\"> * this is due to the limited x86 page protection hardware.  The expected</span>", 
"<span class=\"comment\"> * behavior is in parens:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * map_type<span class=\"ts\"/>prot</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>PROT_NONE<span class=\"ts\"/>PROT_READ<span class=\"ts\"/>PROT_WRITE<span class=\"ts\"/>PROT_EXEC</span>", 
"<span class=\"comment\"> * MAP_SHARED<span class=\"ts\"/>r: (no) no<span class=\"ts\"/>r: (yes) yes<span class=\"ts\"/>r: (no) yes<span class=\"ts\"/>r: (no) yes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>w: (no) no<span class=\"ts\"/>w: (no) no<span class=\"ts\"/>w: (yes) yes<span class=\"ts\"/>w: (no) no</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>x: (no) no<span class=\"ts\"/>x: (no) yes<span class=\"ts\"/>x: (no) yes<span class=\"ts\"/>x: (yes) yes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/></span>", 
"<span class=\"comment\"> * MAP_PRIVATE<span class=\"ts\"/>r: (no) no<span class=\"ts\"/>r: (yes) yes<span class=\"ts\"/>r: (no) yes<span class=\"ts\"/>r: (no) yes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>w: (no) no<span class=\"ts\"/>w: (no) no<span class=\"ts\"/>w: (copy) copy<span class=\"ts\"/>w: (no) no</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>x: (no) no<span class=\"ts\"/>x: (no) yes<span class=\"ts\"/>x: (no) yes<span class=\"ts\"/>x: (yes) yes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#protection_map\">protection_map</a>[16] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__P000\">__P000</a>, <a class=\"id\" href=\"#__P001\">__P001</a>, <a class=\"id\" href=\"#__P010\">__P010</a>, <a class=\"id\" href=\"#__P011\">__P011</a>, <a class=\"id\" href=\"#__P100\">__P100</a>, <a class=\"id\" href=\"#__P101\">__P101</a>, <a class=\"id\" href=\"#__P110\">__P110</a>, <a class=\"id\" href=\"#__P111\">__P111</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__S000\">__S000</a>, <a class=\"id\" href=\"#__S001\">__S001</a>, <a class=\"id\" href=\"#__S010\">__S010</a>, <a class=\"id\" href=\"#__S011\">__S011</a>, <a class=\"id\" href=\"#__S100\">__S100</a>, <a class=\"id\" href=\"#__S101\">__S101</a>, <a class=\"id\" href=\"#__S110\">__S110</a>, <a class=\"id\" href=\"#__S111\">__S111</a>", 
"};", 
"", 
"<a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#vm_get_page_prot\">vm_get_page_prot</a>(unsigned long <a class=\"id\" href=\"#vm_flags\">vm_flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#protection_map\">protection_map</a>[<a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#VM_READ\">VM_READ</a>|<a class=\"id\" href=\"#VM_WRITE\">VM_WRITE</a>|<a class=\"id\" href=\"#VM_EXEC\">VM_EXEC</a>|<a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a>)]) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#arch_vm_get_page_prot\">arch_vm_get_page_prot</a>(<a class=\"id\" href=\"#vm_flags\">vm_flags</a>)));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vm_get_page_prot\">vm_get_page_prot</a>);", 
"", 
"int <a class=\"id\" href=\"#sysctl_overcommit_memory\">sysctl_overcommit_memory</a> = <a class=\"id\" href=\"#OVERCOMMIT_GUESS\">OVERCOMMIT_GUESS</a>;  <span class=\"comment\">/* heuristic overcommit */</span>", 
"int <a class=\"id\" href=\"#sysctl_overcommit_ratio\">sysctl_overcommit_ratio</a> = 50;<span class=\"ts\"/><span class=\"comment\">/* default is 50% */</span>", 
"int <a class=\"id\" href=\"#sysctl_max_map_count\">sysctl_max_map_count</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#DEFAULT_MAX_MAP_COUNT\">DEFAULT_MAX_MAP_COUNT</a>;", 
"struct <a class=\"id\" href=\"#percpu_counter\">percpu_counter</a> <a class=\"id\" href=\"#vm_committed_as\">vm_committed_as</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check that a process has enough memory to allocate a new virtual</span>", 
"<span class=\"comment\"> * mapping. 0 means there is enough memory for the allocation to</span>", 
"<span class=\"comment\"> * succeed and -ENOMEM implies there is not.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We currently support three overcommit policies, which are set via the</span>", 
"<span class=\"comment\"> * vm.overcommit_memory sysctl.  See Documentation/vm/overcommit-accounting</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Strict overcommit modes added 2002 Feb 26 by Alan Cox.</span>", 
"<span class=\"comment\"> * Additional code 2002 Jul 20 by Robert Love.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cap_sys_admin is 1 if the process has admin privileges, 0 otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note this is a helper function intended to be used by LSMs which</span>", 
"<span class=\"comment\"> * wish to use this logic.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__vm_enough_memory\">__vm_enough_memory</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, long <a class=\"id\" href=\"#pages\">pages</a>, int <a class=\"id\" href=\"#cap_sys_admin\">cap_sys_admin</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#free\">free</a>, <a class=\"id\" href=\"#allowed\">allowed</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm_acct_memory\">vm_acct_memory</a>(<a class=\"id\" href=\"#pages\">pages</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Sometimes we want to use more memory than we have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_overcommit_memory\">sysctl_overcommit_memory</a> == <a class=\"id\" href=\"#OVERCOMMIT_ALWAYS\">OVERCOMMIT_ALWAYS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_overcommit_memory\">sysctl_overcommit_memory</a> == <a class=\"id\" href=\"#OVERCOMMIT_GUESS\">OVERCOMMIT_GUESS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a> = <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_FILE_PAGES\">NR_FILE_PAGES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a> += <a class=\"id\" href=\"#nr_swap_pages\">nr_swap_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Any slabs which are created with the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * SLAB_RECLAIM_ACCOUNT flag claim to have contents</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * which are reclaimable, under pressure.  The dentry</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cache and most inode caches should fall into this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a> += <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_SLAB_RECLAIMABLE\">NR_SLAB_RECLAIMABLE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Leave the last 3% for root</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cap_sys_admin\">cap_sys_admin</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a> -= <a class=\"id\" href=\"#free\">free</a> / 32;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#free\">free</a> &gt; <a class=\"id\" href=\"#pages\">pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * nr_free_pages() is very expensive on large systems,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * only call if we're about to fail.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#nr_free_pages\">nr_free_pages</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Leave reserved pages. The pages are not for anonymous pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> <= <a class=\"id\" href=\"#totalreserve_pages\">totalreserve_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= <a class=\"id\" href=\"#totalreserve_pages\">totalreserve_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Leave the last 3% for root</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cap_sys_admin\">cap_sys_admin</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= <a class=\"id\" href=\"#n\">n</a> / 32;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a> += <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#free\">free</a> &gt; <a class=\"id\" href=\"#pages\">pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#allowed\">allowed</a> = (<a class=\"id\" href=\"#totalram_pages\">totalram_pages</a> - <a class=\"id\" href=\"#hugetlb_total_pages\">hugetlb_total_pages</a>())", 
"<span class=\"ts\"/>       <span class=\"ts\"/>* <a class=\"id\" href=\"#sysctl_overcommit_ratio\">sysctl_overcommit_ratio</a> / 100;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Leave the last 3% for root</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cap_sys_admin\">cap_sys_admin</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#allowed\">allowed</a> -= <a class=\"id\" href=\"#allowed\">allowed</a> / 32;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#allowed\">allowed</a> += <a class=\"id\" href=\"#total_swap_pages\">total_swap_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't let a single process grow too big:</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   leave 3% of the size of this process for other processes */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#allowed\">allowed</a> -= <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#total_vm\">total_vm</a> / 32;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#percpu_counter_read_positive\">percpu_counter_read_positive</a>(&amp;<a class=\"id\" href=\"#vm_committed_as\">vm_committed_as</a>) &lt; <a class=\"id\" href=\"#allowed\">allowed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm_unacct_memory\">vm_unacct_memory</a>(<a class=\"id\" href=\"#pages\">pages</a>);", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Requires inode-&gt;i_mapping-&gt;i_mmap_lock</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__remove_shared_vm_struct\">__remove_shared_vm_struct</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_DENYWRITE\">VM_DENYWRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_writecount\">i_writecount</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_writable\">i_mmap_writable</a>--;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_dcache_mmap_lock\">flush_dcache_mmap_lock</a>(<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_NONLINEAR\">VM_NONLINEAR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma_prio_tree_remove\">vma_prio_tree_remove</a>(<a class=\"id\" href=\"#vma\">vma</a>, &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap\">i_mmap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_dcache_mmap_unlock\">flush_dcache_mmap_unlock</a>(<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unlink a file-based vm structure from its prio_tree, to hide</span>", 
"<span class=\"comment\"> * vma from rmap and vmtruncate before freeing its page tables.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#unlink_file_vma\">unlink_file_vma</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__remove_shared_vm_struct\">__remove_shared_vm_struct</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Close a vm structure and free it, returning the next.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#remove_vma\">remove_vma</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#close\">close</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#close\">close</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_EXECUTABLE\">VM_EXECUTABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#removed_exe_file_vma\">removed_exe_file_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpol_put\">mpol_put</a>(<a class=\"id\" href=\"#vma_policy\">vma_policy</a>(<a class=\"id\" href=\"#vma\">vma</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#vm_area_cachep\">vm_area_cachep</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#brk\">brk</a>, unsigned long, <a class=\"id\" href=\"#brk\">brk</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rlim\">rlim</a>, <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#newbrk\">newbrk</a>, <a class=\"id\" href=\"#oldbrk\">oldbrk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#min_brk\">min_brk</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT_BRK\">CONFIG_COMPAT_BRK</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min_brk\">min_brk</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#end_code\">end_code</a>;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min_brk\">min_brk</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#start_brk\">start_brk</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#brk\">brk</a> &lt; <a class=\"id\" href=\"#min_brk\">min_brk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check against rlimit here. If this check is done later after the test</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of oldbrk with newbrk then it can escape the test and let the data</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * segment grow beyond its set limit the in case where the limit is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not page aligned -Ram Gupta</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rlim\">rlim</a> = <a class=\"id\" href=\"#rlimit\">rlimit</a>(<a class=\"id\" href=\"#RLIMIT_DATA\">RLIMIT_DATA</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rlim\">rlim</a> &lt; <a class=\"id\" href=\"#RLIM_INFINITY\">RLIM_INFINITY</a> && (<a class=\"id\" href=\"#brk\">brk</a> - <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#start_brk\">start_brk</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#end_data\">end_data</a> - <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#start_data\">start_data</a>) &gt; <a class=\"id\" href=\"#rlim\">rlim</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newbrk\">newbrk</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#brk\">brk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oldbrk\">oldbrk</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#brk\">brk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#oldbrk\">oldbrk</a> == <a class=\"id\" href=\"#newbrk\">newbrk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#set_brk\">set_brk</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Always allow shrinking brk. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#brk\">brk</a> <= <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#brk\">brk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#do_munmap\">do_munmap</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#newbrk\">newbrk</a>, <a class=\"id\" href=\"#oldbrk\">oldbrk</a>-<a class=\"id\" href=\"#newbrk\">newbrk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#set_brk\">set_brk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check against existing mmap mappings. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#find_vma_intersection\">find_vma_intersection</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#oldbrk\">oldbrk</a>, <a class=\"id\" href=\"#newbrk\">newbrk</a>+<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ok, looks good - let it rip. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#do_brk\">do_brk</a>(<a class=\"id\" href=\"#oldbrk\">oldbrk</a>, <a class=\"id\" href=\"#newbrk\">newbrk</a>-<a class=\"id\" href=\"#oldbrk\">oldbrk</a>) != <a class=\"id\" href=\"#oldbrk\">oldbrk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<a class=\"id\" href=\"#set_brk\">set_brk</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#brk\">brk</a> = <a class=\"id\" href=\"#brk\">brk</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#brk\">brk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#DEBUG_MM_RB\">DEBUG_MM_RB</a>", 
"static int <a class=\"id\" href=\"#browse_rb\">browse_rb</a>(struct <a class=\"id\" href=\"#rb_root\">rb_root</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#nd\">nd</a>, *<a class=\"id\" href=\"#pn\">pn</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#prev\">prev</a> = 0, <a class=\"id\" href=\"#pend\">pend</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#nd\">nd</a> = <a class=\"id\" href=\"#rb_first\">rb_first</a>(<a class=\"id\" href=\"#root\">root</a>); <a class=\"id\" href=\"#nd\">nd</a>; <a class=\"id\" href=\"#nd\">nd</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(<a class=\"id\" href=\"#nd\">nd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#nd\">nd</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a>, <a class=\"id\" href=\"#vm_rb\">vm_rb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &lt; <a class=\"id\" href=\"#prev\">prev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"vm_start %lx prev %lx\\n\", <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>, <a class=\"id\" href=\"#prev\">prev</a>), <a class=\"id\" href=\"#i\">i</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &lt; <a class=\"id\" href=\"#pend\">pend</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"vm_start %lx pend %lx\\n\", <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>, <a class=\"id\" href=\"#pend\">pend</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &gt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"vm_end %lx < vm_start %lx\\n\", <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pn\">pn</a> = <a class=\"id\" href=\"#nd\">nd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pend\">pend</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#nd\">nd</a> = <a class=\"id\" href=\"#pn\">pn</a>; <a class=\"id\" href=\"#nd\">nd</a>; <a class=\"id\" href=\"#nd\">nd</a> = <a class=\"id\" href=\"#rb_prev\">rb_prev</a>(<a class=\"id\" href=\"#nd\">nd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> != <a class=\"id\" href=\"#j\">j</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"backwards %d, forwards %d\\n\", <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#i\">i</a>), <a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#validate_mm\">validate_mm</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bug\">bug</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> != <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#map_count\">map_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"map_count %d vm_next %d\\n\", <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#map_count\">map_count</a>, <a class=\"id\" href=\"#i\">i</a>), <a class=\"id\" href=\"#bug\">bug</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#browse_rb\">browse_rb</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_rb\">mm_rb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> != <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#map_count\">map_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"map_count %d rb %d\\n\", <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#map_count\">map_count</a>, <a class=\"id\" href=\"#i\">i</a>), <a class=\"id\" href=\"#bug\">bug</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#bug\">bug</a>);", 
"}", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#validate_mm\">validate_mm</a>(<a class=\"id\" href=\"#mm\">mm</a>) do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *", 
"<a class=\"id\" href=\"#find_vma_prepare\">find_vma_prepare</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> **<a class=\"id\" href=\"#pprev\">pprev</a>, struct <a class=\"id\" href=\"#rb_node\">rb_node</a> ***<a class=\"id\" href=\"#rb_link\">rb_link</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> ** <a class=\"id\" href=\"#rb_parent\">rb_parent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> * <a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> ** <a class=\"id\" href=\"#__rb_link\">__rb_link</a>, * <a class=\"id\" href=\"#__rb_parent\">__rb_parent</a>, * <a class=\"id\" href=\"#rb_prev\">rb_prev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rb_link\">__rb_link</a> = &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_rb\">mm_rb</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_prev\">rb_prev</a> = <a class=\"id\" href=\"#__rb_parent\">__rb_parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#__rb_link\">__rb_link</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma_tmp\">vma_tmp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__rb_parent\">__rb_parent</a> = *<a class=\"id\" href=\"#__rb_link\">__rb_link</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma_tmp\">vma_tmp</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#__rb_parent\">__rb_parent</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a>, <a class=\"id\" href=\"#vm_rb\">vm_rb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma_tmp\">vma_tmp</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> &gt; <a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma_tmp\">vma_tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma_tmp\">vma_tmp</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> <= <a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__rb_link\">__rb_link</a> = &amp;<a class=\"id\" href=\"#__rb_parent\">__rb_parent</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_prev\">rb_prev</a> = <a class=\"id\" href=\"#__rb_parent\">__rb_parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__rb_link\">__rb_link</a> = &amp;<a class=\"id\" href=\"#__rb_parent\">__rb_parent</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rb_prev\">rb_prev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#rb_prev\">rb_prev</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a>, <a class=\"id\" href=\"#vm_rb\">vm_rb</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#rb_link\">rb_link</a> = <a class=\"id\" href=\"#__rb_link\">__rb_link</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#rb_parent\">rb_parent</a> = <a class=\"id\" href=\"#__rb_parent\">__rb_parent</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vma\">vma</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#__vma_link_list\">__vma_link_list</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#rb_parent\">rb_parent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_prev\">vm_prev</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a> = <a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a> = <a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rb_parent\">rb_parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#rb_parent\">rb_parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a>, <a class=\"id\" href=\"#vm_rb\">vm_rb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_prev\">vm_prev</a> = <a class=\"id\" href=\"#vma\">vma</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__vma_link_rb\">__vma_link_rb</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> **<a class=\"id\" href=\"#rb_link\">rb_link</a>, struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#rb_parent\">rb_parent</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_link_node\">rb_link_node</a>(&amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_rb\">vm_rb</a>, <a class=\"id\" href=\"#rb_parent\">rb_parent</a>, <a class=\"id\" href=\"#rb_link\">rb_link</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_insert_color\">rb_insert_color</a>(&amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_rb\">vm_rb</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_rb\">mm_rb</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__vma_link_file\">__vma_link_file</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_DENYWRITE\">VM_DENYWRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_writecount\">i_writecount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_writable\">i_mmap_writable</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_dcache_mmap_lock\">flush_dcache_mmap_lock</a>(<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_NONLINEAR\">VM_NONLINEAR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma_nonlinear_insert\">vma_nonlinear_insert</a>(<a class=\"id\" href=\"#vma\">vma</a>, &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_nonlinear\">i_mmap_nonlinear</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma_prio_tree_insert\">vma_prio_tree_insert</a>(<a class=\"id\" href=\"#vma\">vma</a>, &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap\">i_mmap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_dcache_mmap_unlock\">flush_dcache_mmap_unlock</a>(<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#__vma_link\">__vma_link</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#rb_node\">rb_node</a> **<a class=\"id\" href=\"#rb_link\">rb_link</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#rb_parent\">rb_parent</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__vma_link_list\">__vma_link_list</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#rb_parent\">rb_parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__vma_link_rb\">__vma_link_rb</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#rb_link\">rb_link</a>, <a class=\"id\" href=\"#rb_parent\">rb_parent</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#vma_link\">vma_link</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#rb_node\">rb_node</a> **<a class=\"id\" href=\"#rb_link\">rb_link</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#rb_parent\">rb_parent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_truncate_count\">vm_truncate_count</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#truncate_count\">truncate_count</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__vma_link\">__vma_link</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#rb_link\">rb_link</a>, <a class=\"id\" href=\"#rb_parent\">rb_parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__vma_link_file\">__vma_link_file</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#map_count\">map_count</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_mm\">validate_mm</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Helper for vma_adjust in the split_vma insert case:</span>", 
"<span class=\"comment\"> * insert vm structure into list and rbtree and anon_vma,</span>", 
"<span class=\"comment\"> * but it has already been inserted into prio_tree earlier.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__insert_vm_struct\">__insert_vm_struct</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#__vma\">__vma</a>, *<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> **<a class=\"id\" href=\"#rb_link\">rb_link</a>, *<a class=\"id\" href=\"#rb_parent\">rb_parent</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__vma\">__vma</a> = <a class=\"id\" href=\"#find_vma_prepare\">find_vma_prepare</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>,&amp;<a class=\"id\" href=\"#prev\">prev</a>, &amp;<a class=\"id\" href=\"#rb_link\">rb_link</a>, &amp;<a class=\"id\" href=\"#rb_parent\">rb_parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#__vma\">__vma</a> && <a class=\"id\" href=\"#__vma\">__vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__vma_link\">__vma_link</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#rb_link\">rb_link</a>, <a class=\"id\" href=\"#rb_parent\">rb_parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#map_count\">map_count</a>++;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#__vma_unlink\">__vma_unlink</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_prev\">vm_prev</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_erase\">rb_erase</a>(&amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_rb\">vm_rb</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_rb\">mm_rb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_cache\">mmap_cache</a> == <a class=\"id\" href=\"#vma\">vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_cache\">mmap_cache</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We cannot adjust vm_start, vm_end, vm_pgoff fields of a vma that</span>", 
"<span class=\"comment\"> * is already present in an i_mmap tree without adjusting the tree.</span>", 
"<span class=\"comment\"> * The following helper function should be used when such adjustments</span>", 
"<span class=\"comment\"> * are necessary.  The \"insert\" vma (if any) is to be inserted</span>", 
"<span class=\"comment\"> * before we drop the necessary locks.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#vma_adjust\">vma_adjust</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pgoff\">pgoff</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#insert\">insert</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#importer\">importer</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prio_tree_root\">prio_tree_root</a> *<a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#adjust_next\">adjust_next</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#remove_next\">remove_next</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> && !<a class=\"id\" href=\"#insert\">insert</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#exporter\">exporter</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> >= <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * vma expands, overlapping all the next, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * perhaps the one after too (mprotect case 6).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#again\">again</a>:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_next\">remove_next</a> = 1 + (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exporter\">exporter</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#importer\">importer</a> = <a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * vma expands, overlapping part of the next:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * mprotect case 5 shifting the boundary up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#adjust_next\">adjust_next</a> = (<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exporter\">exporter</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#importer\">importer</a> = <a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * vma shrinks, and !insert tells it's not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * split_vma inserting another: so it must be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * mprotect case 4 shifting the boundary down.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#adjust_next\">adjust_next</a> = - ((<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#end\">end</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exporter\">exporter</a> = <a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#importer\">importer</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Easily overlooked: when mprotect shifts the boundary,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * make sure the expanding vma has anon_vma set if the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * shrinking vma had, to cover any anon pages imported.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#exporter\">exporter</a> && <a class=\"id\" href=\"#exporter\">exporter</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a> && !<a class=\"id\" href=\"#importer\">importer</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#anon_vma_clone\">anon_vma_clone</a>(<a class=\"id\" href=\"#importer\">importer</a>, <a class=\"id\" href=\"#exporter\">exporter</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#importer\">importer</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#exporter\">exporter</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_NONLINEAR\">VM_NONLINEAR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a> = &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap\">i_mmap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#importer\">importer</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_truncate_count\">vm_truncate_count</a> != <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_truncate_count\">vm_truncate_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * unmap_mapping_range might be in progress:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ensure that the expanding vma is rescanned.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#importer\">importer</a>-><a class=\"id\" href=\"#vm_truncate_count\">vm_truncate_count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#insert\">insert</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insert\">insert</a>-><a class=\"id\" href=\"#vm_truncate_count\">vm_truncate_count</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_truncate_count\">vm_truncate_count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Put into prio_tree now, so instantiated pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * are visible to arm/parisc __flush_dcache_page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * throughout; but we cannot insert into address</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * space until vma start or end is updated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__vma_link_file\">__vma_link_file</a>(<a class=\"id\" href=\"#insert\">insert</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When changing only vma-&gt;vm_end, we don't really need anon_vma</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lock. This is a fairly rare case by itself, but the anon_vma</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lock may be shared between many sibling processes.  Skipping</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the lock for brk adjustments makes a difference sometimes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a> && (<a class=\"id\" href=\"#insert\">insert</a> || <a class=\"id\" href=\"#importer\">importer</a> || <a class=\"id\" href=\"#start\">start</a> != <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_lock\">anon_vma_lock</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#root\">root</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_dcache_mmap_lock\">flush_dcache_mmap_lock</a>(<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma_prio_tree_remove\">vma_prio_tree_remove</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#adjust_next\">adjust_next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma_prio_tree_remove\">vma_prio_tree_remove</a>(<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> = <a class=\"id\" href=\"#pgoff\">pgoff</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#adjust_next\">adjust_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> += <a class=\"id\" href=\"#adjust_next\">adjust_next</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> += <a class=\"id\" href=\"#adjust_next\">adjust_next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#root\">root</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#adjust_next\">adjust_next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma_prio_tree_insert\">vma_prio_tree_insert</a>(<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma_prio_tree_insert\">vma_prio_tree_insert</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_dcache_mmap_unlock\">flush_dcache_mmap_unlock</a>(<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#remove_next\">remove_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * vma_merge has merged next into vma, and needs</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * us to remove next before dropping the locks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__vma_unlink\">__vma_unlink</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__remove_shared_vm_struct\">__remove_shared_vm_struct</a>(<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#insert\">insert</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * split_vma has split insert from vma, and needs</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * us to insert it before dropping the locks</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (it may either follow vma or precede it).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__insert_vm_struct\">__insert_vm_struct</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#insert\">insert</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_unlock\">anon_vma_unlock</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#remove_next\">remove_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_EXECUTABLE\">VM_EXECUTABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#removed_exe_file_vma\">removed_exe_file_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_merge\">anon_vma_merge</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#map_count\">map_count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_put\">mpol_put</a>(<a class=\"id\" href=\"#vma_policy\">vma_policy</a>(<a class=\"id\" href=\"#next\">next</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#vm_area_cachep\">vm_area_cachep</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In mprotect's case 6 (see comments on vma_merge),</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we must remove another next too. It would clutter</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * up the code too much to do both in one go.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#remove_next\">remove_next</a> == 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_mm\">validate_mm</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If the vma has a -&gt;close operation then the driver probably needs to release</span>", 
"<span class=\"comment\"> * per-vma resources, so we don't attempt to merge those.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_mergeable_vma\">is_mergeable_vma</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned long <a class=\"id\" href=\"#vm_flags\">vm_flags</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* VM_CAN_NONLINEAR may get set later by f_op-&gt;mmap() */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> ^ <a class=\"id\" href=\"#vm_flags\">vm_flags</a>) &amp; ~<a class=\"id\" href=\"#VM_CAN_NONLINEAR\">VM_CAN_NONLINEAR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a> != <a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#close\">close</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_mergeable_anon_vma\">is_mergeable_anon_vma</a>(struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma1\">anon_vma1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma2\">anon_vma2</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#anon_vma1\">anon_vma1</a> || !<a class=\"id\" href=\"#anon_vma2\">anon_vma2</a> || (<a class=\"id\" href=\"#anon_vma1\">anon_vma1</a> == <a class=\"id\" href=\"#anon_vma2\">anon_vma2</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return true if we can merge this (vm_flags,anon_vma,file,vm_pgoff)</span>", 
"<span class=\"comment\"> * in front of (at a lower virtual address and file offset than) the vma.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We cannot merge two vmas if they have differently assigned (non-NULL)</span>", 
"<span class=\"comment\"> * anon_vmas, nor if same anon_vma is assigned but offsets incompatible.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We don't check here for the merged mmap wrapping around the end of pagecache</span>", 
"<span class=\"comment\"> * indices (16TB on ia32) because do_mmap_pgoff() does not permit mmap's which</span>", 
"<span class=\"comment\"> * wrap, nor mmaps which cover the final page at index -1UL.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#can_vma_merge_before\">can_vma_merge_before</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#vm_flags\">vm_flags</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_mergeable_vma\">is_mergeable_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#vm_flags\">vm_flags</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#is_mergeable_anon_vma\">is_mergeable_anon_vma</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> == <a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return true if we can merge this (vm_flags,anon_vma,file,vm_pgoff)</span>", 
"<span class=\"comment\"> * beyond (at a higher virtual address and file offset than) the vma.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We cannot merge two vmas if they have differently assigned (non-NULL)</span>", 
"<span class=\"comment\"> * anon_vmas, nor if same anon_vma is assigned but offsets incompatible.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#can_vma_merge_after\">can_vma_merge_after</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#vm_flags\">vm_flags</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_mergeable_vma\">is_mergeable_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#vm_flags\">vm_flags</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#is_mergeable_anon_vma\">is_mergeable_anon_vma</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#vm_pglen\">vm_pglen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_pglen\">vm_pglen</a> = (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> + <a class=\"id\" href=\"#vm_pglen\">vm_pglen</a> == <a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Given a mapping request (addr,end,vm_flags,file,pgoff), figure out</span>", 
"<span class=\"comment\"> * whether that can be merged with its predecessor or its successor.</span>", 
"<span class=\"comment\"> * Or both (it neatly fills a hole).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In most cases - when called for mmap, brk or mremap - [addr,end) is</span>", 
"<span class=\"comment\"> * certain not to be mapped by the time vma_merge is called; but when</span>", 
"<span class=\"comment\"> * called for mprotect, it is certain to be already mapped (either at</span>", 
"<span class=\"comment\"> * an offset within prev, or at the start of next), and the flags of</span>", 
"<span class=\"comment\"> * this area are about to be changed to vm_flags - and the no-change</span>", 
"<span class=\"comment\"> * case has already been eliminated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The following mprotect cases have to be considered, where AAAA is</span>", 
"<span class=\"comment\"> * the area passed down from mprotect_fixup, never extending beyond one</span>", 
"<span class=\"comment\"> * vma, PPPPPP is the prev vma specified, and NNNNNN the next vma after:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     AAAA             AAAA                AAAA          AAAA</span>", 
"<span class=\"comment\"> *    PPPPPPNNNNNN    PPPPPPNNNNNN    PPPPPPNNNNNN    PPPPNNNNXXXX</span>", 
"<span class=\"comment\"> *    cannot merge    might become    might become    might become</span>", 
"<span class=\"comment\"> *                    PPNNNNNNNNNN    PPPPPPPPPPNN    PPPPPPPPPPPP 6 or</span>", 
"<span class=\"comment\"> *    mmap, brk or    case 4 below    case 5 below    PPPPPPPPXXXX 7 or</span>", 
"<span class=\"comment\"> *    mremap move:                                    PPPPNNNNNNNN 8</span>", 
"<span class=\"comment\"> *        AAAA</span>", 
"<span class=\"comment\"> *    PPPP    NNNN    PPPPPPPPPPPP    PPPPPPPPNNNN    PPPPNNNNNNNN</span>", 
"<span class=\"comment\"> *    might become    case 1 below    case 2 below    case 3 below</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Odd one out? Case 8, because it extends NNNN but needs flags of XXXX:</span>", 
"<span class=\"comment\"> * mprotect_fixup updates vm_flags &amp; vm_page_prot on successful return.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma_merge\">vma_merge</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>, unsigned long <a class=\"id\" href=\"#vm_flags\">vm_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pgoff\">pgoff</a>, struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pglen\">pglen</a> = (<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#addr\">addr</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#area\">area</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We later require that vma-&gt;vm_flags == vm_flags,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so this tests vma-&gt;vm_flags &amp; VM_SPECIAL, too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_SPECIAL\">VM_SPECIAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> && <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> == <a class=\"id\" href=\"#end\">end</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cases 6, 7, 8 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Can it merge with the predecessor?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a> && <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> == <a class=\"id\" href=\"#addr\">addr</a> &&", 
"  <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_equal\">mpol_equal</a>(<a class=\"id\" href=\"#vma_policy\">vma_policy</a>(<a class=\"id\" href=\"#prev\">prev</a>), <a class=\"id\" href=\"#policy\">policy</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#can_vma_merge_after\">can_vma_merge_after</a>(<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#vm_flags\">vm_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma\">anon_vma</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * OK, it can.  Can we now merge in the successor as well?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> && <a class=\"id\" href=\"#end\">end</a> == <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_equal\">mpol_equal</a>(<a class=\"id\" href=\"#policy\">policy</a>, <a class=\"id\" href=\"#vma_policy\">vma_policy</a>(<a class=\"id\" href=\"#next\">next</a>)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#can_vma_merge_before\">can_vma_merge_before</a>(<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#vm_flags\">vm_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma\">anon_vma</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>+<a class=\"id\" href=\"#pglen\">pglen</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_mergeable_anon_vma\">is_mergeable_anon_vma</a>(<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cases 1, 6 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#vma_adjust\">vma_adjust</a>(<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>, <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cases 2, 5, 7 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#vma_adjust\">vma_adjust</a>(<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Can this new request be merged in front of next?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> && <a class=\"id\" href=\"#end\">end</a> == <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &&", 
" <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_equal\">mpol_equal</a>(<a class=\"id\" href=\"#policy\">policy</a>, <a class=\"id\" href=\"#vma_policy\">vma_policy</a>(<a class=\"id\" href=\"#next\">next</a>)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#can_vma_merge_before\">can_vma_merge_before</a>(<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#vm_flags\">vm_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma\">anon_vma</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>+<a class=\"id\" href=\"#pglen\">pglen</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a> && <a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>)<span class=\"ts\"/><span class=\"comment\">/* case 4 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#vma_adjust\">vma_adjust</a>(<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cases 3, 8 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#vma_adjust\">vma_adjust</a>(<a class=\"id\" href=\"#area\">area</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> - <a class=\"id\" href=\"#pglen\">pglen</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#area\">area</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Rough compatbility check to quickly see if it's even worth looking</span>", 
"<span class=\"comment\"> * at sharing an anon_vma.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * They need to have the same vm_file, and the flags can only differ</span>", 
"<span class=\"comment\"> * in things that mprotect may change.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE! The fact that we share an anon_vma doesn't _have_ to mean that</span>", 
"<span class=\"comment\"> * we can merge the two vma's. For example, we refuse to merge a vma if</span>", 
"<span class=\"comment\"> * there is a vm_ops-&gt;close() function, because that indicates that the</span>", 
"<span class=\"comment\"> * driver is doing some kind of reference counting. But that doesn't</span>", 
"<span class=\"comment\"> * really matter for the anon_vma sharing case.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#anon_vma_compatible\">anon_vma_compatible</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> == <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_equal\">mpol_equal</a>(<a class=\"id\" href=\"#vma_policy\">vma_policy</a>(<a class=\"id\" href=\"#a\">a</a>), <a class=\"id\" href=\"#vma_policy\">vma_policy</a>(<a class=\"id\" href=\"#b\">b</a>)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a> == <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>!((<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> ^ <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a>) &amp; ~(<a class=\"id\" href=\"#VM_READ\">VM_READ</a>|<a class=\"id\" href=\"#VM_WRITE\">VM_WRITE</a>|<a class=\"id\" href=\"#VM_EXEC\">VM_EXEC</a>)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> == <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> + ((<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> - <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Do some basic sanity checking to see if we can re-use the anon_vma</span>", 
"<span class=\"comment\"> * from 'old'. The 'a'/'b' vma's are in VM order - one of them will be</span>", 
"<span class=\"comment\"> * the same as 'old', the other will be the new one that is trying</span>", 
"<span class=\"comment\"> * to share the anon_vma.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE! This runs with mm_sem held for reading, so it is possible that</span>", 
"<span class=\"comment\"> * the anon_vma of 'old' is concurrently in the process of being set up</span>", 
"<span class=\"comment\"> * by another page fault trying to merge _that_. But that's ok: if it</span>", 
"<span class=\"comment\"> * is being set up, that automatically means that it will be a singleton</span>", 
"<span class=\"comment\"> * acceptable for merging, so we can do all of this optimistically. But</span>", 
"<span class=\"comment\"> * we do that ACCESS_ONCE() to make sure that we never re-load the pointer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * IOW: that the \"list_is_singular()\" test on the anon_vma_chain only</span>", 
"<span class=\"comment\"> * matters for the 'stable anon_vma' case (ie the thing we want to avoid</span>", 
"<span class=\"comment\"> * is to return an anon_vma that is \"complex\" due to having gone through</span>", 
"<span class=\"comment\"> * a fork).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We also make sure that the two vma's are compatible (adjacent,</span>", 
"<span class=\"comment\"> * and with the same memory policies). That's all stable, even with just</span>", 
"<span class=\"comment\"> * a read lock on the mm_sem.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#reusable_anon_vma\">reusable_anon_vma</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#old\">old</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#anon_vma_compatible\">anon_vma_compatible</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#anon_vma\">anon_vma</a> && <a class=\"id\" href=\"#list_is_singular\">list_is_singular</a>(&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * find_mergeable_anon_vma is used by anon_vma_prepare, to check</span>", 
"<span class=\"comment\"> * neighbouring vmas for a suitable anon_vma, before it goes off</span>", 
"<span class=\"comment\"> * to allocate a new anon_vma.  It checks because a repetitive</span>", 
"<span class=\"comment\"> * sequence of mprotects and faults may otherwise lead to distinct</span>", 
"<span class=\"comment\"> * anon_vmas being allocated, preventing vma merge in subsequent</span>", 
"<span class=\"comment\"> * mprotect.</span>", 
];
xr_frag_insert('l/45/e62705f98b9138556b562312767d5b418fb726.xr', __xr_tmp);
