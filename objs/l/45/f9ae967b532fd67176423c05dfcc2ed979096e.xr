var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/ext2/ialloc.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 1992, 1993, 1994, 1995</span>", 
"<span class=\"comment\"> * Remy Card (card@masi.ibp.fr)</span>", 
"<span class=\"comment\"> * Laboratoire MASI - Institut Blaise Pascal</span>", 
"<span class=\"comment\"> * Universite Pierre et Marie Curie (Paris VI)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  BSD ufs-inspired inode and directory allocation by </span>", 
"<span class=\"comment\"> *  Stephen Tweedie (sct@dcs.ed.ac.uk), 1993</span>", 
"<span class=\"comment\"> *  Big-endian to little-endian byte-swapping/bitmaps by</span>", 
"<span class=\"comment\"> *        David S. Miller (davem@caip.rutgers.edu), 1995</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#quotaops\">quotaops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#backing\">backing</a>-<a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#random\">random</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"ext2.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"xattr.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acl.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ialloc.c contains the inodes allocation and deallocation routines</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The free inodes are managed by bitmaps.  A file system contains several</span>", 
"<span class=\"comment\"> * blocks groups.  Each group contains 1 bitmap block for blocks, 1 bitmap</span>", 
"<span class=\"comment\"> * block for inodes, N blocks for the inode table and data blocks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The file system contains group descriptors which are located after the</span>", 
"<span class=\"comment\"> * super block.  Each descriptor contains the number of the bitmap block and</span>", 
"<span class=\"comment\"> * the free blocks count in the block.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Read the inode allocation bitmap for a given block_group, reading</span>", 
"<span class=\"comment\"> * into the specified slot in the superblock's bitmap cache.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return buffer_head of bitmap on success or NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *", 
"<a class=\"id\" href=\"#read_inode_bitmap\">read_inode_bitmap</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> * <a class=\"id\" href=\"#sb\">sb</a>, unsigned long <a class=\"id\" href=\"#block_group\">block_group</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_group_desc\">ext2_group_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_out\">error_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#sb_bread\">sb_bread</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_inode_bitmap\">bg_inode_bitmap</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh\">bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_error\">ext2_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, \"read_inode_bitmap\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Cannot read inode bitmap - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"block_group = %lu, inode_bitmap = %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_inode_bitmap\">bg_inode_bitmap</a>));", 
"<a class=\"id\" href=\"#error_out\">error_out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ext2_release_inode\">ext2_release_inode</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#group\">group</a>, int <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_group_desc\">ext2_group_desc</a> * <a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>, &amp;<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_error\">ext2_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, \"ext2_release_inode\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"can't get descriptor for group %d\", <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>), <a class=\"id\" href=\"#group\">group</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#le16_add_cpu\">le16_add_cpu</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_inodes_count\">bg_free_inodes_count</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dir\">dir</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#le16_add_cpu\">le16_add_cpu</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_used_dirs_count\">bg_used_dirs_count</a>, -1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>), <a class=\"id\" href=\"#group\">group</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dir\">dir</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_dec\">percpu_counter_dec</a>(&amp;<a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_dirs_counter\">s_dirs_counter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_dirt\">s_dirt</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_dirty\">mark_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NOTE! When we get the inode, we're the only people</span>", 
"<span class=\"comment\"> * that have access to it, and as such there are no</span>", 
"<span class=\"comment\"> * race conditions we have to worry about. The inode</span>", 
"<span class=\"comment\"> * is not on the hash-lists, and it cannot be reached</span>", 
"<span class=\"comment\"> * through the filesystem because the directory entry</span>", 
"<span class=\"comment\"> * has been deleted earlier.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * HOWEVER: we must make sure that we get no aliases,</span>", 
"<span class=\"comment\"> * which means that we have to call \"clear_inode()\"</span>", 
"<span class=\"comment\"> * _before_ we mark the inode not in use in the inode</span>", 
"<span class=\"comment\"> * bitmaps. Otherwise a newly created file might use</span>", 
"<span class=\"comment\"> * the same inode number (not actually the same pointer</span>", 
"<span class=\"comment\"> * though), and then we'd have two inodes sharing the</span>", 
"<span class=\"comment\"> * same inode number and space on the harddisk.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ext2_free_inode\">ext2_free_inode</a> (struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> * <a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_directory\">is_directory</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ino\">ino</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#block_group\">block_group</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_super_block\">ext2_super_block</a> * <a class=\"id\" href=\"#es\">es</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ino\">ino</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_debug\">ext2_debug</a> (\"freeing inode %lu\\n\", <a class=\"id\" href=\"#ino\">ino</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note: we must free any quota before locking the superblock,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * as writing the quota to disk may need the lock as well.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Quota is already initialized in iput() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_xattr_delete_inode\">ext2_xattr_delete_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dquot_free_inode\">dquot_free_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dquot_drop\">dquot_drop</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#es\">es</a> = <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_es\">s_es</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#is_directory\">is_directory</a> = <a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ino\">ino</a> &lt; <a class=\"id\" href=\"#EXT2_FIRST_INO\">EXT2_FIRST_INO</a>(<a class=\"id\" href=\"#sb\">sb</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ino\">ino</a> &gt; <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_inodes_count\">s_inodes_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_error\">ext2_error</a> (<a class=\"id\" href=\"#sb\">sb</a>, \"ext2_free_inode\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"reserved or nonexistent inode %lu\", <a class=\"id\" href=\"#ino\">ino</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_group\">block_group</a> = (<a class=\"id\" href=\"#ino\">ino</a> - 1) / <a class=\"id\" href=\"#EXT2_INODES_PER_GROUP\">EXT2_INODES_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a> = (<a class=\"id\" href=\"#ino\">ino</a> - 1) % <a class=\"id\" href=\"#EXT2_INODES_PER_GROUP\">EXT2_INODES_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#read_inode_bitmap\">read_inode_bitmap</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#block_group\">block_group</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ok, now we can actually update the inode bitmaps.. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext2_clear_bit_atomic\">ext2_clear_bit_atomic</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>), <a class=\"id\" href=\"#block_group\">block_group</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a>, (void *) <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_error\">ext2_error</a> (<a class=\"id\" href=\"#sb\">sb</a>, \"ext2_free_inode\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"bit already cleared for inode %lu\", <a class=\"id\" href=\"#ino\">ino</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_release_inode\">ext2_release_inode</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#is_directory\">is_directory</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_dirty\">mark_buffer_dirty</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#MS_SYNCHRONOUS\">MS_SYNCHRONOUS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_dirty_buffer\">sync_dirty_buffer</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We perform asynchronous prereading of the new inode's inode block when</span>", 
"<span class=\"comment\"> * we create the inode, in the expectation that the inode will be written</span>", 
"<span class=\"comment\"> * back soon.  There are two reasons:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * - When creating a large number of files, the async prereads will be</span>", 
"<span class=\"comment\"> *   nicely merged into large reads</span>", 
"<span class=\"comment\"> * - When writing out a large number of inodes, we don't need to keep on</span>", 
"<span class=\"comment\"> *   stalling the writes while we read the inode block.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FIXME: ext2_get_group_desc() needs to be simplified.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext2_preread_inode\">ext2_preread_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#block_group\">block_group</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_group_desc\">ext2_group_desc</a> * <a class=\"id\" href=\"#gdp\">gdp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdi_read_congested\">bdi_read_congested</a>(<a class=\"id\" href=\"#bdi\">bdi</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdi_write_congested\">bdi_write_congested</a>(<a class=\"id\" href=\"#bdi\">bdi</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_group\">block_group</a> = (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a> - 1) / <a class=\"id\" href=\"#EXT2_INODES_PER_GROUP\">EXT2_INODES_PER_GROUP</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdp\">gdp</a> = <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gdp\">gdp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Figure out the offset within the block group inode table</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = ((<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a> - 1) % <a class=\"id\" href=\"#EXT2_INODES_PER_GROUP\">EXT2_INODES_PER_GROUP</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)) *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT2_INODE_SIZE\">EXT2_INODE_SIZE</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_inode_table\">bg_inode_table</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#offset\">offset</a> >> <a class=\"id\" href=\"#EXT2_BLOCK_SIZE_BITS\">EXT2_BLOCK_SIZE_BITS</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb_breadahead\">sb_breadahead</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#block\">block</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * There are two policies for allocating an inode.  If the new inode is</span>", 
"<span class=\"comment\"> * a directory, then a forward search is made for a block group with both</span>", 
"<span class=\"comment\"> * free space and a low directory-to-inode ratio; if that fails, then of</span>", 
"<span class=\"comment\"> * the groups with above-average free space, that group with the fewest</span>", 
"<span class=\"comment\"> * directories already is chosen.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For other inodes, search forward from the parent directory\\'s block</span>", 
"<span class=\"comment\"> * group to find a free inode.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#find_group_dir\">find_group_dir</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ngroups\">ngroups</a> = <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_groups_count\">s_groups_count</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#avefreei\">avefreei</a> = <a class=\"id\" href=\"#ext2_count_free_inodes\">ext2_count_free_inodes</a>(<a class=\"id\" href=\"#sb\">sb</a>) / <a class=\"id\" href=\"#ngroups\">ngroups</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_group_desc\">ext2_group_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>, *<a class=\"id\" href=\"#best_desc\">best_desc</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#best_group\">best_group</a> = -1;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#group\">group</a> = 0; <a class=\"id\" href=\"#group\">group</a> &lt; <a class=\"id\" href=\"#ngroups\">ngroups</a>; <a class=\"id\" href=\"#group\">group</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a> (<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a> || !<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_inodes_count\">bg_free_inodes_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_inodes_count\">bg_free_inodes_count</a>) &lt; <a class=\"id\" href=\"#avefreei\">avefreei</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#best_desc\">best_desc</a> || ", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_blocks_count\">bg_free_blocks_count</a>) &gt;", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#best_desc\">best_desc</a>-><a class=\"id\" href=\"#bg_free_blocks_count\">bg_free_blocks_count</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#best_group\">best_group</a> = <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#best_desc\">best_desc</a> = <a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#best_desc\">best_desc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#best_group\">best_group</a>;", 
"}", 
"", 
"<span class=\"comment\">/* </span>", 
"<span class=\"comment\"> * Orlov's allocator for directories. </span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * We always try to spread first-level directories.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If there are blockgroups with both free inodes and free blocks counts </span>", 
"<span class=\"comment\"> * not worse than average we return one with smallest directory count. </span>", 
"<span class=\"comment\"> * Otherwise we simply return a random group. </span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * For the rest rules look so: </span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * It's OK to put directory into a group unless </span>", 
"<span class=\"comment\"> * it has too many directories already (max_dirs) or </span>", 
"<span class=\"comment\"> * it has too few free inodes left (min_inodes) or </span>", 
"<span class=\"comment\"> * it has too few free blocks left (min_blocks) or </span>", 
"<span class=\"comment\"> * it's already running too large debt (max_debt). </span>", 
"<span class=\"comment\"> * Parent's group is preferred, if it doesn't satisfy these </span>", 
"<span class=\"comment\"> * conditions we search cyclically through the rest. If none </span>", 
"<span class=\"comment\"> * of the groups look good we just look for a group with more </span>", 
"<span class=\"comment\"> * free inodes than average (starting at parent's group). </span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * Debt is incremented each time we allocate a directory and decremented </span>", 
"<span class=\"comment\"> * when we allocate an inode, within 0--255. </span>", 
"<span class=\"comment\"> */</span> ", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INODE_COST\">INODE_COST</a> 64", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLOCK_COST\">BLOCK_COST</a> 256", 
"", 
"static int <a class=\"id\" href=\"#find_group_orlov\">find_group_orlov</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#parent_group\">parent_group</a> = <a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#parent\">parent</a>)-><a class=\"id\" href=\"#i_block_group\">i_block_group</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_sb_info\">ext2_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_super_block\">ext2_super_block</a> *<a class=\"id\" href=\"#es\">es</a> = <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_es\">s_es</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ngroups\">ngroups</a> = <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_groups_count\">s_groups_count</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#inodes_per_group\">inodes_per_group</a> = <a class=\"id\" href=\"#EXT2_INODES_PER_GROUP\">EXT2_INODES_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#freei\">freei</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#avefreei\">avefreei</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#free_blocks\">free_blocks</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#avefreeb\">avefreeb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#blocks_per_dir\">blocks_per_dir</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ndirs\">ndirs</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_debt\">max_debt</a>, <a class=\"id\" href=\"#max_dirs\">max_dirs</a>, <a class=\"id\" href=\"#min_blocks\">min_blocks</a>, <a class=\"id\" href=\"#min_inodes\">min_inodes</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#group\">group</a> = -1, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_group_desc\">ext2_group_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#freei\">freei</a> = <a class=\"id\" href=\"#percpu_counter_read_positive\">percpu_counter_read_positive</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_freeinodes_counter\">s_freeinodes_counter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avefreei\">avefreei</a> = <a class=\"id\" href=\"#freei\">freei</a> / <a class=\"id\" href=\"#ngroups\">ngroups</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_blocks\">free_blocks</a> = <a class=\"id\" href=\"#percpu_counter_read_positive\">percpu_counter_read_positive</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_freeblocks_counter\">s_freeblocks_counter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avefreeb\">avefreeb</a> = <a class=\"id\" href=\"#free_blocks\">free_blocks</a> / <a class=\"id\" href=\"#ngroups\">ngroups</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ndirs\">ndirs</a> = <a class=\"id\" href=\"#percpu_counter_read_positive\">percpu_counter_read_positive</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_dirs_counter\">s_dirs_counter</a>);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#parent\">parent</a> == <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#parent\">parent</a>)-><a class=\"id\" href=\"#i_flags\">i_flags</a> &amp; <a class=\"id\" href=\"#EXT2_TOPDIR_FL\">EXT2_TOPDIR_FL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_group_desc\">ext2_group_desc</a> *<a class=\"id\" href=\"#best_desc\">best_desc</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#best_ndir\">best_ndir</a> = <a class=\"id\" href=\"#inodes_per_group\">inodes_per_group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#best_group\">best_group</a> = -1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_random_bytes\">get_random_bytes</a>(&amp;<a class=\"id\" href=\"#group\">group</a>, sizeof(<a class=\"id\" href=\"#group\">group</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent_group\">parent_group</a> = (unsigned)<a class=\"id\" href=\"#group\">group</a> % <a class=\"id\" href=\"#ngroups\">ngroups</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ngroups\">ngroups</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = (<a class=\"id\" href=\"#parent_group\">parent_group</a> + <a class=\"id\" href=\"#i\">i</a>) % <a class=\"id\" href=\"#ngroups\">ngroups</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a> (<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a> || !<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_inodes_count\">bg_free_inodes_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_used_dirs_count\">bg_used_dirs_count</a>) >= <a class=\"id\" href=\"#best_ndir\">best_ndir</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_inodes_count\">bg_free_inodes_count</a>) &lt; <a class=\"id\" href=\"#avefreei\">avefreei</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_blocks_count\">bg_free_blocks_count</a>) &lt; <a class=\"id\" href=\"#avefreeb\">avefreeb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#best_group\">best_group</a> = <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#best_ndir\">best_ndir</a> = <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_used_dirs_count\">bg_used_dirs_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#best_desc\">best_desc</a> = <a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#best_group\">best_group</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#best_desc\">best_desc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#best_group\">best_group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fallback\">fallback</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ndirs\">ndirs</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ndirs\">ndirs</a> = 1;<span class=\"ts\"/><span class=\"comment\">/* percpu_counters are approximate... */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocks_per_dir\">blocks_per_dir</a> = (<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_blocks_count\">s_blocks_count</a>)-<a class=\"id\" href=\"#free_blocks\">free_blocks</a>) / <a class=\"id\" href=\"#ndirs\">ndirs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_dirs\">max_dirs</a> = <a class=\"id\" href=\"#ndirs\">ndirs</a> / <a class=\"id\" href=\"#ngroups\">ngroups</a> + <a class=\"id\" href=\"#inodes_per_group\">inodes_per_group</a> / 16;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min_inodes\">min_inodes</a> = <a class=\"id\" href=\"#avefreei\">avefreei</a> - <a class=\"id\" href=\"#inodes_per_group\">inodes_per_group</a> / 4;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min_blocks\">min_blocks</a> = <a class=\"id\" href=\"#avefreeb\">avefreeb</a> - <a class=\"id\" href=\"#EXT2_BLOCKS_PER_GROUP\">EXT2_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>) / 4;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_debt\">max_debt</a> = <a class=\"id\" href=\"#EXT2_BLOCKS_PER_GROUP\">EXT2_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>) / <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#blocks_per_dir\">blocks_per_dir</a>, <a class=\"id\" href=\"#BLOCK_COST\">BLOCK_COST</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_debt\">max_debt</a> * <a class=\"id\" href=\"#INODE_COST\">INODE_COST</a> &gt; <a class=\"id\" href=\"#inodes_per_group\">inodes_per_group</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_debt\">max_debt</a> = <a class=\"id\" href=\"#inodes_per_group\">inodes_per_group</a> / <a class=\"id\" href=\"#INODE_COST\">INODE_COST</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_debt\">max_debt</a> &gt; 255)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_debt\">max_debt</a> = 255;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_debt\">max_debt</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_debt\">max_debt</a> = 1;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ngroups\">ngroups</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = (<a class=\"id\" href=\"#parent_group\">parent_group</a> + <a class=\"id\" href=\"#i\">i</a>) % <a class=\"id\" href=\"#ngroups\">ngroups</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a> (<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a> || !<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_inodes_count\">bg_free_inodes_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_debts\">s_debts</a>[<a class=\"id\" href=\"#group\">group</a>] >= <a class=\"id\" href=\"#max_debt\">max_debt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_used_dirs_count\">bg_used_dirs_count</a>) >= <a class=\"id\" href=\"#max_dirs\">max_dirs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_inodes_count\">bg_free_inodes_count</a>) &lt; <a class=\"id\" href=\"#min_inodes\">min_inodes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_blocks_count\">bg_free_blocks_count</a>) &lt; <a class=\"id\" href=\"#min_blocks\">min_blocks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#fallback\">fallback</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ngroups\">ngroups</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = (<a class=\"id\" href=\"#parent_group\">parent_group</a> + <a class=\"id\" href=\"#i\">i</a>) % <a class=\"id\" href=\"#ngroups\">ngroups</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a> (<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a> || !<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_inodes_count\">bg_free_inodes_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_inodes_count\">bg_free_inodes_count</a>) >= <a class=\"id\" href=\"#avefreei\">avefreei</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#avefreei\">avefreei</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The free-inodes counter is approximate, and for really small</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * filesystems the above test can fail to find any blockgroups</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avefreei\">avefreei</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fallback\">fallback</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return -1;", 
"", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#group\">group</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#find_group_other\">find_group_other</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#parent_group\">parent_group</a> = <a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#parent\">parent</a>)-><a class=\"id\" href=\"#i_block_group\">i_block_group</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ngroups\">ngroups</a> = <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_groups_count\">s_groups_count</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_group_desc\">ext2_group_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Try to place the inode in its parent directory</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#parent_group\">parent_group</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a> (<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#desc\">desc</a> && <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_inodes_count\">bg_free_inodes_count</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_blocks_count\">bg_free_blocks_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We're going to place this inode in a different blockgroup from its</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * parent.  We want to cause files in a common directory to all land in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the same blockgroup.  But we want files which are in a different</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * directory which shares a blockgroup with our parent to land in a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * different blockgroup.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So add our directory's i_ino into the starting point for the hash.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = (<a class=\"id\" href=\"#group\">group</a> + <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>) % <a class=\"id\" href=\"#ngroups\">ngroups</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Use a quadratic hash to find a group with a free inode and some</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * free blocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ngroups\">ngroups</a>; <a class=\"id\" href=\"#i\">i</a> <<= 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> += <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#group\">group</a> >= <a class=\"id\" href=\"#ngroups\">ngroups</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> -= <a class=\"id\" href=\"#ngroups\">ngroups</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a> (<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#desc\">desc</a> && <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_inodes_count\">bg_free_inodes_count</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_blocks_count\">bg_free_blocks_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * That failed: try linear search for a free inode, even if that group</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * has no free blocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#parent_group\">parent_group</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ngroups\">ngroups</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (++<a class=\"id\" href=\"#group\">group</a> >= <a class=\"id\" href=\"#ngroups\">ngroups</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a> (<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#desc\">desc</a> && <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_inodes_count\">bg_free_inodes_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return -1;", 
"", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#group\">group</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#ext2_new_inode\">ext2_new_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, int <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh2\">bh2</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ino_t\">ino_t</a> <a class=\"id\" href=\"#ino\">ino</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_group_desc\">ext2_group_desc</a> *<a class=\"id\" href=\"#gdp\">gdp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_super_block\">ext2_super_block</a> *<a class=\"id\" href=\"#es\">es</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_inode_info\">ext2_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_sb_info\">ext2_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#new_inode\">new_inode</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#es\">es</a> = <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_es\">s_es</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#mode\">mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_opt\">test_opt</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#OLDALLOC\">OLDALLOC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#find_group_dir\">find_group_dir</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#find_group_orlov\">find_group_orlov</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/>} else ", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#find_group_other\">find_group_other</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group\">group</a> == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_groups_count\">s_groups_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdp\">gdp</a> = <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>, &amp;<a class=\"id\" href=\"#bh2\">bh2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#read_inode_bitmap\">read_inode_bitmap</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ino\">ino</a> = 0;", 
"", 
"<a class=\"id\" href=\"#repeat_in_this_group\">repeat_in_this_group</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ino\">ino</a> = <a class=\"id\" href=\"#ext2_find_next_zero_bit\">ext2_find_next_zero_bit</a>((unsigned long *)<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#EXT2_INODES_PER_GROUP\">EXT2_INODES_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>), <a class=\"id\" href=\"#ino\">ino</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ino\">ino</a> >= <a class=\"id\" href=\"#EXT2_INODES_PER_GROUP\">EXT2_INODES_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Rare race: find_group_xx() decided that there were</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * free inodes in this group, but by the time we tried</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to allocate one, they're all gone.  This can also</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * occur because the counters which find_group_orlov()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * uses are approximate.  So just go and search the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * next block group.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (++<a class=\"id\" href=\"#group\">group</a> == <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_groups_count\">s_groups_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ext2_set_bit_atomic\">ext2_set_bit_atomic</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#sbi\">sbi</a>, <a class=\"id\" href=\"#group\">group</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ino\">ino</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we lost this inode */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (++<a class=\"id\" href=\"#ino\">ino</a> >= <a class=\"id\" href=\"#EXT2_INODES_PER_GROUP\">EXT2_INODES_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this group is exhausted, try next group */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (++<a class=\"id\" href=\"#group\">group</a> == <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_groups_count\">s_groups_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* try to find free inode in the same group */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat_in_this_group\">repeat_in_this_group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got\">got</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Scanned all blockgroups.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<a class=\"id\" href=\"#got\">got</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_dirty\">mark_buffer_dirty</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#MS_SYNCHRONOUS\">MS_SYNCHRONOUS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_dirty_buffer\">sync_dirty_buffer</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ino\">ino</a> += <a class=\"id\" href=\"#group\">group</a> * <a class=\"id\" href=\"#EXT2_INODES_PER_GROUP\">EXT2_INODES_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>) + 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ino\">ino</a> &lt; <a class=\"id\" href=\"#EXT2_FIRST_INO\">EXT2_FIRST_INO</a>(<a class=\"id\" href=\"#sb\">sb</a>) || <a class=\"id\" href=\"#ino\">ino</a> &gt; <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_inodes_count\">s_inodes_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_error\">ext2_error</a> (<a class=\"id\" href=\"#sb\">sb</a>, \"ext2_new_inode\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"reserved inode or inode > inodes count - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"block_group = %d,inode=%lu\", <a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (unsigned long) <a class=\"id\" href=\"#ino\">ino</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_add\">percpu_counter_add</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_freeinodes_counter\">s_freeinodes_counter</a>, -1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#mode\">mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_inc\">percpu_counter_inc</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_dirs_counter\">s_dirs_counter</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#sbi\">sbi</a>, <a class=\"id\" href=\"#group\">group</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#le16_add_cpu\">le16_add_cpu</a>(&amp;<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_free_inodes_count\">bg_free_inodes_count</a>, -1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#mode\">mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_debts\">s_debts</a>[<a class=\"id\" href=\"#group\">group</a>] &lt; 255)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_debts\">s_debts</a>[<a class=\"id\" href=\"#group\">group</a>]++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#le16_add_cpu\">le16_add_cpu</a>(&amp;<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_used_dirs_count\">bg_used_dirs_count</a>, 1);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_debts\">s_debts</a>[<a class=\"id\" href=\"#group\">group</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_debts\">s_debts</a>[<a class=\"id\" href=\"#group\">group</a>]--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#sbi\">sbi</a>, <a class=\"id\" href=\"#group\">group</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_dirt\">s_dirt</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_dirty\">mark_buffer_dirty</a>(<a class=\"id\" href=\"#bh2\">bh2</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_opt\">test_opt</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#GRPID\">GRPID</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> = <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a> = <a class=\"id\" href=\"#current_fsuid\">current_fsuid</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a> = <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode_init_owner\">inode_init_owner</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a> = <a class=\"id\" href=\"#ino\">ino</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blocks\">i_blocks</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mtime\">i_mtime</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_atime\">i_atime</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a> = <a class=\"id\" href=\"#CURRENT_TIME_SEC\">CURRENT_TIME_SEC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_data\">i_data</a>, 0, sizeof(<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_data\">i_data</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_mask_flags\">ext2_mask_flags</a>(<a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#dir\">dir</a>)-><a class=\"id\" href=\"#i_flags\">i_flags</a> &amp; <a class=\"id\" href=\"#EXT2_FL_INHERITED\">EXT2_FL_INHERITED</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_faddr\">i_faddr</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_frag_no\">i_frag_no</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_frag_size\">i_frag_size</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_file_acl\">i_file_acl</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_dir_acl\">i_dir_acl</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_dtime\">i_dtime</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_group\">i_block_group</a> = <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_dir_start_lookup\">i_dir_start_lookup</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_state\">i_state</a> = <a class=\"id\" href=\"#EXT2_STATE_NEW\">EXT2_STATE_NEW</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_set_inode_flags\">ext2_set_inode_flags</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_next_gen_lock\">s_next_gen_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_generation\">i_generation</a> = <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_next_generation\">s_next_generation</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_next_gen_lock\">s_next_gen_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#insert_inode_locked\">insert_inode_locked</a>(<a class=\"id\" href=\"#inode\">inode</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_drop\">fail_drop</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dquot_initialize\">dquot_initialize</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#dquot_alloc_inode\">dquot_alloc_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_drop\">fail_drop</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext2_init_acl\">ext2_init_acl</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_free_drop\">fail_free_drop</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext2_init_security\">ext2_init_security</a>(<a class=\"id\" href=\"#inode\">inode</a>,<a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_free_drop\">fail_free_drop</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_debug\">ext2_debug</a>(\"allocating inode %lu\\n\", <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_preread_inode\">ext2_preread_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<a class=\"id\" href=\"#fail_free_drop\">fail_free_drop</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dquot_free_inode\">dquot_free_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<a class=\"id\" href=\"#fail_drop\">fail_drop</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dquot_drop\">dquot_drop</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> |= <a class=\"id\" href=\"#S_NOQUOTA\">S_NOQUOTA</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_new_inode\">unlock_new_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#make_bad_inode\">make_bad_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#ext2_count_free_inodes\">ext2_count_free_inodes</a> (struct <a class=\"id\" href=\"#super_block\">super_block</a> * <a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_group_desc\">ext2_group_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#desc_count\">desc_count</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;<span class=\"ts\"/>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#EXT2FS_DEBUG\">EXT2FS_DEBUG</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_super_block\">ext2_super_block</a> *<a class=\"id\" href=\"#es\">es</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bitmap_count\">bitmap_count</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#es\">es</a> = <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_es\">s_es</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_groups_count\">s_groups_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#x\">x</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a> (<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc_count\">desc_count</a> += <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_inodes_count\">bg_free_inodes_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#read_inode_bitmap\">read_inode_bitmap</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#ext2_count_free\">ext2_count_free</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, <a class=\"id\" href=\"#EXT2_INODES_PER_GROUP\">EXT2_INODES_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>) / 8);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"group %d: stored = %d, counted = %u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_inodes_count\">bg_free_inodes_count</a>), <a class=\"id\" href=\"#x\">x</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_count\">bitmap_count</a> += <a class=\"id\" href=\"#x\">x</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"ext2_count_free_inodes: stored = %lu, computed = %lu, %lu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_read\">percpu_counter_read</a>(&amp;<a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_freeinodes_counter\">s_freeinodes_counter</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc_count\">desc_count</a>, <a class=\"id\" href=\"#bitmap_count\">bitmap_count</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#desc_count\">desc_count</a>;", 
"#else", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_groups_count\">s_groups_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a> (<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc_count\">desc_count</a> += <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_inodes_count\">bg_free_inodes_count</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#desc_count\">desc_count</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/* Called at mount-time, super-block is locked */</span>", 
"unsigned long <a class=\"id\" href=\"#ext2_count_dirs\">ext2_count_dirs</a> (struct <a class=\"id\" href=\"#super_block\">super_block</a> * <a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_groups_count\">s_groups_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_group_desc\">ext2_group_desc</a> *<a class=\"id\" href=\"#gdp\">gdp</a> = <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a> (<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#gdp\">gdp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_used_dirs_count\">bg_used_dirs_count</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
];
xr_frag_insert('l/45/f9ae967b532fd67176423c05dfcc2ed979096e.xr', __xr_tmp);
