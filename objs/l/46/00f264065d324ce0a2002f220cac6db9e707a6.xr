var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_ATMSVC_H\">_LINUX_ATMSVC_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_ATMSVC_H\">_LINUX_ATMSVC_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#atmapi\">atmapi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#atm\">atm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#atmioc\">atmioc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATMSIGD_CTRL\">ATMSIGD_CTRL</a> <a class=\"id\" href=\"#_IO\">_IO</a>('a',<a class=\"id\" href=\"#ATMIOC_SPECIAL\">ATMIOC_SPECIAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* become ATM signaling demon control socket */</span>", 
"", 
"enum <a class=\"id\" href=\"#atmsvc_msg_type\">atmsvc_msg_type</a> { <a class=\"id\" href=\"#as_catch_null\">as_catch_null</a>, <a class=\"id\" href=\"#as_bind\">as_bind</a>, <a class=\"id\" href=\"#as_connect\">as_connect</a>, <a class=\"id\" href=\"#as_accept\">as_accept</a>, <a class=\"id\" href=\"#as_reject\">as_reject</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#as_listen\">as_listen</a>, <a class=\"id\" href=\"#as_okay\">as_okay</a>, <a class=\"id\" href=\"#as_error\">as_error</a>, <a class=\"id\" href=\"#as_indicate\">as_indicate</a>, <a class=\"id\" href=\"#as_close\">as_close</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#as_itf_notify\">as_itf_notify</a>, <a class=\"id\" href=\"#as_modify\">as_modify</a>, <a class=\"id\" href=\"#as_identify\">as_identify</a>, <a class=\"id\" href=\"#as_terminate\">as_terminate</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#as_addparty\">as_addparty</a>, <a class=\"id\" href=\"#as_dropparty\">as_dropparty</a> };", 
"", 
"struct <a class=\"id\" href=\"#atmsvc_msg\">atmsvc_msg</a> {", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#atmsvc_msg_type\">atmsvc_msg_type</a> <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atm_kptr_t\">atm_kptr_t</a> <a class=\"id\" href=\"#vcc\">vcc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atm_kptr_t\">atm_kptr_t</a> <a class=\"id\" href=\"#listen_vcc\">listen_vcc</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* indicate */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#reply\">reply</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for okay and close:<span class=\"ts\"/><span class=\"ts\"/>   */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*   &lt; 0: error before active<span class=\"ts\"/>   */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*        (sigd has discarded ctx) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*   ==0: success<span class=\"ts\"/><span class=\"ts\"/>   */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>        <span class=\"comment\">/*   &gt; 0: error when active (still */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*        need to close)<span class=\"ts\"/>   */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sockaddr_atmpvc\">sockaddr_atmpvc</a> <a class=\"id\" href=\"#pvc\">pvc</a>;<span class=\"ts\"/><span class=\"comment\">/* indicate, okay (connect) */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sockaddr_atmsvc\">sockaddr_atmsvc</a> <a class=\"id\" href=\"#local\">local</a>;<span class=\"ts\"/><span class=\"comment\">/* local SVC address */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#atm_qos\">atm_qos</a> <a class=\"id\" href=\"#qos\">qos</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* QOS parameters */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#atm_sap\">atm_sap</a> <a class=\"id\" href=\"#sap\">sap</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SAP */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#session\">session</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for p2pm */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sockaddr_atmsvc\">sockaddr_atmsvc</a> <a class=\"id\" href=\"#svc\">svc</a>;<span class=\"ts\"/><span class=\"comment\">/* SVC address */</span>", 
"} <a class=\"id\" href=\"#__ATM_API_ALIGN\">__ATM_API_ALIGN</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Message contents: see ftp://icaftp.epfl.ch/pub/linux/atm/docs/isp-*.tar.gz</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some policy stuff for atmsigd and for net/atm/svc.c. Both have to agree on</span>", 
"<span class=\"comment\"> * what PCR is used to request bandwidth from the device driver. net/atm/svc.c</span>", 
"<span class=\"comment\"> * tries to do better than that, but only if there's no routing decision (i.e.</span>", 
"<span class=\"comment\"> * if signaling only uses one ATM interface).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SELECT_TOP_PCR\">SELECT_TOP_PCR</a>(<a class=\"id\" href=\"#tp\">tp</a>) ((<a class=\"id\" href=\"#tp\">tp</a>).<a class=\"id\" href=\"#pcr\">pcr</a> ? (<a class=\"id\" href=\"#tp\">tp</a>).<a class=\"id\" href=\"#pcr\">pcr</a> : \\", 
"  (<a class=\"id\" href=\"#tp\">tp</a>).<a class=\"id\" href=\"#max_pcr\">max_pcr</a> && (<a class=\"id\" href=\"#tp\">tp</a>).<a class=\"id\" href=\"#max_pcr\">max_pcr</a> != <a class=\"id\" href=\"#ATM_MAX_PCR\">ATM_MAX_PCR</a> ? (<a class=\"id\" href=\"#tp\">tp</a>).<a class=\"id\" href=\"#max_pcr\">max_pcr</a> : \\", 
"  (<a class=\"id\" href=\"#tp\">tp</a>).<a class=\"id\" href=\"#min_pcr\">min_pcr</a> ? (<a class=\"id\" href=\"#tp\">tp</a>).<a class=\"id\" href=\"#min_pcr\">min_pcr</a> : <a class=\"id\" href=\"#ATM_MAX_PCR\">ATM_MAX_PCR</a>)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/46/00f264065d324ce0a2002f220cac6db9e707a6.xr', __xr_tmp);
