var __xr_tmp = [
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe_ctlblk\">kprobe_ctlblk</a> *<a class=\"id\" href=\"#kcb\">kcb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = (<a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *)(<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> - sizeof(<a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a>));", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We don't want to be preempted for the entire</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * duration of kprobe processing. We conditionally</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * re-enable preemption at the end of this function,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and also in reenter_kprobe() and setup_singlestep().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kcb\">kcb</a> = <a class=\"id\" href=\"#get_kprobe_ctlblk\">get_kprobe_ctlblk</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#get_kprobe\">get_kprobe</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kprobe_running\">kprobe_running</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reenter_kprobe\">reenter_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#kcb\">kcb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_kprobe\">set_current_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#kcb\">kcb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_status\">kprobe_status</a> = <a class=\"id\" href=\"#KPROBE_HIT_ACTIVE\">KPROBE_HIT_ACTIVE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If we have no pre-handler or it returned 0, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * continue with normal processing.  If we have a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * pre-handler and it returned non-zero, it prepped</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * for calling the break_handler below on re-entry</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * for jprobe processing, so get out doing nothing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * more here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pre_handler\">pre_handler</a> || !<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pre_handler\">pre_handler</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_singlestep\">setup_singlestep</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#kcb\">kcb</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (*<a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#BREAKPOINT_INSTRUCTION\">BREAKPOINT_INSTRUCTION</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The breakpoint instruction was removed right</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * after we hit it.  Another cpu has removed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * either a probepoint or a debugger breakpoint</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * at this address.  In either case, no further</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * handling of this interrupt is appropriate.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Back up over the (now missing) int3 and run</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the original instruction.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> = (unsigned long)<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_no_resched\">preempt_enable_no_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#kprobe_running\">kprobe_running</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#current_kprobe\">current_kprobe</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#break_handler\">break_handler</a> && <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#break_handler\">break_handler</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#regs\">regs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_singlestep\">setup_singlestep</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#kcb\">kcb</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} <span class=\"comment\">/* else: not a kprobe fault; let the kernel handle it */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_no_resched\">preempt_enable_no_resched</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SAVE_REGS_STRING\">SAVE_REGS_STRING</a><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"comment\">/* Skip cs, ip, orig_ax. */</span><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" subq $24, %rsp\\n\"<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushq %rdi\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushq %rsi\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushq %rdx\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushq %rcx\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushq %rax\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushq %r8\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushq %r9\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushq %r10\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushq %r11\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushq %rbx\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushq %rbp\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushq %r12\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushq %r13\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushq %r14\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushq %r15\\n\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RESTORE_REGS_STRING\">RESTORE_REGS_STRING</a><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popq %r15\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popq %r14\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popq %r13\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popq %r12\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popq %rbp\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popq %rbx\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popq %r11\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popq %r10\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popq %r9\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popq %r8\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popq %rax\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popq %rcx\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popq %rdx\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popq %rsi\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popq %rdi\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"comment\">/* Skip orig_ax, ip, cs */</span><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" addq $24, %rsp\\n\"", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SAVE_REGS_STRING\">SAVE_REGS_STRING</a><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"comment\">/* Skip cs, ip, orig_ax and gs. */</span><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" subl $16, %esp\\n\"<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushl %fs\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushl %es\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushl %ds\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushl %eax\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushl %ebp\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushl %edi\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushl %esi\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushl %edx\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushl %ecx\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" pushl %ebx\\n\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RESTORE_REGS_STRING\">RESTORE_REGS_STRING</a><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popl %ebx\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popl %ecx\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popl %edx\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popl %esi\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popl %edi\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popl %ebp\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\" popl %eax\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"comment\">/* Skip ds, es, fs, gs, orig_ax, and ip. Note: don't pop cs here*/</span>\\", 
"<span class=\"ts\"/>\" addl $24, %esp\\n\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When a retprobed function returns, this code saves registers and</span>", 
"<span class=\"comment\"> * calls trampoline_handler() runs, which calls the kretprobe's handler.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__used\">__used</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#kretprobe_trampoline_holder\">kretprobe_trampoline_holder</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile (", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\".global kretprobe_trampoline\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"kretprobe_trampoline: \\n\"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We don't bother saving the ss register */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" pushq %rsp\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" pushfq\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SAVE_REGS_STRING\">SAVE_REGS_STRING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" movq %rsp, %rdi\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" call trampoline_handler\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Replace saved sp with true return address. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" movq %rax, 152(%rsp)\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RESTORE_REGS_STRING\">RESTORE_REGS_STRING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" popfq\\n\"", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" pushf\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SAVE_REGS_STRING\">SAVE_REGS_STRING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" movl %esp, %eax\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" call trampoline_handler\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Move flags to cs */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" movl 56(%esp), %edx\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" movl %edx, 52(%esp)\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Replace saved flags with true return address. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" movl %eax, 56(%esp)\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RESTORE_REGS_STRING\">RESTORE_REGS_STRING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" popf\\n\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" ret\\n\");", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called from kretprobe_trampoline</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__used\">__used</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void *<a class=\"id\" href=\"#trampoline_handler\">trampoline_handler</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kretprobe_instance\">kretprobe_instance</a> *<a class=\"id\" href=\"#ri\">ri</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#empty_rp\">empty_rp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#orig_ret_address\">orig_ret_address</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#trampoline_address\">trampoline_address</a> = (unsigned long)&amp;<a class=\"id\" href=\"#kretprobe_trampoline\">kretprobe_trampoline</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *<a class=\"id\" href=\"#correct_ret_addr\">correct_ret_addr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#empty_rp\">empty_rp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kretprobe_hash_lock\">kretprobe_hash_lock</a>(<a class=\"id\" href=\"#current\">current</a>, &amp;<a class=\"id\" href=\"#head\">head</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* fixup registers */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#__KERNEL_CS\">__KERNEL_CS</a>;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#__KERNEL_CS\">__KERNEL_CS</a> | <a class=\"id\" href=\"#get_kernel_rpl\">get_kernel_rpl</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#gs\">gs</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#trampoline_address\">trampoline_address</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#orig_ax\">orig_ax</a> = ~0UL;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is possible to have multiple instances associated with a given</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * task either because multiple functions in the call path have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * return probes installed on them, and/or more than one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * return probe was registered for a target function.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can handle this because:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     - instances are always pushed into the head of the list</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     - when multiple return probes are registered for the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/> function, the (chronologically) first instance's ret_addr</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/> will be the real return address, and all the rest will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/> point to kretprobe_trampoline.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_safe\">hlist_for_each_entry_safe</a>(<a class=\"id\" href=\"#ri\">ri</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#hlist\">hlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#task\">task</a> != <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* another task is sharing our hash bucket */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#orig_ret_address\">orig_ret_address</a> = (unsigned long)<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#ret_addr\">ret_addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#orig_ret_address\">orig_ret_address</a> != <a class=\"id\" href=\"#trampoline_address\">trampoline_address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This is the real return address. Any other</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * instances associated with this task are for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * other calls deeper on the call stack</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kretprobe_assert\">kretprobe_assert</a>(<a class=\"id\" href=\"#ri\">ri</a>, <a class=\"id\" href=\"#orig_ret_address\">orig_ret_address</a>, <a class=\"id\" href=\"#trampoline_address\">trampoline_address</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#correct_ret_addr\">correct_ret_addr</a> = <a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#ret_addr\">ret_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_safe\">hlist_for_each_entry_safe</a>(<a class=\"id\" href=\"#ri\">ri</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#hlist\">hlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#task\">task</a> != <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* another task is sharing our hash bucket */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#orig_ret_address\">orig_ret_address</a> = (unsigned long)<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#ret_addr\">ret_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#rp\">rp</a> && <a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#handler\">handler</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#current_kprobe\">current_kprobe</a>) = &amp;<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#kp\">kp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_kprobe_ctlblk\">get_kprobe_ctlblk</a>()-><a class=\"id\" href=\"#kprobe_status\">kprobe_status</a> = <a class=\"id\" href=\"#KPROBE_HIT_ACTIVE\">KPROBE_HIT_ACTIVE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#ret_addr\">ret_addr</a> = <a class=\"id\" href=\"#correct_ret_addr\">correct_ret_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#handler\">handler</a>(<a class=\"id\" href=\"#ri\">ri</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#current_kprobe\">current_kprobe</a>) = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#recycle_rp_inst\">recycle_rp_inst</a>(<a class=\"id\" href=\"#ri\">ri</a>, &amp;<a class=\"id\" href=\"#empty_rp\">empty_rp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#orig_ret_address\">orig_ret_address</a> != <a class=\"id\" href=\"#trampoline_address\">trampoline_address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This is the real return address. Any other</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * instances associated with this task are for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * other calls deeper on the call stack</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kretprobe_hash_unlock\">kretprobe_hash_unlock</a>(<a class=\"id\" href=\"#current\">current</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_safe\">hlist_for_each_entry_safe</a>(<a class=\"id\" href=\"#ri\">ri</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#empty_rp\">empty_rp</a>, <a class=\"id\" href=\"#hlist\">hlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del\">hlist_del</a>(&amp;<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ri\">ri</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return (void *)<a class=\"id\" href=\"#orig_ret_address\">orig_ret_address</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called after single-stepping.  p-&gt;addr is the address of the</span>", 
"<span class=\"comment\"> * instruction whose first byte has been replaced by the \"int 3\"</span>", 
"<span class=\"comment\"> * instruction.  To avoid the SMP problems that can occur when we</span>", 
"<span class=\"comment\"> * temporarily put back the original opcode to single-step, we</span>", 
"<span class=\"comment\"> * single-stepped a copy of the instruction.  The address of this</span>", 
"<span class=\"comment\"> * copy is p-&gt;ainsn.insn.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function prepares to return from the post-single-step</span>", 
"<span class=\"comment\"> * interrupt.  We have to fix up the stack as follows:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 0) Except in the case of absolute or indirect jump or call instructions,</span>", 
"<span class=\"comment\"> * the new ip is relative to the copied instruction.  We need to make</span>", 
"<span class=\"comment\"> * it relative to the original instruction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1) If the single-stepped instruction was pushfl, then the TF and IF</span>", 
"<span class=\"comment\"> * flags are set in the just-pushed flags, and may need to be cleared.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 2) If the single-stepped instruction was a call, the return address</span>", 
"<span class=\"comment\"> * that is atop the stack is the address following the copied instruction.</span>", 
"<span class=\"comment\"> * We need to make it the address following the original instruction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If this is the first time we've single-stepped the instruction at</span>", 
"<span class=\"comment\"> * this probepoint, and the instruction is boostable, boost it: add a</span>", 
"<span class=\"comment\"> * jump instruction after the copied instruction, that jumps to the next</span>", 
"<span class=\"comment\"> * instruction after the probepoint.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#resume_execution\">resume_execution</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, struct <a class=\"id\" href=\"#kprobe_ctlblk\">kprobe_ctlblk</a> *<a class=\"id\" href=\"#kcb\">kcb</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#tos\">tos</a> = <a class=\"id\" href=\"#stack_addr\">stack_addr</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#copy_ip\">copy_ip</a> = (unsigned long)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>.<a class=\"id\" href=\"#insn\">insn</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#orig_ip\">orig_ip</a> = (unsigned long)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *<a class=\"id\" href=\"#insn\">insn</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>.<a class=\"id\" href=\"#insn\">insn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Skip prefixes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a> = <a class=\"id\" href=\"#skip_prefixes\">skip_prefixes</a>(<a class=\"id\" href=\"#insn\">insn</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a>;", 
"<span class=\"ts\"/>switch (*<a class=\"id\" href=\"#insn\">insn</a>) {", 
"<span class=\"ts\"/>case 0x9c:<span class=\"ts\"/><span class=\"comment\">/* pushfl */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tos\">tos</a> &= ~(<a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a> | <a class=\"id\" href=\"#X86_EFLAGS_IF\">X86_EFLAGS_IF</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tos\">tos</a> |= <a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_old_flags\">kprobe_old_flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 0xc2:<span class=\"ts\"/><span class=\"comment\">/* iret/ret/lret */</span>", 
"<span class=\"ts\"/>case 0xc3:", 
"<span class=\"ts\"/>case 0xca:", 
"<span class=\"ts\"/>case 0xcb:", 
"<span class=\"ts\"/>case 0xcf:", 
"<span class=\"ts\"/>case 0xea:<span class=\"ts\"/><span class=\"comment\">/* jmp absolute -- ip is correct */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ip is already adjusted, no more changes required */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>.<a class=\"id\" href=\"#boostable\">boostable</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_change\">no_change</a>;", 
"<span class=\"ts\"/>case 0xe8:<span class=\"ts\"/><span class=\"comment\">/* call relative - Fix return addr */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tos\">tos</a> = <a class=\"id\" href=\"#orig_ip\">orig_ip</a> + (*<a class=\"id\" href=\"#tos\">tos</a> - <a class=\"id\" href=\"#copy_ip\">copy_ip</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>case 0x9a:<span class=\"ts\"/><span class=\"comment\">/* call absolute -- same as call absolute, indirect */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tos\">tos</a> = <a class=\"id\" href=\"#orig_ip\">orig_ip</a> + (*<a class=\"id\" href=\"#tos\">tos</a> - <a class=\"id\" href=\"#copy_ip\">copy_ip</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_change\">no_change</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>case 0xff:", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#insn\">insn</a>[1] &amp; 0x30) == 0x10) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * call absolute, indirect</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Fix return addr; ip is correct.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * But this is not boostable</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tos\">tos</a> = <a class=\"id\" href=\"#orig_ip\">orig_ip</a> + (*<a class=\"id\" href=\"#tos\">tos</a> - <a class=\"id\" href=\"#copy_ip\">copy_ip</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_change\">no_change</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (((<a class=\"id\" href=\"#insn\">insn</a>[1] &amp; 0x31) == 0x20) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   ((<a class=\"id\" href=\"#insn\">insn</a>[1] &amp; 0x31) == 0x21)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * jmp near and far, absolute indirect</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ip is correct. And this is boostable</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>.<a class=\"id\" href=\"#boostable\">boostable</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_change\">no_change</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>.<a class=\"id\" href=\"#boostable\">boostable</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> &gt; <a class=\"id\" href=\"#copy_ip\">copy_ip</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> - <a class=\"id\" href=\"#copy_ip\">copy_ip</a>) + 5 &lt; <a class=\"id\" href=\"#MAX_INSN_SIZE\">MAX_INSN_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * These instructions can be executed directly if it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * jumps back to correct address.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#synthesize_reljump\">synthesize_reljump</a>((void *)<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(void *)<a class=\"id\" href=\"#orig_ip\">orig_ip</a> + (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> - <a class=\"id\" href=\"#copy_ip\">copy_ip</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>.<a class=\"id\" href=\"#boostable\">boostable</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>.<a class=\"id\" href=\"#boostable\">boostable</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> += <a class=\"id\" href=\"#orig_ip\">orig_ip</a> - <a class=\"id\" href=\"#copy_ip\">copy_ip</a>;", 
"", 
"<a class=\"id\" href=\"#no_change\">no_change</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#restore_btf\">restore_btf</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Interrupts are disabled on entry as trap1 is an interrupt gate and they</span>", 
"<span class=\"comment\"> * remain disabled throughout this function.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#post_kprobe_handler\">post_kprobe_handler</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#kprobe_running\">kprobe_running</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe_ctlblk\">kprobe_ctlblk</a> *<a class=\"id\" href=\"#kcb\">kcb</a> = <a class=\"id\" href=\"#get_kprobe_ctlblk\">get_kprobe_ctlblk</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cur\">cur</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resume_execution\">resume_execution</a>(<a class=\"id\" href=\"#cur\">cur</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#kcb\">kcb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_saved_flags\">kprobe_saved_flags</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_status\">kprobe_status</a> != <a class=\"id\" href=\"#KPROBE_REENTER\">KPROBE_REENTER</a>) && <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#post_handler\">post_handler</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_status\">kprobe_status</a> = <a class=\"id\" href=\"#KPROBE_HIT_SSDONE\">KPROBE_HIT_SSDONE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#post_handler\">post_handler</a>(<a class=\"id\" href=\"#cur\">cur</a>, <a class=\"id\" href=\"#regs\">regs</a>, 0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Restore back the original saved kprobes variables and continue. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_status\">kprobe_status</a> == <a class=\"id\" href=\"#KPROBE_REENTER\">KPROBE_REENTER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restore_previous_kprobe\">restore_previous_kprobe</a>(<a class=\"id\" href=\"#kcb\">kcb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reset_current_kprobe\">reset_current_kprobe</a>();", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_no_resched\">preempt_enable_no_resched</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if somebody else is singlestepping across a probe point, flags</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will have TF set, in which case, continue the remaining processing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of do_debug, as if this is not a probe hit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
];
xr_frag_insert('l/46/0a7714770922c52e632194d5e2c1565f88bf44.xr', __xr_tmp);
