var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  inode.c - securityfs</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2005 Greg Kroah-Hartman &lt;gregkh@suse.de&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>modify it under the terms of the GNU General Public License version</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2 as published by the Free Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Based on fs/debugfs/inode.c which had the following copyright notice:</span>", 
"<span class=\"comment\"> *    Copyright (C) 2004 Greg Kroah-Hartman &lt;greg@kroah.com&gt;</span>", 
"<span class=\"comment\"> *    Copyright (C) 2004 IBM Inc.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* #define DEBUG */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#namei\">namei</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#magic\">magic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mount\">mount</a>;", 
"static int <a class=\"id\" href=\"#mount_count\">mount_count</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * TODO:</span>", 
"<span class=\"comment\"> *   I think I can get rid of these default_file_ops, but not quite sure...</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#default_read_file\">default_read_file</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#default_write_file\">default_write_file</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#default_open\">default_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_private\">i_private</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_private\">i_private</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#default_file_ops\">default_file_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> =<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#default_read_file\">default_read_file</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a> =<span class=\"ts\"/><a class=\"id\" href=\"#default_write_file\">default_write_file</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> =<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#default_open\">default_open</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#get_inode\">get_inode</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#new_inode\">new_inode</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> = <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_atime\">i_atime</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mtime\">i_mtime</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a> = <a class=\"id\" href=\"#CURRENT_TIME\">CURRENT_TIME</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IFMT\">S_IFMT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_special_inode\">init_special_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#S_IFREG\">S_IFREG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = &amp;<a class=\"id\" href=\"#default_file_ops\">default_file_ops</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#S_IFDIR\">S_IFDIR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a> = &amp;<a class=\"id\" href=\"#simple_dir_inode_operations\">simple_dir_inode_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = &amp;<a class=\"id\" href=\"#simple_dir_operations\">simple_dir_operations</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* directory inodes start off with i_nlink == 2 (for \".\" entry) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc_nlink\">inc_nlink</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>;", 
"}", 
"", 
"<span class=\"comment\">/* SMP-safe */</span>", 
"static int <a class=\"id\" href=\"#mknod\">mknod</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#get_inode\">get_inode</a>(<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d_instantiate\">d_instantiate</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mkdir\">mkdir</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, int <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = (<a class=\"id\" href=\"#mode\">mode</a> &amp; (<a class=\"id\" href=\"#S_IRWXUGO\">S_IRWXUGO</a> | <a class=\"id\" href=\"#S_ISVTX\">S_ISVTX</a>)) | <a class=\"id\" href=\"#S_IFDIR\">S_IFDIR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#mknod\">mknod</a>(<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#mode\">mode</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc_nlink\">inc_nlink</a>(<a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#create\">create</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, int <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = (<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IALLUGO\">S_IALLUGO</a>) | <a class=\"id\" href=\"#S_IFREG\">S_IFREG</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mknod\">mknod</a>(<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#mode\">mode</a>, 0);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#positive\">positive</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a> && !<a class=\"id\" href=\"#d_unhashed\">d_unhashed</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#fill_super\">fill_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, void *<a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#silent\">silent</a>)", 
"{", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#tree_descr\">tree_descr</a> <a class=\"id\" href=\"#files\">files</a>[] = {{\"\"}};", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#simple_fill_super\">simple_fill_super</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#SECURITYFS_MAGIC\">SECURITYFS_MAGIC</a>, <a class=\"id\" href=\"#files\">files</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#get_sb\">get_sb</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs_type\">fs_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#flags\">flags</a>, const char *<a class=\"id\" href=\"#dev_name\">dev_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#data\">data</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#get_sb_single\">get_sb_single</a>(<a class=\"id\" href=\"#fs_type\">fs_type</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#fill_super\">fill_super</a>, <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> <a class=\"id\" href=\"#fs_type\">fs_type</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a> =<span class=\"ts\"/><a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> =<span class=\"ts\"/><span class=\"ts\"/>\"securityfs\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_sb\">get_sb</a> =<span class=\"ts\"/><a class=\"id\" href=\"#get_sb\">get_sb</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#kill_sb\">kill_sb</a> =<span class=\"ts\"/><a class=\"id\" href=\"#kill_litter_super\">kill_litter_super</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#create_by_name\">create_by_name</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#dentry\">dentry</a> **<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the parent is not specified, we create it in the root.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need the root dentry to do this, which is in the super</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * block. A pointer to that is in the struct vfsmount that we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have around.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#mount\">mount</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#lookup_one_len\">lookup_one_len</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#name\">name</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(*<a class=\"id\" href=\"#dentry\">dentry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IFMT\">S_IFMT</a>) == <a class=\"id\" href=\"#S_IFDIR\">S_IFDIR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#mkdir\">mkdir</a>(<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, *<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#create\">create</a>(<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, *<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(*<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(*<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * securityfs_create_file - create a file in the securityfs filesystem</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @name: a pointer to a string containing the name of the file to create.</span>", 
"<span class=\"comment\"> * @mode: the permission that the file should have</span>", 
"<span class=\"comment\"> * @parent: a pointer to the parent dentry for this file.  This should be a</span>", 
"<span class=\"comment\"> *          directory dentry if set.  If this parameter is %NULL, then the</span>", 
"<span class=\"comment\"> *          file will be created in the root of the securityfs filesystem.</span>", 
"<span class=\"comment\"> * @data: a pointer to something that the caller will want to get to later</span>", 
"<span class=\"comment\"> *        on.  The inode.i_private pointer will point to this value on</span>", 
"<span class=\"comment\"> *        the open() call.</span>", 
"<span class=\"comment\"> * @fops: a pointer to a struct file_operations that should be used for</span>", 
"<span class=\"comment\"> *        this file.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the basic \"create a file\" function for securityfs.  It allows for a</span>", 
"<span class=\"comment\"> * wide range of flexibility in creating a file, or a directory (if you</span>", 
"<span class=\"comment\"> * want to create a directory, the securityfs_create_dir() function is</span>", 
"<span class=\"comment\"> * recommended to be used instead).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function returns a pointer to a dentry if it succeeds.  This</span>", 
"<span class=\"comment\"> * pointer must be passed to the securityfs_remove() function when the file is</span>", 
"<span class=\"comment\"> * to be removed (no automatic cleanup happens if your module is unloaded,</span>", 
"<span class=\"comment\"> * you are responsible here).  If an error occurs, the function will return</span>", 
"<span class=\"comment\"> * the erorr value (via ERR_PTR).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If securityfs is not enabled in the kernel, the value %-ENODEV is</span>", 
"<span class=\"comment\"> * returned.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#securityfs_create_file\">securityfs_create_file</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#fops\">fops</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"securityfs: creating file '%s'\\n\",<a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#simple_pin_fs\">simple_pin_fs</a>(&amp;<a class=\"id\" href=\"#fs_type\">fs_type</a>, &amp;<a class=\"id\" href=\"#mount\">mount</a>, &amp;<a class=\"id\" href=\"#mount_count\">mount_count</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#create_by_name\">create_by_name</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#parent\">parent</a>, &amp;<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#simple_release_fs\">simple_release_fs</a>(&amp;<a class=\"id\" href=\"#mount\">mount</a>, &amp;<a class=\"id\" href=\"#mount_count\">mount_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fops\">fops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = <a class=\"id\" href=\"#fops\">fops</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_private\">i_private</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#exit\">exit</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#securityfs_create_file\">securityfs_create_file</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * securityfs_create_dir - create a directory in the securityfs filesystem</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @name: a pointer to a string containing the name of the directory to</span>", 
"<span class=\"comment\"> *        create.</span>", 
"<span class=\"comment\"> * @parent: a pointer to the parent dentry for this file.  This should be a</span>", 
"<span class=\"comment\"> *          directory dentry if set.  If this parameter is %NULL, then the</span>", 
"<span class=\"comment\"> *          directory will be created in the root of the securityfs filesystem.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function creates a directory in securityfs with the given @name.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function returns a pointer to a dentry if it succeeds.  This</span>", 
"<span class=\"comment\"> * pointer must be passed to the securityfs_remove() function when the file is</span>", 
"<span class=\"comment\"> * to be removed (no automatic cleanup happens if your module is unloaded,</span>", 
"<span class=\"comment\"> * you are responsible here).  If an error occurs, %NULL will be returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If securityfs is not enabled in the kernel, the value %-ENODEV is</span>", 
"<span class=\"comment\"> * returned.  It is not wise to check for this value, but rather, check for</span>", 
"<span class=\"comment\"> * %NULL or !%NULL instead as to eliminate the need for #ifdef in the calling</span>", 
"<span class=\"comment\"> * code.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#securityfs_create_dir\">securityfs_create_dir</a>(const char *<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#securityfs_create_file\">securityfs_create_file</a>(<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#S_IFDIR\">S_IFDIR</a> | <a class=\"id\" href=\"#S_IRWXU\">S_IRWXU</a> | <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a> | <a class=\"id\" href=\"#S_IXUGO\">S_IXUGO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#securityfs_create_dir\">securityfs_create_dir</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * securityfs_remove - removes a file or directory from the securityfs filesystem</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @dentry: a pointer to a the dentry of the file or directory to be removed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function removes a file or directory in securityfs that was previously</span>", 
"<span class=\"comment\"> * created with a call to another securityfs function (like</span>", 
"<span class=\"comment\"> * securityfs_create_file() or variants thereof.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is required to be called in order for the file to be</span>", 
"<span class=\"comment\"> * removed. No automatic cleanup of files will happen when a module is</span>", 
"<span class=\"comment\"> * removed; you are responsible here.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#securityfs_remove\">securityfs_remove</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dentry\">dentry</a> || <a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parent\">parent</a> || !<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#positive\">positive</a>(<a class=\"id\" href=\"#dentry\">dentry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#simple_rmdir\">simple_rmdir</a>(<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#simple_unlink\">simple_unlink</a>(<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#simple_release_fs\">simple_release_fs</a>(&amp;<a class=\"id\" href=\"#mount\">mount</a>, &amp;<a class=\"id\" href=\"#mount_count\">mount_count</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#securityfs_remove\">securityfs_remove</a>);", 
"", 
"static struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#security_kobj\">security_kobj</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#securityfs_init\">securityfs_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#security_kobj\">security_kobj</a> = <a class=\"id\" href=\"#kobject_create_and_add\">kobject_create_and_add</a>(\"security\", <a class=\"id\" href=\"#kernel_kobj\">kernel_kobj</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#security_kobj\">security_kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#register_filesystem\">register_filesystem</a>(&amp;<a class=\"id\" href=\"#fs_type\">fs_type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#security_kobj\">security_kobj</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#core_initcall\">core_initcall</a>(<a class=\"id\" href=\"#securityfs_init\">securityfs_init</a>);", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
"", 
];
xr_frag_insert('l/46/5a4a0a995dc9854c4658a6db04bb1e962625d7.xr', __xr_tmp);
