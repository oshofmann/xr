var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2007 Alan Stern</span>", 
"<span class=\"comment\"> * Copyright (C) IBM Corporation, 2009</span>", 
"<span class=\"comment\"> * Copyright (C) 2009, Frederic Weisbecker &lt;fweisbec@gmail.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Thanks to Ingo Molnar for his many suggestions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors: Alan Stern &lt;stern@rowland.harvard.edu&gt;</span>", 
"<span class=\"comment\"> *          K.Prasad &lt;prasad@linux.vnet.ibm.com&gt;</span>", 
"<span class=\"comment\"> *          Frederic Weisbecker &lt;fweisbec@gmail.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * HW_breakpoint: a unified kernel/user-space hardware breakpoint facility,</span>", 
"<span class=\"comment\"> * using the CPU's debug registers.</span>", 
"<span class=\"comment\"> * This file contains the arch-independent routines.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#irqflags\">irqflags</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kprobes\">kprobes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdebug\">kdebug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hw_breakpoint\">hw_breakpoint</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Constraints data</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Number of pinned cpu breakpoints in a cpu */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(unsigned int, <a class=\"id\" href=\"#nr_cpu_bp_pinned\">nr_cpu_bp_pinned</a>[<a class=\"id\" href=\"#TYPE_MAX\">TYPE_MAX</a>]);", 
"", 
"<span class=\"comment\">/* Number of pinned task breakpoints in a cpu */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(unsigned int *, <a class=\"id\" href=\"#nr_task_bp_pinned\">nr_task_bp_pinned</a>[<a class=\"id\" href=\"#TYPE_MAX\">TYPE_MAX</a>]);", 
"", 
"<span class=\"comment\">/* Number of non-pinned cpu/task breakpoints in a cpu */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(unsigned int, <a class=\"id\" href=\"#nr_bp_flexible\">nr_bp_flexible</a>[<a class=\"id\" href=\"#TYPE_MAX\">TYPE_MAX</a>]);", 
"", 
"static int <a class=\"id\" href=\"#nr_slots\">nr_slots</a>[<a class=\"id\" href=\"#TYPE_MAX\">TYPE_MAX</a>];", 
"", 
"<span class=\"comment\">/* Keep track of the breakpoints attached to tasks */</span>", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#bp_task_head\">bp_task_head</a>);", 
"", 
"static int <a class=\"id\" href=\"#constraints_initialized\">constraints_initialized</a>;", 
"", 
"<span class=\"comment\">/* Gather the number of total pinned and un-pinned bp in a cpuset */</span>", 
"struct <a class=\"id\" href=\"#bp_busy_slots\">bp_busy_slots</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#pinned\">pinned</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flexible\">flexible</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Serialize accesses to the above constraints */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#nr_bp_mutex\">nr_bp_mutex</a>);", 
"", 
"<a class=\"id\" href=\"#__weak\">__weak</a> int <a class=\"id\" href=\"#hw_breakpoint_weight\">hw_breakpoint_weight</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> enum <a class=\"id\" href=\"#bp_type_idx\">bp_type_idx</a> <a class=\"id\" href=\"#find_slot_idx\">find_slot_idx</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_type\">bp_type</a> &amp; <a class=\"id\" href=\"#HW_BREAKPOINT_RW\">HW_BREAKPOINT_RW</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TYPE_DATA\">TYPE_DATA</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#TYPE_INST\">TYPE_INST</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Report the maximum number of pinned breakpoints a task</span>", 
"<span class=\"comment\"> * have in this cpu</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#max_task_bp_pinned\">max_task_bp_pinned</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, enum <a class=\"id\" href=\"#bp_type_idx\">bp_type_idx</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned int *<a class=\"id\" href=\"#tsk_pinned\">tsk_pinned</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#nr_task_bp_pinned\">nr_task_bp_pinned</a>[<a class=\"id\" href=\"#type\">type</a>], <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#nr_slots\">nr_slots</a>[<a class=\"id\" href=\"#type\">type</a>] - 1; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk_pinned\">tsk_pinned</a>[<a class=\"id\" href=\"#i\">i</a>] &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a> + 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Count the number of breakpoints of the same type and same task.</span>", 
"<span class=\"comment\"> * The given event must be not on the list.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#task_bp_pinned\">task_bp_pinned</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>, enum <a class=\"id\" href=\"#bp_type_idx\">bp_type_idx</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#iter\">iter</a>, &amp;<a class=\"id\" href=\"#bp_task_head\">bp_task_head</a>, <a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#bp_list\">bp_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#ctx\">ctx</a> == <a class=\"id\" href=\"#ctx\">ctx</a> && <a class=\"id\" href=\"#find_slot_idx\">find_slot_idx</a>(<a class=\"id\" href=\"#iter\">iter</a>) == <a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#hw_breakpoint_weight\">hw_breakpoint_weight</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Report the number of pinned/un-pinned breakpoints we have in</span>", 
"<span class=\"comment\"> * a given cpu (cpu &gt; -1) or in all of them (cpu = -1).</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#fetch_bp_busy_slots\">fetch_bp_busy_slots</a>(struct <a class=\"id\" href=\"#bp_busy_slots\">bp_busy_slots</a> *<a class=\"id\" href=\"#slots\">slots</a>, struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    enum <a class=\"id\" href=\"#bp_type_idx\">bp_type_idx</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#task\">task</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slots\">slots</a>-><a class=\"id\" href=\"#pinned\">pinned</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#nr_cpu_bp_pinned\">nr_cpu_bp_pinned</a>[<a class=\"id\" href=\"#type\">type</a>], <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slots\">slots</a>-><a class=\"id\" href=\"#pinned\">pinned</a> += <a class=\"id\" href=\"#max_task_bp_pinned\">max_task_bp_pinned</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slots\">slots</a>-><a class=\"id\" href=\"#pinned\">pinned</a> += <a class=\"id\" href=\"#task_bp_pinned\">task_bp_pinned</a>(<a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slots\">slots</a>-><a class=\"id\" href=\"#flexible\">flexible</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#nr_bp_flexible\">nr_bp_flexible</a>[<a class=\"id\" href=\"#type\">type</a>], <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr\">nr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#nr_cpu_bp_pinned\">nr_cpu_bp_pinned</a>[<a class=\"id\" href=\"#type\">type</a>], <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> += <a class=\"id\" href=\"#max_task_bp_pinned\">max_task_bp_pinned</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> += <a class=\"id\" href=\"#task_bp_pinned\">task_bp_pinned</a>(<a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a> &gt; <a class=\"id\" href=\"#slots\">slots</a>-><a class=\"id\" href=\"#pinned\">pinned</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slots\">slots</a>-><a class=\"id\" href=\"#pinned\">pinned</a> = <a class=\"id\" href=\"#nr\">nr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#nr_bp_flexible\">nr_bp_flexible</a>[<a class=\"id\" href=\"#type\">type</a>], <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a> &gt; <a class=\"id\" href=\"#slots\">slots</a>-><a class=\"id\" href=\"#flexible\">flexible</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slots\">slots</a>-><a class=\"id\" href=\"#flexible\">flexible</a> = <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For now, continue to consider flexible as pinned, until we can</span>", 
"<span class=\"comment\"> * ensure no flexible event can ever be scheduled before a pinned event</span>", 
"<span class=\"comment\"> * in a same cpu.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#fetch_this_slot\">fetch_this_slot</a>(struct <a class=\"id\" href=\"#bp_busy_slots\">bp_busy_slots</a> *<a class=\"id\" href=\"#slots\">slots</a>, int <a class=\"id\" href=\"#weight\">weight</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slots\">slots</a>-><a class=\"id\" href=\"#pinned\">pinned</a> += <a class=\"id\" href=\"#weight\">weight</a>;", 
];
xr_frag_insert('l/46/66a13a859252d8272b28048369cce17c6f3178.xr', __xr_tmp);
