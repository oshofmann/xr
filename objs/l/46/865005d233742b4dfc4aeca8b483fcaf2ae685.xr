var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The input core</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 1999-2002 Vojtech Pavlik</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify it</span>", 
"<span class=\"comment\"> * under the terms of the GNU General Public License version 2 as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#input\">input</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#random\">random</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#major\">major</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp_lock\">smp_lock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"input-compat.h\"", 
"", 
"<a class=\"id\" href=\"#MODULE_AUTHOR\">MODULE_AUTHOR</a>(\"Vojtech Pavlik <vojtech@suse.cz>\");", 
"<a class=\"id\" href=\"#MODULE_DESCRIPTION\">MODULE_DESCRIPTION</a>(\"Input core\");", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INPUT_DEVICES\">INPUT_DEVICES</a><span class=\"ts\"/>256", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#input_dev_list\">input_dev_list</a>);", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#input_handler_list\">input_handler_list</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * input_mutex protects access to both input_dev_list and input_handler_list.</span>", 
"<span class=\"comment\"> * This also causes input_[un]register_device and input_[un]register_handler</span>", 
"<span class=\"comment\"> * be mutually exclusive which simplifies locking in drivers implementing</span>", 
"<span class=\"comment\"> * input handlers.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#input_mutex\">input_mutex</a>);", 
"", 
"static struct <a class=\"id\" href=\"#input_handler\">input_handler</a> *<a class=\"id\" href=\"#input_table\">input_table</a>[8];", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_event_supported\">is_event_supported</a>(unsigned int <a class=\"id\" href=\"#code\">code</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long *<a class=\"id\" href=\"#bm\">bm</a>, unsigned int <a class=\"id\" href=\"#max\">max</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#code\">code</a> <= <a class=\"id\" href=\"#max\">max</a> && <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#bm\">bm</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#input_defuzz_abs_event\">input_defuzz_abs_event</a>(int <a class=\"id\" href=\"#value\">value</a>, int <a class=\"id\" href=\"#old_val\">old_val</a>, int <a class=\"id\" href=\"#fuzz\">fuzz</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fuzz\">fuzz</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> &gt; <a class=\"id\" href=\"#old_val\">old_val</a> - <a class=\"id\" href=\"#fuzz\">fuzz</a> / 2 && <a class=\"id\" href=\"#value\">value</a> &lt; <a class=\"id\" href=\"#old_val\">old_val</a> + <a class=\"id\" href=\"#fuzz\">fuzz</a> / 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#old_val\">old_val</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> &gt; <a class=\"id\" href=\"#old_val\">old_val</a> - <a class=\"id\" href=\"#fuzz\">fuzz</a> && <a class=\"id\" href=\"#value\">value</a> &lt; <a class=\"id\" href=\"#old_val\">old_val</a> + <a class=\"id\" href=\"#fuzz\">fuzz</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#old_val\">old_val</a> * 3 + <a class=\"id\" href=\"#value\">value</a>) / 4;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> &gt; <a class=\"id\" href=\"#old_val\">old_val</a> - <a class=\"id\" href=\"#fuzz\">fuzz</a> * 2 && <a class=\"id\" href=\"#value\">value</a> &lt; <a class=\"id\" href=\"#old_val\">old_val</a> + <a class=\"id\" href=\"#fuzz\">fuzz</a> * 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#old_val\">old_val</a> + <a class=\"id\" href=\"#value\">value</a>) / 2;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#value\">value</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Pass event first through all filters and then, if event has not been</span>", 
"<span class=\"comment\"> * filtered out, through all open handles. This function is called with</span>", 
"<span class=\"comment\"> * dev-&gt;event_lock held and interrupts disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#input_pass_event\">input_pass_event</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#type\">type</a>, unsigned int <a class=\"id\" href=\"#code\">code</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_handler\">input_handler</a> *<a class=\"id\" href=\"#handler\">handler</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#grab\">grab</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#event\">event</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#filtered\">filtered</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#handle\">handle</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#h_list\">h_list</a>, <a class=\"id\" href=\"#d_node\">d_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#open\">open</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#handler\">handler</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#filter\">filter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#filtered\">filtered</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#event\">event</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#filter\">filter</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#value\">value</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filtered\">filtered</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generate software autorepeat event. Note that we take</span>", 
"<span class=\"comment\"> * dev-&gt;event_lock here to avoid racing with input_event</span>", 
"<span class=\"comment\"> * which may cause keys get \"stuck\".</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#input_repeat_key\">input_repeat_key</a>(unsigned long <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = (void *) <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#repeat_key\">repeat_key</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#key\">key</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#is_event_supported\">is_event_supported</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#repeat_key\">repeat_key</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keybit\">keybit</a>, <a class=\"id\" href=\"#KEY_MAX\">KEY_MAX</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_pass_event\">input_pass_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#EV_KEY\">EV_KEY</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#repeat_key\">repeat_key</a>, 2);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sync\">sync</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Only send SYN_REPORT if we are not in a middle</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * of driver parsing a new hardware packet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Otherwise assume that the driver will send</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * SYN_REPORT once it's done.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_pass_event\">input_pass_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#EV_SYN\">EV_SYN</a>, <a class=\"id\" href=\"#SYN_REPORT\">SYN_REPORT</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rep\">rep</a>[<a class=\"id\" href=\"#REP_PERIOD\">REP_PERIOD</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rep\">rep</a>[<a class=\"id\" href=\"#REP_PERIOD\">REP_PERIOD</a>]));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#input_start_autorepeat\">input_start_autorepeat</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#code\">code</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_REP\">EV_REP</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rep\">rep</a>[<a class=\"id\" href=\"#REP_PERIOD\">REP_PERIOD</a>] && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rep\">rep</a>[<a class=\"id\" href=\"#REP_DELAY\">REP_DELAY</a>] &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#repeat_key\">repeat_key</a> = <a class=\"id\" href=\"#code\">code</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#timer\">timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rep\">rep</a>[<a class=\"id\" href=\"#REP_DELAY\">REP_DELAY</a>]));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#input_stop_autorepeat\">input_stop_autorepeat</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_timer\">del_timer</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#timer\">timer</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INPUT_IGNORE_EVENT\">INPUT_IGNORE_EVENT</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INPUT_PASS_TO_HANDLERS\">INPUT_PASS_TO_HANDLERS</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INPUT_PASS_TO_DEVICE\">INPUT_PASS_TO_DEVICE</a><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INPUT_PASS_TO_ALL\">INPUT_PASS_TO_ALL</a><span class=\"ts\"/>(<a class=\"id\" href=\"#INPUT_PASS_TO_HANDLERS\">INPUT_PASS_TO_HANDLERS</a> | <a class=\"id\" href=\"#INPUT_PASS_TO_DEVICE\">INPUT_PASS_TO_DEVICE</a>)", 
"", 
"static int <a class=\"id\" href=\"#input_handle_abs_event\">input_handle_abs_event</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#code\">code</a>, int *<a class=\"id\" href=\"#pval\">pval</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_mt_event\">is_mt_event</a>;", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#pold\">pold</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#code\">code</a> == <a class=\"id\" href=\"#ABS_MT_SLOT\">ABS_MT_SLOT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * \"Stage\" the event; we'll flush it later, when we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * get actiual touch data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#pval\">pval</a> >= 0 && *<a class=\"id\" href=\"#pval\">pval</a> &lt; <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mtsize\">mtsize</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#slot\">slot</a> = *<a class=\"id\" href=\"#pval\">pval</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#INPUT_IGNORE_EVENT\">INPUT_IGNORE_EVENT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#is_mt_event\">is_mt_event</a> = <a class=\"id\" href=\"#code\">code</a> >= <a class=\"id\" href=\"#ABS_MT_FIRST\">ABS_MT_FIRST</a> && <a class=\"id\" href=\"#code\">code</a> <= <a class=\"id\" href=\"#ABS_MT_LAST\">ABS_MT_LAST</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_mt_event\">is_mt_event</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pold\">pold</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#absinfo\">absinfo</a>[<a class=\"id\" href=\"#code\">code</a>].<a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mt\">mt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#input_mt_slot\">input_mt_slot</a> *<a class=\"id\" href=\"#mtslot\">mtslot</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mt\">mt</a>[<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#slot\">slot</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pold\">pold</a> = &amp;<a class=\"id\" href=\"#mtslot\">mtslot</a>-><a class=\"id\" href=\"#abs\">abs</a>[<a class=\"id\" href=\"#code\">code</a> - <a class=\"id\" href=\"#ABS_MT_FIRST\">ABS_MT_FIRST</a>];", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Bypass filtering for multitouch events when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * not employing slots.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pold\">pold</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pold\">pold</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pval\">pval</a> = <a class=\"id\" href=\"#input_defuzz_abs_event\">input_defuzz_abs_event</a>(*<a class=\"id\" href=\"#pval\">pval</a>, *<a class=\"id\" href=\"#pold\">pold</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#absinfo\">absinfo</a>[<a class=\"id\" href=\"#code\">code</a>].<a class=\"id\" href=\"#fuzz\">fuzz</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#pold\">pold</a> == *<a class=\"id\" href=\"#pval\">pval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#INPUT_IGNORE_EVENT\">INPUT_IGNORE_EVENT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pold\">pold</a> = *<a class=\"id\" href=\"#pval\">pval</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Flush pending \"slot\" event */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_mt_event\">is_mt_event</a> && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#slot\">slot</a> != <a class=\"id\" href=\"#input_abs_get_val\">input_abs_get_val</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#ABS_MT_SLOT\">ABS_MT_SLOT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_abs_set_val\">input_abs_set_val</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#ABS_MT_SLOT\">ABS_MT_SLOT</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#slot\">slot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_pass_event\">input_pass_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#EV_ABS\">EV_ABS</a>, <a class=\"id\" href=\"#ABS_MT_SLOT\">ABS_MT_SLOT</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#slot\">slot</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#INPUT_PASS_TO_HANDLERS\">INPUT_PASS_TO_HANDLERS</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#input_handle_event\">input_handle_event</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#type\">type</a>, unsigned int <a class=\"id\" href=\"#code\">code</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#disposition\">disposition</a> = <a class=\"id\" href=\"#INPUT_IGNORE_EVENT\">INPUT_IGNORE_EVENT</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EV_SYN\">EV_SYN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#code\">code</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SYN_CONFIG\">SYN_CONFIG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disposition\">disposition</a> = <a class=\"id\" href=\"#INPUT_PASS_TO_ALL\">INPUT_PASS_TO_ALL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SYN_REPORT\">SYN_REPORT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sync\">sync</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sync\">sync</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disposition\">disposition</a> = <a class=\"id\" href=\"#INPUT_PASS_TO_HANDLERS\">INPUT_PASS_TO_HANDLERS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SYN_MT_REPORT\">SYN_MT_REPORT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sync\">sync</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disposition\">disposition</a> = <a class=\"id\" href=\"#INPUT_PASS_TO_HANDLERS\">INPUT_PASS_TO_HANDLERS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EV_KEY\">EV_KEY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_event_supported\">is_event_supported</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keybit\">keybit</a>, <a class=\"id\" href=\"#KEY_MAX\">KEY_MAX</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#key\">key</a>) != <a class=\"id\" href=\"#value\">value</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> != 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__change_bit\">__change_bit</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_start_autorepeat\">input_start_autorepeat</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#code\">code</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_stop_autorepeat\">input_stop_autorepeat</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disposition\">disposition</a> = <a class=\"id\" href=\"#INPUT_PASS_TO_HANDLERS\">INPUT_PASS_TO_HANDLERS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EV_SW\">EV_SW</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_event_supported\">is_event_supported</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#swbit\">swbit</a>, <a class=\"id\" href=\"#SW_MAX\">SW_MAX</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sw\">sw</a>) != <a class=\"id\" href=\"#value\">value</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__change_bit\">__change_bit</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sw\">sw</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disposition\">disposition</a> = <a class=\"id\" href=\"#INPUT_PASS_TO_HANDLERS\">INPUT_PASS_TO_HANDLERS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EV_ABS\">EV_ABS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_event_supported\">is_event_supported</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#absbit\">absbit</a>, <a class=\"id\" href=\"#ABS_MAX\">ABS_MAX</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disposition\">disposition</a> = <a class=\"id\" href=\"#input_handle_abs_event\">input_handle_abs_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#code\">code</a>, &amp;<a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EV_REL\">EV_REL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_event_supported\">is_event_supported</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#relbit\">relbit</a>, <a class=\"id\" href=\"#REL_MAX\">REL_MAX</a>) && <a class=\"id\" href=\"#value\">value</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disposition\">disposition</a> = <a class=\"id\" href=\"#INPUT_PASS_TO_HANDLERS\">INPUT_PASS_TO_HANDLERS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EV_MSC\">EV_MSC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_event_supported\">is_event_supported</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mscbit\">mscbit</a>, <a class=\"id\" href=\"#MSC_MAX\">MSC_MAX</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disposition\">disposition</a> = <a class=\"id\" href=\"#INPUT_PASS_TO_ALL\">INPUT_PASS_TO_ALL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EV_LED\">EV_LED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_event_supported\">is_event_supported</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ledbit\">ledbit</a>, <a class=\"id\" href=\"#LED_MAX\">LED_MAX</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#led\">led</a>) != <a class=\"id\" href=\"#value\">value</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__change_bit\">__change_bit</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#led\">led</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disposition\">disposition</a> = <a class=\"id\" href=\"#INPUT_PASS_TO_ALL\">INPUT_PASS_TO_ALL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EV_SND\">EV_SND</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_event_supported\">is_event_supported</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sndbit\">sndbit</a>, <a class=\"id\" href=\"#SND_MAX\">SND_MAX</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#snd\">snd</a>) != !!<a class=\"id\" href=\"#value\">value</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__change_bit\">__change_bit</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#snd\">snd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disposition\">disposition</a> = <a class=\"id\" href=\"#INPUT_PASS_TO_ALL\">INPUT_PASS_TO_ALL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EV_REP\">EV_REP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#code\">code</a> <= <a class=\"id\" href=\"#REP_MAX\">REP_MAX</a> && <a class=\"id\" href=\"#value\">value</a> >= 0 && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rep\">rep</a>[<a class=\"id\" href=\"#code\">code</a>] != <a class=\"id\" href=\"#value\">value</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rep\">rep</a>[<a class=\"id\" href=\"#code\">code</a>] = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disposition\">disposition</a> = <a class=\"id\" href=\"#INPUT_PASS_TO_ALL\">INPUT_PASS_TO_ALL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EV_FF\">EV_FF</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disposition\">disposition</a> = <a class=\"id\" href=\"#INPUT_PASS_TO_ALL\">INPUT_PASS_TO_ALL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EV_PWR\">EV_PWR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disposition\">disposition</a> = <a class=\"id\" href=\"#INPUT_PASS_TO_ALL\">INPUT_PASS_TO_ALL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#disposition\">disposition</a> != <a class=\"id\" href=\"#INPUT_IGNORE_EVENT\">INPUT_IGNORE_EVENT</a> && <a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#EV_SYN\">EV_SYN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sync\">sync</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#disposition\">disposition</a> &amp; <a class=\"id\" href=\"#INPUT_PASS_TO_DEVICE\">INPUT_PASS_TO_DEVICE</a>) && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event\">event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#disposition\">disposition</a> &amp; <a class=\"id\" href=\"#INPUT_PASS_TO_HANDLERS\">INPUT_PASS_TO_HANDLERS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_pass_event\">input_pass_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_event() - report new input event</span>", 
"<span class=\"comment\"> * @dev: device that generated the event</span>", 
"<span class=\"comment\"> * @type: type of the event</span>", 
"<span class=\"comment\"> * @code: event code</span>", 
"<span class=\"comment\"> * @value: value of the event</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function should be used by drivers implementing various input</span>", 
"<span class=\"comment\"> * devices to report input events. See also input_inject_event().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: input_event() may be safely used right after input device was</span>", 
"<span class=\"comment\"> * allocated with input_allocate_device(), even before it is registered</span>", 
"<span class=\"comment\"> * with input_register_device(), but the event will not reach any of the</span>", 
"<span class=\"comment\"> * input handlers. Such early invocation of input_event() may be used</span>", 
"<span class=\"comment\"> * to 'seed' initial state of a switch or initial position of absolute</span>", 
"<span class=\"comment\"> * axis, etc.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#input_event\">input_event</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#type\">type</a>, unsigned int <a class=\"id\" href=\"#code\">code</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_event_supported\">is_event_supported</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>, <a class=\"id\" href=\"#EV_MAX\">EV_MAX</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_input_randomness\">add_input_randomness</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_handle_event\">input_handle_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_event\">input_event</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_inject_event() - send input event from input handler</span>", 
"<span class=\"comment\"> * @handle: input handle to send event through</span>", 
"<span class=\"comment\"> * @type: type of the event</span>", 
"<span class=\"comment\"> * @code: event code</span>", 
"<span class=\"comment\"> * @value: value of the event</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Similar to input_event() but will ignore event if device is</span>", 
"<span class=\"comment\"> * \"grabbed\" and handle injecting event is not the one that owns</span>", 
"<span class=\"comment\"> * the device.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#input_inject_event\">input_inject_event</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#type\">type</a>, unsigned int <a class=\"id\" href=\"#code\">code</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#grab\">grab</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_event_supported\">is_event_supported</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>, <a class=\"id\" href=\"#EV_MAX\">EV_MAX</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grab\">grab</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#grab\">grab</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#grab\">grab</a> || <a class=\"id\" href=\"#grab\">grab</a> == <a class=\"id\" href=\"#handle\">handle</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_handle_event\">input_handle_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_inject_event\">input_inject_event</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_alloc_absinfo - allocates array of input_absinfo structs</span>", 
"<span class=\"comment\"> * @dev: the input device emitting absolute events</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the absinfo struct the caller asked for is already allocated, this</span>", 
"<span class=\"comment\"> * functions will not do anything.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#input_alloc_absinfo\">input_alloc_absinfo</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#absinfo\">absinfo</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#absinfo\">absinfo</a> = <a class=\"id\" href=\"#kcalloc\">kcalloc</a>(<a class=\"id\" href=\"#ABS_CNT\">ABS_CNT</a>, sizeof(struct <a class=\"id\" href=\"#input_absinfo\">input_absinfo</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#absinfo\">absinfo</a>, \"%s(): kcalloc() failed?\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_alloc_absinfo\">input_alloc_absinfo</a>);", 
"", 
"void <a class=\"id\" href=\"#input_set_abs_params\">input_set_abs_params</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#axis\">axis</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#min\">min</a>, int <a class=\"id\" href=\"#max\">max</a>, int <a class=\"id\" href=\"#fuzz\">fuzz</a>, int <a class=\"id\" href=\"#flat\">flat</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_absinfo\">input_absinfo</a> *<a class=\"id\" href=\"#absinfo\">absinfo</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_alloc_absinfo\">input_alloc_absinfo</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#absinfo\">absinfo</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#absinfo\">absinfo</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#absinfo\">absinfo</a>[<a class=\"id\" href=\"#axis\">axis</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#absinfo\">absinfo</a>-><a class=\"id\" href=\"#minimum\">minimum</a> = <a class=\"id\" href=\"#min\">min</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#absinfo\">absinfo</a>-><a class=\"id\" href=\"#maximum\">maximum</a> = <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#absinfo\">absinfo</a>-><a class=\"id\" href=\"#fuzz\">fuzz</a> = <a class=\"id\" href=\"#fuzz\">fuzz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#absinfo\">absinfo</a>-><a class=\"id\" href=\"#flat\">flat</a> = <a class=\"id\" href=\"#flat\">flat</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#absbit\">absbit</a>[<a class=\"id\" href=\"#BIT_WORD\">BIT_WORD</a>(<a class=\"id\" href=\"#axis\">axis</a>)] |= <a class=\"id\" href=\"#BIT_MASK\">BIT_MASK</a>(<a class=\"id\" href=\"#axis\">axis</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_set_abs_params\">input_set_abs_params</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_grab_device - grabs device for exclusive use</span>", 
"<span class=\"comment\"> * @handle: input handle that wants to own the device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When a device is grabbed by an input handle all events generated by</span>", 
"<span class=\"comment\"> * the device are delivered only to this handle. Also events injected</span>", 
"<span class=\"comment\"> * by other input handles are ignored while device is grabbed.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#input_grab_device\">input_grab_device</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#mutex_lock_interruptible\">mutex_lock_interruptible</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#grab\">grab</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#grab\">grab</a>, <a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_grab_device\">input_grab_device</a>);", 
"", 
"static void <a class=\"id\" href=\"#__input_release_device\">__input_release_device</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#grab\">grab</a> == <a class=\"id\" href=\"#handle\">handle</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#grab\">grab</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make sure input_pass_event() notices that grab is gone */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#handle\">handle</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#h_list\">h_list</a>, <a class=\"id\" href=\"#d_node\">d_node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#open\">open</a> && <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#start\">start</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_release_device - release previously grabbed device</span>", 
"<span class=\"comment\"> * @handle: input handle that owns the device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Releases previously grabbed device so that other input handles can</span>", 
"<span class=\"comment\"> * start receiving input events. Upon release all handlers attached</span>", 
"<span class=\"comment\"> * to the device have their start() method called so they have a change</span>", 
"<span class=\"comment\"> * to synchronize device state with the rest of the system.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#input_release_device\">input_release_device</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__input_release_device\">__input_release_device</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_release_device\">input_release_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_open_device - open input device</span>", 
"<span class=\"comment\"> * @handle: handle through which device is being accessed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function should be called by input handlers when they</span>", 
"<span class=\"comment\"> * want to start receive events from given input device.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#input_open_device\">input_open_device</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#mutex_lock_interruptible\">mutex_lock_interruptible</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#going_away\">going_away</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#open\">open</a>++;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#users\">users</a>++ && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#open\">open</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#open\">open</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#users\">users</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!--<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#open\">open</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Make sure we are not delivering any more events</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * through this handle</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_open_device\">input_open_device</a>);", 
"", 
"int <a class=\"id\" href=\"#input_flush_device\">input_flush_device</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#mutex_lock_interruptible\">mutex_lock_interruptible</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flush\">flush</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flush\">flush</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_flush_device\">input_flush_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_close_device - close input device</span>", 
"<span class=\"comment\"> * @handle: handle through which device is being accessed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function should be called by input handlers when they</span>", 
"<span class=\"comment\"> * want to stop receive events from given input device.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#input_close_device\">input_close_device</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__input_release_device\">__input_release_device</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"", 
"<span class=\"ts\"/>if (!--<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#users\">users</a> && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#close\">close</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#close\">close</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (!--<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#open\">open</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * synchronize_rcu() makes sure that input_pass_event()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * completed and that no more input events are delivered</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * through this handle</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_close_device\">input_close_device</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Simulate keyup events for all keys that are marked as pressed.</span>", 
"<span class=\"comment\"> * The function must be called with dev-&gt;event_lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#input_dev_release_keys\">input_dev_release_keys</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#code\">code</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_event_supported\">is_event_supported</a>(<a class=\"id\" href=\"#EV_KEY\">EV_KEY</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>, <a class=\"id\" href=\"#EV_MAX\">EV_MAX</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#code\">code</a> = 0; <a class=\"id\" href=\"#code\">code</a> <= <a class=\"id\" href=\"#KEY_MAX\">KEY_MAX</a>; <a class=\"id\" href=\"#code\">code</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_event_supported\">is_event_supported</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keybit\">keybit</a>, <a class=\"id\" href=\"#KEY_MAX\">KEY_MAX</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#__test_and_clear_bit\">__test_and_clear_bit</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#key\">key</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_pass_event\">input_pass_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#EV_KEY\">EV_KEY</a>, <a class=\"id\" href=\"#code\">code</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_pass_event\">input_pass_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#EV_SYN\">EV_SYN</a>, <a class=\"id\" href=\"#SYN_REPORT\">SYN_REPORT</a>, 1);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Prepare device for unregistering</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#input_disconnect_device\">input_disconnect_device</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Mark device as going away. Note that we take dev-&gt;mutex here</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not to protect access to dev-&gt;going_away but rather to ensure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that there are no threads in the middle of input_open_device()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#going_away\">going_away</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Simulate keyup events for all pressed keys so that handlers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are not left with \"stuck\" keys. The driver may continue</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * generate events even after we done here but they will not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reach any handlers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_dev_release_keys\">input_dev_release_keys</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#handle\">handle</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#h_list\">h_list</a>, <a class=\"id\" href=\"#d_node\">d_node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#open\">open</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#input_fetch_keycode\">input_fetch_keycode</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#scancode\">scancode</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keycodesize\">keycodesize</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return ((<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keycode\">keycode</a>)[<a class=\"id\" href=\"#scancode\">scancode</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return ((<a class=\"id\" href=\"#u16\">u16</a> *)<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keycode\">keycode</a>)[<a class=\"id\" href=\"#scancode\">scancode</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return ((<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keycode\">keycode</a>)[<a class=\"id\" href=\"#scancode\">scancode</a>];", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#input_default_getkeycode\">input_default_getkeycode</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#scancode\">scancode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int *<a class=\"id\" href=\"#keycode\">keycode</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keycodesize\">keycodesize</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scancode\">scancode</a> >= <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keycodemax\">keycodemax</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#keycode\">keycode</a> = <a class=\"id\" href=\"#input_fetch_keycode\">input_fetch_keycode</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#scancode\">scancode</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#input_default_setkeycode\">input_default_setkeycode</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#scancode\">scancode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#keycode\">keycode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old_keycode\">old_keycode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scancode\">scancode</a> >= <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keycodemax\">keycodemax</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keycodesize\">keycodesize</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keycodesize\">keycodesize</a> &lt; sizeof(<a class=\"id\" href=\"#keycode\">keycode</a>) && (<a class=\"id\" href=\"#keycode\">keycode</a> >> (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keycodesize\">keycodesize</a> * 8)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keycodesize\">keycodesize</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case 1: {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#k\">k</a> = (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keycode\">keycode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_keycode\">old_keycode</a> = <a class=\"id\" href=\"#k\">k</a>[<a class=\"id\" href=\"#scancode\">scancode</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a>[<a class=\"id\" href=\"#scancode\">scancode</a>] = <a class=\"id\" href=\"#keycode\">keycode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>case 2: {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#k\">k</a> = (<a class=\"id\" href=\"#u16\">u16</a> *)<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keycode\">keycode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_keycode\">old_keycode</a> = <a class=\"id\" href=\"#k\">k</a>[<a class=\"id\" href=\"#scancode\">scancode</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a>[<a class=\"id\" href=\"#scancode\">scancode</a>] = <a class=\"id\" href=\"#keycode\">keycode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>default: {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#k\">k</a> = (<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keycode\">keycode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_keycode\">old_keycode</a> = <a class=\"id\" href=\"#k\">k</a>[<a class=\"id\" href=\"#scancode\">scancode</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a>[<a class=\"id\" href=\"#scancode\">scancode</a>] = <a class=\"id\" href=\"#keycode\">keycode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#old_keycode\">old_keycode</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keybit\">keybit</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#keycode\">keycode</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keybit\">keybit</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keycodemax\">keycodemax</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#input_fetch_keycode\">input_fetch_keycode</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#i\">i</a>) == <a class=\"id\" href=\"#old_keycode\">old_keycode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#old_keycode\">old_keycode</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keybit\">keybit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break; <span class=\"comment\">/* Setting the bit twice is useless, so break */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_get_keycode - retrieve keycode currently mapped to a given scancode</span>", 
"<span class=\"comment\"> * @dev: input device which keymap is being queried</span>", 
"<span class=\"comment\"> * @scancode: scancode (or its equivalent for device in question) for which</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>keycode is needed</span>", 
"<span class=\"comment\"> * @keycode: result</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function should be called by anyone interested in retrieving current</span>", 
"<span class=\"comment\"> * keymap. Presently keyboard and evdev handlers use it.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#input_get_keycode\">input_get_keycode</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#scancode\">scancode</a>, unsigned int *<a class=\"id\" href=\"#keycode\">keycode</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#getkeycode\">getkeycode</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#scancode\">scancode</a>, <a class=\"id\" href=\"#keycode\">keycode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_get_keycode\">input_get_keycode</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_get_keycode - assign new keycode to a given scancode</span>", 
"<span class=\"comment\"> * @dev: input device which keymap is being updated</span>", 
"<span class=\"comment\"> * @scancode: scancode (or its equivalent for device in question)</span>", 
"<span class=\"comment\"> * @keycode: new keycode to be assigned to the scancode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function should be called by anyone needing to update current</span>", 
"<span class=\"comment\"> * keymap. Presently keyboard and evdev handlers use it.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#input_set_keycode\">input_set_keycode</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#scancode\">scancode</a>, unsigned int <a class=\"id\" href=\"#keycode\">keycode</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#old_keycode\">old_keycode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keycode\">keycode</a> &gt; <a class=\"id\" href=\"#KEY_MAX\">KEY_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#getkeycode\">getkeycode</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#scancode\">scancode</a>, &amp;<a class=\"id\" href=\"#old_keycode\">old_keycode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#setkeycode\">setkeycode</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#scancode\">scancode</a>, <a class=\"id\" href=\"#keycode\">keycode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure KEY_RESERVED did not get enabled. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#KEY_RESERVED\">KEY_RESERVED</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keybit\">keybit</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Simulate keyup event if keycode is not present</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the keymap anymore</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_KEY\">EV_KEY</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#is_event_supported\">is_event_supported</a>(<a class=\"id\" href=\"#old_keycode\">old_keycode</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keybit\">keybit</a>, <a class=\"id\" href=\"#KEY_MAX\">KEY_MAX</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#__test_and_clear_bit\">__test_and_clear_bit</a>(<a class=\"id\" href=\"#old_keycode\">old_keycode</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#key\">key</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_pass_event\">input_pass_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#EV_KEY\">EV_KEY</a>, <a class=\"id\" href=\"#old_keycode\">old_keycode</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sync\">sync</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_pass_event\">input_pass_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#EV_SYN\">EV_SYN</a>, <a class=\"id\" href=\"#SYN_REPORT\">SYN_REPORT</a>, 1);", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_set_keycode\">input_set_keycode</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MATCH_BIT\">MATCH_BIT</a>(<a class=\"id\" href=\"#bit\">bit</a>, <a class=\"id\" href=\"#max\">max</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#max\">max</a>); <a class=\"id\" href=\"#i\">i</a>++) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#bit\">bit</a>[<a class=\"id\" href=\"#i\">i</a>] &amp; <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bit\">bit</a>[<a class=\"id\" href=\"#i\">i</a>]) != <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#bit\">bit</a>[<a class=\"id\" href=\"#i\">i</a>]) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break; \\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> != <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#max\">max</a>)) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"static const struct <a class=\"id\" href=\"#input_device_id\">input_device_id</a> *<a class=\"id\" href=\"#input_match_device\">input_match_device</a>(struct <a class=\"id\" href=\"#input_handler\">input_handler</a> *<a class=\"id\" href=\"#handler\">handler</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#input_device_id\">input_device_id</a> *<a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#id_table\">id_table</a>; <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#flags\">flags</a> || <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#driver_info\">driver_info</a>; <a class=\"id\" href=\"#id\">id</a>++) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#INPUT_DEVICE_ID_MATCH_BUS\">INPUT_DEVICE_ID_MATCH_BUS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#bustype\">bustype</a> != <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#bustype\">bustype</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#INPUT_DEVICE_ID_MATCH_VENDOR\">INPUT_DEVICE_ID_MATCH_VENDOR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#vendor\">vendor</a> != <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#vendor\">vendor</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#INPUT_DEVICE_ID_MATCH_PRODUCT\">INPUT_DEVICE_ID_MATCH_PRODUCT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#product\">product</a> != <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#product\">product</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#INPUT_DEVICE_ID_MATCH_VERSION\">INPUT_DEVICE_ID_MATCH_VERSION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#version\">version</a> != <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#version\">version</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MATCH_BIT\">MATCH_BIT</a>(<a class=\"id\" href=\"#evbit\">evbit</a>,  <a class=\"id\" href=\"#EV_MAX\">EV_MAX</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MATCH_BIT\">MATCH_BIT</a>(<a class=\"id\" href=\"#keybit\">keybit</a>, <a class=\"id\" href=\"#KEY_MAX\">KEY_MAX</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MATCH_BIT\">MATCH_BIT</a>(<a class=\"id\" href=\"#relbit\">relbit</a>, <a class=\"id\" href=\"#REL_MAX\">REL_MAX</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MATCH_BIT\">MATCH_BIT</a>(<a class=\"id\" href=\"#absbit\">absbit</a>, <a class=\"id\" href=\"#ABS_MAX\">ABS_MAX</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MATCH_BIT\">MATCH_BIT</a>(<a class=\"id\" href=\"#mscbit\">mscbit</a>, <a class=\"id\" href=\"#MSC_MAX\">MSC_MAX</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MATCH_BIT\">MATCH_BIT</a>(<a class=\"id\" href=\"#ledbit\">ledbit</a>, <a class=\"id\" href=\"#LED_MAX\">LED_MAX</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MATCH_BIT\">MATCH_BIT</a>(<a class=\"id\" href=\"#sndbit\">sndbit</a>, <a class=\"id\" href=\"#SND_MAX\">SND_MAX</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MATCH_BIT\">MATCH_BIT</a>(<a class=\"id\" href=\"#ffbit\">ffbit</a>,  <a class=\"id\" href=\"#FF_MAX\">FF_MAX</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MATCH_BIT\">MATCH_BIT</a>(<a class=\"id\" href=\"#swbit\">swbit</a>,  <a class=\"id\" href=\"#SW_MAX\">SW_MAX</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#match\">match</a> || <a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#match\">match</a>(<a class=\"id\" href=\"#handler\">handler</a>, <a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#input_attach_handler\">input_attach_handler</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#input_handler\">input_handler</a> *<a class=\"id\" href=\"#handler\">handler</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#input_device_id\">input_device_id</a> *<a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#input_match_device\">input_match_device</a>(<a class=\"id\" href=\"#handler\">handler</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#id\">id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#connect\">connect</a>(<a class=\"id\" href=\"#handler\">handler</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> && <a class=\"id\" href=\"#error\">error</a> != -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"input: failed to attach handler %s to device %s, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"error: %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#kobj\">kobj</a>), <a class=\"id\" href=\"#error\">error</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"", 
"static int <a class=\"id\" href=\"#input_bits_to_string\">input_bits_to_string</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#buf_size\">buf_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#skip_empty\">skip_empty</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#INPUT_COMPAT_TEST\">INPUT_COMPAT_TEST</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#dword\">dword</a> = <a class=\"id\" href=\"#bits\">bits</a> >> 32;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dword\">dword</a> || !<a class=\"id\" href=\"#skip_empty\">skip_empty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#buf_size\">buf_size</a>, \"%x \", <a class=\"id\" href=\"#dword\">dword</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dword\">dword</a> = <a class=\"id\" href=\"#bits\">bits</a> &amp; 0xffffffffUL;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dword\">dword</a> || !<a class=\"id\" href=\"#skip_empty\">skip_empty</a> || <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#buf_size\">buf_size</a> - <a class=\"id\" href=\"#len\">len</a>, 0),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%x\", <a class=\"id\" href=\"#dword\">dword</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bits\">bits</a> || !<a class=\"id\" href=\"#skip_empty\">skip_empty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#buf_size\">buf_size</a>, \"%lx\", <a class=\"id\" href=\"#bits\">bits</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"#else <span class=\"comment\">/* !CONFIG_COMPAT */</span>", 
"", 
"static int <a class=\"id\" href=\"#input_bits_to_string\">input_bits_to_string</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#buf_size\">buf_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#skip_empty\">skip_empty</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bits\">bits</a> || !<a class=\"id\" href=\"#skip_empty\">skip_empty</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#buf_size\">buf_size</a>, \"%lx\", <a class=\"id\" href=\"#bits\">bits</a>) : 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"", 
"static struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#proc_bus_input_dir\">proc_bus_input_dir</a>;", 
"static <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#input_devices_poll_wait\">input_devices_poll_wait</a>);", 
"static int <a class=\"id\" href=\"#input_devices_state\">input_devices_state</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#input_wakeup_procfs_readers\">input_wakeup_procfs_readers</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_devices_state\">input_devices_state</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#input_devices_poll_wait\">input_devices_poll_wait</a>);", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#input_proc_devices_poll\">input_proc_devices_poll</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#poll_table\">poll_table</a> *<a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#poll_wait\">poll_wait</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#input_devices_poll_wait\">input_devices_poll_wait</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_version\">f_version</a> != <a class=\"id\" href=\"#input_devices_state\">input_devices_state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_version\">f_version</a> = <a class=\"id\" href=\"#input_devices_state\">input_devices_state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#POLLIN\">POLLIN</a> | <a class=\"id\" href=\"#POLLRDNORM\">POLLRDNORM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"union <a class=\"id\" href=\"#input_seq_state\">input_seq_state</a> {", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#mutex_acquired\">mutex_acquired</a>;", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#p\">p</a>;", 
"};", 
"", 
"static void *<a class=\"id\" href=\"#input_devices_seq_start\">input_devices_seq_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#input_seq_state\">input_seq_state</a> *<a class=\"id\" href=\"#state\">state</a> = (union <a class=\"id\" href=\"#input_seq_state\">input_seq_state</a> *)&amp;<a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We need to fit into seq-&gt;private pointer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(sizeof(union <a class=\"id\" href=\"#input_seq_state\">input_seq_state</a>) != sizeof(<a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#mutex_lock_interruptible\">mutex_lock_interruptible</a>(&amp;<a class=\"id\" href=\"#input_mutex\">input_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mutex_acquired\">mutex_acquired</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mutex_acquired\">mutex_acquired</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_list_start\">seq_list_start</a>(&amp;<a class=\"id\" href=\"#input_dev_list\">input_dev_list</a>, *<a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#input_devices_seq_next\">input_devices_seq_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_list_next\">seq_list_next</a>(<a class=\"id\" href=\"#v\">v</a>, &amp;<a class=\"id\" href=\"#input_dev_list\">input_dev_list</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#input_seq_stop\">input_seq_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#input_seq_state\">input_seq_state</a> *<a class=\"id\" href=\"#state\">state</a> = (union <a class=\"id\" href=\"#input_seq_state\">input_seq_state</a> *)&amp;<a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mutex_acquired\">mutex_acquired</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#input_mutex\">input_mutex</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#input_seq_print_bitmap\">input_seq_print_bitmap</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>, int <a class=\"id\" href=\"#max\">max</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#skip_empty\">skip_empty</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[18];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"B: %s=\", <a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#max\">max</a>) - 1; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#input_bits_to_string\">input_bits_to_string</a>(<a class=\"id\" href=\"#buf\">buf</a>, sizeof(<a class=\"id\" href=\"#buf\">buf</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bitmap\">bitmap</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#skip_empty\">skip_empty</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skip_empty\">skip_empty</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"%s%s\", <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#i\">i</a> &gt; 0 ? \" \" : \"\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If no output was produced print a single 0.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skip_empty\">skip_empty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"0\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#seq\">seq</a>, '\\n');", 
"}", 
"", 
"static int <a class=\"id\" href=\"#input_devices_seq_show\">input_devices_seq_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#v\">v</a>, struct <a class=\"id\" href=\"#input_dev\">input_dev</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#kobject_get_path\">kobject_get_path</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"I: Bus=%04x Vendor=%04x Product=%04x Version=%04x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#bustype\">bustype</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#vendor\">vendor</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#product\">product</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#version\">version</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"N: Name=\\\"%s\\\"\\n\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a> ? <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a> : \"\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"P: Phys=%s\\n\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#phys\">phys</a> ? <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#phys\">phys</a> : \"\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"S: Sysfs=%s\\n\", <a class=\"id\" href=\"#path\">path</a> ? <a class=\"id\" href=\"#path\">path</a> : \"\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"U: Uniq=%s\\n\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#uniq\">uniq</a> ? <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#uniq\">uniq</a> : \"\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"H: Handlers=\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#handle\">handle</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#h_list\">h_list</a>, <a class=\"id\" href=\"#d_node\">d_node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"%s \", <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#seq\">seq</a>, '\\n');", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_seq_print_bitmap\">input_seq_print_bitmap</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"EV\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>, <a class=\"id\" href=\"#EV_MAX\">EV_MAX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_KEY\">EV_KEY</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_seq_print_bitmap\">input_seq_print_bitmap</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"KEY\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keybit\">keybit</a>, <a class=\"id\" href=\"#KEY_MAX\">KEY_MAX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_REL\">EV_REL</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_seq_print_bitmap\">input_seq_print_bitmap</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"REL\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#relbit\">relbit</a>, <a class=\"id\" href=\"#REL_MAX\">REL_MAX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_ABS\">EV_ABS</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_seq_print_bitmap\">input_seq_print_bitmap</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"ABS\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#absbit\">absbit</a>, <a class=\"id\" href=\"#ABS_MAX\">ABS_MAX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_MSC\">EV_MSC</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_seq_print_bitmap\">input_seq_print_bitmap</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"MSC\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mscbit\">mscbit</a>, <a class=\"id\" href=\"#MSC_MAX\">MSC_MAX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_LED\">EV_LED</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_seq_print_bitmap\">input_seq_print_bitmap</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"LED\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ledbit\">ledbit</a>, <a class=\"id\" href=\"#LED_MAX\">LED_MAX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_SND\">EV_SND</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_seq_print_bitmap\">input_seq_print_bitmap</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"SND\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sndbit\">sndbit</a>, <a class=\"id\" href=\"#SND_MAX\">SND_MAX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_FF\">EV_FF</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_seq_print_bitmap\">input_seq_print_bitmap</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"FF\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ffbit\">ffbit</a>, <a class=\"id\" href=\"#FF_MAX\">FF_MAX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_SW\">EV_SW</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_seq_print_bitmap\">input_seq_print_bitmap</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"SW\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#swbit\">swbit</a>, <a class=\"id\" href=\"#SW_MAX\">SW_MAX</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#seq\">seq</a>, '\\n');", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#input_devices_seq_ops\">input_devices_seq_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a><span class=\"ts\"/>= <a class=\"id\" href=\"#input_devices_seq_start\">input_devices_seq_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a><span class=\"ts\"/>= <a class=\"id\" href=\"#input_devices_seq_next\">input_devices_seq_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a><span class=\"ts\"/>= <a class=\"id\" href=\"#input_seq_stop\">input_seq_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a><span class=\"ts\"/>= <a class=\"id\" href=\"#input_devices_seq_show\">input_devices_seq_show</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#input_proc_devices_open\">input_proc_devices_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#input_devices_seq_ops\">input_devices_seq_ops</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#input_devices_fileops\">input_devices_fileops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#input_proc_devices_open\">input_proc_devices_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#poll\">poll</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#input_proc_devices_poll\">input_proc_devices_poll</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_release\">seq_release</a>,", 
"};", 
"", 
"static void *<a class=\"id\" href=\"#input_handlers_seq_start\">input_handlers_seq_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#input_seq_state\">input_seq_state</a> *<a class=\"id\" href=\"#state\">state</a> = (union <a class=\"id\" href=\"#input_seq_state\">input_seq_state</a> *)&amp;<a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We need to fit into seq-&gt;private pointer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(sizeof(union <a class=\"id\" href=\"#input_seq_state\">input_seq_state</a>) != sizeof(<a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#mutex_lock_interruptible\">mutex_lock_interruptible</a>(&amp;<a class=\"id\" href=\"#input_mutex\">input_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mutex_acquired\">mutex_acquired</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mutex_acquired\">mutex_acquired</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pos\">pos</a> = *<a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_list_start\">seq_list_start</a>(&amp;<a class=\"id\" href=\"#input_handler_list\">input_handler_list</a>, *<a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#input_handlers_seq_next\">input_handlers_seq_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#input_seq_state\">input_seq_state</a> *<a class=\"id\" href=\"#state\">state</a> = (union <a class=\"id\" href=\"#input_seq_state\">input_seq_state</a> *)&amp;<a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pos\">pos</a> = *<a class=\"id\" href=\"#pos\">pos</a> + 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_list_next\">seq_list_next</a>(<a class=\"id\" href=\"#v\">v</a>, &amp;<a class=\"id\" href=\"#input_handler_list\">input_handler_list</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#input_handlers_seq_show\">input_handlers_seq_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_handler\">input_handler</a> *<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#v\">v</a>, struct <a class=\"id\" href=\"#input_handler\">input_handler</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#input_seq_state\">input_seq_state</a> *<a class=\"id\" href=\"#state\">state</a> = (union <a class=\"id\" href=\"#input_seq_state\">input_seq_state</a> *)&amp;<a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"N: Number=%u Name=%s\", <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#filter\">filter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#seq\">seq</a>, \" (filter)\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#fops\">fops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \" Minor=%d\", <a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#minor\">minor</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#seq\">seq</a>, '\\n');", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#input_handlers_seq_ops\">input_handlers_seq_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a><span class=\"ts\"/>= <a class=\"id\" href=\"#input_handlers_seq_start\">input_handlers_seq_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a><span class=\"ts\"/>= <a class=\"id\" href=\"#input_handlers_seq_next\">input_handlers_seq_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a><span class=\"ts\"/>= <a class=\"id\" href=\"#input_seq_stop\">input_seq_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a><span class=\"ts\"/>= <a class=\"id\" href=\"#input_handlers_seq_show\">input_handlers_seq_show</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#input_proc_handlers_open\">input_proc_handlers_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#input_handlers_seq_ops\">input_handlers_seq_ops</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#input_handlers_fileops\">input_handlers_fileops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#input_proc_handlers_open\">input_proc_handlers_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_release\">seq_release</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#input_proc_init\">input_proc_init</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_bus_input_dir\">proc_bus_input_dir</a> = <a class=\"id\" href=\"#proc_mkdir\">proc_mkdir</a>(\"bus/input\", <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#proc_bus_input_dir\">proc_bus_input_dir</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#proc_create\">proc_create</a>(\"devices\", 0, <a class=\"id\" href=\"#proc_bus_input_dir\">proc_bus_input_dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#input_devices_fileops\">input_devices_fileops</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#entry\">entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail1\">fail1</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#proc_create\">proc_create</a>(\"handlers\", 0, <a class=\"id\" href=\"#proc_bus_input_dir\">proc_bus_input_dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#input_handlers_fileops\">input_handlers_fileops</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#entry\">entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail2\">fail2</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#fail2\">fail2</a>:<span class=\"ts\"/><a class=\"id\" href=\"#remove_proc_entry\">remove_proc_entry</a>(\"devices\", <a class=\"id\" href=\"#proc_bus_input_dir\">proc_bus_input_dir</a>);", 
" <a class=\"id\" href=\"#fail1\">fail1</a>: <a class=\"id\" href=\"#remove_proc_entry\">remove_proc_entry</a>(\"bus/input\", <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#input_proc_exit\">input_proc_exit</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remove_proc_entry\">remove_proc_entry</a>(\"devices\", <a class=\"id\" href=\"#proc_bus_input_dir\">proc_bus_input_dir</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remove_proc_entry\">remove_proc_entry</a>(\"handlers\", <a class=\"id\" href=\"#proc_bus_input_dir\">proc_bus_input_dir</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remove_proc_entry\">remove_proc_entry</a>(\"bus/input\", <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"#else <span class=\"comment\">/* !CONFIG_PROC_FS */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#input_wakeup_procfs_readers\">input_wakeup_procfs_readers</a>(void) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#input_proc_init\">input_proc_init</a>(void) { return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#input_proc_exit\">input_proc_exit</a>(void) { }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INPUT_DEV_STRING_ATTR_SHOW\">INPUT_DEV_STRING_ATTR_SHOW</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#input_dev_show_\">input_dev_show_</a>##<a class=\"id\" href=\"#name\">name</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     char *<a class=\"id\" href=\"#buf\">buf</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#input_dev\">input_dev</a> = <a class=\"id\" href=\"#to_input_dev\">to_input_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#scnprintf\">scnprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, \"%s\\n\",<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#input_dev\">input_dev</a>-><a class=\"id\" href=\"#name\">name</a> ? <a class=\"id\" href=\"#input_dev\">input_dev</a>-><a class=\"id\" href=\"#name\">name</a> : \"\");<span class=\"ts\"/>\\", 
"}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#input_dev_show_\">input_dev_show_</a>##<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"", 
"<a class=\"id\" href=\"#INPUT_DEV_STRING_ATTR_SHOW\">INPUT_DEV_STRING_ATTR_SHOW</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<a class=\"id\" href=\"#INPUT_DEV_STRING_ATTR_SHOW\">INPUT_DEV_STRING_ATTR_SHOW</a>(<a class=\"id\" href=\"#phys\">phys</a>);", 
"<a class=\"id\" href=\"#INPUT_DEV_STRING_ATTR_SHOW\">INPUT_DEV_STRING_ATTR_SHOW</a>(<a class=\"id\" href=\"#uniq\">uniq</a>);", 
"", 
"static int <a class=\"id\" href=\"#input_print_modalias_bits\">input_print_modalias_bits</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     char <a class=\"id\" href=\"#name\">name</a>, unsigned long *<a class=\"id\" href=\"#bm\">bm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#min_bit\">min_bit</a>, unsigned int <a class=\"id\" href=\"#max_bit\">max_bit</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = 0, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#size\">size</a>, 0), \"%c\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#min_bit\">min_bit</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#max_bit\">max_bit</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bm\">bm</a>[<a class=\"id\" href=\"#BIT_WORD\">BIT_WORD</a>(<a class=\"id\" href=\"#i\">i</a>)] &amp; <a class=\"id\" href=\"#BIT_MASK\">BIT_MASK</a>(<a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#len\">len</a>, 0), \"%X,\", <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#input_print_modalias\">input_print_modalias</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#size\">size</a>, struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#id\">id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#add_cr\">add_cr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#size\">size</a>, 0),", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"input:b%04Xv%04Xp%04Xe%04X-\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#bustype\">bustype</a>, <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#vendor\">vendor</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#product\">product</a>, <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#version\">version</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#input_print_modalias_bits\">input_print_modalias_bits</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>'e', <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#evbit\">evbit</a>, 0, <a class=\"id\" href=\"#EV_MAX\">EV_MAX</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#input_print_modalias_bits\">input_print_modalias_bits</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>'k', <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#keybit\">keybit</a>, <a class=\"id\" href=\"#KEY_MIN_INTERESTING\">KEY_MIN_INTERESTING</a>, <a class=\"id\" href=\"#KEY_MAX\">KEY_MAX</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#input_print_modalias_bits\">input_print_modalias_bits</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>'r', <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#relbit\">relbit</a>, 0, <a class=\"id\" href=\"#REL_MAX\">REL_MAX</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#input_print_modalias_bits\">input_print_modalias_bits</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>'a', <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#absbit\">absbit</a>, 0, <a class=\"id\" href=\"#ABS_MAX\">ABS_MAX</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#input_print_modalias_bits\">input_print_modalias_bits</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>'m', <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#mscbit\">mscbit</a>, 0, <a class=\"id\" href=\"#MSC_MAX\">MSC_MAX</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#input_print_modalias_bits\">input_print_modalias_bits</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>'l', <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#ledbit\">ledbit</a>, 0, <a class=\"id\" href=\"#LED_MAX\">LED_MAX</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#input_print_modalias_bits\">input_print_modalias_bits</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>'s', <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#sndbit\">sndbit</a>, 0, <a class=\"id\" href=\"#SND_MAX\">SND_MAX</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#input_print_modalias_bits\">input_print_modalias_bits</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>'f', <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#ffbit\">ffbit</a>, 0, <a class=\"id\" href=\"#FF_MAX\">FF_MAX</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#input_print_modalias_bits\">input_print_modalias_bits</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>'w', <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#swbit\">swbit</a>, 0, <a class=\"id\" href=\"#SW_MAX\">SW_MAX</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#add_cr\">add_cr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#len\">len</a>, 0), \"\\n\");", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#input_dev_show_modalias\">input_dev_show_modalias</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#to_input_dev\">to_input_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#input_print_modalias\">input_print_modalias</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#id\">id</a>, 1);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min_t\">min_t</a>(int, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"}", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#modalias\">modalias</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#input_dev_show_modalias\">input_dev_show_modalias</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"static struct <a class=\"id\" href=\"#attribute\">attribute</a> *<a class=\"id\" href=\"#input_dev_attrs\">input_dev_attrs</a>[] = {", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_name\">dev_attr_name</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_phys\">dev_attr_phys</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_uniq\">dev_attr_uniq</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_modalias\">dev_attr_modalias</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#attribute_group\">attribute_group</a> <a class=\"id\" href=\"#input_dev_attr_group\">input_dev_attr_group</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#attrs\">attrs</a><span class=\"ts\"/>= <a class=\"id\" href=\"#input_dev_attrs\">input_dev_attrs</a>,", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INPUT_DEV_ID_ATTR\">INPUT_DEV_ID_ATTR</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#input_dev_show_id_\">input_dev_show_id_</a>##<a class=\"id\" href=\"#name\">name</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#input_dev\">input_dev</a> = <a class=\"id\" href=\"#to_input_dev\">to_input_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#scnprintf\">scnprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, \"%04x\\n\", <a class=\"id\" href=\"#input_dev\">input_dev</a>-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#name\">name</a>);<span class=\"ts\"/>\\", 
"}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#input_dev_show_id_\">input_dev_show_id_</a>##<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"", 
"<a class=\"id\" href=\"#INPUT_DEV_ID_ATTR\">INPUT_DEV_ID_ATTR</a>(<a class=\"id\" href=\"#bustype\">bustype</a>);", 
"<a class=\"id\" href=\"#INPUT_DEV_ID_ATTR\">INPUT_DEV_ID_ATTR</a>(<a class=\"id\" href=\"#vendor\">vendor</a>);", 
"<a class=\"id\" href=\"#INPUT_DEV_ID_ATTR\">INPUT_DEV_ID_ATTR</a>(<a class=\"id\" href=\"#product\">product</a>);", 
"<a class=\"id\" href=\"#INPUT_DEV_ID_ATTR\">INPUT_DEV_ID_ATTR</a>(<a class=\"id\" href=\"#version\">version</a>);", 
"", 
"static struct <a class=\"id\" href=\"#attribute\">attribute</a> *<a class=\"id\" href=\"#input_dev_id_attrs\">input_dev_id_attrs</a>[] = {", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_bustype\">dev_attr_bustype</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_vendor\">dev_attr_vendor</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_product\">dev_attr_product</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_version\">dev_attr_version</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#attribute_group\">attribute_group</a> <a class=\"id\" href=\"#input_dev_id_attr_group\">input_dev_id_attr_group</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/>= \"id\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#attrs\">attrs</a><span class=\"ts\"/>= <a class=\"id\" href=\"#input_dev_id_attrs\">input_dev_id_attrs</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#input_print_bitmap\">input_print_bitmap</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#buf_size\">buf_size</a>, unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#max\">max</a>, int <a class=\"id\" href=\"#add_cr\">add_cr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#skip_empty\">skip_empty</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#max\">max</a>) - 1; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#input_bits_to_string\">input_bits_to_string</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#buf_size\">buf_size</a> - <a class=\"id\" href=\"#len\">len</a>, 0),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#bitmap\">bitmap</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#skip_empty\">skip_empty</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skip_empty\">skip_empty</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#buf_size\">buf_size</a> - <a class=\"id\" href=\"#len\">len</a>, 0), \" \");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If no output was produced print a single 0.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#buf_size\">buf_size</a>, \"%d\", 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#add_cr\">add_cr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#buf_size\">buf_size</a> - <a class=\"id\" href=\"#len\">len</a>, 0), \"\\n\");", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INPUT_DEV_CAP_ATTR\">INPUT_DEV_CAP_ATTR</a>(<a class=\"id\" href=\"#ev\">ev</a>, <a class=\"id\" href=\"#bm\">bm</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#input_dev_show_cap_\">input_dev_show_cap_</a>##<a class=\"id\" href=\"#bm\">bm</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       char *<a class=\"id\" href=\"#buf\">buf</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#input_dev\">input_dev</a> = <a class=\"id\" href=\"#to_input_dev\">to_input_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#input_print_bitmap\">input_print_bitmap</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#input_dev\">input_dev</a>-><a class=\"id\" href=\"#bm\">bm</a>##<a class=\"id\" href=\"#bit\">bit</a>, <a class=\"id\" href=\"#ev\">ev</a>##<a class=\"id\" href=\"#_MAX\">_MAX</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#true\">true</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min_t\">min_t</a>(int, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#input_dev_show_cap_\">input_dev_show_cap_</a>##<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"", 
"<a class=\"id\" href=\"#INPUT_DEV_CAP_ATTR\">INPUT_DEV_CAP_ATTR</a>(<a class=\"id\" href=\"#EV\">EV</a>, <a class=\"id\" href=\"#ev\">ev</a>);", 
"<a class=\"id\" href=\"#INPUT_DEV_CAP_ATTR\">INPUT_DEV_CAP_ATTR</a>(<a class=\"id\" href=\"#KEY\">KEY</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"<a class=\"id\" href=\"#INPUT_DEV_CAP_ATTR\">INPUT_DEV_CAP_ATTR</a>(<a class=\"id\" href=\"#REL\">REL</a>, <a class=\"id\" href=\"#rel\">rel</a>);", 
"<a class=\"id\" href=\"#INPUT_DEV_CAP_ATTR\">INPUT_DEV_CAP_ATTR</a>(<a class=\"id\" href=\"#ABS\">ABS</a>, <a class=\"id\" href=\"#abs\">abs</a>);", 
"<a class=\"id\" href=\"#INPUT_DEV_CAP_ATTR\">INPUT_DEV_CAP_ATTR</a>(<a class=\"id\" href=\"#MSC\">MSC</a>, <a class=\"id\" href=\"#msc\">msc</a>);", 
"<a class=\"id\" href=\"#INPUT_DEV_CAP_ATTR\">INPUT_DEV_CAP_ATTR</a>(<a class=\"id\" href=\"#LED\">LED</a>, <a class=\"id\" href=\"#led\">led</a>);", 
"<a class=\"id\" href=\"#INPUT_DEV_CAP_ATTR\">INPUT_DEV_CAP_ATTR</a>(<a class=\"id\" href=\"#SND\">SND</a>, <a class=\"id\" href=\"#snd\">snd</a>);", 
"<a class=\"id\" href=\"#INPUT_DEV_CAP_ATTR\">INPUT_DEV_CAP_ATTR</a>(<a class=\"id\" href=\"#FF\">FF</a>, <a class=\"id\" href=\"#ff\">ff</a>);", 
"<a class=\"id\" href=\"#INPUT_DEV_CAP_ATTR\">INPUT_DEV_CAP_ATTR</a>(<a class=\"id\" href=\"#SW\">SW</a>, <a class=\"id\" href=\"#sw\">sw</a>);", 
"", 
"static struct <a class=\"id\" href=\"#attribute\">attribute</a> *<a class=\"id\" href=\"#input_dev_caps_attrs\">input_dev_caps_attrs</a>[] = {", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_ev\">dev_attr_ev</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_key\">dev_attr_key</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_rel\">dev_attr_rel</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_abs\">dev_attr_abs</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_msc\">dev_attr_msc</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_led\">dev_attr_led</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_snd\">dev_attr_snd</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_ff\">dev_attr_ff</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_sw\">dev_attr_sw</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#attribute_group\">attribute_group</a> <a class=\"id\" href=\"#input_dev_caps_attr_group\">input_dev_caps_attr_group</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/>= \"capabilities\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#attrs\">attrs</a><span class=\"ts\"/>= <a class=\"id\" href=\"#input_dev_caps_attrs\">input_dev_caps_attrs</a>,", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#attribute_group\">attribute_group</a> *<a class=\"id\" href=\"#input_dev_attr_groups\">input_dev_attr_groups</a>[] = {", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#input_dev_attr_group\">input_dev_attr_group</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#input_dev_id_attr_group\">input_dev_id_attr_group</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#input_dev_caps_attr_group\">input_dev_caps_attr_group</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"};", 
"", 
"static void <a class=\"id\" href=\"#input_dev_release\">input_dev_release</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#device\">device</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#to_input_dev\">to_input_dev</a>(<a class=\"id\" href=\"#device\">device</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_ff_destroy\">input_ff_destroy</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_mt_destroy_slots\">input_mt_destroy_slots</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#absinfo\">absinfo</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Input uevent interface - loading event handlers based on</span>", 
"<span class=\"comment\"> * device bitfields.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#input_add_uevent_bm_var\">input_add_uevent_bm_var</a>(struct <a class=\"id\" href=\"#kobj_uevent_env\">kobj_uevent_env</a> *<a class=\"id\" href=\"#env\">env</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const char *<a class=\"id\" href=\"#name\">name</a>, unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>, int <a class=\"id\" href=\"#max\">max</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#add_uevent_var\">add_uevent_var</a>(<a class=\"id\" href=\"#env\">env</a>, \"%s=\", <a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#input_print_bitmap\">input_print_bitmap</a>(&amp;<a class=\"id\" href=\"#env\">env</a>-><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#env\">env</a>-><a class=\"id\" href=\"#buflen\">buflen</a> - 1],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(<a class=\"id\" href=\"#env\">env</a>-><a class=\"id\" href=\"#buf\">buf</a>) - <a class=\"id\" href=\"#env\">env</a>-><a class=\"id\" href=\"#buflen\">buflen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#max\">max</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> >= (sizeof(<a class=\"id\" href=\"#env\">env</a>-><a class=\"id\" href=\"#buf\">buf</a>) - <a class=\"id\" href=\"#env\">env</a>-><a class=\"id\" href=\"#buflen\">buflen</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#env\">env</a>-><a class=\"id\" href=\"#buflen\">buflen</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#input_add_uevent_modalias_var\">input_add_uevent_modalias_var</a>(struct <a class=\"id\" href=\"#kobj_uevent_env\">kobj_uevent_env</a> *<a class=\"id\" href=\"#env\">env</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#add_uevent_var\">add_uevent_var</a>(<a class=\"id\" href=\"#env\">env</a>, \"MODALIAS=\"))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#input_print_modalias\">input_print_modalias</a>(&amp;<a class=\"id\" href=\"#env\">env</a>-><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#env\">env</a>-><a class=\"id\" href=\"#buflen\">buflen</a> - 1],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   sizeof(<a class=\"id\" href=\"#env\">env</a>-><a class=\"id\" href=\"#buf\">buf</a>) - <a class=\"id\" href=\"#env\">env</a>-><a class=\"id\" href=\"#buflen\">buflen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#dev\">dev</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> >= (sizeof(<a class=\"id\" href=\"#env\">env</a>-><a class=\"id\" href=\"#buf\">buf</a>) - <a class=\"id\" href=\"#env\">env</a>-><a class=\"id\" href=\"#buflen\">buflen</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#env\">env</a>-><a class=\"id\" href=\"#buflen\">buflen</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INPUT_ADD_HOTPLUG_VAR\">INPUT_ADD_HOTPLUG_VAR</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#val\">val</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#add_uevent_var\">add_uevent_var</a>(<a class=\"id\" href=\"#env\">env</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#val\">val</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INPUT_ADD_HOTPLUG_BM_VAR\">INPUT_ADD_HOTPLUG_BM_VAR</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#max\">max</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#input_add_uevent_bm_var\">input_add_uevent_bm_var</a>(<a class=\"id\" href=\"#env\">env</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#max\">max</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INPUT_ADD_HOTPLUG_MODALIAS_VAR\">INPUT_ADD_HOTPLUG_MODALIAS_VAR</a>(<a class=\"id\" href=\"#dev\">dev</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#input_add_uevent_modalias_var\">input_add_uevent_modalias_var</a>(<a class=\"id\" href=\"#env\">env</a>, <a class=\"id\" href=\"#dev\">dev</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"static int <a class=\"id\" href=\"#input_dev_uevent\">input_dev_uevent</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#device\">device</a>, struct <a class=\"id\" href=\"#kobj_uevent_env\">kobj_uevent_env</a> *<a class=\"id\" href=\"#env\">env</a>)", 
"{", 
];
xr_frag_insert('l/46/865005d233742b4dfc4aeca8b483fcaf2ae685.xr', __xr_tmp);
