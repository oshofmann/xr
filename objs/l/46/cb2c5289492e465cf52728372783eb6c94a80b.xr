var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_AUTH_GSS\">RPC_AUTH_GSS</a>   = 6,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_AUTH_MAXFLAVOR\">RPC_AUTH_MAXFLAVOR</a> = 8,", 
"<span class=\"ts\"/><span class=\"comment\">/* pseudoflavors: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_AUTH_GSS_KRB5\">RPC_AUTH_GSS_KRB5</a>  = 390003,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_AUTH_GSS_KRB5I\">RPC_AUTH_GSS_KRB5I</a> = 390004,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_AUTH_GSS_KRB5P\">RPC_AUTH_GSS_KRB5P</a> = 390005,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_AUTH_GSS_LKEY\">RPC_AUTH_GSS_LKEY</a>  = 390006,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_AUTH_GSS_LKEYI\">RPC_AUTH_GSS_LKEYI</a> = 390007,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_AUTH_GSS_LKEYP\">RPC_AUTH_GSS_LKEYP</a> = 390008,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_AUTH_GSS_SPKM\">RPC_AUTH_GSS_SPKM</a>  = 390009,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_AUTH_GSS_SPKMI\">RPC_AUTH_GSS_SPKMI</a> = 390010,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_AUTH_GSS_SPKMP\">RPC_AUTH_GSS_SPKMP</a> = 390011,", 
"};", 
"", 
"<span class=\"comment\">/* Maximum size (in bytes) of an rpc credential or verifier */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPC_MAX_AUTH_SIZE\">RPC_MAX_AUTH_SIZE</a> (400)", 
"", 
"enum <a class=\"id\" href=\"#rpc_msg_type\">rpc_msg_type</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_CALL\">RPC_CALL</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_REPLY\">RPC_REPLY</a> = 1", 
"};", 
"", 
"enum <a class=\"id\" href=\"#rpc_reply_stat\">rpc_reply_stat</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_MSG_ACCEPTED\">RPC_MSG_ACCEPTED</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_MSG_DENIED\">RPC_MSG_DENIED</a> = 1", 
"};", 
"", 
"enum <a class=\"id\" href=\"#rpc_accept_stat\">rpc_accept_stat</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_SUCCESS\">RPC_SUCCESS</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_PROG_UNAVAIL\">RPC_PROG_UNAVAIL</a> = 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_PROG_MISMATCH\">RPC_PROG_MISMATCH</a> = 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_PROC_UNAVAIL\">RPC_PROC_UNAVAIL</a> = 3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_GARBAGE_ARGS\">RPC_GARBAGE_ARGS</a> = 4,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_SYSTEM_ERR\">RPC_SYSTEM_ERR</a> = 5,", 
"<span class=\"ts\"/><span class=\"comment\">/* internal use only */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_DROP_REPLY\">RPC_DROP_REPLY</a> = 60000,", 
"};", 
"", 
"enum <a class=\"id\" href=\"#rpc_reject_stat\">rpc_reject_stat</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_MISMATCH\">RPC_MISMATCH</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_AUTH_ERROR\">RPC_AUTH_ERROR</a> = 1", 
"};", 
"", 
"enum <a class=\"id\" href=\"#rpc_auth_stat\">rpc_auth_stat</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_AUTH_OK\">RPC_AUTH_OK</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_AUTH_BADCRED\">RPC_AUTH_BADCRED</a> = 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_AUTH_REJECTEDCRED\">RPC_AUTH_REJECTEDCRED</a> = 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_AUTH_BADVERF\">RPC_AUTH_BADVERF</a> = 3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_AUTH_REJECTEDVERF\">RPC_AUTH_REJECTEDVERF</a> = 4,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPC_AUTH_TOOWEAK\">RPC_AUTH_TOOWEAK</a> = 5,", 
"<span class=\"ts\"/><span class=\"comment\">/* RPCSEC_GSS errors */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPCSEC_GSS_CREDPROBLEM\">RPCSEC_GSS_CREDPROBLEM</a> = 13,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPCSEC_GSS_CTXPROBLEM\">RPCSEC_GSS_CTXPROBLEM</a> = 14", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPC_MAXNETNAMELEN\">RPC_MAXNETNAMELEN</a><span class=\"ts\"/>256", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * From RFC 1831:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * \"A record is composed of one or more record fragments.  A record</span>", 
"<span class=\"comment\"> *  fragment is a four-byte header followed by 0 to (2**31) - 1 bytes of</span>", 
"<span class=\"comment\"> *  fragment data.  The bytes encode an unsigned binary number; as with</span>", 
"<span class=\"comment\"> *  XDR integers, the byte order is from highest to lowest.  The number</span>", 
"<span class=\"comment\"> *  encodes two values -- a boolean which indicates whether the fragment</span>", 
"<span class=\"comment\"> *  is the last fragment of the record (bit value 1 implies the fragment</span>", 
"<span class=\"comment\"> *  is the last fragment) and a 31-bit unsigned binary value which is the</span>", 
"<span class=\"comment\"> *  length in bytes of the fragment's data.  The boolean value is the</span>", 
"<span class=\"comment\"> *  highest-order bit of the header; the length is the 31 low-order bits.</span>", 
"<span class=\"comment\"> *  (Note that this record specification is NOT in XDR standard form!)\"</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The Linux RPC client always sends its requests in a single record</span>", 
"<span class=\"comment\"> * fragment, limiting the maximum payload size for stream transports to</span>", 
"<span class=\"comment\"> * 2GB.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"typedef <a class=\"id\" href=\"#__be32\">__be32</a><span class=\"ts\"/><a class=\"id\" href=\"#rpc_fraghdr\">rpc_fraghdr</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#RPC_LAST_STREAM_FRAGMENT\">RPC_LAST_STREAM_FRAGMENT</a><span class=\"ts\"/>(1U << 31)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#RPC_FRAGMENT_SIZE_MASK\">RPC_FRAGMENT_SIZE_MASK</a><span class=\"ts\"/><span class=\"ts\"/>(~<a class=\"id\" href=\"#RPC_LAST_STREAM_FRAGMENT\">RPC_LAST_STREAM_FRAGMENT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#RPC_MAX_FRAGMENT_SIZE\">RPC_MAX_FRAGMENT_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>((1U << 31) - 1)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * RPC call and reply header size as number of 32bit words (verifier</span>", 
"<span class=\"comment\"> * size computed separately, see below)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPC_CALLHDRSIZE\">RPC_CALLHDRSIZE</a><span class=\"ts\"/><span class=\"ts\"/>(6)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPC_REPHDRSIZE\">RPC_REPHDRSIZE</a><span class=\"ts\"/><span class=\"ts\"/>(4)", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Maximum RPC header size, including authentication,</span>", 
"<span class=\"comment\"> * as number of 32bit words (see RFCs 1831, 1832).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>xid<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    1 xdr unit = 4 bytes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>mtype<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    1</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>rpc_version<span class=\"ts\"/><span class=\"ts\"/>    1</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>program<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    1</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>prog_version<span class=\"ts\"/><span class=\"ts\"/>    1</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>procedure<span class=\"ts\"/><span class=\"ts\"/>    1</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cred {</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    flavor<span class=\"ts\"/><span class=\"ts\"/>    1</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    length<span class=\"ts\"/><span class=\"ts\"/>    1</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    body&lt;RPC_MAX_AUTH_SIZE&gt; 100 xdr units = 400 bytes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>}</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>verf {</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    flavor<span class=\"ts\"/><span class=\"ts\"/>    1</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    length<span class=\"ts\"/><span class=\"ts\"/>    1</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    body&lt;RPC_MAX_AUTH_SIZE&gt; 100 xdr units = 400 bytes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>}</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>TOTAL<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    210 xdr units = 840 bytes</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPC_MAX_HEADER_WITH_AUTH\">RPC_MAX_HEADER_WITH_AUTH</a> \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#RPC_CALLHDRSIZE\">RPC_CALLHDRSIZE</a> + 2*(2+<a class=\"id\" href=\"#RPC_MAX_AUTH_SIZE\">RPC_MAX_AUTH_SIZE</a>/4))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * RFC1833/RFC3530 rpcbind (v3+) well-known netid's.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPCBIND_NETID_UDP\">RPCBIND_NETID_UDP</a><span class=\"ts\"/>\"udp\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPCBIND_NETID_TCP\">RPCBIND_NETID_TCP</a><span class=\"ts\"/>\"tcp\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPCBIND_NETID_UDP6\">RPCBIND_NETID_UDP6</a><span class=\"ts\"/>\"udp6\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPCBIND_NETID_TCP6\">RPCBIND_NETID_TCP6</a><span class=\"ts\"/>\"tcp6\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note that RFC 1833 does not put any size restrictions on the</span>", 
"<span class=\"comment\"> * netid string, but all currently defined netid's fit in 4 bytes.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPCBIND_MAXNETIDLEN\">RPCBIND_MAXNETIDLEN</a><span class=\"ts\"/>(4u)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Universal addresses are introduced in RFC 1833 and further spelled</span>", 
"<span class=\"comment\"> * out in RFC 3530.  RPCBIND_MAXUADDRLEN defines a maximum byte length</span>", 
"<span class=\"comment\"> * of a universal address for use in allocating buffers and character</span>", 
"<span class=\"comment\"> * arrays.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Quoting RFC 3530, section 2.2:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For TCP over IPv4 and for UDP over IPv4, the format of r_addr is the</span>", 
"<span class=\"comment\"> * US-ASCII string:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>h1.h2.h3.h4.p1.p2</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The prefix, \"h1.h2.h3.h4\", is the standard textual form for</span>", 
"<span class=\"comment\"> * representing an IPv4 address, which is always four octets long.</span>", 
"<span class=\"comment\"> * Assuming big-endian ordering, h1, h2, h3, and h4, are respectively,</span>", 
"<span class=\"comment\"> * the first through fourth octets each converted to ASCII-decimal.</span>", 
"<span class=\"comment\"> * Assuming big-endian ordering, p1 and p2 are, respectively, the first</span>", 
"<span class=\"comment\"> * and second octets each converted to ASCII-decimal.  For example, if a</span>", 
"<span class=\"comment\"> * host, in big-endian order, has an address of 0x0A010307 and there is</span>", 
"<span class=\"comment\"> * a service listening on, in big endian order, port 0x020F (decimal</span>", 
"<span class=\"comment\"> * 527), then the complete universal address is \"10.1.3.7.2.15\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ...</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For TCP over IPv6 and for UDP over IPv6, the format of r_addr is the</span>", 
"<span class=\"comment\"> * US-ASCII string:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>x1:x2:x3:x4:x5:x6:x7:x8.p1.p2</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The suffix \"p1.p2\" is the service port, and is computed the same way</span>", 
"<span class=\"comment\"> * as with universal addresses for TCP and UDP over IPv4.  The prefix,</span>", 
"<span class=\"comment\"> * \"x1:x2:x3:x4:x5:x6:x7:x8\", is the standard textual form for</span>", 
"<span class=\"comment\"> * representing an IPv6 address as defined in Section 2.2 of [RFC2373].</span>", 
"<span class=\"comment\"> * Additionally, the two alternative forms specified in Section 2.2 of</span>", 
"<span class=\"comment\"> * [RFC2373] are also acceptable.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#inet\">inet</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* Maximum size of the port number part of a universal address */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPCBIND_MAXUADDRPLEN\">RPCBIND_MAXUADDRPLEN</a><span class=\"ts\"/>sizeof(\".255.255\")", 
"", 
"<span class=\"comment\">/* Maximum size of an IPv4 universal address */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPCBIND_MAXUADDR4LEN\">RPCBIND_MAXUADDR4LEN</a><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#INET_ADDRSTRLEN\">INET_ADDRSTRLEN</a> + <a class=\"id\" href=\"#RPCBIND_MAXUADDRPLEN\">RPCBIND_MAXUADDRPLEN</a>)", 
"", 
"<span class=\"comment\">/* Maximum size of an IPv6 universal address */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPCBIND_MAXUADDR6LEN\">RPCBIND_MAXUADDR6LEN</a><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#INET6_ADDRSTRLEN\">INET6_ADDRSTRLEN</a> + <a class=\"id\" href=\"#RPCBIND_MAXUADDRPLEN\">RPCBIND_MAXUADDRPLEN</a>)", 
"", 
"<span class=\"comment\">/* Assume INET6_ADDRSTRLEN will always be larger than INET_ADDRSTRLEN... */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPCBIND_MAXUADDRLEN\">RPCBIND_MAXUADDRLEN</a><span class=\"ts\"/><a class=\"id\" href=\"#RPCBIND_MAXUADDR6LEN\">RPCBIND_MAXUADDR6LEN</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_SUNRPC_MSGPROT_H_ */</span>", 
];
xr_frag_insert('l/46/cb2c5289492e465cf52728372783eb6c94a80b.xr', __xr_tmp);
