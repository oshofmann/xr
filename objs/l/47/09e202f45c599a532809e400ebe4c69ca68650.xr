var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * An extensible bitmap is a bitmap that supports an</span>", 
"<span class=\"comment\"> * arbitrary number of bits.  Extensible bitmaps are</span>", 
"<span class=\"comment\"> * used to represent sets of values, such as types,</span>", 
"<span class=\"comment\"> * roles, categories, and classes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Each extensible bitmap is implemented as a linked</span>", 
"<span class=\"comment\"> * list of bitmap nodes, where each bitmap node has</span>", 
"<span class=\"comment\"> * an explicitly specified starting bit position within</span>", 
"<span class=\"comment\"> * the total bitmap.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author : Stephen Smalley, &lt;sds@epoch.ncsc.mil&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_SS_EBITMAP_H_\">_SS_EBITMAP_H_</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_SS_EBITMAP_H_\">_SS_EBITMAP_H_</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netlabel\">netlabel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EBITMAP_UNIT_NUMS\">EBITMAP_UNIT_NUMS</a><span class=\"ts\"/>((32 - sizeof(void *) - sizeof(<a class=\"id\" href=\"#u32\">u32</a>))<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>/ sizeof(unsigned long))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EBITMAP_UNIT_SIZE\">EBITMAP_UNIT_SIZE</a><span class=\"ts\"/><a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EBITMAP_SIZE\">EBITMAP_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#EBITMAP_UNIT_NUMS\">EBITMAP_UNIT_NUMS</a> * <a class=\"id\" href=\"#EBITMAP_UNIT_SIZE\">EBITMAP_UNIT_SIZE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EBITMAP_BIT\">EBITMAP_BIT</a><span class=\"ts\"/><span class=\"ts\"/>1ULL", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EBITMAP_SHIFT_UNIT_SIZE\">EBITMAP_SHIFT_UNIT_SIZE</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(((<a class=\"id\" href=\"#x\">x</a>) >> <a class=\"id\" href=\"#EBITMAP_UNIT_SIZE\">EBITMAP_UNIT_SIZE</a> / 2) >> <a class=\"id\" href=\"#EBITMAP_UNIT_SIZE\">EBITMAP_UNIT_SIZE</a> / 2)", 
"", 
"struct <a class=\"id\" href=\"#ebitmap_node\">ebitmap_node</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ebitmap_node\">ebitmap_node</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#maps\">maps</a>[<a class=\"id\" href=\"#EBITMAP_UNIT_NUMS\">EBITMAP_UNIT_NUMS</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#startbit\">startbit</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ebitmap_node\">ebitmap_node</a> *<a class=\"id\" href=\"#node\">node</a>;<span class=\"ts\"/><span class=\"comment\">/* first node in the bitmap */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#highbit\">highbit</a>;<span class=\"ts\"/><span class=\"comment\">/* highest position in the total bitmap */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ebitmap_length\">ebitmap_length</a>(<a class=\"id\" href=\"#e\">e</a>) ((<a class=\"id\" href=\"#e\">e</a>)-><a class=\"id\" href=\"#highbit\">highbit</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ebitmap_startbit\">ebitmap_startbit</a>(<a class=\"id\" href=\"#e\">e</a>) ((<a class=\"id\" href=\"#e\">e</a>)-><a class=\"id\" href=\"#node\">node</a> ? (<a class=\"id\" href=\"#e\">e</a>)-><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#startbit\">startbit</a> : 0)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#ebitmap_start_positive\">ebitmap_start_positive</a>(struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#e\">e</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#ebitmap_node\">ebitmap_node</a> **<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ofs\">ofs</a>;", 
"", 
"<span class=\"ts\"/>for (*<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#node\">node</a>; *<a class=\"id\" href=\"#n\">n</a>; *<a class=\"id\" href=\"#n\">n</a> = (*<a class=\"id\" href=\"#n\">n</a>)-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ofs\">ofs</a> = <a class=\"id\" href=\"#find_first_bit\">find_first_bit</a>((*<a class=\"id\" href=\"#n\">n</a>)-><a class=\"id\" href=\"#maps\">maps</a>, <a class=\"id\" href=\"#EBITMAP_SIZE\">EBITMAP_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ofs\">ofs</a> &lt; <a class=\"id\" href=\"#EBITMAP_SIZE\">EBITMAP_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (*<a class=\"id\" href=\"#n\">n</a>)-><a class=\"id\" href=\"#startbit\">startbit</a> + <a class=\"id\" href=\"#ofs\">ofs</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ebitmap_length\">ebitmap_length</a>(<a class=\"id\" href=\"#e\">e</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ebitmap_init\">ebitmap_init</a>(struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#e\">e</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#e\">e</a>, 0, sizeof(*<a class=\"id\" href=\"#e\">e</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#ebitmap_next_positive\">ebitmap_next_positive</a>(struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#e\">e</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#ebitmap_node\">ebitmap_node</a> **<a class=\"id\" href=\"#n\">n</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#bit\">bit</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ofs\">ofs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ofs\">ofs</a> = <a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>((*<a class=\"id\" href=\"#n\">n</a>)-><a class=\"id\" href=\"#maps\">maps</a>, <a class=\"id\" href=\"#EBITMAP_SIZE\">EBITMAP_SIZE</a>, <a class=\"id\" href=\"#bit\">bit</a> - (*<a class=\"id\" href=\"#n\">n</a>)-><a class=\"id\" href=\"#startbit\">startbit</a> + 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ofs\">ofs</a> &lt; <a class=\"id\" href=\"#EBITMAP_SIZE\">EBITMAP_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ofs\">ofs</a> + (*<a class=\"id\" href=\"#n\">n</a>)-><a class=\"id\" href=\"#startbit\">startbit</a>;", 
"", 
"<span class=\"ts\"/>for (*<a class=\"id\" href=\"#n\">n</a> = (*<a class=\"id\" href=\"#n\">n</a>)-><a class=\"id\" href=\"#next\">next</a>; *<a class=\"id\" href=\"#n\">n</a>; *<a class=\"id\" href=\"#n\">n</a> = (*<a class=\"id\" href=\"#n\">n</a>)-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ofs\">ofs</a> = <a class=\"id\" href=\"#find_first_bit\">find_first_bit</a>((*<a class=\"id\" href=\"#n\">n</a>)-><a class=\"id\" href=\"#maps\">maps</a>, <a class=\"id\" href=\"#EBITMAP_SIZE\">EBITMAP_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ofs\">ofs</a> &lt; <a class=\"id\" href=\"#EBITMAP_SIZE\">EBITMAP_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ofs\">ofs</a> + (*<a class=\"id\" href=\"#n\">n</a>)-><a class=\"id\" href=\"#startbit\">startbit</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ebitmap_length\">ebitmap_length</a>(<a class=\"id\" href=\"#e\">e</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EBITMAP_NODE_INDEX\">EBITMAP_NODE_INDEX</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#bit\">bit</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(((<a class=\"id\" href=\"#bit\">bit</a>) - (<a class=\"id\" href=\"#node\">node</a>)-><a class=\"id\" href=\"#startbit\">startbit</a>) / <a class=\"id\" href=\"#EBITMAP_UNIT_SIZE\">EBITMAP_UNIT_SIZE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EBITMAP_NODE_OFFSET\">EBITMAP_NODE_OFFSET</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#bit\">bit</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(((<a class=\"id\" href=\"#bit\">bit</a>) - (<a class=\"id\" href=\"#node\">node</a>)-><a class=\"id\" href=\"#startbit\">startbit</a>) % <a class=\"id\" href=\"#EBITMAP_UNIT_SIZE\">EBITMAP_UNIT_SIZE</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ebitmap_node_get_bit\">ebitmap_node_get_bit</a>(struct <a class=\"id\" href=\"#ebitmap_node\">ebitmap_node</a> *<a class=\"id\" href=\"#n\">n</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#bit\">bit</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#EBITMAP_NODE_INDEX\">EBITMAP_NODE_INDEX</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#bit\">bit</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ofs\">ofs</a> = <a class=\"id\" href=\"#EBITMAP_NODE_OFFSET\">EBITMAP_NODE_OFFSET</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#bit\">bit</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#index\">index</a> >= <a class=\"id\" href=\"#EBITMAP_UNIT_NUMS\">EBITMAP_UNIT_NUMS</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#maps\">maps</a>[<a class=\"id\" href=\"#index\">index</a>] &amp; (<a class=\"id\" href=\"#EBITMAP_BIT\">EBITMAP_BIT</a> << <a class=\"id\" href=\"#ofs\">ofs</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ebitmap_node_set_bit\">ebitmap_node_set_bit</a>(struct <a class=\"id\" href=\"#ebitmap_node\">ebitmap_node</a> *<a class=\"id\" href=\"#n\">n</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bit\">bit</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#EBITMAP_NODE_INDEX\">EBITMAP_NODE_INDEX</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#bit\">bit</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ofs\">ofs</a> = <a class=\"id\" href=\"#EBITMAP_NODE_OFFSET\">EBITMAP_NODE_OFFSET</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#bit\">bit</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#index\">index</a> >= <a class=\"id\" href=\"#EBITMAP_UNIT_NUMS\">EBITMAP_UNIT_NUMS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#maps\">maps</a>[<a class=\"id\" href=\"#index\">index</a>] |= (<a class=\"id\" href=\"#EBITMAP_BIT\">EBITMAP_BIT</a> << <a class=\"id\" href=\"#ofs\">ofs</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ebitmap_node_clr_bit\">ebitmap_node_clr_bit</a>(struct <a class=\"id\" href=\"#ebitmap_node\">ebitmap_node</a> *<a class=\"id\" href=\"#n\">n</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bit\">bit</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#EBITMAP_NODE_INDEX\">EBITMAP_NODE_INDEX</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#bit\">bit</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ofs\">ofs</a> = <a class=\"id\" href=\"#EBITMAP_NODE_OFFSET\">EBITMAP_NODE_OFFSET</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#bit\">bit</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#index\">index</a> >= <a class=\"id\" href=\"#EBITMAP_UNIT_NUMS\">EBITMAP_UNIT_NUMS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#maps\">maps</a>[<a class=\"id\" href=\"#index\">index</a>] &= ~(<a class=\"id\" href=\"#EBITMAP_BIT\">EBITMAP_BIT</a> << <a class=\"id\" href=\"#ofs\">ofs</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ebitmap_for_each_positive_bit\">ebitmap_for_each_positive_bit</a>(<a class=\"id\" href=\"#e\">e</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#bit\">bit</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#bit\">bit</a> = <a class=\"id\" href=\"#ebitmap_start_positive\">ebitmap_start_positive</a>(<a class=\"id\" href=\"#e\">e</a>, &amp;<a class=\"id\" href=\"#n\">n</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#bit\">bit</a> &lt; <a class=\"id\" href=\"#ebitmap_length\">ebitmap_length</a>(<a class=\"id\" href=\"#e\">e</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#bit\">bit</a> = <a class=\"id\" href=\"#ebitmap_next_positive\">ebitmap_next_positive</a>(<a class=\"id\" href=\"#e\">e</a>, &amp;<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#bit\">bit</a>))<span class=\"ts\"/>\\", 
"", 
"int <a class=\"id\" href=\"#ebitmap_cmp\">ebitmap_cmp</a>(struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#e1\">e1</a>, struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#e2\">e2</a>);", 
"int <a class=\"id\" href=\"#ebitmap_cpy\">ebitmap_cpy</a>(struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#dst\">dst</a>, struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#src\">src</a>);", 
"int <a class=\"id\" href=\"#ebitmap_contains\">ebitmap_contains</a>(struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#e1\">e1</a>, struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#e2\">e2</a>);", 
"int <a class=\"id\" href=\"#ebitmap_get_bit\">ebitmap_get_bit</a>(struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#e\">e</a>, unsigned long <a class=\"id\" href=\"#bit\">bit</a>);", 
"int <a class=\"id\" href=\"#ebitmap_set_bit\">ebitmap_set_bit</a>(struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#e\">e</a>, unsigned long <a class=\"id\" href=\"#bit\">bit</a>, int <a class=\"id\" href=\"#value\">value</a>);", 
"void <a class=\"id\" href=\"#ebitmap_destroy\">ebitmap_destroy</a>(struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#e\">e</a>);", 
"int <a class=\"id\" href=\"#ebitmap_read\">ebitmap_read</a>(struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#e\">e</a>, void *<a class=\"id\" href=\"#fp\">fp</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NETLABEL\">CONFIG_NETLABEL</a>", 
"int <a class=\"id\" href=\"#ebitmap_netlbl_export\">ebitmap_netlbl_export</a>(struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#ebmap\">ebmap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#netlbl_lsm_secattr_catmap\">netlbl_lsm_secattr_catmap</a> **<a class=\"id\" href=\"#catmap\">catmap</a>);", 
"int <a class=\"id\" href=\"#ebitmap_netlbl_import\">ebitmap_netlbl_import</a>(struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#ebmap\">ebmap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#netlbl_lsm_secattr_catmap\">netlbl_lsm_secattr_catmap</a> *<a class=\"id\" href=\"#catmap\">catmap</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ebitmap_netlbl_export\">ebitmap_netlbl_export</a>(struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#ebmap\">ebmap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_lsm_secattr_catmap\">netlbl_lsm_secattr_catmap</a> **<a class=\"id\" href=\"#catmap\">catmap</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ebitmap_netlbl_import\">ebitmap_netlbl_import</a>(struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#ebmap\">ebmap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_lsm_secattr_catmap\">netlbl_lsm_secattr_catmap</a> *<a class=\"id\" href=\"#catmap\">catmap</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* _SS_EBITMAP_H_ */</span>", 
];
xr_frag_insert('l/47/09e202f45c599a532809e400ebe4c69ca68650.xr', __xr_tmp);
