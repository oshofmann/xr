var __xr_tmp = [
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_lock\">devres_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#devres_close_group\">devres_close_group</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * devres_remove_group - Remove a devres group</span>", 
"<span class=\"comment\"> * @dev: Device to remove group for</span>", 
"<span class=\"comment\"> * @id: ID of target group, can be NULL</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Remove the group identified by @id.  If @id is NULL, the latest</span>", 
"<span class=\"comment\"> * open group is selected.  Note that removing a group doesn't affect</span>", 
"<span class=\"comment\"> * any other resources.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#devres_remove_group\">devres_remove_group</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#devres_group\">devres_group</a> *<a class=\"id\" href=\"#grp\">grp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_lock\">devres_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a> = <a class=\"id\" href=\"#find_group\">find_group</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#grp\">grp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#node\">node</a>[0].<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#node\">node</a>[1].<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devres_log\">devres_log</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#node\">node</a>[0], \"REM\");", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_lock\">devres_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#grp\">grp</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#devres_remove_group\">devres_remove_group</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * devres_release_group - Release resources in a devres group</span>", 
"<span class=\"comment\"> * @dev: Device to release group for</span>", 
"<span class=\"comment\"> * @id: ID of target group, can be NULL</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Release all resources in the group identified by @id.  If @id is</span>", 
"<span class=\"comment\"> * NULL, the latest open group is selected.  The selected group and</span>", 
"<span class=\"comment\"> * groups properly nested inside the selected group are removed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * The number of released non-group resources.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#devres_release_group\">devres_release_group</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#devres_group\">devres_group</a> *<a class=\"id\" href=\"#grp\">grp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cnt\">cnt</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_lock\">devres_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a> = <a class=\"id\" href=\"#find_group\">find_group</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#grp\">grp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#first\">first</a> = &amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#node\">node</a>[0].<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#end\">end</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_head\">devres_head</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#node\">node</a>[1].<a class=\"id\" href=\"#entry\">entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#node\">node</a>[1].<a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> = <a class=\"id\" href=\"#release_nodes\">release_nodes</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_lock\">devres_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#devres_release_group\">devres_release_group</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Managed kzalloc/kfree</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#devm_kzalloc_release\">devm_kzalloc_release</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* noop */</span>", 
"}", 
"", 
"static int <a class=\"id\" href=\"#devm_kzalloc_match\">devm_kzalloc_match</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#res\">res</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a> == <a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * devm_kzalloc - Resource-managed kzalloc</span>", 
"<span class=\"comment\"> * @dev: Device to allocate memory for</span>", 
"<span class=\"comment\"> * @size: Allocation size</span>", 
"<span class=\"comment\"> * @gfp: Allocation gfp flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Managed kzalloc.  Memory allocated with this function is</span>", 
"<span class=\"comment\"> * automatically freed on driver detach.  Like all other devres</span>", 
"<span class=\"comment\"> * resources, guaranteed alignment is unsigned long long.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Pointer to allocated memory on success, NULL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"void * <a class=\"id\" href=\"#devm_kzalloc\">devm_kzalloc</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#devres\">devres</a> *<a class=\"id\" href=\"#dr\">dr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* use raw alloc_dr for kmalloc caller tracing */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#alloc_dr\">alloc_dr</a>(<a class=\"id\" href=\"#devm_kzalloc_release\">devm_kzalloc_release</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#dr\">dr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_node_dbginfo\">set_node_dbginfo</a>(&amp;<a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#node\">node</a>, \"devm_kzalloc_release\", <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devres_add\">devres_add</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#devm_kzalloc\">devm_kzalloc</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * devm_kfree - Resource-managed kfree</span>", 
"<span class=\"comment\"> * @dev: Device this memory belongs to</span>", 
"<span class=\"comment\"> * @p: Memory to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Free memory allocated with dev_kzalloc().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#devm_kfree\">devm_kfree</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#devres_destroy\">devres_destroy</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#devm_kzalloc_release\">devm_kzalloc_release</a>, <a class=\"id\" href=\"#devm_kzalloc_match\">devm_kzalloc_match</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#rc\">rc</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#devm_kfree\">devm_kfree</a>);", 
];
xr_frag_insert('l/47/84bec053d5f0fd249d6a8567879ac29c55838b.xr', __xr_tmp);
