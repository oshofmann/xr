var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * 2002-10-18  written by Jim Houston jim.houston@ccur.com</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Copyright (C) 2002 by Concurrent Computer Corporation</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Distributed under the GNU GPL license version 2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Modified by George Anzinger to reuse immediately and to use</span>", 
"<span class=\"comment\"> * find bit instructions.  Also removed _irq on spinlocks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Modified by Nadia Derbey to make it RCU safe.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Small id to pointer translation service.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It uses a radix tree like structure as a sparse array indexed</span>", 
"<span class=\"comment\"> * by the id to obtain the pointer.  The bitmap makes allocating</span>", 
"<span class=\"comment\"> * a new id quick.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You call it to allocate an id (an int) an associate with that id a</span>", 
"<span class=\"comment\"> * pointer or what ever, we treat it as a (void *).  You can pass this</span>", 
"<span class=\"comment\"> * id to a user for him to pass back at a later time.  You then pass</span>", 
"<span class=\"comment\"> * that id to this code and it returns your pointer.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"> * You can release ids at any time. When all ids are released, most of</span>", 
"<span class=\"comment\"> * the memory is returned (we keep IDR_FREE_MAX) in a local pool so we</span>", 
"<span class=\"comment\"> * don't need to go to the memory \"store\" during an id allocate, just</span>", 
"<span class=\"comment\"> * so you don't need to be too concerned about locking and conflicts</span>", 
"<span class=\"comment\"> * with the slab allocator.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#TEST\">TEST</a>                        <span class=\"comment\">// to test in user space...</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#idr_layer_cache\">idr_layer_cache</a>;", 
"", 
"static struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#get_from_free_list\">get_from_free_list</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#id_free\">id_free</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#id_free\">id_free</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ary\">ary</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#id_free_cnt\">id_free_cnt</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ary\">ary</a>[0] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#idr_layer_rcu_free\">idr_layer_rcu_free</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#layer\">layer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#layer\">layer</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a>, <a class=\"id\" href=\"#rcu_head\">rcu_head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#idr_layer_cache\">idr_layer_cache</a>, <a class=\"id\" href=\"#layer\">layer</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#free_layer\">free_layer</a>(struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rcu_head\">rcu_head</a>, <a class=\"id\" href=\"#idr_layer_rcu_free\">idr_layer_rcu_free</a>);", 
"}", 
"", 
"<span class=\"comment\">/* only called when idp-&gt;lock is held */</span>", 
"static void <a class=\"id\" href=\"#__move_to_free_list\">__move_to_free_list</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>, struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ary\">ary</a>[0] = <a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#id_free\">id_free</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#id_free\">id_free</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#id_free_cnt\">id_free_cnt</a>++;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#move_to_free_list\">move_to_free_list</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>, struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Depends on the return element being zeroed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__move_to_free_list\">__move_to_free_list</a>(<a class=\"id\" href=\"#idp\">idp</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#idr_mark_full\">idr_mark_full</a>(struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> **<a class=\"id\" href=\"#pa\">pa</a>, int <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pa\">pa</a>[0];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#l\">l</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#id\">id</a> &amp; <a class=\"id\" href=\"#IDR_MASK\">IDR_MASK</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this layer is full mark the bit in the layer above to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * show that this part of the radix tree is full.  This may</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * complete the layer above and require walking up the radix</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tree.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a> == <a class=\"id\" href=\"#IDR_FULL\">IDR_FULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pa\">pa</a>[++<a class=\"id\" href=\"#l\">l</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#id\">id</a> >> <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>((<a class=\"id\" href=\"#id\">id</a> &amp; <a class=\"id\" href=\"#IDR_MASK\">IDR_MASK</a>), &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * idr_pre_get - reserver resources for idr allocation</span>", 
"<span class=\"comment\"> * @idp:<span class=\"ts\"/>idr handle</span>", 
"<span class=\"comment\"> * @gfp_mask:<span class=\"ts\"/>memory allocation flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function should be called prior to locking and calling the</span>", 
"<span class=\"comment\"> * idr_get_new* functions. It preallocates enough memory to satisfy</span>", 
"<span class=\"comment\"> * the worst possible allocation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the system is REALLY out of memory this function returns 0,</span>", 
"<span class=\"comment\"> * otherwise 1.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#idr_pre_get\">idr_pre_get</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#id_free_cnt\">id_free_cnt</a> &lt; <a class=\"id\" href=\"#IDR_FREE_MAX\">IDR_FREE_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#idr_layer_cache\">idr_layer_cache</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#move_to_free_list\">move_to_free_list</a>(<a class=\"id\" href=\"#idp\">idp</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#idr_pre_get\">idr_pre_get</a>);", 
"", 
"static int <a class=\"id\" href=\"#sub_alloc\">sub_alloc</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>, int *<a class=\"id\" href=\"#starting_id\">starting_id</a>, struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> **<a class=\"id\" href=\"#pa\">pa</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#sh\">sh</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#oid\">oid</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bm\">bm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = *<a class=\"id\" href=\"#starting_id\">starting_id</a>;", 
" <a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#top\">top</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#layers\">layers</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>[<a class=\"id\" href=\"#l\">l</a>--] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We run around this while until we reach the leaf node...</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = (<a class=\"id\" href=\"#id\">id</a> >> (<a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>*<a class=\"id\" href=\"#l\">l</a>)) &amp; <a class=\"id\" href=\"#IDR_MASK\">IDR_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bm\">bm</a> = ~<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>(&amp;<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#IDR_SIZE\">IDR_SIZE</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a> == <a class=\"id\" href=\"#IDR_SIZE\">IDR_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no space available go back to previous layer. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#oid\">oid</a> = <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = (<a class=\"id\" href=\"#id\">id</a> | ((1 << (<a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a> * <a class=\"id\" href=\"#l\">l</a>)) - 1)) + 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if already at the top layer, we need to grow */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a> >= 1 << (<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#layers\">layers</a> * <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#starting_id\">starting_id</a> = <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#IDR_NEED_TO_GROW\">IDR_NEED_TO_GROW</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pa\">pa</a>[<a class=\"id\" href=\"#l\">l</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we need to go up one layer, continue the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * loop; otherwise, restart from the top.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sh\">sh</a> = <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a> * (<a class=\"id\" href=\"#l\">l</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#oid\">oid</a> >> <a class=\"id\" href=\"#sh\">sh</a> == <a class=\"id\" href=\"#id\">id</a> >> <a class=\"id\" href=\"#sh\">sh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a> != <a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sh\">sh</a> = <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>*<a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = ((<a class=\"id\" href=\"#id\">id</a> >> <a class=\"id\" href=\"#sh\">sh</a>) ^ <a class=\"id\" href=\"#n\">n</a> ^ <a class=\"id\" href=\"#m\">m</a>) << <a class=\"id\" href=\"#sh\">sh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#id\">id</a> >= <a class=\"id\" href=\"#MAX_ID_BIT\">MAX_ID_BIT</a>) || (<a class=\"id\" href=\"#id\">id</a> &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#IDR_NOMORE_SPACE\">IDR_NOMORE_SPACE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#l\">l</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Create the layer below if it is missing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ary\">ary</a>[<a class=\"id\" href=\"#m\">m</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#get_from_free_list\">get_from_free_list</a>(<a class=\"id\" href=\"#idp\">idp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#layer\">layer</a> = <a class=\"id\" href=\"#l\">l</a>-1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ary\">ary</a>[<a class=\"id\" href=\"#m\">m</a>], <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>[<a class=\"id\" href=\"#l\">l</a>--] = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ary\">ary</a>[<a class=\"id\" href=\"#m\">m</a>];", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>[<a class=\"id\" href=\"#l\">l</a>] = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#id\">id</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#idr_get_empty_slot\">idr_get_empty_slot</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>, int <a class=\"id\" href=\"#starting_id\">starting_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> **<a class=\"id\" href=\"#pa\">pa</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#layers\">layers</a>, <a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#starting_id\">starting_id</a>;", 
"<a class=\"id\" href=\"#build_up\">build_up</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#top\">top</a>;", 
];
xr_frag_insert('l/47/ba9968cf1c94381c90f192ef746b6171d6e827.xr', __xr_tmp);
