var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Function graph tracer.</span>", 
"<span class=\"comment\"> * Copyright (c) 2008-2009 Frederic Weisbecker &lt;fweisbec@gmail.com&gt;</span>", 
"<span class=\"comment\"> * Mostly borrowed from function tracer which</span>", 
"<span class=\"comment\"> * is Copyright (c) Steven Rostedt &lt;srostedt@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugfs\">debugfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ftrace\">ftrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"trace.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"trace_output.h\"", 
"", 
"struct <a class=\"id\" href=\"#fgraph_cpu_data\">fgraph_cpu_data</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_pid\">last_pid</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#depth\">depth</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ignore\">ignore</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#enter_funcs\">enter_funcs</a>[<a class=\"id\" href=\"#FTRACE_RETFUNC_DEPTH\">FTRACE_RETFUNC_DEPTH</a>];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#fgraph_data\">fgraph_data</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fgraph_cpu_data\">fgraph_cpu_data</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cpu_data\">cpu_data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Place to preserve last processed entry. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_graph_ent_entry\">ftrace_graph_ent_entry</a><span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_graph_ret_entry\">ftrace_graph_ret_entry</a><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#failed\">failed</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TRACE_GRAPH_INDENT\">TRACE_GRAPH_INDENT</a><span class=\"ts\"/>2", 
"", 
"<span class=\"comment\">/* Flag options */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_OVERRUN\">TRACE_GRAPH_PRINT_OVERRUN</a><span class=\"ts\"/>0x1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_CPU\">TRACE_GRAPH_PRINT_CPU</a><span class=\"ts\"/><span class=\"ts\"/>0x2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_OVERHEAD\">TRACE_GRAPH_PRINT_OVERHEAD</a><span class=\"ts\"/>0x4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_PROC\">TRACE_GRAPH_PRINT_PROC</a><span class=\"ts\"/><span class=\"ts\"/>0x8", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_DURATION\">TRACE_GRAPH_PRINT_DURATION</a><span class=\"ts\"/>0x10", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_ABS_TIME\">TRACE_GRAPH_PRINT_ABS_TIME</a><span class=\"ts\"/>0x20", 
"", 
"static struct <a class=\"id\" href=\"#tracer_opt\">tracer_opt</a> <a class=\"id\" href=\"#trace_opts\">trace_opts</a>[] = {", 
"<span class=\"ts\"/><span class=\"comment\">/* Display overruns? (for self-debug purpose) */</span>", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#TRACER_OPT\">TRACER_OPT</a>(<a class=\"id\" href=\"#funcgraph\">funcgraph</a>-<a class=\"id\" href=\"#overrun\">overrun</a>, <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_OVERRUN\">TRACE_GRAPH_PRINT_OVERRUN</a>) },", 
"<span class=\"ts\"/><span class=\"comment\">/* Display CPU ? */</span>", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#TRACER_OPT\">TRACER_OPT</a>(<a class=\"id\" href=\"#funcgraph\">funcgraph</a>-<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_CPU\">TRACE_GRAPH_PRINT_CPU</a>) },", 
"<span class=\"ts\"/><span class=\"comment\">/* Display Overhead ? */</span>", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#TRACER_OPT\">TRACER_OPT</a>(<a class=\"id\" href=\"#funcgraph\">funcgraph</a>-<a class=\"id\" href=\"#overhead\">overhead</a>, <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_OVERHEAD\">TRACE_GRAPH_PRINT_OVERHEAD</a>) },", 
"<span class=\"ts\"/><span class=\"comment\">/* Display proc name/pid */</span>", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#TRACER_OPT\">TRACER_OPT</a>(<a class=\"id\" href=\"#funcgraph\">funcgraph</a>-<a class=\"id\" href=\"#proc\">proc</a>, <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_PROC\">TRACE_GRAPH_PRINT_PROC</a>) },", 
"<span class=\"ts\"/><span class=\"comment\">/* Display duration of execution */</span>", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#TRACER_OPT\">TRACER_OPT</a>(<a class=\"id\" href=\"#funcgraph\">funcgraph</a>-<a class=\"id\" href=\"#duration\">duration</a>, <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_DURATION\">TRACE_GRAPH_PRINT_DURATION</a>) },", 
"<span class=\"ts\"/><span class=\"comment\">/* Display absolute time of an entry */</span>", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#TRACER_OPT\">TRACER_OPT</a>(<a class=\"id\" href=\"#funcgraph\">funcgraph</a>-<a class=\"id\" href=\"#abstime\">abstime</a>, <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_ABS_TIME\">TRACE_GRAPH_PRINT_ABS_TIME</a>) },", 
"<span class=\"ts\"/>{ } <span class=\"comment\">/* Empty entry */</span>", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#tracer_flags\">tracer_flags</a> <a class=\"id\" href=\"#tracer_flags\">tracer_flags</a> = {", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't display overruns and proc by default */</span>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_CPU\">TRACE_GRAPH_PRINT_CPU</a> | <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_OVERHEAD\">TRACE_GRAPH_PRINT_OVERHEAD</a> |", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_DURATION\">TRACE_GRAPH_PRINT_DURATION</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#opts\">opts</a> = <a class=\"id\" href=\"#trace_opts\">trace_opts</a>", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#graph_array\">graph_array</a>;", 
"", 
"", 
"<span class=\"comment\">/* Add a function return address to the trace stack on thread info.*/</span>", 
"int", 
"<a class=\"id\" href=\"#ftrace_push_return_trace\">ftrace_push_return_trace</a>(unsigned long <a class=\"id\" href=\"#ret\">ret</a>, unsigned long <a class=\"id\" href=\"#func\">func</a>, int *<a class=\"id\" href=\"#depth\">depth</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#frame_pointer\">frame_pointer</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#calltime\">calltime</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We must make sure the ret_stack is tested before we read</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * anything else.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The return trace stack is full */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#curr_ret_stack\">curr_ret_stack</a> == <a class=\"id\" href=\"#FTRACE_RETFUNC_DEPTH\">FTRACE_RETFUNC_DEPTH</a> - 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#trace_overrun\">trace_overrun</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#calltime\">calltime</a> = <a class=\"id\" href=\"#trace_clock_local\">trace_clock_local</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = ++<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#curr_ret_stack\">curr_ret_stack</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a>[<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a>[<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#func\">func</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a>[<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#calltime\">calltime</a> = <a class=\"id\" href=\"#calltime\">calltime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a>[<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#subtime\">subtime</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a>[<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#fp\">fp</a> = <a class=\"id\" href=\"#frame_pointer\">frame_pointer</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#depth\">depth</a> = <a class=\"id\" href=\"#index\">index</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Retrieve a function return address to the trace stack on thread info.*/</span>", 
"static void", 
"<a class=\"id\" href=\"#ftrace_pop_return_trace\">ftrace_pop_return_trace</a>(struct <a class=\"id\" href=\"#ftrace_graph_ret\">ftrace_graph_ret</a> *<a class=\"id\" href=\"#trace\">trace</a>, unsigned long *<a class=\"id\" href=\"#ret\">ret</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#frame_pointer\">frame_pointer</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#curr_ret_stack\">curr_ret_stack</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#index\">index</a> &lt; 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_graph_stop\">ftrace_graph_stop</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Might as well panic, otherwise we have no where to go */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ret\">ret</a> = (unsigned long)<a class=\"id\" href=\"#panic\">panic</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_FUNCTION_GRAPH_FP_TEST\">CONFIG_HAVE_FUNCTION_GRAPH_FP_TEST</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The arch may choose to record the frame pointer used</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and check it here to make sure that it is what we expect it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to be. If gcc does not set the place holder of the return</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * address in the frame pointer, and does a copy instead, then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the function graph trace will fail. This test detects this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Currently, x86_32 with optimize for size (-Os) makes the latest</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * gcc do the above.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a>[<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#fp\">fp</a> != <a class=\"id\" href=\"#frame_pointer\">frame_pointer</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_graph_stop\">ftrace_graph_stop</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, \"Bad frame pointer: expected %lx, received %lx\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"  from func %ps return to %lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a>[<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#fp\">fp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#frame_pointer\">frame_pointer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     (void *)<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a>[<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#func\">func</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a>[<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ret\">ret</a> = (unsigned long)<a class=\"id\" href=\"#panic\">panic</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a>[<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a>[<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#func\">func</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#calltime\">calltime</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a>[<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#calltime\">calltime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#overrun\">overrun</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#trace_overrun\">trace_overrun</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#depth\">depth</a> = <a class=\"id\" href=\"#index\">index</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Send the trace to the ring-buffer.</span>", 
"<span class=\"comment\"> * @return the original return address.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#ftrace_return_to_handler\">ftrace_return_to_handler</a>(unsigned long <a class=\"id\" href=\"#frame_pointer\">frame_pointer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_graph_ret\">ftrace_graph_ret</a> <a class=\"id\" href=\"#trace\">trace</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_pop_return_trace\">ftrace_pop_return_trace</a>(&amp;<a class=\"id\" href=\"#trace\">trace</a>, &amp;<a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#frame_pointer\">frame_pointer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace\">trace</a>.<a class=\"id\" href=\"#rettime\">rettime</a> = <a class=\"id\" href=\"#trace_clock_local\">trace_clock_local</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_graph_return\">ftrace_graph_return</a>(&amp;<a class=\"id\" href=\"#trace\">trace</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#curr_ret_stack\">curr_ret_stack</a>--;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_graph_stop\">ftrace_graph_stop</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Might as well panic. What else to do? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (unsigned long)<a class=\"id\" href=\"#panic\">panic</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__trace_graph_entry\">__trace_graph_entry</a>(struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_graph_ent\">ftrace_graph_ent</a> *<a class=\"id\" href=\"#trace\">trace</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#pc\">pc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a> = &amp;<a class=\"id\" href=\"#event_funcgraph_entry\">event_funcgraph_entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_graph_ent_entry\">ftrace_graph_ent_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#__this_cpu_read\">__this_cpu_read</a>(<a class=\"id\" href=\"#ftrace_cpu_disabled\">ftrace_cpu_disabled</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#trace_buffer_lock_reserve\">trace_buffer_lock_reserve</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#TRACE_GRAPH_ENT\">TRACE_GRAPH_ENT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  sizeof(*<a class=\"id\" href=\"#entry\">entry</a>), <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ring_buffer_event_data\">ring_buffer_event_data</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#graph_ent\">graph_ent</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= *<a class=\"id\" href=\"#trace\">trace</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#filter_current_check_discard\">filter_current_check_discard</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#call\">call</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_unlock_commit\">ring_buffer_unlock_commit</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"int <a class=\"id\" href=\"#trace_graph_entry\">trace_graph_entry</a>(struct <a class=\"id\" href=\"#ftrace_graph_ent\">ftrace_graph_ent</a> *<a class=\"id\" href=\"#trace\">trace</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a> = <a class=\"id\" href=\"#graph_array\">graph_array</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_array_cpu\">trace_array_cpu</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#disabled\">disabled</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pc\">pc</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ftrace_trace_task\">ftrace_trace_task</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* trace it when it is-nested-in or is a function enabled. */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#depth\">depth</a> || <a class=\"id\" href=\"#ftrace_graph_addr\">ftrace_graph_addr</a>(<a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#func\">func</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disabled\">disabled</a> = <a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#disabled\">disabled</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#disabled\">disabled</a> == 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#preempt_count\">preempt_count</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__trace_graph_entry\">__trace_graph_entry</a>(<a class=\"id\" href=\"#tr\">tr</a>, <a class=\"id\" href=\"#trace\">trace</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#disabled\">disabled</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#trace_graph_thresh_entry\">trace_graph_thresh_entry</a>(struct <a class=\"id\" href=\"#ftrace_graph_ent\">ftrace_graph_ent</a> *<a class=\"id\" href=\"#trace\">trace</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tracing_thresh\">tracing_thresh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#trace_graph_entry\">trace_graph_entry</a>(<a class=\"id\" href=\"#trace\">trace</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__trace_graph_return\">__trace_graph_return</a>(struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_graph_ret\">ftrace_graph_ret</a> *<a class=\"id\" href=\"#trace\">trace</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#pc\">pc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a> = &amp;<a class=\"id\" href=\"#event_funcgraph_exit\">event_funcgraph_exit</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_graph_ret_entry\">ftrace_graph_ret_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#__this_cpu_read\">__this_cpu_read</a>(<a class=\"id\" href=\"#ftrace_cpu_disabled\">ftrace_cpu_disabled</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#trace_buffer_lock_reserve\">trace_buffer_lock_reserve</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#TRACE_GRAPH_RET\">TRACE_GRAPH_RET</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  sizeof(*<a class=\"id\" href=\"#entry\">entry</a>), <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ring_buffer_event_data\">ring_buffer_event_data</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#ret\">ret</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= *<a class=\"id\" href=\"#trace\">trace</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#filter_current_check_discard\">filter_current_check_discard</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#call\">call</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_unlock_commit\">ring_buffer_unlock_commit</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#trace_graph_return\">trace_graph_return</a>(struct <a class=\"id\" href=\"#ftrace_graph_ret\">ftrace_graph_ret</a> *<a class=\"id\" href=\"#trace\">trace</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a> = <a class=\"id\" href=\"#graph_array\">graph_array</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_array_cpu\">trace_array_cpu</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#disabled\">disabled</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pc\">pc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disabled\">disabled</a> = <a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#disabled\">disabled</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#disabled\">disabled</a> == 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#preempt_count\">preempt_count</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__trace_graph_return\">__trace_graph_return</a>(<a class=\"id\" href=\"#tr\">tr</a>, <a class=\"id\" href=\"#trace\">trace</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#disabled\">disabled</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#set_graph_array\">set_graph_array</a>(struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#graph_array\">graph_array</a> = <a class=\"id\" href=\"#tr\">tr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make graph_array visible before we start tracing */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#trace_graph_thresh_return\">trace_graph_thresh_return</a>(struct <a class=\"id\" href=\"#ftrace_graph_ret\">ftrace_graph_ret</a> *<a class=\"id\" href=\"#trace\">trace</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tracing_thresh\">tracing_thresh</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#rettime\">rettime</a> - <a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#calltime\">calltime</a> &lt; <a class=\"id\" href=\"#tracing_thresh\">tracing_thresh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_graph_return\">trace_graph_return</a>(<a class=\"id\" href=\"#trace\">trace</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#graph_trace_init\">graph_trace_init</a>(struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_graph_array\">set_graph_array</a>(<a class=\"id\" href=\"#tr\">tr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tracing_thresh\">tracing_thresh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_ftrace_graph\">register_ftrace_graph</a>(&amp;<a class=\"id\" href=\"#trace_graph_thresh_return\">trace_graph_thresh_return</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#trace_graph_thresh_entry\">trace_graph_thresh_entry</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_ftrace_graph\">register_ftrace_graph</a>(&amp;<a class=\"id\" href=\"#trace_graph_return\">trace_graph_return</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#trace_graph_entry\">trace_graph_entry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_start_cmdline_record\">tracing_start_cmdline_record</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#graph_trace_reset\">graph_trace_reset</a>(struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_stop_cmdline_record\">tracing_stop_cmdline_record</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_ftrace_graph\">unregister_ftrace_graph</a>();", 
"}", 
"", 
"static int <a class=\"id\" href=\"#max_bytes_for_cpu\">max_bytes_for_cpu</a>;", 
"", 
"static enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a>", 
"<a class=\"id\" href=\"#print_graph_cpu\">print_graph_cpu</a>(struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Start with a space character - to make it stand out</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the right a bit when trace output is pasted into</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * email:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \" %*d) \", <a class=\"id\" href=\"#max_bytes_for_cpu\">max_bytes_for_cpu</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TRACE_GRAPH_PROCINFO_LENGTH\">TRACE_GRAPH_PROCINFO_LENGTH</a><span class=\"ts\"/>14", 
"", 
"static enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a>", 
"<a class=\"id\" href=\"#print_graph_proc\">print_graph_proc</a>(struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#comm\">comm</a>[<a class=\"id\" href=\"#TASK_COMM_LEN\">TASK_COMM_LEN</a>];", 
"<span class=\"ts\"/><span class=\"comment\">/* sign + log10(MAX_INT) + '\\0' */</span>", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#pid_str\">pid_str</a>[11];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#spaces\">spaces</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_find_cmdline\">trace_find_cmdline</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#comm\">comm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comm\">comm</a>[7] = '\\0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#pid_str\">pid_str</a>, \"%d\", <a class=\"id\" href=\"#pid\">pid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 1 stands for the \"-\" character */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#comm\">comm</a>) + <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#pid_str\">pid_str</a>) + 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#TRACE_GRAPH_PROCINFO_LENGTH\">TRACE_GRAPH_PROCINFO_LENGTH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spaces\">spaces</a> = <a class=\"id\" href=\"#TRACE_GRAPH_PROCINFO_LENGTH\">TRACE_GRAPH_PROCINFO_LENGTH</a> - <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First spaces to align center */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#spaces\">spaces</a> / 2; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \" \");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"%s-%s\", <a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#pid_str\">pid_str</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Last spaces to align center */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#spaces\">spaces</a> - (<a class=\"id\" href=\"#spaces\">spaces</a> / 2); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \" \");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>;", 
"}", 
"", 
"", 
"static enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a>", 
"<a class=\"id\" href=\"#print_graph_lat_fmt\">print_graph_lat_fmt</a>(struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>, struct <a class=\"id\" href=\"#trace_entry\">trace_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#trace_seq_putc\">trace_seq_putc</a>(<a class=\"id\" href=\"#s\">s</a>, ' '))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#trace_print_lat_fmt\">trace_print_lat_fmt</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"}", 
"", 
"<span class=\"comment\">/* If the pid changed since the last trace, output this event */</span>", 
"static enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a>", 
"<a class=\"id\" href=\"#verif_pid\">verif_pid</a>(struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#fgraph_data\">fgraph_data</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#prev_pid\">prev_pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> *<a class=\"id\" href=\"#last_pid\">last_pid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_pid\">last_pid</a> = &amp;(<a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu_data\">cpu_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#last_pid\">last_pid</a>);", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#last_pid\">last_pid</a> == <a class=\"id\" href=\"#pid\">pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev_pid\">prev_pid</a> = *<a class=\"id\" href=\"#last_pid\">last_pid</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#last_pid\">last_pid</a> = <a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev_pid\">prev_pid</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Context-switch trace line:</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"> ------------------------------------------</span>", 
"<span class=\"comment\"> | 1)  migration/0--1  =&gt;  sshd-1755</span>", 
"<span class=\"comment\"> ------------------------------------------</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>\" ------------------------------------------\\n\");", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_cpu\">print_graph_cpu</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_proc\">print_graph_proc</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#prev_pid\">prev_pid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \" => \");", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_proc\">print_graph_proc</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>\"\\n ------------------------------------------\\n\\n\");", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#ftrace_graph_ret_entry\">ftrace_graph_ret_entry</a> *", 
"<a class=\"id\" href=\"#get_return_for_leaf\">get_return_for_leaf</a>(struct <a class=\"id\" href=\"#trace_iterator\">trace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_graph_ent_entry\">ftrace_graph_ent_entry</a> *<a class=\"id\" href=\"#curr\">curr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fgraph_data\">fgraph_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *<a class=\"id\" href=\"#ring_iter\">ring_iter</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_graph_ret_entry\">ftrace_graph_ret_entry</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the previous output failed to write to the seq buffer,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then we just reuse the data from before.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a> && <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#failed\">failed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a> = &amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#ent\">ent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = &amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>} else {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ring_iter\">ring_iter</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#buffer_iter\">buffer_iter</a>[<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu\">cpu</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* First peek to compare current entry and the next one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ring_iter\">ring_iter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#ring_buffer_iter_peek\">ring_buffer_iter_peek</a>(<a class=\"id\" href=\"#ring_iter\">ring_iter</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We need to consume the current entry to see</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the next one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_consume\">ring_buffer_consume</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#ring_buffer_peek\">ring_buffer_peek</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#ring_buffer_event_data\">ring_buffer_event_data</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Save current and next entries for later reference</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * if the output fails.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#ent\">ent</a> = *<a class=\"id\" href=\"#curr\">curr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If the next event is not a return type, then</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we only care about what type it is. Otherwise we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * safely copy the entire event.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#ent\">ent</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#TRACE_GRAPH_RET\">TRACE_GRAPH_RET</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#ret\">ret</a> = *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#ret\">ret</a>.<a class=\"id\" href=\"#ent\">ent</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#ent\">ent</a>.<a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#ent\">ent</a>.<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#TRACE_GRAPH_RET\">TRACE_GRAPH_RET</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#ent\">ent</a>.<a class=\"id\" href=\"#pid\">pid</a> != <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#ent\">ent</a>.<a class=\"id\" href=\"#pid\">pid</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#graph_ent\">graph_ent</a>.<a class=\"id\" href=\"#func\">func</a> != <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#ret\">ret</a>.<a class=\"id\" href=\"#func\">func</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* this is a leaf, now advance the iterator */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ring_iter\">ring_iter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_read\">ring_buffer_read</a>(<a class=\"id\" href=\"#ring_iter\">ring_iter</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Signal a overhead of time execution to the output */</span>", 
"static int", 
"<a class=\"id\" href=\"#print_graph_overhead\">print_graph_overhead</a>(unsigned long long <a class=\"id\" href=\"#duration\">duration</a>, struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* If duration disappear, we don't need anything */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_DURATION\">TRACE_GRAPH_PRINT_DURATION</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Non nested entry or return */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#duration\">duration</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"  \");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_OVERHEAD\">TRACE_GRAPH_PRINT_OVERHEAD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Duration exceeded 100 msecs */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#duration\">duration</a> &gt; 100000ULL)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"! \");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Duration exceeded 10 msecs */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#duration\">duration</a> &gt; 10000ULL)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"+ \");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"  \");", 
"}", 
"", 
"static int <a class=\"id\" href=\"#print_graph_abs_time\">print_graph_abs_time</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#t\">t</a>, struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#usecs_rem\">usecs_rem</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usecs_rem\">usecs_rem</a> = <a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usecs_rem\">usecs_rem</a> /= 1000;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"%5lu.%06lu |  \",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#usecs_rem\">usecs_rem</a>);", 
"}", 
"", 
"static enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a>", 
"<a class=\"id\" href=\"#print_graph_irq\">print_graph_irq</a>(struct <a class=\"id\" href=\"#trace_iterator\">trace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#trace_type\">trace_type</a> <a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a> = &amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#seq\">seq</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &lt; (unsigned long)<a class=\"id\" href=\"#__irqentry_text_start\">__irqentry_text_start</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> >= (unsigned long)<a class=\"id\" href=\"#__irqentry_text_end\">__irqentry_text_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_UNHANDLED\">TRACE_TYPE_UNHANDLED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Absolute time */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_ABS_TIME\">TRACE_GRAPH_PRINT_ABS_TIME</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_abs_time\">print_graph_abs_time</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Cpu */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_CPU\">TRACE_GRAPH_PRINT_CPU</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_cpu\">print_graph_cpu</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Proc */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_PROC\">TRACE_GRAPH_PRINT_PROC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_proc\">print_graph_proc</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \" | \");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No overhead */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_overhead\">print_graph_overhead</a>(-1, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#TRACE_GRAPH_ENT\">TRACE_GRAPH_ENT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"==========>\");", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"<==========\");", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't close the duration column if haven't one */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_DURATION\">TRACE_GRAPH_PRINT_DURATION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \" |\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"\\n\");", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>;", 
"}", 
"", 
"enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a>", 
"<a class=\"id\" href=\"#trace_print_graph_duration\">trace_print_graph_duration</a>(unsigned long long <a class=\"id\" href=\"#duration\">duration</a>, struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nsecs_rem\">nsecs_rem</a> = <a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#duration\">duration</a>, 1000);", 
"<span class=\"ts\"/><span class=\"comment\">/* log10(ULONG_MAX) + '\\0' */</span>", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#msecs_str\">msecs_str</a>[21];", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#nsecs_str\">nsecs_str</a>[5];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#msecs_str\">msecs_str</a>, \"%lu\", (unsigned long) <a class=\"id\" href=\"#duration\">duration</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Print msecs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"%s\", <a class=\"id\" href=\"#msecs_str\">msecs_str</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#msecs_str\">msecs_str</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Print nsecs (we don't want to exceed 7 numbers) */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; 7) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#nsecs_str\">nsecs_str</a>, <a class=\"id\" href=\"#min\">min</a>(sizeof(<a class=\"id\" href=\"#nsecs_str\">nsecs_str</a>), 8UL - <a class=\"id\" href=\"#len\">len</a>), \"%03lu\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#nsecs_rem\">nsecs_rem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \".%s\", <a class=\"id\" href=\"#nsecs_str\">nsecs_str</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#nsecs_str\">nsecs_str</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \" us \");", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Print remaining spaces to fit the row's width */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#i\">i</a> &lt; 7; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \" \");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>;", 
"}", 
"", 
"static enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a>", 
"<a class=\"id\" href=\"#print_graph_duration\">print_graph_duration</a>(unsigned long long <a class=\"id\" href=\"#duration\">duration</a>, struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_print_graph_duration\">trace_print_graph_duration</a>(<a class=\"id\" href=\"#duration\">duration</a>, <a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"|  \");", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>;", 
"}", 
"", 
];
xr_frag_insert('l/47/c057957655a5a458e13aea96378545ea59de2c.xr', __xr_tmp);
