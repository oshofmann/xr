var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Copyright (C) 2008 Red Hat, Inc., Eric Paris &lt;eparis@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *  it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *  the Free Software Foundation; either version 2, or (at your option)</span>", 
"<span class=\"comment\"> *  any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> *  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> *  GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> *  along with this program; see the file COPYING.  If not, write to</span>", 
"<span class=\"comment\"> *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Basic idea behind the notification queue: An fsnotify group (like inotify)</span>", 
"<span class=\"comment\"> * sends the userspace notification about events asyncronously some time after</span>", 
"<span class=\"comment\"> * the event happened.  When inotify gets an event it will need to add that</span>", 
"<span class=\"comment\"> * event to the group notify queue.  Since a single event might need to be on</span>", 
"<span class=\"comment\"> * multiple group's notification queues we can't add the event directly to each</span>", 
"<span class=\"comment\"> * queue and instead add a small \"event_holder\" to each queue.  This event_holder</span>", 
"<span class=\"comment\"> * has a pointer back to the original event.  Since the majority of events are</span>", 
"<span class=\"comment\"> * going to end up on one, and only one, notification queue we embed one</span>", 
"<span class=\"comment\"> * event_holder into each event.  This means we have a single allocation instead</span>", 
"<span class=\"comment\"> * of always needing two.  If the embedded event_holder is already in use by</span>", 
"<span class=\"comment\"> * another group a new event_holder (from fsnotify_event_holder_cachep) will be</span>", 
"<span class=\"comment\"> * allocated and used.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#namei\">namei</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fsnotify_backend\">fsnotify_backend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"fsnotify.h\"", 
"", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#fsnotify_event_cachep\">fsnotify_event_cachep</a>;", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#fsnotify_event_holder_cachep\">fsnotify_event_holder_cachep</a>;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is a magic event we send when the q is too full.  Since it doesn't</span>", 
"<span class=\"comment\"> * hold real event information we just keep one system wide and use it any time</span>", 
"<span class=\"comment\"> * it is needed.  It's refcnt is set 1 at kernel init time and will never</span>", 
"<span class=\"comment\"> * get set to 0 so it will never get 'freed'</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#q_overflow_event\">q_overflow_event</a>;", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#fsnotify_sync_cookie\">fsnotify_sync_cookie</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * fsnotify_get_cookie - return a unique cookie for use in synchronizing events.</span>", 
"<span class=\"comment\"> * Called from fsnotify_move, which is inlined into filesystem modules.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#fsnotify_get_cookie\">fsnotify_get_cookie</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#fsnotify_sync_cookie\">fsnotify_sync_cookie</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#fsnotify_get_cookie\">fsnotify_get_cookie</a>);", 
"", 
"<span class=\"comment\">/* return true if the notify queue is empty, false otherwise */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#fsnotify_notify_queue_is_empty\">fsnotify_notify_queue_is_empty</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#mutex_is_locked\">mutex_is_locked</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#notification_mutex\">notification_mutex</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#notification_list\">notification_list</a>) ? <a class=\"id\" href=\"#true\">true</a> : <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#fsnotify_get_event\">fsnotify_get_event</a>(struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#fsnotify_put_event\">fsnotify_put_event</a>(struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: event=%p\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#data_type\">data_type</a> == <a class=\"id\" href=\"#FSNOTIFY_EVENT_PATH\">FSNOTIFY_EVENT_PATH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#path\">path</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#private_data_list\">private_data_list</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#file_name\">file_name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_pid\">put_pid</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#tgid\">tgid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#fsnotify_event_cachep\">fsnotify_event_cachep</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"struct <a class=\"id\" href=\"#fsnotify_event_holder\">fsnotify_event_holder</a> *<a class=\"id\" href=\"#fsnotify_alloc_event_holder\">fsnotify_alloc_event_holder</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#fsnotify_event_holder_cachep\">fsnotify_event_holder_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#fsnotify_destroy_event_holder\">fsnotify_destroy_event_holder</a>(struct <a class=\"id\" href=\"#fsnotify_event_holder\">fsnotify_event_holder</a> *<a class=\"id\" href=\"#holder\">holder</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#holder\">holder</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#fsnotify_event_holder_cachep\">fsnotify_event_holder_cachep</a>, <a class=\"id\" href=\"#holder\">holder</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Find the private data that the group previously attached to this event when</span>", 
"<span class=\"comment\"> * the group added the event to the notification queue (fsnotify_add_notify_event)</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#fsnotify_event_private_data\">fsnotify_event_private_data</a> *<a class=\"id\" href=\"#fsnotify_remove_priv_from_event\">fsnotify_remove_priv_from_event</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>, struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event_private_data\">fsnotify_event_private_data</a> *<a class=\"id\" href=\"#lpriv\">lpriv</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event_private_data\">fsnotify_event_private_data</a> *<a class=\"id\" href=\"#priv\">priv</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#lpriv\">lpriv</a>, &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#private_data_list\">private_data_list</a>, <a class=\"id\" href=\"#event_list\">event_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lpriv\">lpriv</a>-><a class=\"id\" href=\"#group\">group</a> == <a class=\"id\" href=\"#group\">group</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#priv\">priv</a> = <a class=\"id\" href=\"#lpriv\">lpriv</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#event_list\">event_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#priv\">priv</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add an event to the group notification queue.  The group can later pull this</span>", 
"<span class=\"comment\"> * event off the queue to deal with.  If the event is successfully added to the</span>", 
"<span class=\"comment\"> * group's notification queue, a reference is taken on event.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#fsnotify_add_notify_event\">fsnotify_add_notify_event</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>, struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#fsnotify_event_private_data\">fsnotify_event_private_data</a> *<a class=\"id\" href=\"#priv\">priv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *(*<a class=\"id\" href=\"#merge\">merge</a>)(struct <a class=\"id\" href=\"#list_head\">list_head</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#return_event\">return_event</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event_holder\">fsnotify_event_holder</a> *<a class=\"id\" href=\"#holder\">holder</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#notification_list\">notification_list</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: group=%p event=%p priv=%p\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#priv\">priv</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There is one fsnotify_event_holder embedded inside each fsnotify_event.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check if we expect to be able to use that holder.  If not alloc a new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * holder.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For the overflow event it's possible that something will use the in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * event holder before we get the lock so we may need to jump back and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * alloc a new holder, this can't happen for most events...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#holder\">holder</a>.<a class=\"id\" href=\"#event_list\">event_list</a>)) {", 
"<a class=\"id\" href=\"#alloc_holder\">alloc_holder</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#holder\">holder</a> = <a class=\"id\" href=\"#fsnotify_alloc_event_holder\">fsnotify_alloc_event_holder</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#holder\">holder</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#notification_mutex\">notification_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#q_len\">q_len</a> >= <a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#max_events\">max_events</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#q_overflow_event\">q_overflow_event</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we need to return the overflow event</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * which means we need a ref</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_get_event\">fsnotify_get_event</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_event\">return_event</a> = <a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* sorry, no private data on the overflow event */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#priv\">priv</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#list\">list</a>) && <a class=\"id\" href=\"#merge\">merge</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#merge\">merge</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#notification_mutex\">notification_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#return_event\">return_event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_event\">fsnotify_put_event</a>(<a class=\"id\" href=\"#return_event\">return_event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#holder\">holder</a> != &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#holder\">holder</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_destroy_event_holder\">fsnotify_destroy_event_holder</a>(<a class=\"id\" href=\"#holder\">holder</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#holder\">holder</a>.<a class=\"id\" href=\"#event_list\">event_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#holder\">holder</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_destroy_event_holder\">fsnotify_destroy_event_holder</a>(<a class=\"id\" href=\"#holder\">holder</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#holder\">holder</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#holder\">holder</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#holder\">holder</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* between the time we checked above and got the lock the in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * event holder was used, go back and get a new one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#notification_mutex\">notification_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#return_event\">return_event</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_event\">fsnotify_put_event</a>(<a class=\"id\" href=\"#return_event\">return_event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_event\">return_event</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#alloc_holder\">alloc_holder</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#q_len\">q_len</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#holder\">holder</a>-><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_get_event\">fsnotify_get_event</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#holder\">holder</a>-><a class=\"id\" href=\"#event_list\">event_list</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#priv\">priv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#event_list\">event_list</a>, &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#private_data_list\">private_data_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#notification_mutex\">notification_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#notification_waitq\">notification_waitq</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#return_event\">return_event</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove and return the first event from the notification list.  There is a</span>", 
"<span class=\"comment\"> * reference held on this event since it was on the list.  It is the responsibility</span>", 
"<span class=\"comment\"> * of the caller to drop this reference.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#fsnotify_remove_notify_event\">fsnotify_remove_notify_event</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event_holder\">fsnotify_event_holder</a> *<a class=\"id\" href=\"#holder\">holder</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#mutex_is_locked\">mutex_is_locked</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#notification_mutex\">notification_mutex</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: group=%p\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#holder\">holder</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#notification_list\">notification_list</a>, struct <a class=\"id\" href=\"#fsnotify_event_holder\">fsnotify_event_holder</a>, <a class=\"id\" href=\"#event_list\">event_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#holder\">holder</a>-><a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#holder\">holder</a>-><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#holder\">holder</a>-><a class=\"id\" href=\"#event_list\">event_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* event == holder means we are referenced through the in event holder */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#holder\">holder</a> != &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#holder\">holder</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_destroy_event_holder\">fsnotify_destroy_event_holder</a>(<a class=\"id\" href=\"#holder\">holder</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#q_len\">q_len</a>--;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This will not remove the event, that must be done with fsnotify_remove_notify_event()</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#fsnotify_peek_notify_event\">fsnotify_peek_notify_event</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event_holder\">fsnotify_event_holder</a> *<a class=\"id\" href=\"#holder\">holder</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#mutex_is_locked\">mutex_is_locked</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#notification_mutex\">notification_mutex</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#holder\">holder</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#notification_list\">notification_list</a>, struct <a class=\"id\" href=\"#fsnotify_event_holder\">fsnotify_event_holder</a>, <a class=\"id\" href=\"#event_list\">event_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#holder\">holder</a>-><a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called when a group is being torn down to clean up any outstanding</span>", 
"<span class=\"comment\"> * event notifications.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#fsnotify_flush_notify\">fsnotify_flush_notify</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event_private_data\">fsnotify_event_private_data</a> *<a class=\"id\" href=\"#priv\">priv</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#notification_mutex\">notification_mutex</a>);", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#fsnotify_notify_queue_is_empty\">fsnotify_notify_queue_is_empty</a>(<a class=\"id\" href=\"#group\">group</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#fsnotify_remove_notify_event\">fsnotify_remove_notify_event</a>(<a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if they don't implement free_event_priv they better not have attached any */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#free_event_priv\">free_event_priv</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#priv\">priv</a> = <a class=\"id\" href=\"#fsnotify_remove_priv_from_event\">fsnotify_remove_priv_from_event</a>(<a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#priv\">priv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#free_event_priv\">free_event_priv</a>(<a class=\"id\" href=\"#priv\">priv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_event\">fsnotify_put_event</a>(<a class=\"id\" href=\"#event\">event</a>); <span class=\"comment\">/* matches fsnotify_add_notify_event */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#notification_mutex\">notification_mutex</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#initialize_event\">initialize_event</a>(struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#holder\">holder</a>.<a class=\"id\" href=\"#event_list\">event_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>, 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#private_data_list\">private_data_list</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Caller damn well better be holding whatever mutex is protecting the</span>", 
"<span class=\"comment\"> * old_holder-&gt;event_list and the new_event must be a clean event which</span>", 
"<span class=\"comment\"> * cannot be found anywhere else in the kernel.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#fsnotify_replace_event\">fsnotify_replace_event</a>(struct <a class=\"id\" href=\"#fsnotify_event_holder\">fsnotify_event_holder</a> *<a class=\"id\" href=\"#old_holder\">old_holder</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#new_event\">new_event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#old_event\">old_event</a> = <a class=\"id\" href=\"#old_holder\">old_holder</a>-><a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event_holder\">fsnotify_event_holder</a> *<a class=\"id\" href=\"#new_holder\">new_holder</a> = &amp;<a class=\"id\" href=\"#new_event\">new_event</a>-><a class=\"id\" href=\"#holder\">holder</a>;", 
"", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#event_spinlock_class\">event_spinlock_class</a> {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SPINLOCK_OLD\">SPINLOCK_OLD</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SPINLOCK_NEW\">SPINLOCK_NEW</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: old_event=%p new_event=%p\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#old_event\">old_event</a>, <a class=\"id\" href=\"#new_event\">new_event</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the new_event's embedded holder is in use someone</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * screwed up and didn't give us a clean new event.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#new_holder\">new_holder</a>-><a class=\"id\" href=\"#event_list\">event_list</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_nested\">spin_lock_nested</a>(&amp;<a class=\"id\" href=\"#old_event\">old_event</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#SPINLOCK_OLD\">SPINLOCK_OLD</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_nested\">spin_lock_nested</a>(&amp;<a class=\"id\" href=\"#new_event\">new_event</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#SPINLOCK_NEW\">SPINLOCK_NEW</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_holder\">new_holder</a>-><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#new_event\">new_event</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_replace_init\">list_replace_init</a>(&amp;<a class=\"id\" href=\"#old_holder\">old_holder</a>-><a class=\"id\" href=\"#event_list\">event_list</a>, &amp;<a class=\"id\" href=\"#new_holder\">new_holder</a>-><a class=\"id\" href=\"#event_list\">event_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#new_event\">new_event</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#old_event\">old_event</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* event == holder means we are referenced through the in event holder */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_holder\">old_holder</a> != &amp;<a class=\"id\" href=\"#old_event\">old_event</a>-><a class=\"id\" href=\"#holder\">holder</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_destroy_event_holder\">fsnotify_destroy_event_holder</a>(<a class=\"id\" href=\"#old_holder\">old_holder</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_get_event\">fsnotify_get_event</a>(<a class=\"id\" href=\"#new_event\">new_event</a>); <span class=\"comment\">/* on the list take reference */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_event\">fsnotify_put_event</a>(<a class=\"id\" href=\"#old_event\">old_event</a>); <span class=\"comment\">/* off the list, drop reference */</span>", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#fsnotify_clone_event\">fsnotify_clone_event</a>(struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#old_event\">old_event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#fsnotify_event_cachep\">fsnotify_event_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: old_event=%p new_event=%p\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#old_event\">old_event</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#old_event\">old_event</a>, sizeof(*<a class=\"id\" href=\"#event\">event</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#initialize_event\">initialize_event</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#name_len\">name_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#file_name\">file_name</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#old_event\">old_event</a>-><a class=\"id\" href=\"#file_name\">file_name</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#file_name\">file_name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#fsnotify_event_cachep\">fsnotify_event_cachep</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#tgid\">tgid</a> = <a class=\"id\" href=\"#get_pid\">get_pid</a>(<a class=\"id\" href=\"#old_event\">old_event</a>-><a class=\"id\" href=\"#tgid\">tgid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#data_type\">data_type</a> == <a class=\"id\" href=\"#FSNOTIFY_EVENT_PATH\">FSNOTIFY_EVENT_PATH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path_get\">path_get</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#path\">path</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fsnotify_create_event - Allocate a new event which will be sent to each</span>", 
"<span class=\"comment\"> * group's handle_event function if the group was interested in this</span>", 
"<span class=\"comment\"> * particular event.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @to_tell the inode which is supposed to receive the event (sometimes a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>parent of the inode to which the event happened.</span>", 
"<span class=\"comment\"> * @mask what actually happened.</span>", 
"<span class=\"comment\"> * @data pointer to the object which was actually affected</span>", 
"<span class=\"comment\"> * @data_type flag indication if the data is a file, path, inode, nothing...</span>", 
"<span class=\"comment\"> * @name the filename, if available</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#fsnotify_create_event\">fsnotify_create_event</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#to_tell\">to_tell</a>, <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#mask\">mask</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#data_type\">data_type</a>, const unsigned char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#cookie\">cookie</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#fsnotify_event_cachep\">fsnotify_event_cachep</a>, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: event=%p to_tell=%p mask=%x data=%p data_type=%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#to_tell\">to_tell</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#data_type\">data_type</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#initialize_event\">initialize_event</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#name\">name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#file_name\">file_name</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#file_name\">file_name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#fsnotify_event_cachep\">fsnotify_event_cachep</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#name_len\">name_len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#file_name\">file_name</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#tgid\">tgid</a> = <a class=\"id\" href=\"#get_pid\">get_pid</a>(<a class=\"id\" href=\"#task_tgid\">task_tgid</a>(<a class=\"id\" href=\"#current\">current</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#sync_cookie\">sync_cookie</a> = <a class=\"id\" href=\"#cookie\">cookie</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#to_tell\">to_tell</a> = <a class=\"id\" href=\"#to_tell\">to_tell</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#data_type\">data_type</a> = <a class=\"id\" href=\"#data_type\">data_type</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#data_type\">data_type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FSNOTIFY_EVENT_PATH\">FSNOTIFY_EVENT_PATH</a>: {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path_get\">path_get</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FSNOTIFY_EVENT_INODE\">FSNOTIFY_EVENT_INODE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FSNOTIFY_EVENT_NONE\">FSNOTIFY_EVENT_NONE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#fsnotify_notification_init\">fsnotify_notification_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_event_cachep\">fsnotify_event_cachep</a> = <a class=\"id\" href=\"#KMEM_CACHE\">KMEM_CACHE</a>(<a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a>, <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_event_holder_cachep\">fsnotify_event_holder_cachep</a> = <a class=\"id\" href=\"#KMEM_CACHE\">KMEM_CACHE</a>(<a class=\"id\" href=\"#fsnotify_event_holder\">fsnotify_event_holder</a>, <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q_overflow_event\">q_overflow_event</a> = <a class=\"id\" href=\"#fsnotify_create_event\">fsnotify_create_event</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#FS_Q_OVERFLOW\">FS_Q_OVERFLOW</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#FSNOTIFY_EVENT_NONE\">FSNOTIFY_EVENT_NONE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#q_overflow_event\">q_overflow_event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"unable to allocate fsnotify q_overflow_event\\n\");", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#subsys_initcall\">subsys_initcall</a>(<a class=\"id\" href=\"#fsnotify_notification_init\">fsnotify_notification_init</a>);", 
"", 
];
xr_frag_insert('l/47/d563c2c718405713aa3a595c0e88d8f59c76be.xr', __xr_tmp);
