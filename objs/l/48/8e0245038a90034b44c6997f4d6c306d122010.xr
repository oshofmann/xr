var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * High-level sync()-related operations</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#linkage\">linkage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#quotaops\">quotaops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#backing\">backing</a>-<a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VALID_FLAGS\">VALID_FLAGS</a> (<a class=\"id\" href=\"#SYNC_FILE_RANGE_WAIT_BEFORE\">SYNC_FILE_RANGE_WAIT_BEFORE</a>|<a class=\"id\" href=\"#SYNC_FILE_RANGE_WRITE\">SYNC_FILE_RANGE_WRITE</a>| \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SYNC_FILE_RANGE_WAIT_AFTER\">SYNC_FILE_RANGE_WAIT_AFTER</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Do the filesystem syncing work. For simple filesystems</span>", 
"<span class=\"comment\"> * writeback_inodes_sb(sb) just dirties buffers with inodes so we have to</span>", 
"<span class=\"comment\"> * submit IO for these buffers via __sync_blockdev(). This also speeds up the</span>", 
"<span class=\"comment\"> * wait == 1 case since in that case write_inode() functions do</span>", 
"<span class=\"comment\"> * sync_dirty_buffer() and thus effectively write one block at a time.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__sync_filesystem\">__sync_filesystem</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This should be safe, as we require bdi backing to actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * write out data in the first place</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdi\">s_bdi</a> || <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdi\">s_bdi</a> == &amp;<a class=\"id\" href=\"#noop_backing_dev_info\">noop_backing_dev_info</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_qcop\">s_qcop</a> && <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_qcop\">s_qcop</a>-><a class=\"id\" href=\"#quota_sync\">quota_sync</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_qcop\">s_qcop</a>-><a class=\"id\" href=\"#quota_sync\">quota_sync</a>(<a class=\"id\" href=\"#sb\">sb</a>, -1, <a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wait\">wait</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_inodes_sb\">sync_inodes_sb</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writeback_inodes_sb\">writeback_inodes_sb</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#sync_fs\">sync_fs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#sync_fs\">sync_fs</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__sync_blockdev\">__sync_blockdev</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Write out and wait upon all dirty data associated with this</span>", 
"<span class=\"comment\"> * superblock.  Filesystem data as well as the underlying block</span>", 
"<span class=\"comment\"> * device.  Takes the superblock lock.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sync_filesystem\">sync_filesystem</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to be protected against the filesystem going from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * r/o to r/w or vice versa.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#rwsem_is_locked\">rwsem_is_locked</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No point in syncing out anything if the filesystem is read-only.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__sync_filesystem\">__sync_filesystem</a>(<a class=\"id\" href=\"#sb\">sb</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__sync_filesystem\">__sync_filesystem</a>(<a class=\"id\" href=\"#sb\">sb</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sync_filesystem\">sync_filesystem</a>);", 
"", 
"static void <a class=\"id\" href=\"#sync_one_sb\">sync_one_sb</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>) && <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdi\">s_bdi</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__sync_filesystem\">__sync_filesystem</a>(<a class=\"id\" href=\"#sb\">sb</a>, *(int *)<a class=\"id\" href=\"#arg\">arg</a>);", 
"}", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Sync all the data for all the filesystems (called by sys_sync() and</span>", 
"<span class=\"comment\"> * emergency sync)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sync_filesystems\">sync_filesystems</a>(int <a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iterate_supers\">iterate_supers</a>(<a class=\"id\" href=\"#sync_one_sb\">sync_one_sb</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sync everything.  Start out by waking pdflush, because that writes back</span>", 
"<span class=\"comment\"> * all queues in parallel.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE0\">SYSCALL_DEFINE0</a>(<a class=\"id\" href=\"#sync\">sync</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wakeup_flusher_threads\">wakeup_flusher_threads</a>(0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sync_filesystems\">sync_filesystems</a>(0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sync_filesystems\">sync_filesystems</a>(1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#laptop_mode\">laptop_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#laptop_sync_completion\">laptop_sync_completion</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#do_sync_work\">do_sync_work</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Sync twice to reduce the possibility we skipped some inodes / pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because they were temporarily locked</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sync_filesystems\">sync_filesystems</a>(0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sync_filesystems\">sync_filesystems</a>(0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Emergency Sync complete\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#emergency_sync\">emergency_sync</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#work\">work</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#work\">work</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#do_sync_work\">do_sync_work</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vfs_fsync_range - helper to sync a range of data &amp; metadata to disk</span>", 
"<span class=\"comment\"> * @file:<span class=\"ts\"/><span class=\"ts\"/>file to sync</span>", 
"<span class=\"comment\"> * @start:<span class=\"ts\"/><span class=\"ts\"/>offset in bytes of the beginning of data range to sync</span>", 
"<span class=\"comment\"> * @end:<span class=\"ts\"/><span class=\"ts\"/>offset in bytes of the end of data range (inclusive)</span>", 
"<span class=\"comment\"> * @datasync:<span class=\"ts\"/><span class=\"ts\"/>perform only datasync</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Write back data in range @start..@end and metadata for @file to disk.  If</span>", 
"<span class=\"comment\"> * @datasync is set only metadata needed to access modified file data is</span>", 
"<span class=\"comment\"> * written.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#vfs_fsync_range\">vfs_fsync_range</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#end\">end</a>, int <a class=\"id\" href=\"#datasync\">datasync</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a> || !<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#fsync\">fsync</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#filemap_write_and_wait_range\">filemap_write_and_wait_range</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to protect against concurrent writers, which could cause</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * livelocks in fsync_buffers_list().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#fsync\">fsync</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#datasync\">datasync</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vfs_fsync_range\">vfs_fsync_range</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vfs_fsync - perform a fsync or fdatasync on a file</span>", 
"<span class=\"comment\"> * @file:<span class=\"ts\"/><span class=\"ts\"/>file to sync</span>", 
"<span class=\"comment\"> * @datasync:<span class=\"ts\"/><span class=\"ts\"/>only perform a fdatasync operation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Write back data and metadata for @file to disk.  If @datasync is</span>", 
"<span class=\"comment\"> * set only metadata needed to access modified file data is written.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#vfs_fsync\">vfs_fsync</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#datasync\">datasync</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vfs_fsync_range\">vfs_fsync_range</a>(<a class=\"id\" href=\"#file\">file</a>, 0, <a class=\"id\" href=\"#LLONG_MAX\">LLONG_MAX</a>, <a class=\"id\" href=\"#datasync\">datasync</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vfs_fsync\">vfs_fsync</a>);", 
"", 
"static int <a class=\"id\" href=\"#do_fsync\">do_fsync</a>(unsigned int <a class=\"id\" href=\"#fd\">fd</a>, int <a class=\"id\" href=\"#datasync\">datasync</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#fget\">fget</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#vfs_fsync\">vfs_fsync</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#datasync\">datasync</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#fsync\">fsync</a>, unsigned int, <a class=\"id\" href=\"#fd\">fd</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_fsync\">do_fsync</a>(<a class=\"id\" href=\"#fd\">fd</a>, 0);", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#fdatasync\">fdatasync</a>, unsigned int, <a class=\"id\" href=\"#fd\">fd</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_fsync\">do_fsync</a>(<a class=\"id\" href=\"#fd\">fd</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * generic_write_sync - perform syncing after a write if file / inode is sync</span>", 
"<span class=\"comment\"> * @file:<span class=\"ts\"/>file to which the write happened</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>offset where the write started</span>", 
"<span class=\"comment\"> * @count:<span class=\"ts\"/>length of the write</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is just a simple wrapper about our general syncing function.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#generic_write_sync\">generic_write_sync</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_DSYNC\">O_DSYNC</a>) && !<a class=\"id\" href=\"#IS_SYNC\">IS_SYNC</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#host\">host</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vfs_fsync_range\">vfs_fsync_range</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#count\">count</a> - 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#__O_SYNC\">__O_SYNC</a>) ? 0 : 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_write_sync\">generic_write_sync</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sys_sync_file_range() permits finely controlled syncing over a segment of</span>", 
"<span class=\"comment\"> * a file in the range offset .. (offset+nbytes-1) inclusive.  If nbytes is</span>", 
"<span class=\"comment\"> * zero then sys_sync_file_range() will operate from offset out to EOF.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The flag bits are:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SYNC_FILE_RANGE_WAIT_BEFORE: wait upon writeout of all pages in the range</span>", 
"<span class=\"comment\"> * before performing the write.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SYNC_FILE_RANGE_WRITE: initiate writeout of all those dirty pages in the</span>", 
"<span class=\"comment\"> * range which are not presently under writeback. Note that this may block for</span>", 
"<span class=\"comment\"> * significant periods due to exhaustion of disk request structures.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SYNC_FILE_RANGE_WAIT_AFTER: wait upon writeout of all pages in the range</span>", 
"<span class=\"comment\"> * after performing the write.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Useful combinations of the flag bits are:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SYNC_FILE_RANGE_WAIT_BEFORE|SYNC_FILE_RANGE_WRITE: ensures that all pages</span>", 
"<span class=\"comment\"> * in the range which were dirty on entry to sys_sync_file_range() are placed</span>", 
"<span class=\"comment\"> * under writeout.  This is a start-write-for-data-integrity operation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SYNC_FILE_RANGE_WRITE: start writeout of all dirty pages in the range which</span>", 
"<span class=\"comment\"> * are not presently under writeout.  This is an asynchronous flush-to-disk</span>", 
"<span class=\"comment\"> * operation.  Not suitable for data integrity operations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SYNC_FILE_RANGE_WAIT_BEFORE (or SYNC_FILE_RANGE_WAIT_AFTER): wait for</span>", 
"<span class=\"comment\"> * completion of writeout of all pages in the range.  This will be used after an</span>", 
"<span class=\"comment\"> * earlier SYNC_FILE_RANGE_WAIT_BEFORE|SYNC_FILE_RANGE_WRITE operation to wait</span>", 
"<span class=\"comment\"> * for that operation to complete and to return the result.</span>", 
];
xr_frag_insert('l/48/8e0245038a90034b44c6997f4d6c306d122010.xr', __xr_tmp);
