var __xr_tmp = [
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#DMF_FROZEN\">DMF_FROZEN</a>, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#unlock_fs\">unlock_fs</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#DMF_FROZEN\">DMF_FROZEN</a>, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thaw_bdev\">thaw_bdev</a>(<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#frozen_sb\">frozen_sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#frozen_sb\">frozen_sb</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#DMF_FROZEN\">DMF_FROZEN</a>, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We need to be able to change a mapping table under a mounted</span>", 
"<span class=\"comment\"> * filesystem.  For example we might want to move some data in</span>", 
"<span class=\"comment\"> * the background.  Before the table can be swapped with</span>", 
"<span class=\"comment\"> * dm_bind_table, dm_suspend must be called to flush any in</span>", 
"<span class=\"comment\"> * flight bios and ensure that any further io gets deferred.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Suspend mechanism in request-based dm.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1. Flush all I/Os by lock_fs() if needed.</span>", 
"<span class=\"comment\"> * 2. Stop dispatching any I/O by stopping the request_queue.</span>", 
"<span class=\"comment\"> * 3. Wait for all in-flight I/Os to be completed or requeued.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To abort suspend, start the request_queue.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dm_suspend\">dm_suspend</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>, unsigned <a class=\"id\" href=\"#suspend_flags\">suspend_flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#do_lockfs\">do_lockfs</a> = <a class=\"id\" href=\"#suspend_flags\">suspend_flags</a> &amp; <a class=\"id\" href=\"#DM_SUSPEND_LOCKFS_FLAG\">DM_SUSPEND_LOCKFS_FLAG</a> ? 1 : 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#noflush\">noflush</a> = <a class=\"id\" href=\"#suspend_flags\">suspend_flags</a> &amp; <a class=\"id\" href=\"#DM_SUSPEND_NOFLUSH_FLAG\">DM_SUSPEND_NOFLUSH_FLAG</a> ? 1 : 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#suspend_lock\">suspend_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dm_suspended_md\">dm_suspended_md</a>(<a class=\"id\" href=\"#md\">md</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#dm_get_live_table\">dm_get_live_table</a>(<a class=\"id\" href=\"#md\">md</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * DMF_NOFLUSH_SUSPENDING must be set before presuspend.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This flag is cleared before dm_suspend returns.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#noflush\">noflush</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#DMF_NOFLUSH_SUSPENDING\">DMF_NOFLUSH_SUSPENDING</a>, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This does not get reverted if there's an error later. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_table_presuspend_targets\">dm_table_presuspend_targets</a>(<a class=\"id\" href=\"#map\">map</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Flush I/O to the device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Any I/O submitted after lock_fs() may not be flushed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * noflush takes precedence over do_lockfs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (lock_fs() flushes I/Os and waits for them to complete.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#noflush\">noflush</a> && <a class=\"id\" href=\"#do_lockfs\">do_lockfs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#lock_fs\">lock_fs</a>(<a class=\"id\" href=\"#md\">md</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Here we must make sure that no processes are submitting requests</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to target drivers i.e. no one may be executing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * __split_and_process_bio. This is called from dm_request and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dm_wq_work.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To get all processes out of __split_and_process_bio in dm_request,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we take the write lock. To prevent any process from reentering</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * __split_and_process_bio from dm_request, we set</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * DMF_QUEUE_IO_TO_THREAD.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To quiesce the thread (dm_wq_work), we set DMF_BLOCK_IO_FOR_SUSPEND</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and call flush_workqueue(md-&gt;wq). flush_workqueue will wait until</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dm_wq_work exits and DMF_BLOCK_IO_FOR_SUSPEND will prevent any</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * further calls to __split_and_process_bio from dm_wq_work.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#io_lock\">io_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#DMF_BLOCK_IO_FOR_SUSPEND\">DMF_BLOCK_IO_FOR_SUSPEND</a>, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#DMF_QUEUE_IO_TO_THREAD\">DMF_QUEUE_IO_TO_THREAD</a>, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#io_lock\">io_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Request-based dm uses md-&gt;wq for barrier (dm_rq_barrier_work) which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can be kicked until md-&gt;queue is stopped.  So stop md-&gt;queue before</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * flushing md-&gt;wq.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dm_request_based\">dm_request_based</a>(<a class=\"id\" href=\"#md\">md</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stop_queue\">stop_queue</a>(<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#queue\">queue</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_workqueue\">flush_workqueue</a>(<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#wq\">wq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At this point no more requests are entering target request routines.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We call dm_wait_for_completion to wait for all existing requests</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to finish.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#dm_wait_for_completion\">dm_wait_for_completion</a>(<a class=\"id\" href=\"#md\">md</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#io_lock\">io_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#noflush\">noflush</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#DMF_NOFLUSH_SUSPENDING\">DMF_NOFLUSH_SUSPENDING</a>, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#io_lock\">io_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* were we interrupted ? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dm_queue_flush\">dm_queue_flush</a>(<a class=\"id\" href=\"#md\">md</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dm_request_based\">dm_request_based</a>(<a class=\"id\" href=\"#md\">md</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_queue\">start_queue</a>(<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#queue\">queue</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_fs\">unlock_fs</a>(<a class=\"id\" href=\"#md\">md</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>; <span class=\"comment\">/* pushback list is already flushed, so skip flush */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If dm_wait_for_completion returned 0, the device is completely</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * quiescent now. There is no request-processing activity. All new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * requests are being added to md-&gt;deferred list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#DMF_SUSPENDED\">DMF_SUSPENDED</a>, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_table_postsuspend_targets\">dm_table_postsuspend_targets</a>(<a class=\"id\" href=\"#map\">map</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_table_put\">dm_table_put</a>(<a class=\"id\" href=\"#map\">map</a>);", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#suspend_lock\">suspend_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#dm_resume\">dm_resume</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#suspend_lock\">suspend_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dm_suspended_md\">dm_suspended_md</a>(<a class=\"id\" href=\"#md\">md</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#dm_get_live_table\">dm_get_live_table</a>(<a class=\"id\" href=\"#md\">md</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#map\">map</a> || !<a class=\"id\" href=\"#dm_table_get_size\">dm_table_get_size</a>(<a class=\"id\" href=\"#map\">map</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#dm_table_resume_targets\">dm_table_resume_targets</a>(<a class=\"id\" href=\"#map\">map</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_queue_flush\">dm_queue_flush</a>(<a class=\"id\" href=\"#md\">md</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Flushing deferred I/Os must be done after targets are resumed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so that mapping of targets can work correctly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Request-based dm is queueing the deferred I/Os in its request_queue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dm_request_based\">dm_request_based</a>(<a class=\"id\" href=\"#md\">md</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_queue\">start_queue</a>(<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#queue\">queue</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_fs\">unlock_fs</a>(<a class=\"id\" href=\"#md\">md</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#DMF_SUSPENDED\">DMF_SUSPENDED</a>, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_table_unplug_all\">dm_table_unplug_all</a>(<a class=\"id\" href=\"#map\">map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_table_put\">dm_table_put</a>(<a class=\"id\" href=\"#map\">map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#suspend_lock\">suspend_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"", 
"<span class=\"comment\">/*-----------------------------------------------------------------</span>", 
"<span class=\"comment\"> * Event notification.</span>", 
"<span class=\"comment\"> *---------------------------------------------------------------*/</span>", 
"int <a class=\"id\" href=\"#dm_kobject_uevent\">dm_kobject_uevent</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>, enum <a class=\"id\" href=\"#kobject_action\">kobject_action</a> <a class=\"id\" href=\"#action\">action</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       unsigned <a class=\"id\" href=\"#cookie\">cookie</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#udev_cookie\">udev_cookie</a>[<a class=\"id\" href=\"#DM_COOKIE_LENGTH\">DM_COOKIE_LENGTH</a>];", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#envp\">envp</a>[] = { <a class=\"id\" href=\"#udev_cookie\">udev_cookie</a>, <a class=\"id\" href=\"#NULL\">NULL</a> };", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cookie\">cookie</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#kobject_uevent\">kobject_uevent</a>(&amp;<a class=\"id\" href=\"#disk_to_dev\">disk_to_dev</a>(<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#disk\">disk</a>)-><a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#action\">action</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#udev_cookie\">udev_cookie</a>, <a class=\"id\" href=\"#DM_COOKIE_LENGTH\">DM_COOKIE_LENGTH</a>, \"%s=%u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#DM_COOKIE_ENV_VAR_NAME\">DM_COOKIE_ENV_VAR_NAME</a>, <a class=\"id\" href=\"#cookie\">cookie</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#kobject_uevent_env\">kobject_uevent_env</a>(&amp;<a class=\"id\" href=\"#disk_to_dev\">disk_to_dev</a>(<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#disk\">disk</a>)-><a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#action\">action</a>, <a class=\"id\" href=\"#envp\">envp</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#dm_next_uevent_seq\">dm_next_uevent_seq</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_add_return\">atomic_add_return</a>(1, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#uevent_seq\">uevent_seq</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#dm_get_event_nr\">dm_get_event_nr</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#event_nr\">event_nr</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#dm_wait_event\">dm_wait_event</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>, int <a class=\"id\" href=\"#event_nr\">event_nr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#wait_event_interruptible\">wait_event_interruptible</a>(<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#eventq\">eventq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#event_nr\">event_nr</a> != <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#event_nr\">event_nr</a>)));", 
"}", 
"", 
"void <a class=\"id\" href=\"#dm_uevent_add\">dm_uevent_add</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#elist\">elist</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#uevent_lock\">uevent_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(<a class=\"id\" href=\"#elist\">elist</a>, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#uevent_list\">uevent_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#uevent_lock\">uevent_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The gendisk is only valid as long as you have a reference</span>", 
"<span class=\"comment\"> * count on 'md'.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#dm_disk\">dm_disk</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#disk\">disk</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#dm_kobject\">dm_kobject</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#kobj\">kobj</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * struct mapped_device should not be exported outside of dm.c</span>", 
"<span class=\"comment\"> * so use this check to verify that kobj is part of md structure</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#dm_get_from_kobject\">dm_get_from_kobject</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a>, <a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>if (&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#kobj\">kobj</a> != <a class=\"id\" href=\"#kobj\">kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#DMF_FREEING\">DMF_FREEING</a>, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#flags\">flags</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#dm_deleting_md\">dm_deleting_md</a>(<a class=\"id\" href=\"#md\">md</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_get\">dm_get</a>(<a class=\"id\" href=\"#md\">md</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#md\">md</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#dm_suspended_md\">dm_suspended_md</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#DMF_SUSPENDED\">DMF_SUSPENDED</a>, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#dm_suspended\">dm_suspended</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dm_suspended_md\">dm_suspended_md</a>(<a class=\"id\" href=\"#dm_table_get_md\">dm_table_get_md</a>(<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#table\">table</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#dm_suspended\">dm_suspended</a>);", 
"", 
"int <a class=\"id\" href=\"#dm_noflush_suspending\">dm_noflush_suspending</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__noflush_suspending\">__noflush_suspending</a>(<a class=\"id\" href=\"#dm_table_get_md\">dm_table_get_md</a>(<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#table\">table</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#dm_noflush_suspending\">dm_noflush_suspending</a>);", 
"", 
"struct <a class=\"id\" href=\"#dm_md_mempools\">dm_md_mempools</a> *<a class=\"id\" href=\"#dm_alloc_md_mempools\">dm_alloc_md_mempools</a>(unsigned <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_md_mempools\">dm_md_mempools</a> *<a class=\"id\" href=\"#pools\">pools</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#pools\">pools</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pools\">pools</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pools\">pools</a>-><a class=\"id\" href=\"#io_pool\">io_pool</a> = (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#DM_TYPE_BIO_BASED\">DM_TYPE_BIO_BASED</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#mempool_create_slab_pool\">mempool_create_slab_pool</a>(<a class=\"id\" href=\"#MIN_IOS\">MIN_IOS</a>, <a class=\"id\" href=\"#_io_cache\">_io_cache</a>) :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#mempool_create_slab_pool\">mempool_create_slab_pool</a>(<a class=\"id\" href=\"#MIN_IOS\">MIN_IOS</a>, <a class=\"id\" href=\"#_rq_bio_info_cache\">_rq_bio_info_cache</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pools\">pools</a>-><a class=\"id\" href=\"#io_pool\">io_pool</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_pools_and_out\">free_pools_and_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pools\">pools</a>-><a class=\"id\" href=\"#tio_pool\">tio_pool</a> = (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#DM_TYPE_BIO_BASED\">DM_TYPE_BIO_BASED</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#mempool_create_slab_pool\">mempool_create_slab_pool</a>(<a class=\"id\" href=\"#MIN_IOS\">MIN_IOS</a>, <a class=\"id\" href=\"#_tio_cache\">_tio_cache</a>) :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#mempool_create_slab_pool\">mempool_create_slab_pool</a>(<a class=\"id\" href=\"#MIN_IOS\">MIN_IOS</a>, <a class=\"id\" href=\"#_rq_tio_cache\">_rq_tio_cache</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pools\">pools</a>-><a class=\"id\" href=\"#tio_pool\">tio_pool</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_io_pool_and_out\">free_io_pool_and_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pools\">pools</a>-><a class=\"id\" href=\"#bs\">bs</a> = (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#DM_TYPE_BIO_BASED\">DM_TYPE_BIO_BASED</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#bioset_create\">bioset_create</a>(16, 0) : <a class=\"id\" href=\"#bioset_create\">bioset_create</a>(<a class=\"id\" href=\"#MIN_IOS\">MIN_IOS</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pools\">pools</a>-><a class=\"id\" href=\"#bs\">bs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_tio_pool_and_out\">free_tio_pool_and_out</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pools\">pools</a>;", 
"", 
"<a class=\"id\" href=\"#free_tio_pool_and_out\">free_tio_pool_and_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempool_destroy\">mempool_destroy</a>(<a class=\"id\" href=\"#pools\">pools</a>-><a class=\"id\" href=\"#tio_pool\">tio_pool</a>);", 
"", 
"<a class=\"id\" href=\"#free_io_pool_and_out\">free_io_pool_and_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempool_destroy\">mempool_destroy</a>(<a class=\"id\" href=\"#pools\">pools</a>-><a class=\"id\" href=\"#io_pool\">io_pool</a>);", 
"", 
"<a class=\"id\" href=\"#free_pools_and_out\">free_pools_and_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pools\">pools</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#dm_free_md_mempools\">dm_free_md_mempools</a>(struct <a class=\"id\" href=\"#dm_md_mempools\">dm_md_mempools</a> *<a class=\"id\" href=\"#pools\">pools</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pools\">pools</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pools\">pools</a>-><a class=\"id\" href=\"#io_pool\">io_pool</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mempool_destroy\">mempool_destroy</a>(<a class=\"id\" href=\"#pools\">pools</a>-><a class=\"id\" href=\"#io_pool\">io_pool</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pools\">pools</a>-><a class=\"id\" href=\"#tio_pool\">tio_pool</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mempool_destroy\">mempool_destroy</a>(<a class=\"id\" href=\"#pools\">pools</a>-><a class=\"id\" href=\"#tio_pool\">tio_pool</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pools\">pools</a>-><a class=\"id\" href=\"#bs\">bs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bioset_free\">bioset_free</a>(<a class=\"id\" href=\"#pools\">pools</a>-><a class=\"id\" href=\"#bs\">bs</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pools\">pools</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#block_device_operations\">block_device_operations</a> <a class=\"id\" href=\"#dm_blk_dops\">dm_blk_dops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> = <a class=\"id\" href=\"#dm_blk_open\">dm_blk_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#dm_blk_close\">dm_blk_close</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ioctl\">ioctl</a> = <a class=\"id\" href=\"#dm_blk_ioctl\">dm_blk_ioctl</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#getgeo\">getgeo</a> = <a class=\"id\" href=\"#dm_blk_getgeo\">dm_blk_getgeo</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>", 
"};", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dm_get_mapinfo\">dm_get_mapinfo</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * module hooks</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#dm_init\">dm_init</a>);", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#dm_exit\">dm_exit</a>);", 
"", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#major\">major</a>, <a class=\"id\" href=\"#uint\">uint</a>, 0);", 
"<a class=\"id\" href=\"#MODULE_PARM_DESC\">MODULE_PARM_DESC</a>(<a class=\"id\" href=\"#major\">major</a>, \"The major number of the device mapper\");", 
"<a class=\"id\" href=\"#MODULE_DESCRIPTION\">MODULE_DESCRIPTION</a>(<a class=\"id\" href=\"#DM_NAME\">DM_NAME</a> \" driver\");", 
"<a class=\"id\" href=\"#MODULE_AUTHOR\">MODULE_AUTHOR</a>(\"Joe Thornber <dm-devel@redhat.com>\");", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
];
xr_frag_insert('l/48/b7e4cf22ef0ef534e062ed399adafbb9ff95d5.xr', __xr_tmp);
