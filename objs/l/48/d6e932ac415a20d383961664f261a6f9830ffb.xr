var __xr_tmp = [
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#find_mergeable_anon_vma\">find_mergeable_anon_vma</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#near\">near</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#near\">near</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#near\">near</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#try_prev\">try_prev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#reusable_anon_vma\">reusable_anon_vma</a>(<a class=\"id\" href=\"#near\">near</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#near\">near</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"<a class=\"id\" href=\"#try_prev\">try_prev</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is potentially slow to have to call find_vma_prev here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But it's only on the first write fault on the vma, not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * every time, and we could devise a way to avoid it later</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (e.g. stash info in next's anon_vma_node when assigning</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * an anon_vma, or when trying vma_merge).  Another time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#find_vma_prev\">find_vma_prev</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>, &amp;<a class=\"id\" href=\"#near\">near</a>) != <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#near\">near</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#none\">none</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#reusable_anon_vma\">reusable_anon_vma</a>(<a class=\"id\" href=\"#near\">near</a>, <a class=\"id\" href=\"#near\">near</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"<a class=\"id\" href=\"#none\">none</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There's no absolute need to look only at touching neighbours:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we could search further afield for \"compatible\" anon_vmas.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But it would probably just be a waste of time searching,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or lead to too many vmas hanging off the same anon_vma.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We're trying to allow mprotect remerging later on,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not trying to minimize memory used for anon_vmas.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"void <a class=\"id\" href=\"#vm_stat_account\">vm_stat_account</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, long <a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned long <a class=\"id\" href=\"#stack_flags\">stack_flags</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#VM_STACK_FLAGS\">VM_STACK_FLAGS</a> &amp; (<a class=\"id\" href=\"#VM_GROWSUP\">VM_GROWSUP</a>|<a class=\"id\" href=\"#VM_GROWSDOWN\">VM_GROWSDOWN</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#shared_vm\">shared_vm</a> += <a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#VM_EXEC\">VM_EXEC</a>|<a class=\"id\" href=\"#VM_WRITE\">VM_WRITE</a>)) == <a class=\"id\" href=\"#VM_EXEC\">VM_EXEC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#exec_vm\">exec_vm</a> += <a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#stack_flags\">stack_flags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#stack_vm\">stack_vm</a> += <a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#VM_RESERVED\">VM_RESERVED</a>|<a class=\"id\" href=\"#VM_IO\">VM_IO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#reserved_vm\">reserved_vm</a> += <a class=\"id\" href=\"#pages\">pages</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PROC_FS */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The caller must hold down_write(&amp;current-&gt;mm-&gt;mmap_sem).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"unsigned long <a class=\"id\" href=\"#do_mmap_pgoff\">do_mmap_pgoff</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#len\">len</a>, unsigned long <a class=\"id\" href=\"#prot\">prot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>, unsigned long <a class=\"id\" href=\"#pgoff\">pgoff</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> * <a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#vm_flags\">vm_flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#reqprot\">reqprot</a> = <a class=\"id\" href=\"#prot\">prot</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Does the application expect PROT_READ to imply PROT_EXEC?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (the exception is when the underlying filesystem is noexec</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  mounted, in which case we dont add PROT_EXEC.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#prot\">prot</a> &amp; <a class=\"id\" href=\"#PROT_READ\">PROT_READ</a>) && (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#personality\">personality</a> &amp; <a class=\"id\" href=\"#READ_IMPLIES_EXEC\">READ_IMPLIES_EXEC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#file\">file</a> && (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &amp; <a class=\"id\" href=\"#MNT_NOEXEC\">MNT_NOEXEC</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prot\">prot</a> |= <a class=\"id\" href=\"#PROT_EXEC\">PROT_EXEC</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MAP_FIXED\">MAP_FIXED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#round_hint_to_min\">round_hint_to_min</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Careful about overflows.. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* offset overflow? */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pgoff\">pgoff</a> + (<a class=\"id\" href=\"#len\">len</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)) &lt; <a class=\"id\" href=\"#pgoff\">pgoff</a>)", 
"               return -<a class=\"id\" href=\"#EOVERFLOW\">EOVERFLOW</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Too many mappings? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#map_count\">map_count</a> &gt; <a class=\"id\" href=\"#sysctl_max_map_count\">sysctl_max_map_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Obtain the address to map to. we verify (or select) it and ensure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that it represents a valid section of the address space.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#get_unmapped_area\">get_unmapped_area</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do simple checking here so the lower-level routines won't have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to. we assume access permissions have been handled by the open</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the memory object, so we don't do any here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a> = <a class=\"id\" href=\"#calc_vm_prot_bits\">calc_vm_prot_bits</a>(<a class=\"id\" href=\"#prot\">prot</a>) | <a class=\"id\" href=\"#calc_vm_flag_bits\">calc_vm_flag_bits</a>(<a class=\"id\" href=\"#flags\">flags</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#def_flags\">def_flags</a> | <a class=\"id\" href=\"#VM_MAYREAD\">VM_MAYREAD</a> | <a class=\"id\" href=\"#VM_MAYWRITE\">VM_MAYWRITE</a> | <a class=\"id\" href=\"#VM_MAYEXEC\">VM_MAYEXEC</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MAP_LOCKED\">MAP_LOCKED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#can_do_mlock\">can_do_mlock</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* mlock MCL_FUTURE? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#locked\">locked</a>, <a class=\"id\" href=\"#lock_limit\">lock_limit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locked\">locked</a> = <a class=\"id\" href=\"#len\">len</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locked\">locked</a> += <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#locked_vm\">locked_vm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_limit\">lock_limit</a> = <a class=\"id\" href=\"#rlimit\">rlimit</a>(<a class=\"id\" href=\"#RLIMIT_MEMLOCK\">RLIMIT_MEMLOCK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_limit\">lock_limit</a> >>= <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#locked\">locked</a> &gt; <a class=\"id\" href=\"#lock_limit\">lock_limit</a> && !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_IPC_LOCK\">CAP_IPC_LOCK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a> ? <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MAP_TYPE\">MAP_TYPE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#MAP_SHARED\">MAP_SHARED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#prot\">prot</a>&amp;<a class=\"id\" href=\"#PROT_WRITE\">PROT_WRITE</a>) && !(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a>&amp;<a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Make sure we don't allow writing to an append-only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * file..</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_APPEND\">IS_APPEND</a>(<a class=\"id\" href=\"#inode\">inode</a>) && (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Make sure there are no mandatory locks on the file.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#locks_verify_locked\">locks_verify_locked</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a> |= <a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a> | <a class=\"id\" href=\"#VM_MAYSHARE\">VM_MAYSHARE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &= ~(<a class=\"id\" href=\"#VM_MAYWRITE\">VM_MAYWRITE</a> | <a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#MAP_PRIVATE\">MAP_PRIVATE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &amp; <a class=\"id\" href=\"#MNT_NOEXEC\">MNT_NOEXEC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_EXEC\">VM_EXEC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &= ~<a class=\"id\" href=\"#VM_MAYEXEC\">VM_MAYEXEC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a> || !<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#mmap\">mmap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MAP_TYPE\">MAP_TYPE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#MAP_SHARED\">MAP_SHARED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Ignore pgoff.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff\">pgoff</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a> |= <a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a> | <a class=\"id\" href=\"#VM_MAYSHARE\">VM_MAYSHARE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#MAP_PRIVATE\">MAP_PRIVATE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Set pgoff according to addr for anon_vma.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff\">pgoff</a> = <a class=\"id\" href=\"#addr\">addr</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_file_mmap\">security_file_mmap</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#reqprot\">reqprot</a>, <a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#addr\">addr</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mmap_region\">mmap_region</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#vm_flags\">vm_flags</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#do_mmap_pgoff\">do_mmap_pgoff</a>);", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE6\">SYSCALL_DEFINE6</a>(<a class=\"id\" href=\"#mmap_pgoff\">mmap_pgoff</a>, unsigned long, <a class=\"id\" href=\"#addr\">addr</a>, unsigned long, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long, <a class=\"id\" href=\"#prot\">prot</a>, unsigned long, <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long, <a class=\"id\" href=\"#fd\">fd</a>, unsigned long, <a class=\"id\" href=\"#pgoff\">pgoff</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MAP_ANONYMOUS\">MAP_ANONYMOUS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MAP_HUGETLB\">MAP_HUGETLB</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#fget\">fget</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MAP_HUGETLB\">MAP_HUGETLB</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#user\">user</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * VM_NORESERVE is used because the reservations will be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * taken when vm_ops-&gt;mmap() is called</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * A dummy user value is used because we are not locking</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * memory so no accounting is necessary</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#huge_page_size\">huge_page_size</a>(&amp;<a class=\"id\" href=\"#default_hstate\">default_hstate</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#hugetlb_file_setup\">hugetlb_file_setup</a>(<a class=\"id\" href=\"#HUGETLB_ANON_FILE\">HUGETLB_ANON_FILE</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#VM_NORESERVE\">VM_NORESERVE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#HUGETLB_ANONHUGE_INODE\">HUGETLB_ANONHUGE_INODE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#file\">file</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> &= ~(<a class=\"id\" href=\"#MAP_EXECUTABLE\">MAP_EXECUTABLE</a> | <a class=\"id\" href=\"#MAP_DENYWRITE\">MAP_DENYWRITE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#do_mmap_pgoff\">do_mmap_pgoff</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__ARCH_WANT_SYS_OLD_MMAP\">__ARCH_WANT_SYS_OLD_MMAP</a>", 
"struct <a class=\"id\" href=\"#mmap_arg_struct\">mmap_arg_struct</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#prot\">prot</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#fd\">fd</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>;", 
"};", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#old_mmap\">old_mmap</a>, struct <a class=\"id\" href=\"#mmap_arg_struct\">mmap_arg_struct</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmap_arg_struct\">mmap_arg_struct</a> <a class=\"id\" href=\"#a\">a</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#arg\">arg</a>, sizeof(<a class=\"id\" href=\"#a\">a</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#offset\">offset</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sys_mmap_pgoff\">sys_mmap_pgoff</a>(<a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#fd\">fd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#offset\">offset</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __ARCH_WANT_SYS_OLD_MMAP */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some shared mappigns will want the pages marked read-only</span>", 
"<span class=\"comment\"> * to track write events. If so, we'll downgrade vm_page_prot</span>", 
"<span class=\"comment\"> * to the private version (using protection_map[] without the</span>", 
"<span class=\"comment\"> * VM_SHARED bit).</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#vma_wants_writenotify\">vma_wants_writenotify</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#vm_flags\">vm_flags</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If it was private or non-writable, the write bit is already clear */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; (<a class=\"id\" href=\"#VM_WRITE\">VM_WRITE</a>|<a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a>)) != ((<a class=\"id\" href=\"#VM_WRITE\">VM_WRITE</a>|<a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The backer wishes to know when pages are first written to? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#page_mkwrite\">page_mkwrite</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The open routine did something to the protections already? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>) !=", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#vm_get_page_prot\">vm_get_page_prot</a>(<a class=\"id\" href=\"#vm_flags\">vm_flags</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Specialty mapping? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; (<a class=\"id\" href=\"#VM_PFNMAP\">VM_PFNMAP</a>|<a class=\"id\" href=\"#VM_INSERTPAGE\">VM_INSERTPAGE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Can the mapping track the dirty pages? */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping_cap_account_dirty\">mapping_cap_account_dirty</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We account for memory if it's a private writeable mapping,</span>", 
"<span class=\"comment\"> * not hugepages and VM_NORESERVE wasn't set.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#accountable_mapping\">accountable_mapping</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#vm_flags\">vm_flags</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hugetlb has its own accounting separate from the core VM</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * VM_HUGETLB may not be set yet so we cannot check for that flag.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a> && <a class=\"id\" href=\"#is_file_hugepages\">is_file_hugepages</a>(<a class=\"id\" href=\"#file\">file</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; (<a class=\"id\" href=\"#VM_NORESERVE\">VM_NORESERVE</a> | <a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a> | <a class=\"id\" href=\"#VM_WRITE\">VM_WRITE</a>)) == <a class=\"id\" href=\"#VM_WRITE\">VM_WRITE</a>;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#mmap_region\">mmap_region</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#len\">len</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#vm_flags\">vm_flags</a>, unsigned long <a class=\"id\" href=\"#pgoff\">pgoff</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, *<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#correct_wcount\">correct_wcount</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> **<a class=\"id\" href=\"#rb_link\">rb_link</a>, *<a class=\"id\" href=\"#rb_parent\">rb_parent</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#charged\">charged</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> =  <a class=\"id\" href=\"#file\">file</a> ? <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear old maps */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<a class=\"id\" href=\"#munmap_back\">munmap_back</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma_prepare\">find_vma_prepare</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#prev\">prev</a>, &amp;<a class=\"id\" href=\"#rb_link\">rb_link</a>, &amp;<a class=\"id\" href=\"#rb_parent\">rb_parent</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &lt; <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#do_munmap\">do_munmap</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#munmap_back\">munmap_back</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check against address space limit. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#may_expand_vm\">may_expand_vm</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#len\">len</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set 'VM_NORESERVE' if we should not account for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * memory use of this mapping.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MAP_NORESERVE\">MAP_NORESERVE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We honor MAP_NORESERVE if allowed to overcommit */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_overcommit_memory\">sysctl_overcommit_memory</a> != <a class=\"id\" href=\"#OVERCOMMIT_NEVER\">OVERCOMMIT_NEVER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a> |= <a class=\"id\" href=\"#VM_NORESERVE\">VM_NORESERVE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* hugetlb applies strict overcommit unless MAP_NORESERVE */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a> && <a class=\"id\" href=\"#is_file_hugepages\">is_file_hugepages</a>(<a class=\"id\" href=\"#file\">file</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a> |= <a class=\"id\" href=\"#VM_NORESERVE\">VM_NORESERVE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Private writable mapping: check memory availability</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#accountable_mapping\">accountable_mapping</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#vm_flags\">vm_flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#charged\">charged</a> = <a class=\"id\" href=\"#len\">len</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#security_vm_enough_memory\">security_vm_enough_memory</a>(<a class=\"id\" href=\"#charged\">charged</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a> |= <a class=\"id\" href=\"#VM_ACCOUNT\">VM_ACCOUNT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Can we just expand an old mapping?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma_merge\">vma_merge</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#vm_flags\">vm_flags</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Determine the object being mapped and call the appropriate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * specific mapper. the address has already been validated, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not unmapped, but the maps are removed from the list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#vm_area_cachep\">vm_area_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unacct_error\">unacct_error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a> = <a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> = <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> = <a class=\"id\" href=\"#vm_flags\">vm_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a> = <a class=\"id\" href=\"#vm_get_page_prot\">vm_get_page_prot</a>(<a class=\"id\" href=\"#vm_flags\">vm_flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> = <a class=\"id\" href=\"#pgoff\">pgoff</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; (<a class=\"id\" href=\"#VM_GROWSDOWN\">VM_GROWSDOWN</a>|<a class=\"id\" href=\"#VM_GROWSUP\">VM_GROWSUP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_vma\">free_vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_DENYWRITE\">VM_DENYWRITE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#deny_write_access\">deny_write_access</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_vma\">free_vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#correct_wcount\">correct_wcount</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a> = <a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_file\">get_file</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#mmap\">mmap</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unmap_and_free_vma\">unmap_and_free_vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_EXECUTABLE\">VM_EXECUTABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#added_exe_file_vma\">added_exe_file_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Can addr have changed??</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Answer: Yes, several device drivers can do it in their</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *         f_op-&gt;mmap method. -DaveM</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff\">pgoff</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#shmem_zero_setup\">shmem_zero_setup</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_vma\">free_vma</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma_wants_writenotify\">vma_wants_writenotify</a>(<a class=\"id\" href=\"#vma\">vma</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#pprot\">pprot</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Can vma-&gt;vm_page_prot have changed??</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Answer: Yes, drivers may have changed it in their</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *         f_op-&gt;mmap method.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Ensures that vmas marked as uncached stay that way.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a> = <a class=\"id\" href=\"#vm_get_page_prot\">vm_get_page_prot</a>(<a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; ~<a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#pprot\">pprot</a>) == <a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#pgprot_noncached\">pgprot_noncached</a>(<a class=\"id\" href=\"#pprot\">pprot</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a> = <a class=\"id\" href=\"#pgprot_noncached\">pgprot_noncached</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma_link\">vma_link</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#rb_link\">rb_link</a>, <a class=\"id\" href=\"#rb_parent\">rb_parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Once vma denies write, undo our temporary denial count */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#correct_wcount\">correct_wcount</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_writecount\">i_writecount</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_mmap\">perf_event_mmap</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#total_vm\">total_vm</a> += <a class=\"id\" href=\"#len\">len</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm_stat_account\">vm_stat_account</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vm_flags\">vm_flags</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#len\">len</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mlock_vma_pages_range\">mlock_vma_pages_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#locked_vm\">locked_vm</a> += (<a class=\"id\" href=\"#len\">len</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/>} else if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MAP_POPULATE\">MAP_POPULATE</a>) && !(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MAP_NONBLOCK\">MAP_NONBLOCK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#make_pages_present\">make_pages_present</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<a class=\"id\" href=\"#unmap_and_free_vma\">unmap_and_free_vma</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#correct_wcount\">correct_wcount</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_writecount\">i_writecount</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Undo any partial mapping done by a device driver. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unmap_region\">unmap_region</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#charged\">charged</a> = 0;", 
"<a class=\"id\" href=\"#free_vma\">free_vma</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#vm_area_cachep\">vm_area_cachep</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<a class=\"id\" href=\"#unacct_error\">unacct_error</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#charged\">charged</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_unacct_memory\">vm_unacct_memory</a>(<a class=\"id\" href=\"#charged\">charged</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Get an address range which is currently unmapped.</span>", 
"<span class=\"comment\"> * For shmat() with addr=0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Ugly calling convention alert:</span>", 
"<span class=\"comment\"> * Return value with the low bits set means error value,</span>", 
"<span class=\"comment\"> * ie</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if (ret &amp; ~PAGE_MASK)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>error = ret;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function \"knows\" that -ENOMEM has the bits set.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#HAVE_ARCH_UNMAPPED_AREA\">HAVE_ARCH_UNMAPPED_AREA</a>", 
"unsigned long", 
"<a class=\"id\" href=\"#arch_get_unmapped_area\">arch_get_unmapped_area</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#len\">len</a>, unsigned long <a class=\"id\" href=\"#pgoff\">pgoff</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_addr\">start_addr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MAP_FIXED\">MAP_FIXED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma\">find_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a> - <a class=\"id\" href=\"#len\">len</a> >= <a class=\"id\" href=\"#addr\">addr</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (!<a class=\"id\" href=\"#vma\">vma</a> || <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#len\">len</a> <= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#cached_hole_size\">cached_hole_size</a>) {", 
"<span class=\"ts\"/>        <a class=\"id\" href=\"#start_addr\">start_addr</a> = <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#free_area_cache\">free_area_cache</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/>        <a class=\"id\" href=\"#start_addr\">start_addr</a> = <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#TASK_UNMAPPED_BASE\">TASK_UNMAPPED_BASE</a>;", 
"<span class=\"ts\"/>        <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#cached_hole_size\">cached_hole_size</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#full_search\">full_search</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma\">find_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>); ; <a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* At this point:  (!vma || addr &lt; vma-&gt;vm_end). */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a> - <a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Start a new search - just in case we missed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * some holes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start_addr\">start_addr</a> != <a class=\"id\" href=\"#TASK_UNMAPPED_BASE\">TASK_UNMAPPED_BASE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#TASK_UNMAPPED_BASE\">TASK_UNMAPPED_BASE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>        <a class=\"id\" href=\"#start_addr\">start_addr</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#cached_hole_size\">cached_hole_size</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#full_search\">full_search</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a> || <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#len\">len</a> <= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Remember the place where we stopped the search:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#free_area_cache\">free_area_cache</a> = <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#cached_hole_size\">cached_hole_size</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>        <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#cached_hole_size\">cached_hole_size</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> - <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/>", 
"", 
"void <a class=\"id\" href=\"#arch_unmap_area\">arch_unmap_area</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Is this a new hole at the lowest possible address?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#TASK_UNMAPPED_BASE\">TASK_UNMAPPED_BASE</a> && <a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#free_area_cache\">free_area_cache</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#free_area_cache\">free_area_cache</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#cached_hole_size\">cached_hole_size</a> = ~0UL;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This mmap-allocator allocates new areas top-down from below the</span>", 
"<span class=\"comment\"> * stack's low limit (the base):</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#HAVE_ARCH_UNMAPPED_AREA_TOPDOWN\">HAVE_ARCH_UNMAPPED_AREA_TOPDOWN</a>", 
"unsigned long", 
"<a class=\"id\" href=\"#arch_get_unmapped_area_topdown\">arch_get_unmapped_area_topdown</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, const unsigned long <a class=\"id\" href=\"#addr0\">addr0</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const unsigned long <a class=\"id\" href=\"#len\">len</a>, const unsigned long <a class=\"id\" href=\"#pgoff\">pgoff</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#addr0\">addr0</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* requested length too big for entire address space */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MAP_FIXED\">MAP_FIXED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* requesting a specific address */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma\">find_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a> - <a class=\"id\" href=\"#len\">len</a> >= <a class=\"id\" href=\"#addr\">addr</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(!<a class=\"id\" href=\"#vma\">vma</a> || <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#len\">len</a> <= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check if free_area_cache is useful for us */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> <= <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#cached_hole_size\">cached_hole_size</a>) {", 
" <span class=\"ts\"/>        <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#cached_hole_size\">cached_hole_size</a> = 0;", 
" <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#free_area_cache\">free_area_cache</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_base\">mmap_base</a>;", 
" <span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* either no address requested or can't fit in requested address hole */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#free_area_cache\">free_area_cache</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* make sure it can fit in the remaining address space */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &gt; <a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma\">find_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>-<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a> || <a class=\"id\" href=\"#addr\">addr</a> <= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* remember the address as a hint for next time */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#free_area_cache\">free_area_cache</a> = <a class=\"id\" href=\"#addr\">addr</a>-<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_base\">mmap_base</a> &lt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bottomup\">bottomup</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_base\">mmap_base</a>-<a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Lookup failure means no vma is above this address,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * else if new region fits below vma-&gt;vm_start,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * return with success:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma\">find_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a> || <a class=\"id\" href=\"#addr\">addr</a>+<a class=\"id\" href=\"#len\">len</a> <= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* remember the address as a hint for next time */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#free_area_cache\">free_area_cache</a> = <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
" <span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* remember the largest hole we saw so far */</span>", 
" <span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#cached_hole_size\">cached_hole_size</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>)", 
" <span class=\"ts\"/><span class=\"ts\"/>        <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#cached_hole_size\">cached_hole_size</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> - <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* try just below the current vma-&gt;vm_start */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>-<a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>);", 
"", 
"<a class=\"id\" href=\"#bottomup\">bottomup</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A failed mmap() very likely causes application failure,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so fall back to the bottom-up function here. This scenario</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can happen with large stack limits and large mmap()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#cached_hole_size\">cached_hole_size</a> = ~0UL;", 
"  <span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#free_area_cache\">free_area_cache</a> = <a class=\"id\" href=\"#TASK_UNMAPPED_BASE\">TASK_UNMAPPED_BASE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#arch_get_unmapped_area\">arch_get_unmapped_area</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#addr0\">addr0</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Restore the topdown base:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#free_area_cache\">free_area_cache</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_base\">mmap_base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#cached_hole_size\">cached_hole_size</a> = ~0UL;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#arch_unmap_area_topdown\">arch_unmap_area_topdown</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Is this a new hole at the highest possible address?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &gt; <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#free_area_cache\">free_area_cache</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#free_area_cache\">free_area_cache</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* dont allow allocations above current base */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#free_area_cache\">free_area_cache</a> &gt; <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_base\">mmap_base</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#free_area_cache\">free_area_cache</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_base\">mmap_base</a>;", 
"}", 
"", 
"unsigned long", 
"<a class=\"id\" href=\"#get_unmapped_area\">get_unmapped_area</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pgoff\">pgoff</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long (*<a class=\"id\" href=\"#get_area\">get_area</a>)(struct <a class=\"id\" href=\"#file\">file</a> *, unsigned long,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long, unsigned long, unsigned long);", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#arch_mmap_check\">arch_mmap_check</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Careful about overflows.. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_area\">get_area</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#get_unmapped_area\">get_unmapped_area</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a> && <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a> && <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#get_unmapped_area\">get_unmapped_area</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_area\">get_area</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#get_unmapped_area\">get_unmapped_area</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#get_area\">get_area</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR_VALUE\">IS_ERR_VALUE</a>(<a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &gt; <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a> - <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#arch_rebalance_pgtables\">arch_rebalance_pgtables</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#get_unmapped_area\">get_unmapped_area</a>);", 
"", 
"<span class=\"comment\">/* Look up the first VMA which satisfies  addr &lt; vm_end,  NULL if none. */</span>", 
"struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#find_vma\">find_vma</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check the cache first. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* (Cache hit rate is typically around 35%.) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_cache\">mmap_cache</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vma\">vma</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> &gt; <a class=\"id\" href=\"#addr\">addr</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> <= <a class=\"id\" href=\"#addr\">addr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> * <a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_node\">rb_node</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_rb\">mm_rb</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#rb_node\">rb_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> * <a class=\"id\" href=\"#vma_tmp\">vma_tmp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma_tmp\">vma_tmp</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#rb_node\">rb_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a>, <a class=\"id\" href=\"#vm_rb\">vm_rb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma_tmp\">vma_tmp</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> &gt; <a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma_tmp\">vma_tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma_tmp\">vma_tmp</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> <= <a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_node\">rb_node</a> = <a class=\"id\" href=\"#rb_node\">rb_node</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_node\">rb_node</a> = <a class=\"id\" href=\"#rb_node\">rb_node</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_cache\">mmap_cache</a> = <a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vma\">vma</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#find_vma\">find_vma</a>);", 
"", 
"<span class=\"comment\">/* Same as find_vma, but also return a pointer to the previous VMA in *pprev. */</span>", 
"struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *", 
"<a class=\"id\" href=\"#find_vma_prev\">find_vma_prev</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> **<a class=\"id\" href=\"#pprev\">pprev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Guard against addr being lower than the first VMA */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Go through the RB tree quickly. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_node\">rb_node</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_rb\">mm_rb</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#rb_node\">rb_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma_tmp\">vma_tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma_tmp\">vma_tmp</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#rb_node\">rb_node</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a>, <a class=\"id\" href=\"#vm_rb\">vm_rb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#vma_tmp\">vma_tmp</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_node\">rb_node</a> = <a class=\"id\" href=\"#rb_node\">rb_node</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#vma_tmp\">vma_tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a> || (<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_node\">rb_node</a> = <a class=\"id\" href=\"#rb_node\">rb_node</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#prev\">prev</a> ? <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a> : <a class=\"id\" href=\"#vma\">vma</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Verify that the stack growth is acceptable and</span>", 
"<span class=\"comment\"> * update accounting. This is shared with both the</span>", 
"<span class=\"comment\"> * grow-up and grow-down cases.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#acct_stack_growth\">acct_stack_growth</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#grow\">grow</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rlimit\">rlimit</a> *<a class=\"id\" href=\"#rlim\">rlim</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#rlim\">rlim</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#new_start\">new_start</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* address space limit tests */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#may_expand_vm\">may_expand_vm</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#grow\">grow</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Stack limit test */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#rlim\">rlim</a>[<a class=\"id\" href=\"#RLIMIT_STACK\">RLIMIT_STACK</a>].<a class=\"id\" href=\"#rlim_cur\">rlim_cur</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* mlock limit tests */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#locked\">locked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#limit\">limit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locked\">locked</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#locked_vm\">locked_vm</a> + <a class=\"id\" href=\"#grow\">grow</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#rlim\">rlim</a>[<a class=\"id\" href=\"#RLIMIT_MEMLOCK\">RLIMIT_MEMLOCK</a>].<a class=\"id\" href=\"#rlim_cur\">rlim_cur</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> >>= <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#locked\">locked</a> &gt; <a class=\"id\" href=\"#limit\">limit</a> && !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_IPC_LOCK\">CAP_IPC_LOCK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check to ensure the stack will not grow into a hugetlb-only region */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_start\">new_start</a> = (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_GROWSUP\">VM_GROWSUP</a>) ? <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_hugepage_only_range\">is_hugepage_only_range</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#new_start\">new_start</a>, <a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Overcommit..  This must be the final test, as it will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * update security statistics.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#security_vm_enough_memory_mm\">security_vm_enough_memory_mm</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#grow\">grow</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ok, everything looks good - let it rip */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#total_vm\">total_vm</a> += <a class=\"id\" href=\"#grow\">grow</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#locked_vm\">locked_vm</a> += <a class=\"id\" href=\"#grow\">grow</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm_stat_account\">vm_stat_account</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>, <a class=\"id\" href=\"#grow\">grow</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_STACK_GROWSUP\">CONFIG_STACK_GROWSUP</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IA64\">CONFIG_IA64</a>)", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * PA-RISC uses this for its stack; IA64 for its Register Backing Store.</span>", 
"<span class=\"comment\"> * vma is the last one with address &gt; vma-&gt;vm_end.  Have to extend vma.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#expand_upwards\">expand_upwards</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_GROWSUP\">VM_GROWSUP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We must make sure the anon_vma is allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so that the anon_vma locking is not a noop.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#anon_vma_prepare\">anon_vma_prepare</a>(<a class=\"id\" href=\"#vma\">vma</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma_lock_anon_vma\">vma_lock_anon_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * vma-&gt;vm_start/vm_end cannot change under us because the caller</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is required to hold the mmap_sem in read mode.  We need the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * anon_vma lock to serialize against concurrent expand_stacks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Also guard against wrapping around to address 0.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#address\">address</a> &lt; <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#address\">address</a>+4))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#address\">address</a>+4);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma_unlock_anon_vma\">vma_unlock_anon_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Somebody else might have raced and expanded it already */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#address\">address</a> &gt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#grow\">grow</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#address\">address</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grow\">grow</a> = (<a class=\"id\" href=\"#address\">address</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#acct_stack_growth\">acct_stack_growth</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#grow\">grow</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> = <a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_mmap\">perf_event_mmap</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma_unlock_anon_vma\">vma_unlock_anon_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_STACK_GROWSUP || CONFIG_IA64 */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * vma is the first one with address &lt; vma-&gt;vm_start.  Have to extend vma.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#expand_downwards\">expand_downwards</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We must make sure the anon_vma is allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so that the anon_vma locking is not a noop.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#anon_vma_prepare\">anon_vma_prepare</a>(<a class=\"id\" href=\"#vma\">vma</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_file_mmap\">security_file_mmap</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, 0, 0, 0, <a class=\"id\" href=\"#address\">address</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma_lock_anon_vma\">vma_lock_anon_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * vma-&gt;vm_start/vm_end cannot change under us because the caller</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is required to hold the mmap_sem in read mode.  We need the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * anon_vma lock to serialize against concurrent expand_stacks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Somebody else might have raced and expanded it already */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#address\">address</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#grow\">grow</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grow\">grow</a> = (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> - <a class=\"id\" href=\"#address\">address</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#acct_stack_growth\">acct_stack_growth</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#grow\">grow</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> = <a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> -= <a class=\"id\" href=\"#grow\">grow</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_mmap\">perf_event_mmap</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma_unlock_anon_vma\">vma_unlock_anon_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#expand_stack_downwards\">expand_stack_downwards</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#expand_downwards\">expand_downwards</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_STACK_GROWSUP\">CONFIG_STACK_GROWSUP</a>", 
"int <a class=\"id\" href=\"#expand_stack\">expand_stack</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#expand_upwards\">expand_upwards</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *", 
"<a class=\"id\" href=\"#find_extend_vma\">find_extend_vma</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, *<a class=\"id\" href=\"#prev\">prev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma_prev\">find_vma_prev</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a> && (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> <= <a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#prev\">prev</a> || <a class=\"id\" href=\"#expand_stack\">expand_stack</a>(<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mlock_vma_pages_range\">mlock_vma_pages_range</a>(<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#prev\">prev</a>;", 
"}", 
"#else", 
"int <a class=\"id\" href=\"#expand_stack\">expand_stack</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#expand_downwards\">expand_downwards</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *", 
"<a class=\"id\" href=\"#find_extend_vma\">find_extend_vma</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> * <a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> * <a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma\">find_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>,<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> <= <a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_GROWSDOWN\">VM_GROWSDOWN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#expand_stack\">expand_stack</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mlock_vma_pages_range\">mlock_vma_pages_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vma\">vma</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Ok - we have the memory areas we should free on the vma list,</span>", 
"<span class=\"comment\"> * so release them, and do the vma updates.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with the mm semaphore held.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#remove_vma_list\">remove_vma_list</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Update high watermark before we lower total_vm */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_hiwater_vm\">update_hiwater_vm</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#nrpages\">nrpages</a> = <a class=\"id\" href=\"#vma_pages\">vma_pages</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#total_vm\">total_vm</a> -= <a class=\"id\" href=\"#nrpages\">nrpages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_stat_account\">vm_stat_account</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>, -<a class=\"id\" href=\"#nrpages\">nrpages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#remove_vma\">remove_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_mm\">validate_mm</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get rid of page table information in the indicated region.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with the mm semaphore held.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#unmap_region\">unmap_region</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#prev\">prev</a>? <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>: <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a> *<a class=\"id\" href=\"#tlb\">tlb</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_accounted\">nr_accounted</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lru_add_drain\">lru_add_drain</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tlb\">tlb</a> = <a class=\"id\" href=\"#tlb_gather_mmu\">tlb_gather_mmu</a>(<a class=\"id\" href=\"#mm\">mm</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_hiwater_rss\">update_hiwater_rss</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unmap_vmas\">unmap_vmas</a>(&amp;<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, &amp;<a class=\"id\" href=\"#nr_accounted\">nr_accounted</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm_unacct_memory\">vm_unacct_memory</a>(<a class=\"id\" href=\"#nr_accounted\">nr_accounted</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pgtables\">free_pgtables</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#prev\">prev</a>? <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>: <a class=\"id\" href=\"#FIRST_USER_ADDRESS\">FIRST_USER_ADDRESS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#next\">next</a>? <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>: 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tlb_finish_mmu\">tlb_finish_mmu</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Create a list of vma's touched by the unmap, removing them from the mm's</span>", 
"<span class=\"comment\"> * vma list as we go..</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#detach_vmas_to_be_unmapped\">detach_vmas_to_be_unmapped</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> **<a class=\"id\" href=\"#insertion_point\">insertion_point</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#tail_vma\">tail_vma</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insertion_point\">insertion_point</a> = (<a class=\"id\" href=\"#prev\">prev</a> ? &amp;<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a> : &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_prev\">vm_prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_erase\">rb_erase</a>(&amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_rb\">vm_rb</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_rb\">mm_rb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#map_count\">map_count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail_vma\">tail_vma</a> = <a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#vma\">vma</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &lt; <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#insertion_point\">insertion_point</a> = <a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_prev\">vm_prev</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tail_vma\">tail_vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#unmap_area\">unmap_area</a> == <a class=\"id\" href=\"#arch_unmap_area\">arch_unmap_area</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#prev\">prev</a> ? <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> : <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_base\">mmap_base</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#vma\">vma</a> ?  <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> : <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_base\">mmap_base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#unmap_area\">unmap_area</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_cache\">mmap_cache</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Kill the cache. */</span>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * __split_vma() bypasses sysctl_max_map_count checking.  We use this on the</span>", 
"<span class=\"comment\"> * munmap path where it doesn't make sense to fail.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__split_vma\">__split_vma</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> * <a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> * <a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#new_below\">new_below</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>) && (<a class=\"id\" href=\"#addr\">addr</a> &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>~(<a class=\"id\" href=\"#huge_page_mask\">huge_page_mask</a>(<a class=\"id\" href=\"#hstate_vma\">hstate_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>)))))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#vm_area_cachep\">vm_area_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* most fields are the same, copy all, and then fixup */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#new\">new</a> = *<a class=\"id\" href=\"#vma\">vma</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_below\">new_below</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> += ((<a class=\"id\" href=\"#addr\">addr</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a> = <a class=\"id\" href=\"#mpol_dup\">mpol_dup</a>(<a class=\"id\" href=\"#vma_policy\">vma_policy</a>(<a class=\"id\" href=\"#vma\">vma</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#pol\">pol</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#pol\">pol</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_vma\">out_free_vma</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma_set_policy\">vma_set_policy</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#pol\">pol</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#anon_vma_clone\">anon_vma_clone</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#vma\">vma</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_mpol\">out_free_mpol</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_file\">get_file</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_EXECUTABLE\">VM_EXECUTABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#added_exe_file_vma\">added_exe_file_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a> && <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#open\">open</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#open\">open</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_below\">new_below</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#vma_adjust\">vma_adjust</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#addr\">addr</a> - <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>), <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#vma_adjust\">vma_adjust</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Success. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clean everything up if vma_adjust failed. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a> && <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#close\">close</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#close\">close</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_EXECUTABLE\">VM_EXECUTABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#removed_exe_file_vma\">removed_exe_file_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlink_anon_vmas\">unlink_anon_vmas</a>(<a class=\"id\" href=\"#new\">new</a>);", 
" <a class=\"id\" href=\"#out_free_mpol\">out_free_mpol</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpol_put\">mpol_put</a>(<a class=\"id\" href=\"#pol\">pol</a>);", 
" <a class=\"id\" href=\"#out_free_vma\">out_free_vma</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#vm_area_cachep\">vm_area_cachep</a>, <a class=\"id\" href=\"#new\">new</a>);", 
" <a class=\"id\" href=\"#out_err\">out_err</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Split a vma into two pieces at address 'addr', a new vma is allocated</span>", 
"<span class=\"comment\"> * either for the first part or the tail.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#split_vma\">split_vma</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#new_below\">new_below</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#map_count\">map_count</a> >= <a class=\"id\" href=\"#sysctl_max_map_count\">sysctl_max_map_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__split_vma\">__split_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#new_below\">new_below</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Munmap is split into 2 main parts -- this part which finds</span>", 
"<span class=\"comment\"> * what needs doing, and the areas themselves, which do the</span>", 
"<span class=\"comment\"> * work.  This now handles partial unmappings.</span>", 
"<span class=\"comment\"> * Jeremy Fitzhardinge &lt;jeremy@goop.org&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#do_munmap\">do_munmap</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, *<a class=\"id\" href=\"#prev\">prev</a>, *<a class=\"id\" href=\"#last\">last</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#start\">start</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>) || <a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a> || <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a>-<a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#len\">len</a>)) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find the first overlapping VMA */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma_prev\">find_vma_prev</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#start\">start</a>, &amp;<a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* we have  start &lt; vma-&gt;vm_end  */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if it doesn't overlap, we have nothing.. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> >= <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we need to split any vma, do it now to save pain later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note: mremap's move_vma VM_ACCOUNT handling assumes a partially</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unmapped vm_area_struct will remain in use: so lower split_vma</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * places tmp vma above, and higher split_vma places tmp vma below.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Make sure that map_count on return from munmap() will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * not exceed its limit; but let map_count go just above</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * its limit temporarily, to help free resources as expected.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> && <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#map_count\">map_count</a> >= <a class=\"id\" href=\"#sysctl_max_map_count\">sysctl_max_map_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#__split_vma\">__split_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#start\">start</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Does it split the last one? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#find_vma\">find_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#last\">last</a> && <a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#last\">last</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#__split_vma\">__split_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#last\">last</a>, <a class=\"id\" href=\"#end\">end</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#prev\">prev</a>? <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>: <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unlock any mlock()ed ranges before detaching vmas</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#locked_vm\">locked_vm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#tmp\">tmp</a> && <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &lt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#locked_vm\">locked_vm</a> -= <a class=\"id\" href=\"#vma_pages\">vma_pages</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#munlock_vma_pages_all\">munlock_vma_pages_all</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Remove the vma's, and unmap the actual pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#detach_vmas_to_be_unmapped\">detach_vmas_to_be_unmapped</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unmap_region\">unmap_region</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Fix up all other VM information */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remove_vma_list\">remove_vma_list</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#do_munmap\">do_munmap</a>);", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#munmap\">munmap</a>, unsigned long, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#profile_munmap\">profile_munmap</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_munmap\">do_munmap</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#verify_mm_writelocked\">verify_mm_writelocked</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_VM\">CONFIG_DEBUG_VM</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#down_read_trylock\">down_read_trylock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  this is really a simplified \"do_mmap\".  it only handles</span>", 
"<span class=\"comment\"> *  anonymous maps.  eventually we may be able to do some</span>", 
"<span class=\"comment\"> *  brk-specific accounting here.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#do_brk\">do_brk</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> * <a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> * <a class=\"id\" href=\"#vma\">vma</a>, * <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> ** <a class=\"id\" href=\"#rb_link\">rb_link</a>, * <a class=\"id\" href=\"#rb_parent\">rb_parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pgoff\">pgoff</a> = <a class=\"id\" href=\"#addr\">addr</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_file_mmap\">security_file_mmap</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, 0, 0, 0, <a class=\"id\" href=\"#addr\">addr</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#VM_DATA_DEFAULT_FLAGS\">VM_DATA_DEFAULT_FLAGS</a> | <a class=\"id\" href=\"#VM_ACCOUNT\">VM_ACCOUNT</a> | <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#def_flags\">def_flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#get_unmapped_area\">get_unmapped_area</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#len\">len</a>, 0, <a class=\"id\" href=\"#MAP_FIXED\">MAP_FIXED</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mlock MCL_FUTURE?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#def_flags\">def_flags</a> &amp; <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#locked\">locked</a>, <a class=\"id\" href=\"#lock_limit\">lock_limit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locked\">locked</a> = <a class=\"id\" href=\"#len\">len</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#locked\">locked</a> += <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#locked_vm\">locked_vm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_limit\">lock_limit</a> = <a class=\"id\" href=\"#rlimit\">rlimit</a>(<a class=\"id\" href=\"#RLIMIT_MEMLOCK\">RLIMIT_MEMLOCK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_limit\">lock_limit</a> >>= <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#locked\">locked</a> &gt; <a class=\"id\" href=\"#lock_limit\">lock_limit</a> && !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_IPC_LOCK\">CAP_IPC_LOCK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mm-&gt;mmap_sem is required to protect against another thread</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * changing the mappings in case we sleep.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#verify_mm_writelocked\">verify_mm_writelocked</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Clear old maps.  this also does some error checking for us</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
" <a class=\"id\" href=\"#munmap_back\">munmap_back</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma_prepare\">find_vma_prepare</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#prev\">prev</a>, &amp;<a class=\"id\" href=\"#rb_link\">rb_link</a>, &amp;<a class=\"id\" href=\"#rb_parent\">rb_parent</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &lt; <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#do_munmap\">do_munmap</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#munmap_back\">munmap_back</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check against address space limits *after* clearing old maps... */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#may_expand_vm\">may_expand_vm</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#len\">len</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#map_count\">map_count</a> &gt; <a class=\"id\" href=\"#sysctl_max_map_count\">sysctl_max_map_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#security_vm_enough_memory\">security_vm_enough_memory</a>(<a class=\"id\" href=\"#len\">len</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Can we just expand an old private anonymous mapping? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma_merge\">vma_merge</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * create a vma struct for an anonymous mapping</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#vm_area_cachep\">vm_area_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_unacct_memory\">vm_unacct_memory</a>(<a class=\"id\" href=\"#len\">len</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a> = <a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> = <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> = <a class=\"id\" href=\"#pgoff\">pgoff</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a> = <a class=\"id\" href=\"#vm_get_page_prot\">vm_get_page_prot</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma_link\">vma_link</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#rb_link\">rb_link</a>, <a class=\"id\" href=\"#rb_parent\">rb_parent</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_mmap\">perf_event_mmap</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#total_vm\">total_vm</a> += <a class=\"id\" href=\"#len\">len</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mlock_vma_pages_range\">mlock_vma_pages_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#locked_vm\">locked_vm</a> += (<a class=\"id\" href=\"#len\">len</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#do_brk\">do_brk</a>);", 
"", 
"<span class=\"comment\">/* Release all mmaps. */</span>", 
"void <a class=\"id\" href=\"#exit_mmap\">exit_mmap</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a> *<a class=\"id\" href=\"#tlb\">tlb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_accounted\">nr_accounted</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* mm's last user has gone, and its about to be pulled down */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmu_notifier_release\">mmu_notifier_release</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#locked_vm\">locked_vm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#vma\">vma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#munlock_vma_pages_all\">munlock_vma_pages_all</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_exit_mmap\">arch_exit_mmap</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>)<span class=\"ts\"/><span class=\"comment\">/* Can happen if dup_mmap() received an OOM */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lru_add_drain\">lru_add_drain</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_cache_mm\">flush_cache_mm</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tlb\">tlb</a> = <a class=\"id\" href=\"#tlb_gather_mmu\">tlb_gather_mmu</a>(<a class=\"id\" href=\"#mm\">mm</a>, 1);", 
"<span class=\"ts\"/><span class=\"comment\">/* update_hiwater_rss(mm) here? but nobody should be looking */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Use -1 here to ensure all VMAs in the mm are unmapped */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#unmap_vmas\">unmap_vmas</a>(&amp;<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#vma\">vma</a>, 0, -1, &amp;<a class=\"id\" href=\"#nr_accounted\">nr_accounted</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm_unacct_memory\">vm_unacct_memory</a>(<a class=\"id\" href=\"#nr_accounted\">nr_accounted</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pgtables\">free_pgtables</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#FIRST_USER_ADDRESS\">FIRST_USER_ADDRESS</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tlb_finish_mmu\">tlb_finish_mmu</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, 0, <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Walk the list again, actually closing and freeing it,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with preemption enabled, without holding any MM locks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#vma\">vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#remove_vma\">remove_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#nr_ptes\">nr_ptes</a> &gt; (<a class=\"id\" href=\"#FIRST_USER_ADDRESS\">FIRST_USER_ADDRESS</a>+<a class=\"id\" href=\"#PMD_SIZE\">PMD_SIZE</a>-1)>><a class=\"id\" href=\"#PMD_SHIFT\">PMD_SHIFT</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Insert vm structure into process list sorted by address</span>", 
"<span class=\"comment\"> * and into the inode's i_mmap tree.  If vm_file is non-NULL</span>", 
"<span class=\"comment\"> * then i_mmap_lock is taken here.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#insert_vm_struct\">insert_vm_struct</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> * <a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> * <a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> * <a class=\"id\" href=\"#__vma\">__vma</a>, * <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> ** <a class=\"id\" href=\"#rb_link\">rb_link</a>, * <a class=\"id\" href=\"#rb_parent\">rb_parent</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The vm_pgoff of a purely anonymous vma should be irrelevant</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * until its first write fault, when page's anon_vma and index</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are set.  But now set the vm_pgoff it will almost certainly</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * end up with (unless mremap moves it elsewhere before that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * first wfault), so /proc/pid/maps tells a consistent story.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * By setting it to reflect the virtual start address of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * vma, merges and splits can happen in a seamless way, just</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * using the existing file pgoff checks and manipulations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Similarly in do_mmap_pgoff and in do_brk.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__vma\">__vma</a> = <a class=\"id\" href=\"#find_vma_prepare\">find_vma_prepare</a>(<a class=\"id\" href=\"#mm\">mm</a>,<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>,&amp;<a class=\"id\" href=\"#prev\">prev</a>,&amp;<a class=\"id\" href=\"#rb_link\">rb_link</a>,&amp;<a class=\"id\" href=\"#rb_parent\">rb_parent</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__vma\">__vma</a> && <a class=\"id\" href=\"#__vma\">__vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_ACCOUNT\">VM_ACCOUNT</a>) &&", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#security_vm_enough_memory_mm\">security_vm_enough_memory_mm</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma_pages\">vma_pages</a>(<a class=\"id\" href=\"#vma\">vma</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma_link\">vma_link</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#rb_link\">rb_link</a>, <a class=\"id\" href=\"#rb_parent\">rb_parent</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copy the vma structure to a new location in the same mm,</span>", 
"<span class=\"comment\"> * prior to moving page table entries, to effect an mremap move.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#copy_vma\">copy_vma</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> **<a class=\"id\" href=\"#vmap\">vmap</a>,", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pgoff\">pgoff</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a> = *<a class=\"id\" href=\"#vmap\">vmap</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vma_start\">vma_start</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#new_vma\">new_vma</a>, *<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> **<a class=\"id\" href=\"#rb_link\">rb_link</a>, *<a class=\"id\" href=\"#rb_parent\">rb_parent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If anonymous vma has not yet been faulted, update new pgoff</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to match new location, to increase its chance of merging.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a> && !<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff\">pgoff</a> = <a class=\"id\" href=\"#addr\">addr</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#find_vma_prepare\">find_vma_prepare</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#prev\">prev</a>, &amp;<a class=\"id\" href=\"#rb_link\">rb_link</a>, &amp;<a class=\"id\" href=\"#rb_parent\">rb_parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_vma\">new_vma</a> = <a class=\"id\" href=\"#vma_merge\">vma_merge</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>, <a class=\"id\" href=\"#vma_policy\">vma_policy</a>(<a class=\"id\" href=\"#vma\">vma</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_vma\">new_vma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Source vma may have been merged into new_vma</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma_start\">vma_start</a> >= <a class=\"id\" href=\"#new_vma\">new_vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#vma_start\">vma_start</a> &lt; <a class=\"id\" href=\"#new_vma\">new_vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#vmap\">vmap</a> = <a class=\"id\" href=\"#new_vma\">new_vma</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_vma\">new_vma</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#vm_area_cachep\">vm_area_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_vma\">new_vma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#new_vma\">new_vma</a> = *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a> = <a class=\"id\" href=\"#mpol_dup\">mpol_dup</a>(<a class=\"id\" href=\"#vma_policy\">vma_policy</a>(<a class=\"id\" href=\"#vma\">vma</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#pol\">pol</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_vma\">out_free_vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#new_vma\">new_vma</a>-><a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#anon_vma_clone\">anon_vma_clone</a>(<a class=\"id\" href=\"#new_vma\">new_vma</a>, <a class=\"id\" href=\"#vma\">vma</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_mempol\">out_free_mempol</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma_set_policy\">vma_set_policy</a>(<a class=\"id\" href=\"#new_vma\">new_vma</a>, <a class=\"id\" href=\"#pol\">pol</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_vma\">new_vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_vma\">new_vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> = <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_vma\">new_vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> = <a class=\"id\" href=\"#pgoff\">pgoff</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_vma\">new_vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_file\">get_file</a>(<a class=\"id\" href=\"#new_vma\">new_vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_EXECUTABLE\">VM_EXECUTABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#added_exe_file_vma\">added_exe_file_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_vma\">new_vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a> && <a class=\"id\" href=\"#new_vma\">new_vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#open\">open</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_vma\">new_vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#open\">open</a>(<a class=\"id\" href=\"#new_vma\">new_vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma_link\">vma_link</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#new_vma\">new_vma</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#rb_link\">rb_link</a>, <a class=\"id\" href=\"#rb_parent\">rb_parent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new_vma\">new_vma</a>;", 
"", 
" <a class=\"id\" href=\"#out_free_mempol\">out_free_mempol</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpol_put\">mpol_put</a>(<a class=\"id\" href=\"#pol\">pol</a>);", 
" <a class=\"id\" href=\"#out_free_vma\">out_free_vma</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#vm_area_cachep\">vm_area_cachep</a>, <a class=\"id\" href=\"#new_vma\">new_vma</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return true if the calling process may expand its vm space by the passed</span>", 
"<span class=\"comment\"> * number of pages</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#may_expand_vm\">may_expand_vm</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#npages\">npages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#total_vm\">total_vm</a>;<span class=\"ts\"/><span class=\"comment\">/* pages */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#lim\">lim</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lim\">lim</a> = <a class=\"id\" href=\"#rlimit\">rlimit</a>(<a class=\"id\" href=\"#RLIMIT_AS\">RLIMIT_AS</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a> + <a class=\"id\" href=\"#npages\">npages</a> &gt; <a class=\"id\" href=\"#lim\">lim</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"", 
"static int <a class=\"id\" href=\"#special_mapping_fault\">special_mapping_fault</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_fault\">vm_fault</a> *<a class=\"id\" href=\"#vmf\">vmf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pgoff\">pgoff</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * special mappings have no vm_file, and in that case, the mm</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * uses vm_pgoff internally. So we have to subtract it from here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We are allowed to do this because we are the mm; do not copy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this code into drivers!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff\">pgoff</a> = <a class=\"id\" href=\"#vmf\">vmf</a>-><a class=\"id\" href=\"#pgoff\">pgoff</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_private_data\">vm_private_data</a>; <a class=\"id\" href=\"#pgoff\">pgoff</a> && *<a class=\"id\" href=\"#pages\">pages</a>; ++<a class=\"id\" href=\"#pages\">pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff\">pgoff</a>--;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#pages\">pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = *<a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmf\">vmf</a>-><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#VM_FAULT_SIGBUS\">VM_FAULT_SIGBUS</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Having a close hook prevents vma merging regardless of flags.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#special_mapping_close\">special_mapping_close</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#vm_operations_struct\">vm_operations_struct</a> <a class=\"id\" href=\"#special_mapping_vmops\">special_mapping_vmops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#close\">close</a> = <a class=\"id\" href=\"#special_mapping_close\">special_mapping_close</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fault\">fault</a> = <a class=\"id\" href=\"#special_mapping_fault\">special_mapping_fault</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called with mm-&gt;mmap_sem held for writing.</span>", 
"<span class=\"comment\"> * Insert a new vma covering the given region, with the given flags.</span>", 
"<span class=\"comment\"> * Its pages are supplied by the given array of struct page *.</span>", 
"<span class=\"comment\"> * The array can be shorter than len &gt;&gt; PAGE_SHIFT if it's null-terminated.</span>", 
"<span class=\"comment\"> * The region past the last page supplied will always produce SIGBUS.</span>", 
"<span class=\"comment\"> * The array pointer and the pages it points to are assumed to stay alive</span>", 
"<span class=\"comment\"> * for as long as this mapping might exist.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#install_special_mapping\">install_special_mapping</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#vm_flags\">vm_flags</a>, struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#vm_area_cachep\">vm_area_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#vma\">vma</a> == <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a> = <a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> = <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> = <a class=\"id\" href=\"#vm_flags\">vm_flags</a> | <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#def_flags\">def_flags</a> | <a class=\"id\" href=\"#VM_DONTEXPAND\">VM_DONTEXPAND</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a> = <a class=\"id\" href=\"#vm_get_page_prot\">vm_get_page_prot</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a> = &amp;<a class=\"id\" href=\"#special_mapping_vmops\">special_mapping_vmops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_private_data\">vm_private_data</a> = <a class=\"id\" href=\"#pages\">pages</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#insert_vm_struct\">insert_vm_struct</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#vm_area_cachep\">vm_area_cachep</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#total_vm\">total_vm</a> += <a class=\"id\" href=\"#len\">len</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_mmap\">perf_event_mmap</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#mm_all_locks_mutex\">mm_all_locks_mutex</a>);", 
"", 
"static void <a class=\"id\" href=\"#vm_lock_anon_vma\">vm_lock_anon_vma</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(0, (unsigned long *) &amp;<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#head\">head</a>.<a class=\"id\" href=\"#next\">next</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The LSB of head.next can't change from under us</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * because we hold the mm_all_locks_mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_nest_lock\">spin_lock_nest_lock</a>(&amp;<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#lock\">lock</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We can safely modify head.next after taking the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * anon_vma-&gt;root-&gt;lock. If some other vma in this mm shares</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the same anon_vma we won't take it again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * No need of atomic instructions here, head.next</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * can't change from under us thanks to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * anon_vma-&gt;root-&gt;lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__test_and_set_bit\">__test_and_set_bit</a>(0, (unsigned long *)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#head\">head</a>.<a class=\"id\" href=\"#next\">next</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#vm_lock_mapping\">vm_lock_mapping</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#AS_MM_ALL_LOCKS\">AS_MM_ALL_LOCKS</a>, &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * AS_MM_ALL_LOCKS can't change from under us because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we hold the mm_all_locks_mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Operations on -&gt;flags have to be atomic because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * even if AS_MM_ALL_LOCKS is stable thanks to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mm_all_locks_mutex, there may be other cpus</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * changing other bitflags in parallel to us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#AS_MM_ALL_LOCKS\">AS_MM_ALL_LOCKS</a>, &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_nest_lock\">spin_lock_nest_lock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This operation locks against the VM for all pte/vma/mm related</span>", 
"<span class=\"comment\"> * operations that could ever happen on a certain mm. This includes</span>", 
"<span class=\"comment\"> * vmtruncate, try_to_unmap, and all page faults.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must take the mmap_sem in write mode before calling</span>", 
];
xr_frag_insert('l/48/d6e932ac415a20d383961664f261a6f9830ffb.xr', __xr_tmp);
