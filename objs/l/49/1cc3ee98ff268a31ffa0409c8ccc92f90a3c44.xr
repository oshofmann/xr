var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NR_SOFTIRQS\">NR_SOFTIRQS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#softirq_work_list\">softirq_work_list</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#local_head\">local_head</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#head\">head</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_head\">local_head</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#softirq_work_list\">softirq_work_list</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_splice_init\">list_splice_init</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#local_head\">local_head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raise_softirq_irqoff\">raise_softirq_irqoff</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> <a class=\"id\" href=\"#remote_softirq_cpu_notifier\">remote_softirq_cpu_notifier</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a><span class=\"ts\"/>= <a class=\"id\" href=\"#remote_softirq_cpu_notify\">remote_softirq_cpu_notify</a>,", 
"};", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#softirq_init\">softirq_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tasklet_vec\">tasklet_vec</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#tail\">tail</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tasklet_vec\">tasklet_vec</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tasklet_hi_vec\">tasklet_hi_vec</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#tail\">tail</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tasklet_hi_vec\">tasklet_hi_vec</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NR_SOFTIRQS\">NR_SOFTIRQS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#softirq_work_list\">softirq_work_list</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_hotcpu_notifier\">register_hotcpu_notifier</a>(&amp;<a class=\"id\" href=\"#remote_softirq_cpu_notifier\">remote_softirq_cpu_notifier</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#open_softirq\">open_softirq</a>(<a class=\"id\" href=\"#TASKLET_SOFTIRQ\">TASKLET_SOFTIRQ</a>, <a class=\"id\" href=\"#tasklet_action\">tasklet_action</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#open_softirq\">open_softirq</a>(<a class=\"id\" href=\"#HI_SOFTIRQ\">HI_SOFTIRQ</a>, <a class=\"id\" href=\"#tasklet_hi_action\">tasklet_hi_action</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#run_ksoftirqd\">run_ksoftirqd</a>(void * <a class=\"id\" href=\"#__bind_cpu\">__bind_cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#local_softirq_pending\">local_softirq_pending</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_no_resched\">preempt_enable_no_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#local_softirq_pending\">local_softirq_pending</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Preempt disable stops cpu going offline.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   If already offline, we'll be on wrong CPU:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   don't process */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_is_offline\">cpu_is_offline</a>((long)<a class=\"id\" href=\"#__bind_cpu\">__bind_cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#wait_to_die\">wait_to_die</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_softirq\">do_softirq</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_no_resched\">preempt_enable_no_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_note_context_switch\">rcu_note_context_switch</a>((long)<a class=\"id\" href=\"#__bind_cpu\">__bind_cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#wait_to_die\">wait_to_die</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait for kthread_stop */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * tasklet_kill_immediate is called to remove a tasklet which can already be</span>", 
"<span class=\"comment\"> * scheduled for execution on @cpu.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unlike tasklet_kill, this function removes the tasklet</span>", 
"<span class=\"comment\"> * _immediately_, even if the tasklet is in TASKLET_STATE_SCHED state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When this function is called, @cpu must be in the CPU_DEAD state.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tasklet_kill_immediate\">tasklet_kill_immediate</a>(struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> *<a class=\"id\" href=\"#t\">t</a>, unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> **<a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#TASKLET_STATE_RUN\">TASKLET_STATE_RUN</a>, &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#state\">state</a>));", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#TASKLET_STATE_SCHED\">TASKLET_STATE_SCHED</a>, &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#state\">state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* CPU is dead, so no lock needed. */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tasklet_vec\">tasklet_vec</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#head\">head</a>; *<a class=\"id\" href=\"#i\">i</a>; <a class=\"id\" href=\"#i\">i</a> = &amp;(*<a class=\"id\" href=\"#i\">i</a>)-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#t\">t</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If this was the tail element, move the tail ptr */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tasklet_vec\">tasklet_vec</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#takeover_tasklets\">takeover_tasklets</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* CPU is dead, so no lock needed. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
];
xr_frag_insert('l/49/1cc3ee98ff268a31ffa0409c8ccc92f90a3c44.xr', __xr_tmp);
