var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#ops_free_list\">ops_free_list</a>(<a class=\"id\" href=\"#ops\">ops</a>, &amp;<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"}", 
"", 
"#else", 
"", 
"static int <a class=\"id\" href=\"#__register_pernet_operations\">__register_pernet_operations</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ops_init\">ops_init</a>(<a class=\"id\" href=\"#ops\">ops</a>, &amp;<a class=\"id\" href=\"#init_net\">init_net</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops_free\">ops_free</a>(<a class=\"id\" href=\"#ops\">ops</a>, &amp;<a class=\"id\" href=\"#init_net\">init_net</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__unregister_pernet_operations\">__unregister_pernet_operations</a>(struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#init_net\">init_net</a>.<a class=\"id\" href=\"#exit_list\">exit_list</a>, &amp;<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ops_exit_list\">ops_exit_list</a>(<a class=\"id\" href=\"#ops\">ops</a>, &amp;<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ops_free_list\">ops_free_list</a>(<a class=\"id\" href=\"#ops\">ops</a>, &amp;<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NET_NS */</span>", 
"", 
"static <a class=\"id\" href=\"#DEFINE_IDA\">DEFINE_IDA</a>(<a class=\"id\" href=\"#net_generic_ids\">net_generic_ids</a>);", 
"", 
"static int <a class=\"id\" href=\"#register_pernet_operations\">register_pernet_operations</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#id\">id</a>) {", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ida_get_new_above\">ida_get_new_above</a>(&amp;<a class=\"id\" href=\"#net_generic_ids\">net_generic_ids</a>, 1, <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ida_pre_get\">ida_pre_get</a>(&amp;<a class=\"id\" href=\"#net_generic_ids\">net_generic_ids</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#__register_pernet_operations\">__register_pernet_operations</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#ops\">ops</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_barrier\">rcu_barrier</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#id\">id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ida_remove\">ida_remove</a>(&amp;<a class=\"id\" href=\"#net_generic_ids\">net_generic_ids</a>, *<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#unregister_pernet_operations\">unregister_pernet_operations</a>(struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__unregister_pernet_operations\">__unregister_pernet_operations</a>(<a class=\"id\" href=\"#ops\">ops</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_barrier\">rcu_barrier</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#id\">id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ida_remove\">ida_remove</a>(&amp;<a class=\"id\" href=\"#net_generic_ids\">net_generic_ids</a>, *<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *      register_pernet_subsys - register a network namespace subsystem</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ops:  pernet operations structure for the subsystem</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Register a subsystem which has init and exit functions</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that are called when network namespaces are created and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>destroyed respectively.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>When registered all network namespace init functions are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>called for every existing network namespace.  Allowing kernel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>modules to have a race free view of the set of network namespaces.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>When a new network namespace is created all of the init</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>methods are called in the order in which they were registered.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>When a network namespace is destroyed all of the exit methods</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>are called in the reverse of the order with which they were</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>registered.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#register_pernet_subsys\">register_pernet_subsys</a>(struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#net_mutex\">net_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> =  <a class=\"id\" href=\"#register_pernet_operations\">register_pernet_operations</a>(<a class=\"id\" href=\"#first_device\">first_device</a>, <a class=\"id\" href=\"#ops\">ops</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#net_mutex\">net_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#register_pernet_subsys\">register_pernet_subsys</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *      unregister_pernet_subsys - unregister a network namespace subsystem</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ops: pernet operations structure to manipulate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Remove the pernet operations structure from the list to be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>used when network namespaces are created or destroyed.  In</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>addition run the exit method for all existing network</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>namespaces.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#unregister_pernet_subsys\">unregister_pernet_subsys</a>(struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#net_mutex\">net_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_pernet_operations\">unregister_pernet_operations</a>(<a class=\"id\" href=\"#ops\">ops</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#net_mutex\">net_mutex</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#unregister_pernet_subsys\">unregister_pernet_subsys</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *      register_pernet_device - register a network namespace device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ops:  pernet operations structure for the subsystem</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Register a device which has init and exit functions</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that are called when network namespaces are created and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>destroyed respectively.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>When registered all network namespace init functions are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>called for every existing network namespace.  Allowing kernel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>modules to have a race free view of the set of network namespaces.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>When a new network namespace is created all of the init</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>methods are called in the order in which they were registered.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>When a network namespace is destroyed all of the exit methods</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>are called in the reverse of the order with which they were</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>registered.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#register_pernet_device\">register_pernet_device</a>(struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#net_mutex\">net_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#register_pernet_operations\">register_pernet_operations</a>(&amp;<a class=\"id\" href=\"#pernet_list\">pernet_list</a>, <a class=\"id\" href=\"#ops\">ops</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a> && (<a class=\"id\" href=\"#first_device\">first_device</a> == &amp;<a class=\"id\" href=\"#pernet_list\">pernet_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first_device\">first_device</a> = &amp;<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#net_mutex\">net_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#register_pernet_device\">register_pernet_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *      unregister_pernet_device - unregister a network namespace netdevice</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ops: pernet operations structure to manipulate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Remove the pernet operations structure from the list to be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>used when network namespaces are created or destroyed.  In</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>addition run the exit method for all existing network</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>namespaces.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#unregister_pernet_device\">unregister_pernet_device</a>(struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#net_mutex\">net_mutex</a>);", 
"<span class=\"ts\"/>if (&amp;<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#list\">list</a> == <a class=\"id\" href=\"#first_device\">first_device</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first_device\">first_device</a> = <a class=\"id\" href=\"#first_device\">first_device</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_pernet_operations\">unregister_pernet_operations</a>(<a class=\"id\" href=\"#ops\">ops</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#net_mutex\">net_mutex</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#unregister_pernet_device\">unregister_pernet_device</a>);", 
];
xr_frag_insert('l/49/78aef09bddabffd95902904a2b7c0d3c47233d.xr', __xr_tmp);
