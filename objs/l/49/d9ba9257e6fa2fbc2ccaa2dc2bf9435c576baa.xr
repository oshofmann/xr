var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright 2004 James Cleverdon, IBM.</span>", 
"<span class=\"comment\"> * Subject to the GNU Public License, v.2</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Flat APIC subarch code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Hacked for x86-64 by James Cleverdon from i386 architecture code by</span>", 
"<span class=\"comment\"> * Martin Bligh, Andi Kleen, James Bottomley, John Stultz, and</span>", 
"<span class=\"comment\"> * James Cleverdon.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#threads\">threads</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpumask\">cpumask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apic\">apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#ipi\">ipi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ACPI\">CONFIG_ACPI</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi_bus\">acpi_bus</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#flat_acpi_madt_oem_check\">flat_acpi_madt_oem_check</a>(char *<a class=\"id\" href=\"#oem_id\">oem_id</a>, char *<a class=\"id\" href=\"#oem_table_id\">oem_table_id</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#flat_target_cpus\">flat_target_cpus</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#flat_vector_allocation_domain\">flat_vector_allocation_domain</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#retmask\">retmask</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Careful. Some cpus do not strictly honor the set of cpus</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * specified in the interrupt destination when using lowest</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * priority interrupt delivery mode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In particular there was a hyperthreading cpu observed to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * deliver interrupts to the wrong hyperthread when only one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hyperthread was specified in the interrupt desitination.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear\">cpumask_clear</a>(<a class=\"id\" href=\"#retmask\">retmask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#retmask\">retmask</a>)[0] = <a class=\"id\" href=\"#APIC_ALL_CPUS\">APIC_ALL_CPUS</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set up the logical destination ID.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Intel recommends to set DFR, LDR and TPR before enabling</span>", 
"<span class=\"comment\"> * an APIC.  See e.g. \"AP-388 82489DX User's Manual\" (Intel</span>", 
"<span class=\"comment\"> * document number 292116).  So here it goes...</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#flat_init_apic_ldr\">flat_init_apic_ldr</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = 1UL << <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_DFR\">APIC_DFR</a>, <a class=\"id\" href=\"#APIC_DFR_FLAT\">APIC_DFR_FLAT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LDR\">APIC_LDR</a>) &amp; ~<a class=\"id\" href=\"#APIC_LDR_MASK\">APIC_LDR_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> |= <a class=\"id\" href=\"#SET_APIC_LOGICAL_ID\">SET_APIC_LOGICAL_ID</a>(<a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LDR\">APIC_LDR</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#_flat_send_IPI_mask\">_flat_send_IPI_mask</a>(unsigned long <a class=\"id\" href=\"#mask\">mask</a>, int <a class=\"id\" href=\"#vector\">vector</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__default_send_IPI_dest_field\">__default_send_IPI_dest_field</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#vector\">vector</a>, <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#dest_logical\">dest_logical</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
];
xr_frag_insert('l/49/d9ba9257e6fa2fbc2ccaa2dc2bf9435c576baa.xr', __xr_tmp);
