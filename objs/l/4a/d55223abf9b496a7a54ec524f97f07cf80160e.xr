var __xr_tmp = [
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SETFL_MASK\">SETFL_MASK</a> (<a class=\"id\" href=\"#O_APPEND\">O_APPEND</a> | <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a> | <a class=\"id\" href=\"#O_NDELAY\">O_NDELAY</a> | <a class=\"id\" href=\"#O_DIRECT\">O_DIRECT</a> | <a class=\"id\" href=\"#O_NOATIME\">O_NOATIME</a>)", 
"", 
"static int <a class=\"id\" href=\"#setfl\">setfl</a>(int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#filp\">filp</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * O_APPEND cannot be cleared if the file is marked as append-only</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and the file is open for write.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (((<a class=\"id\" href=\"#arg\">arg</a> ^ <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a>) &amp; <a class=\"id\" href=\"#O_APPEND\">O_APPEND</a>) && <a class=\"id\" href=\"#IS_APPEND\">IS_APPEND</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* O_NOATIME can only be set by the owner or superuser */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#arg\">arg</a> &amp; <a class=\"id\" href=\"#O_NOATIME\">O_NOATIME</a>) && !(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_NOATIME\">O_NOATIME</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_owner_or_cap\">is_owner_or_cap</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* required for strict SunOS emulation */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a> != <a class=\"id\" href=\"#O_NDELAY\">O_NDELAY</a>)", 
"<span class=\"ts\"/>       if (<a class=\"id\" href=\"#arg\">arg</a> &amp; <a class=\"id\" href=\"#O_NDELAY\">O_NDELAY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#arg\">arg</a> |= <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a> &amp; <a class=\"id\" href=\"#O_DIRECT\">O_DIRECT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a> || !<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#direct_IO\">direct_IO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a> && <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#check_flags\">check_flags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#check_flags\">check_flags</a>(<a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * -&gt;fasync() is responsible for setting the FASYNC bit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (((<a class=\"id\" href=\"#arg\">arg</a> ^ <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a>) &amp; <a class=\"id\" href=\"#FASYNC\">FASYNC</a>) && <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#fasync\">fasync</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#fasync\">fasync</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#filp\">filp</a>, (<a class=\"id\" href=\"#arg\">arg</a> &amp; <a class=\"id\" href=\"#FASYNC\">FASYNC</a>) != 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_lock\">f_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> = (<a class=\"id\" href=\"#arg\">arg</a> &amp; <a class=\"id\" href=\"#SETFL_MASK\">SETFL_MASK</a>) | (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; ~<a class=\"id\" href=\"#SETFL_MASK\">SETFL_MASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_lock\">f_lock</a>);", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#f_modown\">f_modown</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>, enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#type\">type</a>,", 
"                     int <a class=\"id\" href=\"#force\">force</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_irq\">write_lock_irq</a>(&amp;<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#force\">force</a> || !<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#pid\">pid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_pid\">put_pid</a>(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#get_pid\">get_pid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#pid_type\">pid_type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#uid\">uid</a> = <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#uid\">uid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#euid\">euid</a> = <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#euid\">euid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_irq\">write_unlock_irq</a>(&amp;<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#__f_setown\">__f_setown</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>, enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#force\">force</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#security_file_set_fowner\">security_file_set_fowner</a>(<a class=\"id\" href=\"#filp\">filp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f_modown\">f_modown</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#force\">force</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__f_setown\">__f_setown</a>);", 
"", 
"int <a class=\"id\" href=\"#f_setown\">f_setown</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>, int <a class=\"id\" href=\"#force\">force</a>)", 
"{", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#who\">who</a> = <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#who\">who</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PIDTYPE_PGID\">PIDTYPE_PGID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#who\">who</a> = -<a class=\"id\" href=\"#who\">who</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#find_vpid\">find_vpid</a>(<a class=\"id\" href=\"#who\">who</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#__f_setown\">__f_setown</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#force\">force</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#f_setown\">f_setown</a>);", 
"", 
"void <a class=\"id\" href=\"#f_delown\">f_delown</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f_modown\">f_modown</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>, 1);", 
"}", 
"", 
"<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#f_getown\">f_getown</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#pid_vnr\">pid_vnr</a>(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#pid_type\">pid_type</a> == <a class=\"id\" href=\"#PIDTYPE_PGID\">PIDTYPE_PGID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = -<a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pid\">pid</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#f_setown_ex\">f_setown_ex</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#f_owner_ex\">f_owner_ex</a> * <a class=\"id\" href=\"#__user\">__user</a> <a class=\"id\" href=\"#owner_p\">owner_p</a> = (void * <a class=\"id\" href=\"#__user\">__user</a>)<a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#f_owner_ex\">f_owner_ex</a> <a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#owner\">owner</a>, <a class=\"id\" href=\"#owner_p\">owner_p</a>, sizeof(<a class=\"id\" href=\"#owner\">owner</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#owner\">owner</a>.<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_OWNER_TID\">F_OWNER_TID</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PIDTYPE_MAX\">PIDTYPE_MAX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_OWNER_PID\">F_OWNER_PID</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_OWNER_PGRP\">F_OWNER_PGRP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PIDTYPE_PGID\">PIDTYPE_PGID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#find_vpid\">find_vpid</a>(<a class=\"id\" href=\"#owner\">owner</a>.<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#owner\">owner</a>.<a class=\"id\" href=\"#pid\">pid</a> && !<a class=\"id\" href=\"#pid\">pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__f_setown\">__f_setown</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#type\">type</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#f_getown_ex\">f_getown_ex</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#f_owner_ex\">f_owner_ex</a> * <a class=\"id\" href=\"#__user\">__user</a> <a class=\"id\" href=\"#owner_p\">owner_p</a> = (void * <a class=\"id\" href=\"#__user\">__user</a>)<a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#f_owner_ex\">f_owner_ex</a> <a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#owner\">owner</a>.<a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#pid_vnr\">pid_vnr</a>(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#pid_type\">pid_type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PIDTYPE_MAX\">PIDTYPE_MAX</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#owner\">owner</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#F_OWNER_TID\">F_OWNER_TID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#owner\">owner</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#F_OWNER_PID\">F_OWNER_PID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PIDTYPE_PGID\">PIDTYPE_PGID</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#owner\">owner</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#F_OWNER_PGRP\">F_OWNER_PGRP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#owner_p\">owner_p</a>, &amp;<a class=\"id\" href=\"#owner\">owner</a>, sizeof(<a class=\"id\" href=\"#owner\">owner</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static long <a class=\"id\" href=\"#do_fcntl\">do_fcntl</a>(int <a class=\"id\" href=\"#fd\">fd</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_DUPFD\">F_DUPFD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_DUPFD_CLOEXEC\">F_DUPFD_CLOEXEC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a> >= <a class=\"id\" href=\"#rlimit\">rlimit</a>(<a class=\"id\" href=\"#RLIMIT_NOFILE\">RLIMIT_NOFILE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#alloc_fd\">alloc_fd</a>(<a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#cmd\">cmd</a> == <a class=\"id\" href=\"#F_DUPFD_CLOEXEC\">F_DUPFD_CLOEXEC</a> ? <a class=\"id\" href=\"#O_CLOEXEC\">O_CLOEXEC</a> : 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_file\">get_file</a>(<a class=\"id\" href=\"#filp\">filp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fd_install\">fd_install</a>(<a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#filp\">filp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_GETFD\">F_GETFD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#get_close_on_exec\">get_close_on_exec</a>(<a class=\"id\" href=\"#fd\">fd</a>) ? <a class=\"id\" href=\"#FD_CLOEXEC\">FD_CLOEXEC</a> : 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETFD\">F_SETFD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_close_on_exec\">set_close_on_exec</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#arg\">arg</a> &amp; <a class=\"id\" href=\"#FD_CLOEXEC\">FD_CLOEXEC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_GETFL\">F_GETFL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETFL\">F_SETFL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#setfl\">setfl</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_GETLK\">F_GETLK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#fcntl_getlk\">fcntl_getlk</a>(<a class=\"id\" href=\"#filp\">filp</a>, (struct <a class=\"id\" href=\"#flock\">flock</a> <a class=\"id\" href=\"#__user\">__user</a> *) <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETLK\">F_SETLK</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETLKW\">F_SETLKW</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#fcntl_setlk\">fcntl_setlk</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, (struct <a class=\"id\" href=\"#flock\">flock</a> <a class=\"id\" href=\"#__user\">__user</a> *) <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_GETOWN\">F_GETOWN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * XXX If f_owner is a process group, the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * negative return value will get converted</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * into an error.  Oops.  If we keep the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * current syscall conventions, the only way</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to fix this will be in libc.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#f_getown\">f_getown</a>(<a class=\"id\" href=\"#filp\">filp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_successful_syscall_return\">force_successful_syscall_return</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETOWN\">F_SETOWN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#f_setown\">f_setown</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#arg\">arg</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_GETOWN_EX\">F_GETOWN_EX</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#f_getown_ex\">f_getown_ex</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETOWN_EX\">F_SETOWN_EX</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#f_setown_ex\">f_setown_ex</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_GETSIG\">F_GETSIG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#signum\">signum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETSIG\">F_SETSIG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* arg == 0 restores default behaviour. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#valid_signal\">valid_signal</a>(<a class=\"id\" href=\"#arg\">arg</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#signum\">signum</a> = <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_GETLEASE\">F_GETLEASE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#fcntl_getlease\">fcntl_getlease</a>(<a class=\"id\" href=\"#filp\">filp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETLEASE\">F_SETLEASE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#fcntl_setlease\">fcntl_setlease</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_NOTIFY\">F_NOTIFY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#fcntl_dirnotify\">fcntl_dirnotify</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETPIPE_SZ\">F_SETPIPE_SZ</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_GETPIPE_SZ\">F_GETPIPE_SZ</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#pipe_fcntl\">pipe_fcntl</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE3\">SYSCALL_DEFINE3</a>(<a class=\"id\" href=\"#fcntl\">fcntl</a>, unsigned int, <a class=\"id\" href=\"#fd\">fd</a>, unsigned int, <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long, <a class=\"id\" href=\"#arg\">arg</a>)", 
"{<span class=\"ts\"/>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a> = <a class=\"id\" href=\"#fget\">fget</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#filp\">filp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#security_file_fcntl\">security_file_fcntl</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#filp\">filp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#do_fcntl\">do_fcntl</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#filp\">filp</a>);", 
"", 
" <span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#filp\">filp</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE3\">SYSCALL_DEFINE3</a>(<a class=\"id\" href=\"#fcntl64\">fcntl64</a>, unsigned int, <a class=\"id\" href=\"#fd\">fd</a>, unsigned int, <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long, <a class=\"id\" href=\"#arg\">arg</a>)", 
"{<span class=\"ts\"/>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#filp\">filp</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a> = <a class=\"id\" href=\"#fget\">fget</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#filp\">filp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#security_file_fcntl\">security_file_fcntl</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#filp\">filp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#F_GETLK64\">F_GETLK64</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#fcntl_getlk64\">fcntl_getlk64</a>(<a class=\"id\" href=\"#filp\">filp</a>, (struct <a class=\"id\" href=\"#flock64\">flock64</a> <a class=\"id\" href=\"#__user\">__user</a> *) <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETLK64\">F_SETLK64</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETLKW64\">F_SETLKW64</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#fcntl_setlk64\">fcntl_setlk64</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#flock64\">flock64</a> <a class=\"id\" href=\"#__user\">__user</a> *) <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#do_fcntl\">do_fcntl</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#filp\">filp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#filp\">filp</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Table to convert sigio signal codes into poll band bitmaps */</span>", 
"", 
"static const long <a class=\"id\" href=\"#band_table\">band_table</a>[<a class=\"id\" href=\"#NSIGPOLL\">NSIGPOLL</a>] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#POLLIN\">POLLIN</a> | <a class=\"id\" href=\"#POLLRDNORM\">POLLRDNORM</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* POLL_IN */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#POLLOUT\">POLLOUT</a> | <a class=\"id\" href=\"#POLLWRNORM\">POLLWRNORM</a> | <a class=\"id\" href=\"#POLLWRBAND\">POLLWRBAND</a>,<span class=\"ts\"/><span class=\"comment\">/* POLL_OUT */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#POLLIN\">POLLIN</a> | <a class=\"id\" href=\"#POLLRDNORM\">POLLRDNORM</a> | <a class=\"id\" href=\"#POLLMSG\">POLLMSG</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* POLL_MSG */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#POLLERR\">POLLERR</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* POLL_ERR */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#POLLPRI\">POLLPRI</a> | <a class=\"id\" href=\"#POLLRDBAND\">POLLRDBAND</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* POLL_PRI */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#POLLHUP\">POLLHUP</a> | <a class=\"id\" href=\"#POLLERR\">POLLERR</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* POLL_HUP */</span>", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sigio_perm\">sigio_perm</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"                             struct <a class=\"id\" href=\"#fown_struct\">fown_struct</a> *<a class=\"id\" href=\"#fown\">fown</a>, int <a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = ((<a class=\"id\" href=\"#fown\">fown</a>-><a class=\"id\" href=\"#euid\">euid</a> == 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fown\">fown</a>-><a class=\"id\" href=\"#euid\">euid</a> == <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#suid\">suid</a> || <a class=\"id\" href=\"#fown\">fown</a>-><a class=\"id\" href=\"#euid\">euid</a> == <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#uid\">uid</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fown\">fown</a>-><a class=\"id\" href=\"#uid\">uid</a>  == <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#suid\">suid</a> || <a class=\"id\" href=\"#fown\">fown</a>-><a class=\"id\" href=\"#uid\">uid</a>  == <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#uid\">uid</a>) &&", 
"<span class=\"ts\"/>       !<a class=\"id\" href=\"#security_file_send_sigiotask\">security_file_send_sigiotask</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#fown\">fown</a>, <a class=\"id\" href=\"#sig\">sig</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#send_sigio_to_task\">send_sigio_to_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#fown_struct\">fown_struct</a> *<a class=\"id\" href=\"#fown\">fown</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#fd\">fd</a>, int <a class=\"id\" href=\"#reason\">reason</a>, int <a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * F_SETSIG can change -&gt;signum lockless in parallel, make</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sure we read it once and use the same value throughout.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#signum\">signum</a> = <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#fown\">fown</a>-><a class=\"id\" href=\"#signum\">signum</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sigio_perm\">sigio_perm</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#fown\">fown</a>, <a class=\"id\" href=\"#signum\">signum</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#signum\">signum</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#siginfo_t\">siginfo_t</a> <a class=\"id\" href=\"#si\">si</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Queue a rt signal with the appropriate fd as its</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   value.  We use SI_SIGIO as the source, not </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   SI_KERNEL, since kernel signals always get </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   delivered even if we can't queue.  Failure to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   queue in this case _should_ be reported; we fall</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   back to SIGIO in that case. --sct */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>.<a class=\"id\" href=\"#si_signo\">si_signo</a> = <a class=\"id\" href=\"#signum\">signum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>.<a class=\"id\" href=\"#si_errno\">si_errno</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>        <a class=\"id\" href=\"#si\">si</a>.<a class=\"id\" href=\"#si_code\">si_code</a>  = <a class=\"id\" href=\"#reason\">reason</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make sure we are called with one of the POLL_*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   reasons, otherwise we could leak kernel stack into</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   userspace.  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((<a class=\"id\" href=\"#reason\">reason</a> &amp; <a class=\"id\" href=\"#__SI_MASK\">__SI_MASK</a>) != <a class=\"id\" href=\"#__SI_POLL\">__SI_POLL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reason\">reason</a> - <a class=\"id\" href=\"#POLL_IN\">POLL_IN</a> >= <a class=\"id\" href=\"#NSIGPOLL\">NSIGPOLL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>.<a class=\"id\" href=\"#si_band\">si_band</a>  = ~0L;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>.<a class=\"id\" href=\"#si_band\">si_band</a> = <a class=\"id\" href=\"#band_table\">band_table</a>[<a class=\"id\" href=\"#reason\">reason</a> - <a class=\"id\" href=\"#POLL_IN\">POLL_IN</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>.<a class=\"id\" href=\"#si_fd\">si_fd</a>    = <a class=\"id\" href=\"#fd\">fd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#do_send_sig_info\">do_send_sig_info</a>(<a class=\"id\" href=\"#signum\">signum</a>, &amp;<a class=\"id\" href=\"#si\">si</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#group\">group</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall-through: fall back on the old plain SIGIO signal */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_send_sig_info\">do_send_sig_info</a>(<a class=\"id\" href=\"#SIGIO\">SIGIO</a>, <a class=\"id\" href=\"#SEND_SIG_PRIV\">SEND_SIG_PRIV</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#send_sigio\">send_sigio</a>(struct <a class=\"id\" href=\"#fown_struct\">fown_struct</a> *<a class=\"id\" href=\"#fown\">fown</a>, int <a class=\"id\" href=\"#fd\">fd</a>, int <a class=\"id\" href=\"#band\">band</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#group\">group</a> = 1;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#fown\">fown</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#fown\">fown</a>-><a class=\"id\" href=\"#pid_type\">pid_type</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PIDTYPE_MAX\">PIDTYPE_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#fown\">fown</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pid\">pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock_fown\">out_unlock_fown</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_each_pid_task\">do_each_pid_task</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_sigio_to_task\">send_sigio_to_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#fown\">fown</a>, <a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#band\">band</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_pid_task\">while_each_pid_task</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
" <a class=\"id\" href=\"#out_unlock_fown\">out_unlock_fown</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#fown\">fown</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#send_sigurg_to_task\">send_sigurg_to_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fown_struct\">fown_struct</a> *<a class=\"id\" href=\"#fown\">fown</a>, int <a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sigio_perm\">sigio_perm</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#fown\">fown</a>, <a class=\"id\" href=\"#SIGURG\">SIGURG</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_send_sig_info\">do_send_sig_info</a>(<a class=\"id\" href=\"#SIGURG\">SIGURG</a>, <a class=\"id\" href=\"#SEND_SIG_PRIV\">SEND_SIG_PRIV</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#send_sigurg\">send_sigurg</a>(struct <a class=\"id\" href=\"#fown_struct\">fown_struct</a> *<a class=\"id\" href=\"#fown\">fown</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#group\">group</a> = 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#fown\">fown</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#fown\">fown</a>-><a class=\"id\" href=\"#pid_type\">pid_type</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PIDTYPE_MAX\">PIDTYPE_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#fown\">fown</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pid\">pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock_fown\">out_unlock_fown</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_each_pid_task\">do_each_pid_task</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_sigurg_to_task\">send_sigurg_to_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#fown\">fown</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_pid_task\">while_each_pid_task</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
" <a class=\"id\" href=\"#out_unlock_fown\">out_unlock_fown</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#fown\">fown</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#fasync_lock\">fasync_lock</a>);", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#fasync_cache\">fasync_cache</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"static void <a class=\"id\" href=\"#fasync_free_rcu\">fasync_free_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#fasync_cache\">fasync_cache</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#fasync_struct\">fasync_struct</a>, <a class=\"id\" href=\"#fa_rcu\">fa_rcu</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove a fasync entry. If successfully removed, return</span>", 
"<span class=\"comment\"> * positive and clear the FASYNC flag. If no entry exists,</span>", 
"<span class=\"comment\"> * do nothing and return 0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE! It is very important that the FASYNC flag always</span>", 
"<span class=\"comment\"> * match the state \"is the filp on a fasync list\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#fasync_remove_entry\">fasync_remove_entry</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#fasync_struct\">fasync_struct</a> **<a class=\"id\" href=\"#fapp\">fapp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fasync_struct\">fasync_struct</a> *<a class=\"id\" href=\"#fa\">fa</a>, **<a class=\"id\" href=\"#fp\">fp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_lock\">f_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#fasync_lock\">fasync_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#fp\">fp</a> = <a class=\"id\" href=\"#fapp\">fapp</a>; (<a class=\"id\" href=\"#fa\">fa</a> = *<a class=\"id\" href=\"#fp\">fp</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#fp\">fp</a> = &amp;<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#fa_next\">fa_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#fa_file\">fa_file</a> != <a class=\"id\" href=\"#filp\">filp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#fa_lock\">fa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#fa_file\">fa_file</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#fa_lock\">fa_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#fp\">fp</a> = <a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#fa_next\">fa_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#fa_rcu\">fa_rcu</a>, <a class=\"id\" href=\"#fasync_free_rcu\">fasync_free_rcu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &= ~<a class=\"id\" href=\"#FASYNC\">FASYNC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#fasync_lock\">fasync_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_lock\">f_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add a fasync entry. Return negative on error, positive if</span>", 
"<span class=\"comment\"> * added, and zero if did nothing but change an existing one.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE! It is very important that the FASYNC flag always</span>", 
"<span class=\"comment\"> * match the state \"is the filp on a fasync list\".</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#fasync_add_entry\">fasync_add_entry</a>(int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#fasync_struct\">fasync_struct</a> **<a class=\"id\" href=\"#fapp\">fapp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fasync_struct\">fasync_struct</a> *<a class=\"id\" href=\"#new\">new</a>, *<a class=\"id\" href=\"#fa\">fa</a>, **<a class=\"id\" href=\"#fp\">fp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#fasync_cache\">fasync_cache</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_lock\">f_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#fasync_lock\">fasync_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#fp\">fp</a> = <a class=\"id\" href=\"#fapp\">fapp</a>; (<a class=\"id\" href=\"#fa\">fa</a> = *<a class=\"id\" href=\"#fp\">fp</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#fp\">fp</a> = &amp;<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#fa_next\">fa_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#fa_file\">fa_file</a> != <a class=\"id\" href=\"#filp\">filp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#fa_lock\">fa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#fa_fd\">fa_fd</a> = <a class=\"id\" href=\"#fd\">fd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#fa_lock\">fa_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#fasync_cache\">fasync_cache</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fa_lock\">fa_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#magic\">magic</a> = <a class=\"id\" href=\"#FASYNC_MAGIC\">FASYNC_MAGIC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fa_file\">fa_file</a> = <a class=\"id\" href=\"#filp\">filp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fa_fd\">fa_fd</a> = <a class=\"id\" href=\"#fd\">fd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fa_next\">fa_next</a> = *<a class=\"id\" href=\"#fapp\">fapp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(*<a class=\"id\" href=\"#fapp\">fapp</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> |= <a class=\"id\" href=\"#FASYNC\">FASYNC</a>;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#fasync_lock\">fasync_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_lock\">f_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fasync_helper() is used by almost all character device drivers</span>", 
"<span class=\"comment\"> * to set up the fasync queue, and for regular files by the file</span>", 
"<span class=\"comment\"> * lease code. It returns negative on error, 0 if it did no changes</span>", 
"<span class=\"comment\"> * and positive if it added/deleted the entry.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#fasync_helper\">fasync_helper</a>(int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#filp\">filp</a>, int <a class=\"id\" href=\"#on\">on</a>, struct <a class=\"id\" href=\"#fasync_struct\">fasync_struct</a> **<a class=\"id\" href=\"#fapp\">fapp</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#on\">on</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#fasync_remove_entry\">fasync_remove_entry</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#fapp\">fapp</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fasync_add_entry\">fasync_add_entry</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#fapp\">fapp</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#fasync_helper\">fasync_helper</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * rcu_read_lock() is held</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#kill_fasync_rcu\">kill_fasync_rcu</a>(struct <a class=\"id\" href=\"#fasync_struct\">fasync_struct</a> *<a class=\"id\" href=\"#fa\">fa</a>, int <a class=\"id\" href=\"#sig\">sig</a>, int <a class=\"id\" href=\"#band\">band</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#fa\">fa</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fown_struct\">fown_struct</a> *<a class=\"id\" href=\"#fown\">fown</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#magic\">magic</a> != <a class=\"id\" href=\"#FASYNC_MAGIC\">FASYNC_MAGIC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"kill_fasync: bad magic number in \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"fasync_struct!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#fa_lock\">fa_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#fa_file\">fa_file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fown\">fown</a> = &amp;<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#fa_file\">fa_file</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Don't send SIGURG to processes which have not set a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   queued signum: SIGURG has its own default signalling</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   mechanism. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sig\">sig</a> == <a class=\"id\" href=\"#SIGURG\">SIGURG</a> && <a class=\"id\" href=\"#fown\">fown</a>-><a class=\"id\" href=\"#signum\">signum</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_sigio\">send_sigio</a>(<a class=\"id\" href=\"#fown\">fown</a>, <a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#fa_fd\">fa_fd</a>, <a class=\"id\" href=\"#band\">band</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#fa_lock\">fa_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fa\">fa</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#fa_next\">fa_next</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#kill_fasync\">kill_fasync</a>(struct <a class=\"id\" href=\"#fasync_struct\">fasync_struct</a> **<a class=\"id\" href=\"#fp\">fp</a>, int <a class=\"id\" href=\"#sig\">sig</a>, int <a class=\"id\" href=\"#band\">band</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* First a quick test without locking: usually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the list is empty.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#fp\">fp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_fasync_rcu\">kill_fasync_rcu</a>(<a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(*<a class=\"id\" href=\"#fp\">fp</a>), <a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#band\">band</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kill_fasync\">kill_fasync</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#fcntl_init\">fcntl_init</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Please add new bits here to ensure allocation uniqueness.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Exceptions: O_NONBLOCK is a two bit define on parisc; O_NDELAY</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is defined as O_NONBLOCK on some platforms and not on others.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(18 - 1 <span class=\"comment\">/* for O_RDONLY being 0 */</span> != <a class=\"id\" href=\"#HWEIGHT32\">HWEIGHT32</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#O_RDONLY\">O_RDONLY</a><span class=\"ts\"/>| <a class=\"id\" href=\"#O_WRONLY\">O_WRONLY</a><span class=\"ts\"/>| <a class=\"id\" href=\"#O_RDWR\">O_RDWR</a><span class=\"ts\"/>|", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#O_CREAT\">O_CREAT</a><span class=\"ts\"/><span class=\"ts\"/>| <a class=\"id\" href=\"#O_EXCL\">O_EXCL</a><span class=\"ts\"/>| <a class=\"id\" href=\"#O_NOCTTY\">O_NOCTTY</a><span class=\"ts\"/>|", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#O_TRUNC\">O_TRUNC</a><span class=\"ts\"/><span class=\"ts\"/>| <a class=\"id\" href=\"#O_APPEND\">O_APPEND</a><span class=\"ts\"/>| <span class=\"comment\">/* O_NONBLOCK<span class=\"ts\"/>| */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__O_SYNC\">__O_SYNC</a><span class=\"ts\"/>| <a class=\"id\" href=\"#O_DSYNC\">O_DSYNC</a><span class=\"ts\"/>| <a class=\"id\" href=\"#FASYNC\">FASYNC</a><span class=\"ts\"/>|", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#O_DIRECT\">O_DIRECT</a><span class=\"ts\"/>| <a class=\"id\" href=\"#O_LARGEFILE\">O_LARGEFILE</a><span class=\"ts\"/>| <a class=\"id\" href=\"#O_DIRECTORY\">O_DIRECTORY</a><span class=\"ts\"/>|", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#O_NOFOLLOW\">O_NOFOLLOW</a><span class=\"ts\"/>| <a class=\"id\" href=\"#O_NOATIME\">O_NOATIME</a><span class=\"ts\"/>| <a class=\"id\" href=\"#O_CLOEXEC\">O_CLOEXEC</a><span class=\"ts\"/>|", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FMODE_EXEC\">FMODE_EXEC</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fasync_cache\">fasync_cache</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"fasync_cache\",", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#fasync_struct\">fasync_struct</a>), 0, <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#fcntl_init\">fcntl_init</a>)", 
];
xr_frag_insert('l/4a/d55223abf9b496a7a54ec524f97f07cf80160e.xr', __xr_tmp);
