var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mm/page-writeback.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2002, Linus Torvalds.</span>", 
"<span class=\"comment\"> * Copyright (C) 2007 Red Hat, Inc., Peter Zijlstra &lt;pzijlstr@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Contains functions related to writing back dirty pages at the</span>", 
"<span class=\"comment\"> * address_space level.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 10Apr2002<span class=\"ts\"/>Andrew Morton</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Initial version</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#backing\">backing</a>-<a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#task_io_accounting_ops\">task_io_accounting_ops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mpage\">mpage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rmap\">rmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysctl\">sysctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagevec\">pagevec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * After a CPU has dirtied this many pages, balance_dirty_pages_ratelimited</span>", 
"<span class=\"comment\"> * will look to see if it needs to force writeback or throttling.</span>", 
"<span class=\"comment\"> */</span>", 
"static long <a class=\"id\" href=\"#ratelimit_pages\">ratelimit_pages</a> = 32;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When balance_dirty_pages decides that the caller needs to perform some</span>", 
"<span class=\"comment\"> * non-background writeback, this is how many pages it will attempt to write.</span>", 
"<span class=\"comment\"> * It should be somewhat larger than dirtied pages to ensure that reasonably</span>", 
"<span class=\"comment\"> * large amounts of I/O are submitted.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> long <a class=\"id\" href=\"#sync_writeback_pages\">sync_writeback_pages</a>(unsigned long <a class=\"id\" href=\"#dirtied\">dirtied</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dirtied\">dirtied</a> &lt; <a class=\"id\" href=\"#ratelimit_pages\">ratelimit_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dirtied\">dirtied</a> = <a class=\"id\" href=\"#ratelimit_pages\">ratelimit_pages</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dirtied\">dirtied</a> + <a class=\"id\" href=\"#dirtied\">dirtied</a> / 2;", 
"}", 
"", 
"<span class=\"comment\">/* The following parameters are exported via /proc/sys/vm */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Start background writeback (via writeback threads) at this percentage</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dirty_background_ratio\">dirty_background_ratio</a> = 10;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * dirty_background_bytes starts at 0 (disabled) so that it is a function of</span>", 
"<span class=\"comment\"> * dirty_background_ratio * the amount of dirtyable memory</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#dirty_background_bytes\">dirty_background_bytes</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * free highmem will not be subtracted from the total free memory</span>", 
"<span class=\"comment\"> * for calculating free ratios if vm_highmem_is_dirtyable is true</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#vm_highmem_is_dirtyable\">vm_highmem_is_dirtyable</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The generator of dirty data starts writeback at this percentage</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#vm_dirty_ratio\">vm_dirty_ratio</a> = 20;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * vm_dirty_bytes starts at 0 (disabled) so that it is a function of</span>", 
"<span class=\"comment\"> * vm_dirty_ratio * the amount of dirtyable memory</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#vm_dirty_bytes\">vm_dirty_bytes</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The interval between `kupdate'-style writebacks</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#dirty_writeback_interval\">dirty_writeback_interval</a> = 5 * 100; <span class=\"comment\">/* centiseconds */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The longest time for which data is allowed to remain dirty</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#dirty_expire_interval\">dirty_expire_interval</a> = 30 * 100; <span class=\"comment\">/* centiseconds */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Flag that makes the machine dump writes/reads and block dirtyings.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#block_dump\">block_dump</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Flag that puts the machine in \"laptop mode\". Doubles as a timeout in jiffies:</span>", 
"<span class=\"comment\"> * a full sync is triggered after this time elapses without any disk activity.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#laptop_mode\">laptop_mode</a>;", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#laptop_mode\">laptop_mode</a>);", 
"", 
"<span class=\"comment\">/* End of sysctl-exported parameters */</span>", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Scale the writeback cache size proportional to the relative writeout speeds.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We do this by keeping a floating proportion between BDIs, based on page</span>", 
"<span class=\"comment\"> * writeback completions [end_page_writeback()]. Those devices that write out</span>", 
"<span class=\"comment\"> * pages fastest will get the larger share, while the slower will get a smaller</span>", 
"<span class=\"comment\"> * share.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We use page writeout completions because we are interested in getting rid of</span>", 
"<span class=\"comment\"> * dirty pages. Having them written out is the primary goal.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We introduce a concept of time, a period over which we measure these events,</span>", 
"<span class=\"comment\"> * because demand can/will vary over time. The length of this period itself is</span>", 
"<span class=\"comment\"> * measured in page writeback completions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#prop_descriptor\">prop_descriptor</a> <a class=\"id\" href=\"#vm_completions\">vm_completions</a>;", 
"static struct <a class=\"id\" href=\"#prop_descriptor\">prop_descriptor</a> <a class=\"id\" href=\"#vm_dirties\">vm_dirties</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * couple the period to the dirty_ratio:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   period/2 ~ roundup_pow_of_two(dirty limit)</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#calc_period_shift\">calc_period_shift</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dirty_total\">dirty_total</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vm_dirty_bytes\">vm_dirty_bytes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dirty_total\">dirty_total</a> = <a class=\"id\" href=\"#vm_dirty_bytes\">vm_dirty_bytes</a> / <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dirty_total\">dirty_total</a> = (<a class=\"id\" href=\"#vm_dirty_ratio\">vm_dirty_ratio</a> * <a class=\"id\" href=\"#determine_dirtyable_memory\">determine_dirtyable_memory</a>()) /", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>100;", 
"<span class=\"ts\"/>return 2 + <a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#dirty_total\">dirty_total</a> - 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * update the period when the dirty threshold changes.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#update_completion_period\">update_completion_period</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#shift\">shift</a> = <a class=\"id\" href=\"#calc_period_shift\">calc_period_shift</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prop_change_shift\">prop_change_shift</a>(&amp;<a class=\"id\" href=\"#vm_completions\">vm_completions</a>, <a class=\"id\" href=\"#shift\">shift</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prop_change_shift\">prop_change_shift</a>(&amp;<a class=\"id\" href=\"#vm_dirties\">vm_dirties</a>, <a class=\"id\" href=\"#shift\">shift</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#dirty_background_ratio_handler\">dirty_background_ratio_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0 && <a class=\"id\" href=\"#write\">write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dirty_background_bytes\">dirty_background_bytes</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#dirty_background_bytes_handler\">dirty_background_bytes_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#proc_doulongvec_minmax\">proc_doulongvec_minmax</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0 && <a class=\"id\" href=\"#write\">write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dirty_background_ratio\">dirty_background_ratio</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#dirty_ratio_handler\">dirty_ratio_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old_ratio\">old_ratio</a> = <a class=\"id\" href=\"#vm_dirty_ratio\">vm_dirty_ratio</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0 && <a class=\"id\" href=\"#write\">write</a> && <a class=\"id\" href=\"#vm_dirty_ratio\">vm_dirty_ratio</a> != <a class=\"id\" href=\"#old_ratio\">old_ratio</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_completion_period\">update_completion_period</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_dirty_bytes\">vm_dirty_bytes</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"", 
"int <a class=\"id\" href=\"#dirty_bytes_handler\">dirty_bytes_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#old_bytes\">old_bytes</a> = <a class=\"id\" href=\"#vm_dirty_bytes\">vm_dirty_bytes</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#proc_doulongvec_minmax\">proc_doulongvec_minmax</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0 && <a class=\"id\" href=\"#write\">write</a> && <a class=\"id\" href=\"#vm_dirty_bytes\">vm_dirty_bytes</a> != <a class=\"id\" href=\"#old_bytes\">old_bytes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_completion_period\">update_completion_period</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_dirty_ratio\">vm_dirty_ratio</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Increment the BDI's writeout completion count and the global writeout</span>", 
"<span class=\"comment\"> * completion count. Called from test_clear_page_writeback().</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__bdi_writeout_inc\">__bdi_writeout_inc</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__prop_inc_percpu_max\">__prop_inc_percpu_max</a>(&amp;<a class=\"id\" href=\"#vm_completions\">vm_completions</a>, &amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#completions\">completions</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#max_prop_frac\">max_prop_frac</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#bdi_writeout_inc\">bdi_writeout_inc</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__bdi_writeout_inc\">__bdi_writeout_inc</a>(<a class=\"id\" href=\"#bdi\">bdi</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#bdi_writeout_inc\">bdi_writeout_inc</a>);", 
"", 
"void <a class=\"id\" href=\"#task_dirty_inc\">task_dirty_inc</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prop_inc_single\">prop_inc_single</a>(&amp;<a class=\"id\" href=\"#vm_dirties\">vm_dirties</a>, &amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#dirties\">dirties</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Obtain an accurate fraction of the BDI's portion.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#bdi_writeout_fraction\">bdi_writeout_fraction</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>long *<a class=\"id\" href=\"#numerator\">numerator</a>, long *<a class=\"id\" href=\"#denominator\">denominator</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdi_cap_writeback_dirty\">bdi_cap_writeback_dirty</a>(<a class=\"id\" href=\"#bdi\">bdi</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prop_fraction_percpu\">prop_fraction_percpu</a>(&amp;<a class=\"id\" href=\"#vm_completions\">vm_completions</a>, &amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#completions\">completions</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#numerator\">numerator</a>, <a class=\"id\" href=\"#denominator\">denominator</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#numerator\">numerator</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#denominator\">denominator</a> = 1;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#task_dirties_fraction\">task_dirties_fraction</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>long *<a class=\"id\" href=\"#numerator\">numerator</a>, long *<a class=\"id\" href=\"#denominator\">denominator</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prop_fraction_single\">prop_fraction_single</a>(&amp;<a class=\"id\" href=\"#vm_dirties\">vm_dirties</a>, &amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#dirties\">dirties</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#numerator\">numerator</a>, <a class=\"id\" href=\"#denominator\">denominator</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * task_dirty_limit - scale down dirty throttling threshold for one task</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * task specific dirty limit:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   dirty -= (dirty/8) * p_{t}</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To protect light/slow dirtying tasks from heavier/fast ones, we start</span>", 
"<span class=\"comment\"> * throttling individual tasks before reaching the bdi dirty limit.</span>", 
"<span class=\"comment\"> * Relatively low thresholds will be allocated to heavy dirtiers. So when</span>", 
"<span class=\"comment\"> * dirty pages grow large, heavy dirtiers will be throttled first, which will</span>", 
];
xr_frag_insert('l/4b/468f34dca617691d78ab6848fec7bbd33fb234.xr', __xr_tmp);
