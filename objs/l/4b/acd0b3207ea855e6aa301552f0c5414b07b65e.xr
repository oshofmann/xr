var __xr_tmp = [
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#ror8\">ror8</a>(<a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#word\">word</a>, unsigned int <a class=\"id\" href=\"#shift\">shift</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#word\">word</a> >> <a class=\"id\" href=\"#shift\">shift</a>) | (<a class=\"id\" href=\"#word\">word</a> << (8 - <a class=\"id\" href=\"#shift\">shift</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#fls_long\">fls_long</a>(unsigned long <a class=\"id\" href=\"#l\">l</a>)", 
"{", 
"<span class=\"ts\"/>if (sizeof(<a class=\"id\" href=\"#l\">l</a>) == 4)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#fls\">fls</a>(<a class=\"id\" href=\"#l\">l</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fls64\">fls64</a>(<a class=\"id\" href=\"#l\">l</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __ffs64 - find first set bit in a 64 bit word</span>", 
"<span class=\"comment\"> * @word: The 64 bit word</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On 64 bit arches this is a synomyn for __ffs</span>", 
"<span class=\"comment\"> * The result is not defined if no bits are set, so check that @word</span>", 
"<span class=\"comment\"> * is non-zero before calling this.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#__ffs64\">__ffs64</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#word\">word</a>)", 
"{", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"<span class=\"ts\"/>if (((<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#word\">word</a>) == 0UL)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__ffs\">__ffs</a>((<a class=\"id\" href=\"#u32\">u32</a>)(<a class=\"id\" href=\"#word\">word</a> >> 32)) + 32;", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> != 64", 
"#<a class=\"id\" href=\"#error\">error</a> <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> <a class=\"id\" href=\"#not\">not</a> 32 <a class=\"id\" href=\"#or\">or</a> 64", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__ffs\">__ffs</a>((unsigned long)<a class=\"id\" href=\"#word\">word</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_GENERIC_FIND_FIRST_BIT\">CONFIG_GENERIC_FIND_FIRST_BIT</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_first_bit - find the first set bit in a memory region</span>", 
"<span class=\"comment\"> * @addr: The address to start the search at</span>", 
"<span class=\"comment\"> * @size: The maximum size to search</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the bit number of the first set bit.</span>", 
"<span class=\"comment\"> */</span>", 
"extern unsigned long <a class=\"id\" href=\"#find_first_bit\">find_first_bit</a>(const unsigned long *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_first_zero_bit - find the first cleared bit in a memory region</span>", 
"<span class=\"comment\"> * @addr: The address to start the search at</span>", 
"<span class=\"comment\"> * @size: The maximum size to search</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the bit number of the first cleared bit.</span>", 
"<span class=\"comment\"> */</span>", 
"extern unsigned long <a class=\"id\" href=\"#find_first_zero_bit\">find_first_zero_bit</a>(const unsigned long *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#size\">size</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_GENERIC_FIND_FIRST_BIT */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_GENERIC_FIND_LAST_BIT\">CONFIG_GENERIC_FIND_LAST_BIT</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_last_bit - find the last set bit in a memory region</span>", 
"<span class=\"comment\"> * @addr: The address to start the search at</span>", 
"<span class=\"comment\"> * @size: The maximum size to search</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the bit number of the first set bit, or size.</span>", 
"<span class=\"comment\"> */</span>", 
"extern unsigned long <a class=\"id\" href=\"#find_last_bit\">find_last_bit</a>(const unsigned long *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#size\">size</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_GENERIC_FIND_LAST_BIT */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_GENERIC_FIND_NEXT_BIT\">CONFIG_GENERIC_FIND_NEXT_BIT</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_next_bit - find the next set bit in a memory region</span>", 
"<span class=\"comment\"> * @addr: The address to base the search on</span>", 
"<span class=\"comment\"> * @offset: The bitnumber to start searching at</span>", 
"<span class=\"comment\"> * @size: The bitmap size in bits</span>", 
"<span class=\"comment\"> */</span>", 
"extern unsigned long <a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>(const unsigned long *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#offset\">offset</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_next_zero_bit - find the next cleared bit in a memory region</span>", 
"<span class=\"comment\"> * @addr: The address to base the search on</span>", 
"<span class=\"comment\"> * @offset: The bitnumber to start searching at</span>", 
"<span class=\"comment\"> * @size: The bitmap size in bits</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"extern unsigned long <a class=\"id\" href=\"#find_next_zero_bit\">find_next_zero_bit</a>(const unsigned long *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_GENERIC_FIND_NEXT_BIT */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/4b/acd0b3207ea855e6aa301552f0c5414b07b65e.xr', __xr_tmp);
