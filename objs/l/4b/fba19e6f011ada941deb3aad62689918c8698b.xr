var __xr_tmp = [
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#get_child\">get_child</a>(unsigned int <a class=\"id\" href=\"#n\">n</a>, unsigned int <a class=\"id\" href=\"#k\">k</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#n\">n</a> * <a class=\"id\" href=\"#CHILDREN_PER_NODE\">CHILDREN_PER_NODE</a>) + <a class=\"id\" href=\"#k\">k</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the n'th node of level l from table t.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#sector_t\">sector_t</a> *<a class=\"id\" href=\"#get_node\">get_node</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#l\">l</a>, unsigned int <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#index\">index</a>[<a class=\"id\" href=\"#l\">l</a>] + (<a class=\"id\" href=\"#n\">n</a> * <a class=\"id\" href=\"#KEYS_PER_NODE\">KEYS_PER_NODE</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the highest key that you could lookup from the n'th</span>", 
"<span class=\"comment\"> * node on level l of the btree.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#high\">high</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>, unsigned int <a class=\"id\" href=\"#l\">l</a>, unsigned int <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#l\">l</a> &lt; <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#depth\">depth</a> - 1; <a class=\"id\" href=\"#l\">l</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#get_child\">get_child</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#CHILDREN_PER_NODE\">CHILDREN_PER_NODE</a> - 1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> >= <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#counts\">counts</a>[<a class=\"id\" href=\"#l\">l</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#sector_t\">sector_t</a>) - 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#get_node\">get_node</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a>)[<a class=\"id\" href=\"#KEYS_PER_NODE\">KEYS_PER_NODE</a> - 1];", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Fills in a level of the btree based on the highs of the level</span>", 
"<span class=\"comment\"> * below it.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#setup_btree_index\">setup_btree_index</a>(unsigned int <a class=\"id\" href=\"#l\">l</a>, struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a> = 0U; <a class=\"id\" href=\"#n\">n</a> &lt; <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#counts\">counts</a>[<a class=\"id\" href=\"#l\">l</a>]; <a class=\"id\" href=\"#n\">n</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#get_node\">get_node</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0U; <a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#KEYS_PER_NODE\">KEYS_PER_NODE</a>; <a class=\"id\" href=\"#k\">k</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>[<a class=\"id\" href=\"#k\">k</a>] = <a class=\"id\" href=\"#high\">high</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#l\">l</a> + 1, <a class=\"id\" href=\"#get_child\">get_child</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#k\">k</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void *<a class=\"id\" href=\"#dm_vcalloc\">dm_vcalloc</a>(unsigned long <a class=\"id\" href=\"#nmemb\">nmemb</a>, unsigned long <a class=\"id\" href=\"#elem_size\">elem_size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check that we're not going to overflow.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmemb\">nmemb</a> &gt; (<a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a> / <a class=\"id\" href=\"#elem_size\">elem_size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#nmemb\">nmemb</a> * <a class=\"id\" href=\"#elem_size\">elem_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#vmalloc\">vmalloc</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0, <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * highs, and targets are managed as dynamic arrays during a</span>", 
"<span class=\"comment\"> * table load.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#alloc_targets\">alloc_targets</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>, unsigned int <a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> *<a class=\"id\" href=\"#n_highs\">n_highs</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#n_targets\">n_targets</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_targets\">num_targets</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allocate both the target array and offset array at once.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Append an empty entry to catch sectors beyond the end of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n_highs\">n_highs</a> = (<a class=\"id\" href=\"#sector_t\">sector_t</a> *) <a class=\"id\" href=\"#dm_vcalloc\">dm_vcalloc</a>(<a class=\"id\" href=\"#num\">num</a> + 1, sizeof(struct <a class=\"id\" href=\"#dm_target\">dm_target</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  sizeof(<a class=\"id\" href=\"#sector_t\">sector_t</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#n_highs\">n_highs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n_targets\">n_targets</a> = (struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *) (<a class=\"id\" href=\"#n_highs\">n_highs</a> + <a class=\"id\" href=\"#num\">num</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#n_highs\">n_highs</a>, <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#highs\">highs</a>, sizeof(*<a class=\"id\" href=\"#n_highs\">n_highs</a>) * <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#n_targets\">n_targets</a>, <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#targets\">targets</a>, sizeof(*<a class=\"id\" href=\"#n_targets\">n_targets</a>) * <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#n_highs\">n_highs</a> + <a class=\"id\" href=\"#n\">n</a>, -1, sizeof(*<a class=\"id\" href=\"#n_highs\">n_highs</a>) * (<a class=\"id\" href=\"#num\">num</a> - <a class=\"id\" href=\"#n\">n</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#highs\">highs</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_allocated\">num_allocated</a> = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#highs\">highs</a> = <a class=\"id\" href=\"#n_highs\">n_highs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#targets\">targets</a> = <a class=\"id\" href=\"#n_targets\">n_targets</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#dm_table_create\">dm_table_create</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> **<a class=\"id\" href=\"#result\">result</a>, <a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned <a class=\"id\" href=\"#num_targets\">num_targets</a>, struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#t\">t</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#t\">t</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#devices\">devices</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#holders\">holders</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#discards_supported\">discards_supported</a> = 1;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#num_targets\">num_targets</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_targets\">num_targets</a> = <a class=\"id\" href=\"#KEYS_PER_NODE\">KEYS_PER_NODE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num_targets\">num_targets</a> = <a class=\"id\" href=\"#dm_round_up\">dm_round_up</a>(<a class=\"id\" href=\"#num_targets\">num_targets</a>, <a class=\"id\" href=\"#KEYS_PER_NODE\">KEYS_PER_NODE</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#alloc_targets\">alloc_targets</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#num_targets\">num_targets</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#md\">md</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_devices\">free_devices</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#devices\">devices</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#tmp\">tmp</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_safe\">list_for_each_safe</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#devices\">devices</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_dev_internal\">dm_dev_internal</a> *<a class=\"id\" href=\"#dd\">dd</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, struct <a class=\"id\" href=\"#dm_dev_internal\">dm_dev_internal</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN\">DMWARN</a>(\"dm_table_destroy: dm_put_device call missing for %s\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dd\">dd</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#dm_table_destroy\">dm_table_destroy</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#t\">t</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#holders\">holders</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* free the indexes */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#depth\">depth</a> >= 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#index\">index</a>[<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#depth\">depth</a> - 2]);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* free the targets */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_targets\">num_targets</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#tgt\">tgt</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#targets\">targets</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#dtr\">dtr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#dtr\">dtr</a>(<a class=\"id\" href=\"#tgt\">tgt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dm_put_target_type\">dm_put_target_type</a>(<a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#highs\">highs</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* free the device list */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#devices\">devices</a>.<a class=\"id\" href=\"#next\">next</a> != &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#devices\">devices</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_devices\">free_devices</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#devices\">devices</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_free_md_mempools\">dm_free_md_mempools</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#mempools\">mempools</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#dm_table_get\">dm_table_get</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#holders\">holders</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#dm_table_put\">dm_table_put</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#t\">t</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__before_atomic_dec\">smp_mb__before_atomic_dec</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#holders\">holders</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Checks to see if we need to extend highs or targets.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#check_space\">check_space</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_targets\">num_targets</a> >= <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_allocated\">num_allocated</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_targets\">alloc_targets</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_allocated\">num_allocated</a> * 2);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * See if we've already got a device in the list.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#dm_dev_internal\">dm_dev_internal</a> *<a class=\"id\" href=\"#find_device\">find_device</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_dev_internal\">dm_dev_internal</a> *<a class=\"id\" href=\"#dd\">dd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a> (<a class=\"id\" href=\"#dd\">dd</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_dev\">bd_dev</a> == <a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dd\">dd</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Open a device so we can use it as a map destination.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#open_dev\">open_dev</a>(struct <a class=\"id\" href=\"#dm_dev_internal\">dm_dev_internal</a> *<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>static char *<a class=\"id\" href=\"#_claim_ptr\">_claim_ptr</a> = \"I belong to device-mapper\";", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#open_by_devnum\">open_by_devnum</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#bdev\">bdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#bd_claim_by_disk\">bd_claim_by_disk</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#_claim_ptr\">_claim_ptr</a>, <a class=\"id\" href=\"#dm_disk\">dm_disk</a>(<a class=\"id\" href=\"#md\">md</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blkdev_put\">blkdev_put</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Close a device that we've been using.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#close_dev\">close_dev</a>(struct <a class=\"id\" href=\"#dm_dev_internal\">dm_dev_internal</a> *<a class=\"id\" href=\"#d\">d</a>, struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd_release_from_disk\">bd_release_from_disk</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#dm_disk\">dm_disk</a>(<a class=\"id\" href=\"#md\">md</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blkdev_put\">blkdev_put</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If possible, this checks an area of a destination device is invalid.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#device_area_is_invalid\">device_area_is_invalid</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, struct <a class=\"id\" href=\"#dm_dev\">dm_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#len\">len</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#queue_limits\">queue_limits</a> *<a class=\"id\" href=\"#limits\">limits</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#dev_size\">dev_size</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>) >> <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#logical_block_size_sectors\">logical_block_size_sectors</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limits\">limits</a>-><a class=\"id\" href=\"#logical_block_size\">logical_block_size</a> >> <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#b\">b</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>];", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev_size\">dev_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#dev_size\">dev_size</a>) || (<a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#dev_size\">dev_size</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN\">DMWARN</a>(\"%s: %s too small for target: \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"start=%llu, len=%llu, dev_size=%llu\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dm_device_name\">dm_device_name</a>(<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#md\">md</a>), <a class=\"id\" href=\"#bdevname\">bdevname</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#b\">b</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#dev_size\">dev_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#logical_block_size_sectors\">logical_block_size_sectors</a> <= 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &amp; (<a class=\"id\" href=\"#logical_block_size_sectors\">logical_block_size_sectors</a> - 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN\">DMWARN</a>(\"%s: start=%llu not aligned to h/w \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"logical block size %u of %s\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dm_device_name\">dm_device_name</a>(<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#md\">md</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#limits\">limits</a>-><a class=\"id\" href=\"#logical_block_size\">logical_block_size</a>, <a class=\"id\" href=\"#bdevname\">bdevname</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#b\">b</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &amp; (<a class=\"id\" href=\"#logical_block_size_sectors\">logical_block_size_sectors</a> - 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN\">DMWARN</a>(\"%s: len=%llu not aligned to h/w \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"logical block size %u of %s\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dm_device_name\">dm_device_name</a>(<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#md\">md</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#limits\">limits</a>-><a class=\"id\" href=\"#logical_block_size\">logical_block_size</a>, <a class=\"id\" href=\"#bdevname\">bdevname</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#b\">b</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This upgrades the mode on an already open dm_dev, being</span>", 
"<span class=\"comment\"> * careful to leave things as they were if we fail to reopen the</span>", 
"<span class=\"comment\"> * device and not to touch the existing bdev field in case</span>", 
"<span class=\"comment\"> * it is accessed concurrently inside dm_table_any_congested().</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#upgrade_mode\">upgrade_mode</a>(struct <a class=\"id\" href=\"#dm_dev_internal\">dm_dev_internal</a> *<a class=\"id\" href=\"#dd\">dd</a>, <a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#new_mode\">new_mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_dev_internal\">dm_dev_internal</a> <a class=\"id\" href=\"#dd_new\">dd_new</a>, <a class=\"id\" href=\"#dd_old\">dd_old</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dd_new\">dd_new</a> = <a class=\"id\" href=\"#dd_old\">dd_old</a> = *<a class=\"id\" href=\"#dd\">dd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dd_new\">dd_new</a>.<a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#mode\">mode</a> |= <a class=\"id\" href=\"#new_mode\">new_mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dd_new\">dd_new</a>.<a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#open_dev\">open_dev</a>(&amp;<a class=\"id\" href=\"#dd_new\">dd_new</a>, <a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_dev\">bd_dev</a>, <a class=\"id\" href=\"#md\">md</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#mode\">mode</a> |= <a class=\"id\" href=\"#new_mode\">new_mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#close_dev\">close_dev</a>(&amp;<a class=\"id\" href=\"#dd_old\">dd_old</a>, <a class=\"id\" href=\"#md\">md</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add a device to the list, or just increment the usage count if</span>", 
"<span class=\"comment\"> * it's already present.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__table_get_device\">__table_get_device</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>, struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      const char *<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#mode\">mode</a>, struct <a class=\"id\" href=\"#dm_dev\">dm_dev</a> **<a class=\"id\" href=\"#result\">result</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_dev_internal\">dm_dev_internal</a> *<a class=\"id\" href=\"#dd\">dd</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#major\">major</a>, <a class=\"id\" href=\"#minor\">minor</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#path\">path</a>, \"%u:%u\", &amp;<a class=\"id\" href=\"#major\">major</a>, &amp;<a class=\"id\" href=\"#minor\">minor</a>) == 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Extract the major/minor numbers */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#major\">major</a>, <a class=\"id\" href=\"#minor\">minor</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#dev\">dev</a>) != <a class=\"id\" href=\"#major\">major</a> || <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#dev\">dev</a>) != <a class=\"id\" href=\"#minor\">minor</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOVERFLOW\">EOVERFLOW</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* convert the path to a device */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#lookup_bdev\">lookup_bdev</a>(<a class=\"id\" href=\"#path\">path</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#bdev\">bdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_dev\">bd_dev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdput\">bdput</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dd\">dd</a> = <a class=\"id\" href=\"#find_device\">find_device</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#devices\">devices</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dd\">dd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dd\">dd</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#dd\">dd</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dd\">dd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#open_dev\">open_dev</a>(<a class=\"id\" href=\"#dd\">dd</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#md\">md</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dd\">dd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#format_dev_t\">format_dev_t</a>(<a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#count\">count</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#devices\">devices</a>);", 
"", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#mode\">mode</a> != (<a class=\"id\" href=\"#mode\">mode</a> | <a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#mode\">mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#upgrade_mode\">upgrade_mode</a>(<a class=\"id\" href=\"#dd\">dd</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#md\">md</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#result\">result</a> = &amp;<a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns the minimum that is _not_ zero, unless both are zero.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#min_not_zero\">min_not_zero</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#r\">r</a>) (<a class=\"id\" href=\"#l\">l</a> == 0) ? <a class=\"id\" href=\"#r\">r</a> : ((<a class=\"id\" href=\"#r\">r</a> == 0) ? <a class=\"id\" href=\"#l\">l</a> : <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#r\">r</a>))", 
"", 
"int <a class=\"id\" href=\"#dm_set_device_limits\">dm_set_device_limits</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, struct <a class=\"id\" href=\"#dm_dev\">dm_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#len\">len</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#queue_limits\">queue_limits</a> *<a class=\"id\" href=\"#limits\">limits</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#bdev_get_queue\">bdev_get_queue</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#b\">b</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#q\">q</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN\">DMWARN</a>(\"%s: Cannot set limits for nonexistent device %s\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dm_device_name\">dm_device_name</a>(<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#md\">md</a>), <a class=\"id\" href=\"#bdevname\">bdevname</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#b\">b</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev_stack_limits\">bdev_stack_limits</a>(<a class=\"id\" href=\"#limits\">limits</a>, <a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#start\">start</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN\">DMWARN</a>(\"%s: adding target device %s caused an alignment inconsistency: \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"physical_block_size=%u, logical_block_size=%u, \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"alignment_offset=%u, start=%llu\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dm_device_name\">dm_device_name</a>(<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#md\">md</a>), <a class=\"id\" href=\"#bdevname\">bdevname</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#b\">b</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#physical_block_size\">physical_block_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#logical_block_size\">logical_block_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#alignment_offset\">alignment_offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long) <a class=\"id\" href=\"#start\">start</a> << <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check if merge fn is supported.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If not we'll force DM to use PAGE_SIZE or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * smaller I/O, just to be safe.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#merge_bvec_fn\">merge_bvec_fn</a> && !<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#merge\">merge</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limits\">limits</a>-><a class=\"id\" href=\"#max_sectors\">max_sectors</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_not_zero\">min_not_zero</a>(<a class=\"id\" href=\"#limits\">limits</a>-><a class=\"id\" href=\"#max_sectors\">max_sectors</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     (unsigned int) (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> >> 9));", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#dm_set_device_limits\">dm_set_device_limits</a>);", 
"", 
"int <a class=\"id\" href=\"#dm_get_device\">dm_get_device</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, const char *<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#dm_dev\">dm_dev</a> **<a class=\"id\" href=\"#result\">result</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__table_get_device\">__table_get_device</a>(<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#result\">result</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Decrement a devices use count and remove it if necessary.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dm_put_device\">dm_put_device</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, struct <a class=\"id\" href=\"#dm_dev\">dm_dev</a> *<a class=\"id\" href=\"#d\">d</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_dev_internal\">dm_dev_internal</a> *<a class=\"id\" href=\"#dd\">dd</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#d\">d</a>, struct <a class=\"id\" href=\"#dm_dev_internal\">dm_dev_internal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#dm_dev\">dm_dev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#count\">count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#close_dev\">close_dev</a>(<a class=\"id\" href=\"#dd\">dd</a>, <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#md\">md</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dd\">dd</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Checks to see if the target joins onto the end of the table.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#adjoin\">adjoin</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#table\">table</a>, struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#prev\">prev</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#num_targets\">num_targets</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return !<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#begin\">begin</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = &amp;<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#targets\">targets</a>[<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#num_targets\">num_targets</a> - 1];", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#begin\">begin</a> == (<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#begin\">begin</a> + <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#len\">len</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Used to dynamically allocate the arg array.</span>", 
"<span class=\"comment\"> */</span>", 
"static char **<a class=\"id\" href=\"#realloc_argv\">realloc_argv</a>(unsigned *<a class=\"id\" href=\"#array_size\">array_size</a>, char **<a class=\"id\" href=\"#old_argv\">old_argv</a>)", 
"{", 
"<span class=\"ts\"/>char **<a class=\"id\" href=\"#argv\">argv</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#new_size\">new_size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_size\">new_size</a> = *<a class=\"id\" href=\"#array_size\">array_size</a> ? *<a class=\"id\" href=\"#array_size\">array_size</a> * 2 : 64;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#argv\">argv</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#new_size\">new_size</a> * sizeof(*<a class=\"id\" href=\"#argv\">argv</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#argv\">argv</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#argv\">argv</a>, <a class=\"id\" href=\"#old_argv\">old_argv</a>, *<a class=\"id\" href=\"#array_size\">array_size</a> * sizeof(*<a class=\"id\" href=\"#argv\">argv</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#array_size\">array_size</a> = <a class=\"id\" href=\"#new_size\">new_size</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#old_argv\">old_argv</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#argv\">argv</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Destructively splits up the argument list to pass to ctr.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dm_split_args\">dm_split_args</a>(int *<a class=\"id\" href=\"#argc\">argc</a>, char ***<a class=\"id\" href=\"#argvp\">argvp</a>, char *<a class=\"id\" href=\"#input\">input</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#start\">start</a>, *<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#input\">input</a>, *<a class=\"id\" href=\"#out\">out</a>, **<a class=\"id\" href=\"#argv\">argv</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#array_size\">array_size</a> = 0;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#argc\">argc</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#input\">input</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#argvp\">argvp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#argv\">argv</a> = <a class=\"id\" href=\"#realloc_argv\">realloc_argv</a>(&amp;<a class=\"id\" href=\"#array_size\">array_size</a>, <a class=\"id\" href=\"#argv\">argv</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#argv\">argv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Skip whitespace */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#skip_spaces\">skip_spaces</a>(<a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"comment\">/* success, we hit the end */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 'out' is used to remove any back-quotes */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#out\">out</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (*<a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Everything apart from '\\0' can be quoted */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#end\">end</a> == '\\\\' && *(<a class=\"id\" href=\"#end\">end</a> + 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#out\">out</a>++ = *(<a class=\"id\" href=\"#end\">end</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#isspace\">isspace</a>(*<a class=\"id\" href=\"#end\">end</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"comment\">/* end of token */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#out\">out</a>++ = *<a class=\"id\" href=\"#end\">end</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* have we already filled the array ? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#argc\">argc</a> + 1) &gt; <a class=\"id\" href=\"#array_size\">array_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#argv\">argv</a> = <a class=\"id\" href=\"#realloc_argv\">realloc_argv</a>(&amp;<a class=\"id\" href=\"#array_size\">array_size</a>, <a class=\"id\" href=\"#argv\">argv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#argv\">argv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we know this is whitespace */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* terminate the string and put it in the array */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#out\">out</a> = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#argv\">argv</a>[*<a class=\"id\" href=\"#argc\">argc</a>] = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#argc\">argc</a>)++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#argvp\">argvp</a> = <a class=\"id\" href=\"#argv\">argv</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Impose necessary and sufficient conditions on a devices's table such</span>", 
"<span class=\"comment\"> * that any incoming bio which respects its logical_block_size can be</span>", 
"<span class=\"comment\"> * processed successfully.  If it falls across the boundary between</span>", 
"<span class=\"comment\"> * two or more targets, the size of each piece it gets split into must</span>", 
"<span class=\"comment\"> * be compatible with the logical_block_size of the target processing it.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#validate_hardware_logical_block_alignment\">validate_hardware_logical_block_alignment</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#table\">table</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#queue_limits\">queue_limits</a> *<a class=\"id\" href=\"#limits\">limits</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This function uses arithmetic modulo the logical_block_size</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (in units of 512-byte sectors).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#device_logical_block_size_sects\">device_logical_block_size_sects</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limits\">limits</a>-><a class=\"id\" href=\"#logical_block_size\">logical_block_size</a> >> <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Offset of the start of the next table entry, mod logical_block_size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#next_target_start\">next_target_start</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Given an aligned bio that extends beyond the end of a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * target, how many sectors must the next target handle?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#remaining\">remaining</a> = 0;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#ti\">ti</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#queue_limits\">queue_limits</a> <a class=\"id\" href=\"#ti_limits\">ti_limits</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check each entry in the table in turn.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#dm_table_get_num_targets\">dm_table_get_num_targets</a>(<a class=\"id\" href=\"#table\">table</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a> = <a class=\"id\" href=\"#dm_table_get_target\">dm_table_get_target</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#i\">i</a>++);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_set_default_limits\">blk_set_default_limits</a>(&amp;<a class=\"id\" href=\"#ti_limits\">ti_limits</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* combine all target devices' limits */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#iterate_devices\">iterate_devices</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#iterate_devices\">iterate_devices</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#dm_set_device_limits\">dm_set_device_limits</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#ti_limits\">ti_limits</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the remaining sectors fall entirely within this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * table entry are they compatible with its logical_block_size?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#remaining\">remaining</a> &lt; <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#len\">len</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#remaining\">remaining</a> &amp; ((<a class=\"id\" href=\"#ti_limits\">ti_limits</a>.<a class=\"id\" href=\"#logical_block_size\">logical_block_size</a> >>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a>) - 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"comment\">/* Error */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_target_start\">next_target_start</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    (unsigned short) ((<a class=\"id\" href=\"#next_target_start\">next_target_start</a> + <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#len\">len</a>) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      (<a class=\"id\" href=\"#device_logical_block_size_sects\">device_logical_block_size_sects</a> - 1));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remaining\">remaining</a> = <a class=\"id\" href=\"#next_target_start\">next_target_start</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#device_logical_block_size_sects\">device_logical_block_size_sects</a> - <a class=\"id\" href=\"#next_target_start\">next_target_start</a> : 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#remaining\">remaining</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN\">DMWARN</a>(\"%s: table line %u (start sect %llu len %llu) \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"not aligned to h/w logical block size %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dm_device_name\">dm_device_name</a>(<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#md\">md</a>), <a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long) <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#begin\">begin</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long) <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#limits\">limits</a>-><a class=\"id\" href=\"#logical_block_size\">logical_block_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#dm_table_add_target\">dm_table_add_target</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>, const char *<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#len\">len</a>, char *<a class=\"id\" href=\"#params\">params</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>, <a class=\"id\" href=\"#argc\">argc</a>;", 
"<span class=\"ts\"/>char **<a class=\"id\" href=\"#argv\">argv</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#tgt\">tgt</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#check_space\">check_space</a>(<a class=\"id\" href=\"#t\">t</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tgt\">tgt</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#targets\">targets</a> + <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_targets\">num_targets</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#tgt\">tgt</a>, 0, sizeof(*<a class=\"id\" href=\"#tgt\">tgt</a>));", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMERR\">DMERR</a>(\"%s: zero-length target\", <a class=\"id\" href=\"#dm_device_name\">dm_device_name</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#md\">md</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#dm_get_target_type\">dm_get_target_type</a>(<a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMERR\">DMERR</a>(\"%s: %s: unknown target type\", <a class=\"id\" href=\"#dm_device_name\">dm_device_name</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#md\">md</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#begin\">begin</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#error\">error</a> = \"Unknown error\";", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Does this target adjoin the previous one ?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#adjoin\">adjoin</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#tgt\">tgt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#error\">error</a> = \"Gap in table\";", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#dm_split_args\">dm_split_args</a>(&amp;<a class=\"id\" href=\"#argc\">argc</a>, &amp;<a class=\"id\" href=\"#argv\">argv</a>, <a class=\"id\" href=\"#params\">params</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#error\">error</a> = \"couldn't split parameters (insufficient memory)\";", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#ctr\">ctr</a>(<a class=\"id\" href=\"#tgt\">tgt</a>, <a class=\"id\" href=\"#argc\">argc</a>, <a class=\"id\" href=\"#argv\">argv</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#argv\">argv</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#highs\">highs</a>[<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_targets\">num_targets</a>++] = <a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#begin\">begin</a> + <a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#len\">len</a> - 1;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#num_discard_requests\">num_discard_requests</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#discards_supported\">discards_supported</a> = 0;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#bad\">bad</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMERR\">DMERR</a>(\"%s: %s: %s\", <a class=\"id\" href=\"#dm_device_name\">dm_device_name</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#md\">md</a>), <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_put_target_type\">dm_put_target_type</a>(<a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#dm_table_set_type\">dm_table_set_type</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#bio_based\">bio_based</a> = 0, <a class=\"id\" href=\"#request_based\">request_based</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#tgt\">tgt</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_dev_internal\">dm_dev_internal</a> *<a class=\"id\" href=\"#dd\">dd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#devices\">devices</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_targets\">num_targets</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tgt\">tgt</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#targets\">targets</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dm_target_request_based\">dm_target_request_based</a>(<a class=\"id\" href=\"#tgt\">tgt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request_based\">request_based</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_based\">bio_based</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_based\">bio_based</a> && <a class=\"id\" href=\"#request_based\">request_based</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN\">DMWARN</a>(\"Inconsistent table: different target types\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \" can't be mixed up\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_based\">bio_based</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We must use this table as bio-based */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#DM_TYPE_BIO_BASED\">DM_TYPE_BIO_BASED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#request_based\">request_based</a>); <span class=\"comment\">/* No targets in this table */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Non-request-stackable devices can't be used for request-based dm */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devices\">devices</a> = <a class=\"id\" href=\"#dm_table_get_devices\">dm_table_get_devices</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dd\">dd</a>, <a class=\"id\" href=\"#devices\">devices</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#blk_queue_stackable\">blk_queue_stackable</a>(<a class=\"id\" href=\"#bdev_get_queue\">bdev_get_queue</a>(<a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN\">DMWARN</a>(\"table load rejected: including\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \" non-request-stackable devices\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Request-based dm supports only tables that have a single target now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To support multiple targets, request splitting support is needed,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and that needs lots of changes in the block-layer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (e.g. request completion process for partial completion.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_targets\">num_targets</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN\">DMWARN</a>(\"Request-based dm doesn't support multiple targets yet\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#DM_TYPE_REQUEST_BASED\">DM_TYPE_REQUEST_BASED</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"unsigned <a class=\"id\" href=\"#dm_table_get_type\">dm_table_get_type</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#type\">type</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#dm_table_request_based\">dm_table_request_based</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dm_table_get_type\">dm_table_get_type</a>(<a class=\"id\" href=\"#t\">t</a>) == <a class=\"id\" href=\"#DM_TYPE_REQUEST_BASED\">DM_TYPE_REQUEST_BASED</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#dm_table_alloc_md_mempools\">dm_table_alloc_md_mempools</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#dm_table_get_type\">dm_table_get_type</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#DM_TYPE_NONE\">DM_TYPE_NONE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN\">DMWARN</a>(\"no table type is set, can't allocate mempools\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#mempools\">mempools</a> = <a class=\"id\" href=\"#dm_alloc_md_mempools\">dm_alloc_md_mempools</a>(<a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#mempools\">mempools</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#dm_table_free_md_mempools\">dm_table_free_md_mempools</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_free_md_mempools\">dm_free_md_mempools</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#mempools\">mempools</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#mempools\">mempools</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#dm_md_mempools\">dm_md_mempools</a> *<a class=\"id\" href=\"#dm_table_get_md_mempools\">dm_table_get_md_mempools</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#mempools\">mempools</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#setup_indexes\">setup_indexes</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#total\">total</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> *<a class=\"id\" href=\"#indexes\">indexes</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* allocate the space for *all* the indexes */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#depth\">depth</a> - 2; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#counts\">counts</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#dm_div_up\">dm_div_up</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#counts\">counts</a>[<a class=\"id\" href=\"#i\">i</a> + 1], <a class=\"id\" href=\"#CHILDREN_PER_NODE\">CHILDREN_PER_NODE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a> += <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#counts\">counts</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#indexes\">indexes</a> = (<a class=\"id\" href=\"#sector_t\">sector_t</a> *) <a class=\"id\" href=\"#dm_vcalloc\">dm_vcalloc</a>(<a class=\"id\" href=\"#total\">total</a>, (unsigned long) <a class=\"id\" href=\"#NODE_SIZE\">NODE_SIZE</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#indexes\">indexes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set up internal nodes, bottom-up */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#depth\">depth</a> - 2; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#index\">index</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#indexes\">indexes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#indexes\">indexes</a> += (<a class=\"id\" href=\"#KEYS_PER_NODE\">KEYS_PER_NODE</a> * <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#counts\">counts</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_btree_index\">setup_btree_index</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Builds the btree to index the map.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#dm_table_build_index\">dm_table_build_index</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a> = 0;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#leaf_nodes\">leaf_nodes</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* how many indexes will the btree have ? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#leaf_nodes\">leaf_nodes</a> = <a class=\"id\" href=\"#dm_div_up\">dm_div_up</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_targets\">num_targets</a>, <a class=\"id\" href=\"#KEYS_PER_NODE\">KEYS_PER_NODE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#depth\">depth</a> = 1 + <a class=\"id\" href=\"#int_log\">int_log</a>(<a class=\"id\" href=\"#leaf_nodes\">leaf_nodes</a>, <a class=\"id\" href=\"#CHILDREN_PER_NODE\">CHILDREN_PER_NODE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* leaf layer has already been set up */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#counts\">counts</a>[<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#depth\">depth</a> - 1] = <a class=\"id\" href=\"#leaf_nodes\">leaf_nodes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#index\">index</a>[<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#depth\">depth</a> - 1] = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#highs\">highs</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#depth\">depth</a> >= 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#setup_indexes\">setup_indexes</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Register the mapped device for blk_integrity support if</span>", 
"<span class=\"comment\"> * the underlying devices support it.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#dm_table_prealloc_integrity\">dm_table_prealloc_integrity</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>, struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#devices\">devices</a> = <a class=\"id\" href=\"#dm_table_get_devices\">dm_table_get_devices</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_dev_internal\">dm_dev_internal</a> *<a class=\"id\" href=\"#dd\">dd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dd\">dd</a>, <a class=\"id\" href=\"#devices\">devices</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev_get_integrity\">bdev_get_integrity</a>(<a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#blk_integrity_register\">blk_integrity_register</a>(<a class=\"id\" href=\"#dm_disk\">dm_disk</a>(<a class=\"id\" href=\"#md\">md</a>), <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Prepares the table for use by building the indices,</span>", 
"<span class=\"comment\"> * setting the type, and allocating mempools.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dm_table_complete\">dm_table_complete</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#dm_table_set_type\">dm_table_set_type</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMERR\">DMERR</a>(\"unable to set table type\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#dm_table_build_index\">dm_table_build_index</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMERR\">DMERR</a>(\"unable to build btrees\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#dm_table_prealloc_integrity\">dm_table_prealloc_integrity</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#md\">md</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMERR\">DMERR</a>(\"could not register integrity profile.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#dm_table_alloc_md_mempools\">dm_table_alloc_md_mempools</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMERR\">DMERR</a>(\"unable to allocate mempools\");", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#_event_lock\">_event_lock</a>);", 
"void <a class=\"id\" href=\"#dm_table_event_callback\">dm_table_event_callback</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     void (*<a class=\"id\" href=\"#fn\">fn</a>)(void *), void *<a class=\"id\" href=\"#context\">context</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#_event_lock\">_event_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#event_fn\">event_fn</a> = <a class=\"id\" href=\"#fn\">fn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#event_context\">event_context</a> = <a class=\"id\" href=\"#context\">context</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#_event_lock\">_event_lock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#dm_table_event\">dm_table_event</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * You can no longer call dm_table_event() from interrupt</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * context, use a bottom half instead.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#_event_lock\">_event_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#event_fn\">event_fn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#event_fn\">event_fn</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#event_context\">event_context</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#_event_lock\">_event_lock</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#dm_table_get_size\">dm_table_get_size</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_targets\">num_targets</a> ? (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#highs\">highs</a>[<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_targets\">num_targets</a> - 1] + 1) : 0;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#dm_table_get_target\">dm_table_get_target</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>, unsigned int <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> >= <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_targets\">num_targets</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#targets\">targets</a> + <a class=\"id\" href=\"#index\">index</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Search the btree for the correct target.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller should check returned pointer with dm_target_is_valid()</span>", 
"<span class=\"comment\"> * to trap I/O beyond end of device.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#dm_table_find_target\">dm_table_find_target</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a> = 0, <a class=\"id\" href=\"#k\">k</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#l\">l</a> = 0; <a class=\"id\" href=\"#l\">l</a> &lt; <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#depth\">depth</a>; <a class=\"id\" href=\"#l\">l</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#get_child\">get_child</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#k\">k</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#get_node\">get_node</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#KEYS_PER_NODE\">KEYS_PER_NODE</a>; <a class=\"id\" href=\"#k\">k</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>[<a class=\"id\" href=\"#k\">k</a>] >= <a class=\"id\" href=\"#sector\">sector</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#targets\">targets</a>[(<a class=\"id\" href=\"#KEYS_PER_NODE\">KEYS_PER_NODE</a> * <a class=\"id\" href=\"#n\">n</a>) + <a class=\"id\" href=\"#k\">k</a>];", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Establish the new table's queue_limits and validate them.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dm_calculate_queue_limits\">dm_calculate_queue_limits</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#table\">table</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#queue_limits\">queue_limits</a> *<a class=\"id\" href=\"#limits\">limits</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#ti\">ti</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#queue_limits\">queue_limits</a> <a class=\"id\" href=\"#ti_limits\">ti_limits</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_set_default_limits\">blk_set_default_limits</a>(<a class=\"id\" href=\"#limits\">limits</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#dm_table_get_num_targets\">dm_table_get_num_targets</a>(<a class=\"id\" href=\"#table\">table</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_set_default_limits\">blk_set_default_limits</a>(&amp;<a class=\"id\" href=\"#ti_limits\">ti_limits</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a> = <a class=\"id\" href=\"#dm_table_get_target\">dm_table_get_target</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#i\">i</a>++);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#iterate_devices\">iterate_devices</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#combine_limits\">combine_limits</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Combine queue limits of all the devices this target uses.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#iterate_devices\">iterate_devices</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#dm_set_device_limits\">dm_set_device_limits</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#ti_limits\">ti_limits</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Set I/O hints portion of queue limits */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#io_hints\">io_hints</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#io_hints\">io_hints</a>(<a class=\"id\" href=\"#ti\">ti</a>, &amp;<a class=\"id\" href=\"#ti_limits\">ti_limits</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Check each device area is consistent with the target's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * overall queue limits.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#iterate_devices\">iterate_devices</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#device_area_is_invalid\">device_area_is_invalid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#ti_limits\">ti_limits</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<a class=\"id\" href=\"#combine_limits\">combine_limits</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Merge this target's queue limits into the overall limits</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for the table.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_stack_limits\">blk_stack_limits</a>(<a class=\"id\" href=\"#limits\">limits</a>, &amp;<a class=\"id\" href=\"#ti_limits\">ti_limits</a>, 0) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN\">DMWARN</a>(\"%s: adding target device \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"(start sect %llu len %llu) \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"caused an alignment inconsistency\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dm_device_name\">dm_device_name</a>(<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#md\">md</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long) <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#begin\">begin</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long) <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#validate_hardware_logical_block_alignment\">validate_hardware_logical_block_alignment</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#limits\">limits</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set the integrity profile for this device if all devices used have</span>", 
"<span class=\"comment\"> * matching profiles.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dm_table_set_integrity\">dm_table_set_integrity</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#devices\">devices</a> = <a class=\"id\" href=\"#dm_table_get_devices\">dm_table_get_devices</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_dev_internal\">dm_dev_internal</a> *<a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#dd\">dd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#blk_get_integrity\">blk_get_integrity</a>(<a class=\"id\" href=\"#dm_disk\">dm_disk</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#md\">md</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dd\">dd</a>, <a class=\"id\" href=\"#devices\">devices</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#blk_integrity_compare\">blk_integrity_compare</a>(<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN\">DMWARN</a>(\"%s: integrity not set: %s and %s mismatch\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dm_device_name\">dm_device_name</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#md\">md</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>-><a class=\"id\" href=\"#disk_name\">disk_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>-><a class=\"id\" href=\"#disk_name\">disk_name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_integrity\">no_integrity</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#dd\">dd</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#prev\">prev</a> || !<a class=\"id\" href=\"#bdev_get_integrity\">bdev_get_integrity</a>(<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_integrity\">no_integrity</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_integrity_register\">blk_integrity_register</a>(<a class=\"id\" href=\"#dm_disk\">dm_disk</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#md\">md</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#bdev_get_integrity\">bdev_get_integrity</a>(<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a>));", 
"", 
"<span class=\"ts\"/>return;", 
"", 
"<a class=\"id\" href=\"#no_integrity\">no_integrity</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_integrity_register\">blk_integrity_register</a>(<a class=\"id\" href=\"#dm_disk\">dm_disk</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#md\">md</a>), <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"void <a class=\"id\" href=\"#dm_table_set_restrictions\">dm_table_set_restrictions</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>, struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#queue_limits\">queue_limits</a> *<a class=\"id\" href=\"#limits\">limits</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Copy table's limits to the DM device's request_queue</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a> = *<a class=\"id\" href=\"#limits\">limits</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#limits\">limits</a>-><a class=\"id\" href=\"#no_cluster\">no_cluster</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_clear_unlocked\">queue_flag_clear_unlocked</a>(<a class=\"id\" href=\"#QUEUE_FLAG_CLUSTER\">QUEUE_FLAG_CLUSTER</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_set_unlocked\">queue_flag_set_unlocked</a>(<a class=\"id\" href=\"#QUEUE_FLAG_CLUSTER\">QUEUE_FLAG_CLUSTER</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dm_table_supports_discards\">dm_table_supports_discards</a>(<a class=\"id\" href=\"#t\">t</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_clear_unlocked\">queue_flag_clear_unlocked</a>(<a class=\"id\" href=\"#QUEUE_FLAG_DISCARD\">QUEUE_FLAG_DISCARD</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_set_unlocked\">queue_flag_set_unlocked</a>(<a class=\"id\" href=\"#QUEUE_FLAG_DISCARD\">QUEUE_FLAG_DISCARD</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_table_set_integrity\">dm_table_set_integrity</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * QUEUE_FLAG_STACKABLE must be set after all queue settings are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * visible to other CPUs because, once the flag is set, incoming bios</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are processed by request-based dm, which refers to the queue</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * settings.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Until the flag set, bios are passed to bio-based dm and queued to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * md-&gt;deferred where queue settings are not needed yet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Those bios are passed to request-based dm at the resume time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dm_table_request_based\">dm_table_request_based</a>(<a class=\"id\" href=\"#t\">t</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_set_unlocked\">queue_flag_set_unlocked</a>(<a class=\"id\" href=\"#QUEUE_FLAG_STACKABLE\">QUEUE_FLAG_STACKABLE</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"}", 
"", 
"unsigned int <a class=\"id\" href=\"#dm_table_get_num_targets\">dm_table_get_num_targets</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_targets\">num_targets</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#dm_table_get_devices\">dm_table_get_devices</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#devices\">devices</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#dm_table_get_mode\">dm_table_get_mode</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#mode\">mode</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#suspend_targets\">suspend_targets</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>, unsigned <a class=\"id\" href=\"#postsuspend\">postsuspend</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_targets\">num_targets</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#targets\">targets</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#postsuspend\">postsuspend</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#postsuspend\">postsuspend</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#postsuspend\">postsuspend</a>(<a class=\"id\" href=\"#ti\">ti</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#presuspend\">presuspend</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#presuspend\">presuspend</a>(<a class=\"id\" href=\"#ti\">ti</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#dm_table_presuspend_targets\">dm_table_presuspend_targets</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#t\">t</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#suspend_targets\">suspend_targets</a>(<a class=\"id\" href=\"#t\">t</a>, 0);", 
"}", 
"", 
"void <a class=\"id\" href=\"#dm_table_postsuspend_targets\">dm_table_postsuspend_targets</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#t\">t</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#suspend_targets\">suspend_targets</a>(<a class=\"id\" href=\"#t\">t</a>, 1);", 
"}", 
"", 
"int <a class=\"id\" href=\"#dm_table_resume_targets\">dm_table_resume_targets</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#r\">r</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_targets\">num_targets</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#targets\">targets</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#preresume\">preresume</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#preresume\">preresume</a>(<a class=\"id\" href=\"#ti\">ti</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_targets\">num_targets</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#targets\">targets</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#resume\">resume</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#resume\">resume</a>(<a class=\"id\" href=\"#ti\">ti</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#dm_table_any_congested\">dm_table_any_congested</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>, int <a class=\"id\" href=\"#bdi_bits\">bdi_bits</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_dev_internal\">dm_dev_internal</a> *<a class=\"id\" href=\"#dd\">dd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#devices\">devices</a> = <a class=\"id\" href=\"#dm_table_get_devices\">dm_table_get_devices</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dd\">dd</a>, <a class=\"id\" href=\"#devices\">devices</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#bdev_get_queue\">bdev_get_queue</a>(<a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#b\">b</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> |= <a class=\"id\" href=\"#bdi_congested\">bdi_congested</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>, <a class=\"id\" href=\"#bdi_bits\">bdi_bits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN_LIMIT\">DMWARN_LIMIT</a>(\"%s: any_congested: nonexistent device %s\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#dm_device_name\">dm_device_name</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#md\">md</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#bdevname\">bdevname</a>(<a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#b\">b</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#dm_table_any_busy_target\">dm_table_any_busy_target</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_targets\">num_targets</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#targets\">targets</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#busy\">busy</a> && <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#busy\">busy</a>(<a class=\"id\" href=\"#ti\">ti</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#dm_table_unplug_all\">dm_table_unplug_all</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_dev_internal\">dm_dev_internal</a> *<a class=\"id\" href=\"#dd\">dd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#devices\">devices</a> = <a class=\"id\" href=\"#dm_table_get_devices\">dm_table_get_devices</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dd\">dd</a>, <a class=\"id\" href=\"#devices\">devices</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#bdev_get_queue\">bdev_get_queue</a>(<a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#b\">b</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_unplug\">blk_unplug</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN_LIMIT\">DMWARN_LIMIT</a>(\"%s: Cannot unplug nonexistent device %s\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#dm_device_name\">dm_device_name</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#md\">md</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#bdevname\">bdevname</a>(<a class=\"id\" href=\"#dd\">dd</a>-><a class=\"id\" href=\"#dm_dev\">dm_dev</a>.<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#b\">b</a>));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#dm_table_get_md\">dm_table_get_md</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#md\">md</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#device_discard_capable\">device_discard_capable</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, struct <a class=\"id\" href=\"#dm_dev\">dm_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#len\">len</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#bdev_get_queue\">bdev_get_queue</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bdev\">bdev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#q\">q</a> && <a class=\"id\" href=\"#blk_queue_discard\">blk_queue_discard</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#dm_table_supports_discards\">dm_table_supports_discards</a>(struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#discards_supported\">discards_supported</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ensure that at least one underlying device supports discards.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * t-&gt;devices includes internal dm devices such as mirror logs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so we need to use iterate_devices here, which targets</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * supporting discard must provide.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#dm_table_get_num_targets\">dm_table_get_num_targets</a>(<a class=\"id\" href=\"#t\">t</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a> = <a class=\"id\" href=\"#dm_table_get_target\">dm_table_get_target</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#i\">i</a>++);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#iterate_devices\">iterate_devices</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#iterate_devices\">iterate_devices</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#device_discard_capable\">device_discard_capable</a>, <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dm_vcalloc\">dm_vcalloc</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dm_get_device\">dm_get_device</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dm_put_device\">dm_put_device</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dm_table_event\">dm_table_event</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dm_table_get_size\">dm_table_get_size</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dm_table_get_mode\">dm_table_get_mode</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dm_table_get_md\">dm_table_get_md</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dm_table_put\">dm_table_put</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dm_table_get\">dm_table_get</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dm_table_unplug_all\">dm_table_unplug_all</a>);", 
];
xr_frag_insert('l/4b/fba19e6f011ada941deb3aad62689918c8698b.xr', __xr_tmp);
