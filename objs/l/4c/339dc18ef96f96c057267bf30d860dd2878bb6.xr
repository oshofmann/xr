var __xr_tmp = [
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: utmath - Integer math support routines</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_UTILITIES\">ACPI_UTILITIES</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"utmath\")", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Support for double-precision integer divide.  This code is included here</span>", 
"<span class=\"comment\"> * in order to support kernel environments where the double-precision math</span>", 
"<span class=\"comment\"> * library is not available.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ACPI_USE_NATIVE_DIVIDE\">ACPI_USE_NATIVE_DIVIDE</a>", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_short_divide</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Dividend            - 64-bit dividend</span>", 
"<span class=\"comment\"> *              Divisor             - 32-bit divisor</span>", 
"<span class=\"comment\"> *              out_quotient        - Pointer to where the quotient is returned</span>", 
"<span class=\"comment\"> *              out_remainder       - Pointer to where the remainder is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status (Checks for divide-by-zero)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Perform a short (maximum 64 bits divided by 32 bits)</span>", 
"<span class=\"comment\"> *              divide and modulo.  The result is a 64-bit quotient and a</span>", 
"<span class=\"comment\"> *              32-bit remainder.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ut_short_divide\">acpi_ut_short_divide</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#dividend\">dividend</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#divisor\">divisor</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#out_quotient\">out_quotient</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#out_remainder\">out_remainder</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#uint64_overlay\">uint64_overlay</a> <a class=\"id\" href=\"#dividend_ovl\">dividend_ovl</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#uint64_overlay\">uint64_overlay</a> <a class=\"id\" href=\"#quotient\">quotient</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#remainder32\">remainder32</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ut_short_divide\">ut_short_divide</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Always check for a zero divisor */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#divisor\">divisor</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Divide by zero\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_AML_DIVIDE_BY_ZERO\">AE_AML_DIVIDE_BY_ZERO</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dividend_ovl\">dividend_ovl</a>.<a class=\"id\" href=\"#full\">full</a> = <a class=\"id\" href=\"#dividend\">dividend</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The quotient is 64 bits, the remainder is always 32 bits,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and is generated by the second divide.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DIV_64_BY_32\">ACPI_DIV_64_BY_32</a>(0, <a class=\"id\" href=\"#dividend_ovl\">dividend_ovl</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#hi\">hi</a>, <a class=\"id\" href=\"#divisor\">divisor</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#quotient\">quotient</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#hi\">hi</a>, <a class=\"id\" href=\"#remainder32\">remainder32</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DIV_64_BY_32\">ACPI_DIV_64_BY_32</a>(<a class=\"id\" href=\"#remainder32\">remainder32</a>, <a class=\"id\" href=\"#dividend_ovl\">dividend_ovl</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#divisor\">divisor</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#quotient\">quotient</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#remainder32\">remainder32</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Return only what was requested */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#out_quotient\">out_quotient</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#out_quotient\">out_quotient</a> = <a class=\"id\" href=\"#quotient\">quotient</a>.<a class=\"id\" href=\"#full\">full</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#out_remainder\">out_remainder</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#out_remainder\">out_remainder</a> = <a class=\"id\" href=\"#remainder32\">remainder32</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_divide</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  in_dividend         - Dividend</span>", 
"<span class=\"comment\"> *              in_divisor          - Divisor</span>", 
"<span class=\"comment\"> *              out_quotient        - Pointer to where the quotient is returned</span>", 
"<span class=\"comment\"> *              out_remainder       - Pointer to where the remainder is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status (Checks for divide-by-zero)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Perform a divide and modulo.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ut_divide\">acpi_ut_divide</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#in_dividend\">in_dividend</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#in_divisor\">in_divisor</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#out_quotient\">out_quotient</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#out_remainder\">out_remainder</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#uint64_overlay\">uint64_overlay</a> <a class=\"id\" href=\"#dividend\">dividend</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#uint64_overlay\">uint64_overlay</a> <a class=\"id\" href=\"#divisor\">divisor</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#uint64_overlay\">uint64_overlay</a> <a class=\"id\" href=\"#quotient\">quotient</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#uint64_overlay\">uint64_overlay</a> <a class=\"id\" href=\"#remainder\">remainder</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#uint64_overlay\">uint64_overlay</a> <a class=\"id\" href=\"#normalized_dividend\">normalized_dividend</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#uint64_overlay\">uint64_overlay</a> <a class=\"id\" href=\"#normalized_divisor\">normalized_divisor</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#partial1\">partial1</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#uint64_overlay\">uint64_overlay</a> <a class=\"id\" href=\"#partial2\">partial2</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#uint64_overlay\">uint64_overlay</a> <a class=\"id\" href=\"#partial3\">partial3</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ut_divide\">ut_divide</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Always check for a zero divisor */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_divisor\">in_divisor</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Divide by zero\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_AML_DIVIDE_BY_ZERO\">AE_AML_DIVIDE_BY_ZERO</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#divisor\">divisor</a>.<a class=\"id\" href=\"#full\">full</a> = <a class=\"id\" href=\"#in_divisor\">in_divisor</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dividend\">dividend</a>.<a class=\"id\" href=\"#full\">full</a> = <a class=\"id\" href=\"#in_dividend\">in_dividend</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#divisor\">divisor</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#hi\">hi</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 1) Simplest case is where the divisor is 32 bits, we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * just do two divides</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remainder\">remainder</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#hi\">hi</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The quotient is 64 bits, the remainder is always 32 bits,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and is generated by the second divide.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DIV_64_BY_32\">ACPI_DIV_64_BY_32</a>(0, <a class=\"id\" href=\"#dividend\">dividend</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#hi\">hi</a>, <a class=\"id\" href=\"#divisor\">divisor</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#quotient\">quotient</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#hi\">hi</a>, <a class=\"id\" href=\"#partial1\">partial1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DIV_64_BY_32\">ACPI_DIV_64_BY_32</a>(<a class=\"id\" href=\"#partial1\">partial1</a>, <a class=\"id\" href=\"#dividend\">dividend</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#divisor\">divisor</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#quotient\">quotient</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#remainder\">remainder</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 2) The general case where the divisor is a full 64 bits</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is more difficult</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quotient\">quotient</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#hi\">hi</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#normalized_dividend\">normalized_dividend</a> = <a class=\"id\" href=\"#dividend\">dividend</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#normalized_divisor\">normalized_divisor</a> = <a class=\"id\" href=\"#divisor\">divisor</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Normalize the operands (shift until the divisor is &lt; 32 bits) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_SHIFT_RIGHT_64\">ACPI_SHIFT_RIGHT_64</a>(<a class=\"id\" href=\"#normalized_divisor\">normalized_divisor</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#hi\">hi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#normalized_divisor\">normalized_divisor</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_SHIFT_RIGHT_64\">ACPI_SHIFT_RIGHT_64</a>(<a class=\"id\" href=\"#normalized_dividend\">normalized_dividend</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#hi\">hi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#normalized_dividend\">normalized_dividend</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#normalized_divisor\">normalized_divisor</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#hi\">hi</a> != 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Partial divide */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DIV_64_BY_32\">ACPI_DIV_64_BY_32</a>(<a class=\"id\" href=\"#normalized_dividend\">normalized_dividend</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#hi\">hi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#normalized_dividend\">normalized_dividend</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#normalized_divisor\">normalized_divisor</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#quotient\">quotient</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#partial1\">partial1</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The quotient is always 32 bits, and simply requires adjustment.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The 64-bit remainder must be generated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial1\">partial1</a> = <a class=\"id\" href=\"#quotient\">quotient</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a> * <a class=\"id\" href=\"#divisor\">divisor</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#hi\">hi</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial2\">partial2</a>.<a class=\"id\" href=\"#full\">full</a> = (<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#quotient\">quotient</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a> * <a class=\"id\" href=\"#divisor\">divisor</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial3\">partial3</a>.<a class=\"id\" href=\"#full\">full</a> = (<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#partial2\">partial2</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#hi\">hi</a> + <a class=\"id\" href=\"#partial1\">partial1</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remainder\">remainder</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#hi\">hi</a> = <a class=\"id\" href=\"#partial3\">partial3</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remainder\">remainder</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a> = <a class=\"id\" href=\"#partial2\">partial2</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#partial3\">partial3</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#hi\">hi</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#partial3\">partial3</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a> >= <a class=\"id\" href=\"#dividend\">dividend</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#hi\">hi</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#partial3\">partial3</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a> == <a class=\"id\" href=\"#dividend\">dividend</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#hi\">hi</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#partial2\">partial2</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a> &gt; <a class=\"id\" href=\"#dividend\">dividend</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quotient\">quotient</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remainder\">remainder</a>.<a class=\"id\" href=\"#full\">full</a> -= <a class=\"id\" href=\"#divisor\">divisor</a>.<a class=\"id\" href=\"#full\">full</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quotient\">quotient</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remainder\">remainder</a>.<a class=\"id\" href=\"#full\">full</a> -= <a class=\"id\" href=\"#divisor\">divisor</a>.<a class=\"id\" href=\"#full\">full</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remainder\">remainder</a>.<a class=\"id\" href=\"#full\">full</a> = <a class=\"id\" href=\"#remainder\">remainder</a>.<a class=\"id\" href=\"#full\">full</a> - <a class=\"id\" href=\"#dividend\">dividend</a>.<a class=\"id\" href=\"#full\">full</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remainder\">remainder</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#hi\">hi</a> = (<a class=\"id\" href=\"#u32\">u32</a>) - ((<a class=\"id\" href=\"#s32\">s32</a>) <a class=\"id\" href=\"#remainder\">remainder</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#hi\">hi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remainder\">remainder</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a> = (<a class=\"id\" href=\"#u32\">u32</a>) - ((<a class=\"id\" href=\"#s32\">s32</a>) <a class=\"id\" href=\"#remainder\">remainder</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#remainder\">remainder</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#lo\">lo</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remainder\">remainder</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#hi\">hi</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Return only what was requested */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#out_quotient\">out_quotient</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#out_quotient\">out_quotient</a> = <a class=\"id\" href=\"#quotient\">quotient</a>.<a class=\"id\" href=\"#full\">full</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#out_remainder\">out_remainder</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#out_remainder\">out_remainder</a> = <a class=\"id\" href=\"#remainder\">remainder</a>.<a class=\"id\" href=\"#full\">full</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"#else", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_short_divide, acpi_ut_divide</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  See function headers above</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Native versions of the ut_divide functions. Use these if either</span>", 
"<span class=\"comment\"> *              1) The target is a 64-bit platform and therefore 64-bit</span>", 
"<span class=\"comment\"> *                 integer math is supported directly by the machine.</span>", 
"<span class=\"comment\"> *              2) The target is a 32-bit or 16-bit platform, and the</span>", 
"<span class=\"comment\"> *                 double-precision integer math library is available to</span>", 
"<span class=\"comment\"> *                 perform the divide.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ut_short_divide\">acpi_ut_short_divide</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#in_dividend\">in_dividend</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#divisor\">divisor</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#out_quotient\">out_quotient</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#out_remainder\">out_remainder</a>)", 
"{", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ut_short_divide\">ut_short_divide</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Always check for a zero divisor */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#divisor\">divisor</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Divide by zero\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_AML_DIVIDE_BY_ZERO\">AE_AML_DIVIDE_BY_ZERO</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Return only what was requested */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#out_quotient\">out_quotient</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#out_quotient\">out_quotient</a> = <a class=\"id\" href=\"#in_dividend\">in_dividend</a> / <a class=\"id\" href=\"#divisor\">divisor</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#out_remainder\">out_remainder</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#out_remainder\">out_remainder</a> = (<a class=\"id\" href=\"#u32\">u32</a>) (<a class=\"id\" href=\"#in_dividend\">in_dividend</a> % <a class=\"id\" href=\"#divisor\">divisor</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ut_divide\">acpi_ut_divide</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#in_dividend\">in_dividend</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#in_divisor\">in_divisor</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#out_quotient\">out_quotient</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#out_remainder\">out_remainder</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ut_divide\">ut_divide</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Always check for a zero divisor */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_divisor\">in_divisor</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Divide by zero\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_AML_DIVIDE_BY_ZERO\">AE_AML_DIVIDE_BY_ZERO</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Return only what was requested */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#out_quotient\">out_quotient</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#out_quotient\">out_quotient</a> = <a class=\"id\" href=\"#in_dividend\">in_dividend</a> / <a class=\"id\" href=\"#in_divisor\">in_divisor</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#out_remainder\">out_remainder</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#out_remainder\">out_remainder</a> = <a class=\"id\" href=\"#in_dividend\">in_dividend</a> % <a class=\"id\" href=\"#in_divisor\">in_divisor</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/4c/339dc18ef96f96c057267bf30d860dd2878bb6.xr', __xr_tmp);
