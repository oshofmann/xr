var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/drivers/firmware/memmap.c</span>", 
"<span class=\"comment\"> *  Copyright (C) 2008 SUSE LINUX Products GmbH</span>", 
"<span class=\"comment\"> *  by Bernhard Walle &lt;bernhard.walle@gmx.de&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License v2.0 as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#firmware\">firmware</a>-<a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Data types ------------------------------------------------------------------</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Firmware map entry. Because firmware memory maps are flat and not</span>", 
"<span class=\"comment\"> * hierarchical, it's ok to organise them in a linked list. No parent</span>", 
"<span class=\"comment\"> * information is necessary as for the resource tree.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#firmware_map_entry\">firmware_map_entry</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * start and end must be u64 rather than resource_size_t, because e820</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * resources can lie at addresses above 4G.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a>;<span class=\"ts\"/><span class=\"comment\">/* start of the memory range */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a>;<span class=\"ts\"/><span class=\"comment\">/* end of the memory range (incl.) */</span>", 
"<span class=\"ts\"/>const char<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#type\">type</a>;<span class=\"ts\"/><span class=\"comment\">/* type of the memory range */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;<span class=\"ts\"/><span class=\"comment\">/* entry for the linked list */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a>;   <span class=\"comment\">/* kobject for each entry */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Forward declarations --------------------------------------------------------</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#memmap_attr_show\">memmap_attr_show</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#attribute\">attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>);", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#start_show\">start_show</a>(struct <a class=\"id\" href=\"#firmware_map_entry\">firmware_map_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, char *<a class=\"id\" href=\"#buf\">buf</a>);", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#end_show\">end_show</a>(struct <a class=\"id\" href=\"#firmware_map_entry\">firmware_map_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, char *<a class=\"id\" href=\"#buf\">buf</a>);", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#type_show\">type_show</a>(struct <a class=\"id\" href=\"#firmware_map_entry\">firmware_map_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, char *<a class=\"id\" href=\"#buf\">buf</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Static data -----------------------------------------------------------------</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#memmap_attribute\">memmap_attribute</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#attribute\">attribute</a> <a class=\"id\" href=\"#attr\">attr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#show\">show</a>)(struct <a class=\"id\" href=\"#firmware_map_entry\">firmware_map_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, char *<a class=\"id\" href=\"#buf\">buf</a>);", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#memmap_attribute\">memmap_attribute</a> <a class=\"id\" href=\"#memmap_start_attr\">memmap_start_attr</a> = <a class=\"id\" href=\"#__ATTR_RO\">__ATTR_RO</a>(<a class=\"id\" href=\"#start\">start</a>);", 
"static struct <a class=\"id\" href=\"#memmap_attribute\">memmap_attribute</a> <a class=\"id\" href=\"#memmap_end_attr\">memmap_end_attr</a>   = <a class=\"id\" href=\"#__ATTR_RO\">__ATTR_RO</a>(<a class=\"id\" href=\"#end\">end</a>);", 
"static struct <a class=\"id\" href=\"#memmap_attribute\">memmap_attribute</a> <a class=\"id\" href=\"#memmap_type_attr\">memmap_type_attr</a>  = <a class=\"id\" href=\"#__ATTR_RO\">__ATTR_RO</a>(<a class=\"id\" href=\"#type\">type</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These are default attributes that are added for every memmap entry.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#attribute\">attribute</a> *<a class=\"id\" href=\"#def_attrs\">def_attrs</a>[] = {", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#memmap_start_attr\">memmap_start_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#memmap_end_attr\">memmap_end_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#memmap_type_attr\">memmap_type_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#sysfs_ops\">sysfs_ops</a> <a class=\"id\" href=\"#memmap_attr_ops\">memmap_attr_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a> = <a class=\"id\" href=\"#memmap_attr_show\">memmap_attr_show</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#kobj_type\">kobj_type</a> <a class=\"id\" href=\"#memmap_ktype\">memmap_ktype</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sysfs_ops\">sysfs_ops</a><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#memmap_attr_ops\">memmap_attr_ops</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#default_attrs\">default_attrs</a><span class=\"ts\"/>= <a class=\"id\" href=\"#def_attrs\">def_attrs</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Registration functions ------------------------------------------------------</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Firmware memory map entries. No locking is needed because the</span>", 
"<span class=\"comment\"> * firmware_map_add() and firmware_map_add_early() functions are called</span>", 
"<span class=\"comment\"> * in firmware initialisation code in one single thread of execution.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#map_entries\">map_entries</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * firmware_map_add_entry() - Does the real work to add a firmware memmap entry.</span>", 
"<span class=\"comment\"> * @start: Start of the memory range.</span>", 
"<span class=\"comment\"> * @end:   End of the memory range (inclusive).</span>", 
"<span class=\"comment\"> * @type:  Type of the memory range.</span>", 
"<span class=\"comment\"> * @entry: Pre-allocated (either kmalloc() or bootmem allocator), uninitialised</span>", 
"<span class=\"comment\"> *         entry.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Common implementation of firmware_map_add() and firmware_map_add_early()</span>", 
"<span class=\"comment\"> * which expects a pre-allocated struct firmware_map_entry.</span>", 
"<span class=\"comment\"> **/</span>", 
"static int <a class=\"id\" href=\"#firmware_map_add_entry\">firmware_map_add_entry</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#firmware_map_entry\">firmware_map_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_init\">kobject_init</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#memmap_ktype\">memmap_ktype</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#map_entries\">map_entries</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add memmap entry on sysfs</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#add_sysfs_fw_map_entry\">add_sysfs_fw_map_entry</a>(struct <a class=\"id\" href=\"#firmware_map_entry\">firmware_map_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#map_entries_nr\">map_entries_nr</a>;", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#kset\">kset</a> *<a class=\"id\" href=\"#mmap_kset\">mmap_kset</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mmap_kset\">mmap_kset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmap_kset\">mmap_kset</a> = <a class=\"id\" href=\"#kset_create_and_add\">kset_create_and_add</a>(\"memmap\", <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#firmware_kobj\">firmware_kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mmap_kset\">mmap_kset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#kobj\">kobj</a>.<a class=\"id\" href=\"#kset\">kset</a> = <a class=\"id\" href=\"#mmap_kset\">mmap_kset</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kobject_add\">kobject_add</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"%d\", <a class=\"id\" href=\"#map_entries_nr\">map_entries_nr</a>++))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"", 
];
xr_frag_insert('l/4c/340c6c679f93dd418e032478e3bcdabc30a3e5.xr', __xr_tmp);
