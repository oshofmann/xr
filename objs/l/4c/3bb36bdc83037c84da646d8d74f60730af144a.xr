var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/kernel/power/snapshot.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file provides system snapshot/restore functionality for swsusp.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 1998-2005 Pavel Machek &lt;pavel@ucw.cz&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2006 Rafael J. Wysocki &lt;rjw@sisk.pl&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPLv2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#version\">version</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#suspend\">suspend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm\">pm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#console\">console</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mmu_context\">mmu_context</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"power.h\"", 
"", 
"static int <a class=\"id\" href=\"#swsusp_page_is_free\">swsusp_page_is_free</a>(struct <a class=\"id\" href=\"#page\">page</a> *);", 
"static void <a class=\"id\" href=\"#swsusp_set_page_forbidden\">swsusp_set_page_forbidden</a>(struct <a class=\"id\" href=\"#page\">page</a> *);", 
"static void <a class=\"id\" href=\"#swsusp_unset_page_forbidden\">swsusp_unset_page_forbidden</a>(struct <a class=\"id\" href=\"#page\">page</a> *);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Preferred image size in bytes (tunable via /sys/power/image_size).</span>", 
"<span class=\"comment\"> * When it is set to N, swsusp will do its best to ensure the image</span>", 
"<span class=\"comment\"> * size will not exceed N bytes, but if that is impossible, it will</span>", 
"<span class=\"comment\"> * try to create the smallest image possible.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#image_size\">image_size</a> = 500 * 1024 * 1024;", 
"", 
"<span class=\"comment\">/* List of PBEs needed for restoring the pages that were allocated before</span>", 
"<span class=\"comment\"> * the suspend and included in the suspend image, but have also been</span>", 
"<span class=\"comment\"> * allocated by the \"resume\" kernel, so their contents cannot be written</span>", 
"<span class=\"comment\"> * directly to their \"original\" page frames.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#pbe\">pbe</a> *<a class=\"id\" href=\"#restore_pblist\">restore_pblist</a>;", 
"", 
"<span class=\"comment\">/* Pointer to an auxiliary buffer (1 page) */</span>", 
"static void *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@safe_needed - on resume, for storing the PBE list and the image,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>we can only use memory pages that do not conflict with the pages</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>used before suspend.  The unsafe pages have PageNosaveFree set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and we count them using unsafe_pages.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Each allocated image page is marked as PageNosave and PageNosaveFree</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>so that swsusp_free() can release it.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PG_ANY\">PG_ANY</a><span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PG_SAFE\">PG_SAFE</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PG_UNSAFE_CLEAR\">PG_UNSAFE_CLEAR</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PG_UNSAFE_KEEP\">PG_UNSAFE_KEEP</a><span class=\"ts\"/>0", 
"", 
"static unsigned int <a class=\"id\" href=\"#allocated_unsafe_pages\">allocated_unsafe_pages</a>;", 
"", 
"static void *<a class=\"id\" href=\"#get_image_page\">get_image_page</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, int <a class=\"id\" href=\"#safe_needed\">safe_needed</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = (void *)<a class=\"id\" href=\"#get_zeroed_page\">get_zeroed_page</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#safe_needed\">safe_needed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#res\">res</a> && <a class=\"id\" href=\"#swsusp_page_is_free\">swsusp_page_is_free</a>(<a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#res\">res</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The page is unsafe, mark it for swsusp_free() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_set_page_forbidden\">swsusp_set_page_forbidden</a>(<a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#res\">res</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#allocated_unsafe_pages\">allocated_unsafe_pages</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = (void *)<a class=\"id\" href=\"#get_zeroed_page\">get_zeroed_page</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_set_page_forbidden\">swsusp_set_page_forbidden</a>(<a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#res\">res</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_set_page_free\">swsusp_set_page_free</a>(<a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#res\">res</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#get_safe_page\">get_safe_page</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>return (unsigned long)<a class=\"id\" href=\"#get_image_page\">get_image_page</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#PG_SAFE\">PG_SAFE</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#alloc_image_page\">alloc_image_page</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_page\">alloc_page</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_set_page_forbidden\">swsusp_set_page_forbidden</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_set_page_free\">swsusp_set_page_free</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>free_image_page - free page represented by @addr, allocated with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>get_image_page (page flags set by it must be cleared)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#free_image_page\">free_image_page</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#clear_nosave_free\">clear_nosave_free</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#virt_addr_valid\">virt_addr_valid</a>(<a class=\"id\" href=\"#addr\">addr</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swsusp_unset_page_forbidden\">swsusp_unset_page_forbidden</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clear_nosave_free\">clear_nosave_free</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_unset_page_free\">swsusp_unset_page_free</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"<span class=\"comment\">/* struct linked_page is used to build chains of pages */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LINKED_PAGE_DATA_SIZE\">LINKED_PAGE_DATA_SIZE</a><span class=\"ts\"/>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - sizeof(void *))", 
"", 
"struct <a class=\"id\" href=\"#linked_page\">linked_page</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#linked_page\">linked_page</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#LINKED_PAGE_DATA_SIZE\">LINKED_PAGE_DATA_SIZE</a>];", 
"} <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#packed\">packed</a>));", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#free_list_of_pages\">free_list_of_pages</a>(struct <a class=\"id\" href=\"#linked_page\">linked_page</a> *<a class=\"id\" href=\"#list\">list</a>, int <a class=\"id\" href=\"#clear_page_nosave\">clear_page_nosave</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#linked_page\">linked_page</a> *<a class=\"id\" href=\"#lp\">lp</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_image_page\">free_image_page</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#clear_page_nosave\">clear_page_nosave</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#lp\">lp</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\">  *<span class=\"ts\"/>struct chain_allocator is used for allocating small objects out of</span>", 
"<span class=\"comment\">  *<span class=\"ts\"/>a linked list of pages called 'the chain'.</span>", 
"<span class=\"comment\">  *</span>", 
"<span class=\"comment\">  *<span class=\"ts\"/>The chain grows each time when there is no room for a new object in</span>", 
"<span class=\"comment\">  *<span class=\"ts\"/>the current page.  The allocated objects cannot be freed individually.</span>", 
"<span class=\"comment\">  *<span class=\"ts\"/>It is only possible to free them all at once, by freeing the entire</span>", 
"<span class=\"comment\">  *<span class=\"ts\"/>chain.</span>", 
"<span class=\"comment\">  *</span>", 
"<span class=\"comment\">  *<span class=\"ts\"/>NOTE: The chain allocator may be inefficient if the allocated objects</span>", 
"<span class=\"comment\">  *<span class=\"ts\"/>are not much smaller than PAGE_SIZE.</span>", 
"<span class=\"comment\">  */</span>", 
"", 
"struct <a class=\"id\" href=\"#chain_allocator\">chain_allocator</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#linked_page\">linked_page</a> *<a class=\"id\" href=\"#chain\">chain</a>;<span class=\"ts\"/><span class=\"comment\">/* the chain */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#used_space\">used_space</a>;<span class=\"ts\"/><span class=\"comment\">/* total size of objects allocated out</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * of the current page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* mask for allocating pages */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#safe_needed\">safe_needed</a>;<span class=\"ts\"/><span class=\"comment\">/* if set, only \"safe\" pages are allocated */</span>", 
"};", 
"", 
"static void", 
"<a class=\"id\" href=\"#chain_init\">chain_init</a>(struct <a class=\"id\" href=\"#chain_allocator\">chain_allocator</a> *<a class=\"id\" href=\"#ca\">ca</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, int <a class=\"id\" href=\"#safe_needed\">safe_needed</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#chain\">chain</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#used_space\">used_space</a> = <a class=\"id\" href=\"#LINKED_PAGE_DATA_SIZE\">LINKED_PAGE_DATA_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> = <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#safe_needed\">safe_needed</a> = <a class=\"id\" href=\"#safe_needed\">safe_needed</a>;", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#chain_alloc\">chain_alloc</a>(struct <a class=\"id\" href=\"#chain_allocator\">chain_allocator</a> *<a class=\"id\" href=\"#ca\">ca</a>, unsigned int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#LINKED_PAGE_DATA_SIZE\">LINKED_PAGE_DATA_SIZE</a> - <a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#used_space\">used_space</a> &lt; <a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#linked_page\">linked_page</a> *<a class=\"id\" href=\"#lp\">lp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lp\">lp</a> = <a class=\"id\" href=\"#get_image_page\">get_image_page</a>(<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#safe_needed\">safe_needed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#lp\">lp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lp\">lp</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#chain\">chain</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#chain\">chain</a> = <a class=\"id\" href=\"#lp\">lp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#used_space\">used_space</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#chain\">chain</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#used_space\">used_space</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#used_space\">used_space</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Data types related to memory bitmaps.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Memory bitmap is a structure consiting of many linked lists of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>objects.  The main list's elements are of type struct zone_bitmap</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and each of them corresonds to one zone.  For each zone bitmap</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>object there is a list of objects of type struct bm_block that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>represent each blocks of bitmap in which information is stored.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>struct memory_bitmap contains a pointer to the main list of zone</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>bitmap objects, a struct bm_position used for browsing the bitmap,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and a pointer to the list of pages used for allocating all of the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>zone bitmap objects and bitmap block objects.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NOTE: It has to be possible to lay out the bitmap in memory</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>using only allocations of order 0.  Additionally, the bitmap is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>designed to work with arbitrary number of zones (this is over the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>top for now, but let's avoid making unnecessary assumptions ;-).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>struct zone_bitmap contains a pointer to a list of bitmap block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>objects and a pointer to the bitmap block object that has been</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>most recently used for setting bits.  Additionally, it contains the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pfns that correspond to the start and end of the represented zone.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>struct bm_block contains a pointer to the memory page in which</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>information is stored (in the form of a block of bitmap)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>It also contains the pfns that correspond to the start and end of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the represented memory area.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BM_END_OF_MAP\">BM_END_OF_MAP</a><span class=\"ts\"/>(~0UL)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BM_BITS_PER_BLOCK\">BM_BITS_PER_BLOCK</a><span class=\"ts\"/>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> * <a class=\"id\" href=\"#BITS_PER_BYTE\">BITS_PER_BYTE</a>)", 
"", 
"struct <a class=\"id\" href=\"#bm_block\">bm_block</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#hook\">hook</a>;<span class=\"ts\"/><span class=\"comment\">/* hook into a list of bitmap blocks */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;<span class=\"ts\"/><span class=\"comment\">/* pfn represented by the first bit */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>;<span class=\"ts\"/><span class=\"comment\">/* pfn represented by the last bit plus 1 */</span>", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#data\">data</a>;<span class=\"ts\"/><span class=\"comment\">/* bitmap representing pages */</span>", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#bm_block_bits\">bm_block_bits</a>(struct <a class=\"id\" href=\"#bm_block\">bm_block</a> *<a class=\"id\" href=\"#bb\">bb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#end_pfn\">end_pfn</a> - <a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"}", 
"", 
"<span class=\"comment\">/* strcut bm_position is used for browsing memory bitmaps */</span>", 
"", 
"struct <a class=\"id\" href=\"#bm_position\">bm_position</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bm_block\">bm_block</a> *<a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bit\">bit</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#blocks\">blocks</a>;<span class=\"ts\"/><span class=\"comment\">/* list of bitmap blocks */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#linked_page\">linked_page</a> *<a class=\"id\" href=\"#p_list\">p_list</a>;<span class=\"ts\"/><span class=\"comment\">/* list of pages used to store zone</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * bitmap objects and bitmap block</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * objects</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bm_position\">bm_position</a> <a class=\"id\" href=\"#cur\">cur</a>;<span class=\"ts\"/><span class=\"comment\">/* most recently used bit position */</span>", 
"};", 
"", 
"<span class=\"comment\">/* Functions that operate on memory bitmaps */</span>", 
"", 
"static void <a class=\"id\" href=\"#memory_bm_position_reset\">memory_bm_position_reset</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#cur\">cur</a>.<a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#blocks\">blocks</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#bm_block\">bm_block</a>, <a class=\"id\" href=\"#hook\">hook</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#cur\">cur</a>.<a class=\"id\" href=\"#bit\">bit</a> = 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#memory_bm_free\">memory_bm_free</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>, int <a class=\"id\" href=\"#clear_nosave_free\">clear_nosave_free</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>create_bm_block_list - create a list of block bitmap objects</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pages - number of pages to track</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list - list to put the allocated blocks into</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ca - chain allocator to be used for allocating memory</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#create_bm_block_list\">create_bm_block_list</a>(unsigned long <a class=\"id\" href=\"#pages\">pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#chain_allocator\">chain_allocator</a> *<a class=\"id\" href=\"#ca\">ca</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_blocks\">nr_blocks</a> = <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#BM_BITS_PER_BLOCK\">BM_BITS_PER_BLOCK</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr_blocks\">nr_blocks</a>-- &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bm_block\">bm_block</a> *<a class=\"id\" href=\"#bb\">bb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bb\">bb</a> = <a class=\"id\" href=\"#chain_alloc\">chain_alloc</a>(<a class=\"id\" href=\"#ca\">ca</a>, sizeof(struct <a class=\"id\" href=\"#bm_block\">bm_block</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bb\">bb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#hook\">hook</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#mem_extent\">mem_extent</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#hook\">hook</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>free_mem_extents - free a list of memory extents</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list - list of extents to empty</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#free_mem_extents\">free_mem_extents</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_extent\">mem_extent</a> *<a class=\"id\" href=\"#ext\">ext</a>, *<a class=\"id\" href=\"#aux\">aux</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#ext\">ext</a>, <a class=\"id\" href=\"#aux\">aux</a>, <a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#hook\">hook</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#ext\">ext</a>-><a class=\"id\" href=\"#hook\">hook</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ext\">ext</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>create_mem_extents - create a list of memory extents representing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>                     contiguous ranges of PFNs</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list - list to put the extents into</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gfp_mask - mask to use for memory allocations</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#create_mem_extents\">create_mem_extents</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_populated_zone\">for_each_populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#zone_start\">zone_start</a>, <a class=\"id\" href=\"#zone_end\">zone_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_extent\">mem_extent</a> *<a class=\"id\" href=\"#ext\">ext</a>, *<a class=\"id\" href=\"#cur\">cur</a>, *<a class=\"id\" href=\"#aux\">aux</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_start\">zone_start</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_end\">zone_end</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> + <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#spanned_pages\">spanned_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#ext\">ext</a>, <a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#hook\">hook</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_start\">zone_start</a> <= <a class=\"id\" href=\"#ext\">ext</a>-><a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (&amp;<a class=\"id\" href=\"#ext\">ext</a>-><a class=\"id\" href=\"#hook\">hook</a> == <a class=\"id\" href=\"#list\">list</a> || <a class=\"id\" href=\"#zone_end\">zone_end</a> &lt; <a class=\"id\" href=\"#ext\">ext</a>-><a class=\"id\" href=\"#start\">start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* New extent is necessary */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_extent\">mem_extent</a> *<a class=\"id\" href=\"#new_ext\">new_ext</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_ext\">new_ext</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#mem_extent\">mem_extent</a>), <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_ext\">new_ext</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_mem_extents\">free_mem_extents</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_ext\">new_ext</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#zone_start\">zone_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_ext\">new_ext</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#zone_end\">zone_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#new_ext\">new_ext</a>-><a class=\"id\" href=\"#hook\">hook</a>, &amp;<a class=\"id\" href=\"#ext\">ext</a>-><a class=\"id\" href=\"#hook\">hook</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Merge this zone's range of PFNs with the existing one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_start\">zone_start</a> &lt; <a class=\"id\" href=\"#ext\">ext</a>-><a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext\">ext</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#zone_start\">zone_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_end\">zone_end</a> &gt; <a class=\"id\" href=\"#ext\">ext</a>-><a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext\">ext</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#zone_end\">zone_end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* More merging may be possible */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#ext\">ext</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe_continue\">list_for_each_entry_safe_continue</a>(<a class=\"id\" href=\"#cur\">cur</a>, <a class=\"id\" href=\"#aux\">aux</a>, <a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#hook\">hook</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_end\">zone_end</a> &lt; <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_end\">zone_end</a> &lt; <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext\">ext</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#hook\">hook</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cur\">cur</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\">  *<span class=\"ts\"/>memory_bm_create - allocate memory for a memory bitmap</span>", 
"<span class=\"comment\">  */</span>", 
"static int", 
"<a class=\"id\" href=\"#memory_bm_create\">memory_bm_create</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, int <a class=\"id\" href=\"#safe_needed\">safe_needed</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#chain_allocator\">chain_allocator</a> <a class=\"id\" href=\"#ca\">ca</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#mem_extents\">mem_extents</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_extent\">mem_extent</a> *<a class=\"id\" href=\"#ext\">ext</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chain_init\">chain_init</a>(&amp;<a class=\"id\" href=\"#ca\">ca</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#safe_needed\">safe_needed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#blocks\">blocks</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#create_mem_extents\">create_mem_extents</a>(&amp;<a class=\"id\" href=\"#mem_extents\">mem_extents</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#ext\">ext</a>, &amp;<a class=\"id\" href=\"#mem_extents\">mem_extents</a>, <a class=\"id\" href=\"#hook\">hook</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bm_block\">bm_block</a> *<a class=\"id\" href=\"#bb\">bb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#ext\">ext</a>-><a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#ext\">ext</a>-><a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#ext\">ext</a>-><a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bb\">bb</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#blocks\">blocks</a>.<a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#bm_block\">bm_block</a>, <a class=\"id\" href=\"#hook\">hook</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#create_bm_block_list\">create_bm_block_list</a>(<a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#blocks\">blocks</a>.<a class=\"id\" href=\"#prev\">prev</a>, &amp;<a class=\"id\" href=\"#ca\">ca</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Error\">Error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_continue\">list_for_each_entry_continue</a>(<a class=\"id\" href=\"#bb\">bb</a>, &amp;<a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#blocks\">blocks</a>, <a class=\"id\" href=\"#hook\">hook</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#get_image_page\">get_image_page</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#safe_needed\">safe_needed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Error\">Error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#start_pfn\">start_pfn</a> = <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pages\">pages</a> >= <a class=\"id\" href=\"#BM_BITS_PER_BLOCK\">BM_BITS_PER_BLOCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> += <a class=\"id\" href=\"#BM_BITS_PER_BLOCK\">BM_BITS_PER_BLOCK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> -= <a class=\"id\" href=\"#BM_BITS_PER_BLOCK\">BM_BITS_PER_BLOCK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is executed only once in the loop */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> += <a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#end_pfn\">end_pfn</a> = <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#p_list\">p_list</a> = <a class=\"id\" href=\"#ca\">ca</a>.<a class=\"id\" href=\"#chain\">chain</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_position_reset\">memory_bm_position_reset</a>(<a class=\"id\" href=\"#bm\">bm</a>);", 
" <a class=\"id\" href=\"#Exit\">Exit</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_mem_extents\">free_mem_extents</a>(&amp;<a class=\"id\" href=\"#mem_extents\">mem_extents</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
" <a class=\"id\" href=\"#Error\">Error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#p_list\">p_list</a> = <a class=\"id\" href=\"#ca\">ca</a>.<a class=\"id\" href=\"#chain\">chain</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_free\">memory_bm_free</a>(<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#PG_UNSAFE_CLEAR\">PG_UNSAFE_CLEAR</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#Exit\">Exit</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\">  *<span class=\"ts\"/>memory_bm_free - free memory occupied by the memory bitmap @bm</span>", 
"<span class=\"comment\">  */</span>", 
"static void <a class=\"id\" href=\"#memory_bm_free\">memory_bm_free</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>, int <a class=\"id\" href=\"#clear_nosave_free\">clear_nosave_free</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bm_block\">bm_block</a> *<a class=\"id\" href=\"#bb\">bb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#bb\">bb</a>, &amp;<a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#blocks\">blocks</a>, <a class=\"id\" href=\"#hook\">hook</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_image_page\">free_image_page</a>(<a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#clear_nosave_free\">clear_nosave_free</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_list_of_pages\">free_list_of_pages</a>(<a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#p_list\">p_list</a>, <a class=\"id\" href=\"#clear_nosave_free\">clear_nosave_free</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#blocks\">blocks</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>memory_bm_find_bit - find the bit in the bitmap @bm that corresponds</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to given pfn.  The cur_zone_bm member of @bm and the cur_block member</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of @bm-&gt;cur_zone_bm are updated.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#memory_bm_find_bit\">memory_bm_find_bit</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void **<a class=\"id\" href=\"#addr\">addr</a>, unsigned int *<a class=\"id\" href=\"#bit_nr\">bit_nr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bm_block\">bm_block</a> *<a class=\"id\" href=\"#bb\">bb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check if the pfn corresponds to the current bitmap block and find</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the block where it fits if this is not the case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bb\">bb</a> = <a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#cur\">cur</a>.<a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#start_pfn\">start_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_continue_reverse\">list_for_each_entry_continue_reverse</a>(<a class=\"id\" href=\"#bb\">bb</a>, &amp;<a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#blocks\">blocks</a>, <a class=\"id\" href=\"#hook\">hook</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn\">pfn</a> >= <a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#start_pfn\">start_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn\">pfn</a> >= <a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_continue\">list_for_each_entry_continue</a>(<a class=\"id\" href=\"#bb\">bb</a>, &amp;<a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#blocks\">blocks</a>, <a class=\"id\" href=\"#hook\">hook</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn\">pfn</a> >= <a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#start_pfn\">start_pfn</a> && <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>if (&amp;<a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#hook\">hook</a> == &amp;<a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#blocks\">blocks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The block has been found */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#cur\">cur</a>.<a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#bb\">bb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> -= <a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#cur\">cur</a>.<a class=\"id\" href=\"#bit\">bit</a> = <a class=\"id\" href=\"#pfn\">pfn</a> + 1;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#bit_nr\">bit_nr</a> = <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#memory_bm_set_bit\">memory_bm_set_bit</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#memory_bm_find_bit\">memory_bm_find_bit</a>(<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#pfn\">pfn</a>, &amp;<a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#bit\">bit</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#bit\">bit</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mem_bm_set_bit_check\">mem_bm_set_bit_check</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#memory_bm_find_bit\">memory_bm_find_bit</a>(<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#pfn\">pfn</a>, &amp;<a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#bit\">bit</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#bit\">bit</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#memory_bm_clear_bit\">memory_bm_clear_bit</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#memory_bm_find_bit\">memory_bm_find_bit</a>(<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#pfn\">pfn</a>, &amp;<a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#bit\">bit</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#bit\">bit</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#memory_bm_test_bit\">memory_bm_test_bit</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#memory_bm_find_bit\">memory_bm_find_bit</a>(<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#pfn\">pfn</a>, &amp;<a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#bit\">bit</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#bit\">bit</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#memory_bm_pfn_present\">memory_bm_pfn_present</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bit\">bit</a>;", 
"", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#memory_bm_find_bit\">memory_bm_find_bit</a>(<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#pfn\">pfn</a>, &amp;<a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#bit\">bit</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>memory_bm_next_pfn - find the pfn that corresponds to the next set bit</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in the bitmap @bm.  If the pfn cannot be found, BM_END_OF_MAP is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>It is required to run memory_bm_position_reset() before the first call to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>this function.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static unsigned long <a class=\"id\" href=\"#memory_bm_next_pfn\">memory_bm_next_pfn</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bm_block\">bm_block</a> *<a class=\"id\" href=\"#bb\">bb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bit\">bit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bb\">bb</a> = <a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#cur\">cur</a>.<a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a> = <a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#cur\">cur</a>.<a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a> = <a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>(<a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#bm_block_bits\">bm_block_bits</a>(<a class=\"id\" href=\"#bb\">bb</a>), <a class=\"id\" href=\"#bit\">bit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bit\">bit</a> &lt; <a class=\"id\" href=\"#bm_block_bits\">bm_block_bits</a>(<a class=\"id\" href=\"#bb\">bb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Return_pfn\">Return_pfn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bb\">bb</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#hook\">hook</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#bm_block\">bm_block</a>, <a class=\"id\" href=\"#hook\">hook</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#cur\">cur</a>.<a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#bb\">bb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#cur\">cur</a>.<a class=\"id\" href=\"#bit\">bit</a> = 0;", 
"<span class=\"ts\"/>} while (&amp;<a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#hook\">hook</a> != &amp;<a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#blocks\">blocks</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_position_reset\">memory_bm_position_reset</a>(<a class=\"id\" href=\"#bm\">bm</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#BM_END_OF_MAP\">BM_END_OF_MAP</a>;", 
"", 
" <a class=\"id\" href=\"#Return_pfn\">Return_pfn</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bm\">bm</a>-><a class=\"id\" href=\"#cur\">cur</a>.<a class=\"id\" href=\"#bit\">bit</a> = <a class=\"id\" href=\"#bit\">bit</a> + 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bb\">bb</a>-><a class=\"id\" href=\"#start_pfn\">start_pfn</a> + <a class=\"id\" href=\"#bit\">bit</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This structure represents a range of page frames the contents of which</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>should not be saved during the suspend.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#nosave_region\">nosave_region</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#nosave_regions\">nosave_regions</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>register_nosave_region - register a range of page frames the contents</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of which should not be saved during the suspend (to be used in the early</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>initialization code)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a>", 
"<a class=\"id\" href=\"#__register_nosave_region\">__register_nosave_region</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#use_kmalloc\">use_kmalloc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nosave_region\">nosave_region</a> *<a class=\"id\" href=\"#region\">region</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start_pfn\">start_pfn</a> >= <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#nosave_regions\">nosave_regions</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Try to extend the previous region (they should be sorted) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#nosave_regions\">nosave_regions</a>.<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#nosave_region\">nosave_region</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#region\">region</a>-><a class=\"id\" href=\"#end_pfn\">end_pfn</a> == <a class=\"id\" href=\"#start_pfn\">start_pfn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a>-><a class=\"id\" href=\"#end_pfn\">end_pfn</a> = <a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Report\">Report</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#use_kmalloc\">use_kmalloc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* during init, this shouldn't fail */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#nosave_region\">nosave_region</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#region\">region</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This allocation cannot fail */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a> = <a class=\"id\" href=\"#alloc_bootmem\">alloc_bootmem</a>(sizeof(struct <a class=\"id\" href=\"#nosave_region\">nosave_region</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a>-><a class=\"id\" href=\"#start_pfn\">start_pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a>-><a class=\"id\" href=\"#end_pfn\">end_pfn</a> = <a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#region\">region</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#nosave_regions\">nosave_regions</a>);", 
" <a class=\"id\" href=\"#Report\">Report</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"PM: Registered nosave memory: %016lx - %016lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_pfn\">start_pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>, <a class=\"id\" href=\"#end_pfn\">end_pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set bits in this map correspond to the page frames the contents of which</span>", 
"<span class=\"comment\"> * should not be saved during the suspend.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#forbidden_pages_map\">forbidden_pages_map</a>;", 
"", 
"<span class=\"comment\">/* Set bits in this map correspond to free page frames. */</span>", 
"static struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#free_pages_map\">free_pages_map</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Each page frame allocated for creating the image is marked by setting the</span>", 
"<span class=\"comment\"> * corresponding bits in forbidden_pages_map and free_pages_map simultaneously</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#swsusp_set_page_free\">swsusp_set_page_free</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#free_pages_map\">free_pages_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_set_bit\">memory_bm_set_bit</a>(<a class=\"id\" href=\"#free_pages_map\">free_pages_map</a>, <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"}", 
"", 
"static int <a class=\"id\" href=\"#swsusp_page_is_free\">swsusp_page_is_free</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#free_pages_map\">free_pages_map</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_test_bit\">memory_bm_test_bit</a>(<a class=\"id\" href=\"#free_pages_map\">free_pages_map</a>, <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>)) : 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#swsusp_unset_page_free\">swsusp_unset_page_free</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#free_pages_map\">free_pages_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_clear_bit\">memory_bm_clear_bit</a>(<a class=\"id\" href=\"#free_pages_map\">free_pages_map</a>, <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#swsusp_set_page_forbidden\">swsusp_set_page_forbidden</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#forbidden_pages_map\">forbidden_pages_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_set_bit\">memory_bm_set_bit</a>(<a class=\"id\" href=\"#forbidden_pages_map\">forbidden_pages_map</a>, <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"}", 
"", 
"int <a class=\"id\" href=\"#swsusp_page_is_forbidden\">swsusp_page_is_forbidden</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#forbidden_pages_map\">forbidden_pages_map</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_test_bit\">memory_bm_test_bit</a>(<a class=\"id\" href=\"#forbidden_pages_map\">forbidden_pages_map</a>, <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>)) : 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#swsusp_unset_page_forbidden\">swsusp_unset_page_forbidden</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#forbidden_pages_map\">forbidden_pages_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_clear_bit\">memory_bm_clear_bit</a>(<a class=\"id\" href=\"#forbidden_pages_map\">forbidden_pages_map</a>, <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>mark_nosave_pages - set bits corresponding to the page frames the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>contents of which should not be saved in a given bitmap.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#mark_nosave_pages\">mark_nosave_pages</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nosave_region\">nosave_region</a> *<a class=\"id\" href=\"#region\">region</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#nosave_regions\">nosave_regions</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#region\">region</a>, &amp;<a class=\"id\" href=\"#nosave_regions\">nosave_regions</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"PM: Marking nosave pages: %016lx - %016lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a>-><a class=\"id\" href=\"#start_pfn\">start_pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a>-><a class=\"id\" href=\"#end_pfn\">end_pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#region\">region</a>-><a class=\"id\" href=\"#start_pfn\">start_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#region\">region</a>-><a class=\"id\" href=\"#end_pfn\">end_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * It is safe to ignore the result of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * mem_bm_set_bit_check() here, since we won't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * touch the PFNs for which the error is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * returned anyway.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_bm_set_bit_check\">mem_bm_set_bit_check</a>(<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>create_basic_memory_bitmaps - create bitmaps needed for marking page</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>frames that should not be saved and free page frames.  The pointers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>forbidden_pages_map and free_pages_map are only modified if everything</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>goes well, because we don't want the bits to be used before both bitmaps</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>are set up.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#create_basic_memory_bitmaps\">create_basic_memory_bitmaps</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm1\">bm1</a>, *<a class=\"id\" href=\"#bm2\">bm2</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#forbidden_pages_map\">forbidden_pages_map</a> || <a class=\"id\" href=\"#free_pages_map\">free_pages_map</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bm1\">bm1</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bm1\">bm1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#memory_bm_create\">memory_bm_create</a>(<a class=\"id\" href=\"#bm1\">bm1</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#PG_ANY\">PG_ANY</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Free_first_object\">Free_first_object</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bm2\">bm2</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bm2\">bm2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Free_first_bitmap\">Free_first_bitmap</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#memory_bm_create\">memory_bm_create</a>(<a class=\"id\" href=\"#bm2\">bm2</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#PG_ANY\">PG_ANY</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Free_second_object\">Free_second_object</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#forbidden_pages_map\">forbidden_pages_map</a> = <a class=\"id\" href=\"#bm1\">bm1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pages_map\">free_pages_map</a> = <a class=\"id\" href=\"#bm2\">bm2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_nosave_pages\">mark_nosave_pages</a>(<a class=\"id\" href=\"#forbidden_pages_map\">forbidden_pages_map</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"PM: Basic memory bitmaps created\\n\");", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#Free_second_object\">Free_second_object</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bm2\">bm2</a>);", 
" <a class=\"id\" href=\"#Free_first_bitmap\">Free_first_bitmap</a>:", 
" <span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_free\">memory_bm_free</a>(<a class=\"id\" href=\"#bm1\">bm1</a>, <a class=\"id\" href=\"#PG_UNSAFE_CLEAR\">PG_UNSAFE_CLEAR</a>);", 
" <a class=\"id\" href=\"#Free_first_object\">Free_first_object</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bm1\">bm1</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>free_basic_memory_bitmaps - free memory bitmaps allocated by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>create_basic_memory_bitmaps().  The auxiliary pointers are necessary</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>so that the bitmaps themselves are not referred to while they are being</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>freed.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#free_basic_memory_bitmaps\">free_basic_memory_bitmaps</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm1\">bm1</a>, *<a class=\"id\" href=\"#bm2\">bm2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#forbidden_pages_map\">forbidden_pages_map</a> && <a class=\"id\" href=\"#free_pages_map\">free_pages_map</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bm1\">bm1</a> = <a class=\"id\" href=\"#forbidden_pages_map\">forbidden_pages_map</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bm2\">bm2</a> = <a class=\"id\" href=\"#free_pages_map\">free_pages_map</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#forbidden_pages_map\">forbidden_pages_map</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pages_map\">free_pages_map</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_free\">memory_bm_free</a>(<a class=\"id\" href=\"#bm1\">bm1</a>, <a class=\"id\" href=\"#PG_UNSAFE_CLEAR\">PG_UNSAFE_CLEAR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bm1\">bm1</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_free\">memory_bm_free</a>(<a class=\"id\" href=\"#bm2\">bm2</a>, <a class=\"id\" href=\"#PG_UNSAFE_CLEAR\">PG_UNSAFE_CLEAR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bm2\">bm2</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"PM: Basic memory bitmaps freed\\n\");", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>snapshot_additional_pages - estimate the number of additional pages</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be needed for setting up the suspend image data structures for given</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>zone (usually the returned value is greater than the exact number)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"unsigned int <a class=\"id\" href=\"#snapshot_additional_pages\">snapshot_additional_pages</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#spanned_pages\">spanned_pages</a>, <a class=\"id\" href=\"#BM_BITS_PER_BLOCK\">BM_BITS_PER_BLOCK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> += <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#res\">res</a> * sizeof(struct <a class=\"id\" href=\"#bm_block\">bm_block</a>), <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>return 2 * <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>count_free_highmem_pages - compute the total number of free highmem</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pages, system-wide.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static unsigned int <a class=\"id\" href=\"#count_free_highmem_pages\">count_free_highmem_pages</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cnt\">cnt</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_populated_zone\">for_each_populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_highmem\">is_highmem</a>(<a class=\"id\" href=\"#zone\">zone</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> += <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>saveable_highmem_page - Determine whether a highmem page should be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>included in the suspend image.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>We should save the page if it isn't Nosave or NosaveFree, or Reserved,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and it isn't a part of a free chunk of pages.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#saveable_highmem_page\">saveable_highmem_page</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>) != <a class=\"id\" href=\"#zone\">zone</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#swsusp_page_is_forbidden\">swsusp_page_is_forbidden</a>(<a class=\"id\" href=\"#page\">page</a>) ||  <a class=\"id\" href=\"#swsusp_page_is_free\">swsusp_page_is_free</a>(<a class=\"id\" href=\"#page\">page</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#PageReserved\">PageReserved</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>count_highmem_pages - compute the total number of saveable highmem</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pages.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static unsigned int <a class=\"id\" href=\"#count_highmem_pages\">count_highmem_pages</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#n\">n</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_populated_zone\">for_each_populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_highmem\">is_highmem</a>(<a class=\"id\" href=\"#zone\">zone</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_free_pages\">mark_free_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> + <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#spanned_pages\">spanned_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#saveable_highmem_page\">saveable_highmem_page</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#pfn\">pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#saveable_highmem_page\">saveable_highmem_page</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#z\">z</a>, unsigned long <a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HIGHMEM */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>saveable_page - Determine whether a non-highmem page should be included</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in the suspend image.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>We should save the page if it isn't Nosave, and is not in the range</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of pages statically defined as 'unsaveable', and it isn't a part of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a free chunk of pages.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#saveable_page\">saveable_page</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>) != <a class=\"id\" href=\"#zone\">zone</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#swsusp_page_is_forbidden\">swsusp_page_is_forbidden</a>(<a class=\"id\" href=\"#page\">page</a>) || <a class=\"id\" href=\"#swsusp_page_is_free\">swsusp_page_is_free</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageReserved\">PageReserved</a>(<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/>    && (!<a class=\"id\" href=\"#kernel_page_present\">kernel_page_present</a>(<a class=\"id\" href=\"#page\">page</a>) || <a class=\"id\" href=\"#pfn_is_nosave\">pfn_is_nosave</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>count_data_pages - compute the total number of saveable non-highmem</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pages.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static unsigned int <a class=\"id\" href=\"#count_data_pages\">count_data_pages</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#n\">n</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_populated_zone\">for_each_populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_highmem\">is_highmem</a>(<a class=\"id\" href=\"#zone\">zone</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_free_pages\">mark_free_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> + <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#spanned_pages\">spanned_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#saveable_page\">saveable_page</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#pfn\">pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"", 
"<span class=\"comment\">/* This is needed, because copy_page and memcpy are not usable for copying</span>", 
"<span class=\"comment\"> * task structs.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#do_copy_page\">do_copy_page</a>(long *<a class=\"id\" href=\"#dst\">dst</a>, long *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> / sizeof(long); <a class=\"id\" href=\"#n\">n</a>; <a class=\"id\" href=\"#n\">n</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dst\">dst</a>++ = *<a class=\"id\" href=\"#src\">src</a>++;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>safe_copy_page - check if the page we are going to copy is marked as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>present in the kernel page tables (this always is the case if</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>CONFIG_DEBUG_PAGEALLOC is not set and in that case</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>kernel_page_present() always returns 'true').</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#safe_copy_page\">safe_copy_page</a>(void *<a class=\"id\" href=\"#dst\">dst</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#s_page\">s_page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kernel_page_present\">kernel_page_present</a>(<a class=\"id\" href=\"#s_page\">s_page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_copy_page\">do_copy_page</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#s_page\">s_page</a>));", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernel_map_pages\">kernel_map_pages</a>(<a class=\"id\" href=\"#s_page\">s_page</a>, 1, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_copy_page\">do_copy_page</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#s_page\">s_page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernel_map_pages\">kernel_map_pages</a>(<a class=\"id\" href=\"#s_page\">s_page</a>, 1, 0);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#page_is_saveable\">page_is_saveable</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#is_highmem\">is_highmem</a>(<a class=\"id\" href=\"#zone\">zone</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#saveable_highmem_page\">saveable_highmem_page</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#pfn\">pfn</a>) : <a class=\"id\" href=\"#saveable_page\">saveable_page</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#copy_data_page\">copy_data_page</a>(unsigned long <a class=\"id\" href=\"#dst_pfn\">dst_pfn</a>, unsigned long <a class=\"id\" href=\"#src_pfn\">src_pfn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#s_page\">s_page</a>, *<a class=\"id\" href=\"#d_page\">d_page</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#src\">src</a>, *<a class=\"id\" href=\"#dst\">dst</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s_page\">s_page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#src_pfn\">src_pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d_page\">d_page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#dst_pfn\">dst_pfn</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#s_page\">s_page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#s_page\">s_page</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#d_page\">d_page</a>, <a class=\"id\" href=\"#KM_USER1\">KM_USER1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_copy_page\">do_copy_page</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#KM_USER1\">KM_USER1</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#d_page\">d_page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Page pointed to by src may contain some kernel</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * data modified by kmap_atomic()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#safe_copy_page\">safe_copy_page</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#s_page\">s_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#d_page\">d_page</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#safe_copy_page\">safe_copy_page</a>(<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#d_page\">d_page</a>), <a class=\"id\" href=\"#s_page\">s_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#page_is_saveable\">page_is_saveable</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#pfn\">pfn</a>)<span class=\"ts\"/><a class=\"id\" href=\"#saveable_page\">saveable_page</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#copy_data_page\">copy_data_page</a>(unsigned long <a class=\"id\" href=\"#dst_pfn\">dst_pfn</a>, unsigned long <a class=\"id\" href=\"#src_pfn\">src_pfn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#safe_copy_page\">safe_copy_page</a>(<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#dst_pfn\">dst_pfn</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#src_pfn\">src_pfn</a>));", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HIGHMEM */</span>", 
"", 
"static void", 
"<a class=\"id\" href=\"#copy_data_pages\">copy_data_pages</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#copy_bm\">copy_bm</a>, struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#orig_bm\">orig_bm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_populated_zone\">for_each_populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_free_pages\">mark_free_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> + <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#spanned_pages\">spanned_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_is_saveable\">page_is_saveable</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#pfn\">pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_set_bit\">memory_bm_set_bit</a>(<a class=\"id\" href=\"#orig_bm\">orig_bm</a>, <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_position_reset\">memory_bm_position_reset</a>(<a class=\"id\" href=\"#orig_bm\">orig_bm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_position_reset\">memory_bm_position_reset</a>(<a class=\"id\" href=\"#copy_bm\">copy_bm</a>);", 
"<span class=\"ts\"/>for(;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#memory_bm_next_pfn\">memory_bm_next_pfn</a>(<a class=\"id\" href=\"#orig_bm\">orig_bm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pfn\">pfn</a> == <a class=\"id\" href=\"#BM_END_OF_MAP\">BM_END_OF_MAP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy_data_page\">copy_data_page</a>(<a class=\"id\" href=\"#memory_bm_next_pfn\">memory_bm_next_pfn</a>(<a class=\"id\" href=\"#copy_bm\">copy_bm</a>), <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Total number of image pages */</span>", 
"static unsigned int <a class=\"id\" href=\"#nr_copy_pages\">nr_copy_pages</a>;", 
"<span class=\"comment\">/* Number of pages needed for saving the original pfns of the image pages */</span>", 
"static unsigned int <a class=\"id\" href=\"#nr_meta_pages\">nr_meta_pages</a>;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Numbers of normal and highmem page frames allocated for hibernation image</span>", 
"<span class=\"comment\"> * before suspending devices.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#alloc_normal\">alloc_normal</a>, <a class=\"id\" href=\"#alloc_highmem\">alloc_highmem</a>;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Memory bitmap used for marking saveable pages (during hibernation) or</span>", 
"<span class=\"comment\"> * hibernation image pages (during restore)</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> <a class=\"id\" href=\"#orig_bm\">orig_bm</a>;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Memory bitmap used during hibernation for marking allocated page frames that</span>", 
"<span class=\"comment\"> * will contain copies of saveable pages.  During restore it is initially used</span>", 
"<span class=\"comment\"> * for marking hibernation image pages, but then the set bits from it are</span>", 
"<span class=\"comment\"> * duplicated in @orig_bm and it is released.  On highmem systems it is next</span>", 
"<span class=\"comment\"> * used for marking \"safe\" highmem pages, but it has to be reinitialized for</span>", 
"<span class=\"comment\"> * this purpose.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> <a class=\"id\" href=\"#copy_bm\">copy_bm</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>swsusp_free - free pages allocated for the suspend.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Suspend pages are alocated before the atomic copy is made, so we</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>need to release them after the resume.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#swsusp_free\">swsusp_free</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_populated_zone\">for_each_populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> + <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#spanned_pages\">spanned_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#swsusp_page_is_forbidden\">swsusp_page_is_forbidden</a>(<a class=\"id\" href=\"#page\">page</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#swsusp_page_is_free\">swsusp_page_is_free</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_unset_page_forbidden\">swsusp_unset_page_forbidden</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_unset_page_free\">swsusp_unset_page_free</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_copy_pages\">nr_copy_pages</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_meta_pages\">nr_meta_pages</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#restore_pblist\">restore_pblist</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_normal\">alloc_normal</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_highmem\">alloc_highmem</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/* Helper functions used for the shrinking of memory. */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_IMAGE\">GFP_IMAGE</a><span class=\"ts\"/>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_NOWARN\">__GFP_NOWARN</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * preallocate_image_pages - Allocate a number of pages for hibernation image</span>", 
"<span class=\"comment\"> * @nr_pages: Number of page frames to allocate.</span>", 
"<span class=\"comment\"> * @mask: GFP flags to use for the allocation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return value: Number of page frames actually allocated</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#preallocate_image_pages\">preallocate_image_pages</a>(unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_alloc\">nr_alloc</a> = 0;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr_pages\">nr_pages</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_image_page\">alloc_image_page</a>(<a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_set_bit\">memory_bm_set_bit</a>(&amp;<a class=\"id\" href=\"#copy_bm\">copy_bm</a>, <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_highmem\">alloc_highmem</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_normal\">alloc_normal</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_alloc\">nr_alloc</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_alloc\">nr_alloc</a>;", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#preallocate_image_memory\">preallocate_image_memory</a>(unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#avail_normal\">avail_normal</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#alloc\">alloc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#avail_normal\">avail_normal</a> <= <a class=\"id\" href=\"#alloc_normal\">alloc_normal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc\">alloc</a> = <a class=\"id\" href=\"#avail_normal\">avail_normal</a> - <a class=\"id\" href=\"#alloc_normal\">alloc_normal</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_pages\">nr_pages</a> &lt; <a class=\"id\" href=\"#alloc\">alloc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc\">alloc</a> = <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#preallocate_image_pages\">preallocate_image_pages</a>(<a class=\"id\" href=\"#alloc\">alloc</a>, <a class=\"id\" href=\"#GFP_IMAGE\">GFP_IMAGE</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"static unsigned long <a class=\"id\" href=\"#preallocate_image_highmem\">preallocate_image_highmem</a>(unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#preallocate_image_pages\">preallocate_image_pages</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#GFP_IMAGE\">GFP_IMAGE</a> | <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *  __fraction - Compute (an approximation of) x * (multiplier / base)</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#__fraction\">__fraction</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#multiplier\">multiplier</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#base\">base</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> *= <a class=\"id\" href=\"#multiplier\">multiplier</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/>return (unsigned long)<a class=\"id\" href=\"#x\">x</a>;", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#preallocate_highmem_fraction\">preallocate_highmem_fraction</a>(unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#highmem\">highmem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#total\">total</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#alloc\">alloc</a> = <a class=\"id\" href=\"#__fraction\">__fraction</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#highmem\">highmem</a>, <a class=\"id\" href=\"#total\">total</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#preallocate_image_pages\">preallocate_image_pages</a>(<a class=\"id\" href=\"#alloc\">alloc</a>, <a class=\"id\" href=\"#GFP_IMAGE\">GFP_IMAGE</a> | <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>);", 
"}", 
"#else <span class=\"comment\">/* CONFIG_HIGHMEM */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#preallocate_image_highmem\">preallocate_image_highmem</a>(unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#preallocate_highmem_fraction\">preallocate_highmem_fraction</a>(unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#highmem\">highmem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#total\">total</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HIGHMEM */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * free_unnecessary_pages - Release preallocated pages not needed for the image</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#free_unnecessary_pages\">free_unnecessary_pages</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#save\">save</a>, <a class=\"id\" href=\"#to_free_normal\">to_free_normal</a>, <a class=\"id\" href=\"#to_free_highmem\">to_free_highmem</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save\">save</a> = <a class=\"id\" href=\"#count_data_pages\">count_data_pages</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#alloc_normal\">alloc_normal</a> >= <a class=\"id\" href=\"#save\">save</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_free_normal\">to_free_normal</a> = <a class=\"id\" href=\"#alloc_normal\">alloc_normal</a> - <a class=\"id\" href=\"#save\">save</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#save\">save</a> = 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_free_normal\">to_free_normal</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#save\">save</a> -= <a class=\"id\" href=\"#alloc_normal\">alloc_normal</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save\">save</a> += <a class=\"id\" href=\"#count_highmem_pages\">count_highmem_pages</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#alloc_highmem\">alloc_highmem</a> >= <a class=\"id\" href=\"#save\">save</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_free_highmem\">to_free_highmem</a> = <a class=\"id\" href=\"#alloc_highmem\">alloc_highmem</a> - <a class=\"id\" href=\"#save\">save</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_free_highmem\">to_free_highmem</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_free_normal\">to_free_normal</a> -= <a class=\"id\" href=\"#save\">save</a> - <a class=\"id\" href=\"#alloc_highmem\">alloc_highmem</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_position_reset\">memory_bm_position_reset</a>(&amp;<a class=\"id\" href=\"#copy_bm\">copy_bm</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#to_free_normal\">to_free_normal</a> &gt; 0 || <a class=\"id\" href=\"#to_free_highmem\">to_free_highmem</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#memory_bm_next_pfn\">memory_bm_next_pfn</a>(&amp;<a class=\"id\" href=\"#copy_bm\">copy_bm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#to_free_highmem\">to_free_highmem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_free_highmem\">to_free_highmem</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_highmem\">alloc_highmem</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#to_free_normal\">to_free_normal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_free_normal\">to_free_normal</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_normal\">alloc_normal</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_clear_bit\">memory_bm_clear_bit</a>(&amp;<a class=\"id\" href=\"#copy_bm\">copy_bm</a>, <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_unset_page_forbidden\">swsusp_unset_page_forbidden</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_unset_page_free\">swsusp_unset_page_free</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * minimum_image_size - Estimate the minimum acceptable size of an image</span>", 
"<span class=\"comment\"> * @saveable: Number of saveable pages in the system.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We want to avoid attempting to free too much memory too hard, so estimate the</span>", 
"<span class=\"comment\"> * minimum acceptable size of a hibernation image to use as the lower limit for</span>", 
"<span class=\"comment\"> * preallocating memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We assume that the minimum image size should be proportional to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * [number of saveable pages] - [number of pages that can be freed in theory]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * where the second term is the sum of (1) reclaimable slab pages, (2) active</span>", 
"<span class=\"comment\"> * and (3) inactive anonymouns pages, (4) active and (5) inactive file pages,</span>", 
"<span class=\"comment\"> * minus mapped file pages.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#minimum_image_size\">minimum_image_size</a>(unsigned long <a class=\"id\" href=\"#saveable\">saveable</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_SLAB_RECLAIMABLE\">NR_SLAB_RECLAIMABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_ACTIVE_ANON\">NR_ACTIVE_ANON</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_INACTIVE_ANON\">NR_INACTIVE_ANON</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_ACTIVE_FILE\">NR_ACTIVE_FILE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_INACTIVE_FILE\">NR_INACTIVE_FILE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>- <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_FILE_MAPPED\">NR_FILE_MAPPED</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#saveable\">saveable</a> <= <a class=\"id\" href=\"#size\">size</a> ? 0 : <a class=\"id\" href=\"#saveable\">saveable</a> - <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hibernate_preallocate_memory - Preallocate memory for hibernation image</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To create a hibernation image it is necessary to make a copy of every page</span>", 
"<span class=\"comment\"> * frame in use.  We also need a number of page frames to be free during</span>", 
"<span class=\"comment\"> * hibernation for allocations made while saving the image and for device</span>", 
"<span class=\"comment\"> * drivers, in case they need to allocate memory from their hibernation</span>", 
"<span class=\"comment\"> * callbacks (these two numbers are given by PAGES_FOR_IO and SPARE_PAGES,</span>", 
"<span class=\"comment\"> * respectively, both of which are rough estimates).  To make this happen, we</span>", 
"<span class=\"comment\"> * compute the total number of available page frames and allocate at least</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ([page frames total] + PAGES_FOR_IO + [metadata pages]) / 2 + 2 * SPARE_PAGES</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * of them, which corresponds to the maximum size of a hibernation image.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If image_size is set below the number following from the above formula,</span>", 
"<span class=\"comment\"> * the preallocation of memory is continued until the total number of saveable</span>", 
"<span class=\"comment\"> * pages in the system is below the requested image size or the minimum</span>", 
"<span class=\"comment\"> * acceptable image size returned by minimum_image_size(), whichever is greater.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#hibernate_preallocate_memory\">hibernate_preallocate_memory</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#saveable\">saveable</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#max_size\">max_size</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#highmem\">highmem</a>, <a class=\"id\" href=\"#pages\">pages</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#alloc\">alloc</a>, <a class=\"id\" href=\"#save_highmem\">save_highmem</a>, <a class=\"id\" href=\"#pages_highmem\">pages_highmem</a>, <a class=\"id\" href=\"#avail_normal\">avail_normal</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#stop\">stop</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"PM: Preallocating image memory... \");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_gettimeofday\">do_gettimeofday</a>(&amp;<a class=\"id\" href=\"#start\">start</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#memory_bm_create\">memory_bm_create</a>(&amp;<a class=\"id\" href=\"#orig_bm\">orig_bm</a>, <a class=\"id\" href=\"#GFP_IMAGE\">GFP_IMAGE</a>, <a class=\"id\" href=\"#PG_ANY\">PG_ANY</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#memory_bm_create\">memory_bm_create</a>(&amp;<a class=\"id\" href=\"#copy_bm\">copy_bm</a>, <a class=\"id\" href=\"#GFP_IMAGE\">GFP_IMAGE</a>, <a class=\"id\" href=\"#PG_ANY\">PG_ANY</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_normal\">alloc_normal</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_highmem\">alloc_highmem</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Count the number of saveable data pages. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save_highmem\">save_highmem</a> = <a class=\"id\" href=\"#count_highmem_pages\">count_highmem_pages</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#saveable\">saveable</a> = <a class=\"id\" href=\"#count_data_pages\">count_data_pages</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Compute the total number of page frames we can use (count) and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * number of pages needed for image metadata (size).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#saveable\">saveable</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#saveable\">saveable</a> += <a class=\"id\" href=\"#save_highmem\">save_highmem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#highmem\">highmem</a> = <a class=\"id\" href=\"#save_highmem\">save_highmem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_populated_zone\">for_each_populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#snapshot_additional_pages\">snapshot_additional_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_highmem\">is_highmem</a>(<a class=\"id\" href=\"#zone\">zone</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#highmem\">highmem</a> += <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avail_normal\">avail_normal</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#highmem\">highmem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> -= <a class=\"id\" href=\"#totalreserve_pages\">totalreserve_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Compute the maximum number of saveable pages to leave in memory. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_size\">max_size</a> = (<a class=\"id\" href=\"#count\">count</a> - (<a class=\"id\" href=\"#size\">size</a> + <a class=\"id\" href=\"#PAGES_FOR_IO\">PAGES_FOR_IO</a>)) / 2 - 2 * <a class=\"id\" href=\"#SPARE_PAGES\">SPARE_PAGES</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#image_size\">image_size</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#max_size\">max_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#max_size\">max_size</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the maximum is not less than the current number of saveable pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in memory, allocate page frames for the image and we're done.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> >= <a class=\"id\" href=\"#saveable\">saveable</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#preallocate_image_highmem\">preallocate_image_highmem</a>(<a class=\"id\" href=\"#save_highmem\">save_highmem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> += <a class=\"id\" href=\"#preallocate_image_memory\">preallocate_image_memory</a>(<a class=\"id\" href=\"#saveable\">saveable</a> - <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#avail_normal\">avail_normal</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Estimate the minimum size of the image. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#minimum_image_size\">minimum_image_size</a>(<a class=\"id\" href=\"#saveable\">saveable</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To avoid excessive pressure on the normal zone, leave room in it to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * accommodate an image of the minimum size (unless it's already too</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * small, in which case don't preallocate pages from it at all).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#avail_normal\">avail_normal</a> &gt; <a class=\"id\" href=\"#pages\">pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avail_normal\">avail_normal</a> -= <a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avail_normal\">avail_normal</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#pages\">pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned long, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#max_size\">max_size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Let the memory management subsystem know that we're going to need a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * large number of page frames to allocate and make it free some memory.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE: If this is not done, performance will be hurt badly in some</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * test cases.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shrink_all_memory\">shrink_all_memory</a>(<a class=\"id\" href=\"#saveable\">saveable</a> - <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The number of saveable pages in memory was too high, so apply some</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pressure to decrease it.  First, make room for the largest possible</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * image and fail if that doesn't work.  Next, try to decrease the size</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the image as much as indicated by 'size' using allocations from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * highmem and non-highmem zones separately.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pages_highmem\">pages_highmem</a> = <a class=\"id\" href=\"#preallocate_image_highmem\">preallocate_image_highmem</a>(<a class=\"id\" href=\"#highmem\">highmem</a> / 2);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc\">alloc</a> = (<a class=\"id\" href=\"#count\">count</a> - <a class=\"id\" href=\"#max_size\">max_size</a>) - <a class=\"id\" href=\"#pages_highmem\">pages_highmem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#preallocate_image_memory\">preallocate_image_memory</a>(<a class=\"id\" href=\"#alloc\">alloc</a>, <a class=\"id\" href=\"#avail_normal\">avail_normal</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pages\">pages</a> &lt; <a class=\"id\" href=\"#alloc\">alloc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have exhausted non-highmem pages, try highmem. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc\">alloc</a> -= <a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> += <a class=\"id\" href=\"#pages_highmem\">pages_highmem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages_highmem\">pages_highmem</a> = <a class=\"id\" href=\"#preallocate_image_highmem\">preallocate_image_highmem</a>(<a class=\"id\" href=\"#alloc\">alloc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pages_highmem\">pages_highmem</a> &lt; <a class=\"id\" href=\"#alloc\">alloc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> += <a class=\"id\" href=\"#pages_highmem\">pages_highmem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * size is the desired number of saveable pages to leave in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * memory, so try to preallocate (all memory - size) pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc\">alloc</a> = (<a class=\"id\" href=\"#count\">count</a> - <a class=\"id\" href=\"#pages\">pages</a>) - <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> += <a class=\"id\" href=\"#preallocate_image_highmem\">preallocate_image_highmem</a>(<a class=\"id\" href=\"#alloc\">alloc</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * There are approximately max_size saveable pages at this point</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and we want to reduce this number down to size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc\">alloc</a> = <a class=\"id\" href=\"#max_size\">max_size</a> - <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#preallocate_highmem_fraction\">preallocate_highmem_fraction</a>(<a class=\"id\" href=\"#alloc\">alloc</a>, <a class=\"id\" href=\"#highmem\">highmem</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages_highmem\">pages_highmem</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc\">alloc</a> -= <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#preallocate_image_memory\">preallocate_image_memory</a>(<a class=\"id\" href=\"#alloc\">alloc</a>, <a class=\"id\" href=\"#avail_normal\">avail_normal</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages_highmem\">pages_highmem</a> += <a class=\"id\" href=\"#preallocate_image_highmem\">preallocate_image_highmem</a>(<a class=\"id\" href=\"#alloc\">alloc</a> - <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> += <a class=\"id\" href=\"#pages_highmem\">pages_highmem</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We only need as many page frames for the image as there are saveable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pages in memory, but we have allocated more.  Release the excessive</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ones now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_unnecessary_pages\">free_unnecessary_pages</a>();", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_gettimeofday\">do_gettimeofday</a>(&amp;<a class=\"id\" href=\"#stop\">stop</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"done (allocated %lu pages)\\n\", <a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swsusp_show_speed\">swsusp_show_speed</a>(&amp;<a class=\"id\" href=\"#start\">start</a>, &amp;<a class=\"id\" href=\"#stop\">stop</a>, <a class=\"id\" href=\"#pages\">pages</a>, \"Allocated\");", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swsusp_free\">swsusp_free</a>();", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\">  *<span class=\"ts\"/>count_pages_for_highmem - compute the number of non-highmem pages</span>", 
"<span class=\"comment\">  *<span class=\"ts\"/>that will be necessary for creating copies of highmem pages.</span>", 
"<span class=\"comment\">  */</span>", 
"", 
"static unsigned int <a class=\"id\" href=\"#count_pages_for_highmem\">count_pages_for_highmem</a>(unsigned int <a class=\"id\" href=\"#nr_highmem\">nr_highmem</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#free_highmem\">free_highmem</a> = <a class=\"id\" href=\"#count_free_highmem_pages\">count_free_highmem_pages</a>() + <a class=\"id\" href=\"#alloc_highmem\">alloc_highmem</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#free_highmem\">free_highmem</a> >= <a class=\"id\" href=\"#nr_highmem\">nr_highmem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_highmem\">nr_highmem</a> = 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_highmem\">nr_highmem</a> -= <a class=\"id\" href=\"#free_highmem\">free_highmem</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_highmem\">nr_highmem</a>;", 
"}", 
"#else", 
"static unsigned int", 
"<a class=\"id\" href=\"#count_pages_for_highmem\">count_pages_for_highmem</a>(unsigned int <a class=\"id\" href=\"#nr_highmem\">nr_highmem</a>) { return 0; }", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HIGHMEM */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>enough_free_mem - Make sure we have enough free memory for the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>snapshot image.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#enough_free_mem\">enough_free_mem</a>(unsigned int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, unsigned int <a class=\"id\" href=\"#nr_highmem\">nr_highmem</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#free\">free</a> = <a class=\"id\" href=\"#alloc_normal\">alloc_normal</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_populated_zone\">for_each_populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_highmem\">is_highmem</a>(<a class=\"id\" href=\"#zone\">zone</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a> += <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> += <a class=\"id\" href=\"#count_pages_for_highmem\">count_pages_for_highmem</a>(<a class=\"id\" href=\"#nr_highmem\">nr_highmem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"PM: Normal pages needed: %u + %u, available pages: %u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#PAGES_FOR_IO\">PAGES_FOR_IO</a>, <a class=\"id\" href=\"#free\">free</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#free\">free</a> &gt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a> + <a class=\"id\" href=\"#PAGES_FOR_IO\">PAGES_FOR_IO</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>get_highmem_buffer - if there are some highmem pages in the suspend</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>image, we may need the buffer to copy them and/or load their data.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#get_highmem_buffer\">get_highmem_buffer</a>(int <a class=\"id\" href=\"#safe_needed\">safe_needed</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#get_image_page\">get_image_page</a>(<a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a> | <a class=\"id\" href=\"#__GFP_COLD\">__GFP_COLD</a>, <a class=\"id\" href=\"#safe_needed\">safe_needed</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buffer\">buffer</a> ? 0 : -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>alloc_highmem_image_pages - allocate some highmem pages for the image.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Try to allocate as many pages as needed, but if the number of free</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>highmem pages is lesser than that, allocate them all.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int", 
"<a class=\"id\" href=\"#alloc_highmem_pages\">alloc_highmem_pages</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>, unsigned int <a class=\"id\" href=\"#nr_highmem\">nr_highmem</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#to_alloc\">to_alloc</a> = <a class=\"id\" href=\"#count_free_highmem_pages\">count_free_highmem_pages</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#to_alloc\">to_alloc</a> &gt; <a class=\"id\" href=\"#nr_highmem\">nr_highmem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_alloc\">to_alloc</a> = <a class=\"id\" href=\"#nr_highmem\">nr_highmem</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_highmem\">nr_highmem</a> -= <a class=\"id\" href=\"#to_alloc\">to_alloc</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#to_alloc\">to_alloc</a>-- &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_image_page\">alloc_image_page</a>(<a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_set_bit\">memory_bm_set_bit</a>(<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_highmem\">nr_highmem</a>;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#get_highmem_buffer\">get_highmem_buffer</a>(int <a class=\"id\" href=\"#safe_needed\">safe_needed</a>) { return 0; }", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int", 
"<a class=\"id\" href=\"#alloc_highmem_pages\">alloc_highmem_pages</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>, unsigned int <a class=\"id\" href=\"#n\">n</a>) { return 0; }", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HIGHMEM */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>swsusp_alloc - allocate memory for the suspend image</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>We first try to allocate as many highmem pages as there are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>saveable highmem pages in the system.  If that fails, we allocate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>non-highmem pages for the copies of the remaining highmem ones.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>In this approach it is likely that the copies of highmem pages will</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>also be located in the high memory, because of the way in which</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>copy_data_pages() works.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int", 
"<a class=\"id\" href=\"#swsusp_alloc\">swsusp_alloc</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#orig_bm\">orig_bm</a>, struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#copy_bm\">copy_bm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, unsigned int <a class=\"id\" href=\"#nr_highmem\">nr_highmem</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_highmem\">nr_highmem</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#get_highmem_buffer\">get_highmem_buffer</a>(<a class=\"id\" href=\"#PG_ANY\">PG_ANY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_highmem\">nr_highmem</a> &gt; <a class=\"id\" href=\"#alloc_highmem\">alloc_highmem</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_highmem\">nr_highmem</a> -= <a class=\"id\" href=\"#alloc_highmem\">alloc_highmem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> += <a class=\"id\" href=\"#alloc_highmem_pages\">alloc_highmem_pages</a>(<a class=\"id\" href=\"#copy_bm\">copy_bm</a>, <a class=\"id\" href=\"#nr_highmem\">nr_highmem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_pages\">nr_pages</a> &gt; <a class=\"id\" href=\"#alloc_normal\">alloc_normal</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> -= <a class=\"id\" href=\"#alloc_normal\">alloc_normal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#nr_pages\">nr_pages</a>-- &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_image_page\">alloc_image_page</a>(<a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a> | <a class=\"id\" href=\"#__GFP_COLD\">__GFP_COLD</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_set_bit\">memory_bm_set_bit</a>(<a class=\"id\" href=\"#copy_bm\">copy_bm</a>, <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swsusp_free\">swsusp_free</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> int <a class=\"id\" href=\"#swsusp_save\">swsusp_save</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#nr_highmem\">nr_highmem</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"PM: Creating hibernation image:\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drain_local_pages\">drain_local_pages</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#count_data_pages\">count_data_pages</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_highmem\">nr_highmem</a> = <a class=\"id\" href=\"#count_highmem_pages\">count_highmem_pages</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"PM: Need to copy %u pages\\n\", <a class=\"id\" href=\"#nr_pages\">nr_pages</a> + <a class=\"id\" href=\"#nr_highmem\">nr_highmem</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#enough_free_mem\">enough_free_mem</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#nr_highmem\">nr_highmem</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"PM: Not enough free memory\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#swsusp_alloc\">swsusp_alloc</a>(&amp;<a class=\"id\" href=\"#orig_bm\">orig_bm</a>, &amp;<a class=\"id\" href=\"#copy_bm\">copy_bm</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#nr_highmem\">nr_highmem</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"PM: Memory allocation failed\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* During allocating of suspend pagedir, new cold pages may appear.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Kill them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drain_local_pages\">drain_local_pages</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copy_data_pages\">copy_data_pages</a>(&amp;<a class=\"id\" href=\"#copy_bm\">copy_bm</a>, &amp;<a class=\"id\" href=\"#orig_bm\">orig_bm</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * End of critical section. From now on, we can write to memory,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but we should not touch disk. This specially means we must _not_</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * touch swap space! Except we must write out our image of course.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> += <a class=\"id\" href=\"#nr_highmem\">nr_highmem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_copy_pages\">nr_copy_pages</a> = <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_meta_pages\">nr_meta_pages</a> = <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a> * sizeof(long), <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"PM: Hibernation image created (%d pages copied)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_ARCH_HIBERNATION_HEADER\">CONFIG_ARCH_HIBERNATION_HEADER</a>", 
"static int <a class=\"id\" href=\"#init_header_complete\">init_header_complete</a>(struct <a class=\"id\" href=\"#swsusp_info\">swsusp_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#uts\">uts</a>, <a class=\"id\" href=\"#init_utsname\">init_utsname</a>(), sizeof(struct <a class=\"id\" href=\"#new_utsname\">new_utsname</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#version_code\">version_code</a> = <a class=\"id\" href=\"#LINUX_VERSION_CODE\">LINUX_VERSION_CODE</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static char *<a class=\"id\" href=\"#check_image_kernel\">check_image_kernel</a>(struct <a class=\"id\" href=\"#swsusp_info\">swsusp_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#version_code\">version_code</a> != <a class=\"id\" href=\"#LINUX_VERSION_CODE\">LINUX_VERSION_CODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return \"kernel version\";", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#uts\">uts</a>.<a class=\"id\" href=\"#sysname\">sysname</a>,<a class=\"id\" href=\"#init_utsname\">init_utsname</a>()-><a class=\"id\" href=\"#sysname\">sysname</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return \"system type\";", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#uts\">uts</a>.<a class=\"id\" href=\"#release\">release</a>,<a class=\"id\" href=\"#init_utsname\">init_utsname</a>()-><a class=\"id\" href=\"#release\">release</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return \"kernel release\";", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#uts\">uts</a>.<a class=\"id\" href=\"#version\">version</a>,<a class=\"id\" href=\"#init_utsname\">init_utsname</a>()-><a class=\"id\" href=\"#version\">version</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return \"version\";", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#uts\">uts</a>.<a class=\"id\" href=\"#machine\">machine</a>,<a class=\"id\" href=\"#init_utsname\">init_utsname</a>()-><a class=\"id\" href=\"#machine\">machine</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return \"machine\";", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_ARCH_HIBERNATION_HEADER */</span>", 
"", 
"unsigned long <a class=\"id\" href=\"#snapshot_get_image_size\">snapshot_get_image_size</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_copy_pages\">nr_copy_pages</a> + <a class=\"id\" href=\"#nr_meta_pages\">nr_meta_pages</a> + 1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#init_header\">init_header</a>(struct <a class=\"id\" href=\"#swsusp_info\">swsusp_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
];
xr_frag_insert('l/4c/3bb36bdc83037c84da646d8d74f60730af144a.xr', __xr_tmp);
