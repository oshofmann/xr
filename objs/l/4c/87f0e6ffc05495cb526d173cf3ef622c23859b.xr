var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2001 Momchil Velikov</span>", 
"<span class=\"comment\"> * Portions Copyright (C) 2001 Christoph Hellwig</span>", 
"<span class=\"comment\"> * Copyright (C) 2005 SGI, Christoph Lameter</span>", 
"<span class=\"comment\"> * Copyright (C) 2006 Nick Piggin</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> * modify it under the terms of the GNU General Public License as</span>", 
"<span class=\"comment\"> * published by the Free Software Foundation; either version 2, or (at</span>", 
"<span class=\"comment\"> * your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful, but</span>", 
"<span class=\"comment\"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>", 
"<span class=\"comment\"> * General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#radix\">radix</a>-<a class=\"id\" href=\"#tree\">tree</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a><span class=\"ts\"/>(<a class=\"id\" href=\"#CONFIG_BASE_SMALL\">CONFIG_BASE_SMALL</a> ? 4 : 6)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a><span class=\"ts\"/>3<span class=\"ts\"/><span class=\"comment\">/* For more stressful testing */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RADIX_TREE_MAP_SIZE\">RADIX_TREE_MAP_SIZE</a><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RADIX_TREE_MAP_MASK\">RADIX_TREE_MAP_MASK</a><span class=\"ts\"/>(<a class=\"id\" href=\"#RADIX_TREE_MAP_SIZE\">RADIX_TREE_MAP_SIZE</a>-1)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RADIX_TREE_TAG_LONGS\">RADIX_TREE_TAG_LONGS</a><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#RADIX_TREE_MAP_SIZE\">RADIX_TREE_MAP_SIZE</a> + <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - 1) / <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>)", 
"", 
"struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> {", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Height from the bottom */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a><span class=\"ts\"/><a class=\"id\" href=\"#rcu_head\">rcu_head</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#RADIX_TREE_MAP_SIZE\">RADIX_TREE_MAP_SIZE</a>];", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#tags\">tags</a>[<a class=\"id\" href=\"#RADIX_TREE_MAX_TAGS\">RADIX_TREE_MAX_TAGS</a>][<a class=\"id\" href=\"#RADIX_TREE_TAG_LONGS\">RADIX_TREE_TAG_LONGS</a>];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#radix_tree_path\">radix_tree_path</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RADIX_TREE_INDEX_BITS\">RADIX_TREE_INDEX_BITS</a>  (8 <span class=\"comment\">/* CHAR_BIT */</span> * sizeof(unsigned long))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RADIX_TREE_MAX_PATH\">RADIX_TREE_MAX_PATH</a> (<a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#RADIX_TREE_INDEX_BITS\">RADIX_TREE_INDEX_BITS</a>, \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The height_to_maxindex array needs to be one deeper than the maximum</span>", 
"<span class=\"comment\"> * path as height 0 holds only 1 entry.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#height_to_maxindex\">height_to_maxindex</a>[<a class=\"id\" href=\"#RADIX_TREE_MAX_PATH\">RADIX_TREE_MAX_PATH</a> + 1] <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Radix tree node cache.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#radix_tree_node_cachep\">radix_tree_node_cachep</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Per-cpu pool of preloaded nodes</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#radix_tree_preload\">radix_tree_preload</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#RADIX_TREE_MAX_PATH\">RADIX_TREE_MAX_PATH</a>];", 
"};", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#radix_tree_preload\">radix_tree_preload</a>, <a class=\"id\" href=\"#radix_tree_preloads\">radix_tree_preloads</a>) = { 0, };", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#root_gfp_mask\">root_gfp_mask</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_BITS_MASK\">__GFP_BITS_MASK</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tag_set\">tag_set</a>(struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#node\">node</a>, unsigned int <a class=\"id\" href=\"#tag\">tag</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#tags\">tags</a>[<a class=\"id\" href=\"#tag\">tag</a>]);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tag_clear\">tag_clear</a>(struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#node\">node</a>, unsigned int <a class=\"id\" href=\"#tag\">tag</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#tags\">tags</a>[<a class=\"id\" href=\"#tag\">tag</a>]);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#tag_get\">tag_get</a>(struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#node\">node</a>, unsigned int <a class=\"id\" href=\"#tag\">tag</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#tags\">tags</a>[<a class=\"id\" href=\"#tag\">tag</a>]);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#root_tag_set\">root_tag_set</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>, unsigned int <a class=\"id\" href=\"#tag\">tag</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> |= (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)(1 << (<a class=\"id\" href=\"#tag\">tag</a> + <a class=\"id\" href=\"#__GFP_BITS_SHIFT\">__GFP_BITS_SHIFT</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#root_tag_clear\">root_tag_clear</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>, unsigned int <a class=\"id\" href=\"#tag\">tag</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &= (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)~(1 << (<a class=\"id\" href=\"#tag\">tag</a> + <a class=\"id\" href=\"#__GFP_BITS_SHIFT\">__GFP_BITS_SHIFT</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#root_tag_clear_all\">root_tag_clear_all</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &= <a class=\"id\" href=\"#__GFP_BITS_MASK\">__GFP_BITS_MASK</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#root_tag_get\">root_tag_get</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>, unsigned int <a class=\"id\" href=\"#tag\">tag</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#__force\">__force</a> unsigned)<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; (1 << (<a class=\"id\" href=\"#tag\">tag</a> + <a class=\"id\" href=\"#__GFP_BITS_SHIFT\">__GFP_BITS_SHIFT</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns 1 if any slot in the node has this tag set.</span>", 
"<span class=\"comment\"> * Otherwise returns 0.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#any_tag_set\">any_tag_set</a>(struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#node\">node</a>, unsigned int <a class=\"id\" href=\"#tag\">tag</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#idx\">idx</a> = 0; <a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#RADIX_TREE_TAG_LONGS\">RADIX_TREE_TAG_LONGS</a>; <a class=\"id\" href=\"#idx\">idx</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#tags\">tags</a>[<a class=\"id\" href=\"#tag\">tag</a>][<a class=\"id\" href=\"#idx\">idx</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This assumes that the caller has performed appropriate preallocation, and</span>", 
"<span class=\"comment\"> * that the caller has pinned this thread of control to the current CPU.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *", 
"<a class=\"id\" href=\"#radix_tree_node_alloc\">radix_tree_node_alloc</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> = <a class=\"id\" href=\"#root_gfp_mask\">root_gfp_mask</a>(<a class=\"id\" href=\"#root\">root</a>);", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_preload\">radix_tree_preload</a> *<a class=\"id\" href=\"#rtp\">rtp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Provided the caller has preloaded here, we will always</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * succeed in getting a node here (and never reach</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * kmem_cache_alloc)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtp\">rtp</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#radix_tree_preloads\">radix_tree_preloads</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rtp\">rtp</a>-><a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rtp\">rtp</a>-><a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#rtp\">rtp</a>-><a class=\"id\" href=\"#nr\">nr</a> - 1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtp\">rtp</a>-><a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#rtp\">rtp</a>-><a class=\"id\" href=\"#nr\">nr</a> - 1] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtp\">rtp</a>-><a class=\"id\" href=\"#nr\">nr</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#radix_tree_node_cachep\">radix_tree_node_cachep</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#radix_tree_is_indirect_ptr\">radix_tree_is_indirect_ptr</a>(<a class=\"id\" href=\"#ret\">ret</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#radix_tree_node_rcu_free\">radix_tree_node_rcu_free</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#node\">node</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a>, <a class=\"id\" href=\"#rcu_head\">rcu_head</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * must only free zeroed nodes into the slab. radix_tree_shrink</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can leave us with a non-NULL entry in the first slot, so clear</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that here to make sure.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#RADIX_TREE_MAX_TAGS\">RADIX_TREE_MAX_TAGS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag_clear\">tag_clear</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#i\">i</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#slots\">slots</a>[0] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#radix_tree_node_cachep\">radix_tree_node_cachep</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#radix_tree_node_free\">radix_tree_node_free</a>(struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#rcu_head\">rcu_head</a>, <a class=\"id\" href=\"#radix_tree_node_rcu_free\">radix_tree_node_rcu_free</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Load up this CPU's radix_tree_node buffer with sufficient objects to</span>", 
"<span class=\"comment\"> * ensure that the addition of a single element in the tree cannot fail.  On</span>", 
"<span class=\"comment\"> * success, return zero, with preemption disabled.  On error, return -ENOMEM</span>", 
"<span class=\"comment\"> * with preemption not disabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To make use of this facility, the radix tree must be initialised without</span>", 
"<span class=\"comment\"> * __GFP_WAIT being passed to INIT_RADIX_TREE().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#radix_tree_preload\">radix_tree_preload</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_preload\">radix_tree_preload</a> *<a class=\"id\" href=\"#rtp\">rtp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtp\">rtp</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#radix_tree_preloads\">radix_tree_preloads</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#rtp\">rtp</a>-><a class=\"id\" href=\"#nr\">nr</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#rtp\">rtp</a>-><a class=\"id\" href=\"#nodes\">nodes</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#radix_tree_node_cachep\">radix_tree_node_cachep</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtp\">rtp</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#radix_tree_preloads\">radix_tree_preloads</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rtp\">rtp</a>-><a class=\"id\" href=\"#nr\">nr</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#rtp\">rtp</a>-><a class=\"id\" href=\"#nodes\">nodes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtp\">rtp</a>-><a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#rtp\">rtp</a>-><a class=\"id\" href=\"#nr\">nr</a>++] = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#radix_tree_node_cachep\">radix_tree_node_cachep</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#radix_tree_preload\">radix_tree_preload</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return the maximum key which can be store into a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix tree with height HEIGHT.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#radix_tree_maxindex\">radix_tree_maxindex</a>(unsigned int <a class=\"id\" href=\"#height\">height</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#height_to_maxindex\">height_to_maxindex</a>[<a class=\"id\" href=\"#height\">height</a>];", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Extend a radix tree so it can store key @index.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#radix_tree_extend\">radix_tree_extend</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>, unsigned long <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#height\">height</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tag\">tag</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Figure out what the height should be.  */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#height\">height</a> + 1;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#index\">index</a> &gt; <a class=\"id\" href=\"#radix_tree_maxindex\">radix_tree_maxindex</a>(<a class=\"id\" href=\"#height\">height</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a>++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#height\">height</a> = <a class=\"id\" href=\"#height\">height</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#newheight\">newheight</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#radix_tree_node_alloc\">radix_tree_node_alloc</a>(<a class=\"id\" href=\"#root\">root</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Increase the height.  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#slots\">slots</a>[0] = <a class=\"id\" href=\"#radix_tree_indirect_to_ptr\">radix_tree_indirect_to_ptr</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Propagate the aggregated tag info into the new root */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#tag\">tag</a> = 0; <a class=\"id\" href=\"#tag\">tag</a> &lt; <a class=\"id\" href=\"#RADIX_TREE_MAX_TAGS\">RADIX_TREE_MAX_TAGS</a>; <a class=\"id\" href=\"#tag\">tag</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#root_tag_get\">root_tag_get</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#tag\">tag</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag_set\">tag_set</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#tag\">tag</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newheight\">newheight</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#height\">height</a>+1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#height\">height</a> = <a class=\"id\" href=\"#newheight\">newheight</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#count\">count</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#radix_tree_ptr_to_indirect\">radix_tree_ptr_to_indirect</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#height\">height</a> = <a class=\"id\" href=\"#newheight\">newheight</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#height\">height</a> &gt; <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#height\">height</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix_tree_insert    -    insert into a radix tree</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@root:<span class=\"ts\"/><span class=\"ts\"/>radix tree root</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@index:<span class=\"ts\"/><span class=\"ts\"/>index key</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@item:<span class=\"ts\"/><span class=\"ts\"/>item to insert</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Insert an item into the radix tree at position @index.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#radix_tree_insert\">radix_tree_insert</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#index\">index</a>, void *<a class=\"id\" href=\"#item\">item</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#slot\">slot</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#height\">height</a>, <a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#radix_tree_is_indirect_ptr\">radix_tree_is_indirect_ptr</a>(<a class=\"id\" href=\"#item\">item</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure the tree is high enough.  */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> &gt; <a class=\"id\" href=\"#radix_tree_maxindex\">radix_tree_maxindex</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#height\">height</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#radix_tree_extend\">radix_tree_extend</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#radix_tree_indirect_to_ptr\">radix_tree_indirect_to_ptr</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#height\">height</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> = (<a class=\"id\" href=\"#height\">height</a>-1) * <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* uninitialised var warning */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#height\">height</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#slot\">slot</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Have to add a child node.  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#radix_tree_node_alloc\">radix_tree_node_alloc</a>(<a class=\"id\" href=\"#root\">root</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#height\">height</a> = <a class=\"id\" href=\"#height\">height</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#offset\">offset</a>], <a class=\"id\" href=\"#slot\">slot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_ptr_to_indirect\">radix_tree_ptr_to_indirect</a>(<a class=\"id\" href=\"#slot\">slot</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Go a level down */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = (<a class=\"id\" href=\"#index\">index</a> >> <a class=\"id\" href=\"#shift\">shift</a>) &amp; <a class=\"id\" href=\"#RADIX_TREE_MAP_MASK\">RADIX_TREE_MAP_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#slot\">slot</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#offset\">offset</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> -= <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slot\">slot</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#offset\">offset</a>], <a class=\"id\" href=\"#item\">item</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#tag_get\">tag_get</a>(<a class=\"id\" href=\"#node\">node</a>, 0, <a class=\"id\" href=\"#offset\">offset</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#tag_get\">tag_get</a>(<a class=\"id\" href=\"#node\">node</a>, 1, <a class=\"id\" href=\"#offset\">offset</a>));", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a>, <a class=\"id\" href=\"#item\">item</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#root_tag_get\">root_tag_get</a>(<a class=\"id\" href=\"#root\">root</a>, 0));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#root_tag_get\">root_tag_get</a>(<a class=\"id\" href=\"#root\">root</a>, 1));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#radix_tree_insert\">radix_tree_insert</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * is_slot == 1 : search for the slot.</span>", 
"<span class=\"comment\"> * is_slot == 0 : search for the node.</span>", 
"<span class=\"comment\"> */</span>", 
"static void *<a class=\"id\" href=\"#radix_tree_lookup_element\">radix_tree_lookup_element</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#index\">index</a>, int <a class=\"id\" href=\"#is_slot\">is_slot</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#height\">height</a>, <a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#node\">node</a>, **<a class=\"id\" href=\"#slot\">slot</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#radix_tree_is_indirect_ptr\">radix_tree_is_indirect_ptr</a>(<a class=\"id\" href=\"#node\">node</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#is_slot\">is_slot</a> ? (void *)&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a> : <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#radix_tree_indirect_to_ptr\">radix_tree_indirect_to_ptr</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#height\">height</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> &gt; <a class=\"id\" href=\"#radix_tree_maxindex\">radix_tree_maxindex</a>(<a class=\"id\" href=\"#height\">height</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> = (<a class=\"id\" href=\"#height\">height</a>-1) * <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = (struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> **)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#slots\">slots</a> + ((<a class=\"id\" href=\"#index\">index</a>>><a class=\"id\" href=\"#shift\">shift</a>) &amp; <a class=\"id\" href=\"#RADIX_TREE_MAP_MASK\">RADIX_TREE_MAP_MASK</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(*<a class=\"id\" href=\"#slot\">slot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> -= <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a>--;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#height\">height</a> &gt; 0);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#is_slot\">is_slot</a> ? (void *)<a class=\"id\" href=\"#slot\">slot</a>:<a class=\"id\" href=\"#node\">node</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix_tree_lookup_slot    -    lookup a slot in a radix tree</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@root:<span class=\"ts\"/><span class=\"ts\"/>radix tree root</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@index:<span class=\"ts\"/><span class=\"ts\"/>index key</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns:  the slot corresponding to the position @index in the</span>", 
];
xr_frag_insert('l/4c/87f0e6ffc05495cb526d173cf3ef622c23859b.xr', __xr_tmp);
