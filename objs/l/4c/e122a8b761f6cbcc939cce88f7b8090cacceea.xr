var __xr_tmp = [
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* try_charge() can return NULL to *memcg, taking care of it. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem\">mem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_page_cgroup\">lock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#PageCgroupUsed\">PageCgroupUsed</a>(<a class=\"id\" href=\"#pc\">pc</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page_cgroup\">unlock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_cancel_charge\">mem_cgroup_cancel_charge</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> = <a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We access a page_cgroup asynchronously without lock_page_cgroup().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Especially when a page_cgroup is taken from a page, pc-&gt;mem_cgroup</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is accessed after testing USED bit. To make pc-&gt;mem_cgroup visible</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before USED bit, we need memory barrier here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * See mem_cgroup_add_lru_list(), etc.</span>", 
"<span class=\"comment\"> <span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#ctype\">ctype</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_CACHE\">MEM_CGROUP_CHARGE_TYPE_CACHE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_SHMEM\">MEM_CGROUP_CHARGE_TYPE_SHMEM</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageCgroupCache\">SetPageCgroupCache</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageCgroupUsed\">SetPageCgroupUsed</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_MAPPED\">MEM_CGROUP_CHARGE_TYPE_MAPPED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageCgroupCache\">ClearPageCgroupCache</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageCgroupUsed\">SetPageCgroupUsed</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_charge_statistics\">mem_cgroup_charge_statistics</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#pc\">pc</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page_cgroup\">unlock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * \"charge_statistics\" updated event counter. Then, check it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Insert ancestor (and ancestor's ancestors), to softlimit RB-tree.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if they exceeds softlimit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcg_check_events\">memcg_check_events</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __mem_cgroup_move_account - move account of the page</span>", 
"<span class=\"comment\"> * @pc:<span class=\"ts\"/>page_cgroup of the page.</span>", 
"<span class=\"comment\"> * @from: mem_cgroup which the page is moved from.</span>", 
"<span class=\"comment\"> * @to:<span class=\"ts\"/>mem_cgroup which the page is moved to. @from != @to.</span>", 
"<span class=\"comment\"> * @uncharge: whether we should call uncharge and css_put against @from.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must confirm following.</span>", 
"<span class=\"comment\"> * - page is not on LRU (isolate_page() is useful.)</span>", 
"<span class=\"comment\"> * - the pc is locked, used, and -&gt;mem_cgroup points to @from.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function doesn't do \"charge\" nor css_get to new cgroup. It should be</span>", 
"<span class=\"comment\"> * done by a caller(__mem_cgroup_try_charge would be usefull). If @uncharge is</span>", 
"<span class=\"comment\"> * true, this function does \"uncharge\" from old cgroup, but it doesn't if</span>", 
"<span class=\"comment\"> * @uncharge is false, so a caller should do \"uncharge\".</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#__mem_cgroup_move_account\">__mem_cgroup_move_account</a>(struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#from\">from</a>, struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#uncharge\">uncharge</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#from\">from</a> == <a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#PageCgroupLocked\">PageCgroupLocked</a>(<a class=\"id\" href=\"#pc\">pc</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#PageCgroupUsed\">PageCgroupUsed</a>(<a class=\"id\" href=\"#pc\">pc</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> != <a class=\"id\" href=\"#from\">from</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageCgroupFileMapped\">PageCgroupFileMapped</a>(<a class=\"id\" href=\"#pc\">pc</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Update mapped_file data for mem_cgroup */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_dec\">__this_cpu_dec</a>(<a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#MEM_CGROUP_STAT_FILE_MAPPED\">MEM_CGROUP_STAT_FILE_MAPPED</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_inc\">__this_cpu_inc</a>(<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#MEM_CGROUP_STAT_FILE_MAPPED\">MEM_CGROUP_STAT_FILE_MAPPED</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_charge_statistics\">mem_cgroup_charge_statistics</a>(<a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#pc\">pc</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uncharge\">uncharge</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is not \"cancel\", but cancel_charge does all we need. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_cancel_charge\">mem_cgroup_cancel_charge</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* caller should have done css_get */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> = <a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_charge_statistics\">mem_cgroup_charge_statistics</a>(<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#pc\">pc</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We charges against \"to\" which may not have any tasks. Then, \"to\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can be under rmdir(). But in current implementation, caller of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this function is just force_empty() and move charge, so it's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * garanteed that \"to\" is never removed. So, we don't check rmdir</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * status here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * check whether the @pc is valid for moving account and call</span>", 
"<span class=\"comment\"> * __mem_cgroup_move_account()</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mem_cgroup_move_account\">mem_cgroup_move_account</a>(struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#from\">from</a>, struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#uncharge\">uncharge</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_page_cgroup\">lock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageCgroupUsed\">PageCgroupUsed</a>(<a class=\"id\" href=\"#pc\">pc</a>) && <a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> == <a class=\"id\" href=\"#from\">from</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_move_account\">__mem_cgroup_move_account</a>(<a class=\"id\" href=\"#pc\">pc</a>, <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#uncharge\">uncharge</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page_cgroup\">unlock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * check events</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcg_check_events\">memcg_check_events</a>(<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcg_check_events\">memcg_check_events</a>(<a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * move charges to its parent.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_move_parent\">mem_cgroup_move_parent</a>(struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#child\">child</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cg\">cg</a> = <a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#css\">css</a>.<a class=\"id\" href=\"#cgroup\">cgroup</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#pcg\">pcg</a> = <a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Is ROOT ? */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pcg\">pcg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#get_page_unless_zero\">get_page_unless_zero</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#isolate_lru_page\">isolate_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#put\">put</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#pcg\">pcg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__mem_cgroup_try_charge\">__mem_cgroup_try_charge</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, &amp;<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> || !<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#put_back\">put_back</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mem_cgroup_move_account\">mem_cgroup_move_account</a>(<a class=\"id\" href=\"#pc\">pc</a>, <a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_cancel_charge\">mem_cgroup_cancel_charge</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"<a class=\"id\" href=\"#put_back\">put_back</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#putback_lru_page\">putback_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#put\">put</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Charge the memory controller for page usage.</span>", 
"<span class=\"comment\"> * Return</span>", 
"<span class=\"comment\"> * 0 if the charge was successful</span>", 
"<span class=\"comment\"> * &lt; 0 if the cgroup is over its limit</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mem_cgroup_charge_common\">mem_cgroup_charge_common</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, enum <a class=\"id\" href=\"#charge_type\">charge_type</a> <a class=\"id\" href=\"#ctype\">ctype</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#lookup_page_cgroup\">lookup_page_cgroup</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* can happen at boot */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#pc\">pc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prefetchw\">prefetchw</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__mem_cgroup_try_charge\">__mem_cgroup_try_charge</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, &amp;<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> || !<a class=\"id\" href=\"#mem\">mem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_commit_charge\">__mem_cgroup_commit_charge</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#pc\">pc</a>, <a class=\"id\" href=\"#ctype\">ctype</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#mem_cgroup_newpage_charge\">mem_cgroup_newpage_charge</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_disabled\">mem_cgroup_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageCompound\">PageCompound</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If already mapped, we don't have to account.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If page cache, page-&gt;mapping has address_space.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But page-&gt;mapping may have out-of-use anon_vma pointer,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * detecit it by PageAnon() check. newly-mapped-anon's page-&gt;mapping</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is NULL.</span>", 
"<span class=\"comment\">  <span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_mapped\">page_mapped</a>(<a class=\"id\" href=\"#page\">page</a>) || (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> && !<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = &amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mem_cgroup_charge_common\">mem_cgroup_charge_common</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_MAPPED\">MEM_CGROUP_CHARGE_TYPE_MAPPED</a>);", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#__mem_cgroup_commit_charge_swapin\">__mem_cgroup_commit_charge_swapin</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#ptr\">ptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#charge_type\">charge_type</a> <a class=\"id\" href=\"#ctype\">ctype</a>);", 
"", 
"int <a class=\"id\" href=\"#mem_cgroup_cache_charge\">mem_cgroup_cache_charge</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_disabled\">mem_cgroup_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageCompound\">PageCompound</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Corner case handling. This is called from add_to_page_cache()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in usual. But some FS (shmem) precharges this page before calling it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and call add_to_page_cache() with GFP_NOWAIT.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For GFP_NOWAIT case, the page may be pre-charged before calling</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * add_to_page_cache(). (See shmem.c) check it here and avoid to call</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * charge twice. (It works but has to pay a bit larger cost.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * And when the page is SwapCache, it should take swap information</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * into account. This is under lock_page() now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#lookup_page_cgroup\">lookup_page_cgroup</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pc\">pc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page_cgroup\">lock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageCgroupUsed\">PageCgroupUsed</a>(<a class=\"id\" href=\"#pc\">pc</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page_cgroup\">unlock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page_cgroup\">unlock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = &amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_is_file_cache\">page_is_file_cache</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#mem_cgroup_charge_common\">mem_cgroup_charge_common</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_CACHE\">MEM_CGROUP_CHARGE_TYPE_CACHE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* shmem */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mem_cgroup_try_charge_swapin\">mem_cgroup_try_charge_swapin</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, &amp;<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_commit_charge_swapin\">__mem_cgroup_commit_charge_swapin</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mem\">mem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_SHMEM\">MEM_CGROUP_CHARGE_TYPE_SHMEM</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mem_cgroup_charge_common\">mem_cgroup_charge_common</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_SHMEM\">MEM_CGROUP_CHARGE_TYPE_SHMEM</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * While swap-in, try_charge -&gt; commit or cancel, the page is locked.</span>", 
"<span class=\"comment\"> * And when try_charge() successfully returns, one refcnt to memcg without</span>", 
"<span class=\"comment\"> * struct page_cgroup is acquired. This refcnt will be consumed by</span>", 
"<span class=\"comment\"> * \"commit()\" or removed by \"cancel()\"</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mem_cgroup_try_charge_swapin\">mem_cgroup_try_charge_swapin</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#mask\">mask</a>, struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> **<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_disabled\">mem_cgroup_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#do_swap_account\">do_swap_account</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#charge_cur_mm\">charge_cur_mm</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A racing thread's fault, or swapoff, may have already updated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the pte, and even removed page from swap cache: in those cases</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do_swap_page()'s pte_same() test will fail; but there's also a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * KSM case which does need to charge the page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#charge_cur_mm\">charge_cur_mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#try_get_mem_cgroup_from_page\">try_get_mem_cgroup_from_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem\">mem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#charge_cur_mm\">charge_cur_mm</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__mem_cgroup_try_charge\">__mem_cgroup_try_charge</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css_put\">css_put</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<a class=\"id\" href=\"#charge_cur_mm\">charge_cur_mm</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = &amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__mem_cgroup_try_charge\">__mem_cgroup_try_charge</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#__mem_cgroup_commit_charge_swapin\">__mem_cgroup_commit_charge_swapin</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#ptr\">ptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#charge_type\">charge_type</a> <a class=\"id\" href=\"#ctype\">ctype</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_disabled\">mem_cgroup_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_exclude_rmdir\">cgroup_exclude_rmdir</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#lookup_page_cgroup\">lookup_page_cgroup</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_lru_del_before_commit_swapcache\">mem_cgroup_lru_del_before_commit_swapcache</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_commit_charge\">__mem_cgroup_commit_charge</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#pc\">pc</a>, <a class=\"id\" href=\"#ctype\">ctype</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_lru_add_after_commit_swapcache\">mem_cgroup_lru_add_after_commit_swapcache</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now swap is on-memory. This means this page may be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * counted both as mem and swap....double count.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fix it by uncharging from memsw. Basically, this SwapCache is stable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * under lock_page(). But in do_swap_page()::memory.c, reuse_swap_page()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * may call delete_from_swap_cache() before reach here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#do_swap_account\">do_swap_account</a> && <a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#ent\">ent</a> = {.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#page\">page</a>)};", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#swap_cgroup_record\">swap_cgroup_record</a>(<a class=\"id\" href=\"#ent\">ent</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcg\">memcg</a> = <a class=\"id\" href=\"#mem_cgroup_lookup\">mem_cgroup_lookup</a>(<a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memcg\">memcg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This recorded memcg can be obsolete one. So, avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * calling css_tryget</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem_cgroup_is_root\">mem_cgroup_is_root</a>(<a class=\"id\" href=\"#memcg\">memcg</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_uncharge\">res_counter_uncharge</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_swap_statistics\">mem_cgroup_swap_statistics</a>(<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_put\">mem_cgroup_put</a>(<a class=\"id\" href=\"#memcg\">memcg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At swapin, we may charge account against cgroup which has no tasks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So, rmdir()-&gt;pre_destroy() can be called while we do this charge.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In that case, we need to call pre_destroy() again. check it here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_release_and_wakeup_rmdir\">cgroup_release_and_wakeup_rmdir</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#mem_cgroup_commit_charge_swapin\">mem_cgroup_commit_charge_swapin</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_commit_charge_swapin\">__mem_cgroup_commit_charge_swapin</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#ptr\">ptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_MAPPED\">MEM_CGROUP_CHARGE_TYPE_MAPPED</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#mem_cgroup_cancel_charge_swapin\">mem_cgroup_cancel_charge_swapin</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_disabled\">mem_cgroup_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem\">mem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_cancel_charge\">mem_cgroup_cancel_charge</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#__do_uncharge\">__do_uncharge</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, const enum <a class=\"id\" href=\"#charge_type\">charge_type</a> <a class=\"id\" href=\"#ctype\">ctype</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memcg_batch_info\">memcg_batch_info</a> *<a class=\"id\" href=\"#batch\">batch</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#uncharge_memsw\">uncharge_memsw</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* If swapout, usage of swap doesn't decrease */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#do_swap_account\">do_swap_account</a> || <a class=\"id\" href=\"#ctype\">ctype</a> == <a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_SWAPOUT\">MEM_CGROUP_CHARGE_TYPE_SWAPOUT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uncharge_memsw\">uncharge_memsw</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#batch\">batch</a> = &amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#memcg_batch\">memcg_batch</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In usual, we do css_get() when we remember memcg pointer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But in this case, we keep res-&gt;usage until end of a series of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * uncharges. Then, it's ok to ignore memcg's refcnt.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#batch\">batch</a>-><a class=\"id\" href=\"#memcg\">memcg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#batch\">batch</a>-><a class=\"id\" href=\"#memcg\">memcg</a> = <a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do_batch &gt; 0 when unmapping pages or inode invalidate/truncate.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In those cases, all pages freed continously can be expected to be in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the same cgroup and we have chance to coalesce uncharges.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But we do uncharge one by one if this is killed by OOM(TIF_MEMDIE)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because we want to do uncharge as soon as possible.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#batch\">batch</a>-><a class=\"id\" href=\"#do_batch\">do_batch</a> || <a class=\"id\" href=\"#test_thread_flag\">test_thread_flag</a>(<a class=\"id\" href=\"#TIF_MEMDIE\">TIF_MEMDIE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#direct_uncharge\">direct_uncharge</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In typical case, batch-&gt;memcg == mem. This means we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * merge a series of uncharges to an uncharge of res_counter.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If not, we uncharge res_counter ony by one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#batch\">batch</a>-><a class=\"id\" href=\"#memcg\">memcg</a> != <a class=\"id\" href=\"#mem\">mem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#direct_uncharge\">direct_uncharge</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* remember freed charge and uncharge it later */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#batch\">batch</a>-><a class=\"id\" href=\"#bytes\">bytes</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uncharge_memsw\">uncharge_memsw</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#batch\">batch</a>-><a class=\"id\" href=\"#memsw_bytes\">memsw_bytes</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>return;", 
"<a class=\"id\" href=\"#direct_uncharge\">direct_uncharge</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res_counter_uncharge\">res_counter_uncharge</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uncharge_memsw\">uncharge_memsw</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_uncharge\">res_counter_uncharge</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#batch\">batch</a>-><a class=\"id\" href=\"#memcg\">memcg</a> != <a class=\"id\" href=\"#mem\">mem</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcg_oom_recover\">memcg_oom_recover</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * uncharge if !page_mapped(page)</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *", 
"<a class=\"id\" href=\"#__mem_cgroup_uncharge_common\">__mem_cgroup_uncharge_common</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, enum <a class=\"id\" href=\"#charge_type\">charge_type</a> <a class=\"id\" href=\"#ctype\">ctype</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_disabled\">mem_cgroup_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check if our page_cgroup is valid</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#lookup_page_cgroup\">lookup_page_cgroup</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#pc\">pc</a> || !<a class=\"id\" href=\"#PageCgroupUsed\">PageCgroupUsed</a>(<a class=\"id\" href=\"#pc\">pc</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_page_cgroup\">lock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageCgroupUsed\">PageCgroupUsed</a>(<a class=\"id\" href=\"#pc\">pc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_out\">unlock_out</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#ctype\">ctype</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_MAPPED\">MEM_CGROUP_CHARGE_TYPE_MAPPED</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_DROP\">MEM_CGROUP_CHARGE_TYPE_DROP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* See mem_cgroup_prepare_migration() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_mapped\">page_mapped</a>(<a class=\"id\" href=\"#page\">page</a>) || <a class=\"id\" href=\"#PageCgroupMigration\">PageCgroupMigration</a>(<a class=\"id\" href=\"#pc\">pc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_out\">unlock_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_SWAPOUT\">MEM_CGROUP_CHARGE_TYPE_SWAPOUT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>)) {<span class=\"ts\"/><span class=\"comment\">/* Shared memory */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> && !<a class=\"id\" href=\"#page_is_file_cache\">page_is_file_cache</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_out\">unlock_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#page_mapped\">page_mapped</a>(<a class=\"id\" href=\"#page\">page</a>)) <span class=\"comment\">/* Anon */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_out\">unlock_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_charge_statistics\">mem_cgroup_charge_statistics</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#pc\">pc</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ClearPageCgroupUsed\">ClearPageCgroupUsed</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pc-&gt;mem_cgroup is not cleared here. It will be accessed when it's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * freed from LRU. This is safe because uncharged page is expected not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to be reused (freed soon). Exception is SwapCache, it's handled by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * special functions.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page_cgroup\">unlock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * even after unlock, we have mem-&gt;res.usage here and this memcg</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will never be freed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcg_check_events\">memcg_check_events</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#do_swap_account\">do_swap_account</a> && <a class=\"id\" href=\"#ctype\">ctype</a> == <a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_SWAPOUT\">MEM_CGROUP_CHARGE_TYPE_SWAPOUT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_swap_statistics\">mem_cgroup_swap_statistics</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_get\">mem_cgroup_get</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem_cgroup_is_root\">mem_cgroup_is_root</a>(<a class=\"id\" href=\"#mem\">mem</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__do_uncharge\">__do_uncharge</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#ctype\">ctype</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mem\">mem</a>;", 
"", 
"<a class=\"id\" href=\"#unlock_out\">unlock_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page_cgroup\">unlock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#mem_cgroup_uncharge_page\">mem_cgroup_uncharge_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* early check. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_mapped\">page_mapped</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> && !<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_uncharge_common\">__mem_cgroup_uncharge_common</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_MAPPED\">MEM_CGROUP_CHARGE_TYPE_MAPPED</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#mem_cgroup_uncharge_cache_page\">mem_cgroup_uncharge_cache_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#page_mapped\">page_mapped</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_uncharge_common\">__mem_cgroup_uncharge_common</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_CACHE\">MEM_CGROUP_CHARGE_TYPE_CACHE</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Batch_start/batch_end is called in unmap_page_range/invlidate/trucate.</span>", 
"<span class=\"comment\"> * In that cases, pages are freed continuously and we can expect pages</span>", 
"<span class=\"comment\"> * are in the same memcg. All these calls itself limits the number of</span>", 
"<span class=\"comment\"> * pages freed at once, then uncharge_start/end() is called properly.</span>", 
"<span class=\"comment\"> * This may be called prural(2) times in a context,</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#mem_cgroup_uncharge_start\">mem_cgroup_uncharge_start</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#memcg_batch\">memcg_batch</a>.<a class=\"id\" href=\"#do_batch\">do_batch</a>++;", 
"<span class=\"ts\"/><span class=\"comment\">/* We can do nest. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#memcg_batch\">memcg_batch</a>.<a class=\"id\" href=\"#do_batch\">do_batch</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#memcg_batch\">memcg_batch</a>.<a class=\"id\" href=\"#memcg\">memcg</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#memcg_batch\">memcg_batch</a>.<a class=\"id\" href=\"#bytes\">bytes</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#memcg_batch\">memcg_batch</a>.<a class=\"id\" href=\"#memsw_bytes\">memsw_bytes</a> = 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#mem_cgroup_uncharge_end\">mem_cgroup_uncharge_end</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memcg_batch_info\">memcg_batch_info</a> *<a class=\"id\" href=\"#batch\">batch</a> = &amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#memcg_batch\">memcg_batch</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#batch\">batch</a>-><a class=\"id\" href=\"#do_batch\">do_batch</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#batch\">batch</a>-><a class=\"id\" href=\"#do_batch\">do_batch</a>--;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#batch\">batch</a>-><a class=\"id\" href=\"#do_batch\">do_batch</a>) <span class=\"comment\">/* If stacked, do nothing. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#batch\">batch</a>-><a class=\"id\" href=\"#memcg\">memcg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This \"batch-&gt;memcg\" is valid without any css_get/put etc...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bacause we hide charges behind us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#batch\">batch</a>-><a class=\"id\" href=\"#bytes\">bytes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_uncharge\">res_counter_uncharge</a>(&amp;<a class=\"id\" href=\"#batch\">batch</a>-><a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#batch\">batch</a>-><a class=\"id\" href=\"#bytes\">bytes</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#batch\">batch</a>-><a class=\"id\" href=\"#memsw_bytes\">memsw_bytes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_uncharge\">res_counter_uncharge</a>(&amp;<a class=\"id\" href=\"#batch\">batch</a>-><a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#batch\">batch</a>-><a class=\"id\" href=\"#memsw_bytes\">memsw_bytes</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcg_oom_recover\">memcg_oom_recover</a>(<a class=\"id\" href=\"#batch\">batch</a>-><a class=\"id\" href=\"#memcg\">memcg</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* forget this pointer (for sanity check) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#batch\">batch</a>-><a class=\"id\" href=\"#memcg\">memcg</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SWAP\">CONFIG_SWAP</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * called after __delete_from_swap_cache() and drop \"page\" account.</span>", 
"<span class=\"comment\"> * memcg information is recorded to swap_cgroup of \"ent\"</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#mem_cgroup_uncharge_swapcache\">mem_cgroup_uncharge_swapcache</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#ent\">ent</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#swapout\">swapout</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ctype\">ctype</a> = <a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_SWAPOUT\">MEM_CGROUP_CHARGE_TYPE_SWAPOUT</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#swapout\">swapout</a>) <span class=\"comment\">/* this was a swap cache but the swap is unused ! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctype\">ctype</a> = <a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_DROP\">MEM_CGROUP_CHARGE_TYPE_DROP</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcg\">memcg</a> = <a class=\"id\" href=\"#__mem_cgroup_uncharge_common\">__mem_cgroup_uncharge_common</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#ctype\">ctype</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * record memcg information,  if swapout &amp;&amp; memcg != NULL,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mem_cgroup_get() was called in uncharge().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#do_swap_account\">do_swap_account</a> && <a class=\"id\" href=\"#swapout\">swapout</a> && <a class=\"id\" href=\"#memcg\">memcg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_cgroup_record\">swap_cgroup_record</a>(<a class=\"id\" href=\"#ent\">ent</a>, <a class=\"id\" href=\"#css_id\">css_id</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#css\">css</a>));", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_MEM_RES_CTLR_SWAP\">CONFIG_CGROUP_MEM_RES_CTLR_SWAP</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * called from swap_entry_free(). remove record in swap_cgroup and</span>", 
"<span class=\"comment\"> * uncharge \"memsw\" account.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mem_cgroup_uncharge_swap\">mem_cgroup_uncharge_swap</a>(<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#ent\">ent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#do_swap_account\">do_swap_account</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#swap_cgroup_record\">swap_cgroup_record</a>(<a class=\"id\" href=\"#ent\">ent</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcg\">memcg</a> = <a class=\"id\" href=\"#mem_cgroup_lookup\">mem_cgroup_lookup</a>(<a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#memcg\">memcg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We uncharge this because swap is freed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This memcg can be obsolete one. We avoid calling css_tryget</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem_cgroup_is_root\">mem_cgroup_is_root</a>(<a class=\"id\" href=\"#memcg\">memcg</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_uncharge\">res_counter_uncharge</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_swap_statistics\">mem_cgroup_swap_statistics</a>(<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_put\">mem_cgroup_put</a>(<a class=\"id\" href=\"#memcg\">memcg</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mem_cgroup_move_swap_account - move swap charge and swap_cgroup's record.</span>", 
"<span class=\"comment\"> * @entry: swap entry to be moved</span>", 
"<span class=\"comment\"> * @from:  mem_cgroup which the entry is moved from</span>", 
"<span class=\"comment\"> * @to:  mem_cgroup which the entry is moved to</span>", 
"<span class=\"comment\"> * @need_fixup: whether we should fixup res_counters and refcounts.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It succeeds only when the swap_cgroup's record for this entry is the same</span>", 
"<span class=\"comment\"> * as the mem_cgroup's id of @from.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, -EINVAL on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must have charged to @to, IOW, called res_counter_charge() about</span>", 
"<span class=\"comment\"> * both res and memsw, and called css_get().</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mem_cgroup_move_swap_account\">mem_cgroup_move_swap_account</a>(<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#from\">from</a>, struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#need_fixup\">need_fixup</a>)", 
"{", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#old_id\">old_id</a>, <a class=\"id\" href=\"#new_id\">new_id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_id\">old_id</a> = <a class=\"id\" href=\"#css_id\">css_id</a>(&amp;<a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_id\">new_id</a> = <a class=\"id\" href=\"#css_id\">css_id</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#swap_cgroup_cmpxchg\">swap_cgroup_cmpxchg</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#old_id\">old_id</a>, <a class=\"id\" href=\"#new_id\">new_id</a>) == <a class=\"id\" href=\"#old_id\">old_id</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_swap_statistics\">mem_cgroup_swap_statistics</a>(<a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_swap_statistics\">mem_cgroup_swap_statistics</a>(<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This function is only called from task migration context now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It postpones res_counter and refcount handling till the end</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of task migration(mem_cgroup_clear_mc()) for performance</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * improvement. But we cannot postpone mem_cgroup_get(to)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * because if the process that has been moved to @to does</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * swap-in, the refcount of @to might be decreased to 0.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_get\">mem_cgroup_get</a>(<a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#need_fixup\">need_fixup</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem_cgroup_is_root\">mem_cgroup_is_root</a>(<a class=\"id\" href=\"#from\">from</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_uncharge\">res_counter_uncharge</a>(&amp;<a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_put\">mem_cgroup_put</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we charged both to-&gt;res and to-&gt;memsw, so we should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * uncharge to-&gt;res.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem_cgroup_is_root\">mem_cgroup_is_root</a>(<a class=\"id\" href=\"#to\">to</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_uncharge\">res_counter_uncharge</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mem_cgroup_move_swap_account\">mem_cgroup_move_swap_account</a>(<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#from\">from</a>, struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#need_fixup\">need_fixup</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Before starting migration, account PAGE_SIZE to mem_cgroup that the old</span>", 
"<span class=\"comment\"> * page belongs to.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mem_cgroup_prepare_migration\">mem_cgroup_prepare_migration</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#newpage\">newpage</a>, struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> **<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#charge_type\">charge_type</a> <a class=\"id\" href=\"#ctype\">ctype</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_disabled\">mem_cgroup_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#lookup_page_cgroup\">lookup_page_cgroup</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_page_cgroup\">lock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageCgroupUsed\">PageCgroupUsed</a>(<a class=\"id\" href=\"#pc\">pc</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css_get\">css_get</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * At migrating an anonymous page, its mapcount goes down</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to 0 and uncharge() will be called. But, even if it's fully</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * unmapped, migration may fail and this page has to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * charged again. We set MIGRATION flag here and delay uncharge</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * until end_migration() is called</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Corner Case Thinking</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * A)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * When the old page was mapped as Anon and it's unmap-and-freed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * while migration was ongoing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If unmap finds the old page, uncharge() of it will be delayed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * until end_migration(). If unmap finds a new page, it's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * uncharged when it make mapcount to be 1-&gt;0. If unmap code</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * finds swap_migration_entry, the new page will not be mapped</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and end_migration() will find it(mapcount==0).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * B)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * When the old page was mapped but migraion fails, the kernel</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * remaps it. A charge for it is kept by MIGRATION flag even</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if mapcount goes down to 0. We can do remap successfully</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * without charging it again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * C)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The \"old\" page is under lock_page() until the end of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * migration, so, the old page itself will not be swapped-out.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the new page is swapped out before end_migraton, our</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * hook to usual swap-out path will catch the event.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageCgroupMigration\">SetPageCgroupMigration</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page_cgroup\">unlock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the page is not charged at this point,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we return here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem\">mem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__mem_cgroup_try_charge\">__mem_cgroup_try_charge</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css_put\">css_put</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>);<span class=\"comment\">/* drop extra refcnt */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> || *<a class=\"id\" href=\"#ptr\">ptr</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page_cgroup\">lock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageCgroupMigration\">ClearPageCgroupMigration</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page_cgroup\">unlock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The old page may be fully unmapped while we kept it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_uncharge_page\">mem_cgroup_uncharge_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We charge new page before it's used/mapped. So, even if unlock_page()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is called before end_migration, we can catch all events on this new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page. In the case new page is migrated but not remapped, new page's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mapcount will be finally 0 and we call uncharge in end_migration().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#lookup_page_cgroup\">lookup_page_cgroup</a>(<a class=\"id\" href=\"#newpage\">newpage</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctype\">ctype</a> = <a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_MAPPED\">MEM_CGROUP_CHARGE_TYPE_MAPPED</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#page_is_file_cache\">page_is_file_cache</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctype\">ctype</a> = <a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_CACHE\">MEM_CGROUP_CHARGE_TYPE_CACHE</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctype\">ctype</a> = <a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_SHMEM\">MEM_CGROUP_CHARGE_TYPE_SHMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_commit_charge\">__mem_cgroup_commit_charge</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#pc\">pc</a>, <a class=\"id\" href=\"#ctype\">ctype</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* remove redundant charge if migration failed*/</span>", 
"void <a class=\"id\" href=\"#mem_cgroup_end_migration\">mem_cgroup_end_migration</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#oldpage\">oldpage</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#newpage\">newpage</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#used\">used</a>, *<a class=\"id\" href=\"#unused\">unused</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem\">mem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/* blocks rmdir() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_exclude_rmdir\">cgroup_exclude_rmdir</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* at migration success, oldpage-&gt;mapping is NULL. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#oldpage\">oldpage</a>-><a class=\"id\" href=\"#mapping\">mapping</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#used\">used</a> = <a class=\"id\" href=\"#oldpage\">oldpage</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unused\">unused</a> = <a class=\"id\" href=\"#newpage\">newpage</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#used\">used</a> = <a class=\"id\" href=\"#newpage\">newpage</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unused\">unused</a> = <a class=\"id\" href=\"#oldpage\">oldpage</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We disallowed uncharge of pages under migration because mapcount</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the page goes down to zero, temporarly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Clear the flag and check the page should be charged.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#lookup_page_cgroup\">lookup_page_cgroup</a>(<a class=\"id\" href=\"#oldpage\">oldpage</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_page_cgroup\">lock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ClearPageCgroupMigration\">ClearPageCgroupMigration</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page_cgroup\">unlock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_uncharge_common\">__mem_cgroup_uncharge_common</a>(<a class=\"id\" href=\"#unused\">unused</a>, <a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_FORCE\">MEM_CGROUP_CHARGE_TYPE_FORCE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If a page is a file cache, radix-tree replacement is very atomic</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and we can skip this check. When it was an Anon page, its mapcount</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * goes down to 0. But because we added MIGRATION flage, it's not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * uncharged yet. There are several case but page-&gt;mapcount check</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and USED bit check in mem_cgroup_uncharge_page() will do enough</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * check. (see prepare_charge() also)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#used\">used</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_uncharge_page\">mem_cgroup_uncharge_page</a>(<a class=\"id\" href=\"#used\">used</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At migration, we may charge account against cgroup which has no</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tasks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So, rmdir()-&gt;pre_destroy() can be called while we do this charge.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In that case, we need to call pre_destroy() again. check it here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_release_and_wakeup_rmdir\">cgroup_release_and_wakeup_rmdir</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A call to try to shrink memory usage on charge failure at shmem's swapin.</span>", 
"<span class=\"comment\"> * Calling hierarchical_reclaim is not enough because we should update</span>", 
"<span class=\"comment\"> * last_oom_jiffies to prevent pagefault_out_of_memory from invoking global OOM.</span>", 
"<span class=\"comment\"> * Moreover considering hierarchy, we should reclaim from the mem_over_limit,</span>", 
"<span class=\"comment\"> * not from the memcg which this page would be charged to.</span>", 
"<span class=\"comment\"> * try_charge_swapin does all of these works properly.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mem_cgroup_shmem_charge_fallback\">mem_cgroup_shmem_charge_fallback</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_disabled\">mem_cgroup_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mem_cgroup_try_charge_swapin\">mem_cgroup_try_charge_swapin</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, &amp;<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_cancel_charge_swapin\">mem_cgroup_cancel_charge_swapin</a>(<a class=\"id\" href=\"#mem\">mem</a>); <span class=\"comment\">/* it does !mem check */</span>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#set_limit_mutex\">set_limit_mutex</a>);", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_resize_limit\">mem_cgroup_resize_limit</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retry_count\">retry_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#memswlimit\">memswlimit</a>, <a class=\"id\" href=\"#memlimit\">memlimit</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#children\">children</a> = <a class=\"id\" href=\"#mem_cgroup_count_children\">mem_cgroup_count_children</a>(<a class=\"id\" href=\"#memcg\">memcg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#curusage\">curusage</a>, <a class=\"id\" href=\"#oldusage\">oldusage</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#enlarge\">enlarge</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For keeping hierarchical_reclaim simple, how long we should retry</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is depends on callers. We set our retry-count to be function</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of # of children which we should visit in this loop.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retry_count\">retry_count</a> = <a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_RETRIES\">MEM_CGROUP_RECLAIM_RETRIES</a> * <a class=\"id\" href=\"#children\">children</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oldusage\">oldusage</a> = <a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#RES_USAGE\">RES_USAGE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enlarge\">enlarge</a> = 0;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#retry_count\">retry_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Rather than hide all in some function, I do this in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * open coded manner. You see what this really does.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We have to guarantee mem-&gt;res.limit &lt; mem-&gt;memsw.limit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#set_limit_mutex\">set_limit_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memswlimit\">memswlimit</a> = <a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#RES_LIMIT\">RES_LIMIT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memswlimit\">memswlimit</a> &lt; <a class=\"id\" href=\"#val\">val</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#set_limit_mutex\">set_limit_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memlimit\">memlimit</a> = <a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#RES_LIMIT\">RES_LIMIT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memlimit\">memlimit</a> &lt; <a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enlarge\">enlarge</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#res_counter_set_limit\">res_counter_set_limit</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memswlimit\">memswlimit</a> == <a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw_is_minimum\">memsw_is_minimum</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw_is_minimum\">memsw_is_minimum</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#set_limit_mutex\">set_limit_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_hierarchical_reclaim\">mem_cgroup_hierarchical_reclaim</a>(<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_SHRINK\">MEM_CGROUP_RECLAIM_SHRINK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curusage\">curusage</a> = <a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#RES_USAGE\">RES_USAGE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Usage is reduced ? */</span>", 
"  <span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#curusage\">curusage</a> >= <a class=\"id\" href=\"#oldusage\">oldusage</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retry_count\">retry_count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#oldusage\">oldusage</a> = <a class=\"id\" href=\"#curusage\">curusage</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#enlarge\">enlarge</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcg_oom_recover\">memcg_oom_recover</a>(<a class=\"id\" href=\"#memcg\">memcg</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_resize_memsw_limit\">mem_cgroup_resize_memsw_limit</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retry_count\">retry_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#memlimit\">memlimit</a>, <a class=\"id\" href=\"#memswlimit\">memswlimit</a>, <a class=\"id\" href=\"#oldusage\">oldusage</a>, <a class=\"id\" href=\"#curusage\">curusage</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#children\">children</a> = <a class=\"id\" href=\"#mem_cgroup_count_children\">mem_cgroup_count_children</a>(<a class=\"id\" href=\"#memcg\">memcg</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#enlarge\">enlarge</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* see mem_cgroup_resize_res_limit */</span>", 
" <span class=\"ts\"/><a class=\"id\" href=\"#retry_count\">retry_count</a> = <a class=\"id\" href=\"#children\">children</a> * <a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_RETRIES\">MEM_CGROUP_RECLAIM_RETRIES</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oldusage\">oldusage</a> = <a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#RES_USAGE\">RES_USAGE</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#retry_count\">retry_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Rather than hide all in some function, I do this in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * open coded manner. You see what this really does.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We have to guarantee mem-&gt;res.limit &lt; mem-&gt;memsw.limit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#set_limit_mutex\">set_limit_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memlimit\">memlimit</a> = <a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#RES_LIMIT\">RES_LIMIT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memlimit\">memlimit</a> &gt; <a class=\"id\" href=\"#val\">val</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#set_limit_mutex\">set_limit_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memswlimit\">memswlimit</a> = <a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#RES_LIMIT\">RES_LIMIT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memswlimit\">memswlimit</a> &lt; <a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enlarge\">enlarge</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#res_counter_set_limit\">res_counter_set_limit</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memlimit\">memlimit</a> == <a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw_is_minimum\">memsw_is_minimum</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw_is_minimum\">memsw_is_minimum</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#set_limit_mutex\">set_limit_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_hierarchical_reclaim\">mem_cgroup_hierarchical_reclaim</a>(<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_NOSWAP\">MEM_CGROUP_RECLAIM_NOSWAP</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_SHRINK\">MEM_CGROUP_RECLAIM_SHRINK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curusage\">curusage</a> = <a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#RES_USAGE\">RES_USAGE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Usage is reduced ? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#curusage\">curusage</a> >= <a class=\"id\" href=\"#oldusage\">oldusage</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retry_count\">retry_count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#oldusage\">oldusage</a> = <a class=\"id\" href=\"#curusage\">curusage</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#enlarge\">enlarge</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcg_oom_recover\">memcg_oom_recover</a>(<a class=\"id\" href=\"#memcg\">memcg</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#mem_cgroup_soft_limit_reclaim\">mem_cgroup_soft_limit_reclaim</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *<a class=\"id\" href=\"#mz\">mz</a>, *<a class=\"id\" href=\"#next_mz\">next_mz</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#reclaimed\">reclaimed</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#loop\">loop</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_tree_per_zone\">mem_cgroup_tree_per_zone</a> *<a class=\"id\" href=\"#mctz\">mctz</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#excess\">excess</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mctz\">mctz</a> = <a class=\"id\" href=\"#soft_limit_tree_node_zone\">soft_limit_tree_node_zone</a>(<a class=\"id\" href=\"#zone_to_nid\">zone_to_nid</a>(<a class=\"id\" href=\"#zone\">zone</a>), <a class=\"id\" href=\"#zone_idx\">zone_idx</a>(<a class=\"id\" href=\"#zone\">zone</a>));", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This loop can run a while, specially if mem_cgroup's continuously</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * keep exceeding their soft limit and putting the system under</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pressure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next_mz\">next_mz</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a> = <a class=\"id\" href=\"#next_mz\">next_mz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a> = <a class=\"id\" href=\"#mem_cgroup_largest_soft_limit_node\">mem_cgroup_largest_soft_limit_node</a>(<a class=\"id\" href=\"#mctz\">mctz</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mz\">mz</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reclaimed\">reclaimed</a> = <a class=\"id\" href=\"#mem_cgroup_hierarchical_reclaim\">mem_cgroup_hierarchical_reclaim</a>(<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_SOFT\">MEM_CGROUP_RECLAIM_SOFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> += <a class=\"id\" href=\"#reclaimed\">reclaimed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mctz\">mctz</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we failed to reclaim anything from this memory cgroup</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it is time to move on to the next cgroup</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_mz\">next_mz</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#reclaimed\">reclaimed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Loop until we find yet another one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * By the time we get the soft_limit lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * again, someone might have aded the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * group back on the RB tree. Iterate to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * make sure we get a different mem.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * mem_cgroup_largest_soft_limit_node returns</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * NULL if no other cgroup is present on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the tree</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_mz\">next_mz</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_largest_soft_limit_node\">__mem_cgroup_largest_soft_limit_node</a>(<a class=\"id\" href=\"#mctz\">mctz</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next_mz\">next_mz</a> == <a class=\"id\" href=\"#mz\">mz</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css_put\">css_put</a>(&amp;<a class=\"id\" href=\"#next_mz\">next_mz</a>-><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_mz\">next_mz</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else <span class=\"comment\">/* next_mz == NULL or other memcg */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} while (1);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_remove_exceeded\">__mem_cgroup_remove_exceeded</a>(<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#mz\">mz</a>, <a class=\"id\" href=\"#mctz\">mctz</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#excess\">excess</a> = <a class=\"id\" href=\"#res_counter_soft_limit_excess\">res_counter_soft_limit_excess</a>(&amp;<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * One school of thought says that we should not add</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * back the node to the tree if reclaim returns 0.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * But our reclaim could return 0, simply because due</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to priority we are exposing a smaller subset of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * memory to reclaim from. Consider this as a longer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * term TODO.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If excess == 0, no tree ops */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_insert_exceeded\">__mem_cgroup_insert_exceeded</a>(<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#mz\">mz</a>, <a class=\"id\" href=\"#mctz\">mctz</a>, <a class=\"id\" href=\"#excess\">excess</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mctz\">mctz</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css_put\">css_put</a>(&amp;<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loop\">loop</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Could not reclaim anything and there are no more</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mem cgroups to try or we seem to be looping without</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reclaiming anything.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#next_mz\">next_mz</a> == <a class=\"id\" href=\"#NULL\">NULL</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loop\">loop</a> &gt; <a class=\"id\" href=\"#MEM_CGROUP_MAX_SOFT_LIMIT_RECLAIM_LOOPS\">MEM_CGROUP_MAX_SOFT_LIMIT_RECLAIM_LOOPS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>} while (!<a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next_mz\">next_mz</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css_put\">css_put</a>(&amp;<a class=\"id\" href=\"#next_mz\">next_mz</a>-><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_reclaimed\">nr_reclaimed</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This routine traverse page_cgroup in given list and drop them all.</span>", 
"<span class=\"comment\"> * *And* this routine doesn't reclaim page itself, just removes page_cgroup.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mem_cgroup_force_empty_list\">mem_cgroup_force_empty_list</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>, int <a class=\"id\" href=\"#zid\">zid</a>, enum <a class=\"id\" href=\"#lru_list\">lru_list</a> <a class=\"id\" href=\"#lru\">lru</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *<a class=\"id\" href=\"#mz\">mz</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>, *<a class=\"id\" href=\"#busy\">busy</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#loop\">loop</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a> = &amp;<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#node\">node</a>)-><a class=\"id\" href=\"#node_zones\">node_zones</a>[<a class=\"id\" href=\"#zid\">zid</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a> = <a class=\"id\" href=\"#mem_cgroup_zoneinfo\">mem_cgroup_zoneinfo</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#zid\">zid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#lists\">lists</a>[<a class=\"id\" href=\"#lru\">lru</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loop\">loop</a> = <a class=\"id\" href=\"#MEM_CGROUP_ZSTAT\">MEM_CGROUP_ZSTAT</a>(<a class=\"id\" href=\"#mz\">mz</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* give some margin against EBUSY etc...*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loop\">loop</a> += 256;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#busy\">busy</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#loop\">loop</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#busy\">busy</a> == <a class=\"id\" href=\"#pc\">pc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#lru\">lru</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#busy\">busy</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mem_cgroup_move_parent\">mem_cgroup_move_parent</a>(<a class=\"id\" href=\"#pc\">pc</a>, <a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EBUSY\">EBUSY</a> || <a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* found lock contention or \"pc\" is obsolete. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#busy\">busy</a> = <a class=\"id\" href=\"#pc\">pc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#busy\">busy</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a> && !<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#list\">list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * make mem_cgroup's charge to be 0 if there is no task.</span>", 
"<span class=\"comment\"> * This enables deleting this mem_cgroup.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mem_cgroup_force_empty\">mem_cgroup_force_empty</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#free_all\">free_all</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#zid\">zid</a>, <a class=\"id\" href=\"#shrink\">shrink</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_retries\">nr_retries</a> = <a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_RETRIES\">MEM_CGROUP_RECLAIM_RETRIES</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>.<a class=\"id\" href=\"#cgroup\">cgroup</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css_get\">css_get</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shrink\">shrink</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* should free all ? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#free_all\">free_all</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#try_to_free\">try_to_free</a>;", 
"<a class=\"id\" href=\"#move_account\">move_account</a>:", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cgroup_task_count\">cgroup_task_count</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>) || !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#children\">children</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is for making all *used* pages to be on LRU. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru_add_drain_all\">lru_add_drain_all</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drain_all_stock_sync\">drain_all_stock_sync</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_state\">for_each_node_state</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#zid\">zid</a> = 0; !<a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#zid\">zid</a> &lt; <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>; <a class=\"id\" href=\"#zid\">zid</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#lru_list\">lru_list</a> <a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_lru\">for_each_lru</a>(<a class=\"id\" href=\"#l\">l</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mem_cgroup_force_empty_list\">mem_cgroup_force_empty_list</a>(<a class=\"id\" href=\"#mem\">mem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#zid\">zid</a>, <a class=\"id\" href=\"#l\">l</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcg_oom_recover\">memcg_oom_recover</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* it seems parent cgroup doesn't have enough mem */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#try_to_free\">try_to_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* \"ret\" should also be checked to ensure all lists are empty. */</span>", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#usage\">usage</a> &gt; 0 || <a class=\"id\" href=\"#ret\">ret</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css_put\">css_put</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<a class=\"id\" href=\"#try_to_free\">try_to_free</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* returns EBUSY if there is a task or if we come here twice. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cgroup_task_count\">cgroup_task_count</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>) || !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#children\">children</a>) || <a class=\"id\" href=\"#shrink\">shrink</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* we call try-to-free pages for make this cgroup empty */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lru_add_drain_all\">lru_add_drain_all</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* try to free all pages in this cgroup */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shrink\">shrink</a> = 1;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr_retries\">nr_retries</a> && <a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#usage\">usage</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#progress\">progress</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#progress\">progress</a> = <a class=\"id\" href=\"#try_to_free_mem_cgroup_pages\">try_to_free_mem_cgroup_pages</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#false\">false</a>, <a class=\"id\" href=\"#get_swappiness\">get_swappiness</a>(<a class=\"id\" href=\"#mem\">mem</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#progress\">progress</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_retries\">nr_retries</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* maybe some writeback is necessary */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#congestion_wait\">congestion_wait</a>(<a class=\"id\" href=\"#BLK_RW_ASYNC\">BLK_RW_ASYNC</a>, <a class=\"id\" href=\"#HZ\">HZ</a>/10);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lru_add_drain\">lru_add_drain</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* try move_account...there may be some *locked* pages. */</span>", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#move_account\">move_account</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#mem_cgroup_force_empty_write\">mem_cgroup_force_empty_write</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>, unsigned int <a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mem_cgroup_force_empty\">mem_cgroup_force_empty</a>(<a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cont\">cont</a>), <a class=\"id\" href=\"#true\">true</a>);", 
"}", 
"", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#mem_cgroup_hierarchy_read\">mem_cgroup_hierarchy_read</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cont\">cont</a>)-><a class=\"id\" href=\"#use_hierarchy\">use_hierarchy</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_hierarchy_write\">mem_cgroup_hierarchy_write</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cont\">cont</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#parent_mem\">parent_mem</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent_mem\">parent_mem</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_lock\">cgroup_lock</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If parent's use_hierarchy is set, we can't make any modifications</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the child subtrees. If it is unset, then the change can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * occur, provided the current cgroup has no children.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For the root cgroup, parent_mem is NULL, we allow value to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set if there are no children.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((!<a class=\"id\" href=\"#parent_mem\">parent_mem</a> || !<a class=\"id\" href=\"#parent_mem\">parent_mem</a>-><a class=\"id\" href=\"#use_hierarchy\">use_hierarchy</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#val\">val</a> == 1 || <a class=\"id\" href=\"#val\">val</a> == 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#children\">children</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#use_hierarchy\">use_hierarchy</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_unlock\">cgroup_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#mem_cgroup_idx_data\">mem_cgroup_idx_data</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#mem_cgroup_stat_index\">mem_cgroup_stat_index</a> <a class=\"id\" href=\"#idx\">idx</a>;", 
"};", 
"", 
"static int", 
"<a class=\"id\" href=\"#mem_cgroup_get_idx_stat\">mem_cgroup_get_idx_stat</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_idx_data\">mem_cgroup_idx_data</a> *<a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#val\">val</a> += <a class=\"id\" href=\"#mem_cgroup_read_stat\">mem_cgroup_read_stat</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#mem_cgroup_get_recursive_idx_stat\">mem_cgroup_get_recursive_idx_stat</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#mem_cgroup_stat_index\">mem_cgroup_stat_index</a> <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#s64\">s64</a> *<a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_idx_data\">mem_cgroup_idx_data</a> <a class=\"id\" href=\"#d\">d</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>.<a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>.<a class=\"id\" href=\"#val\">val</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_walk_tree\">mem_cgroup_walk_tree</a>(<a class=\"id\" href=\"#mem\">mem</a>, &amp;<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#mem_cgroup_get_idx_stat\">mem_cgroup_get_idx_stat</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#d\">d</a>.<a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#mem_cgroup_usage\">mem_cgroup_usage</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#swap\">swap</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#idx_val\">idx_val</a>, <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem_cgroup_is_root\">mem_cgroup_is_root</a>(<a class=\"id\" href=\"#mem\">mem</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#swap\">swap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#RES_USAGE\">RES_USAGE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#RES_USAGE\">RES_USAGE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_get_recursive_idx_stat\">mem_cgroup_get_recursive_idx_stat</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#MEM_CGROUP_STAT_CACHE\">MEM_CGROUP_STAT_CACHE</a>, &amp;<a class=\"id\" href=\"#idx_val\">idx_val</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#idx_val\">idx_val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_get_recursive_idx_stat\">mem_cgroup_get_recursive_idx_stat</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#MEM_CGROUP_STAT_RSS\">MEM_CGROUP_STAT_RSS</a>, &amp;<a class=\"id\" href=\"#idx_val\">idx_val</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> += <a class=\"id\" href=\"#idx_val\">idx_val</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#swap\">swap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_get_recursive_idx_stat\">mem_cgroup_get_recursive_idx_stat</a>(<a class=\"id\" href=\"#mem\">mem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_STAT_SWAPOUT\">MEM_CGROUP_STAT_SWAPOUT</a>, &amp;<a class=\"id\" href=\"#idx_val\">idx_val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> += <a class=\"id\" href=\"#idx_val\">idx_val</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#mem_cgroup_read\">mem_cgroup_read</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cont\">cont</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#MEMFILE_TYPE\">MEMFILE_TYPE</a>(<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#private\">private</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#MEMFILE_ATTR\">MEMFILE_ATTR</a>(<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#private\">private</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#_MEM\">_MEM</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#name\">name</a> == <a class=\"id\" href=\"#RES_USAGE\">RES_USAGE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#mem_cgroup_usage\">mem_cgroup_usage</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#_MEMSWAP\">_MEMSWAP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#name\">name</a> == <a class=\"id\" href=\"#RES_USAGE\">RES_USAGE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#mem_cgroup_usage\">mem_cgroup_usage</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The user of this function is...</span>", 
"<span class=\"comment\"> * RES_LIMIT.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mem_cgroup_write\">mem_cgroup_write</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const char *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cont\">cont</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#MEMFILE_TYPE\">MEMFILE_TYPE</a>(<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#private\">private</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#MEMFILE_ATTR\">MEMFILE_ATTR</a>(<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#private\">private</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#name\">name</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RES_LIMIT\">RES_LIMIT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_is_root\">mem_cgroup_is_root</a>(<a class=\"id\" href=\"#memcg\">memcg</a>)) { <span class=\"comment\">/* Can't set limit on root */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This function does all necessary parse...reuse it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#res_counter_memparse_write_strategy\">res_counter_memparse_write_strategy</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, &amp;<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#_MEM\">_MEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mem_cgroup_resize_limit\">mem_cgroup_resize_limit</a>(<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mem_cgroup_resize_memsw_limit\">mem_cgroup_resize_memsw_limit</a>(<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RES_SOFT_LIMIT\">RES_SOFT_LIMIT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#res_counter_memparse_write_strategy\">res_counter_memparse_write_strategy</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, &amp;<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For memsw, soft limits are hard to implement in terms</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of semantics, for now, we support soft limits for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * control without swap</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#_MEM\">_MEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#res_counter_set_soft_limit\">res_counter_set_soft_limit</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>; <span class=\"comment\">/* should be BUG() ? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#memcg_get_hierarchical_limit\">memcg_get_hierarchical_limit</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long long *<a class=\"id\" href=\"#mem_limit\">mem_limit</a>, unsigned long long *<a class=\"id\" href=\"#memsw_limit\">memsw_limit</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgroup\">cgroup</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#min_limit\">min_limit</a>, <a class=\"id\" href=\"#min_memsw_limit\">min_memsw_limit</a>, <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min_limit\">min_limit</a> = <a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#RES_LIMIT\">RES_LIMIT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min_memsw_limit\">min_memsw_limit</a> = <a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#RES_LIMIT\">RES_LIMIT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup\">cgroup</a> = <a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#css\">css</a>.<a class=\"id\" href=\"#cgroup\">cgroup</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#use_hierarchy\">use_hierarchy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#cgroup\">cgroup</a>-><a class=\"id\" href=\"#parent\">parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgroup\">cgroup</a> = <a class=\"id\" href=\"#cgroup\">cgroup</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcg\">memcg</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cgroup\">cgroup</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#use_hierarchy\">use_hierarchy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#RES_LIMIT\">RES_LIMIT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_limit\">min_limit</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#min_limit\">min_limit</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#RES_LIMIT\">RES_LIMIT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_memsw_limit\">min_memsw_limit</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#min_memsw_limit\">min_memsw_limit</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#mem_limit\">mem_limit</a> = <a class=\"id\" href=\"#min_limit\">min_limit</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#memsw_limit\">memsw_limit</a> = <a class=\"id\" href=\"#min_memsw_limit\">min_memsw_limit</a>;", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_reset\">mem_cgroup_reset</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>, unsigned int <a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cont\">cont</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#MEMFILE_TYPE\">MEMFILE_TYPE</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#MEMFILE_ATTR\">MEMFILE_ATTR</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#name\">name</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RES_MAX_USAGE\">RES_MAX_USAGE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#_MEM\">_MEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_reset_max\">res_counter_reset_max</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_reset_max\">res_counter_reset_max</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#memsw\">memsw</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RES_FAILCNT\">RES_FAILCNT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#_MEM\">_MEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_reset_failcnt\">res_counter_reset_failcnt</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_reset_failcnt\">res_counter_reset_failcnt</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#memsw\">memsw</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#mem_cgroup_move_charge_read\">mem_cgroup_move_charge_read</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>)-><a class=\"id\" href=\"#move_charge_at_immigrate\">move_charge_at_immigrate</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"static int <a class=\"id\" href=\"#mem_cgroup_move_charge_write\">mem_cgroup_move_charge_write</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> >= (1 << <a class=\"id\" href=\"#NR_MOVE_TYPE\">NR_MOVE_TYPE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We check this value several times in both in can_attach() and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * attach(), so we need cgroup lock to prevent this value from being</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inconsistent.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_lock\">cgroup_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#move_charge_at_immigrate\">move_charge_at_immigrate</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_unlock\">cgroup_unlock</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#else", 
"static int <a class=\"id\" href=\"#mem_cgroup_move_charge_write\">mem_cgroup_move_charge_write</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"", 
"<span class=\"comment\">/* For read statistics */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MCS_CACHE\">MCS_CACHE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MCS_RSS\">MCS_RSS</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MCS_FILE_MAPPED\">MCS_FILE_MAPPED</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MCS_PGPGIN\">MCS_PGPGIN</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MCS_PGPGOUT\">MCS_PGPGOUT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MCS_SWAP\">MCS_SWAP</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MCS_INACTIVE_ANON\">MCS_INACTIVE_ANON</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MCS_ACTIVE_ANON\">MCS_ACTIVE_ANON</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MCS_INACTIVE_FILE\">MCS_INACTIVE_FILE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MCS_ACTIVE_FILE\">MCS_ACTIVE_FILE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MCS_UNEVICTABLE\">MCS_UNEVICTABLE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NR_MCS_STAT\">NR_MCS_STAT</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#mcs_total_stat\">mcs_total_stat</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#stat\">stat</a>[<a class=\"id\" href=\"#NR_MCS_STAT\">NR_MCS_STAT</a>];", 
"};", 
"", 
"struct {", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#local_name\">local_name</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#total_name\">total_name</a>;", 
"} <a class=\"id\" href=\"#memcg_stat_strings\">memcg_stat_strings</a>[<a class=\"id\" href=\"#NR_MCS_STAT\">NR_MCS_STAT</a>] = {", 
"<span class=\"ts\"/>{\"cache\", \"total_cache\"},", 
"<span class=\"ts\"/>{\"rss\", \"total_rss\"},", 
"<span class=\"ts\"/>{\"mapped_file\", \"total_mapped_file\"},", 
"<span class=\"ts\"/>{\"pgpgin\", \"total_pgpgin\"},", 
"<span class=\"ts\"/>{\"pgpgout\", \"total_pgpgout\"},", 
"<span class=\"ts\"/>{\"swap\", \"total_swap\"},", 
"<span class=\"ts\"/>{\"inactive_anon\", \"total_inactive_anon\"},", 
"<span class=\"ts\"/>{\"active_anon\", \"total_active_anon\"},", 
"<span class=\"ts\"/>{\"inactive_file\", \"total_inactive_file\"},", 
"<span class=\"ts\"/>{\"active_file\", \"total_active_file\"},", 
"<span class=\"ts\"/>{\"unevictable\", \"total_unevictable\"}", 
"};", 
"", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_get_local_stat\">mem_cgroup_get_local_stat</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mcs_total_stat\">mcs_total_stat</a> *<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* per cpu stat */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#mem_cgroup_read_stat\">mem_cgroup_read_stat</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#MEM_CGROUP_STAT_CACHE\">MEM_CGROUP_STAT_CACHE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#stat\">stat</a>[<a class=\"id\" href=\"#MCS_CACHE\">MCS_CACHE</a>] += <a class=\"id\" href=\"#val\">val</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#mem_cgroup_read_stat\">mem_cgroup_read_stat</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#MEM_CGROUP_STAT_RSS\">MEM_CGROUP_STAT_RSS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#stat\">stat</a>[<a class=\"id\" href=\"#MCS_RSS\">MCS_RSS</a>] += <a class=\"id\" href=\"#val\">val</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#mem_cgroup_read_stat\">mem_cgroup_read_stat</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#MEM_CGROUP_STAT_FILE_MAPPED\">MEM_CGROUP_STAT_FILE_MAPPED</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#stat\">stat</a>[<a class=\"id\" href=\"#MCS_FILE_MAPPED\">MCS_FILE_MAPPED</a>] += <a class=\"id\" href=\"#val\">val</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#mem_cgroup_read_stat\">mem_cgroup_read_stat</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#MEM_CGROUP_STAT_PGPGIN_COUNT\">MEM_CGROUP_STAT_PGPGIN_COUNT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#stat\">stat</a>[<a class=\"id\" href=\"#MCS_PGPGIN\">MCS_PGPGIN</a>] += <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#mem_cgroup_read_stat\">mem_cgroup_read_stat</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#MEM_CGROUP_STAT_PGPGOUT_COUNT\">MEM_CGROUP_STAT_PGPGOUT_COUNT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#stat\">stat</a>[<a class=\"id\" href=\"#MCS_PGPGOUT\">MCS_PGPGOUT</a>] += <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#do_swap_account\">do_swap_account</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#mem_cgroup_read_stat\">mem_cgroup_read_stat</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#MEM_CGROUP_STAT_SWAPOUT\">MEM_CGROUP_STAT_SWAPOUT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#stat\">stat</a>[<a class=\"id\" href=\"#MCS_SWAP\">MCS_SWAP</a>] += <a class=\"id\" href=\"#val\">val</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* per zone stat */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#mem_cgroup_get_local_zonestat\">mem_cgroup_get_local_zonestat</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#LRU_INACTIVE_ANON\">LRU_INACTIVE_ANON</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#stat\">stat</a>[<a class=\"id\" href=\"#MCS_INACTIVE_ANON\">MCS_INACTIVE_ANON</a>] += <a class=\"id\" href=\"#val\">val</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#mem_cgroup_get_local_zonestat\">mem_cgroup_get_local_zonestat</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#LRU_ACTIVE_ANON\">LRU_ACTIVE_ANON</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#stat\">stat</a>[<a class=\"id\" href=\"#MCS_ACTIVE_ANON\">MCS_ACTIVE_ANON</a>] += <a class=\"id\" href=\"#val\">val</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#mem_cgroup_get_local_zonestat\">mem_cgroup_get_local_zonestat</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#LRU_INACTIVE_FILE\">LRU_INACTIVE_FILE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#stat\">stat</a>[<a class=\"id\" href=\"#MCS_INACTIVE_FILE\">MCS_INACTIVE_FILE</a>] += <a class=\"id\" href=\"#val\">val</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#mem_cgroup_get_local_zonestat\">mem_cgroup_get_local_zonestat</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#LRU_ACTIVE_FILE\">LRU_ACTIVE_FILE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#stat\">stat</a>[<a class=\"id\" href=\"#MCS_ACTIVE_FILE\">MCS_ACTIVE_FILE</a>] += <a class=\"id\" href=\"#val\">val</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#mem_cgroup_get_local_zonestat\">mem_cgroup_get_local_zonestat</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#LRU_UNEVICTABLE\">LRU_UNEVICTABLE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#stat\">stat</a>[<a class=\"id\" href=\"#MCS_UNEVICTABLE\">MCS_UNEVICTABLE</a>] += <a class=\"id\" href=\"#val\">val</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#mem_cgroup_get_total_stat\">mem_cgroup_get_total_stat</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, struct <a class=\"id\" href=\"#mcs_total_stat\">mcs_total_stat</a> *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_walk_tree\">mem_cgroup_walk_tree</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#mem_cgroup_get_local_stat\">mem_cgroup_get_local_stat</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mem_control_stat_show\">mem_control_stat_show</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#cgroup_map_cb\">cgroup_map_cb</a> *<a class=\"id\" href=\"#cb\">cb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem_cont\">mem_cont</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cont\">cont</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mcs_total_stat\">mcs_total_stat</a> <a class=\"id\" href=\"#mystat\">mystat</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#mystat\">mystat</a>, 0, sizeof(<a class=\"id\" href=\"#mystat\">mystat</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_get_local_stat\">mem_cgroup_get_local_stat</a>(<a class=\"id\" href=\"#mem_cont\">mem_cont</a>, &amp;<a class=\"id\" href=\"#mystat\">mystat</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NR_MCS_STAT\">NR_MCS_STAT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#MCS_SWAP\">MCS_SWAP</a> && !<a class=\"id\" href=\"#do_swap_account\">do_swap_account</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#fill\">fill</a>(<a class=\"id\" href=\"#cb\">cb</a>, <a class=\"id\" href=\"#memcg_stat_strings\">memcg_stat_strings</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#local_name\">local_name</a>, <a class=\"id\" href=\"#mystat\">mystat</a>.<a class=\"id\" href=\"#stat\">stat</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Hierarchical information */</span>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#limit\">limit</a>, <a class=\"id\" href=\"#memsw_limit\">memsw_limit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcg_get_hierarchical_limit\">memcg_get_hierarchical_limit</a>(<a class=\"id\" href=\"#mem_cont\">mem_cont</a>, &amp;<a class=\"id\" href=\"#limit\">limit</a>, &amp;<a class=\"id\" href=\"#memsw_limit\">memsw_limit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#fill\">fill</a>(<a class=\"id\" href=\"#cb\">cb</a>, \"hierarchical_memory_limit\", <a class=\"id\" href=\"#limit\">limit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#do_swap_account\">do_swap_account</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#fill\">fill</a>(<a class=\"id\" href=\"#cb\">cb</a>, \"hierarchical_memsw_limit\", <a class=\"id\" href=\"#memsw_limit\">memsw_limit</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#mystat\">mystat</a>, 0, sizeof(<a class=\"id\" href=\"#mystat\">mystat</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_get_total_stat\">mem_cgroup_get_total_stat</a>(<a class=\"id\" href=\"#mem_cont\">mem_cont</a>, &amp;<a class=\"id\" href=\"#mystat\">mystat</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NR_MCS_STAT\">NR_MCS_STAT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#MCS_SWAP\">MCS_SWAP</a> && !<a class=\"id\" href=\"#do_swap_account\">do_swap_account</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#fill\">fill</a>(<a class=\"id\" href=\"#cb\">cb</a>, <a class=\"id\" href=\"#memcg_stat_strings\">memcg_stat_strings</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#total_name\">total_name</a>, <a class=\"id\" href=\"#mystat\">mystat</a>.<a class=\"id\" href=\"#stat\">stat</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_VM\">CONFIG_DEBUG_VM</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#fill\">fill</a>(<a class=\"id\" href=\"#cb\">cb</a>, \"inactive_ratio\", <a class=\"id\" href=\"#calc_inactive_ratio\">calc_inactive_ratio</a>(<a class=\"id\" href=\"#mem_cont\">mem_cont</a>, <a class=\"id\" href=\"#NULL\">NULL</a>));", 
"", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#zid\">zid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *<a class=\"id\" href=\"#mz\">mz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#recent_rotated\">recent_rotated</a>[2] = {0, 0};", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#recent_scanned\">recent_scanned</a>[2] = {0, 0};", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#nid\">nid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#zid\">zid</a> = 0; <a class=\"id\" href=\"#zid\">zid</a> &lt; <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>; <a class=\"id\" href=\"#zid\">zid</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a> = <a class=\"id\" href=\"#mem_cgroup_zoneinfo\">mem_cgroup_zoneinfo</a>(<a class=\"id\" href=\"#mem_cont\">mem_cont</a>, <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#zid\">zid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#recent_rotated\">recent_rotated</a>[0] +=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>.<a class=\"id\" href=\"#recent_rotated\">recent_rotated</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#recent_rotated\">recent_rotated</a>[1] +=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>.<a class=\"id\" href=\"#recent_rotated\">recent_rotated</a>[1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#recent_scanned\">recent_scanned</a>[0] +=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>.<a class=\"id\" href=\"#recent_scanned\">recent_scanned</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#recent_scanned\">recent_scanned</a>[1] +=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>.<a class=\"id\" href=\"#recent_scanned\">recent_scanned</a>[1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#fill\">fill</a>(<a class=\"id\" href=\"#cb\">cb</a>, \"recent_rotated_anon\", <a class=\"id\" href=\"#recent_rotated\">recent_rotated</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#fill\">fill</a>(<a class=\"id\" href=\"#cb\">cb</a>, \"recent_rotated_file\", <a class=\"id\" href=\"#recent_rotated\">recent_rotated</a>[1]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#fill\">fill</a>(<a class=\"id\" href=\"#cb\">cb</a>, \"recent_scanned_anon\", <a class=\"id\" href=\"#recent_scanned\">recent_scanned</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#fill\">fill</a>(<a class=\"id\" href=\"#cb\">cb</a>, \"recent_scanned_file\", <a class=\"id\" href=\"#recent_scanned\">recent_scanned</a>[1]);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#mem_cgroup_swappiness_read\">mem_cgroup_swappiness_read</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#get_swappiness\">get_swappiness</a>(<a class=\"id\" href=\"#memcg\">memcg</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_swappiness_write\">mem_cgroup_swappiness_write</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a> = <a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &gt; 100)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#parent\">parent</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
];
xr_frag_insert('l/4c/e122a8b761f6cbcc939cce88f7b8090cacceea.xr', __xr_tmp);
