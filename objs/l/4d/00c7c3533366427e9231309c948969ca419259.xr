var __xr_tmp = [
"<span class=\"comment\"> * mm_take_all_locks(). The caller isn't allowed to release the</span>", 
"<span class=\"comment\"> * mmap_sem until mm_drop_all_locks() returns.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * mmap_sem in write mode is required in order to block all operations</span>", 
"<span class=\"comment\"> * that could modify pagetables and free pages without need of</span>", 
"<span class=\"comment\"> * altering the vma layout (for example populate_range() with</span>", 
"<span class=\"comment\"> * nonlinear vmas). It's also needed in write mode to avoid new</span>", 
"<span class=\"comment\"> * anon_vmas to be associated with existing vmas.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A single task can't take more than one mm_take_all_locks() in a row</span>", 
"<span class=\"comment\"> * or it would deadlock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The LSB in anon_vma-&gt;head.next and the AS_MM_ALL_LOCKS bitflag in</span>", 
"<span class=\"comment\"> * mapping-&gt;flags avoid to take the same lock twice, if more than one</span>", 
"<span class=\"comment\"> * vma in this mm is backed by the same anon_vma or address_space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We can take all the locks in random order because the VM code</span>", 
"<span class=\"comment\"> * taking i_mmap_lock or anon_vma-&gt;lock outside the mmap_sem never</span>", 
"<span class=\"comment\"> * takes more than one of them in a row. Secondly we're protected</span>", 
"<span class=\"comment\"> * against a concurrent mm_take_all_locks() by the mm_all_locks_mutex.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * mm_take_all_locks() and mm_drop_all_locks are expensive operations</span>", 
"<span class=\"comment\"> * that may have to take thousand of locks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * mm_take_all_locks() can fail if it's interrupted by signals.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mm_take_all_locks\">mm_take_all_locks</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a> *<a class=\"id\" href=\"#avc\">avc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#down_read_trylock\">down_read_trylock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#mm_all_locks_mutex\">mm_all_locks_mutex</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a>; <a class=\"id\" href=\"#vma\">vma</a>; <a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_lock_mapping\">vm_lock_mapping</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a>; <a class=\"id\" href=\"#vma\">vma</a>; <a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#avc\">avc</a>, &amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>, <a class=\"id\" href=\"#same_vma\">same_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_lock_anon_vma\">vm_lock_anon_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#avc\">avc</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm_drop_all_locks\">mm_drop_all_locks</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#vm_unlock_anon_vma\">vm_unlock_anon_vma</a>(struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(0, (unsigned long *) &amp;<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#head\">head</a>.<a class=\"id\" href=\"#next\">next</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The LSB of head.next can't change to 0 from under</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * us because we hold the mm_all_locks_mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We must however clear the bitflag before unlocking</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the vma so the users using the anon_vma-&gt;head will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * never see our bitflag.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * No need of atomic instructions here, head.next</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * can't change from under us until we release the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * anon_vma-&gt;root-&gt;lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#__test_and_clear_bit\">__test_and_clear_bit</a>(0, (unsigned long *)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#head\">head</a>.<a class=\"id\" href=\"#next\">next</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_unlock\">anon_vma_unlock</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#vm_unlock_mapping\">vm_unlock_mapping</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#AS_MM_ALL_LOCKS\">AS_MM_ALL_LOCKS</a>, &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * AS_MM_ALL_LOCKS can't change to 0 from under us</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * because we hold the mm_all_locks_mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_clear_bit\">test_and_clear_bit</a>(<a class=\"id\" href=\"#AS_MM_ALL_LOCKS\">AS_MM_ALL_LOCKS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The mmap_sem cannot be released by the caller until</span>", 
"<span class=\"comment\"> * mm_drop_all_locks() returns.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mm_drop_all_locks\">mm_drop_all_locks</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a> *<a class=\"id\" href=\"#avc\">avc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#down_read_trylock\">down_read_trylock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#mutex_is_locked\">mutex_is_locked</a>(&amp;<a class=\"id\" href=\"#mm_all_locks_mutex\">mm_all_locks_mutex</a>));", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a>; <a class=\"id\" href=\"#vma\">vma</a>; <a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#avc\">avc</a>, &amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>, <a class=\"id\" href=\"#same_vma\">same_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_unlock_anon_vma\">vm_unlock_anon_vma</a>(<a class=\"id\" href=\"#avc\">avc</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_unlock_mapping\">vm_unlock_mapping</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#mm_all_locks_mutex\">mm_all_locks_mutex</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * initialise the VMA slab</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#mmap_init\">mmap_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#percpu_counter_init\">percpu_counter_init</a>(&amp;<a class=\"id\" href=\"#vm_committed_as\">vm_committed_as</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"}", 
];
xr_frag_insert('l/4d/00c7c3533366427e9231309c948969ca419259.xr', __xr_tmp);
