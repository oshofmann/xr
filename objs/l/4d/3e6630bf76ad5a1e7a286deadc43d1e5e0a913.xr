var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/ext3/namei.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 1992, 1993, 1994, 1995</span>", 
"<span class=\"comment\"> * Remy Card (card@masi.ibp.fr)</span>", 
"<span class=\"comment\"> * Laboratoire MASI - Institut Blaise Pascal</span>", 
"<span class=\"comment\"> * Universite Pierre et Marie Curie (Paris VI)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  linux/fs/minix/namei.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Big-endian to little-endian byte-swapping/bitmaps by</span>", 
"<span class=\"comment\"> *        David S. Miller (davem@caip.rutgers.edu), 1995</span>", 
"<span class=\"comment\"> *  Directory entry file type support and forward compatibility hooks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for B-tree directories by Theodore Ts'o (tytso@mit.edu), 1998</span>", 
"<span class=\"comment\"> *  Hash Tree Directory indexing (c)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Daniel Phillips, 2001</span>", 
"<span class=\"comment\"> *  Hash Tree Directory indexing porting</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Christopher Li, 2002</span>", 
"<span class=\"comment\"> *  Hash Tree Directory indexing cleanup</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Theodore Ts'o, 2002</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jbd\">jbd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ext3_fs\">ext3_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ext3_jbd\">ext3_jbd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fcntl\">fcntl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stat\">stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#quotaops\">quotaops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bio\">bio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"namei.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"xattr.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acl.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * define how far ahead to read directories while searching them.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NAMEI_RA_CHUNKS\">NAMEI_RA_CHUNKS</a>  2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NAMEI_RA_BLOCKS\">NAMEI_RA_BLOCKS</a>  4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NAMEI_RA_SIZE\">NAMEI_RA_SIZE</a>        (<a class=\"id\" href=\"#NAMEI_RA_CHUNKS\">NAMEI_RA_CHUNKS</a> * <a class=\"id\" href=\"#NAMEI_RA_BLOCKS\">NAMEI_RA_BLOCKS</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NAMEI_RA_INDEX\">NAMEI_RA_INDEX</a>(<a class=\"id\" href=\"#c\">c</a>,<a class=\"id\" href=\"#b\">b</a>)  (((<a class=\"id\" href=\"#c\">c</a>) * <a class=\"id\" href=\"#NAMEI_RA_BLOCKS\">NAMEI_RA_BLOCKS</a>) + (<a class=\"id\" href=\"#b\">b</a>))", 
"", 
"static struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#ext3_append\">ext3_append</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#block\">block</a>, int *<a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> >> <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#ext3_bread\">ext3_bread</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, *<a class=\"id\" href=\"#block\">block</a>, 1, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> += <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_disksize\">i_disksize</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_get_write_access\">ext3_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#assert\">assert</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#assert\">assert</a>(<a class=\"id\" href=\"#test\">test</a>) <a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#test\">test</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#DX_DEBUG\">DX_DEBUG</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dxtrace\">dxtrace</a>(<a class=\"id\" href=\"#command\">command</a>) <a class=\"id\" href=\"#command\">command</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dxtrace\">dxtrace</a>(<a class=\"id\" href=\"#command\">command</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#fake_dirent\">fake_dirent</a>", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le16\">__le16</a> <a class=\"id\" href=\"#rec_len\">rec_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#name_len\">name_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#file_type\">file_type</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#dx_countlimit\">dx_countlimit</a>", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le16\">__le16</a> <a class=\"id\" href=\"#limit\">limit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le16\">__le16</a> <a class=\"id\" href=\"#count\">count</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a>", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> <a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> <a class=\"id\" href=\"#block\">block</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * dx_root_info is laid out so that if it should somehow get overlaid by a</span>", 
"<span class=\"comment\"> * dirent the two low bits of the hash version will be zero.  Therefore, the</span>", 
"<span class=\"comment\"> * hash version mod 4 should never be 0.  Sincerely, the paranoia department.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#dx_root\">dx_root</a>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fake_dirent\">fake_dirent</a> <a class=\"id\" href=\"#dot\">dot</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#dot_name\">dot_name</a>[4];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fake_dirent\">fake_dirent</a> <a class=\"id\" href=\"#dotdot\">dotdot</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#dotdot_name\">dotdot_name</a>[4];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dx_root_info\">dx_root_info</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> <a class=\"id\" href=\"#reserved_zero\">reserved_zero</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#hash_version\">hash_version</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#info_length\">info_length</a>; <span class=\"comment\">/* 8 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#indirect_levels\">indirect_levels</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#unused_flags\">unused_flags</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a><span class=\"ts\"/><a class=\"id\" href=\"#entries\">entries</a>[0];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#dx_node\">dx_node</a>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fake_dirent\">fake_dirent</a> <a class=\"id\" href=\"#fake\">fake</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a><span class=\"ts\"/><a class=\"id\" href=\"#entries\">entries</a>[0];", 
"};", 
"", 
"", 
"struct <a class=\"id\" href=\"#dx_frame\">dx_frame</a>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#entries\">entries</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#at\">at</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#dx_map_entry\">dx_map_entry</a>", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#offs\">offs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#size\">size</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#dx_get_block\">dx_get_block</a> (struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>);", 
"static void <a class=\"id\" href=\"#dx_set_block\">dx_set_block</a> (struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, unsigned <a class=\"id\" href=\"#value\">value</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#dx_get_hash\">dx_get_hash</a> (struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>);", 
"static void <a class=\"id\" href=\"#dx_set_hash\">dx_set_hash</a> (struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, unsigned <a class=\"id\" href=\"#value\">value</a>);", 
"static unsigned <a class=\"id\" href=\"#dx_get_count\">dx_get_count</a> (struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#entries\">entries</a>);", 
"static unsigned <a class=\"id\" href=\"#dx_get_limit\">dx_get_limit</a> (struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#entries\">entries</a>);", 
"static void <a class=\"id\" href=\"#dx_set_count\">dx_set_count</a> (struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#entries\">entries</a>, unsigned <a class=\"id\" href=\"#value\">value</a>);", 
"static void <a class=\"id\" href=\"#dx_set_limit\">dx_set_limit</a> (struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#entries\">entries</a>, unsigned <a class=\"id\" href=\"#value\">value</a>);", 
"static unsigned <a class=\"id\" href=\"#dx_root_limit\">dx_root_limit</a> (struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, unsigned <a class=\"id\" href=\"#infosize\">infosize</a>);", 
"static unsigned <a class=\"id\" href=\"#dx_node_limit\">dx_node_limit</a> (struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>);", 
"static struct <a class=\"id\" href=\"#dx_frame\">dx_frame</a> *<a class=\"id\" href=\"#dx_probe\">dx_probe</a>(struct <a class=\"id\" href=\"#qstr\">qstr</a> *<a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#dx_hash_info\">dx_hash_info</a> *<a class=\"id\" href=\"#hinfo\">hinfo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#dx_frame\">dx_frame</a> *<a class=\"id\" href=\"#frame\">frame</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int *<a class=\"id\" href=\"#err\">err</a>);", 
"static void <a class=\"id\" href=\"#dx_release\">dx_release</a> (struct <a class=\"id\" href=\"#dx_frame\">dx_frame</a> *<a class=\"id\" href=\"#frames\">frames</a>);", 
"static int <a class=\"id\" href=\"#dx_make_map\">dx_make_map</a>(struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> *<a class=\"id\" href=\"#de\">de</a>, unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dx_hash_info\">dx_hash_info</a> *<a class=\"id\" href=\"#hinfo\">hinfo</a>, struct <a class=\"id\" href=\"#dx_map_entry\">dx_map_entry</a> <a class=\"id\" href=\"#map\">map</a>[]);", 
"static void <a class=\"id\" href=\"#dx_sort_map\">dx_sort_map</a>(struct <a class=\"id\" href=\"#dx_map_entry\">dx_map_entry</a> *<a class=\"id\" href=\"#map\">map</a>, unsigned <a class=\"id\" href=\"#count\">count</a>);", 
"static struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> *<a class=\"id\" href=\"#dx_move_dirents\">dx_move_dirents</a> (char *<a class=\"id\" href=\"#from\">from</a>, char *<a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dx_map_entry\">dx_map_entry</a> *<a class=\"id\" href=\"#offsets\">offsets</a>, int <a class=\"id\" href=\"#count\">count</a>);", 
"static struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> *<a class=\"id\" href=\"#dx_pack_dirents\">dx_pack_dirents</a>(char *<a class=\"id\" href=\"#base\">base</a>, unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a>);", 
"static void <a class=\"id\" href=\"#dx_insert_block\">dx_insert_block</a> (struct <a class=\"id\" href=\"#dx_frame\">dx_frame</a> *<a class=\"id\" href=\"#frame\">frame</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#block\">block</a>);", 
"static int <a class=\"id\" href=\"#ext3_htree_next_block\">ext3_htree_next_block</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#hash\">hash</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#dx_frame\">dx_frame</a> *<a class=\"id\" href=\"#frame\">frame</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#dx_frame\">dx_frame</a> *<a class=\"id\" href=\"#frames\">frames</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__u32\">__u32</a> *<a class=\"id\" href=\"#start_hash\">start_hash</a>);", 
"static struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> * <a class=\"id\" href=\"#ext3_dx_find_entry\">ext3_dx_find_entry</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#qstr\">qstr</a> *<a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> **<a class=\"id\" href=\"#res_dir\">res_dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#err\">err</a>);", 
"static int <a class=\"id\" href=\"#ext3_dx_add_entry\">ext3_dx_add_entry</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * p is at least 6 bytes before the end of page</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> *", 
"<a class=\"id\" href=\"#ext3_next_entry\">ext3_next_entry</a>(struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> *)((char *)<a class=\"id\" href=\"#p\">p</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_rec_len_from_disk\">ext3_rec_len_from_disk</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rec_len\">rec_len</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Future: use high four bits of block for coalesce-on-delete flags</span>", 
"<span class=\"comment\"> * Mask them off for now.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#dx_get_block\">dx_get_block</a> (struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#block\">block</a>) &amp; 0x00ffffff;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dx_set_block\">dx_set_block</a> (struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, unsigned <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#dx_get_hash\">dx_get_hash</a> (struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#hash\">hash</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dx_set_hash\">dx_set_hash</a> (struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, unsigned <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#dx_get_count\">dx_get_count</a> (struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#entries\">entries</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(((struct <a class=\"id\" href=\"#dx_countlimit\">dx_countlimit</a> *) <a class=\"id\" href=\"#entries\">entries</a>)-><a class=\"id\" href=\"#count\">count</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#dx_get_limit\">dx_get_limit</a> (struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#entries\">entries</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(((struct <a class=\"id\" href=\"#dx_countlimit\">dx_countlimit</a> *) <a class=\"id\" href=\"#entries\">entries</a>)-><a class=\"id\" href=\"#limit\">limit</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dx_set_count\">dx_set_count</a> (struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#entries\">entries</a>, unsigned <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>((struct <a class=\"id\" href=\"#dx_countlimit\">dx_countlimit</a> *) <a class=\"id\" href=\"#entries\">entries</a>)-><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dx_set_limit\">dx_set_limit</a> (struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#entries\">entries</a>, unsigned <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>((struct <a class=\"id\" href=\"#dx_countlimit\">dx_countlimit</a> *) <a class=\"id\" href=\"#entries\">entries</a>)-><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#dx_root_limit\">dx_root_limit</a> (struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, unsigned <a class=\"id\" href=\"#infosize\">infosize</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#entry_space\">entry_space</a> = <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a> - <a class=\"id\" href=\"#EXT3_DIR_REC_LEN\">EXT3_DIR_REC_LEN</a>(1) -", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT3_DIR_REC_LEN\">EXT3_DIR_REC_LEN</a>(2) - <a class=\"id\" href=\"#infosize\">infosize</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#entry_space\">entry_space</a> / sizeof(struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#dx_node_limit\">dx_node_limit</a> (struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#entry_space\">entry_space</a> = <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a> - <a class=\"id\" href=\"#EXT3_DIR_REC_LEN\">EXT3_DIR_REC_LEN</a>(0);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#entry_space\">entry_space</a> / sizeof(struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Debug</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#DX_DEBUG\">DX_DEBUG</a>", 
"static void <a class=\"id\" href=\"#dx_show_index\">dx_show_index</a> (char * <a class=\"id\" href=\"#label\">label</a>, struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#entries\">entries</a>)", 
"{", 
"        int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#dx_get_count\">dx_get_count</a> (<a class=\"id\" href=\"#entries\">entries</a>);", 
"        <a class=\"id\" href=\"#printk\">printk</a>(\"%s index \", <a class=\"id\" href=\"#label\">label</a>);", 
"        for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#n\">n</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"        {", 
"                <a class=\"id\" href=\"#printk\">printk</a>(\"%x->%u \", <a class=\"id\" href=\"#i\">i</a>? <a class=\"id\" href=\"#dx_get_hash\">dx_get_hash</a>(<a class=\"id\" href=\"#entries\">entries</a> + <a class=\"id\" href=\"#i\">i</a>): 0, <a class=\"id\" href=\"#dx_get_block\">dx_get_block</a>(<a class=\"id\" href=\"#entries\">entries</a> + <a class=\"id\" href=\"#i\">i</a>));", 
"        }", 
"        <a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"}", 
"", 
"struct <a class=\"id\" href=\"#stats\">stats</a>", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#names\">names</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#space\">space</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#bcount\">bcount</a>;", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#stats\">stats</a> <a class=\"id\" href=\"#dx_show_leaf\">dx_show_leaf</a>(struct <a class=\"id\" href=\"#dx_hash_info\">dx_hash_info</a> *<a class=\"id\" href=\"#hinfo\">hinfo</a>, struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> *<a class=\"id\" href=\"#de\">de</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#show_names\">show_names</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#names\">names</a> = 0, <a class=\"id\" href=\"#space\">space</a> = 0;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#base\">base</a> = (char *) <a class=\"id\" href=\"#de\">de</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dx_hash_info\">dx_hash_info</a> <a class=\"id\" href=\"#h\">h</a> = *<a class=\"id\" href=\"#hinfo\">hinfo</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"names: \");", 
"<span class=\"ts\"/>while ((char *) <a class=\"id\" href=\"#de\">de</a> &lt; <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#show_names\">show_names</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#name_len\">name_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a>--) <a class=\"id\" href=\"#printk\">printk</a>(\"%c\", *<a class=\"id\" href=\"#name\">name</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3fs_dirhash\">ext3fs_dirhash</a>(<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#name_len\">name_len</a>, &amp;<a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\":%x.%u \", <a class=\"id\" href=\"#h\">h</a>.<a class=\"id\" href=\"#hash\">hash</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       ((char *) <a class=\"id\" href=\"#de\">de</a> - <a class=\"id\" href=\"#base\">base</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#space\">space</a> += <a class=\"id\" href=\"#EXT3_DIR_REC_LEN\">EXT3_DIR_REC_LEN</a>(<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#name_len\">name_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#names\">names</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a> = <a class=\"id\" href=\"#ext3_next_entry\">ext3_next_entry</a>(<a class=\"id\" href=\"#de\">de</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"(%i)\\n\", <a class=\"id\" href=\"#names\">names</a>);", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#stats\">stats</a>) { <a class=\"id\" href=\"#names\">names</a>, <a class=\"id\" href=\"#space\">space</a>, 1 };", 
"}", 
"", 
"struct <a class=\"id\" href=\"#stats\">stats</a> <a class=\"id\" href=\"#dx_show_entries\">dx_show_entries</a>(struct <a class=\"id\" href=\"#dx_hash_info\">dx_hash_info</a> *<a class=\"id\" href=\"#hinfo\">hinfo</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#entries\">entries</a>, int <a class=\"id\" href=\"#levels\">levels</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a> = <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#dx_get_count\">dx_get_count</a> (<a class=\"id\" href=\"#entries\">entries</a>), <a class=\"id\" href=\"#names\">names</a> = 0, <a class=\"id\" href=\"#space\">space</a> = 0, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#bcount\">bcount</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%i indexed blocks...\\n\", <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#entries\">entries</a>++)", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#dx_get_block\">dx_get_block</a>(<a class=\"id\" href=\"#entries\">entries</a>), <a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#i\">i</a>? <a class=\"id\" href=\"#dx_get_hash\">dx_get_hash</a>(<a class=\"id\" href=\"#entries\">entries</a>): 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#range\">range</a> = <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a> - 1? (<a class=\"id\" href=\"#dx_get_hash\">dx_get_hash</a>(<a class=\"id\" href=\"#entries\">entries</a> + 1) - <a class=\"id\" href=\"#hash\">hash</a>): ~<a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#stats\">stats</a> <a class=\"id\" href=\"#stats\">stats</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s%3u:%03u hash %8x/%8x \",<a class=\"id\" href=\"#levels\">levels</a>?\"\":\"   \", <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#range\">range</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#ext3_bread\">ext3_bread</a> (<a class=\"id\" href=\"#NULL\">NULL</a>,<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#block\">block</a>, 0,&amp;<a class=\"id\" href=\"#err\">err</a>))) continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stats\">stats</a> = <a class=\"id\" href=\"#levels\">levels</a>?", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#dx_show_entries\">dx_show_entries</a>(<a class=\"id\" href=\"#hinfo\">hinfo</a>, <a class=\"id\" href=\"#dir\">dir</a>, ((struct <a class=\"id\" href=\"#dx_node\">dx_node</a> *) <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>)-><a class=\"id\" href=\"#entries\">entries</a>, <a class=\"id\" href=\"#levels\">levels</a> - 1):", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#dx_show_leaf\">dx_show_leaf</a>(<a class=\"id\" href=\"#hinfo\">hinfo</a>, (struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> *) <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>, <a class=\"id\" href=\"#blocksize\">blocksize</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#names\">names</a> += <a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#names\">names</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#space\">space</a> += <a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#space\">space</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bcount\">bcount</a> += <a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#bcount\">bcount</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a> (<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bcount\">bcount</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%snames %u, fullness %u (%u%%)\\n\", <a class=\"id\" href=\"#levels\">levels</a>?\"\":\"   \",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#names\">names</a>, <a class=\"id\" href=\"#space\">space</a>/<a class=\"id\" href=\"#bcount\">bcount</a>,(<a class=\"id\" href=\"#space\">space</a>/<a class=\"id\" href=\"#bcount\">bcount</a>)*100/<a class=\"id\" href=\"#blocksize\">blocksize</a>);", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#stats\">stats</a>) { <a class=\"id\" href=\"#names\">names</a>, <a class=\"id\" href=\"#space\">space</a>, <a class=\"id\" href=\"#bcount\">bcount</a>};", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* DX_DEBUG */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Probe for a directory leaf block to search.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * dx_probe can return ERR_BAD_DX_DIR, which means there was a format</span>", 
"<span class=\"comment\"> * error in the directory index, and the caller should fall back to</span>", 
"<span class=\"comment\"> * searching the directory normally.  The callers of dx_probe **MUST**</span>", 
"<span class=\"comment\"> * check for this error code, and make sure it never gets reflected</span>", 
"<span class=\"comment\"> * back to userspace.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#dx_frame\">dx_frame</a> *", 
"<a class=\"id\" href=\"#dx_probe\">dx_probe</a>(struct <a class=\"id\" href=\"#qstr\">qstr</a> *<a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/> struct <a class=\"id\" href=\"#dx_hash_info\">dx_hash_info</a> *<a class=\"id\" href=\"#hinfo\">hinfo</a>, struct <a class=\"id\" href=\"#dx_frame\">dx_frame</a> *<a class=\"id\" href=\"#frame_in\">frame_in</a>, int *<a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#indirect\">indirect</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#at\">at</a>, *<a class=\"id\" href=\"#entries\">entries</a>, *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#q\">q</a>, *<a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dx_root\">dx_root</a> *<a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dx_frame\">dx_frame</a> *<a class=\"id\" href=\"#frame\">frame</a> = <a class=\"id\" href=\"#frame_in\">frame_in</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hash\">hash</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#frame\">frame</a>-><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#ext3_bread\">ext3_bread</a> (<a class=\"id\" href=\"#NULL\">NULL</a>,<a class=\"id\" href=\"#dir\">dir</a>, 0, 0, <a class=\"id\" href=\"#err\">err</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a> = (struct <a class=\"id\" href=\"#dx_root\">dx_root</a> *) <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#hash_version\">hash_version</a> != <a class=\"id\" href=\"#DX_HASH_TEA\">DX_HASH_TEA</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#hash_version\">hash_version</a> != <a class=\"id\" href=\"#DX_HASH_HALF_MD4\">DX_HASH_HALF_MD4</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#hash_version\">hash_version</a> != <a class=\"id\" href=\"#DX_HASH_LEGACY\">DX_HASH_LEGACY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_warning\">ext3_warning</a>(<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     \"Unrecognised inode hash code %d\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#hash_version\">hash_version</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ERR_BAD_DX_DIR\">ERR_BAD_DX_DIR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hinfo\">hinfo</a>-><a class=\"id\" href=\"#hash_version\">hash_version</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#hash_version\">hash_version</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hinfo\">hinfo</a>-><a class=\"id\" href=\"#hash_version\">hash_version</a> <= <a class=\"id\" href=\"#DX_HASH_TEA\">DX_HASH_TEA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hinfo\">hinfo</a>-><a class=\"id\" href=\"#hash_version\">hash_version</a> += <a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)-><a class=\"id\" href=\"#s_hash_unsigned\">s_hash_unsigned</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hinfo\">hinfo</a>-><a class=\"id\" href=\"#seed\">seed</a> = <a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)-><a class=\"id\" href=\"#s_hash_seed\">s_hash_seed</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3fs_dirhash\">ext3fs_dirhash</a>(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#hinfo\">hinfo</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#hinfo\">hinfo</a>-><a class=\"id\" href=\"#hash\">hash</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#unused_flags\">unused_flags</a> &amp; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_warning\">ext3_warning</a>(<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     \"Unimplemented inode hash flags: %#06x\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#unused_flags\">unused_flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ERR_BAD_DX_DIR\">ERR_BAD_DX_DIR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#indirect\">indirect</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#indirect_levels\">indirect_levels</a>) &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_warning\">ext3_warning</a>(<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     \"Unimplemented inode hash depth: %#06x\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#indirect_levels\">indirect_levels</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ERR_BAD_DX_DIR\">ERR_BAD_DX_DIR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entries\">entries</a> = (struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *) (((char *)&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#info\">info</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#info_length\">info_length</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dx_get_limit\">dx_get_limit</a>(<a class=\"id\" href=\"#entries\">entries</a>) != <a class=\"id\" href=\"#dx_root_limit\">dx_root_limit</a>(<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#info_length\">info_length</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_warning\">ext3_warning</a>(<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     \"dx entry: limit != root limit\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ERR_BAD_DX_DIR\">ERR_BAD_DX_DIR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dxtrace\">dxtrace</a> (<a class=\"id\" href=\"#printk\">printk</a>(\"Look up %x\", <a class=\"id\" href=\"#hash\">hash</a>));", 
"<span class=\"ts\"/>while (1)", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#dx_get_count\">dx_get_count</a>(<a class=\"id\" href=\"#entries\">entries</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#count\">count</a> || <a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#dx_get_limit\">dx_get_limit</a>(<a class=\"id\" href=\"#entries\">entries</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_warning\">ext3_warning</a>(<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     \"dx entry: no count or count > limit\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ERR_BAD_DX_DIR\">ERR_BAD_DX_DIR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail2\">fail2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#entries\">entries</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#entries\">entries</a> + <a class=\"id\" href=\"#count\">count</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#p\">p</a> <= <a class=\"id\" href=\"#q\">q</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#p\">p</a> + (<a class=\"id\" href=\"#q\">q</a> - <a class=\"id\" href=\"#p\">p</a>)/2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dxtrace\">dxtrace</a>(<a class=\"id\" href=\"#printk\">printk</a>(\".\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dx_get_hash\">dx_get_hash</a>(<a class=\"id\" href=\"#m\">m</a>) &gt; <a class=\"id\" href=\"#hash\">hash</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#m\">m</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#m\">m</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (0) <span class=\"comment\">// linear search cross check</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#count\">count</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#at\">at</a> = <a class=\"id\" href=\"#entries\">entries</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dxtrace\">dxtrace</a>(<a class=\"id\" href=\"#printk\">printk</a>(\",\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dx_get_hash\">dx_get_hash</a>(++<a class=\"id\" href=\"#at\">at</a>) &gt; <a class=\"id\" href=\"#hash\">hash</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#at\">at</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#assert\">assert</a> (<a class=\"id\" href=\"#at\">at</a> == <a class=\"id\" href=\"#p\">p</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#at\">at</a> = <a class=\"id\" href=\"#p\">p</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dxtrace\">dxtrace</a>(<a class=\"id\" href=\"#printk\">printk</a>(\" %x->%u\\n\", <a class=\"id\" href=\"#at\">at</a> == <a class=\"id\" href=\"#entries\">entries</a>? 0: <a class=\"id\" href=\"#dx_get_hash\">dx_get_hash</a>(<a class=\"id\" href=\"#at\">at</a>), <a class=\"id\" href=\"#dx_get_block\">dx_get_block</a>(<a class=\"id\" href=\"#at\">at</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frame\">frame</a>-><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frame\">frame</a>-><a class=\"id\" href=\"#entries\">entries</a> = <a class=\"id\" href=\"#entries\">entries</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frame\">frame</a>-><a class=\"id\" href=\"#at\">at</a> = <a class=\"id\" href=\"#at\">at</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#indirect\">indirect</a>--) return <a class=\"id\" href=\"#frame\">frame</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#ext3_bread\">ext3_bread</a> (<a class=\"id\" href=\"#NULL\">NULL</a>,<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#dx_get_block\">dx_get_block</a>(<a class=\"id\" href=\"#at\">at</a>), 0, <a class=\"id\" href=\"#err\">err</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail2\">fail2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#at\">at</a> = <a class=\"id\" href=\"#entries\">entries</a> = ((struct <a class=\"id\" href=\"#dx_node\">dx_node</a> *) <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>)-><a class=\"id\" href=\"#entries\">entries</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dx_get_limit\">dx_get_limit</a>(<a class=\"id\" href=\"#entries\">entries</a>) != <a class=\"id\" href=\"#dx_node_limit\">dx_node_limit</a> (<a class=\"id\" href=\"#dir\">dir</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_warning\">ext3_warning</a>(<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     \"dx entry: limit != node limit\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ERR_BAD_DX_DIR\">ERR_BAD_DX_DIR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail2\">fail2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frame\">frame</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frame\">frame</a>-><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#fail2\">fail2</a>:", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#frame\">frame</a> >= <a class=\"id\" href=\"#frame_in\">frame_in</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#frame\">frame</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frame\">frame</a>--;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#err\">err</a> == <a class=\"id\" href=\"#ERR_BAD_DX_DIR\">ERR_BAD_DX_DIR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_warning\">ext3_warning</a>(<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     \"Corrupt dir inode %ld, running e2fsck is \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     \"recommended.\", <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#dx_release\">dx_release</a> (struct <a class=\"id\" href=\"#dx_frame\">dx_frame</a> *<a class=\"id\" href=\"#frames\">frames</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#frames\">frames</a>[0].<a class=\"id\" href=\"#bh\">bh</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (((struct <a class=\"id\" href=\"#dx_root\">dx_root</a> *) <a class=\"id\" href=\"#frames\">frames</a>[0].<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>)-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#indirect_levels\">indirect_levels</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#frames\">frames</a>[1].<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#frames\">frames</a>[0].<a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function increments the frame pointer to search the next leaf</span>", 
"<span class=\"comment\"> * block, and reads in the necessary intervening nodes if the search</span>", 
"<span class=\"comment\"> * should be necessary.  Whether or not the search is necessary is</span>", 
"<span class=\"comment\"> * controlled by the hash parameter.  If the hash value is even, then</span>", 
"<span class=\"comment\"> * the search is only continued if the next block starts with that</span>", 
"<span class=\"comment\"> * hash value.  This is used if we are searching for a specific file.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the hash value is HASH_NB_ALWAYS, then always go to the next block.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function returns 1 if the caller should continue to search,</span>", 
"<span class=\"comment\"> * or 0 if it should not.  If there is an error reading one of the</span>", 
"<span class=\"comment\"> * index blocks, it will a negative error code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If start_hash is non-null, it will be filled in with the starting</span>", 
"<span class=\"comment\"> * hash of the next page.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext3_htree_next_block\">ext3_htree_next_block</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#hash\">hash</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#dx_frame\">dx_frame</a> *<a class=\"id\" href=\"#frame\">frame</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#dx_frame\">dx_frame</a> *<a class=\"id\" href=\"#frames\">frames</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__u32\">__u32</a> *<a class=\"id\" href=\"#start_hash\">start_hash</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dx_frame\">dx_frame</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#num_frames\">num_frames</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#bhash\">bhash</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#frame\">frame</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Find the next leaf page by incrementing the frame pointer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we run out of entries in the interior node, loop around and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * increment pointer in the parent node.  When we break out of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this loop, num_frames indicates the number of interior</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * nodes need to be read.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (++(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#at\">at</a>) &lt; <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#entries\">entries</a> + <a class=\"id\" href=\"#dx_get_count\">dx_get_count</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#entries\">entries</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#frames\">frames</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_frames\">num_frames</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the hash is 1, then continue only if the next page has a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * continuation hash of any value.  This is used for readdir</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * handling.  Otherwise, check to see if the hash matches the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * desired contiuation hash.  If it doesn't, return since</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there's no point to read in the successive index pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bhash\">bhash</a> = <a class=\"id\" href=\"#dx_get_hash\">dx_get_hash</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#at\">at</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start_hash\">start_hash</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#start_hash\">start_hash</a> = <a class=\"id\" href=\"#bhash\">bhash</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#hash\">hash</a> &amp; 1) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#bhash\">bhash</a> &amp; ~1) != <a class=\"id\" href=\"#hash\">hash</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the hash is HASH_NB_ALWAYS, we always go to the next</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * block so no check is necessary</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#num_frames\">num_frames</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#ext3_bread\">ext3_bread</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#dx_get_block\">dx_get_block</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#at\">at</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      0, &amp;<a class=\"id\" href=\"#err\">err</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>; <span class=\"comment\">/* Failure */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a> (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#at\">at</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#entries\">entries</a> = ((struct <a class=\"id\" href=\"#dx_node\">dx_node</a> *) <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>)-><a class=\"id\" href=\"#entries\">entries</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function fills a red-black tree with information from a</span>", 
"<span class=\"comment\"> * directory block.  It returns the number directory entries loaded</span>", 
"<span class=\"comment\"> * into the tree.  If there is an error it is returned in err.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#htree_dirblock_to_tree\">htree_dirblock_to_tree</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#dir_file\">dir_file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, int <a class=\"id\" href=\"#block\">block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#dx_hash_info\">dx_hash_info</a> *<a class=\"id\" href=\"#hinfo\">hinfo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#start_hash\">start_hash</a>, <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#start_minor_hash\">start_minor_hash</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> *<a class=\"id\" href=\"#de\">de</a>, *<a class=\"id\" href=\"#top\">top</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dxtrace\">dxtrace</a>(<a class=\"id\" href=\"#printk\">printk</a>(\"In htree dirblock_to_tree: block %d\\n\", <a class=\"id\" href=\"#block\">block</a>));", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#ext3_bread\">ext3_bread</a> (<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#block\">block</a>, 0, &amp;<a class=\"id\" href=\"#err\">err</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a> = (struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> *) <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#top\">top</a> = (struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> *) ((char *) <a class=\"id\" href=\"#de\">de</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#EXT3_DIR_REC_LEN\">EXT3_DIR_REC_LEN</a>(0));", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#de\">de</a> &lt; <a class=\"id\" href=\"#top\">top</a>; <a class=\"id\" href=\"#de\">de</a> = <a class=\"id\" href=\"#ext3_next_entry\">ext3_next_entry</a>(<a class=\"id\" href=\"#de\">de</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext3_check_dir_entry\">ext3_check_dir_entry</a>(\"htree_dirblock_to_tree\", <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#de\">de</a>, <a class=\"id\" href=\"#bh\">bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#block\">block</a><<<a class=\"id\" href=\"#EXT3_BLOCK_SIZE_BITS\">EXT3_BLOCK_SIZE_BITS</a>(<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+((char *)<a class=\"id\" href=\"#de\">de</a> - <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* On error, skip the f_pos to the next block. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dir_file\">dir_file</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a> = (<a class=\"id\" href=\"#dir_file\">dir_file</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a> - 1)) + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a> (<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3fs_dirhash\">ext3fs_dirhash</a>(<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#name_len\">name_len</a>, <a class=\"id\" href=\"#hinfo\">hinfo</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#hinfo\">hinfo</a>-><a class=\"id\" href=\"#hash\">hash</a> &lt; <a class=\"id\" href=\"#start_hash\">start_hash</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#hinfo\">hinfo</a>-><a class=\"id\" href=\"#hash\">hash</a> == <a class=\"id\" href=\"#start_hash\">start_hash</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#hinfo\">hinfo</a>-><a class=\"id\" href=\"#minor_hash\">minor_hash</a> &lt; <a class=\"id\" href=\"#start_minor_hash\">start_minor_hash</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#inode\">inode</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_htree_store_dirent\">ext3_htree_store_dirent</a>(<a class=\"id\" href=\"#dir_file\">dir_file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#hinfo\">hinfo</a>-><a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#hinfo\">hinfo</a>-><a class=\"id\" href=\"#minor_hash\">minor_hash</a>, <a class=\"id\" href=\"#de\">de</a>)) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function fills a red-black tree with information from a</span>", 
"<span class=\"comment\"> * directory.  We start scanning the directory in hash order, starting</span>", 
"<span class=\"comment\"> * at start_hash and start_minor_hash.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function returns the number of entries inserted into the tree,</span>", 
"<span class=\"comment\"> * or a negative error code.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ext3_htree_fill_tree\">ext3_htree_fill_tree</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#dir_file\">dir_file</a>, <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#start_hash\">start_hash</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#start_minor_hash\">start_minor_hash</a>, <a class=\"id\" href=\"#__u32\">__u32</a> *<a class=\"id\" href=\"#next_hash\">next_hash</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dx_hash_info\">dx_hash_info</a> <a class=\"id\" href=\"#hinfo\">hinfo</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> *<a class=\"id\" href=\"#de\">de</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dx_frame\">dx_frame</a> <a class=\"id\" href=\"#frames\">frames</a>[2], *<a class=\"id\" href=\"#frame\">frame</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#hashval\">hashval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dxtrace\">dxtrace</a>(<a class=\"id\" href=\"#printk\">printk</a>(\"In htree_fill_tree, start hash: %x:%x\\n\", <a class=\"id\" href=\"#start_hash\">start_hash</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#start_minor_hash\">start_minor_hash</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dir\">dir</a> = <a class=\"id\" href=\"#dir_file\">dir_file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#dir\">dir</a>)-><a class=\"id\" href=\"#i_flags\">i_flags</a> &amp; <a class=\"id\" href=\"#EXT3_INDEX_FL\">EXT3_INDEX_FL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hinfo\">hinfo</a>.<a class=\"id\" href=\"#hash_version\">hash_version</a> = <a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)-><a class=\"id\" href=\"#s_def_hash_version\">s_def_hash_version</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hinfo\">hinfo</a>.<a class=\"id\" href=\"#hash_version\">hash_version</a> <= <a class=\"id\" href=\"#DX_HASH_TEA\">DX_HASH_TEA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hinfo\">hinfo</a>.<a class=\"id\" href=\"#hash_version\">hash_version</a> +=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)-><a class=\"id\" href=\"#s_hash_unsigned\">s_hash_unsigned</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hinfo\">hinfo</a>.<a class=\"id\" href=\"#seed\">seed</a> = <a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)-><a class=\"id\" href=\"#s_hash_seed\">s_hash_seed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#htree_dirblock_to_tree\">htree_dirblock_to_tree</a>(<a class=\"id\" href=\"#dir_file\">dir_file</a>, <a class=\"id\" href=\"#dir\">dir</a>, 0, &amp;<a class=\"id\" href=\"#hinfo\">hinfo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#start_hash\">start_hash</a>, <a class=\"id\" href=\"#start_minor_hash\">start_minor_hash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#next_hash\">next_hash</a> = ~0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hinfo\">hinfo</a>.<a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#start_hash\">start_hash</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hinfo\">hinfo</a>.<a class=\"id\" href=\"#minor_hash\">minor_hash</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#frame\">frame</a> = <a class=\"id\" href=\"#dx_probe\">dx_probe</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#dir_file\">dir_file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, &amp;<a class=\"id\" href=\"#hinfo\">hinfo</a>, <a class=\"id\" href=\"#frames\">frames</a>, &amp;<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#frame\">frame</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add '.' and '..' from the htree header */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#start_hash\">start_hash</a> && !<a class=\"id\" href=\"#start_minor_hash\">start_minor_hash</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a> = (struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> *) <a class=\"id\" href=\"#frames\">frames</a>[0].<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_htree_store_dirent\">ext3_htree_store_dirent</a>(<a class=\"id\" href=\"#dir_file\">dir_file</a>, 0, 0, <a class=\"id\" href=\"#de\">de</a>)) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start_hash\">start_hash</a> &lt; 2 || (<a class=\"id\" href=\"#start_hash\">start_hash</a> ==2 && <a class=\"id\" href=\"#start_minor_hash\">start_minor_hash</a>==0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a> = (struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> *) <a class=\"id\" href=\"#frames\">frames</a>[0].<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a> = <a class=\"id\" href=\"#ext3_next_entry\">ext3_next_entry</a>(<a class=\"id\" href=\"#de\">de</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_htree_store_dirent\">ext3_htree_store_dirent</a>(<a class=\"id\" href=\"#dir_file\">dir_file</a>, 2, 0, <a class=\"id\" href=\"#de\">de</a>)) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#dx_get_block\">dx_get_block</a>(<a class=\"id\" href=\"#frame\">frame</a>-><a class=\"id\" href=\"#at\">at</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#htree_dirblock_to_tree\">htree_dirblock_to_tree</a>(<a class=\"id\" href=\"#dir_file\">dir_file</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#block\">block</a>, &amp;<a class=\"id\" href=\"#hinfo\">hinfo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#start_hash\">start_hash</a>, <a class=\"id\" href=\"#start_minor_hash\">start_minor_hash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hashval\">hashval</a> = ~0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext3_htree_next_block\">ext3_htree_next_block</a>(<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#HASH_NB_ALWAYS\">HASH_NB_ALWAYS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#frame\">frame</a>, <a class=\"id\" href=\"#frames\">frames</a>, &amp;<a class=\"id\" href=\"#hashval\">hashval</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#next_hash\">next_hash</a> = <a class=\"id\" href=\"#hashval\">hashval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Stop if:  (a) there are no more entries, or</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (b) we have inserted at least one entry and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * next hash value is not a continuation</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ret\">ret</a> == 0) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#count\">count</a> && ((<a class=\"id\" href=\"#hashval\">hashval</a> &amp; 1) == 0)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dx_release\">dx_release</a>(<a class=\"id\" href=\"#frames\">frames</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dxtrace\">dxtrace</a>(<a class=\"id\" href=\"#printk\">printk</a>(\"Fill tree: returned %d entries, next hash: %x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#count\">count</a>, *<a class=\"id\" href=\"#next_hash\">next_hash</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"<a class=\"id\" href=\"#errout\">errout</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dx_release\">dx_release</a>(<a class=\"id\" href=\"#frames\">frames</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#err\">err</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Directory block splitting, compacting</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Create map of hash values, offsets, and sizes, stored at end of block.</span>", 
"<span class=\"comment\"> * Returns number of entries mapped.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#dx_make_map\">dx_make_map</a>(struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> *<a class=\"id\" href=\"#de\">de</a>, unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dx_hash_info\">dx_hash_info</a> *<a class=\"id\" href=\"#hinfo\">hinfo</a>, struct <a class=\"id\" href=\"#dx_map_entry\">dx_map_entry</a> *<a class=\"id\" href=\"#map_tail\">map_tail</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#base\">base</a> = (char *) <a class=\"id\" href=\"#de\">de</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dx_hash_info\">dx_hash_info</a> <a class=\"id\" href=\"#h\">h</a> = *<a class=\"id\" href=\"#hinfo\">hinfo</a>;", 
"", 
"<span class=\"ts\"/>while ((char *) <a class=\"id\" href=\"#de\">de</a> &lt; <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#blocksize\">blocksize</a>)", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#name_len\">name_len</a> && <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3fs_dirhash\">ext3fs_dirhash</a>(<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#name_len\">name_len</a>, &amp;<a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_tail\">map_tail</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_tail\">map_tail</a>-><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#h\">h</a>.<a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_tail\">map_tail</a>-><a class=\"id\" href=\"#offs\">offs</a> = (<a class=\"id\" href=\"#u16\">u16</a>) ((char *) <a class=\"id\" href=\"#de\">de</a> - <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_tail\">map_tail</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#rec_len\">rec_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* XXX: do we need to check rec_len == 0 case? -Chris */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a> = <a class=\"id\" href=\"#ext3_next_entry\">ext3_next_entry</a>(<a class=\"id\" href=\"#de\">de</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Sort map by hash value */</span>", 
"static void <a class=\"id\" href=\"#dx_sort_map\">dx_sort_map</a> (struct <a class=\"id\" href=\"#dx_map_entry\">dx_map_entry</a> *<a class=\"id\" href=\"#map\">map</a>, unsigned <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"        struct <a class=\"id\" href=\"#dx_map_entry\">dx_map_entry</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#q\">q</a>, *<a class=\"id\" href=\"#top\">top</a> = <a class=\"id\" href=\"#map\">map</a> + <a class=\"id\" href=\"#count\">count</a> - 1;", 
"        int <a class=\"id\" href=\"#more\">more</a>;", 
"        <span class=\"comment\">/* Combsort until bubble sort doesn't suck */</span>", 
"        while (<a class=\"id\" href=\"#count\">count</a> &gt; 2)", 
"<span class=\"ts\"/>{", 
"                <a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#count\">count</a>*10/13;", 
"                if (<a class=\"id\" href=\"#count\">count</a> - 9 &lt; 2) <span class=\"comment\">/* 9, 10 -&gt; 11 */</span>", 
"                        <a class=\"id\" href=\"#count\">count</a> = 11;", 
"                for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#top\">top</a>, <a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#p\">p</a> - <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#q\">q</a> >= <a class=\"id\" href=\"#map\">map</a>; <a class=\"id\" href=\"#p\">p</a>--, <a class=\"id\" href=\"#q\">q</a>--)", 
"                        if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#hash\">hash</a> &lt; <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#hash\">hash</a>)", 
"                                <a class=\"id\" href=\"#swap\">swap</a>(*<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#q\">q</a>);", 
"        }", 
"        <span class=\"comment\">/* Garden variety bubble sort */</span>", 
"        do {", 
"                <a class=\"id\" href=\"#more\">more</a> = 0;", 
"                <a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#top\">top</a>;", 
"                while (<a class=\"id\" href=\"#q\">q</a>-- &gt; <a class=\"id\" href=\"#map\">map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>{", 
"                        if (<a class=\"id\" href=\"#q\">q</a>[1].<a class=\"id\" href=\"#hash\">hash</a> >= <a class=\"id\" href=\"#q\">q</a>[0].<a class=\"id\" href=\"#hash\">hash</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"                        <a class=\"id\" href=\"#swap\">swap</a>(*(<a class=\"id\" href=\"#q\">q</a>+1), *<a class=\"id\" href=\"#q\">q</a>);", 
"                        <a class=\"id\" href=\"#more\">more</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while(<a class=\"id\" href=\"#more\">more</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#dx_insert_block\">dx_insert_block</a>(struct <a class=\"id\" href=\"#dx_frame\">dx_frame</a> *<a class=\"id\" href=\"#frame\">frame</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#block\">block</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#entries\">entries</a> = <a class=\"id\" href=\"#frame\">frame</a>-><a class=\"id\" href=\"#entries\">entries</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *<a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#frame\">frame</a>-><a class=\"id\" href=\"#at\">at</a>, *<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#old\">old</a> + 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#dx_get_count\">dx_get_count</a>(<a class=\"id\" href=\"#entries\">entries</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert\">assert</a>(<a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#dx_get_limit\">dx_get_limit</a>(<a class=\"id\" href=\"#entries\">entries</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert\">assert</a>(<a class=\"id\" href=\"#old\">old</a> &lt; <a class=\"id\" href=\"#entries\">entries</a> + <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#new\">new</a> + 1, <a class=\"id\" href=\"#new\">new</a>, (char *)(<a class=\"id\" href=\"#entries\">entries</a> + <a class=\"id\" href=\"#count\">count</a>) - (char *)(<a class=\"id\" href=\"#new\">new</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dx_set_hash\">dx_set_hash</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dx_set_block\">dx_set_block</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#block\">block</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dx_set_count\">dx_set_count</a>(<a class=\"id\" href=\"#entries\">entries</a>, <a class=\"id\" href=\"#count\">count</a> + 1);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ext3_update_dx_flag\">ext3_update_dx_flag</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#EXT3_HAS_COMPAT_FEATURE\">EXT3_HAS_COMPAT_FEATURE</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#EXT3_FEATURE_COMPAT_DIR_INDEX\">EXT3_FEATURE_COMPAT_DIR_INDEX</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_flags\">i_flags</a> &= ~<a class=\"id\" href=\"#EXT3_INDEX_FL\">EXT3_INDEX_FL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NOTE! unlike strncmp, ext3_match returns 1 for success, 0 for failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * `len &lt;= EXT3_NAME_LEN' is guaranteed by caller.</span>", 
"<span class=\"comment\"> * `de != NULL' is guaranteed by caller.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ext3_match\">ext3_match</a> (int <a class=\"id\" href=\"#len\">len</a>, const char * const <a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> * <a class=\"id\" href=\"#de\">de</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> != <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#name_len\">name_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns 0 if not found, -1 on failure, and 1 on success</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#search_dirblock\">search_dirblock</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> * <a class=\"id\" href=\"#bh\">bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#qstr\">qstr</a> *<a class=\"id\" href=\"#child\">child</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> ** <a class=\"id\" href=\"#res_dir\">res_dir</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> * <a class=\"id\" href=\"#de\">de</a>;", 
"<span class=\"ts\"/>char * <a class=\"id\" href=\"#dlimit\">dlimit</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#de_len\">de_len</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#namelen\">namelen</a> = <a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a> = (struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> *) <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dlimit\">dlimit</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a> + <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>;", 
"<span class=\"ts\"/>while ((char *) <a class=\"id\" href=\"#de\">de</a> &lt; <a class=\"id\" href=\"#dlimit\">dlimit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this code is executed quadratically often */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* do minimal checking `by hand' */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((char *) <a class=\"id\" href=\"#de\">de</a> + <a class=\"id\" href=\"#namelen\">namelen</a> <= <a class=\"id\" href=\"#dlimit\">dlimit</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ext3_match\">ext3_match</a> (<a class=\"id\" href=\"#namelen\">namelen</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#de\">de</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* found a match - just to be sure, do a full check */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext3_check_dir_entry\">ext3_check_dir_entry</a>(\"ext3_find_entry\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#de\">de</a>, <a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#offset\">offset</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#res_dir\">res_dir</a> = <a class=\"id\" href=\"#de\">de</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* prevent looping on a bad block */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#de_len\">de_len</a> = <a class=\"id\" href=\"#ext3_rec_len_from_disk\">ext3_rec_len_from_disk</a>(<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#rec_len\">rec_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#de_len\">de_len</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#de_len\">de_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a> = (struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> *) ((char *) <a class=\"id\" href=\"#de\">de</a> + <a class=\"id\" href=\"#de_len\">de_len</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext3_find_entry()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * finds an entry in the specified directory with the wanted name. It</span>", 
"<span class=\"comment\"> * returns the cache buffer in which the entry was found, and the entry</span>", 
"<span class=\"comment\"> * itself (as a parameter - res_dir). It does NOT read the inode of the</span>", 
"<span class=\"comment\"> * entry - you'll have to do that yourself if you want to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The returned buffer_head has -&gt;b_count elevated.  The caller is expected</span>", 
"<span class=\"comment\"> * to brelse() it when appropriate.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#ext3_find_entry\">ext3_find_entry</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#qstr\">qstr</a> *<a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> **<a class=\"id\" href=\"#res_dir\">res_dir</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> * <a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> * <a class=\"id\" href=\"#bh_use\">bh_use</a>[<a class=\"id\" href=\"#NAMEI_RA_SIZE\">NAMEI_RA_SIZE</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> * <a class=\"id\" href=\"#bh\">bh</a>, *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#b\">b</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ra_max\">ra_max</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Number of bh's in the readahead</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   buffer, bh_use[] */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ra_ptr\">ra_ptr</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Current index into readahead</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   buffer */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num\">num</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nblocks\">nblocks</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#namelen\">namelen</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#res_dir\">res_dir</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#namelen\">namelen</a> = <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#namelen\">namelen</a> &gt; <a class=\"id\" href=\"#EXT3_NAME_LEN\">EXT3_NAME_LEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_dx\">is_dx</a>(<a class=\"id\" href=\"#dir\">dir</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#ext3_dx_find_entry\">ext3_dx_find_entry</a>(<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#res_dir\">res_dir</a>, &amp;<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * On success, or if the error was file not found,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * return.  Otherwise, fall back to doing a search the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * old fashioned way.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a> || (<a class=\"id\" href=\"#err\">err</a> != <a class=\"id\" href=\"#ERR_BAD_DX_DIR\">ERR_BAD_DX_DIR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dxtrace\">dxtrace</a>(<a class=\"id\" href=\"#printk\">printk</a>(\"ext3_find_entry: dx failed, falling back\\n\"));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nblocks\">nblocks</a> = <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_size\">i_size</a> >> <a class=\"id\" href=\"#EXT3_BLOCK_SIZE_BITS\">EXT3_BLOCK_SIZE_BITS</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#dir\">dir</a>)-><a class=\"id\" href=\"#i_dir_start_lookup\">i_dir_start_lookup</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#nblocks\">nblocks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We deal with the read-ahead logic here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ra_ptr\">ra_ptr</a> >= <a class=\"id\" href=\"#ra_max\">ra_max</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Refill the readahead buffer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ra_ptr\">ra_ptr</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#ra_max\">ra_max</a> = 0; <a class=\"id\" href=\"#ra_max\">ra_max</a> &lt; <a class=\"id\" href=\"#NAMEI_RA_SIZE\">NAMEI_RA_SIZE</a>; <a class=\"id\" href=\"#ra_max\">ra_max</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Terminate if we reach the end of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * directory and must wrap, or if our</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * search has finished at this block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#b\">b</a> >= <a class=\"id\" href=\"#nblocks\">nblocks</a> || (<a class=\"id\" href=\"#num\">num</a> && <a class=\"id\" href=\"#block\">block</a> == <a class=\"id\" href=\"#start\">start</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh_use\">bh_use</a>[<a class=\"id\" href=\"#ra_max\">ra_max</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#ext3_getblk\">ext3_getblk</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#b\">b</a>++, 0, &amp;<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh_use\">bh_use</a>[<a class=\"id\" href=\"#ra_max\">ra_max</a>] = <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ll_rw_block\">ll_rw_block</a>(<a class=\"id\" href=\"#READ_META\">READ_META</a>, 1, &amp;<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh_use\">bh_use</a>[<a class=\"id\" href=\"#ra_ptr\">ra_ptr</a>++]) == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_buffer\">wait_on_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* read error, skip block &amp; hope for the best */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_error\">ext3_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, \"reading directory #%lu \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"offset %lu\", <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>, <a class=\"id\" href=\"#block\">block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#search_dirblock\">search_dirblock</a>(<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#block\">block</a> << <a class=\"id\" href=\"#EXT3_BLOCK_SIZE_BITS\">EXT3_BLOCK_SIZE_BITS</a>(<a class=\"id\" href=\"#sb\">sb</a>), <a class=\"id\" href=\"#res_dir\">res_dir</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#dir\">dir</a>)-><a class=\"id\" href=\"#i_dir_start_lookup\">i_dir_start_lookup</a> = <a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup_and_exit\">cleanup_and_exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup_and_exit\">cleanup_and_exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (++<a class=\"id\" href=\"#block\">block</a> >= <a class=\"id\" href=\"#nblocks\">nblocks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = 0;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#block\">block</a> != <a class=\"id\" href=\"#start\">start</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the directory has grown while we were searching, then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * search the last part of the directory before giving up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#nblocks\">nblocks</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nblocks\">nblocks</a> = <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_size\">i_size</a> >> <a class=\"id\" href=\"#EXT3_BLOCK_SIZE_BITS\">EXT3_BLOCK_SIZE_BITS</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#block\">block</a> &lt; <a class=\"id\" href=\"#nblocks\">nblocks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#cleanup_and_exit\">cleanup_and_exit</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Clean up the read-ahead blocks */</span>", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#ra_ptr\">ra_ptr</a> &lt; <a class=\"id\" href=\"#ra_max\">ra_max</a>; <a class=\"id\" href=\"#ra_ptr\">ra_ptr</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a> (<a class=\"id\" href=\"#bh_use\">bh_use</a>[<a class=\"id\" href=\"#ra_ptr\">ra_ptr</a>]);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> * <a class=\"id\" href=\"#ext3_dx_find_entry\">ext3_dx_find_entry</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#qstr\">qstr</a> *<a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> **<a class=\"id\" href=\"#res_dir\">res_dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> * <a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dx_hash_info\">dx_hash_info</a><span class=\"ts\"/><a class=\"id\" href=\"#hinfo\">hinfo</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dx_frame\">dx_frame</a> <a class=\"id\" href=\"#frames\">frames</a>[2], *<a class=\"id\" href=\"#frame\">frame</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> *<a class=\"id\" href=\"#de\">de</a>, *<a class=\"id\" href=\"#top\">top</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#namelen\">namelen</a> = <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* NFS may look up \"..\" - look at dx_root directory block */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#namelen\">namelen</a> &gt; 2 || <a class=\"id\" href=\"#name\">name</a>[0] != '.'|| (<a class=\"id\" href=\"#namelen\">namelen</a> == 2 && <a class=\"id\" href=\"#name\">name</a>[1] != '.')) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#frame\">frame</a> = <a class=\"id\" href=\"#dx_probe\">dx_probe</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#dir\">dir</a>, &amp;<a class=\"id\" href=\"#hinfo\">hinfo</a>, <a class=\"id\" href=\"#frames\">frames</a>, <a class=\"id\" href=\"#err\">err</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frame\">frame</a> = <a class=\"id\" href=\"#frames\">frames</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frame\">frame</a>-><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for dx_release() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frame\">frame</a>-><a class=\"id\" href=\"#at\">at</a> = (struct <a class=\"id\" href=\"#dx_entry\">dx_entry</a> *)<a class=\"id\" href=\"#frames\">frames</a>;<span class=\"ts\"/><span class=\"comment\">/* hack for zero entry*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dx_set_block\">dx_set_block</a>(<a class=\"id\" href=\"#frame\">frame</a>-><a class=\"id\" href=\"#at\">at</a>, 0);<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* dx_root block is 0 */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#hinfo\">hinfo</a>.<a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#dx_get_block\">dx_get_block</a>(<a class=\"id\" href=\"#frame\">frame</a>-><a class=\"id\" href=\"#at\">at</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#ext3_bread\">ext3_bread</a> (<a class=\"id\" href=\"#NULL\">NULL</a>,<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#block\">block</a>, 0, <a class=\"id\" href=\"#err\">err</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a> = (struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> *) <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#top\">top</a> = (struct <a class=\"id\" href=\"#ext3_dir_entry_2\">ext3_dir_entry_2</a> *) ((char *) <a class=\"id\" href=\"#de\">de</a> + <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#EXT3_DIR_REC_LEN\">EXT3_DIR_REC_LEN</a>(0));", 
"<span class=\"ts\"/><span class=\"ts\"/>for (; <a class=\"id\" href=\"#de\">de</a> &lt; <a class=\"id\" href=\"#top\">top</a>; <a class=\"id\" href=\"#de\">de</a> = <a class=\"id\" href=\"#ext3_next_entry\">ext3_next_entry</a>(<a class=\"id\" href=\"#de\">de</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#off\">off</a> = (<a class=\"id\" href=\"#block\">block</a> << <a class=\"id\" href=\"#EXT3_BLOCK_SIZE_BITS\">EXT3_BLOCK_SIZE_BITS</a>(<a class=\"id\" href=\"#sb\">sb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  + ((char *) <a class=\"id\" href=\"#de\">de</a> - <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext3_check_dir_entry\">ext3_check_dir_entry</a>(<a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#de\">de</a>, <a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#off\">off</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ERR_BAD_DX_DIR\">ERR_BAD_DX_DIR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ext3_match\">ext3_match</a>(<a class=\"id\" href=\"#namelen\">namelen</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#de\">de</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#res_dir\">res_dir</a> = <a class=\"id\" href=\"#de\">de</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dx_release\">dx_release</a>(<a class=\"id\" href=\"#frames\">frames</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a> (<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check to see if we should continue to search */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#ext3_htree_next_block\">ext3_htree_next_block</a>(<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#frame\">frame</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#frames\">frames</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_warning\">ext3_warning</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     \"error reading index page in directory #%lu\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#retval\">retval</a> == 1);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<a class=\"id\" href=\"#errout\">errout</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dxtrace\">dxtrace</a>(<a class=\"id\" href=\"#printk\">printk</a>(\"%s not found\\n\", <a class=\"id\" href=\"#name\">name</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dx_release\">dx_release</a> (<a class=\"id\" href=\"#frames\">frames</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#ext3_lookup\">ext3_lookup</a>(struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a>;", 
];
xr_frag_insert('l/4d/3e6630bf76ad5a1e7a286deadc43d1e5e0a913.xr', __xr_tmp);
