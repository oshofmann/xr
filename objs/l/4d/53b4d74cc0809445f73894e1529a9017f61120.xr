var __xr_tmp = [
"", 
"<span class=\"comment\">/* Pretend that each entry is of this size in directory's i_size */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BOGO_DIRENT_SIZE\">BOGO_DIRENT_SIZE</a> 20", 
"", 
"<span class=\"comment\">/* Flag allocation requirements to shmem_getpage and shmem_swp_alloc */</span>", 
"enum <a class=\"id\" href=\"#sgp_type\">sgp_type</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SGP_READ\">SGP_READ</a>,<span class=\"ts\"/><span class=\"comment\">/* don't exceed i_size, don't allocate page */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SGP_CACHE\">SGP_CACHE</a>,<span class=\"ts\"/><span class=\"comment\">/* don't exceed i_size, may allocate page */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SGP_DIRTY\">SGP_DIRTY</a>,<span class=\"ts\"/><span class=\"comment\">/* like SGP_CACHE, but set new page dirty */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SGP_WRITE\">SGP_WRITE</a>,<span class=\"ts\"/><span class=\"comment\">/* may exceed i_size, may allocate page */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TMPFS\">CONFIG_TMPFS</a>", 
"static unsigned long <a class=\"id\" href=\"#shmem_default_max_blocks\">shmem_default_max_blocks</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#totalram_pages\">totalram_pages</a> / 2;", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#shmem_default_max_inodes\">shmem_default_max_inodes</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#totalram_pages\">totalram_pages</a> - <a class=\"id\" href=\"#totalhigh_pages\">totalhigh_pages</a>, <a class=\"id\" href=\"#totalram_pages\">totalram_pages</a> / 2);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#shmem_getpage\">shmem_getpage</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, unsigned long <a class=\"id\" href=\"#idx\">idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pagep\">pagep</a>, enum <a class=\"id\" href=\"#sgp_type\">sgp_type</a> <a class=\"id\" href=\"#sgp\">sgp</a>, int *<a class=\"id\" href=\"#type\">type</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#shmem_dir_alloc\">shmem_dir_alloc</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The above definition of ENTRIES_PER_PAGE, and the use of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * BLOCKS_PER_PAGE on indirect pages, assume PAGE_CACHE_SIZE:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * might be reconsidered if it ever diverges from PAGE_SIZE.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Mobility flags are masked out as swap vectors cannot move</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_pages\">alloc_pages</a>((<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; ~<a class=\"id\" href=\"#GFP_MOVABLE_MASK\">GFP_MOVABLE_MASK</a>) | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>-<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#shmem_dir_free\">shmem_dir_free</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__free_pages\">__free_pages</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>-<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#shmem_dir_map\">shmem_dir_map</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#page\">page</a> **)<a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#shmem_dir_unmap\">shmem_dir_unmap</a>(struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> *<a class=\"id\" href=\"#shmem_swp_map\">shmem_swp_map</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> *)<a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_USER1\">KM_USER1</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#shmem_swp_balance_unmap\">shmem_swp_balance_unmap</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When passing a pointer to an i_direct entry, to code which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * also handles indirect entries and so will shmem_swp_unmap,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we must arrange for the preempt count to remain in balance.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * What kmap_atomic of a lowmem page does depends on config</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and architecture, so pretend to kmap_atomic some lowmem page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>(void) <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#ZERO_PAGE\">ZERO_PAGE</a>(0), <a class=\"id\" href=\"#KM_USER1\">KM_USER1</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#shmem_swp_unmap\">shmem_swp_unmap</a>(<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#KM_USER1\">KM_USER1</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#shmem_sb_info\">shmem_sb_info</a> *<a class=\"id\" href=\"#SHMEM_SB\">SHMEM_SB</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_fs_info\">s_fs_info</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * shmem_file_setup pre-accounts the whole fixed size of a VM object,</span>", 
"<span class=\"comment\"> * for shared memory and for shared anonymous (/dev/zero) mappings</span>", 
"<span class=\"comment\"> * (unless MAP_NORESERVE and sysctl_overcommit_memory &lt;= 1),</span>", 
"<span class=\"comment\"> * consistent with the pre-accounting of private mappings ...</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#shmem_acct_size\">shmem_acct_size</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VM_NORESERVE\">VM_NORESERVE</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/>0 : <a class=\"id\" href=\"#security_vm_enough_memory_kern\">security_vm_enough_memory_kern</a>(<a class=\"id\" href=\"#VM_ACCT\">VM_ACCT</a>(<a class=\"id\" href=\"#size\">size</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#shmem_unacct_size\">shmem_unacct_size</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VM_NORESERVE\">VM_NORESERVE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_unacct_memory\">vm_unacct_memory</a>(<a class=\"id\" href=\"#VM_ACCT\">VM_ACCT</a>(<a class=\"id\" href=\"#size\">size</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ... whereas tmpfs objects are accounted incrementally as</span>", 
"<span class=\"comment\"> * pages are allocated, in order to allow huge sparse files.</span>", 
"<span class=\"comment\"> * shmem_getpage reports shmem_acct_block failure as -ENOSPC not -ENOMEM,</span>", 
"<span class=\"comment\"> * so that a failure on a sparse tmpfs mapping will give SIGBUS not OOM.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#shmem_acct_block\">shmem_acct_block</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VM_NORESERVE\">VM_NORESERVE</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#security_vm_enough_memory_kern\">security_vm_enough_memory_kern</a>(<a class=\"id\" href=\"#VM_ACCT\">VM_ACCT</a>(<a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>)) : 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#shmem_unacct_blocks\">shmem_unacct_blocks</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>, long <a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VM_NORESERVE\">VM_NORESERVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_unacct_memory\">vm_unacct_memory</a>(<a class=\"id\" href=\"#pages\">pages</a> * <a class=\"id\" href=\"#VM_ACCT\">VM_ACCT</a>(<a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>));", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#super_operations\">super_operations</a> <a class=\"id\" href=\"#shmem_ops\">shmem_ops</a>;", 
"static const struct <a class=\"id\" href=\"#address_space_operations\">address_space_operations</a> <a class=\"id\" href=\"#shmem_aops\">shmem_aops</a>;", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#shmem_file_operations\">shmem_file_operations</a>;", 
"static const struct <a class=\"id\" href=\"#inode_operations\">inode_operations</a> <a class=\"id\" href=\"#shmem_inode_operations\">shmem_inode_operations</a>;", 
"static const struct <a class=\"id\" href=\"#inode_operations\">inode_operations</a> <a class=\"id\" href=\"#shmem_dir_inode_operations\">shmem_dir_inode_operations</a>;", 
"static const struct <a class=\"id\" href=\"#inode_operations\">inode_operations</a> <a class=\"id\" href=\"#shmem_special_inode_operations\">shmem_special_inode_operations</a>;", 
"static const struct <a class=\"id\" href=\"#vm_operations_struct\">vm_operations_struct</a> <a class=\"id\" href=\"#shmem_vm_ops\">shmem_vm_ops</a>;", 
"", 
"static struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> <a class=\"id\" href=\"#shmem_backing_dev_info\">shmem_backing_dev_info</a>  <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ra_pages\">ra_pages</a><span class=\"ts\"/>= 0,<span class=\"ts\"/><span class=\"comment\">/* No readahead */</span>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#capabilities\">capabilities</a><span class=\"ts\"/>= <a class=\"id\" href=\"#BDI_CAP_NO_ACCT_AND_WRITEBACK\">BDI_CAP_NO_ACCT_AND_WRITEBACK</a> | <a class=\"id\" href=\"#BDI_CAP_SWAP_BACKED\">BDI_CAP_SWAP_BACKED</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unplug_io_fn\">unplug_io_fn</a><span class=\"ts\"/>= <a class=\"id\" href=\"#default_unplug_io_fn\">default_unplug_io_fn</a>,", 
"};", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#shmem_swaplist\">shmem_swaplist</a>);", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#shmem_swaplist_mutex\">shmem_swaplist_mutex</a>);", 
"", 
"static void <a class=\"id\" href=\"#shmem_free_blocks\">shmem_free_blocks</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, long <a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#shmem_sb_info\">shmem_sb_info</a> *<a class=\"id\" href=\"#sbinfo\">sbinfo</a> = <a class=\"id\" href=\"#SHMEM_SB\">SHMEM_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sbinfo\">sbinfo</a>-><a class=\"id\" href=\"#max_blocks\">max_blocks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_add\">percpu_counter_add</a>(&amp;<a class=\"id\" href=\"#sbinfo\">sbinfo</a>-><a class=\"id\" href=\"#used_blocks\">used_blocks</a>, -<a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blocks\">i_blocks</a> -= <a class=\"id\" href=\"#pages\">pages</a>*<a class=\"id\" href=\"#BLOCKS_PER_PAGE\">BLOCKS_PER_PAGE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#shmem_reserve_inode\">shmem_reserve_inode</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#shmem_sb_info\">shmem_sb_info</a> *<a class=\"id\" href=\"#sbinfo\">sbinfo</a> = <a class=\"id\" href=\"#SHMEM_SB\">SHMEM_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sbinfo\">sbinfo</a>-><a class=\"id\" href=\"#max_inodes\">max_inodes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sbinfo\">sbinfo</a>-><a class=\"id\" href=\"#stat_lock\">stat_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sbinfo\">sbinfo</a>-><a class=\"id\" href=\"#free_inodes\">free_inodes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sbinfo\">sbinfo</a>-><a class=\"id\" href=\"#stat_lock\">stat_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sbinfo\">sbinfo</a>-><a class=\"id\" href=\"#free_inodes\">free_inodes</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sbinfo\">sbinfo</a>-><a class=\"id\" href=\"#stat_lock\">stat_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
];
xr_frag_insert('l/4d/53b4d74cc0809445f73894e1529a9017f61120.xr', __xr_tmp);
