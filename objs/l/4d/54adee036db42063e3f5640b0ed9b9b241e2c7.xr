var __xr_tmp = [
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_siginfo\">elf_siginfo</a> <a class=\"id\" href=\"#pr_info\">pr_info</a>;<span class=\"ts\"/><span class=\"comment\">/* Info associated with signal */</span>", 
"<span class=\"ts\"/>short<span class=\"ts\"/><a class=\"id\" href=\"#pr_cursig\">pr_cursig</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Current signal */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pr_sigpend\">pr_sigpend</a>;<span class=\"ts\"/><span class=\"comment\">/* Set of pending signals */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pr_sighold\">pr_sighold</a>;<span class=\"ts\"/><span class=\"comment\">/* Set of held signals */</span>", 
"#if 0", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sigaltstack\">sigaltstack</a> <a class=\"id\" href=\"#pr_altstack\">pr_altstack</a>;<span class=\"ts\"/><span class=\"comment\">/* Alternate stack info */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sigaction\">sigaction</a> <a class=\"id\" href=\"#pr_action\">pr_action</a>;<span class=\"ts\"/><span class=\"comment\">/* Signal action for current sig */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a><span class=\"ts\"/><a class=\"id\" href=\"#pr_pid\">pr_pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a><span class=\"ts\"/><a class=\"id\" href=\"#pr_ppid\">pr_ppid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a><span class=\"ts\"/><a class=\"id\" href=\"#pr_pgrp\">pr_pgrp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a><span class=\"ts\"/><a class=\"id\" href=\"#pr_sid\">pr_sid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#pr_utime\">pr_utime</a>;<span class=\"ts\"/><span class=\"comment\">/* User time */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#pr_stime\">pr_stime</a>;<span class=\"ts\"/><span class=\"comment\">/* System time */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#pr_cutime\">pr_cutime</a>;<span class=\"ts\"/><span class=\"comment\">/* Cumulative user time */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#pr_cstime\">pr_cstime</a>;<span class=\"ts\"/><span class=\"comment\">/* Cumulative system time */</span>", 
"#if 0", 
"<span class=\"ts\"/>long<span class=\"ts\"/><a class=\"id\" href=\"#pr_instr\">pr_instr</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Current instruction */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_gregset_t\">elf_gregset_t</a> <a class=\"id\" href=\"#pr_reg\">pr_reg</a>;<span class=\"ts\"/><span class=\"comment\">/* GP registers */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BINFMT_ELF_FDPIC\">CONFIG_BINFMT_ELF_FDPIC</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* When using FDPIC, the loadmap addresses need to be communicated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to GDB in order for GDB to do the necessary relocations.  The</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fields (below) used to communicate this information are placed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * immediately after ``pr_reg'', so that the loadmap addresses may</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be viewed as part of the register set if so desired.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pr_exec_fdpic_loadmap\">pr_exec_fdpic_loadmap</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pr_interp_fdpic_loadmap\">pr_interp_fdpic_loadmap</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pr_fpvalid\">pr_fpvalid</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* True if math co-processor being used.  */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ELF_PRARGSZ\">ELF_PRARGSZ</a><span class=\"ts\"/>(80)<span class=\"ts\"/><span class=\"comment\">/* Number of chars for args */</span>", 
"", 
"struct <a class=\"id\" href=\"#elf_prpsinfo\">elf_prpsinfo</a>", 
"{", 
"<span class=\"ts\"/>char<span class=\"ts\"/><a class=\"id\" href=\"#pr_state\">pr_state</a>;<span class=\"ts\"/><span class=\"comment\">/* numeric process state */</span>", 
"<span class=\"ts\"/>char<span class=\"ts\"/><a class=\"id\" href=\"#pr_sname\">pr_sname</a>;<span class=\"ts\"/><span class=\"comment\">/* char for pr_state */</span>", 
"<span class=\"ts\"/>char<span class=\"ts\"/><a class=\"id\" href=\"#pr_zomb\">pr_zomb</a>;<span class=\"ts\"/><span class=\"comment\">/* zombie */</span>", 
"<span class=\"ts\"/>char<span class=\"ts\"/><a class=\"id\" href=\"#pr_nice\">pr_nice</a>;<span class=\"ts\"/><span class=\"comment\">/* nice val */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pr_flag\">pr_flag</a>;<span class=\"ts\"/><span class=\"comment\">/* flags */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kernel_uid_t\">__kernel_uid_t</a><span class=\"ts\"/><a class=\"id\" href=\"#pr_uid\">pr_uid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kernel_gid_t\">__kernel_gid_t</a><span class=\"ts\"/><a class=\"id\" href=\"#pr_gid\">pr_gid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a><span class=\"ts\"/><a class=\"id\" href=\"#pr_pid\">pr_pid</a>, <a class=\"id\" href=\"#pr_ppid\">pr_ppid</a>, <a class=\"id\" href=\"#pr_pgrp\">pr_pgrp</a>, <a class=\"id\" href=\"#pr_sid\">pr_sid</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Lots missing */</span>", 
"<span class=\"ts\"/>char<span class=\"ts\"/><a class=\"id\" href=\"#pr_fname\">pr_fname</a>[16];<span class=\"ts\"/><span class=\"comment\">/* filename of executable */</span>", 
"<span class=\"ts\"/>char<span class=\"ts\"/><a class=\"id\" href=\"#pr_psargs\">pr_psargs</a>[<a class=\"id\" href=\"#ELF_PRARGSZ\">ELF_PRARGSZ</a>];<span class=\"ts\"/><span class=\"comment\">/* initial part of arg list */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"typedef struct <a class=\"id\" href=\"#elf_prstatus\">elf_prstatus</a> <a class=\"id\" href=\"#prstatus_t\">prstatus_t</a>;", 
"typedef struct <a class=\"id\" href=\"#elf_prpsinfo\">elf_prpsinfo</a> <a class=\"id\" href=\"#prpsinfo_t\">prpsinfo_t</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PRARGSZ\">PRARGSZ</a> <a class=\"id\" href=\"#ELF_PRARGSZ\">ELF_PRARGSZ</a> ", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#elf_core_copy_regs\">elf_core_copy_regs</a>(<a class=\"id\" href=\"#elf_gregset_t\">elf_gregset_t</a> *<a class=\"id\" href=\"#elfregs\">elfregs</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ELF_CORE_COPY_REGS\">ELF_CORE_COPY_REGS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ELF_CORE_COPY_REGS\">ELF_CORE_COPY_REGS</a>((*<a class=\"id\" href=\"#elfregs\">elfregs</a>), <a class=\"id\" href=\"#regs\">regs</a>)", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(sizeof(*<a class=\"id\" href=\"#elfregs\">elfregs</a>) != sizeof(*<a class=\"id\" href=\"#regs\">regs</a>));", 
"<span class=\"ts\"/>*(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *)<a class=\"id\" href=\"#elfregs\">elfregs</a> = *<a class=\"id\" href=\"#regs\">regs</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#elf_core_copy_kernel_regs\">elf_core_copy_kernel_regs</a>(<a class=\"id\" href=\"#elf_gregset_t\">elf_gregset_t</a> *<a class=\"id\" href=\"#elfregs\">elfregs</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ELF_CORE_COPY_KERNEL_REGS\">ELF_CORE_COPY_KERNEL_REGS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ELF_CORE_COPY_KERNEL_REGS\">ELF_CORE_COPY_KERNEL_REGS</a>((*<a class=\"id\" href=\"#elfregs\">elfregs</a>), <a class=\"id\" href=\"#regs\">regs</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_core_copy_regs\">elf_core_copy_regs</a>(<a class=\"id\" href=\"#elfregs\">elfregs</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#elf_core_copy_task_regs\">elf_core_copy_task_regs</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#elf_gregset_t\">elf_gregset_t</a>* <a class=\"id\" href=\"#elfregs\">elfregs</a>)", 
"{", 
"#if <a class=\"id\" href=\"#defined\">defined</a> (<a class=\"id\" href=\"#ELF_CORE_COPY_TASK_REGS\">ELF_CORE_COPY_TASK_REGS</a>)", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ELF_CORE_COPY_TASK_REGS\">ELF_CORE_COPY_TASK_REGS</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#elfregs\">elfregs</a>);", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#defined\">defined</a> (<a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_core_copy_regs\">elf_core_copy_regs</a>(<a class=\"id\" href=\"#elfregs\">elfregs</a>, <a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#t\">t</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#dump_fpu\">dump_fpu</a> (struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *, <a class=\"id\" href=\"#elf_fpregset_t\">elf_fpregset_t</a> *);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#elf_core_copy_task_fpregs\">elf_core_copy_task_fpregs</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#elf_fpregset_t\">elf_fpregset_t</a> *<a class=\"id\" href=\"#fpu\">fpu</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ELF_CORE_COPY_FPREGS\">ELF_CORE_COPY_FPREGS</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ELF_CORE_COPY_FPREGS\">ELF_CORE_COPY_FPREGS</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#fpu\">fpu</a>);", 
"#else", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dump_fpu\">dump_fpu</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#fpu\">fpu</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ELF_CORE_COPY_XFPREGS\">ELF_CORE_COPY_XFPREGS</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#elf_core_copy_task_xfpregs\">elf_core_copy_task_xfpregs</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#elf_fpxregset_t\">elf_fpxregset_t</a> *<a class=\"id\" href=\"#xfpu\">xfpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ELF_CORE_COPY_XFPREGS\">ELF_CORE_COPY_XFPREGS</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#xfpu\">xfpu</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These functions parameterize elf_core_dump in fs/binfmt_elf.c to write out</span>", 
"<span class=\"comment\"> * extra segments containing the gate DSO contents.  Dumping its</span>", 
"<span class=\"comment\"> * contents makes post-mortem fully interpretable later without matching up</span>", 
"<span class=\"comment\"> * the same kernel and hardware config to see what PC values meant.</span>", 
"<span class=\"comment\"> * Dumping its extra ELF program headers includes all the other information</span>", 
"<span class=\"comment\"> * a debugger needs to easily find how the gate DSO was being used.</span>", 
"<span class=\"comment\"> */</span>", 
"extern <a class=\"id\" href=\"#Elf_Half\">Elf_Half</a> <a class=\"id\" href=\"#elf_core_extra_phdrs\">elf_core_extra_phdrs</a>(void);", 
"extern int", 
"<a class=\"id\" href=\"#elf_core_write_extra_phdrs\">elf_core_write_extra_phdrs</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#limit\">limit</a>);", 
"extern int", 
"<a class=\"id\" href=\"#elf_core_write_extra_data\">elf_core_write_extra_data</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#limit\">limit</a>);", 
"extern <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#elf_core_extra_data_size\">elf_core_extra_data_size</a>(void);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_ELFCORE_H */</span>", 
];
xr_frag_insert('l/4d/54adee036db42063e3f5640b0ed9b9b241e2c7.xr', __xr_tmp);
