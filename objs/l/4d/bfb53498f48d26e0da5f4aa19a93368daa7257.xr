var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_MMAN_H\">_LINUX_MMAN_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_MMAN_H\">_LINUX_MMAN_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mman\">mman</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MREMAP_MAYMOVE\">MREMAP_MAYMOVE</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MREMAP_FIXED\">MREMAP_FIXED</a><span class=\"ts\"/>2", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OVERCOMMIT_GUESS\">OVERCOMMIT_GUESS</a><span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OVERCOMMIT_ALWAYS\">OVERCOMMIT_ALWAYS</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OVERCOMMIT_NEVER\">OVERCOMMIT_NEVER</a><span class=\"ts\"/><span class=\"ts\"/>2", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu_counter\">percpu_counter</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"extern int <a class=\"id\" href=\"#sysctl_overcommit_memory\">sysctl_overcommit_memory</a>;", 
"extern int <a class=\"id\" href=\"#sysctl_overcommit_ratio\">sysctl_overcommit_ratio</a>;", 
"extern struct <a class=\"id\" href=\"#percpu_counter\">percpu_counter</a> <a class=\"id\" href=\"#vm_committed_as\">vm_committed_as</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#vm_acct_memory\">vm_acct_memory</a>(long <a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_add\">percpu_counter_add</a>(&amp;<a class=\"id\" href=\"#vm_committed_as\">vm_committed_as</a>, <a class=\"id\" href=\"#pages\">pages</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#vm_unacct_memory\">vm_unacct_memory</a>(long <a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm_acct_memory\">vm_acct_memory</a>(-<a class=\"id\" href=\"#pages\">pages</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allow architectures to handle additional protection bits</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#arch_calc_vm_prot_bits\">arch_calc_vm_prot_bits</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_calc_vm_prot_bits\">arch_calc_vm_prot_bits</a>(<a class=\"id\" href=\"#prot\">prot</a>) 0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#arch_vm_get_page_prot\">arch_vm_get_page_prot</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_vm_get_page_prot\">arch_vm_get_page_prot</a>(<a class=\"id\" href=\"#vm_flags\">vm_flags</a>) <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#arch_validate_prot\">arch_validate_prot</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is called from mprotect().  PROT_GROWSDOWN and PROT_GROWSUP have</span>", 
"<span class=\"comment\"> * already been masked out.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if the prot flags are valid</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#arch_validate_prot\">arch_validate_prot</a>(unsigned long <a class=\"id\" href=\"#prot\">prot</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#prot\">prot</a> &amp; ~(<a class=\"id\" href=\"#PROT_READ\">PROT_READ</a> | <a class=\"id\" href=\"#PROT_WRITE\">PROT_WRITE</a> | <a class=\"id\" href=\"#PROT_EXEC\">PROT_EXEC</a> | <a class=\"id\" href=\"#PROT_SEM\">PROT_SEM</a>)) == 0;", 
"}", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_validate_prot\">arch_validate_prot</a> <a class=\"id\" href=\"#arch_validate_prot\">arch_validate_prot</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Optimisation macro.  It is equivalent to:</span>", 
"<span class=\"comment\"> *      (x &amp; bit1) ? bit2 : 0</span>", 
"<span class=\"comment\"> * but this version is faster.</span>", 
"<span class=\"comment\"> * (\"bit1\" and \"bit2\" must be single bits)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_calc_vm_trans\">_calc_vm_trans</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#bit1\">bit1</a>, <a class=\"id\" href=\"#bit2\">bit2</a>) \\", 
"  ((<a class=\"id\" href=\"#bit1\">bit1</a>) <= (<a class=\"id\" href=\"#bit2\">bit2</a>) ? ((<a class=\"id\" href=\"#x\">x</a>) &amp; (<a class=\"id\" href=\"#bit1\">bit1</a>)) * ((<a class=\"id\" href=\"#bit2\">bit2</a>) / (<a class=\"id\" href=\"#bit1\">bit1</a>)) \\", 
"   : ((<a class=\"id\" href=\"#x\">x</a>) &amp; (<a class=\"id\" href=\"#bit1\">bit1</a>)) / ((<a class=\"id\" href=\"#bit1\">bit1</a>) / (<a class=\"id\" href=\"#bit2\">bit2</a>)))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Combine the mmap \"prot\" argument into \"vm_flags\" used internally.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long", 
"<a class=\"id\" href=\"#calc_vm_prot_bits\">calc_vm_prot_bits</a>(unsigned long <a class=\"id\" href=\"#prot\">prot</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#_calc_vm_trans\">_calc_vm_trans</a>(<a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#PROT_READ\">PROT_READ</a>,  <a class=\"id\" href=\"#VM_READ\">VM_READ</a> ) |", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#_calc_vm_trans\">_calc_vm_trans</a>(<a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#PROT_WRITE\">PROT_WRITE</a>, <a class=\"id\" href=\"#VM_WRITE\">VM_WRITE</a>) |", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#_calc_vm_trans\">_calc_vm_trans</a>(<a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#PROT_EXEC\">PROT_EXEC</a>,  <a class=\"id\" href=\"#VM_EXEC\">VM_EXEC</a>) |", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#arch_calc_vm_prot_bits\">arch_calc_vm_prot_bits</a>(<a class=\"id\" href=\"#prot\">prot</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Combine the mmap \"flags\" argument into \"vm_flags\" used internally.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long", 
"<a class=\"id\" href=\"#calc_vm_flag_bits\">calc_vm_flag_bits</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#_calc_vm_trans\">_calc_vm_trans</a>(<a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#MAP_GROWSDOWN\">MAP_GROWSDOWN</a>,  <a class=\"id\" href=\"#VM_GROWSDOWN\">VM_GROWSDOWN</a> ) |", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#_calc_vm_trans\">_calc_vm_trans</a>(<a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#MAP_DENYWRITE\">MAP_DENYWRITE</a>,  <a class=\"id\" href=\"#VM_DENYWRITE\">VM_DENYWRITE</a> ) |", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#_calc_vm_trans\">_calc_vm_trans</a>(<a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#MAP_EXECUTABLE\">MAP_EXECUTABLE</a>, <a class=\"id\" href=\"#VM_EXECUTABLE\">VM_EXECUTABLE</a>) |", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#_calc_vm_trans\">_calc_vm_trans</a>(<a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#MAP_LOCKED\">MAP_LOCKED</a>,     <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>    );", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_MMAN_H */</span>", 
];
xr_frag_insert('l/4d/bfb53498f48d26e0da5f4aa19a93368daa7257.xr', __xr_tmp);
