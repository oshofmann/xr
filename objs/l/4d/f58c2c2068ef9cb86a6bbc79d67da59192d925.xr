var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_index\">page_index</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#page_index\">page_index</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrapped\">wrapped</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_index\">page_index</a> &gt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_page_writeback\">wait_on_page_writeback</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_mapped\">page_mapped</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#did_range_unmap\">did_range_unmap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Zap the rest of the file in one hit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmap_mapping_range\">unmap_mapping_range</a>(<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#loff_t\">loff_t</a>)<a class=\"id\" href=\"#page_index\">page_index</a><<<a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#loff_t\">loff_t</a>)(<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#page_index\">page_index</a> + 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><< <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#did_range_unmap\">did_range_unmap</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Just zap this page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmap_mapping_range\">unmap_mapping_range</a>(<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#loff_t\">loff_t</a>)<a class=\"id\" href=\"#page_index\">page_index</a><<<a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#page_mapped\">page_mapped</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret2\">ret2</a> = <a class=\"id\" href=\"#do_launder_page\">do_launder_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret2\">ret2</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#invalidate_complete_page2\">invalidate_complete_page2</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret2\">ret2</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret2\">ret2</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pagevec_release\">pagevec_release</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_uncharge_end\">mem_cgroup_uncharge_end</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#invalidate_inode_pages2_range\">invalidate_inode_pages2_range</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * invalidate_inode_pages2 - remove all pages from an address_space</span>", 
"<span class=\"comment\"> * @mapping: the address_space</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Any pages which are found to be mapped into pagetables are unmapped prior to</span>", 
"<span class=\"comment\"> * invalidation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns -EBUSY if any pages could not be invalidated.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#invalidate_inode_pages2\">invalidate_inode_pages2</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#invalidate_inode_pages2_range\">invalidate_inode_pages2_range</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, 0, -1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#invalidate_inode_pages2\">invalidate_inode_pages2</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * truncate_pagecache - unmap and remove pagecache that has been truncated</span>", 
"<span class=\"comment\"> * @inode: inode</span>", 
"<span class=\"comment\"> * @old: old file offset</span>", 
"<span class=\"comment\"> * @new: new file offset</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * inode's new i_size must already be written before truncate_pagecache</span>", 
"<span class=\"comment\"> * is called.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function should typically be called before the filesystem</span>", 
"<span class=\"comment\"> * releases resources associated with the freed range (eg. deallocates</span>", 
"<span class=\"comment\"> * blocks). This way, pagecache will always stay logically coherent</span>", 
"<span class=\"comment\"> * with on-disk format, and the filesystem would not have to deal with</span>", 
"<span class=\"comment\"> * situations such as writepage being called for a page that has already</span>", 
"<span class=\"comment\"> * had its underlying blocks deallocated.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#truncate_pagecache\">truncate_pagecache</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unmap_mapping_range is called twice, first simply for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * efficiency so that truncate_inode_pages does fewer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * single-page unmaps.  However after this first call, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before truncate_inode_pages finishes, it is possible for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * private pages to be COWed, which remain after</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * truncate_inode_pages finishes, hence the second</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unmap_mapping_range call must be made for correctness.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unmap_mapping_range\">unmap_mapping_range</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#new\">new</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1, 0, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#truncate_inode_pages\">truncate_inode_pages</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unmap_mapping_range\">unmap_mapping_range</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#new\">new</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1, 0, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#truncate_pagecache\">truncate_pagecache</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * truncate_setsize - update inode and pagecache for a new file size</span>", 
"<span class=\"comment\"> * @inode: inode</span>", 
"<span class=\"comment\"> * @newsize: new file size</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * truncate_setsize updastes i_size update and performs pagecache</span>", 
"<span class=\"comment\"> * truncation (if necessary) for a file size updates. It will be</span>", 
"<span class=\"comment\"> * typically be called from the filesystem's setattr function when</span>", 
"<span class=\"comment\"> * ATTR_SIZE is passed in.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called with inode_mutex held and after all filesystem</span>", 
"<span class=\"comment\"> * specific block truncation has been performed.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#truncate_setsize\">truncate_setsize</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#newsize\">newsize</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#oldsize\">oldsize</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oldsize\">oldsize</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>;", 
];
xr_frag_insert('l/4d/f58c2c2068ef9cb86a6bbc79d67da59192d925.xr', __xr_tmp);
