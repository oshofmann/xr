var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#irq\">irq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugfs\">debugfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gpio\">gpio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#of_gpio\">of_gpio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"", 
"<span class=\"comment\">/* Optional implementation infrastructure for GPIO interfaces.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Platforms may want to use this if they tend to use very many GPIOs</span>", 
"<span class=\"comment\"> * that aren't part of a System-On-Chip core; or across I2C/SPI/etc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When kernel footprint or instruction count is an issue, simpler</span>", 
"<span class=\"comment\"> * implementations may be preferred.  The GPIO programming interface</span>", 
"<span class=\"comment\"> * allows for inlining speed-critical get/set operations for common</span>", 
"<span class=\"comment\"> * cases, so that access to SOC-integrated GPIOs can sometimes cost</span>", 
"<span class=\"comment\"> * only an instruction or two per bit.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"", 
"<span class=\"comment\">/* When debugging, extend minimal trust to callers and platform code.</span>", 
"<span class=\"comment\"> * Also emit diagnostic messages that may help initial bringup, when</span>", 
"<span class=\"comment\"> * board setup or driver bugs are most common.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Otherwise, minimize overhead in what may be bitbanging codepaths.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a><span class=\"ts\"/><a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#extra_checks\">extra_checks</a><span class=\"ts\"/>1", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#extra_checks\">extra_checks</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* gpio_lock prevents conflicts during gpio_desc[] table updates.</span>", 
"<span class=\"comment\"> * While any GPIO is requested, its gpio_chip is not removable;</span>", 
"<span class=\"comment\"> * each GPIO's \"requested\" flag serves as a lock and refcount.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#gpio_lock\">gpio_lock</a>);", 
"", 
"struct <a class=\"id\" href=\"#gpio_desc\">gpio_desc</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a><span class=\"ts\"/>*<a class=\"id\" href=\"#chip\">chip</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"comment\">/* flag symbols are bit numbers */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_REQUESTED\">FLAG_REQUESTED</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_IS_OUT\">FLAG_IS_OUT</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_RESERVED\">FLAG_RESERVED</a><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_EXPORT\">FLAG_EXPORT</a><span class=\"ts\"/>3<span class=\"ts\"/><span class=\"comment\">/* protected by sysfs_lock */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_SYSFS\">FLAG_SYSFS</a><span class=\"ts\"/>4<span class=\"ts\"/><span class=\"comment\">/* exported via /sys/class/gpio/control */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_TRIG_FALL\">FLAG_TRIG_FALL</a><span class=\"ts\"/>5<span class=\"ts\"/><span class=\"comment\">/* trigger on falling edge */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_TRIG_RISE\">FLAG_TRIG_RISE</a><span class=\"ts\"/>6<span class=\"ts\"/><span class=\"comment\">/* trigger on rising edge */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_ACTIVE_LOW\">FLAG_ACTIVE_LOW</a><span class=\"ts\"/>7<span class=\"ts\"/><span class=\"comment\">/* sysfs value has active low */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ID_SHIFT\">ID_SHIFT</a><span class=\"ts\"/>16<span class=\"ts\"/><span class=\"comment\">/* add new flags before this one */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GPIO_FLAGS_MASK\">GPIO_FLAGS_MASK</a><span class=\"ts\"/><span class=\"ts\"/>((1 << <a class=\"id\" href=\"#ID_SHIFT\">ID_SHIFT</a>) - 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GPIO_TRIGGER_MASK\">GPIO_TRIGGER_MASK</a><span class=\"ts\"/>(<a class=\"id\" href=\"#BIT\">BIT</a>(<a class=\"id\" href=\"#FLAG_TRIG_FALL\">FLAG_TRIG_FALL</a>) | <a class=\"id\" href=\"#BIT\">BIT</a>(<a class=\"id\" href=\"#FLAG_TRIG_RISE\">FLAG_TRIG_RISE</a>))", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_FS\">CONFIG_DEBUG_FS</a>", 
"<span class=\"ts\"/>const char<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#label\">label</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"static struct <a class=\"id\" href=\"#gpio_desc\">gpio_desc</a> <a class=\"id\" href=\"#gpio_desc\">gpio_desc</a>[<a class=\"id\" href=\"#ARCH_NR_GPIOS\">ARCH_NR_GPIOS</a>];", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_GPIO_SYSFS\">CONFIG_GPIO_SYSFS</a>", 
"static <a class=\"id\" href=\"#DEFINE_IDR\">DEFINE_IDR</a>(<a class=\"id\" href=\"#dirent_idr\">dirent_idr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#desc_set_label\">desc_set_label</a>(struct <a class=\"id\" href=\"#gpio_desc\">gpio_desc</a> *<a class=\"id\" href=\"#d\">d</a>, const char *<a class=\"id\" href=\"#label\">label</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_FS\">CONFIG_DEBUG_FS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#label\">label</a> = <a class=\"id\" href=\"#label\">label</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/* Warn when drivers omit gpio_request() calls -- legal but ill-advised</span>", 
"<span class=\"comment\"> * when setting direction, and otherwise illegal.  Until board setup code</span>", 
"<span class=\"comment\"> * and drivers use explicit requests everywhere (which won't happen when</span>", 
"<span class=\"comment\"> * those calls have no teeth) we can't avoid autorequesting.  This nag</span>", 
"<span class=\"comment\"> * message should motivate switching to explicit requests... so should</span>", 
"<span class=\"comment\"> * the weaker cleanup after faults, compared to gpio_request().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: the autorequest mechanism is going away; at this point it's</span>", 
"<span class=\"comment\"> * only \"legal\" in the sense that (old) code using it won't break yet,</span>", 
"<span class=\"comment\"> * but instead only triggers a WARN() stack dump.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#gpio_ensure_requested\">gpio_ensure_requested</a>(struct <a class=\"id\" href=\"#gpio_desc\">gpio_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>, unsigned <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a> = <a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip\">chip</a>;", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#gpio\">gpio</a> = <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN\">WARN</a>(<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#FLAG_REQUESTED\">FLAG_REQUESTED</a>, &amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#flags\">flags</a>) == 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"autorequest GPIO-%d\\n\", <a class=\"id\" href=\"#gpio\">gpio</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#owner\">owner</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"GPIO-%d: module can't be gotten \\n\", <a class=\"id\" href=\"#gpio\">gpio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#FLAG_REQUESTED\">FLAG_REQUESTED</a>, &amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* lose */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc_set_label\">desc_set_label</a>(<a class=\"id\" href=\"#desc\">desc</a>, \"[auto]\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* caller must chip-&gt;request() w/o spinlock */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#request\">request</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* caller holds gpio_lock *OR* gpio is marked as requested */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#gpio_to_chip\">gpio_to_chip</a>(unsigned <a class=\"id\" href=\"#gpio\">gpio</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#gpio_desc\">gpio_desc</a>[<a class=\"id\" href=\"#gpio\">gpio</a>].<a class=\"id\" href=\"#chip\">chip</a>;", 
"}", 
"", 
"<span class=\"comment\">/* dynamic allocation of GPIOs, e.g. on a hotplugged device */</span>", 
"static int <a class=\"id\" href=\"#gpiochip_find_base\">gpiochip_find_base</a>(int <a class=\"id\" href=\"#ngpio\">ngpio</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#spare\">spare</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#base\">base</a> = -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#ARCH_NR_GPIOS\">ARCH_NR_GPIOS</a> - 1; <a class=\"id\" href=\"#i\">i</a> >= 0 ; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#gpio_desc\">gpio_desc</a> *<a class=\"id\" href=\"#desc\">desc</a> = &amp;<a class=\"id\" href=\"#gpio_desc\">gpio_desc</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#chip\">chip</a> = <a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip\">chip</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#chip\">chip</a> && !<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#FLAG_RESERVED\">FLAG_RESERVED</a>, &amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spare\">spare</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#spare\">spare</a> == <a class=\"id\" href=\"#ngpio\">ngpio</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spare\">spare</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chip\">chip</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> -= <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#ngpio\">ngpio</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gpio_is_valid\">gpio_is_valid</a>(<a class=\"id\" href=\"#base\">base</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: found new base at %d\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#base\">base</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * gpiochip_reserve() - reserve range of gpios to use with platform code only</span>", 
"<span class=\"comment\"> * @start: starting gpio number</span>", 
"<span class=\"comment\"> * @ngpio: number of gpios to reserve</span>", 
"<span class=\"comment\"> * Context: platform init, potentially before irqs or kmalloc will work</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a negative errno if any gpio within the range is already reserved</span>", 
"<span class=\"comment\"> * or registered, else returns zero as a success code.  Use this function</span>", 
"<span class=\"comment\"> * to mark a range of gpios as unavailable for dynamic gpio number allocation,</span>", 
"<span class=\"comment\"> * for example because its driver support is not yet loaded.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#gpiochip_reserve\">gpiochip_reserve</a>(int <a class=\"id\" href=\"#start\">start</a>, int <a class=\"id\" href=\"#ngpio\">ngpio</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gpio_is_valid\">gpio_is_valid</a>(<a class=\"id\" href=\"#start\">start</a>) || !<a class=\"id\" href=\"#gpio_is_valid\">gpio_is_valid</a>(<a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#ngpio\">ngpio</a> - 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#gpio_lock\">gpio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#ngpio\">ngpio</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#gpio_desc\">gpio_desc</a> *<a class=\"id\" href=\"#desc\">desc</a> = &amp;<a class=\"id\" href=\"#gpio_desc\">gpio_desc</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip\">chip</a> || <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#FLAG_RESERVED\">FLAG_RESERVED</a>, &amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#FLAG_RESERVED\">FLAG_RESERVED</a>, &amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: reserved gpios from %d to %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#ngpio\">ngpio</a> - 1);", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#gpio_lock\">gpio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_GPIO_SYSFS\">CONFIG_GPIO_SYSFS</a>", 
"", 
"<span class=\"comment\">/* lock protects against unexport_gpio() being called while</span>", 
"<span class=\"comment\"> * sysfs files are active.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#sysfs_lock\">sysfs_lock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * /sys/class/gpio/gpioN... only for GPIOs that are exported</span>", 
"<span class=\"comment\"> *   /direction</span>", 
"<span class=\"comment\"> *      * MAY BE OMITTED if kernel won't allow direction changes</span>", 
"<span class=\"comment\"> *      * is read/write as \"in\" or \"out\"</span>", 
"<span class=\"comment\"> *      * may also be written as \"high\" or \"low\", initializing</span>", 
"<span class=\"comment\"> *        output value as specified (\"out\" implies \"low\")</span>", 
"<span class=\"comment\"> *   /value</span>", 
"<span class=\"comment\"> *      * always readable, subject to hardware behavior</span>", 
"<span class=\"comment\"> *      * may be writable, as zero/nonzero</span>", 
"<span class=\"comment\"> *   /edge</span>", 
"<span class=\"comment\"> *      * configures behavior of poll(2) on /value</span>", 
"<span class=\"comment\"> *      * available only if pin can generate IRQs on input</span>", 
"<span class=\"comment\"> *      * is read/write as \"none\", \"falling\", \"rising\", or \"both\"</span>", 
"<span class=\"comment\"> *   /active_low</span>", 
"<span class=\"comment\"> *      * configures polarity of /value</span>", 
"<span class=\"comment\"> *      * is read/write as zero/nonzero</span>", 
"<span class=\"comment\"> *      * also affects existing and subsequent \"falling\" and \"rising\"</span>", 
"<span class=\"comment\"> *        /edge configuration</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#gpio_direction_show\">gpio_direction_show</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#gpio_desc\">gpio_desc</a><span class=\"ts\"/>*<a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#sysfs_lock\">sysfs_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#FLAG_EXPORT\">FLAG_EXPORT</a>, &amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#FLAG_IS_OUT\">FLAG_IS_OUT</a>, &amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#flags\">flags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>? \"out\" : \"in\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#sysfs_lock\">sysfs_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#gpio_direction_store\">gpio_direction_store</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#gpio_desc\">gpio_desc</a><span class=\"ts\"/>*<a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpio\">gpio</a> = <a class=\"id\" href=\"#desc\">desc</a> - <a class=\"id\" href=\"#gpio_desc\">gpio_desc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#sysfs_lock\">sysfs_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#FLAG_EXPORT\">FLAG_EXPORT</a>, &amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#sysfs_streq\">sysfs_streq</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"high\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#gpio_direction_output\">gpio_direction_output</a>(<a class=\"id\" href=\"#gpio\">gpio</a>, 1);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#sysfs_streq\">sysfs_streq</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"out\") || <a class=\"id\" href=\"#sysfs_streq\">sysfs_streq</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"low\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#gpio_direction_output\">gpio_direction_output</a>(<a class=\"id\" href=\"#gpio\">gpio</a>, 0);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#sysfs_streq\">sysfs_streq</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"in\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#gpio_direction_input\">gpio_direction_input</a>(<a class=\"id\" href=\"#gpio\">gpio</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#sysfs_lock\">sysfs_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a> ? : <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"", 
"static <span class=\"comment\">/* const */</span> <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#direction\">direction</a>, 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpio_direction_show\">gpio_direction_show</a>, <a class=\"id\" href=\"#gpio_direction_store\">gpio_direction_store</a>);", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#gpio_value_show\">gpio_value_show</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#gpio_desc\">gpio_desc</a><span class=\"ts\"/>*<a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpio\">gpio</a> = <a class=\"id\" href=\"#desc\">desc</a> - <a class=\"id\" href=\"#gpio_desc\">gpio_desc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#sysfs_lock\">sysfs_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#FLAG_EXPORT\">FLAG_EXPORT</a>, &amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = !!<a class=\"id\" href=\"#gpio_get_value_cansleep\">gpio_get_value_cansleep</a>(<a class=\"id\" href=\"#gpio\">gpio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#FLAG_ACTIVE_LOW\">FLAG_ACTIVE_LOW</a>, &amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = !<a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%d\\n\", <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#sysfs_lock\">sysfs_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#gpio_value_store\">gpio_value_store</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#gpio_desc\">gpio_desc</a><span class=\"ts\"/>*<a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpio\">gpio</a> = <a class=\"id\" href=\"#desc\">desc</a> - <a class=\"id\" href=\"#gpio_desc\">gpio_desc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#sysfs_lock\">sysfs_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#FLAG_EXPORT\">FLAG_EXPORT</a>, &amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#FLAG_IS_OUT\">FLAG_IS_OUT</a>, &amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
];
xr_frag_insert('l/4e/475bc704cc9c9069963dc063d83e11f62fc777.xr', __xr_tmp);
