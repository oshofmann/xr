var __xr_tmp = [
"<span class=\"comment\"> * If an architecture guarantees that all ranges registered with</span>", 
"<span class=\"comment\"> * add_active_ranges() contain no holes and may be freed, this</span>", 
"<span class=\"comment\"> * function may be used instead of calling memory_present() manually.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sparse_memory_present_with_active_regions\">sparse_memory_present_with_active_regions</a>(int <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_active_range_index_in_nid\">for_each_active_range_index_in_nid</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nid\">nid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_present\">memory_present</a>(<a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#nid\">nid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_pfn_range_for_nid - Return the start and end page frames for a node</span>", 
"<span class=\"comment\"> * @nid: The nid to return the range for. If MAX_NUMNODES, the min and max PFN are returned.</span>", 
"<span class=\"comment\"> * @start_pfn: Passed by reference. On return, it will have the node start_pfn.</span>", 
"<span class=\"comment\"> * @end_pfn: Passed by reference. On return, it will have the node end_pfn.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It returns the start and end page frame of a node based on information</span>", 
"<span class=\"comment\"> * provided by an arch calling add_active_range(). If called for a node</span>", 
"<span class=\"comment\"> * with no available memory, a warning is printed and the start and end</span>", 
"<span class=\"comment\"> * PFNs will be 0.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#get_pfn_range_for_nid\">get_pfn_range_for_nid</a>(unsigned int <a class=\"id\" href=\"#nid\">nid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#start_pfn\">start_pfn</a>, unsigned long *<a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#start_pfn\">start_pfn</a> = -1UL;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#end_pfn\">end_pfn</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_active_range_index_in_nid\">for_each_active_range_index_in_nid</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nid\">nid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#start_pfn\">start_pfn</a> = <a class=\"id\" href=\"#min\">min</a>(*<a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#end_pfn\">end_pfn</a> = <a class=\"id\" href=\"#max\">max</a>(*<a class=\"id\" href=\"#end_pfn\">end_pfn</a>, <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#start_pfn\">start_pfn</a> == -1UL)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#start_pfn\">start_pfn</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This finds a zone that can be used for ZONE_MOVABLE pages. The</span>", 
"<span class=\"comment\"> * assumption is made that zones within a node are ordered in monotonic</span>", 
"<span class=\"comment\"> * increasing memory addresses so that the \"highest\" populated zone is used</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#find_usable_zone_for_movable\">find_usable_zone_for_movable</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#zone_index\">zone_index</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#zone_index\">zone_index</a> = <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a> - 1; <a class=\"id\" href=\"#zone_index\">zone_index</a> >= 0; <a class=\"id\" href=\"#zone_index\">zone_index</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_index\">zone_index</a> == <a class=\"id\" href=\"#ZONE_MOVABLE\">ZONE_MOVABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#arch_zone_highest_possible_pfn\">arch_zone_highest_possible_pfn</a>[<a class=\"id\" href=\"#zone_index\">zone_index</a>] &gt;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_zone_lowest_possible_pfn\">arch_zone_lowest_possible_pfn</a>[<a class=\"id\" href=\"#zone_index\">zone_index</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#zone_index\">zone_index</a> == -1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#movable_zone\">movable_zone</a> = <a class=\"id\" href=\"#zone_index\">zone_index</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The zone ranges provided by the architecture do not include ZONE_MOVABLE</span>", 
"<span class=\"comment\"> * because it is sized independant of architecture. Unlike the other zones,</span>", 
"<span class=\"comment\"> * the starting point for ZONE_MOVABLE is not fixed. It may be different</span>", 
"<span class=\"comment\"> * in each node depending on the size of each node and how evenly kernelcore</span>", 
"<span class=\"comment\"> * is distributed. This helper function adjusts the zone ranges</span>", 
"<span class=\"comment\"> * provided by the architecture for a given node by using the end of the</span>", 
"<span class=\"comment\"> * highest usable zone for ZONE_MOVABLE. This preserves the assumption that</span>", 
"<span class=\"comment\"> * zones within a node are in order of monotonic increases memory addresses</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#adjust_zone_range_for_zone_movable\">adjust_zone_range_for_zone_movable</a>(int <a class=\"id\" href=\"#nid\">nid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#zone_type\">zone_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#node_end_pfn\">node_end_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#zone_end_pfn\">zone_end_pfn</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Only adjust if ZONE_MOVABLE is on this node */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_movable_pfn\">zone_movable_pfn</a>[<a class=\"id\" href=\"#nid\">nid</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Size ZONE_MOVABLE */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_type\">zone_type</a> == <a class=\"id\" href=\"#ZONE_MOVABLE\">ZONE_MOVABLE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> = <a class=\"id\" href=\"#zone_movable_pfn\">zone_movable_pfn</a>[<a class=\"id\" href=\"#nid\">nid</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#zone_end_pfn\">zone_end_pfn</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#node_end_pfn\">node_end_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_zone_highest_possible_pfn\">arch_zone_highest_possible_pfn</a>[<a class=\"id\" href=\"#movable_zone\">movable_zone</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Adjust for ZONE_MOVABLE starting within this range */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (*<a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> &lt; <a class=\"id\" href=\"#zone_movable_pfn\">zone_movable_pfn</a>[<a class=\"id\" href=\"#nid\">nid</a>] &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#zone_end_pfn\">zone_end_pfn</a> &gt; <a class=\"id\" href=\"#zone_movable_pfn\">zone_movable_pfn</a>[<a class=\"id\" href=\"#nid\">nid</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#zone_end_pfn\">zone_end_pfn</a> = <a class=\"id\" href=\"#zone_movable_pfn\">zone_movable_pfn</a>[<a class=\"id\" href=\"#nid\">nid</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check if this whole range is within ZONE_MOVABLE */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (*<a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> >= <a class=\"id\" href=\"#zone_movable_pfn\">zone_movable_pfn</a>[<a class=\"id\" href=\"#nid\">nid</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> = *<a class=\"id\" href=\"#zone_end_pfn\">zone_end_pfn</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the number of pages a zone spans in a node, including holes</span>", 
"<span class=\"comment\"> * present_pages = zone_spanned_pages_in_node() - zone_absent_pages_in_node()</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#zone_spanned_pages_in_node\">zone_spanned_pages_in_node</a>(int <a class=\"id\" href=\"#nid\">nid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#zone_type\">zone_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#ignored\">ignored</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>, <a class=\"id\" href=\"#node_end_pfn\">node_end_pfn</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>, <a class=\"id\" href=\"#zone_end_pfn\">zone_end_pfn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the start and end of the node and zone */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_pfn_range_for_nid\">get_pfn_range_for_nid</a>(<a class=\"id\" href=\"#nid\">nid</a>, &amp;<a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>, &amp;<a class=\"id\" href=\"#node_end_pfn\">node_end_pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> = <a class=\"id\" href=\"#arch_zone_lowest_possible_pfn\">arch_zone_lowest_possible_pfn</a>[<a class=\"id\" href=\"#zone_type\">zone_type</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone_end_pfn\">zone_end_pfn</a> = <a class=\"id\" href=\"#arch_zone_highest_possible_pfn\">arch_zone_highest_possible_pfn</a>[<a class=\"id\" href=\"#zone_type\">zone_type</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#adjust_zone_range_for_zone_movable\">adjust_zone_range_for_zone_movable</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#zone_type\">zone_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>, <a class=\"id\" href=\"#node_end_pfn\">node_end_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>, &amp;<a class=\"id\" href=\"#zone_end_pfn\">zone_end_pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check that this node has pages within the zone's required range */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_end_pfn\">zone_end_pfn</a> &lt; <a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a> || <a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> &gt; <a class=\"id\" href=\"#node_end_pfn\">node_end_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Move the zone boundaries inside the node if necessary */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone_end_pfn\">zone_end_pfn</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#zone_end_pfn\">zone_end_pfn</a>, <a class=\"id\" href=\"#node_end_pfn\">node_end_pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>, <a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Return the spanned pages */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#zone_end_pfn\">zone_end_pfn</a> - <a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the number of holes in a range on a node. If nid is MAX_NUMNODES,</span>", 
"<span class=\"comment\"> * then all holes in the requested range will be accounted for.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#__absent_pages_in_range\">__absent_pages_in_range</a>(int <a class=\"id\" href=\"#nid\">nid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#range_start_pfn\">range_start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#range_end_pfn\">range_end_pfn</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#prev_end_pfn\">prev_end_pfn</a> = 0, <a class=\"id\" href=\"#hole_pages\">hole_pages</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find the end_pfn of the first active range of pfns in the node */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#first_active_region_index_in_nid\">first_active_region_index_in_nid</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev_end_pfn\">prev_end_pfn</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#range_end_pfn\">range_end_pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Account for ranges before physical memory on this node */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a> &gt; <a class=\"id\" href=\"#range_start_pfn\">range_start_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hole_pages\">hole_pages</a> = <a class=\"id\" href=\"#prev_end_pfn\">prev_end_pfn</a> - <a class=\"id\" href=\"#range_start_pfn\">range_start_pfn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find all holes for the zone within the node */</span>", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#i\">i</a> != -1; <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#next_active_region_index_in_nid\">next_active_region_index_in_nid</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nid\">nid</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No need to continue if prev_end_pfn is outside the zone */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev_end_pfn\">prev_end_pfn</a> >= <a class=\"id\" href=\"#range_end_pfn\">range_end_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make sure the end of the zone is not within the hole */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_pfn\">start_pfn</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#range_end_pfn\">range_end_pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev_end_pfn\">prev_end_pfn</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#prev_end_pfn\">prev_end_pfn</a>, <a class=\"id\" href=\"#range_start_pfn\">range_start_pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Update the hole size cound and move on */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start_pfn\">start_pfn</a> &gt; <a class=\"id\" href=\"#range_start_pfn\">range_start_pfn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#prev_end_pfn\">prev_end_pfn</a> &gt; <a class=\"id\" href=\"#start_pfn\">start_pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hole_pages\">hole_pages</a> += <a class=\"id\" href=\"#start_pfn\">start_pfn</a> - <a class=\"id\" href=\"#prev_end_pfn\">prev_end_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev_end_pfn\">prev_end_pfn</a> = <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Account for ranges past physical memory on this node */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#range_end_pfn\">range_end_pfn</a> &gt; <a class=\"id\" href=\"#prev_end_pfn\">prev_end_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hole_pages\">hole_pages</a> += <a class=\"id\" href=\"#range_end_pfn\">range_end_pfn</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#range_start_pfn\">range_start_pfn</a>, <a class=\"id\" href=\"#prev_end_pfn\">prev_end_pfn</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hole_pages\">hole_pages</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * absent_pages_in_range - Return number of page frames in holes within a range</span>", 
"<span class=\"comment\"> * @start_pfn: The start PFN to start searching for holes</span>", 
"<span class=\"comment\"> * @end_pfn: The end PFN to stop searching for holes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It returns the number of pages frames in memory holes within a range.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#absent_pages_in_range\">absent_pages_in_range</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__absent_pages_in_range\">__absent_pages_in_range</a>(<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>, <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#end_pfn\">end_pfn</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Return the number of page frames in holes in a zone on a node */</span>", 
"static unsigned long <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#zone_absent_pages_in_node\">zone_absent_pages_in_node</a>(int <a class=\"id\" href=\"#nid\">nid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#zone_type\">zone_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#ignored\">ignored</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>, <a class=\"id\" href=\"#node_end_pfn\">node_end_pfn</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>, <a class=\"id\" href=\"#zone_end_pfn\">zone_end_pfn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_pfn_range_for_nid\">get_pfn_range_for_nid</a>(<a class=\"id\" href=\"#nid\">nid</a>, &amp;<a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>, &amp;<a class=\"id\" href=\"#node_end_pfn\">node_end_pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#arch_zone_lowest_possible_pfn\">arch_zone_lowest_possible_pfn</a>[<a class=\"id\" href=\"#zone_type\">zone_type</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone_end_pfn\">zone_end_pfn</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#arch_zone_highest_possible_pfn\">arch_zone_highest_possible_pfn</a>[<a class=\"id\" href=\"#zone_type\">zone_type</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_end_pfn\">node_end_pfn</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#adjust_zone_range_for_zone_movable\">adjust_zone_range_for_zone_movable</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#zone_type\">zone_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>, <a class=\"id\" href=\"#node_end_pfn\">node_end_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>, &amp;<a class=\"id\" href=\"#zone_end_pfn\">zone_end_pfn</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__absent_pages_in_range\">__absent_pages_in_range</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>, <a class=\"id\" href=\"#zone_end_pfn\">zone_end_pfn</a>);", 
"}", 
"", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#zone_spanned_pages_in_node\">zone_spanned_pages_in_node</a>(int <a class=\"id\" href=\"#nid\">nid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#zone_type\">zone_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#zones_size\">zones_size</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#zones_size\">zones_size</a>[<a class=\"id\" href=\"#zone_type\">zone_type</a>];", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#zone_absent_pages_in_node\">zone_absent_pages_in_node</a>(int <a class=\"id\" href=\"#nid\">nid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#zone_type\">zone_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#zholes_size\">zholes_size</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#zholes_size\">zholes_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#zholes_size\">zholes_size</a>[<a class=\"id\" href=\"#zone_type\">zone_type</a>];", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#calculate_node_totalpages\">calculate_node_totalpages</a>(struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#zones_size\">zones_size</a>, unsigned long *<a class=\"id\" href=\"#zholes_size\">zholes_size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#realtotalpages\">realtotalpages</a>, <a class=\"id\" href=\"#totalpages\">totalpages</a> = 0;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#totalpages\">totalpages</a> += <a class=\"id\" href=\"#zone_spanned_pages_in_node\">zone_spanned_pages_in_node</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>, <a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zones_size\">zones_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_spanned_pages\">node_spanned_pages</a> = <a class=\"id\" href=\"#totalpages\">totalpages</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#realtotalpages\">realtotalpages</a> = <a class=\"id\" href=\"#totalpages\">totalpages</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#realtotalpages\">realtotalpages</a> -=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_absent_pages_in_node\">zone_absent_pages_in_node</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>, <a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zholes_size\">zholes_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_present_pages\">node_present_pages</a> = <a class=\"id\" href=\"#realtotalpages\">realtotalpages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"On node %d totalpages: %lu\\n\", <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#realtotalpages\">realtotalpages</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM\">CONFIG_SPARSEMEM</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Calculate the size of the zone-&gt;blockflags rounded to an unsigned long</span>", 
"<span class=\"comment\"> * Start by making sure zonesize is a multiple of pageblock_order by rounding</span>", 
"<span class=\"comment\"> * up. Then use 1 NR_PAGEBLOCK_BITS worth of bits per pageblock, finally</span>", 
"<span class=\"comment\"> * round what is now in bits to nearest long in bits, then return it in</span>", 
"<span class=\"comment\"> * bytes.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#usemap_size\">usemap_size</a>(unsigned long <a class=\"id\" href=\"#zonesize\">zonesize</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#usemapsize\">usemapsize</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usemapsize\">usemapsize</a> = <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#zonesize\">zonesize</a>, <a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usemapsize\">usemapsize</a> = <a class=\"id\" href=\"#usemapsize\">usemapsize</a> >> <a class=\"id\" href=\"#pageblock_order\">pageblock_order</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usemapsize\">usemapsize</a> *= <a class=\"id\" href=\"#NR_PAGEBLOCK_BITS\">NR_PAGEBLOCK_BITS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usemapsize\">usemapsize</a> = <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#usemapsize\">usemapsize</a>, 8 * sizeof(unsigned long));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#usemapsize\">usemapsize</a> / 8;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_usemap\">setup_usemap</a>(struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned long <a class=\"id\" href=\"#zonesize\">zonesize</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#usemapsize\">usemapsize</a> = <a class=\"id\" href=\"#usemap_size\">usemap_size</a>(<a class=\"id\" href=\"#zonesize\">zonesize</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#pageblock_flags\">pageblock_flags</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#usemapsize\">usemapsize</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#pageblock_flags\">pageblock_flags</a> = <a class=\"id\" href=\"#alloc_bootmem_node\">alloc_bootmem_node</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>, <a class=\"id\" href=\"#usemapsize\">usemapsize</a>);", 
"}", 
"#else", 
"static void <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#setup_usemap\">setup_usemap</a>(struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned long <a class=\"id\" href=\"#zonesize\">zonesize</a>) {}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SPARSEMEM */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HUGETLB_PAGE_SIZE_VARIABLE\">CONFIG_HUGETLB_PAGE_SIZE_VARIABLE</a>", 
"", 
"<span class=\"comment\">/* Return a sensible default order for the pageblock size. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pageblock_default_order\">pageblock_default_order</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#HPAGE_SHIFT\">HPAGE_SHIFT</a> &gt; <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#HUGETLB_PAGE_ORDER\">HUGETLB_PAGE_ORDER</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>-1;", 
"}", 
"", 
"<span class=\"comment\">/* Initialise the number of pages represented by NR_PAGEBLOCK_BITS */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_pageblock_order\">set_pageblock_order</a>(unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Check that pageblock_nr_pages has not already been setup */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pageblock_order\">pageblock_order</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Assume the largest contiguous order of interest is a huge page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This value may be variable depending on boot parameters on IA64</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pageblock_order\">pageblock_order</a> = <a class=\"id\" href=\"#order\">order</a>;", 
"}", 
"#else <span class=\"comment\">/* CONFIG_HUGETLB_PAGE_SIZE_VARIABLE */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When CONFIG_HUGETLB_PAGE_SIZE_VARIABLE is not set, set_pageblock_order()</span>", 
"<span class=\"comment\"> * and pageblock_default_order() are unused as pageblock_order is set</span>", 
"<span class=\"comment\"> * at compile-time. See include/linux/pageblock-flags.h for the values of</span>", 
"<span class=\"comment\"> * pageblock_order based on the kernel config</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pageblock_default_order\">pageblock_default_order</a>(unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>-1;", 
"}", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_pageblock_order\">set_pageblock_order</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>do {} while (0)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HUGETLB_PAGE_SIZE_VARIABLE */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set up the zone data structures:</span>", 
"<span class=\"comment\"> *   - mark all pages reserved</span>", 
"<span class=\"comment\"> *   - mark all memory queues empty</span>", 
"<span class=\"comment\"> *   - clear the memory bitmaps</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__paginginit\">__paginginit</a> <a class=\"id\" href=\"#free_area_init_core\">free_area_init_core</a>(struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#zones_size\">zones_size</a>, unsigned long *<a class=\"id\" href=\"#zholes_size\">zholes_size</a>)", 
"{", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdat_resize_init\">pgdat_resize_init</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#nr_zones\">nr_zones</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#kswapd_wait\">kswapd_wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#kswapd_max_order\">kswapd_max_order</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdat_page_cgroup_init\">pgdat_page_cgroup_init</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>);", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a> + <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#realsize\">realsize</a>, <a class=\"id\" href=\"#memmap_pages\">memmap_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#lru_list\">lru_list</a> <a class=\"id\" href=\"#l\">l</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#zone_spanned_pages_in_node\">zone_spanned_pages_in_node</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#zones_size\">zones_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#realsize\">realsize</a> = <a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#zone_absent_pages_in_node\">zone_absent_pages_in_node</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#j\">j</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zholes_size\">zholes_size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Adjust realsize so that it accounts for how much memory</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is used by this zone for memmap. This affects the watermark</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and per-cpu initialisations</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memmap_pages\">memmap_pages</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#size\">size</a> * sizeof(struct <a class=\"id\" href=\"#page\">page</a>)) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#realsize\">realsize</a> >= <a class=\"id\" href=\"#memmap_pages\">memmap_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#realsize\">realsize</a> -= <a class=\"id\" href=\"#memmap_pages\">memmap_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memmap_pages\">memmap_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"  %s zone: %lu pages used for memmap\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#zone_names\">zone_names</a>[<a class=\"id\" href=\"#j\">j</a>], <a class=\"id\" href=\"#memmap_pages\">memmap_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"  %s zone: %lu pages exceeds realsize %lu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_names\">zone_names</a>[<a class=\"id\" href=\"#j\">j</a>], <a class=\"id\" href=\"#memmap_pages\">memmap_pages</a>, <a class=\"id\" href=\"#realsize\">realsize</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Account for reserved pages */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#j\">j</a> == 0 && <a class=\"id\" href=\"#realsize\">realsize</a> &gt; <a class=\"id\" href=\"#dma_reserve\">dma_reserve</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#realsize\">realsize</a> -= <a class=\"id\" href=\"#dma_reserve\">dma_reserve</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"  %s zone: %lu pages reserved\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_names\">zone_names</a>[0], <a class=\"id\" href=\"#dma_reserve\">dma_reserve</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_highmem_idx\">is_highmem_idx</a>(<a class=\"id\" href=\"#j\">j</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_kernel_pages\">nr_kernel_pages</a> += <a class=\"id\" href=\"#realsize\">realsize</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_all_pages\">nr_all_pages</a> += <a class=\"id\" href=\"#realsize\">realsize</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#spanned_pages\">spanned_pages</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a> = <a class=\"id\" href=\"#realsize\">realsize</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#nid\">nid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#min_unmapped_pages\">min_unmapped_pages</a> = (<a class=\"id\" href=\"#realsize\">realsize</a>*<a class=\"id\" href=\"#sysctl_min_unmapped_ratio\">sysctl_min_unmapped_ratio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>/ 100;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#min_slab_pages\">min_slab_pages</a> = (<a class=\"id\" href=\"#realsize\">realsize</a> * <a class=\"id\" href=\"#sysctl_min_slab_ratio\">sysctl_min_slab_ratio</a>) / 100;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#zone_names\">zone_names</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_seqlock_init\">zone_seqlock_init</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_pgdat\">zone_pgdat</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_pcp_init\">zone_pcp_init</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_lru\">for_each_lru</a>(<a class=\"id\" href=\"#l\">l</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru\">lru</a>[<a class=\"id\" href=\"#l\">l</a>].<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>.<a class=\"id\" href=\"#nr_saved_scan\">nr_saved_scan</a>[<a class=\"id\" href=\"#l\">l</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>.<a class=\"id\" href=\"#recent_rotated\">recent_rotated</a>[0] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>.<a class=\"id\" href=\"#recent_rotated\">recent_rotated</a>[1] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>.<a class=\"id\" href=\"#recent_scanned\">recent_scanned</a>[0] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>.<a class=\"id\" href=\"#recent_scanned\">recent_scanned</a>[1] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zap_zone_vm_stats\">zap_zone_vm_stats</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pageblock_order\">set_pageblock_order</a>(<a class=\"id\" href=\"#pageblock_default_order\">pageblock_default_order</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_usemap\">setup_usemap</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>, <a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#init_currently_empty_zone\">init_currently_empty_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#MEMMAP_EARLY\">MEMMAP_EARLY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memmap_init\">memmap_init</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init_refok\">__init_refok</a> <a class=\"id\" href=\"#alloc_node_mem_map\">alloc_node_mem_map</a>(struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Skip empty nodes */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_spanned_pages\">node_spanned_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FLAT_NODE_MEM_MAP\">CONFIG_FLAT_NODE_MEM_MAP</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* ia64 gets its own node_mem_map, before this, without bootmem */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_mem_map\">node_mem_map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#map\">map</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The zone's endpoints aren't required to be MAX_ORDER</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * aligned but the node_mem_map endpoints must be in order</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for the buddy allocator to function correctly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a> &amp; ~(<a class=\"id\" href=\"#MAX_ORDER_NR_PAGES\">MAX_ORDER_NR_PAGES</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a> + <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_spanned_pages\">node_spanned_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#MAX_ORDER_NR_PAGES\">MAX_ORDER_NR_PAGES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> =  (<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>) * sizeof(struct <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#alloc_remap\">alloc_remap</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#map\">map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#alloc_bootmem_node\">alloc_bootmem_node</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_mem_map\">node_mem_map</a> = <a class=\"id\" href=\"#map\">map</a> + (<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a> - <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_NEED_MULTIPLE_NODES\">CONFIG_NEED_MULTIPLE_NODES</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * With no DISCONTIG, the global mem_map is just set as node 0's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgdat\">pgdat</a> == <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_map\">mem_map</a> = <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(0)-><a class=\"id\" href=\"#node_mem_map\">node_mem_map</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ARCH_POPULATES_NODE_MAP\">CONFIG_ARCH_POPULATES_NODE_MAP</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#mem_map\">mem_map</a>) != <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_map\">mem_map</a> -= (<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a> - <a class=\"id\" href=\"#ARCH_PFN_OFFSET\">ARCH_PFN_OFFSET</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_ARCH_POPULATES_NODE_MAP */</span>", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FLAT_NODE_MEM_MAP */</span>", 
"}", 
"", 
"void <a class=\"id\" href=\"#__paginginit\">__paginginit</a> <a class=\"id\" href=\"#free_area_init_node\">free_area_init_node</a>(int <a class=\"id\" href=\"#nid\">nid</a>, unsigned long *<a class=\"id\" href=\"#zones_size\">zones_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>, unsigned long *<a class=\"id\" href=\"#zholes_size\">zholes_size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a> = <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a> = <a class=\"id\" href=\"#nid\">nid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a> = <a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#calculate_node_totalpages\">calculate_node_totalpages</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>, <a class=\"id\" href=\"#zones_size\">zones_size</a>, <a class=\"id\" href=\"#zholes_size\">zholes_size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_node_mem_map\">alloc_node_mem_map</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FLAT_NODE_MEM_MAP\">CONFIG_FLAT_NODE_MEM_MAP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"free_area_init_node: node %d, pgdat %08lx, node_mem_map %08lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a>, (unsigned long)<a class=\"id\" href=\"#pgdat\">pgdat</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_mem_map\">node_mem_map</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_area_init_core\">free_area_init_core</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>, <a class=\"id\" href=\"#zones_size\">zones_size</a>, <a class=\"id\" href=\"#zholes_size\">zholes_size</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ARCH_POPULATES_NODE_MAP\">CONFIG_ARCH_POPULATES_NODE_MAP</a>", 
"", 
"#if <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a> &gt; 1", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Figure out the number of possible node ids.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_nr_node_ids\">setup_nr_node_ids</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#highest\">highest</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#node_possible_map\">node_possible_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#highest\">highest</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a> = <a class=\"id\" href=\"#highest\">highest</a> + 1;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#setup_nr_node_ids\">setup_nr_node_ids</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * add_active_range - Register a range of PFNs backed by physical memory</span>", 
"<span class=\"comment\"> * @nid: The node ID the range resides on</span>", 
"<span class=\"comment\"> * @start_pfn: The start PFN of the available physical memory</span>", 
"<span class=\"comment\"> * @end_pfn: The end PFN of the available physical memory</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These ranges are stored in an early_node_map[] and later used by</span>", 
"<span class=\"comment\"> * free_area_init_nodes() to calculate zone sizes and holes. If the</span>", 
"<span class=\"comment\"> * range spans a memory hole, it is up to the architecture to ensure</span>", 
"<span class=\"comment\"> * the memory is not freed by the bootmem allocator. If possible</span>", 
"<span class=\"comment\"> * the range being registered will be merged with existing ranges.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#add_active_range\">add_active_range</a>(unsigned int <a class=\"id\" href=\"#nid\">nid</a>, unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mminit_dprintk\">mminit_dprintk</a>(<a class=\"id\" href=\"#MMINIT_TRACE\">MMINIT_TRACE</a>, \"memory_register\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Entering add_active_range(%d, %#lx, %#lx) \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%d entries of %d used\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#end_pfn\">end_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_nodemap_entries\">nr_nodemap_entries</a>, <a class=\"id\" href=\"#MAX_ACTIVE_REGIONS\">MAX_ACTIVE_REGIONS</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mminit_validate_memmodel_limits\">mminit_validate_memmodel_limits</a>(&amp;<a class=\"id\" href=\"#start_pfn\">start_pfn</a>, &amp;<a class=\"id\" href=\"#end_pfn\">end_pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Merge with existing active regions if possible */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_nodemap_entries\">nr_nodemap_entries</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#nid\">nid</a> != <a class=\"id\" href=\"#nid\">nid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Skip if an existing region covers this new one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start_pfn\">start_pfn</a> >= <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_pfn\">end_pfn</a> <= <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Merge forward if suitable */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start_pfn\">start_pfn</a> <= <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_pfn\">end_pfn</a> &gt; <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a> = <a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Merge backward if suitable */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start_pfn\">start_pfn</a> &lt; <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_pfn\">end_pfn</a> >= <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check that early_node_map is large enough */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#MAX_ACTIVE_REGIONS\">MAX_ACTIVE_REGIONS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"More than %d memory regions, truncating\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MAX_ACTIVE_REGIONS\">MAX_ACTIVE_REGIONS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#nid\">nid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a> = <a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_nodemap_entries\">nr_nodemap_entries</a> = <a class=\"id\" href=\"#i\">i</a> + 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * remove_active_range - Shrink an existing registered range of PFNs</span>", 
"<span class=\"comment\"> * @nid: The node id the range is on that should be shrunk</span>", 
"<span class=\"comment\"> * @start_pfn: The new PFN of the range</span>", 
"<span class=\"comment\"> * @end_pfn: The new PFN of the range</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * i386 with NUMA use alloc_remap() to store a node_mem_map on a local node.</span>", 
"<span class=\"comment\"> * The map is kept near the end physical page range that has already been</span>", 
"<span class=\"comment\"> * registered. This function allows an arch to shrink an existing registered</span>", 
"<span class=\"comment\"> * range.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#remove_active_range\">remove_active_range</a>(unsigned int <a class=\"id\" href=\"#nid\">nid</a>, unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#removed\">removed</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"remove_active_range (%d, %lu, %lu)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#end_pfn\">end_pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find the old active region end and shrink */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_active_range_index_in_nid\">for_each_active_range_index_in_nid</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nid\">nid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a> >= <a class=\"id\" href=\"#start_pfn\">start_pfn</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a> <= <a class=\"id\" href=\"#end_pfn\">end_pfn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* clear it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#removed\">removed</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a> &lt; <a class=\"id\" href=\"#start_pfn\">start_pfn</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a> &gt; <a class=\"id\" href=\"#start_pfn\">start_pfn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#temp_end_pfn\">temp_end_pfn</a> = <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#temp_end_pfn\">temp_end_pfn</a> &gt; <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_active_range\">add_active_range</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#end_pfn\">end_pfn</a>, <a class=\"id\" href=\"#temp_end_pfn\">temp_end_pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a> >= <a class=\"id\" href=\"#start_pfn\">start_pfn</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a> &gt; <a class=\"id\" href=\"#end_pfn\">end_pfn</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a> &lt; <a class=\"id\" href=\"#end_pfn\">end_pfn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a> = <a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#removed\">removed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* remove the blank ones */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#nr_nodemap_entries\">nr_nodemap_entries</a> - 1; <a class=\"id\" href=\"#i\">i</a> &gt; 0; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#nid\">nid</a> != <a class=\"id\" href=\"#nid\">nid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we found it, get rid of it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#i\">i</a>; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#nr_nodemap_entries\">nr_nodemap_entries</a> - 1; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#j\">j</a>], &amp;<a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#j\">j</a>+1],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#j\">j</a>]));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#nr_nodemap_entries\">nr_nodemap_entries</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#j\">j</a>], 0, sizeof(<a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#j\">j</a>]));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_nodemap_entries\">nr_nodemap_entries</a>--;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * remove_all_active_ranges - Remove all currently registered regions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * During discovery, it may be found that a table like SRAT is invalid</span>", 
"<span class=\"comment\"> * and an alternative discovery method must be used. This function removes</span>", 
"<span class=\"comment\"> * all currently registered regions.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#remove_all_active_ranges\">remove_all_active_ranges</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#early_node_map\">early_node_map</a>, 0, sizeof(<a class=\"id\" href=\"#early_node_map\">early_node_map</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_nodemap_entries\">nr_nodemap_entries</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/* Compare two active node_active_regions */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#cmp_node_active_region\">cmp_node_active_region</a>(const void *<a class=\"id\" href=\"#a\">a</a>, const void *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#node_active_region\">node_active_region</a> *<a class=\"id\" href=\"#arange\">arange</a> = (struct <a class=\"id\" href=\"#node_active_region\">node_active_region</a> *)<a class=\"id\" href=\"#a\">a</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#node_active_region\">node_active_region</a> *<a class=\"id\" href=\"#brange\">brange</a> = (struct <a class=\"id\" href=\"#node_active_region\">node_active_region</a> *)<a class=\"id\" href=\"#b\">b</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Done this way to avoid overflows */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arange\">arange</a>-><a class=\"id\" href=\"#start_pfn\">start_pfn</a> &gt; <a class=\"id\" href=\"#brange\">brange</a>-><a class=\"id\" href=\"#start_pfn\">start_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arange\">arange</a>-><a class=\"id\" href=\"#start_pfn\">start_pfn</a> &lt; <a class=\"id\" href=\"#brange\">brange</a>-><a class=\"id\" href=\"#start_pfn\">start_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* sort the node_map by start_pfn */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sort_node_map\">sort_node_map</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sort\">sort</a>(<a class=\"id\" href=\"#early_node_map\">early_node_map</a>, (<a class=\"id\" href=\"#size_t\">size_t</a>)<a class=\"id\" href=\"#nr_nodemap_entries\">nr_nodemap_entries</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#node_active_region\">node_active_region</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmp_node_active_region\">cmp_node_active_region</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Find the lowest pfn for a node */</span>", 
"static unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#find_min_pfn_for_node\">find_min_pfn_for_node</a>(int <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#min_pfn\">min_pfn</a> = <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Assuming a sorted map, the first range found has the starting pfn */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_active_range_index_in_nid\">for_each_active_range_index_in_nid</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nid\">nid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_pfn\">min_pfn</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#min_pfn\">min_pfn</a>, <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#min_pfn\">min_pfn</a> == <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Could not find start_pfn for node %d\\n\", <a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min_pfn\">min_pfn</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_min_pfn_with_active_regions - Find the minimum PFN registered</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It returns the minimum PFN based on information provided via</span>", 
"<span class=\"comment\"> * add_active_range().</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#find_min_pfn_with_active_regions\">find_min_pfn_with_active_regions</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#find_min_pfn_for_node\">find_min_pfn_for_node</a>(<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * early_calculate_totalpages()</span>", 
"<span class=\"comment\"> * Sum pages in active regions for movable zone.</span>", 
"<span class=\"comment\"> * Populate N_HIGH_MEMORY for calculating usable_nodes.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#early_calculate_totalpages\">early_calculate_totalpages</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#totalpages\">totalpages</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_nodemap_entries\">nr_nodemap_entries</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#totalpages\">totalpages</a> += <a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pages\">pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_set_state\">node_set_state</a>(<a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>);", 
"<span class=\"ts\"/>}", 
"  <span class=\"ts\"/>return <a class=\"id\" href=\"#totalpages\">totalpages</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Find the PFN the Movable zone begins in each node. Kernel memory</span>", 
"<span class=\"comment\"> * is spread evenly between nodes as long as the nodes have enough</span>", 
"<span class=\"comment\"> * memory. When they don't, some nodes will have more kernelcore than</span>", 
"<span class=\"comment\"> * others</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#find_zone_movable_pfns_for_nodes\">find_zone_movable_pfns_for_nodes</a>(unsigned long *<a class=\"id\" href=\"#movable_pfn\">movable_pfn</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nid\">nid</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#usable_startpfn\">usable_startpfn</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#kernelcore_node\">kernelcore_node</a>, <a class=\"id\" href=\"#kernelcore_remaining\">kernelcore_remaining</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* save the state before borrow the nodemask */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#saved_node_state\">saved_node_state</a> = <a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#totalpages\">totalpages</a> = <a class=\"id\" href=\"#early_calculate_totalpages\">early_calculate_totalpages</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#usable_nodes\">usable_nodes</a> = <a class=\"id\" href=\"#nodes_weight\">nodes_weight</a>(<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If movablecore was specified, calculate what size of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kernelcore that corresponds so that memory usable for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any allocation type is evenly spread. If both kernelcore</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and movablecore are specified, then the value of kernelcore</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will be used for required_kernelcore if it's greater than</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * what movablecore would have allowed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#required_movablecore\">required_movablecore</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#corepages\">corepages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Round-up so that ZONE_MOVABLE is at least as large as what</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * was requested by the user</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#required_movablecore\">required_movablecore</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#required_movablecore\">required_movablecore</a>, <a class=\"id\" href=\"#MAX_ORDER_NR_PAGES\">MAX_ORDER_NR_PAGES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#corepages\">corepages</a> = <a class=\"id\" href=\"#totalpages\">totalpages</a> - <a class=\"id\" href=\"#required_movablecore\">required_movablecore</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#required_kernelcore\">required_kernelcore</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#required_kernelcore\">required_kernelcore</a>, <a class=\"id\" href=\"#corepages\">corepages</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If kernelcore was not specified, there is no ZONE_MOVABLE */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#required_kernelcore\">required_kernelcore</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* usable_startpfn is the lowest possible pfn ZONE_MOVABLE can be at */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#find_usable_zone_for_movable\">find_usable_zone_for_movable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usable_startpfn\">usable_startpfn</a> = <a class=\"id\" href=\"#arch_zone_lowest_possible_pfn\">arch_zone_lowest_possible_pfn</a>[<a class=\"id\" href=\"#movable_zone\">movable_zone</a>];", 
"", 
"<a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Spread kernelcore memory as evenly as possible throughout nodes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kernelcore_node\">kernelcore_node</a> = <a class=\"id\" href=\"#required_kernelcore\">required_kernelcore</a> / <a class=\"id\" href=\"#usable_nodes\">usable_nodes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_state\">for_each_node_state</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Recalculate kernelcore_node if the division per node</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * now exceeds what is necessary to satisfy the requested</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * amount of memory for the kernel</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#required_kernelcore\">required_kernelcore</a> &lt; <a class=\"id\" href=\"#kernelcore_node\">kernelcore_node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernelcore_node\">kernelcore_node</a> = <a class=\"id\" href=\"#required_kernelcore\">required_kernelcore</a> / <a class=\"id\" href=\"#usable_nodes\">usable_nodes</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * As the map is walked, we track how much memory is usable</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * by the kernel using kernelcore_remaining. When it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 0, the rest of the node is usable by ZONE_MOVABLE</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernelcore_remaining\">kernelcore_remaining</a> = <a class=\"id\" href=\"#kernelcore_node\">kernelcore_node</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Go through each range of PFNs within this node */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_active_range_index_in_nid\">for_each_active_range_index_in_nid</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nid\">nid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size_pages\">size_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_pfn\">start_pfn</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_movable_pfn\">zone_movable_pfn</a>[<a class=\"id\" href=\"#nid\">nid</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_pfn\">end_pfn</a> = <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start_pfn\">start_pfn</a> >= <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Account for what is only usable for kernelcore */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start_pfn\">start_pfn</a> &lt; <a class=\"id\" href=\"#usable_startpfn\">usable_startpfn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#kernel_pages\">kernel_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernel_pages\">kernel_pages</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#end_pfn\">end_pfn</a>, <a class=\"id\" href=\"#usable_startpfn\">usable_startpfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>- <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernelcore_remaining\">kernelcore_remaining</a> -= <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#kernel_pages\">kernel_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernelcore_remaining\">kernelcore_remaining</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#required_kernelcore\">required_kernelcore</a> -= <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#kernel_pages\">kernel_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#required_kernelcore\">required_kernelcore</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Continue if range is now fully accounted */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end_pfn\">end_pfn</a> <= <a class=\"id\" href=\"#usable_startpfn\">usable_startpfn</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Push zone_movable_pfn to the end so</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * that if we have to rebalance</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * kernelcore across nodes, we will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * not double account here</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_movable_pfn\">zone_movable_pfn</a>[<a class=\"id\" href=\"#nid\">nid</a>] = <a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_pfn\">start_pfn</a> = <a class=\"id\" href=\"#usable_startpfn\">usable_startpfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The usable PFN range for ZONE_MOVABLE is from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * start_pfn-&gt;end_pfn. Calculate size_pages as the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * number of pages used as kernelcore</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_pages\">size_pages</a> = <a class=\"id\" href=\"#end_pfn\">end_pfn</a> - <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size_pages\">size_pages</a> &gt; <a class=\"id\" href=\"#kernelcore_remaining\">kernelcore_remaining</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_pages\">size_pages</a> = <a class=\"id\" href=\"#kernelcore_remaining\">kernelcore_remaining</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_movable_pfn\">zone_movable_pfn</a>[<a class=\"id\" href=\"#nid\">nid</a>] = <a class=\"id\" href=\"#start_pfn\">start_pfn</a> + <a class=\"id\" href=\"#size_pages\">size_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Some kernelcore has been met, update counts and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * break if the kernelcore for this node has been</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * satisified</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#required_kernelcore\">required_kernelcore</a> -= <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#required_kernelcore\">required_kernelcore</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_pages\">size_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernelcore_remaining\">kernelcore_remaining</a> -= <a class=\"id\" href=\"#size_pages\">size_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#kernelcore_remaining\">kernelcore_remaining</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If there is still required_kernelcore, we do another pass with one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * less node in the count. This will push zone_movable_pfn[nid] further</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * along on the nodes that still have memory until kernelcore is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * satisified</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usable_nodes\">usable_nodes</a>--;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#usable_nodes\">usable_nodes</a> && <a class=\"id\" href=\"#required_kernelcore\">required_kernelcore</a> &gt; <a class=\"id\" href=\"#usable_nodes\">usable_nodes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Align start of ZONE_MOVABLE on all nids to MAX_ORDER_NR_PAGES */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#nid\">nid</a> = 0; <a class=\"id\" href=\"#nid\">nid</a> &lt; <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>; <a class=\"id\" href=\"#nid\">nid</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_movable_pfn\">zone_movable_pfn</a>[<a class=\"id\" href=\"#nid\">nid</a>] =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#zone_movable_pfn\">zone_movable_pfn</a>[<a class=\"id\" href=\"#nid\">nid</a>], <a class=\"id\" href=\"#MAX_ORDER_NR_PAGES\">MAX_ORDER_NR_PAGES</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* restore the node_state */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>] = <a class=\"id\" href=\"#saved_node_state\">saved_node_state</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Any regular memory on that node ? */</span>", 
"static void <a class=\"id\" href=\"#check_for_regular_memory\">check_for_regular_memory</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#zone_type\">zone_type</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#zone_type\">zone_type</a> = 0; <a class=\"id\" href=\"#zone_type\">zone_type</a> <= <a class=\"id\" href=\"#ZONE_NORMAL\">ZONE_NORMAL</a>; <a class=\"id\" href=\"#zone_type\">zone_type</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a> = &amp;<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a>[<a class=\"id\" href=\"#zone_type\">zone_type</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_set_state\">node_set_state</a>(<a class=\"id\" href=\"#zone_to_nid\">zone_to_nid</a>(<a class=\"id\" href=\"#zone\">zone</a>), <a class=\"id\" href=\"#N_NORMAL_MEMORY\">N_NORMAL_MEMORY</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * free_area_init_nodes - Initialise all pg_data_t and zone data</span>", 
"<span class=\"comment\"> * @max_zone_pfn: an array of max PFNs for each zone</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This will call free_area_init_node() for each active node in the system.</span>", 
"<span class=\"comment\"> * Using the page ranges provided by add_active_range(), the size of each</span>", 
"<span class=\"comment\"> * zone in each node and their holes is calculated. If the maximum PFN</span>", 
"<span class=\"comment\"> * between two adjacent zones match, it is assumed that the zone is empty.</span>", 
"<span class=\"comment\"> * For example, if arch_max_dma_pfn == arch_max_dma32_pfn, it is assumed</span>", 
"<span class=\"comment\"> * that arch_max_dma32_pfn has no pages. It is also assumed that a zone</span>", 
"<span class=\"comment\"> * starts where the previous one ended. For example, ZONE_DMA32 starts</span>", 
"<span class=\"comment\"> * at arch_max_dma_pfn.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#free_area_init_nodes\">free_area_init_nodes</a>(unsigned long *<a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nid\">nid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Sort early_node_map as initialisation assumes it is sorted */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sort_node_map\">sort_node_map</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Record where the zone boundaries are */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#arch_zone_lowest_possible_pfn\">arch_zone_lowest_possible_pfn</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#arch_zone_lowest_possible_pfn\">arch_zone_lowest_possible_pfn</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#arch_zone_highest_possible_pfn\">arch_zone_highest_possible_pfn</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#arch_zone_highest_possible_pfn\">arch_zone_highest_possible_pfn</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_zone_lowest_possible_pfn\">arch_zone_lowest_possible_pfn</a>[0] = <a class=\"id\" href=\"#find_min_pfn_with_active_regions\">find_min_pfn_with_active_regions</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_zone_highest_possible_pfn\">arch_zone_highest_possible_pfn</a>[0] = <a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a>[0];", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#ZONE_MOVABLE\">ZONE_MOVABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_zone_lowest_possible_pfn\">arch_zone_lowest_possible_pfn</a>[<a class=\"id\" href=\"#i\">i</a>] =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_zone_highest_possible_pfn\">arch_zone_highest_possible_pfn</a>[<a class=\"id\" href=\"#i\">i</a>-1];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_zone_highest_possible_pfn\">arch_zone_highest_possible_pfn</a>[<a class=\"id\" href=\"#i\">i</a>] =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#arch_zone_lowest_possible_pfn\">arch_zone_lowest_possible_pfn</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_zone_lowest_possible_pfn\">arch_zone_lowest_possible_pfn</a>[<a class=\"id\" href=\"#ZONE_MOVABLE\">ZONE_MOVABLE</a>] = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_zone_highest_possible_pfn\">arch_zone_highest_possible_pfn</a>[<a class=\"id\" href=\"#ZONE_MOVABLE\">ZONE_MOVABLE</a>] = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find the PFNs that ZONE_MOVABLE begins at in each node */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#zone_movable_pfn\">zone_movable_pfn</a>, 0, sizeof(<a class=\"id\" href=\"#zone_movable_pfn\">zone_movable_pfn</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#find_zone_movable_pfns_for_nodes\">find_zone_movable_pfns_for_nodes</a>(<a class=\"id\" href=\"#zone_movable_pfn\">zone_movable_pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Print out the zone ranges */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Zone PFN ranges:\\n\");", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#ZONE_MOVABLE\">ZONE_MOVABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"  %-8s \", <a class=\"id\" href=\"#zone_names\">zone_names</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#arch_zone_lowest_possible_pfn\">arch_zone_lowest_possible_pfn</a>[<a class=\"id\" href=\"#i\">i</a>] ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_zone_highest_possible_pfn\">arch_zone_highest_possible_pfn</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"empty\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%0#10lx -> %0#10lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_zone_lowest_possible_pfn\">arch_zone_lowest_possible_pfn</a>[<a class=\"id\" href=\"#i\">i</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_zone_highest_possible_pfn\">arch_zone_highest_possible_pfn</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Print out the PFNs ZONE_MOVABLE begins at in each node */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Movable zone start PFN for each node\\n\");", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_movable_pfn\">zone_movable_pfn</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"  Node %d: %lu\\n\", <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#zone_movable_pfn\">zone_movable_pfn</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Print out the early_node_map[] */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"early_node_map[%d] active PFN ranges\\n\", <a class=\"id\" href=\"#nr_nodemap_entries\">nr_nodemap_entries</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_nodemap_entries\">nr_nodemap_entries</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"  %3d: %0#10lx -> %0#10lx\\n\", <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#nid\">nid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_pfn\">end_pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialise every node */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mminit_verify_pageflags_layout\">mminit_verify_pageflags_layout</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_nr_node_ids\">setup_nr_node_ids</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#nid\">nid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a> = <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_area_init_node\">free_area_init_node</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#find_min_pfn_for_node\">find_min_pfn_for_node</a>(<a class=\"id\" href=\"#nid\">nid</a>), <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Any memory on that node */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_present_pages\">node_present_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_set_state\">node_set_state</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_for_regular_memory\">check_for_regular_memory</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#cmdline_parse_core\">cmdline_parse_core</a>(char *<a class=\"id\" href=\"#p\">p</a>, unsigned long *<a class=\"id\" href=\"#core\">core</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#coremem\">coremem</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#coremem\">coremem</a> = <a class=\"id\" href=\"#memparse\">memparse</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#core\">core</a> = <a class=\"id\" href=\"#coremem\">coremem</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Paranoid check that UL is enough for the coremem value */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>((<a class=\"id\" href=\"#coremem\">coremem</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) &gt; <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kernelcore=size sets the amount of memory for use for allocations that</span>", 
"<span class=\"comment\"> * cannot be reclaimed or migrated.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#cmdline_parse_kernelcore\">cmdline_parse_kernelcore</a>(char *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cmdline_parse_core\">cmdline_parse_core</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#required_kernelcore\">required_kernelcore</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * movablecore=size sets the amount of memory for use for allocations that</span>", 
"<span class=\"comment\"> * can be reclaimed or migrated.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#cmdline_parse_movablecore\">cmdline_parse_movablecore</a>(char *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cmdline_parse_core\">cmdline_parse_core</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#required_movablecore\">required_movablecore</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"kernelcore\", <a class=\"id\" href=\"#cmdline_parse_kernelcore\">cmdline_parse_kernelcore</a>);", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"movablecore\", <a class=\"id\" href=\"#cmdline_parse_movablecore\">cmdline_parse_movablecore</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_ARCH_POPULATES_NODE_MAP */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * set_dma_reserve - set the specified number of pages reserved in the first zone</span>", 
"<span class=\"comment\"> * @new_dma_reserve: The number of pages to mark reserved</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The per-cpu batchsize and zone watermarks are determined by present_pages.</span>", 
"<span class=\"comment\"> * In the DMA zone, a significant percentage may be consumed by kernel image</span>", 
"<span class=\"comment\"> * and other unfreeable allocations which can skew the watermarks badly. This</span>", 
"<span class=\"comment\"> * function may optionally be used to account for unfreeable pages in the</span>", 
"<span class=\"comment\"> * first zone (e.g., ZONE_DMA). The effect will be lower watermarks and</span>", 
"<span class=\"comment\"> * smaller per-cpu batchsize.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_dma_reserve\">set_dma_reserve</a>(unsigned long <a class=\"id\" href=\"#new_dma_reserve\">new_dma_reserve</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_reserve\">dma_reserve</a> = <a class=\"id\" href=\"#new_dma_reserve\">new_dma_reserve</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_NEED_MULTIPLE_NODES\">CONFIG_NEED_MULTIPLE_NODES</a>", 
"struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> <a class=\"id\" href=\"#__refdata\">__refdata</a> <a class=\"id\" href=\"#contig_page_data\">contig_page_data</a> = {", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
" .<a class=\"id\" href=\"#bdata\">bdata</a> = &amp;<a class=\"id\" href=\"#bootmem_node_data\">bootmem_node_data</a>[0]", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
" };", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#contig_page_data\">contig_page_data</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#free_area_init\">free_area_init</a>(unsigned long *<a class=\"id\" href=\"#zones_size\">zones_size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_area_init_node\">free_area_init_node</a>(0, <a class=\"id\" href=\"#zones_size\">zones_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#PAGE_OFFSET\">PAGE_OFFSET</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#page_alloc_cpu_notify\">page_alloc_cpu_notify</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = (unsigned long)<a class=\"id\" href=\"#hcpu\">hcpu</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#action\">action</a> == <a class=\"id\" href=\"#CPU_DEAD\">CPU_DEAD</a> || <a class=\"id\" href=\"#action\">action</a> == <a class=\"id\" href=\"#CPU_DEAD_FROZEN\">CPU_DEAD_FROZEN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drain_pages\">drain_pages</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Spill the event counters of the dead processor</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * into the current processors event counters.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This artificially elevates the count of the current</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * processor.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_events_fold_cpu\">vm_events_fold_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Zero the differential counters of the dead processor</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so that the vm statistics are consistent.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is only okay since the processor is dead and cannot</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * race with what we are doing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#refresh_cpu_vm_stats\">refresh_cpu_vm_stats</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#page_alloc_init\">page_alloc_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hotcpu_notifier\">hotcpu_notifier</a>(<a class=\"id\" href=\"#page_alloc_cpu_notify\">page_alloc_cpu_notify</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * calculate_totalreserve_pages - called when sysctl_lower_zone_reserve_ratio</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or min_free_kbytes changes.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#calculate_totalreserve_pages\">calculate_totalreserve_pages</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#reserve_pages\">reserve_pages</a> = 0;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_pgdat\">for_each_online_pgdat</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max\">max</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Find valid and maximum lowmem_reserve in the zone */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#i\">i</a>; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lowmem_reserve\">lowmem_reserve</a>[<a class=\"id\" href=\"#j\">j</a>] &gt; <a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lowmem_reserve\">lowmem_reserve</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we treat the high watermark as reserved pages. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> += <a class=\"id\" href=\"#high_wmark_pages\">high_wmark_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#max\">max</a> &gt; <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reserve_pages\">reserve_pages</a> += <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#totalreserve_pages\">totalreserve_pages</a> = <a class=\"id\" href=\"#reserve_pages\">reserve_pages</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * setup_per_zone_lowmem_reserve - called whenever</span>", 
];
xr_frag_insert('l/4e/6b50204c6b140e392947e4e6f49b9330c1c46a.xr', __xr_tmp);
