var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * LZO decompressor for the Linux kernel. Code borrowed from the lzo</span>", 
"<span class=\"comment\"> * implementation by Markus Franz Xaver Johannes Oberhumer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Linux kernel adaptation:</span>", 
"<span class=\"comment\"> * Copyright (C) 2009</span>", 
"<span class=\"comment\"> * Albin Tonnerre, Free Electrons &lt;albin.tonnerre@free-electrons.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Original code:</span>", 
"<span class=\"comment\"> * Copyright (C) 1996-2005 Markus Franz Xaver Johannes Oberhumer</span>", 
"<span class=\"comment\"> * All Rights Reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * lzop and the LZO library are free software; you can redistribute them</span>", 
"<span class=\"comment\"> * and/or modify them under the terms of the GNU General Public License as</span>", 
"<span class=\"comment\"> * published by the Free Software Foundation; either version 2 of</span>", 
"<span class=\"comment\"> * the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; see the file COPYING.</span>", 
"<span class=\"comment\"> * If not, write to the Free Software Foundation, Inc.,</span>", 
"<span class=\"comment\"> * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Markus F.X.J. Oberhumer</span>", 
"<span class=\"comment\"> * &lt;markus@oberhumer.com&gt;</span>", 
"<span class=\"comment\"> * http://www.oberhumer.com/opensource/lzop/</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#STATIC\">STATIC</a>", 
"#<a class=\"id\" href=\"#include\">include</a> \"lzo/lzo1x_decompress.c\"", 
"#else", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#decompress\">decompress</a>/<a class=\"id\" href=\"#unlzo\">unlzo</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#lzo\">lzo</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#decompress\">decompress</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#unaligned\">unaligned</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static const unsigned char <a class=\"id\" href=\"#lzop_magic\">lzop_magic</a>[] = {", 
"<span class=\"ts\"/>0x89, 0x4c, 0x5a, 0x4f, 0x00, 0x0d, 0x0a, 0x1a, 0x0a };", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZO_BLOCK_SIZE\">LZO_BLOCK_SIZE</a>        (256*1024l)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HEADER_HAS_FILTER\">HEADER_HAS_FILTER</a>      0x00000800L", 
"", 
"<a class=\"id\" href=\"#STATIC\">STATIC</a> <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#parse_header\">parse_header</a>(<a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#input\">input</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#skip\">skip</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#parse\">parse</a> = <a class=\"id\" href=\"#input\">input</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#level\">level</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#version\">version</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* read magic: 9 first bits */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#l\">l</a> = 0; <a class=\"id\" href=\"#l\">l</a> &lt; 9; <a class=\"id\" href=\"#l\">l</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#parse\">parse</a>++ != <a class=\"id\" href=\"#lzop_magic\">lzop_magic</a>[<a class=\"id\" href=\"#l\">l</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* get version (2bytes), skip library version (2),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 'need to be extracted' version (2) and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * method (1) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#version\">version</a> = <a class=\"id\" href=\"#get_unaligned_be16\">get_unaligned_be16</a>(<a class=\"id\" href=\"#parse\">parse</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parse\">parse</a> += 7;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#version\">version</a> >= 0x0940)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#level\">level</a> = *<a class=\"id\" href=\"#parse\">parse</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(<a class=\"id\" href=\"#parse\">parse</a>) &amp; <a class=\"id\" href=\"#HEADER_HAS_FILTER\">HEADER_HAS_FILTER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parse\">parse</a> += 8; <span class=\"comment\">/* flags + filter info */</span>", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parse\">parse</a> += 4; <span class=\"comment\">/* flags */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* skip mode and mtime_low */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parse\">parse</a> += 8;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#version\">version</a> >= 0x0940)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parse\">parse</a> += 4;<span class=\"ts\"/><span class=\"comment\">/* skip mtime_high */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = *<a class=\"id\" href=\"#parse\">parse</a>++;", 
"<span class=\"ts\"/><span class=\"comment\">/* don't care about the file name, and skip checksum */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parse\">parse</a> += <a class=\"id\" href=\"#l\">l</a> + 4;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#skip\">skip</a> = <a class=\"id\" href=\"#parse\">parse</a> - <a class=\"id\" href=\"#input\">input</a>;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<a class=\"id\" href=\"#STATIC\">STATIC</a> <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#unlzo\">unlzo</a>(<a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#input\">input</a>, int <a class=\"id\" href=\"#in_len\">in_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#fill\">fill</a>) (void *, unsigned int),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#flush\">flush</a>) (void *, unsigned int),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#output\">output</a>, int *<a class=\"id\" href=\"#posp\">posp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#error_fn\">error_fn</a>) (char *<a class=\"id\" href=\"#x\">x</a>))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#skip\">skip</a> = 0, <a class=\"id\" href=\"#r\">r</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#src_len\">src_len</a>, <a class=\"id\" href=\"#dst_len\">dst_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#in_buf\">in_buf</a>, *<a class=\"id\" href=\"#in_buf_save\">in_buf_save</a>, *<a class=\"id\" href=\"#out_buf\">out_buf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_error_fn\">set_error_fn</a>(<a class=\"id\" href=\"#error_fn\">error_fn</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#output\">output</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out_buf\">out_buf</a> = <a class=\"id\" href=\"#output\">output</a>;", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#flush\">flush</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a>(\"NULL output pointer and no flush function provided\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out_buf\">out_buf</a> = <a class=\"id\" href=\"#malloc\">malloc</a>(<a class=\"id\" href=\"#LZO_BLOCK_SIZE\">LZO_BLOCK_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#out_buf\">out_buf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a>(\"Could not allocate output buffer\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#input\">input</a> && <a class=\"id\" href=\"#fill\">fill</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a>(\"Both input pointer and fill function provided, don't know what to do\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit_1\">exit_1</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#input\">input</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#in_buf\">in_buf</a> = <a class=\"id\" href=\"#input\">input</a>;", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#fill\">fill</a> || !<a class=\"id\" href=\"#posp\">posp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a>(\"NULL input pointer and missing position pointer or fill function\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit_1\">exit_1</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#in_buf\">in_buf</a> = <a class=\"id\" href=\"#malloc\">malloc</a>(<a class=\"id\" href=\"#lzo1x_worst_compress\">lzo1x_worst_compress</a>(<a class=\"id\" href=\"#LZO_BLOCK_SIZE\">LZO_BLOCK_SIZE</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#in_buf\">in_buf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a>(\"Could not allocate input buffer\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit_1\">exit_1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_buf_save\">in_buf_save</a> = <a class=\"id\" href=\"#in_buf\">in_buf</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#posp\">posp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#posp\">posp</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fill\">fill</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fill\">fill</a>(<a class=\"id\" href=\"#in_buf\">in_buf</a>, <a class=\"id\" href=\"#lzo1x_worst_compress\">lzo1x_worst_compress</a>(<a class=\"id\" href=\"#LZO_BLOCK_SIZE\">LZO_BLOCK_SIZE</a>));", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parse_header\">parse_header</a>(<a class=\"id\" href=\"#input\">input</a>, &amp;<a class=\"id\" href=\"#skip\">skip</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a>(\"invalid header\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit_2\">exit_2</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_buf\">in_buf</a> += <a class=\"id\" href=\"#skip\">skip</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#posp\">posp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#posp\">posp</a> = <a class=\"id\" href=\"#skip\">skip</a>;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* read uncompressed block size */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst_len\">dst_len</a> = <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(<a class=\"id\" href=\"#in_buf\">in_buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#in_buf\">in_buf</a> += 4;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* exit if last block */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dst_len\">dst_len</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#posp\">posp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#posp\">posp</a> += 4;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dst_len\">dst_len</a> &gt; <a class=\"id\" href=\"#LZO_BLOCK_SIZE\">LZO_BLOCK_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a>(\"dest len longer than block size\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit_2\">exit_2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* read compressed block size, and skip block checksum info */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#src_len\">src_len</a> = <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(<a class=\"id\" href=\"#in_buf\">in_buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#in_buf\">in_buf</a> += 8;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#src_len\">src_len</a> <= 0 || <a class=\"id\" href=\"#src_len\">src_len</a> &gt; <a class=\"id\" href=\"#dst_len\">dst_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a>(\"file corrupted\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit_2\">exit_2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* decompress */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#dst_len\">dst_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* When the input data is not compressed at all,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * lzo1x_decompress_safe will fail, so call memcpy()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * instead */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#dst_len\">dst_len</a> == <a class=\"id\" href=\"#src_len\">src_len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#out_buf\">out_buf</a>, <a class=\"id\" href=\"#in_buf\">in_buf</a>, <a class=\"id\" href=\"#src_len\">src_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#lzo1x_decompress_safe\">lzo1x_decompress_safe</a>((<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#in_buf\">in_buf</a>, <a class=\"id\" href=\"#src_len\">src_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out_buf\">out_buf</a>, &amp;<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a> != <a class=\"id\" href=\"#LZO_E_OK\">LZO_E_OK</a> || <a class=\"id\" href=\"#dst_len\">dst_len</a> != <a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a>(\"Compressed data violation\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit_2\">exit_2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flush\">flush</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush\">flush</a>(<a class=\"id\" href=\"#out_buf\">out_buf</a>, <a class=\"id\" href=\"#dst_len\">dst_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#output\">output</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out_buf\">out_buf</a> += <a class=\"id\" href=\"#dst_len\">dst_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#posp\">posp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#posp\">posp</a> += <a class=\"id\" href=\"#src_len\">src_len</a> + 12;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fill\">fill</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#in_buf\">in_buf</a> = <a class=\"id\" href=\"#in_buf_save\">in_buf_save</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fill\">fill</a>(<a class=\"id\" href=\"#in_buf\">in_buf</a>, <a class=\"id\" href=\"#lzo1x_worst_compress\">lzo1x_worst_compress</a>(<a class=\"id\" href=\"#LZO_BLOCK_SIZE\">LZO_BLOCK_SIZE</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#in_buf\">in_buf</a> += <a class=\"id\" href=\"#src_len\">src_len</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<a class=\"id\" href=\"#exit_2\">exit_2</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#input\">input</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a>(<a class=\"id\" href=\"#in_buf\">in_buf</a>);", 
"<a class=\"id\" href=\"#exit_1\">exit_1</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#output\">output</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a>(<a class=\"id\" href=\"#out_buf\">out_buf</a>);", 
"<a class=\"id\" href=\"#exit\">exit</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#decompress\">decompress</a> <a class=\"id\" href=\"#unlzo\">unlzo</a>", 
];
xr_frag_insert('l/4e/7e8811ca5e1161e80492997a49cbb927faf268.xr', __xr_tmp);
