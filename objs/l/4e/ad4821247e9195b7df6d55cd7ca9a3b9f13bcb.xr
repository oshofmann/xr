var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/kernel/time/tick-common.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file contains the base functions to manage periodic tick</span>", 
"<span class=\"comment\"> * related events.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright(C) 2005-2006, Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>", 
"<span class=\"comment\"> * Copyright(C) 2005-2007, Red Hat, Inc., Ingo Molnar</span>", 
"<span class=\"comment\"> * Copyright(C) 2006-2007, Timesys Corp., Thomas Gleixner</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This code is licenced under the GPL version 2. For details see</span>", 
"<span class=\"comment\"> * kernel-base/COPYING.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hrtimer\">hrtimer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#profile\">profile</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tick\">tick</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#irq_regs\">irq_regs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"tick-internal.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Tick devices</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#tick_device\">tick_device</a>, <a class=\"id\" href=\"#tick_cpu_device\">tick_cpu_device</a>);", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Tick next event: keeps track of the tick time</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#tick_next_period\">tick_next_period</a>;", 
"<a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#tick_period\">tick_period</a>;", 
"int <a class=\"id\" href=\"#tick_do_timer_cpu\">tick_do_timer_cpu</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#TICK_DO_TIMER_BOOT\">TICK_DO_TIMER_BOOT</a>;", 
"static <a class=\"id\" href=\"#DEFINE_RAW_SPINLOCK\">DEFINE_RAW_SPINLOCK</a>(<a class=\"id\" href=\"#tick_device_lock\">tick_device_lock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Debugging: see timer_list.c</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tick_device\">tick_device</a> *<a class=\"id\" href=\"#tick_get_device\">tick_get_device</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tick_cpu_device\">tick_cpu_device</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tick_is_oneshot_available - check for a oneshot capable event device</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tick_is_oneshot_available\">tick_is_oneshot_available</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#tick_cpu_device\">tick_cpu_device</a>).<a class=\"id\" href=\"#evtdev\">evtdev</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a> && (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#CLOCK_EVT_FEAT_ONESHOT\">CLOCK_EVT_FEAT_ONESHOT</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Periodic tick</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tick_periodic\">tick_periodic</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tick_do_timer_cpu\">tick_do_timer_cpu</a> == <a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_seqlock\">write_seqlock</a>(&amp;<a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Keep track of the next tick event */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_next_period\">tick_next_period</a> = <a class=\"id\" href=\"#ktime_add\">ktime_add</a>(<a class=\"id\" href=\"#tick_next_period\">tick_next_period</a>, <a class=\"id\" href=\"#tick_period\">tick_period</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_timer\">do_timer</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_sequnlock\">write_sequnlock</a>(&amp;<a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_process_times\">update_process_times</a>(<a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#get_irq_regs\">get_irq_regs</a>()));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#profile_tick\">profile_tick</a>(<a class=\"id\" href=\"#CPU_PROFILING\">CPU_PROFILING</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Event handler for periodic ticks</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tick_handle_periodic\">tick_handle_periodic</a>(struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tick_periodic\">tick_periodic</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mode\">mode</a> != <a class=\"id\" href=\"#CLOCK_EVT_MODE_ONESHOT\">CLOCK_EVT_MODE_ONESHOT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Setup the next period for devices, which do not have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * periodic mode:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#ktime_add\">ktime_add</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#next_event\">next_event</a>, <a class=\"id\" href=\"#tick_period\">tick_period</a>);", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#clockevents_program_event\">clockevents_program_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#ktime_get\">ktime_get</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Have to be careful here. If we're in oneshot mode,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * before we call tick_periodic() in a loop, we need</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to be sure we're using a real hardware clocksource.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Otherwise we could get trapped in an infinite</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * loop, as the tick_periodic() increments jiffies,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * when then will increment time, posibly causing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the loop to trigger again and again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timekeeping_valid_for_hres\">timekeeping_valid_for_hres</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_periodic\">tick_periodic</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#ktime_add\">ktime_add</a>(<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#tick_period\">tick_period</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Setup the device for a periodic tick</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tick_setup_periodic\">tick_setup_periodic</a>(struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#broadcast\">broadcast</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tick_set_periodic_handler\">tick_set_periodic_handler</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#broadcast\">broadcast</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Broadcast setup ? */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tick_device_is_functional\">tick_device_is_functional</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#CLOCK_EVT_FEAT_PERIODIC\">CLOCK_EVT_FEAT_PERIODIC</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#tick_broadcast_oneshot_active\">tick_broadcast_oneshot_active</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clockevents_set_mode\">clockevents_set_mode</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#CLOCK_EVT_MODE_PERIODIC\">CLOCK_EVT_MODE_PERIODIC</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#read_seqbegin\">read_seqbegin</a>(&amp;<a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#tick_next_period\">tick_next_period</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#read_seqretry\">read_seqretry</a>(&amp;<a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>, <a class=\"id\" href=\"#seq\">seq</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clockevents_set_mode\">clockevents_set_mode</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#CLOCK_EVT_MODE_ONESHOT\">CLOCK_EVT_MODE_ONESHOT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#clockevents_program_event\">clockevents_program_event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#ktime_get\">ktime_get</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#ktime_add\">ktime_add</a>(<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#tick_period\">tick_period</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Setup the tick device</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tick_setup_device\">tick_setup_device</a>(struct <a class=\"id\" href=\"#tick_device\">tick_device</a> *<a class=\"id\" href=\"#td\">td</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#newdev\">newdev</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpumask\">cpumask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#next_event\">next_event</a>;", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#handler\">handler</a>)(struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *) = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First device setup ?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If no cpu took the do_timer update, assign it to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * this cpu:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tick_do_timer_cpu\">tick_do_timer_cpu</a> == <a class=\"id\" href=\"#TICK_DO_TIMER_BOOT\">TICK_DO_TIMER_BOOT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_do_timer_cpu\">tick_do_timer_cpu</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_next_period\">tick_next_period</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_period\">tick_period</a> = <a class=\"id\" href=\"#ktime_set\">ktime_set</a>(0, <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> / <a class=\"id\" href=\"#HZ\">HZ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Startup in periodic mode first.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#TICKDEV_MODE_PERIODIC\">TICKDEV_MODE_PERIODIC</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>-><a class=\"id\" href=\"#event_handler\">event_handler</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_event\">next_event</a> = <a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>-><a class=\"id\" href=\"#next_event\">next_event</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>-><a class=\"id\" href=\"#event_handler\">event_handler</a> = <a class=\"id\" href=\"#clockevents_handle_noop\">clockevents_handle_noop</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a> = <a class=\"id\" href=\"#newdev\">newdev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When the device is not per cpu, pin the interrupt to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * current cpu:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_equal\">cpumask_equal</a>(<a class=\"id\" href=\"#newdev\">newdev</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>, <a class=\"id\" href=\"#cpumask\">cpumask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_set_affinity\">irq_set_affinity</a>(<a class=\"id\" href=\"#newdev\">newdev</a>-><a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#cpumask\">cpumask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When global broadcasting is active, check if the current</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * device is registered as a placeholder for broadcast mode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This allows us to handle this x86 misfeature in a generic</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * way.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tick_device_uses_broadcast\">tick_device_uses_broadcast</a>(<a class=\"id\" href=\"#newdev\">newdev</a>, <a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#TICKDEV_MODE_PERIODIC\">TICKDEV_MODE_PERIODIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_setup_periodic\">tick_setup_periodic</a>(<a class=\"id\" href=\"#newdev\">newdev</a>, 0);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_setup_oneshot\">tick_setup_oneshot</a>(<a class=\"id\" href=\"#newdev\">newdev</a>, <a class=\"id\" href=\"#handler\">handler</a>, <a class=\"id\" href=\"#next_event\">next_event</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check, if the new registered device should be used.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#tick_check_new_device\">tick_check_new_device</a>(struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#newdev\">newdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#curdev\">curdev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_device\">tick_device</a> *<a class=\"id\" href=\"#td\">td</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tick_device_lock\">tick_device_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#newdev\">newdev</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_bc\">out_bc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#td\">td</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tick_cpu_device\">tick_cpu_device</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#curdev\">curdev</a> = <a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* cpu local device ? */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_equal\">cpumask_equal</a>(<a class=\"id\" href=\"#newdev\">newdev</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>, <a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the cpu affinity of the device interrupt can not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be set, ignore it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#irq_can_set_affinity\">irq_can_set_affinity</a>(<a class=\"id\" href=\"#newdev\">newdev</a>-><a class=\"id\" href=\"#irq\">irq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_bc\">out_bc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we have a cpu local device already, do not replace it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * by a non cpu local device</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#curdev\">curdev</a> && <a class=\"id\" href=\"#cpumask_equal\">cpumask_equal</a>(<a class=\"id\" href=\"#curdev\">curdev</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>, <a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_bc\">out_bc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we have an active device, then check the rating and the oneshot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * feature.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#curdev\">curdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Prefer one shot capable devices !</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#curdev\">curdev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#CLOCK_EVT_FEAT_ONESHOT\">CLOCK_EVT_FEAT_ONESHOT</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#newdev\">newdev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#CLOCK_EVT_FEAT_ONESHOT\">CLOCK_EVT_FEAT_ONESHOT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_bc\">out_bc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Check the rating</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#curdev\">curdev</a>-><a class=\"id\" href=\"#rating\">rating</a> >= <a class=\"id\" href=\"#newdev\">newdev</a>-><a class=\"id\" href=\"#rating\">rating</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_bc\">out_bc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Replace the eventually existing device by the new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * device. If the current device is the broadcast device, do</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not give it back to the clockevents layer !</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tick_is_broadcast_device\">tick_is_broadcast_device</a>(<a class=\"id\" href=\"#curdev\">curdev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clockevents_shutdown\">clockevents_shutdown</a>(<a class=\"id\" href=\"#curdev\">curdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curdev\">curdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clockevents_exchange_device\">clockevents_exchange_device</a>(<a class=\"id\" href=\"#curdev\">curdev</a>, <a class=\"id\" href=\"#newdev\">newdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tick_setup_device\">tick_setup_device</a>(<a class=\"id\" href=\"#td\">td</a>, <a class=\"id\" href=\"#newdev\">newdev</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#newdev\">newdev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#CLOCK_EVT_FEAT_ONESHOT\">CLOCK_EVT_FEAT_ONESHOT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_oneshot_notify\">tick_oneshot_notify</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tick_device_lock\">tick_device_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>;", 
"", 
"<a class=\"id\" href=\"#out_bc\">out_bc</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Can the new device be used as a broadcast device ?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tick_check_broadcast_device\">tick_check_broadcast_device</a>(<a class=\"id\" href=\"#newdev\">newdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tick_device_lock\">tick_device_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Transfer the do_timer job away from a dying cpu.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with interrupts disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tick_handover_do_timer\">tick_handover_do_timer</a>(int *<a class=\"id\" href=\"#cpup\">cpup</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#cpup\">cpup</a> == <a class=\"id\" href=\"#tick_do_timer_cpu\">tick_do_timer_cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_do_timer_cpu\">tick_do_timer_cpu</a> = (<a class=\"id\" href=\"#cpu\">cpu</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>) ? <a class=\"id\" href=\"#cpu\">cpu</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TICK_DO_TIMER_NONE\">TICK_DO_TIMER_NONE</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Shutdown an event device on a given cpu:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is called on a life CPU, when a CPU is dead. So we cannot</span>", 
"<span class=\"comment\"> * access the hardware device itself.</span>", 
"<span class=\"comment\"> * We just set the mode and remove it from the lists.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tick_shutdown\">tick_shutdown</a>(unsigned int *<a class=\"id\" href=\"#cpup\">cpup</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_device\">tick_device</a> *<a class=\"id\" href=\"#td\">td</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tick_cpu_device\">tick_cpu_device</a>, *<a class=\"id\" href=\"#cpup\">cpup</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tick_device_lock\">tick_device_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#TICKDEV_MODE_PERIODIC\">TICKDEV_MODE_PERIODIC</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Prevent that the clock events layer tries to call</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the set mode function!</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#CLOCK_EVT_MODE_UNUSED\">CLOCK_EVT_MODE_UNUSED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clockevents_exchange_device\">clockevents_exchange_device</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tick_device_lock\">tick_device_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tick_suspend\">tick_suspend</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_device\">tick_device</a> *<a class=\"id\" href=\"#td\">td</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#tick_cpu_device\">tick_cpu_device</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tick_device_lock\">tick_device_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clockevents_shutdown\">clockevents_shutdown</a>(<a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tick_device_lock\">tick_device_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tick_resume\">tick_resume</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_device\">tick_device</a> *<a class=\"id\" href=\"#td\">td</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#tick_cpu_device\">tick_cpu_device</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#broadcast\">broadcast</a> = <a class=\"id\" href=\"#tick_resume_broadcast\">tick_resume_broadcast</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tick_device_lock\">tick_device_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clockevents_set_mode\">clockevents_set_mode</a>(<a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>, <a class=\"id\" href=\"#CLOCK_EVT_MODE_RESUME\">CLOCK_EVT_MODE_RESUME</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#broadcast\">broadcast</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#TICKDEV_MODE_PERIODIC\">TICKDEV_MODE_PERIODIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_setup_periodic\">tick_setup_periodic</a>(<a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_resume_oneshot\">tick_resume_oneshot</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tick_device_lock\">tick_device_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Notification about clock event devices</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#tick_notify\">tick_notify</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>, unsigned long <a class=\"id\" href=\"#reason\">reason</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       void *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#reason\">reason</a>) {", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_ADD\">CLOCK_EVT_NOTIFY_ADD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tick_check_new_device\">tick_check_new_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_BROADCAST_ON\">CLOCK_EVT_NOTIFY_BROADCAST_ON</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_BROADCAST_OFF\">CLOCK_EVT_NOTIFY_BROADCAST_OFF</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_BROADCAST_FORCE\">CLOCK_EVT_NOTIFY_BROADCAST_FORCE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_broadcast_on_off\">tick_broadcast_on_off</a>(<a class=\"id\" href=\"#reason\">reason</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_BROADCAST_ENTER\">CLOCK_EVT_NOTIFY_BROADCAST_ENTER</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_BROADCAST_EXIT\">CLOCK_EVT_NOTIFY_BROADCAST_EXIT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_broadcast_oneshot_control\">tick_broadcast_oneshot_control</a>(<a class=\"id\" href=\"#reason\">reason</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_CPU_DYING\">CLOCK_EVT_NOTIFY_CPU_DYING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_handover_do_timer\">tick_handover_do_timer</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_CPU_DEAD\">CLOCK_EVT_NOTIFY_CPU_DEAD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_shutdown_broadcast_oneshot\">tick_shutdown_broadcast_oneshot</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_shutdown_broadcast\">tick_shutdown_broadcast</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_shutdown\">tick_shutdown</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_SUSPEND\">CLOCK_EVT_NOTIFY_SUSPEND</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_suspend\">tick_suspend</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_suspend_broadcast\">tick_suspend_broadcast</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_NOTIFY_RESUME\">CLOCK_EVT_NOTIFY_RESUME</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_resume\">tick_resume</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#tick_notifier\">tick_notifier</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#tick_notify\">tick_notify</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tick_init - initialize the tick control</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Register the notifier with the clockevents framework</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#tick_init\">tick_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clockevents_register_notifier\">clockevents_register_notifier</a>(&amp;<a class=\"id\" href=\"#tick_notifier\">tick_notifier</a>);", 
"}", 
];
xr_frag_insert('l/4e/ad4821247e9195b7df6d55cd7ca9a3b9f13bcb.xr', __xr_tmp);
