var __xr_tmp = [
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __round_jiffies_up_relative - function to round jiffies up to a full second</span>", 
"<span class=\"comment\"> * @j: the time in (relative) jiffies that should be rounded</span>", 
"<span class=\"comment\"> * @cpu: the processor number on which the timeout will happen</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the same as __round_jiffies_relative() except that it will never</span>", 
"<span class=\"comment\"> * round down.  This is useful for timeouts for which the exact time</span>", 
"<span class=\"comment\"> * of firing does not matter too much, as long as they don't fire too</span>", 
"<span class=\"comment\"> * early.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#__round_jiffies_up_relative\">__round_jiffies_up_relative</a>(unsigned long <a class=\"id\" href=\"#j\">j</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#j0\">j0</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Use j0 because jiffies might change while we run */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#round_jiffies_common\">round_jiffies_common</a>(<a class=\"id\" href=\"#j\">j</a> + <a class=\"id\" href=\"#j0\">j0</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#true\">true</a>) - <a class=\"id\" href=\"#j0\">j0</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__round_jiffies_up_relative\">__round_jiffies_up_relative</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * round_jiffies_up - function to round jiffies up to a full second</span>", 
"<span class=\"comment\"> * @j: the time in (absolute) jiffies that should be rounded</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the same as round_jiffies() except that it will never</span>", 
"<span class=\"comment\"> * round down.  This is useful for timeouts for which the exact time</span>", 
"<span class=\"comment\"> * of firing does not matter too much, as long as they don't fire too</span>", 
"<span class=\"comment\"> * early.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#round_jiffies_up\">round_jiffies_up</a>(unsigned long <a class=\"id\" href=\"#j\">j</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#round_jiffies_common\">round_jiffies_common</a>(<a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>(), <a class=\"id\" href=\"#true\">true</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#round_jiffies_up\">round_jiffies_up</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * round_jiffies_up_relative - function to round jiffies up to a full second</span>", 
"<span class=\"comment\"> * @j: the time in (relative) jiffies that should be rounded</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the same as round_jiffies_relative() except that it will never</span>", 
"<span class=\"comment\"> * round down.  This is useful for timeouts for which the exact time</span>", 
"<span class=\"comment\"> * of firing does not matter too much, as long as they don't fire too</span>", 
"<span class=\"comment\"> * early.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#round_jiffies_up_relative\">round_jiffies_up_relative</a>(unsigned long <a class=\"id\" href=\"#j\">j</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__round_jiffies_up_relative\">__round_jiffies_up_relative</a>(<a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>());", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#round_jiffies_up_relative\">round_jiffies_up_relative</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * set_timer_slack - set the allowed slack for a timer</span>", 
"<span class=\"comment\"> * @timer: the timer to be modified</span>", 
"<span class=\"comment\"> * @slack_hz: the amount of time (in jiffies) allowed for rounding</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Set the amount of time, in jiffies, that a certain timer has</span>", 
"<span class=\"comment\"> * in terms of slack. By setting this value, the timer subsystem</span>", 
"<span class=\"comment\"> * will schedule the actual timer somewhere between</span>", 
"<span class=\"comment\"> * the time mod_timer() asks for, and that time plus the slack.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * By setting the slack to -1, a percentage of the delay is used</span>", 
"<span class=\"comment\"> * instead.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#set_timer_slack\">set_timer_slack</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>, int <a class=\"id\" href=\"#slack_hz\">slack_hz</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#slack\">slack</a> = <a class=\"id\" href=\"#slack_hz\">slack_hz</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#set_timer_slack\">set_timer_slack</a>);", 
"", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_running_timer\">set_running_timer</a>(struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#base\">base</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#running_timer\">running_timer</a> = <a class=\"id\" href=\"#timer\">timer</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#internal_add_timer\">internal_add_timer</a>(struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#base\">base</a>, struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#expires\">expires</a> - <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#vec\">vec</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#TVR_SIZE\">TVR_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#expires\">expires</a> &amp; <a class=\"id\" href=\"#TVR_MASK\">TVR_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vec\">vec</a> = <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv1\">tv1</a>.<a class=\"id\" href=\"#vec\">vec</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#idx\">idx</a> &lt; 1 << (<a class=\"id\" href=\"#TVR_BITS\">TVR_BITS</a> + <a class=\"id\" href=\"#TVN_BITS\">TVN_BITS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#expires\">expires</a> >> <a class=\"id\" href=\"#TVR_BITS\">TVR_BITS</a>) &amp; <a class=\"id\" href=\"#TVN_MASK\">TVN_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vec\">vec</a> = <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv2\">tv2</a>.<a class=\"id\" href=\"#vec\">vec</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#idx\">idx</a> &lt; 1 << (<a class=\"id\" href=\"#TVR_BITS\">TVR_BITS</a> + 2 * <a class=\"id\" href=\"#TVN_BITS\">TVN_BITS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#expires\">expires</a> >> (<a class=\"id\" href=\"#TVR_BITS\">TVR_BITS</a> + <a class=\"id\" href=\"#TVN_BITS\">TVN_BITS</a>)) &amp; <a class=\"id\" href=\"#TVN_MASK\">TVN_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vec\">vec</a> = <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv3\">tv3</a>.<a class=\"id\" href=\"#vec\">vec</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#idx\">idx</a> &lt; 1 << (<a class=\"id\" href=\"#TVR_BITS\">TVR_BITS</a> + 3 * <a class=\"id\" href=\"#TVN_BITS\">TVN_BITS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#expires\">expires</a> >> (<a class=\"id\" href=\"#TVR_BITS\">TVR_BITS</a> + 2 * <a class=\"id\" href=\"#TVN_BITS\">TVN_BITS</a>)) &amp; <a class=\"id\" href=\"#TVN_MASK\">TVN_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vec\">vec</a> = <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv4\">tv4</a>.<a class=\"id\" href=\"#vec\">vec</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>} else if ((signed long) <a class=\"id\" href=\"#idx\">idx</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Can happen if you add a timer with expires == jiffies,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * or you set a timer to go off in the past</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vec\">vec</a> = <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv1\">tv1</a>.<a class=\"id\" href=\"#vec\">vec</a> + (<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a> &amp; <a class=\"id\" href=\"#TVR_MASK\">TVR_MASK</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If the timeout is larger than 0xffffffff on 64-bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * architectures then we use the maximum timeout:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> &gt; 0xffffffffUL) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = 0xffffffffUL;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#idx\">idx</a> + <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#expires\">expires</a> >> (<a class=\"id\" href=\"#TVR_BITS\">TVR_BITS</a> + 3 * <a class=\"id\" href=\"#TVN_BITS\">TVN_BITS</a>)) &amp; <a class=\"id\" href=\"#TVN_MASK\">TVN_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vec\">vec</a> = <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#tv5\">tv5</a>.<a class=\"id\" href=\"#vec\">vec</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Timers are FIFO:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#vec\">vec</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TIMER_STATS\">CONFIG_TIMER_STATS</a>", 
"void <a class=\"id\" href=\"#__timer_stats_timer_set_start_info\">__timer_stats_timer_set_start_info</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>, void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_site\">start_site</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_site\">start_site</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_comm\">start_comm</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#TASK_COMM_LEN\">TASK_COMM_LEN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_pid\">start_pid</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#timer_stats_account_timer\">timer_stats_account_timer</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flag\">flag</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_site\">start_site</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tbase_get_deferrable\">tbase_get_deferrable</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flag\">flag</a> |= <a class=\"id\" href=\"#TIMER_STATS_FLAG_DEFERRABLE\">TIMER_STATS_FLAG_DEFERRABLE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer_stats_update_stats\">timer_stats_update_stats</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_pid\">start_pid</a>, <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_site\">start_site</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#function\">function</a>, <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_comm\">start_comm</a>, <a class=\"id\" href=\"#flag\">flag</a>);", 
"}", 
"", 
"#else", 
"static void <a class=\"id\" href=\"#timer_stats_account_timer\">timer_stats_account_timer</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>) {}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_OBJECTS_TIMERS\">CONFIG_DEBUG_OBJECTS_TIMERS</a>", 
"", 
"static struct <a class=\"id\" href=\"#debug_obj_descr\">debug_obj_descr</a> <a class=\"id\" href=\"#timer_debug_descr\">timer_debug_descr</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fixup_init is called when:</span>", 
"<span class=\"comment\"> * - an active object is initialized</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#timer_fixup_init\">timer_fixup_init</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, enum <a class=\"id\" href=\"#debug_obj_state\">debug_obj_state</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ODEBUG_STATE_ACTIVE\">ODEBUG_STATE_ACTIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#del_timer_sync\">del_timer_sync</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_object_init\">debug_object_init</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#timer_debug_descr\">timer_debug_descr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fixup_activate is called when:</span>", 
"<span class=\"comment\"> * - an active object is activated</span>", 
"<span class=\"comment\"> * - an unknown object is activated (might be a statically initialized object)</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#timer_fixup_activate\">timer_fixup_activate</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, enum <a class=\"id\" href=\"#debug_obj_state\">debug_obj_state</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#state\">state</a>) {", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ODEBUG_STATE_NOTAVAILABLE\">ODEBUG_STATE_NOTAVAILABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is not really a fixup. The timer was</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * statically initialized. We just make sure that it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is tracked in the object tracker.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#next\">next</a> == <a class=\"id\" href=\"#NULL\">NULL</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#prev\">prev</a> == <a class=\"id\" href=\"#TIMER_ENTRY_STATIC\">TIMER_ENTRY_STATIC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_object_init\">debug_object_init</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#timer_debug_descr\">timer_debug_descr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_object_activate\">debug_object_activate</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#timer_debug_descr\">timer_debug_descr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ODEBUG_STATE_ACTIVE\">ODEBUG_STATE_ACTIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fixup_free is called when:</span>", 
"<span class=\"comment\"> * - an active object is freed</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#timer_fixup_free\">timer_fixup_free</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, enum <a class=\"id\" href=\"#debug_obj_state\">debug_obj_state</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ODEBUG_STATE_ACTIVE\">ODEBUG_STATE_ACTIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#del_timer_sync\">del_timer_sync</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_object_free\">debug_object_free</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#timer_debug_descr\">timer_debug_descr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#debug_obj_descr\">debug_obj_descr</a> <a class=\"id\" href=\"#timer_debug_descr\">timer_debug_descr</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"timer_list\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fixup_init\">fixup_init</a><span class=\"ts\"/>= <a class=\"id\" href=\"#timer_fixup_init\">timer_fixup_init</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fixup_activate\">fixup_activate</a><span class=\"ts\"/>= <a class=\"id\" href=\"#timer_fixup_activate\">timer_fixup_activate</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fixup_free\">fixup_free</a><span class=\"ts\"/>= <a class=\"id\" href=\"#timer_fixup_free\">timer_fixup_free</a>,", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_timer_init\">debug_timer_init</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_init\">debug_object_init</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#timer_debug_descr\">timer_debug_descr</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_timer_activate\">debug_timer_activate</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_activate\">debug_object_activate</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#timer_debug_descr\">timer_debug_descr</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_timer_deactivate\">debug_timer_deactivate</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_deactivate\">debug_object_deactivate</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#timer_debug_descr\">timer_debug_descr</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_timer_free\">debug_timer_free</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_free\">debug_object_free</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#timer_debug_descr\">timer_debug_descr</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init_timer\">__init_timer</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"void <a class=\"id\" href=\"#init_timer_on_stack_key\">init_timer_on_stack_key</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_init_on_stack\">debug_object_init_on_stack</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#timer_debug_descr\">timer_debug_descr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__init_timer\">__init_timer</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#init_timer_on_stack_key\">init_timer_on_stack_key</a>);", 
"", 
"void <a class=\"id\" href=\"#destroy_timer_on_stack\">destroy_timer_on_stack</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_free\">debug_object_free</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#timer_debug_descr\">timer_debug_descr</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#destroy_timer_on_stack\">destroy_timer_on_stack</a>);", 
"", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_timer_init\">debug_timer_init</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_timer_activate\">debug_timer_activate</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_timer_deactivate\">debug_timer_deactivate</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>) { }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_init\">debug_init</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_timer_init\">debug_timer_init</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_timer_init\">trace_timer_init</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#debug_activate\">debug_activate</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>, unsigned long <a class=\"id\" href=\"#expires\">expires</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_timer_activate\">debug_timer_activate</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_timer_start\">trace_timer_start</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#expires\">expires</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_deactivate\">debug_deactivate</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_timer_deactivate\">debug_timer_deactivate</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_timer_cancel\">trace_timer_cancel</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init_timer\">__init_timer</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#__raw_get_cpu_var\">__raw_get_cpu_var</a>(<a class=\"id\" href=\"#tvec_bases\">tvec_bases</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#slack\">slack</a> = -1;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TIMER_STATS\">CONFIG_TIMER_STATS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_site\">start_site</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_pid\">start_pid</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_comm\">start_comm</a>, 0, <a class=\"id\" href=\"#TASK_COMM_LEN\">TASK_COMM_LEN</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_init_map\">lockdep_init_map</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#key\">key</a>, 0);", 
"}", 
"", 
"void <a class=\"id\" href=\"#setup_deferrable_timer_on_stack_key\">setup_deferrable_timer_on_stack_key</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> void (*<a class=\"id\" href=\"#function\">function</a>)(unsigned long),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#function\">function</a> = <a class=\"id\" href=\"#function\">function</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_timer_on_stack_key\">init_timer_on_stack_key</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer_set_deferrable\">timer_set_deferrable</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#setup_deferrable_timer_on_stack_key\">setup_deferrable_timer_on_stack_key</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * init_timer_key - initialize a timer</span>", 
"<span class=\"comment\"> * @timer: the timer to be initialized</span>", 
"<span class=\"comment\"> * @name: name of the timer</span>", 
"<span class=\"comment\"> * @key: lockdep class key of the fake lock used for tracking timer</span>", 
"<span class=\"comment\"> *       sync lock dependencies</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * init_timer_key() must be done to a timer prior calling *any* of the</span>", 
"<span class=\"comment\"> * other timer functions.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#init_timer_key\">init_timer_key</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_init\">debug_init</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__init_timer\">__init_timer</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#init_timer_key\">init_timer_key</a>);", 
"", 
"void <a class=\"id\" href=\"#init_timer_deferrable_key\">init_timer_deferrable_key</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_timer_key\">init_timer_key</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer_set_deferrable\">timer_set_deferrable</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#init_timer_deferrable_key\">init_timer_deferrable_key</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#detach_timer\">detach_timer</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#clear_pending\">clear_pending</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#entry\">entry</a> = &amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_deactivate\">debug_deactivate</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__list_del\">__list_del</a>(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clear_pending\">clear_pending</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#LIST_POISON2\">LIST_POISON2</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We are using hashed locking: holding per_cpu(tvec_bases).lock</span>", 
"<span class=\"comment\"> * means that all timers which are tied to this base via timer-&gt;base are</span>", 
"<span class=\"comment\"> * locked, and the base itself is locked too.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * So __run_timers/migrate_timers can safely modify all timers which could</span>", 
"<span class=\"comment\"> * be found on -&gt;tvX lists.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When the timer's base is locked, and the timer removed from list, it is</span>", 
"<span class=\"comment\"> * possible to set timer-&gt;base = NULL and drop the lock: the timer remains</span>", 
"<span class=\"comment\"> * locked.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#lock_timer_base\">lock_timer_base</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#base\">base</a>;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#prelock_base\">prelock_base</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#tbase_get_base\">tbase_get_base</a>(<a class=\"id\" href=\"#prelock_base\">prelock_base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#base\">base</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#lock\">lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#prelock_base\">prelock_base</a> == <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The timer has migrated to another CPU */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#lock\">lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#__mod_timer\">__mod_timer</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>, unsigned long <a class=\"id\" href=\"#expires\">expires</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#pending_only\">pending_only</a>, int <a class=\"id\" href=\"#pinned\">pinned</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tvec_base\">tvec_base</a> *<a class=\"id\" href=\"#base\">base</a>, *<a class=\"id\" href=\"#new_base\">new_base</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0 , <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer_stats_timer_set_start_info\">timer_stats_timer_set_start_info</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#function\">function</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#lock_timer_base\">lock_timer_base</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timer_pending\">timer_pending</a>(<a class=\"id\" href=\"#timer\">timer</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#detach_timer\">detach_timer</a>(<a class=\"id\" href=\"#timer\">timer</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a> == <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#next_timer\">next_timer</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#tbase_get_deferrable\">tbase_get_deferrable</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#next_timer\">next_timer</a> = <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#timer_jiffies\">timer_jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pending_only\">pending_only</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_activate\">debug_activate</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#expires\">expires</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>)", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pinned\">pinned</a> && <a class=\"id\" href=\"#get_sysctl_timer_migration\">get_sysctl_timer_migration</a>() && <a class=\"id\" href=\"#idle_cpu\">idle_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#get_nohz_timer_target\">get_nohz_timer_target</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_base\">new_base</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tvec_bases\">tvec_bases</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a> != <a class=\"id\" href=\"#new_base\">new_base</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We are trying to schedule the timer on the local CPU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * However we can't change timer's base while it is running,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * otherwise del_timer_sync() can't detect that the timer's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * handler yet has not finished. This also guarantees that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the timer is serialized wrt itself.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#running_timer\">running_timer</a> != <a class=\"id\" href=\"#timer\">timer</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* See the comment in lock_timer_base() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer_set_base\">timer_set_base</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#new_base\">new_base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer_set_base\">timer_set_base</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#expires\">expires</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#next_timer\">next_timer</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#tbase_get_deferrable\">tbase_get_deferrable</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#next_timer\">next_timer</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#internal_add_timer\">internal_add_timer</a>(<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#timer\">timer</a>);", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mod_timer_pending - modify a pending timer's timeout</span>", 
"<span class=\"comment\"> * @timer: the pending timer to be modified</span>", 
"<span class=\"comment\"> * @expires: new timeout in jiffies</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * mod_timer_pending() is the same for pending timers as mod_timer(),</span>", 
"<span class=\"comment\"> * but will not re-activate and modify already deleted timers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is useful for unserialized use of timers.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mod_timer_pending\">mod_timer_pending</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>, unsigned long <a class=\"id\" href=\"#expires\">expires</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__mod_timer\">__mod_timer</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#true\">true</a>, <a class=\"id\" href=\"#TIMER_NOT_PINNED\">TIMER_NOT_PINNED</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mod_timer_pending\">mod_timer_pending</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Decide where to put the timer while taking the slack into account</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Algorithm:</span>", 
"<span class=\"comment\"> *   1) calculate the maximum (absolute) time</span>", 
"<span class=\"comment\"> *   2) calculate the highest bit where the expires and new max are different</span>", 
"<span class=\"comment\"> *   3) use this bit to make a mask</span>", 
"<span class=\"comment\"> *   4) use the bitmask to round down the maximum time, so that all last</span>", 
"<span class=\"comment\"> *      bits are zeros</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"unsigned long <a class=\"id\" href=\"#apply_slack\">apply_slack</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>, unsigned long <a class=\"id\" href=\"#expires\">expires</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#expires_limit\">expires_limit</a>, <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bit\">bit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#expires_limit\">expires_limit</a> = <a class=\"id\" href=\"#expires\">expires</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#slack\">slack</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires_limit\">expires_limit</a> = <a class=\"id\" href=\"#expires\">expires</a> + <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#slack\">slack</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No slack, if already expired else auto slack 0.4% */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#now\">now</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires_limit\">expires_limit</a> = <a class=\"id\" href=\"#expires\">expires</a> + (<a class=\"id\" href=\"#expires\">expires</a> - <a class=\"id\" href=\"#now\">now</a>)/256;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#expires\">expires</a> ^ <a class=\"id\" href=\"#expires_limit\">expires_limit</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#expires\">expires</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a> = <a class=\"id\" href=\"#find_last_bit\">find_last_bit</a>(&amp;<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = (1 << <a class=\"id\" href=\"#bit\">bit</a>) - 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#expires_limit\">expires_limit</a> = <a class=\"id\" href=\"#expires_limit\">expires_limit</a> &amp; ~(<a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#expires_limit\">expires_limit</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mod_timer - modify a timer's timeout</span>", 
"<span class=\"comment\"> * @timer: the timer to be modified</span>", 
"<span class=\"comment\"> * @expires: new timeout in jiffies</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * mod_timer() is a more efficient way to update the expire field of an</span>", 
"<span class=\"comment\"> * active timer (if the timer is inactive it will be activated)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * mod_timer(timer, expires) is equivalent to:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     del_timer(timer); timer-&gt;expires = expires; add_timer(timer);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that if there are multiple unserialized concurrent users of the</span>", 
"<span class=\"comment\"> * same timer, then mod_timer() is the only safe way to modify the timeout,</span>", 
"<span class=\"comment\"> * since add_timer() cannot modify an already running timer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function returns whether it has modified a pending timer or not.</span>", 
"<span class=\"comment\"> * (ie. mod_timer() of an inactive timer returns 0, mod_timer() of an</span>", 
"<span class=\"comment\"> * active timer returns 1.)</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mod_timer\">mod_timer</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>, unsigned long <a class=\"id\" href=\"#expires\">expires</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is a common optimization triggered by the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * networking code - if the timer is re-modified</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to be the same thing then just return:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timer_pending\">timer_pending</a>(<a class=\"id\" href=\"#timer\">timer</a>) && <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a> == <a class=\"id\" href=\"#expires\">expires</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#apply_slack\">apply_slack</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#expires\">expires</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__mod_timer\">__mod_timer</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#false\">false</a>, <a class=\"id\" href=\"#TIMER_NOT_PINNED\">TIMER_NOT_PINNED</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mod_timer\">mod_timer</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mod_timer_pinned - modify a timer's timeout</span>", 
"<span class=\"comment\"> * @timer: the timer to be modified</span>", 
"<span class=\"comment\"> * @expires: new timeout in jiffies</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * mod_timer_pinned() is a way to update the expire field of an</span>", 
"<span class=\"comment\"> * active timer (if the timer is inactive it will be activated)</span>", 
"<span class=\"comment\"> * and not allow the timer to be migrated to a different CPU.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * mod_timer_pinned(timer, expires) is equivalent to:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     del_timer(timer); timer-&gt;expires = expires; add_timer(timer);</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mod_timer_pinned\">mod_timer_pinned</a>(struct <a class=\"id\" href=\"#timer_list\">timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>, unsigned long <a class=\"id\" href=\"#expires\">expires</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a> == <a class=\"id\" href=\"#expires\">expires</a> && <a class=\"id\" href=\"#timer_pending\">timer_pending</a>(<a class=\"id\" href=\"#timer\">timer</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__mod_timer\">__mod_timer</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#false\">false</a>, <a class=\"id\" href=\"#TIMER_PINNED\">TIMER_PINNED</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mod_timer_pinned\">mod_timer_pinned</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
];
xr_frag_insert('l/4f/13409339e2863b511b2745d881d77e2c696552.xr', __xr_tmp);
