var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * acpi-cpufreq.c - ACPI Processor P-States Driver</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2001, 2002 Andy Grover &lt;andrew.grover@intel.com&gt;</span>", 
"<span class=\"comment\"> *  Copyright (C) 2001, 2002 Paul Diefenbaugh &lt;paul.s.diefenbaugh@intel.com&gt;</span>", 
"<span class=\"comment\"> *  Copyright (C) 2002 - 2004 Dominik Brodowski &lt;linux@brodo.de&gt;</span>", 
"<span class=\"comment\"> *  Copyright (C) 2006       Denis Sadykov &lt;denis.m.sadykov@intel.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *  it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *  the Free Software Foundation; either version 2 of the License, or (at</span>", 
"<span class=\"comment\"> *  your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is distributed in the hope that it will be useful, but</span>", 
"<span class=\"comment\"> *  WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>", 
"<span class=\"comment\"> *  General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  You should have received a copy of the GNU General Public License along</span>", 
"<span class=\"comment\"> *  with this program; if not, write to the Free Software Foundation, Inc.,</span>", 
"<span class=\"comment\"> *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpufreq\">cpufreq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dmi\">dmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#msr\">msr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cpufeature\">cpufeature</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"mperf.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dprintk\">dprintk</a>(<a class=\"id\" href=\"#msg\">msg</a>...) <a class=\"id\" href=\"#cpufreq_debug_printk\">cpufreq_debug_printk</a>(<a class=\"id\" href=\"#CPUFREQ_DEBUG_DRIVER\">CPUFREQ_DEBUG_DRIVER</a>, \\", 
"<span class=\"ts\"/><span class=\"ts\"/>\"acpi-cpufreq\", <a class=\"id\" href=\"#msg\">msg</a>)", 
"", 
"<a class=\"id\" href=\"#MODULE_AUTHOR\">MODULE_AUTHOR</a>(\"Paul Diefenbaugh, Dominik Brodowski\");", 
"<a class=\"id\" href=\"#MODULE_DESCRIPTION\">MODULE_DESCRIPTION</a>(\"ACPI Processor P-States Driver\");", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#UNDEFINED_CAPABLE\">UNDEFINED_CAPABLE</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SYSTEM_INTEL_MSR_CAPABLE\">SYSTEM_INTEL_MSR_CAPABLE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SYSTEM_IO_CAPABLE\">SYSTEM_IO_CAPABLE</a>,", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INTEL_MSR_RANGE\">INTEL_MSR_RANGE</a><span class=\"ts\"/><span class=\"ts\"/>(0xffff)", 
"", 
"struct <a class=\"id\" href=\"#acpi_cpufreq_data\">acpi_cpufreq_data</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_processor_performance\">acpi_processor_performance</a> *<a class=\"id\" href=\"#acpi_data\">acpi_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpufreq_frequency_table\">cpufreq_frequency_table</a> *<a class=\"id\" href=\"#freq_table\">freq_table</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#resume\">resume</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu_feature\">cpu_feature</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#acpi_cpufreq_data\">acpi_cpufreq_data</a> *, <a class=\"id\" href=\"#acfreq_data\">acfreq_data</a>);", 
"", 
"<span class=\"comment\">/* acpi_perf_data is a pointer to percpu data. */</span>", 
"static struct <a class=\"id\" href=\"#acpi_processor_performance\">acpi_processor_performance</a> <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#acpi_perf_data\">acpi_perf_data</a>;", 
"", 
"static struct <a class=\"id\" href=\"#cpufreq_driver\">cpufreq_driver</a> <a class=\"id\" href=\"#acpi_cpufreq_driver\">acpi_cpufreq_driver</a>;", 
"", 
"static unsigned int <a class=\"id\" href=\"#acpi_pstate_strict\">acpi_pstate_strict</a>;", 
"", 
"static int <a class=\"id\" href=\"#check_est_cpu\">check_est_cpu</a>(unsigned int <a class=\"id\" href=\"#cpuid\">cpuid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#cpu\">cpu</a> = &amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#cpuid\">cpuid</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#X86_FEATURE_EST\">X86_FEATURE_EST</a>);", 
"}", 
"", 
"static unsigned <a class=\"id\" href=\"#extract_io\">extract_io</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#value\">value</a>, struct <a class=\"id\" href=\"#acpi_cpufreq_data\">acpi_cpufreq_data</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_processor_performance\">acpi_processor_performance</a> *<a class=\"id\" href=\"#perf\">perf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf\">perf</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#state_count\">state_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> == <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#status\">status</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#frequency\">frequency</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static unsigned <a class=\"id\" href=\"#extract_msr\">extract_msr</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#msr\">msr</a>, struct <a class=\"id\" href=\"#acpi_cpufreq_data\">acpi_cpufreq_data</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_processor_performance\">acpi_processor_performance</a> *<a class=\"id\" href=\"#perf\">perf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msr\">msr</a> &= <a class=\"id\" href=\"#INTEL_MSR_RANGE\">INTEL_MSR_RANGE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf\">perf</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#frequency\">frequency</a> != <a class=\"id\" href=\"#CPUFREQ_TABLE_END\">CPUFREQ_TABLE_END</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msr\">msr</a> == <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#status\">status</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#frequency\">frequency</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a>[0].<a class=\"id\" href=\"#frequency\">frequency</a>;", 
"}", 
"", 
"static unsigned <a class=\"id\" href=\"#extract_freq\">extract_freq</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>, struct <a class=\"id\" href=\"#acpi_cpufreq_data\">acpi_cpufreq_data</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu_feature\">cpu_feature</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSTEM_INTEL_MSR_CAPABLE\">SYSTEM_INTEL_MSR_CAPABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#extract_msr\">extract_msr</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSTEM_IO_CAPABLE\">SYSTEM_IO_CAPABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#extract_io\">extract_io</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"struct <a class=\"id\" href=\"#msr_addr\">msr_addr</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#reg\">reg</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#io_addr\">io_addr</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#port\">port</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#bit_width\">bit_width</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#drv_cmd\">drv_cmd</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#msr_addr\">msr_addr</a> <a class=\"id\" href=\"#msr\">msr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#io_addr\">io_addr</a> <a class=\"id\" href=\"#io\">io</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Called via smp_call_function_single(), on the target CPU */</span>", 
"static void <a class=\"id\" href=\"#do_drv_read\">do_drv_read</a>(void *<a class=\"id\" href=\"#_cmd\">_cmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#drv_cmd\">drv_cmd</a> *<a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#_cmd\">_cmd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#h\">h</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSTEM_INTEL_MSR_CAPABLE\">SYSTEM_INTEL_MSR_CAPABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#addr\">addr</a>.<a class=\"id\" href=\"#msr\">msr</a>.<a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSTEM_IO_CAPABLE\">SYSTEM_IO_CAPABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_read_port\">acpi_os_read_port</a>((<a class=\"id\" href=\"#acpi_io_address\">acpi_io_address</a>)<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#addr\">addr</a>.<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#port\">port</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#val\">val</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#addr\">addr</a>.<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#bit_width\">bit_width</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Called via smp_call_function_many(), on the target CPUs */</span>", 
"static void <a class=\"id\" href=\"#do_drv_write\">do_drv_write</a>(void *<a class=\"id\" href=\"#_cmd\">_cmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#drv_cmd\">drv_cmd</a> *<a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#_cmd\">_cmd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#hi\">hi</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSTEM_INTEL_MSR_CAPABLE\">SYSTEM_INTEL_MSR_CAPABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#addr\">addr</a>.<a class=\"id\" href=\"#msr\">msr</a>.<a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#hi\">hi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lo\">lo</a> = (<a class=\"id\" href=\"#lo\">lo</a> &amp; ~<a class=\"id\" href=\"#INTEL_MSR_RANGE\">INTEL_MSR_RANGE</a>) | (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#INTEL_MSR_RANGE\">INTEL_MSR_RANGE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsr\">wrmsr</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#addr\">addr</a>.<a class=\"id\" href=\"#msr\">msr</a>.<a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#hi\">hi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSTEM_IO_CAPABLE\">SYSTEM_IO_CAPABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_write_port\">acpi_os_write_port</a>((<a class=\"id\" href=\"#acpi_io_address\">acpi_io_address</a>)<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#addr\">addr</a>.<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#port\">port</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#val\">val</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#addr\">addr</a>.<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#bit_width\">bit_width</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#drv_read\">drv_read</a>(struct <a class=\"id\" href=\"#drv_cmd\">drv_cmd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#val\">val</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#smp_call_function_any\">smp_call_function_any</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#do_drv_read\">do_drv_read</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#err\">err</a>);<span class=\"ts\"/><span class=\"comment\">/* smp_call_function_any() was buggy? */</span>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#drv_write\">drv_write</a>(struct <a class=\"id\" href=\"#drv_cmd\">drv_cmd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_cpu\">this_cpu</a> = <a class=\"id\" href=\"#get_cpu\">get_cpu</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#mask\">mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_drv_write\">do_drv_write</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function_many\">smp_call_function_many</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#do_drv_write\">do_drv_write</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#get_cur_val\">get_cur_val</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_processor_performance\">acpi_processor_performance</a> *<a class=\"id\" href=\"#perf\">perf</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#drv_cmd\">drv_cmd</a> <a class=\"id\" href=\"#cmd\">cmd</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#mask\">mask</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#acfreq_data\">acfreq_data</a>, <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#mask\">mask</a>))-><a class=\"id\" href=\"#cpu_feature\">cpu_feature</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSTEM_INTEL_MSR_CAPABLE\">SYSTEM_INTEL_MSR_CAPABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#SYSTEM_INTEL_MSR_CAPABLE\">SYSTEM_INTEL_MSR_CAPABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>.<a class=\"id\" href=\"#addr\">addr</a>.<a class=\"id\" href=\"#msr\">msr</a>.<a class=\"id\" href=\"#reg\">reg</a> = <a class=\"id\" href=\"#MSR_IA32_PERF_STATUS\">MSR_IA32_PERF_STATUS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSTEM_IO_CAPABLE\">SYSTEM_IO_CAPABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#SYSTEM_IO_CAPABLE\">SYSTEM_IO_CAPABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf\">perf</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#acfreq_data\">acfreq_data</a>, <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#mask\">mask</a>))-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>.<a class=\"id\" href=\"#addr\">addr</a>.<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#port\">port</a> = <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#control_register\">control_register</a>.<a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>.<a class=\"id\" href=\"#addr\">addr</a>.<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#bit_width\">bit_width</a> = <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#control_register\">control_register</a>.<a class=\"id\" href=\"#bit_width\">bit_width</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>.<a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv_read\">drv_read</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"get_cur_val = %u\\n\", <a class=\"id\" href=\"#cmd\">cmd</a>.<a class=\"id\" href=\"#val\">val</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cmd\">cmd</a>.<a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#get_cur_freq_on_cpu\">get_cur_freq_on_cpu</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_cpufreq_data\">acpi_cpufreq_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#acfreq_data\">acfreq_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#freq\">freq</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cached_freq\">cached_freq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"get_cur_freq_on_cpu (%d)\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#data\">data</a> == <a class=\"id\" href=\"#NULL\">NULL</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cached_freq\">cached_freq</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a>[<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>-><a class=\"id\" href=\"#state\">state</a>].<a class=\"id\" href=\"#frequency\">frequency</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#freq\">freq</a> = <a class=\"id\" href=\"#extract_freq\">extract_freq</a>(<a class=\"id\" href=\"#get_cur_val\">get_cur_val</a>(<a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)), <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#freq\">freq</a> != <a class=\"id\" href=\"#cached_freq\">cached_freq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The dreaded BIOS frequency change behind our back.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Force set the frequency on next target call.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#resume\">resume</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"cur freq = %u\\n\", <a class=\"id\" href=\"#freq\">freq</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#freq\">freq</a>;", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#check_freqs\">check_freqs</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>, unsigned int <a class=\"id\" href=\"#freq\">freq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_cpufreq_data\">acpi_cpufreq_data</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cur_freq\">cur_freq</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 100; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur_freq\">cur_freq</a> = <a class=\"id\" href=\"#extract_freq\">extract_freq</a>(<a class=\"id\" href=\"#get_cur_val\">get_cur_val</a>(<a class=\"id\" href=\"#mask\">mask</a>), <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur_freq\">cur_freq</a> == <a class=\"id\" href=\"#freq\">freq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(10);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#acpi_cpufreq_target\">acpi_cpufreq_target</a>(struct <a class=\"id\" href=\"#cpufreq_policy\">cpufreq_policy</a> *<a class=\"id\" href=\"#policy\">policy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#target_freq\">target_freq</a>, unsigned int <a class=\"id\" href=\"#relation\">relation</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_cpufreq_data\">acpi_cpufreq_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#acfreq_data\">acfreq_data</a>, <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_processor_performance\">acpi_processor_performance</a> *<a class=\"id\" href=\"#perf\">perf</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpufreq_freqs\">cpufreq_freqs</a> <a class=\"id\" href=\"#freqs\">freqs</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#drv_cmd\">drv_cmd</a> <a class=\"id\" href=\"#cmd\">cmd</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#next_state\">next_state</a> = 0; <span class=\"comment\">/* Index into freq_table */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#next_perf_state\">next_perf_state</a> = 0; <span class=\"comment\">/* Index into perf table */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"acpi_cpufreq_target %d (%d)\\n\", <a class=\"id\" href=\"#target_freq\">target_freq</a>, <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#data\">data</a> == <a class=\"id\" href=\"#NULL\">NULL</a> ||", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf\">perf</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#cpufreq_frequency_table_target\">cpufreq_frequency_table_target</a>(<a class=\"id\" href=\"#policy\">policy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#target_freq\">target_freq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#relation\">relation</a>, &amp;<a class=\"id\" href=\"#next_state\">next_state</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#result\">result</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_perf_state\">next_perf_state</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a>[<a class=\"id\" href=\"#next_state\">next_state</a>].<a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#next_perf_state\">next_perf_state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#resume\">resume</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"Called after resume, resetting to P%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_perf_state\">next_perf_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#resume\">resume</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"Already at target state (P%d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_perf_state\">next_perf_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu_feature\">cpu_feature</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSTEM_INTEL_MSR_CAPABLE\">SYSTEM_INTEL_MSR_CAPABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#SYSTEM_INTEL_MSR_CAPABLE\">SYSTEM_INTEL_MSR_CAPABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>.<a class=\"id\" href=\"#addr\">addr</a>.<a class=\"id\" href=\"#msr\">msr</a>.<a class=\"id\" href=\"#reg\">reg</a> = <a class=\"id\" href=\"#MSR_IA32_PERF_CTL\">MSR_IA32_PERF_CTL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>.<a class=\"id\" href=\"#val\">val</a> = (<a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#next_perf_state\">next_perf_state</a>].<a class=\"id\" href=\"#control\">control</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSTEM_IO_CAPABLE\">SYSTEM_IO_CAPABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#SYSTEM_IO_CAPABLE\">SYSTEM_IO_CAPABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>.<a class=\"id\" href=\"#addr\">addr</a>.<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#port\">port</a> = <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#control_register\">control_register</a>.<a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>.<a class=\"id\" href=\"#addr\">addr</a>.<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#bit_width\">bit_width</a> = <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#control_register\">control_register</a>.<a class=\"id\" href=\"#bit_width\">bit_width</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>.<a class=\"id\" href=\"#val\">val</a> = (<a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#next_perf_state\">next_perf_state</a>].<a class=\"id\" href=\"#control\">control</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* cpufreq holds the hotplug lock, so we are safe from here on */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#shared_type\">shared_type</a> != <a class=\"id\" href=\"#CPUFREQ_SHARED_TYPE_ANY\">CPUFREQ_SHARED_TYPE_ANY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>.<a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpus\">cpus</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>.<a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#freqs\">freqs</a>.<a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#state\">state</a>].<a class=\"id\" href=\"#core_frequency\">core_frequency</a> * 1000;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#freqs\">freqs</a>.<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a>[<a class=\"id\" href=\"#next_state\">next_state</a>].<a class=\"id\" href=\"#frequency\">frequency</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpus\">cpus</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freqs\">freqs</a>.<a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpufreq_notify_transition\">cpufreq_notify_transition</a>(&amp;<a class=\"id\" href=\"#freqs\">freqs</a>, <a class=\"id\" href=\"#CPUFREQ_PRECHANGE\">CPUFREQ_PRECHANGE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv_write\">drv_write</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_pstate_strict\">acpi_pstate_strict</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_freqs\">check_freqs</a>(<a class=\"id\" href=\"#cmd\">cmd</a>.<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#freqs\">freqs</a>.<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#data\">data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"acpi_cpufreq_target failed (%d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpus\">cpus</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freqs\">freqs</a>.<a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpufreq_notify_transition\">cpufreq_notify_transition</a>(&amp;<a class=\"id\" href=\"#freqs\">freqs</a>, <a class=\"id\" href=\"#CPUFREQ_POSTCHANGE\">CPUFREQ_POSTCHANGE</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#next_perf_state\">next_perf_state</a>;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#acpi_cpufreq_verify\">acpi_cpufreq_verify</a>(struct <a class=\"id\" href=\"#cpufreq_policy\">cpufreq_policy</a> *<a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_cpufreq_data\">acpi_cpufreq_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#acfreq_data\">acfreq_data</a>, <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"acpi_cpufreq_verify\\n\");", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpufreq_frequency_table_verify\">cpufreq_frequency_table_verify</a>(<a class=\"id\" href=\"#policy\">policy</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a>);", 
"}", 
"", 
"static unsigned long", 
"<a class=\"id\" href=\"#acpi_cpufreq_guess_freq\">acpi_cpufreq_guess_freq</a>(struct <a class=\"id\" href=\"#acpi_cpufreq_data\">acpi_cpufreq_data</a> *<a class=\"id\" href=\"#data\">data</a>, unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_processor_performance\">acpi_processor_performance</a> *<a class=\"id\" href=\"#perf\">perf</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_khz\">cpu_khz</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* search the closest match to cpu_khz */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#freq\">freq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#freqn\">freqn</a> = <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#states\">states</a>[0].<a class=\"id\" href=\"#core_frequency\">core_frequency</a> * 1000;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; (<a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#state_count\">state_count</a>-1); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freq\">freq</a> = <a class=\"id\" href=\"#freqn\">freqn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freqn\">freqn</a> = <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>+1].<a class=\"id\" href=\"#core_frequency\">core_frequency</a> * 1000;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((2 * <a class=\"id\" href=\"#cpu_khz\">cpu_khz</a>) &gt; (<a class=\"id\" href=\"#freqn\">freqn</a> + <a class=\"id\" href=\"#freq\">freq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#freq\">freq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#state_count\">state_count</a>-1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#freqn\">freqn</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* assume CPU is at P0... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#state\">state</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#states\">states</a>[0].<a class=\"id\" href=\"#core_frequency\">core_frequency</a> * 1000;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_acpi_perf_data\">free_acpi_perf_data</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Freeing a NULL pointer is OK, and alloc_percpu zeroes. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#acpi_perf_data\">acpi_perf_data</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> -><a class=\"id\" href=\"#shared_cpu_map\">shared_cpu_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#acpi_perf_data\">acpi_perf_data</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * acpi_cpufreq_early_init - initialize ACPI P-States library</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Initialize the ACPI P-States library (drivers/acpi/processor_perflib.c)</span>", 
"<span class=\"comment\"> * in order to determine correct frequency and voltage pairings. We can</span>", 
"<span class=\"comment\"> * do _PDC and _PSD and find out the processor dependency for the</span>", 
"<span class=\"comment\"> * actual init that will happen later...</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#acpi_cpufreq_early_init\">acpi_cpufreq_early_init</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"acpi_cpufreq_early_init\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_perf_data\">acpi_perf_data</a> = <a class=\"id\" href=\"#alloc_percpu\">alloc_percpu</a>(struct <a class=\"id\" href=\"#acpi_processor_performance\">acpi_processor_performance</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_perf_data\">acpi_perf_data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"Memory allocation error for acpi_perf_data.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#zalloc_cpumask_var_node\">zalloc_cpumask_var_node</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#acpi_perf_data\">acpi_perf_data</a>, <a class=\"id\" href=\"#i\">i</a>)-><a class=\"id\" href=\"#shared_cpu_map\">shared_cpu_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#i\">i</a>))) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Freeing a NULL pointer is OK: alloc_percpu zeroes. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_acpi_perf_data\">free_acpi_perf_data</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do initialization in ACPI core */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_processor_preregister_performance\">acpi_processor_preregister_performance</a>(<a class=\"id\" href=\"#acpi_perf_data\">acpi_perf_data</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some BIOSes do SW_ANY coordination internally, either set it up in hw</span>", 
"<span class=\"comment\"> * or do it in BIOS firmware and won't inform about it to OS. If not</span>", 
"<span class=\"comment\"> * detected, this has a side effect of making CPU run at a different speed</span>", 
"<span class=\"comment\"> * than OS intended it to run at. Detect it and handle it cleanly.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#bios_with_sw_any_bug\">bios_with_sw_any_bug</a>;", 
"", 
"static int <a class=\"id\" href=\"#sw_any_bug_found\">sw_any_bug_found</a>(const struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> *<a class=\"id\" href=\"#d\">d</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bios_with_sw_any_bug\">bios_with_sw_any_bug</a> = 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> <a class=\"id\" href=\"#sw_any_bug_dmi_table\">sw_any_bug_dmi_table</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#sw_any_bug_found\">sw_any_bug_found</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#ident\">ident</a> = \"Supermicro Server X6DLP\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#matches\">matches</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_SYS_VENDOR\">DMI_SYS_VENDOR</a>, \"Supermicro\"),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_BIOS_VERSION\">DMI_BIOS_VERSION</a>, \"080010\"),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_PRODUCT_NAME\">DMI_PRODUCT_NAME</a>, \"X6DLP\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{ }", 
"};", 
"", 
"static int <a class=\"id\" href=\"#acpi_cpufreq_blacklist\">acpi_cpufreq_blacklist</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Intel Xeon Processor 7100 Series Specification Update</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * http://www.intel.com/Assets/PDF/specupdate/314554.pdf</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * AL30: A Machine Check Exception (MCE) Occurring during an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Enhanced Intel SpeedStep Technology Ratio Change May Cause</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Both Processor Cores to Lock Up. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> == <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 15) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 6) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> == 8)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"acpi-cpufreq: Intel(R) \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Xeon(R) 7100 Errata AL30, processors may \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"lock up on frequency changes: disabling \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"acpi-cpufreq.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>    }", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#acpi_cpufreq_cpu_init\">acpi_cpufreq_cpu_init</a>(struct <a class=\"id\" href=\"#cpufreq_policy\">cpufreq_policy</a> *<a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#valid_states\">valid_states</a> = 0;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_cpufreq_data\">acpi_cpufreq_data</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#result\">result</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a> = &amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_processor_performance\">acpi_processor_performance</a> *<a class=\"id\" href=\"#perf\">perf</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#blacklisted\">blacklisted</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"acpi_cpufreq_cpu_init\\n\");", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blacklisted\">blacklisted</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#blacklisted\">blacklisted</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blacklisted\">blacklisted</a> = <a class=\"id\" href=\"#acpi_cpufreq_blacklist\">acpi_cpufreq_blacklist</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blacklisted\">blacklisted</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#blacklisted\">blacklisted</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#acpi_cpufreq_data\">acpi_cpufreq_data</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#acpi_perf_data\">acpi_perf_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#acfreq_data\">acfreq_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_CONSTANT_TSC\">X86_FEATURE_CONSTANT_TSC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_cpufreq_driver\">acpi_cpufreq_driver</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CPUFREQ_CONST_LOOPS\">CPUFREQ_CONST_LOOPS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#acpi_processor_register_performance\">acpi_processor_register_performance</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_free\">err_free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf\">perf</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#shared_type\">shared_type</a> = <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#shared_type\">shared_type</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Will let policy-&gt;cpus know about dependency only when software</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * coordination is required.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#shared_type\">shared_type</a> == <a class=\"id\" href=\"#CPUFREQ_SHARED_TYPE_ALL\">CPUFREQ_SHARED_TYPE_ALL</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#shared_type\">shared_type</a> == <a class=\"id\" href=\"#CPUFREQ_SHARED_TYPE_ANY\">CPUFREQ_SHARED_TYPE_ANY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpus\">cpus</a>, <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#shared_cpu_map\">shared_cpu_map</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#related_cpus\">related_cpus</a>, <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#shared_cpu_map\">shared_cpu_map</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmi_check_system\">dmi_check_system</a>(<a class=\"id\" href=\"#sw_any_bug_dmi_table\">sw_any_bug_dmi_table</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bios_with_sw_any_bug\">bios_with_sw_any_bug</a> && <a class=\"id\" href=\"#cpumask_weight\">cpumask_weight</a>(<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpus\">cpus</a>) == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#shared_type\">shared_type</a> = <a class=\"id\" href=\"#CPUFREQ_SHARED_TYPE_ALL\">CPUFREQ_SHARED_TYPE_ALL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpus\">cpus</a>, <a class=\"id\" href=\"#cpu_core_mask\">cpu_core_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* capability check */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#state_count\">state_count</a> <= 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"No P-States\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_unreg\">err_unreg</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#control_register\">control_register</a>.<a class=\"id\" href=\"#space_id\">space_id</a> != <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#status_register\">status_register</a>.<a class=\"id\" href=\"#space_id\">space_id</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_unreg\">err_unreg</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#control_register\">control_register</a>.<a class=\"id\" href=\"#space_id\">space_id</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_ADR_SPACE_SYSTEM_IO\">ACPI_ADR_SPACE_SYSTEM_IO</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"SYSTEM IO addr space\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu_feature\">cpu_feature</a> = <a class=\"id\" href=\"#SYSTEM_IO_CAPABLE\">SYSTEM_IO_CAPABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_ADR_SPACE_FIXED_HARDWARE\">ACPI_ADR_SPACE_FIXED_HARDWARE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"HARDWARE addr space\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_est_cpu\">check_est_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_unreg\">err_unreg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu_feature\">cpu_feature</a> = <a class=\"id\" href=\"#SYSTEM_INTEL_MSR_CAPABLE\">SYSTEM_INTEL_MSR_CAPABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"Unknown addr space %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#u32\">u32</a>) (<a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#control_register\">control_register</a>.<a class=\"id\" href=\"#space_id\">space_id</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_unreg\">err_unreg</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#cpufreq_frequency_table\">cpufreq_frequency_table</a>) *", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#state_count\">state_count</a>+1), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_unreg\">err_unreg</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* detect transition latency */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpuinfo\">cpuinfo</a>.<a class=\"id\" href=\"#transition_latency\">transition_latency</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#state_count\">state_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#transition_latency\">transition_latency</a> * 1000) &gt;", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpuinfo\">cpuinfo</a>.<a class=\"id\" href=\"#transition_latency\">transition_latency</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpuinfo\">cpuinfo</a>.<a class=\"id\" href=\"#transition_latency\">transition_latency</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#transition_latency\">transition_latency</a> * 1000;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for high latency (&gt;20uS) from buggy BIOSes, like on T42 */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#control_register\">control_register</a>.<a class=\"id\" href=\"#space_id\">space_id</a> == <a class=\"id\" href=\"#ACPI_ADR_SPACE_FIXED_HARDWARE\">ACPI_ADR_SPACE_FIXED_HARDWARE</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpuinfo\">cpuinfo</a>.<a class=\"id\" href=\"#transition_latency\">transition_latency</a> &gt; 20 * 1000) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpuinfo\">cpuinfo</a>.<a class=\"id\" href=\"#transition_latency\">transition_latency</a> = 20 * 1000;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk_once\">printk_once</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"P-state transition latency capped at 20 uS\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* table init */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#state_count\">state_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &gt; 0 && <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#core_frequency\">core_frequency</a> >=", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a>[<a class=\"id\" href=\"#valid_states\">valid_states</a>-1].<a class=\"id\" href=\"#frequency\">frequency</a> / 1000)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a>[<a class=\"id\" href=\"#valid_states\">valid_states</a>].<a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a>[<a class=\"id\" href=\"#valid_states\">valid_states</a>].<a class=\"id\" href=\"#frequency\">frequency</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#core_frequency\">core_frequency</a> * 1000;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#valid_states\">valid_states</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a>[<a class=\"id\" href=\"#valid_states\">valid_states</a>].<a class=\"id\" href=\"#frequency\">frequency</a> = <a class=\"id\" href=\"#CPUFREQ_TABLE_END\">CPUFREQ_TABLE_END</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#state\">state</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#cpufreq_frequency_table_cpuinfo\">cpufreq_frequency_table_cpuinfo</a>(<a class=\"id\" href=\"#policy\">policy</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_freqfree\">err_freqfree</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#states\">states</a>[0].<a class=\"id\" href=\"#core_frequency\">core_frequency</a> * 1000 != <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpuinfo\">cpuinfo</a>.<a class=\"id\" href=\"#max_freq\">max_freq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> <a class=\"id\" href=\"#FW_WARN\">FW_WARN</a> \"P-state 0 is not max freq\\n\");", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#control_register\">control_register</a>.<a class=\"id\" href=\"#space_id\">space_id</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_ADR_SPACE_SYSTEM_IO\">ACPI_ADR_SPACE_SYSTEM_IO</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Current speed is unknown and not detectable by IO port */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#acpi_cpufreq_guess_freq\">acpi_cpufreq_guess_freq</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_ADR_SPACE_FIXED_HARDWARE\">ACPI_ADR_SPACE_FIXED_HARDWARE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_cpufreq_driver\">acpi_cpufreq_driver</a>.<a class=\"id\" href=\"#get\">get</a> = <a class=\"id\" href=\"#get_cur_freq_on_cpu\">get_cur_freq_on_cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#get_cur_freq_on_cpu\">get_cur_freq_on_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* notify BIOS that we exist */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_processor_notify_smm\">acpi_processor_notify_smm</a>(<a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for APERF/MPERF support in hardware */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_APERFMPERF\">X86_FEATURE_APERFMPERF</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_cpufreq_driver\">acpi_cpufreq_driver</a>.<a class=\"id\" href=\"#getavg\">getavg</a> = <a class=\"id\" href=\"#cpufreq_get_measured_perf\">cpufreq_get_measured_perf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"CPU%u - ACPI performance management activated.\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#state_count\">state_count</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"     %cP%d: %d MHz, %d mW, %d uS\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#state\">state</a> ? '*' : ' '), <a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#core_frequency\">core_frequency</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#power\">power</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#perf\">perf</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#transition_latency\">transition_latency</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpufreq_frequency_table_get_attr\">cpufreq_frequency_table_get_attr</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a>, <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the first call to -&gt;target() should result in us actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * writing something to the appropriate registers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#resume\">resume</a> = 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<a class=\"id\" href=\"#err_freqfree\">err_freqfree</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#freq_table\">freq_table</a>);", 
"<a class=\"id\" href=\"#err_unreg\">err_unreg</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_processor_unregister_performance\">acpi_processor_unregister_performance</a>(<a class=\"id\" href=\"#perf\">perf</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<a class=\"id\" href=\"#err_free\">err_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#acfreq_data\">acfreq_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#acpi_cpufreq_cpu_exit\">acpi_cpufreq_cpu_exit</a>(struct <a class=\"id\" href=\"#cpufreq_policy\">cpufreq_policy</a> *<a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_cpufreq_data\">acpi_cpufreq_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#acfreq_data\">acfreq_data</a>, <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"acpi_cpufreq_cpu_exit\\n\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpufreq_frequency_table_put_attr\">cpufreq_frequency_table_put_attr</a>(<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#acfreq_data\">acfreq_data</a>, <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_processor_unregister_performance\">acpi_processor_unregister_performance</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#acpi_cpufreq_resume\">acpi_cpufreq_resume</a>(struct <a class=\"id\" href=\"#cpufreq_policy\">cpufreq_policy</a> *<a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_cpufreq_data\">acpi_cpufreq_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#acfreq_data\">acfreq_data</a>, <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"acpi_cpufreq_resume\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#resume\">resume</a> = 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#freq_attr\">freq_attr</a> *<a class=\"id\" href=\"#acpi_cpufreq_attr\">acpi_cpufreq_attr</a>[] = {", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#cpufreq_freq_attr_scaling_available_freqs\">cpufreq_freq_attr_scaling_available_freqs</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#cpufreq_driver\">cpufreq_driver</a> <a class=\"id\" href=\"#acpi_cpufreq_driver\">acpi_cpufreq_driver</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#verify\">verify</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#acpi_cpufreq_verify\">acpi_cpufreq_verify</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#target\">target</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#acpi_cpufreq_target\">acpi_cpufreq_target</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bios_limit\">bios_limit</a><span class=\"ts\"/>= <a class=\"id\" href=\"#acpi_processor_get_bios_limit\">acpi_processor_get_bios_limit</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#init\">init</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#acpi_cpufreq_cpu_init\">acpi_cpufreq_cpu_init</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#exit\">exit</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#acpi_cpufreq_cpu_exit\">acpi_cpufreq_cpu_exit</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#resume\">resume</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#acpi_cpufreq_resume\">acpi_cpufreq_resume</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"acpi-cpufreq\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#attr\">attr</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#acpi_cpufreq_attr\">acpi_cpufreq_attr</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#acpi_cpufreq_init\">acpi_cpufreq_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_disabled\">acpi_disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"acpi_cpufreq_init\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#acpi_cpufreq_early_init\">acpi_cpufreq_early_init</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cpufreq_register_driver\">cpufreq_register_driver</a>(&amp;<a class=\"id\" href=\"#acpi_cpufreq_driver\">acpi_cpufreq_driver</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_acpi_perf_data\">free_acpi_perf_data</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#acpi_cpufreq_exit\">acpi_cpufreq_exit</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"acpi_cpufreq_exit\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpufreq_unregister_driver\">cpufreq_unregister_driver</a>(&amp;<a class=\"id\" href=\"#acpi_cpufreq_driver\">acpi_cpufreq_driver</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#acpi_perf_data\">acpi_perf_data</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#acpi_pstate_strict\">acpi_pstate_strict</a>, <a class=\"id\" href=\"#uint\">uint</a>, 0644);", 
"<a class=\"id\" href=\"#MODULE_PARM_DESC\">MODULE_PARM_DESC</a>(<a class=\"id\" href=\"#acpi_pstate_strict\">acpi_pstate_strict</a>,", 
"<span class=\"ts\"/>\"value 0 or non-zero. non-zero -> strict ACPI checks are \"", 
"<span class=\"ts\"/>\"performed during frequency changes.\");", 
"", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#acpi_cpufreq_init\">acpi_cpufreq_init</a>);", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#acpi_cpufreq_exit\">acpi_cpufreq_exit</a>);", 
"", 
"<a class=\"id\" href=\"#MODULE_ALIAS\">MODULE_ALIAS</a>(\"acpi\");", 
];
xr_frag_insert('l/4f/6902317ca09c452fabdf432cf82d39daf705f3.xr', __xr_tmp);
