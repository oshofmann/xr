var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * trace_output.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2008 Red Hat Inc, Steven Rostedt &lt;srostedt@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ftrace\">ftrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"trace_output.h\"", 
"", 
"<span class=\"comment\">/* must be a power of 2 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EVENT_HASHSIZE\">EVENT_HASHSIZE</a><span class=\"ts\"/>128", 
"", 
"<a class=\"id\" href=\"#DECLARE_RWSEM\">DECLARE_RWSEM</a>(<a class=\"id\" href=\"#trace_event_mutex\">trace_event_mutex</a>);", 
"", 
"static struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> <a class=\"id\" href=\"#event_hash\">event_hash</a>[<a class=\"id\" href=\"#EVENT_HASHSIZE\">EVENT_HASHSIZE</a>] <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"static int <a class=\"id\" href=\"#next_event_type\">next_event_type</a> = <a class=\"id\" href=\"#__TRACE_LAST_TYPE\">__TRACE_LAST_TYPE</a> + 1;", 
"", 
"int <a class=\"id\" href=\"#trace_print_seq\">trace_print_seq</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#len\">len</a> >= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> ? <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1 : <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#seq_write\">seq_write</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only reset this buffer if we successfully wrote to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * seq_file buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_seq_init\">trace_seq_init</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a> <a class=\"id\" href=\"#trace_print_bprintk_msg_only\">trace_print_bprintk_msg_only</a>(struct <a class=\"id\" href=\"#trace_iterator\">trace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a> = &amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_entry\">trace_entry</a> *<a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#ent\">ent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bprint_entry\">bprint_entry</a> *<a class=\"id\" href=\"#field\">field</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_assign_type\">trace_assign_type</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_bprintf\">trace_seq_bprintf</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#field\">field</a>-><a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#field\">field</a>-><a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>;", 
"}", 
"", 
"enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a> <a class=\"id\" href=\"#trace_print_printk_msg_only\">trace_print_printk_msg_only</a>(struct <a class=\"id\" href=\"#trace_iterator\">trace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a> = &amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_entry\">trace_entry</a> *<a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#ent\">ent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#print_entry\">print_entry</a> *<a class=\"id\" href=\"#field\">field</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_assign_type\">trace_assign_type</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"%s\", <a class=\"id\" href=\"#field\">field</a>-><a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * trace_seq_printf - sequence printing of trace information</span>", 
"<span class=\"comment\"> * @s: trace sequence descriptor</span>", 
"<span class=\"comment\"> * @fmt: printf format string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It returns 0 if the trace oversizes the buffer's free</span>", 
"<span class=\"comment\"> * space, 1 otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The tracer may use either sequence operations or its own</span>", 
"<span class=\"comment\"> * copy to user routines. To simplify formating of a trace</span>", 
"<span class=\"comment\"> * trace_seq_printf is used to store strings into a special</span>", 
"<span class=\"comment\"> * buffer (@s). Then the output may be either used by</span>", 
"<span class=\"comment\"> * the sequencer or pulled into another buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1) - <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#full\">full</a> || !<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#buffer\">buffer</a> + <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we can't write it all, don't bother writing anything */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> >= <a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#full\">full</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
];
xr_frag_insert('l/4f/906487ed8e8c071c770e1d16a61efeda64cbf8.xr', __xr_tmp);
