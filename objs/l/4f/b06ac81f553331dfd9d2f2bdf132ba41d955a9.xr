var __xr_tmp = [
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tcp_alloc_md5sig_pool\">tcp_alloc_md5sig_pool</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>tcp_get_md5sig_pool - get md5sig_pool for this user</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>We use percpu structure, so if we succeed, we exit with preemption</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and BH disabled, to make sure another thread or softirq handling</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>wont try to get same context.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tcp_md5sig_pool\">tcp_md5sig_pool</a> *<a class=\"id\" href=\"#tcp_get_md5sig_pool\">tcp_get_md5sig_pool</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_md5sig_pool\">tcp_md5sig_pool</a> * <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_bh_disable\">local_bh_disable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#tcp_md5sig_pool_lock\">tcp_md5sig_pool_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#tcp_md5sig_pool\">tcp_md5sig_pool</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_md5sig_users\">tcp_md5sig_users</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#tcp_md5sig_pool_lock\">tcp_md5sig_pool_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return *<a class=\"id\" href=\"#this_cpu_ptr\">this_cpu_ptr</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_bh_enable\">local_bh_enable</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tcp_get_md5sig_pool\">tcp_get_md5sig_pool</a>);", 
"", 
"void <a class=\"id\" href=\"#tcp_put_md5sig_pool\">tcp_put_md5sig_pool</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_bh_enable\">local_bh_enable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_free_md5sig_pool\">tcp_free_md5sig_pool</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tcp_put_md5sig_pool\">tcp_put_md5sig_pool</a>);", 
"", 
"int <a class=\"id\" href=\"#tcp_md5_hash_header\">tcp_md5_hash_header</a>(struct <a class=\"id\" href=\"#tcp_md5sig_pool\">tcp_md5sig_pool</a> *<a class=\"id\" href=\"#hp\">hp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a> *<a class=\"id\" href=\"#th\">th</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> <a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__sum16\">__sum16</a> <a class=\"id\" href=\"#old_checksum\">old_checksum</a> = <a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#check\">check</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#check\">check</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* options aren't included in the hash */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg_init_one\">sg_init_one</a>(&amp;<a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#th\">th</a>, sizeof(struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#crypto_hash_update\">crypto_hash_update</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#md5_desc\">md5_desc</a>, &amp;<a class=\"id\" href=\"#sg\">sg</a>, sizeof(struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#check\">check</a> = <a class=\"id\" href=\"#old_checksum\">old_checksum</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tcp_md5_hash_header\">tcp_md5_hash_header</a>);", 
"", 
"int <a class=\"id\" href=\"#tcp_md5_hash_skb_data\">tcp_md5_hash_skb_data</a>(struct <a class=\"id\" href=\"#tcp_md5sig_pool\">tcp_md5sig_pool</a> *<a class=\"id\" href=\"#hp\">hp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned <a class=\"id\" href=\"#header_len\">header_len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> <a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_hdr\">tcp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hash_desc\">hash_desc</a> *<a class=\"id\" href=\"#desc\">desc</a> = &amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#md5_desc\">md5_desc</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>const unsigned <a class=\"id\" href=\"#head_data_len\">head_data_len</a> = <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>) &gt; <a class=\"id\" href=\"#header_len\">header_len</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>) - <a class=\"id\" href=\"#header_len\">header_len</a> : 0;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#skb_shared_info\">skb_shared_info</a> *<a class=\"id\" href=\"#shi\">shi</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#frag_iter\">frag_iter</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg_init_table\">sg_init_table</a>(&amp;<a class=\"id\" href=\"#sg\">sg</a>, 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg_set_buf\">sg_set_buf</a>(&amp;<a class=\"id\" href=\"#sg\">sg</a>, ((<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#tp\">tp</a>) + <a class=\"id\" href=\"#header_len\">header_len</a>, <a class=\"id\" href=\"#head_data_len\">head_data_len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#crypto_hash_update\">crypto_hash_update</a>(<a class=\"id\" href=\"#desc\">desc</a>, &amp;<a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#head_data_len\">head_data_len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#shi\">shi</a>-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#skb_frag_struct\">skb_frag_struct</a> *<a class=\"id\" href=\"#f\">f</a> = &amp;<a class=\"id\" href=\"#shi\">shi</a>-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_set_page\">sg_set_page</a>(&amp;<a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#page_offset\">page_offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#crypto_hash_update\">crypto_hash_update</a>(<a class=\"id\" href=\"#desc\">desc</a>, &amp;<a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_walk_frags\">skb_walk_frags</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#frag_iter\">frag_iter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_md5_hash_skb_data\">tcp_md5_hash_skb_data</a>(<a class=\"id\" href=\"#hp\">hp</a>, <a class=\"id\" href=\"#frag_iter\">frag_iter</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tcp_md5_hash_skb_data\">tcp_md5_hash_skb_data</a>);", 
"", 
"int <a class=\"id\" href=\"#tcp_md5_hash_key\">tcp_md5_hash_key</a>(struct <a class=\"id\" href=\"#tcp_md5sig_pool\">tcp_md5sig_pool</a> *<a class=\"id\" href=\"#hp\">hp</a>, struct <a class=\"id\" href=\"#tcp_md5sig_key\">tcp_md5sig_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> <a class=\"id\" href=\"#sg\">sg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg_init_one\">sg_init_one</a>(&amp;<a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#keylen\">keylen</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#crypto_hash_update\">crypto_hash_update</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#md5_desc\">md5_desc</a>, &amp;<a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#keylen\">keylen</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tcp_md5_hash_key\">tcp_md5_hash_key</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * Each Responder maintains up to two secret values concurrently for</span>", 
"<span class=\"comment\"> * efficient secret rollover.  Each secret value has 4 states:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Generating.  (tcp_secret_generating != tcp_secret_primary)</span>", 
"<span class=\"comment\"> *    Generates new Responder-Cookies, but not yet used for primary</span>", 
"<span class=\"comment\"> *    verification.  This is a short-term state, typically lasting only</span>", 
"<span class=\"comment\"> *    one round trip time (RTT).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Primary.  (tcp_secret_generating == tcp_secret_primary)</span>", 
"<span class=\"comment\"> *    Used both for generation and primary verification.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Retiring.  (tcp_secret_retiring != tcp_secret_secondary)</span>", 
"<span class=\"comment\"> *    Used for verification, until the first failure that can be</span>", 
"<span class=\"comment\"> *    verified by the newer Generating secret.  At that time, this</span>", 
"<span class=\"comment\"> *    cookie's state is changed to Secondary, and the Generating</span>", 
"<span class=\"comment\"> *    cookie's state is changed to Primary.  This is a short-term state,</span>", 
"<span class=\"comment\"> *    typically lasting only one round trip time (RTT).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Secondary.  (tcp_secret_retiring == tcp_secret_secondary)</span>", 
"<span class=\"comment\"> *    Used for secondary verification, after primary verification</span>", 
"<span class=\"comment\"> *    failures.  This state lasts no more than twice the Maximum Segment</span>", 
"<span class=\"comment\"> *    Lifetime (2MSL).  Then, the secret is discarded.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tcp_cookie_secret\">tcp_cookie_secret</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* The secret is divided into two parts.  The digest part is the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * equivalent of previously hashing a secret and saving the state,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and serves as an initialization vector (IV).  The message part</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * serves as the trailing secret.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#secrets\">secrets</a>[<a class=\"id\" href=\"#COOKIE_WORKSPACE_WORDS\">COOKIE_WORKSPACE_WORDS</a>];", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires\">expires</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TCP_SECRET_1MSL\">TCP_SECRET_1MSL</a> (<a class=\"id\" href=\"#HZ\">HZ</a> * <a class=\"id\" href=\"#TCP_PAWS_MSL\">TCP_PAWS_MSL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TCP_SECRET_2MSL\">TCP_SECRET_2MSL</a> (<a class=\"id\" href=\"#HZ\">HZ</a> * <a class=\"id\" href=\"#TCP_PAWS_MSL\">TCP_PAWS_MSL</a> * 2)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TCP_SECRET_LIFE\">TCP_SECRET_LIFE</a> (<a class=\"id\" href=\"#HZ\">HZ</a> * 600)", 
"", 
"static struct <a class=\"id\" href=\"#tcp_cookie_secret\">tcp_cookie_secret</a> <a class=\"id\" href=\"#tcp_secret_one\">tcp_secret_one</a>;", 
"static struct <a class=\"id\" href=\"#tcp_cookie_secret\">tcp_cookie_secret</a> <a class=\"id\" href=\"#tcp_secret_two\">tcp_secret_two</a>;", 
"", 
"<span class=\"comment\">/* Essentially a circular list, without dynamic allocation. */</span>", 
"static struct <a class=\"id\" href=\"#tcp_cookie_secret\">tcp_cookie_secret</a> *<a class=\"id\" href=\"#tcp_secret_generating\">tcp_secret_generating</a>;", 
"static struct <a class=\"id\" href=\"#tcp_cookie_secret\">tcp_cookie_secret</a> *<a class=\"id\" href=\"#tcp_secret_primary\">tcp_secret_primary</a>;", 
"static struct <a class=\"id\" href=\"#tcp_cookie_secret\">tcp_cookie_secret</a> *<a class=\"id\" href=\"#tcp_secret_retiring\">tcp_secret_retiring</a>;", 
"static struct <a class=\"id\" href=\"#tcp_cookie_secret\">tcp_cookie_secret</a> *<a class=\"id\" href=\"#tcp_secret_secondary\">tcp_secret_secondary</a>;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#tcp_secret_locker\">tcp_secret_locker</a>);", 
"", 
"<span class=\"comment\">/* Select a pseudo-random word in the cookie workspace.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tcp_cookie_work\">tcp_cookie_work</a>(const <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#ws\">ws</a>, const int <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ws\">ws</a>[<a class=\"id\" href=\"#COOKIE_DIGEST_WORDS\">COOKIE_DIGEST_WORDS</a> + ((<a class=\"id\" href=\"#COOKIE_MESSAGE_WORDS\">COOKIE_MESSAGE_WORDS</a>-1) &amp; <a class=\"id\" href=\"#ws\">ws</a>[<a class=\"id\" href=\"#n\">n</a>])];", 
"}", 
"", 
"<span class=\"comment\">/* Fill bakery[COOKIE_WORKSPACE_WORDS] with generator, updating as needed.</span>", 
"<span class=\"comment\"> * Called in softirq context.</span>", 
"<span class=\"comment\"> * Returns: 0 for success.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tcp_cookie_generator\">tcp_cookie_generator</a>(<a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#bakery\">bakery</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#jiffy\">jiffy</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#time_after_eq\">time_after_eq</a>(<a class=\"id\" href=\"#jiffy\">jiffy</a>, <a class=\"id\" href=\"#tcp_secret_generating\">tcp_secret_generating</a>-><a class=\"id\" href=\"#expires\">expires</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#tcp_secret_locker\">tcp_secret_locker</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#time_after_eq\">time_after_eq</a>(<a class=\"id\" href=\"#jiffy\">jiffy</a>, <a class=\"id\" href=\"#tcp_secret_generating\">tcp_secret_generating</a>-><a class=\"id\" href=\"#expires\">expires</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* refreshed by another */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#bakery\">bakery</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#tcp_secret_generating\">tcp_secret_generating</a>-><a class=\"id\" href=\"#secrets\">secrets</a>[0],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#COOKIE_WORKSPACE_WORDS\">COOKIE_WORKSPACE_WORDS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* still needs refreshing */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_random_bytes\">get_random_bytes</a>(<a class=\"id\" href=\"#bakery\">bakery</a>, <a class=\"id\" href=\"#COOKIE_WORKSPACE_WORDS\">COOKIE_WORKSPACE_WORDS</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The first time, paranoia assumes that the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * randomization function isn't as strong.  But,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * this secret initialization is delayed until</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the last possible moment (packet arrival).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Although that time is observable, it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * unpredictably variable.  Mash in the most</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * volatile clock bits available, and expire the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * secret extra quickly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tcp_secret_primary\">tcp_secret_primary</a>-><a class=\"id\" href=\"#expires\">expires</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#tcp_secret_secondary\">tcp_secret_secondary</a>-><a class=\"id\" href=\"#expires\">expires</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#tv\">tv</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#getnstimeofday\">getnstimeofday</a>(&amp;<a class=\"id\" href=\"#tv\">tv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bakery\">bakery</a>[<a class=\"id\" href=\"#COOKIE_DIGEST_WORDS\">COOKIE_DIGEST_WORDS</a>+0] ^=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_secret_secondary\">tcp_secret_secondary</a>-><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#jiffy\">jiffy</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#TCP_SECRET_1MSL\">TCP_SECRET_1MSL</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ (0x0f &amp; <a class=\"id\" href=\"#tcp_cookie_work\">tcp_cookie_work</a>(<a class=\"id\" href=\"#bakery\">bakery</a>, 0));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_secret_secondary\">tcp_secret_secondary</a>-><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#jiffy\">jiffy</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#TCP_SECRET_LIFE\">TCP_SECRET_LIFE</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ (0xff &amp; <a class=\"id\" href=\"#tcp_cookie_work\">tcp_cookie_work</a>(<a class=\"id\" href=\"#bakery\">bakery</a>, 1));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_secret_primary\">tcp_secret_primary</a>-><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#jiffy\">jiffy</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#TCP_SECRET_2MSL\">TCP_SECRET_2MSL</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ (0x1f &amp; <a class=\"id\" href=\"#tcp_cookie_work\">tcp_cookie_work</a>(<a class=\"id\" href=\"#bakery\">bakery</a>, 2));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#tcp_secret_secondary\">tcp_secret_secondary</a>-><a class=\"id\" href=\"#secrets\">secrets</a>[0],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#bakery\">bakery</a>, <a class=\"id\" href=\"#COOKIE_WORKSPACE_WORDS\">COOKIE_WORKSPACE_WORDS</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#tcp_secret_generating\">tcp_secret_generating</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#tcp_secret_secondary\">tcp_secret_secondary</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#tcp_secret_retiring\">tcp_secret_retiring</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#tcp_secret_primary\">tcp_secret_primary</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Neither call_rcu() nor synchronize_rcu() needed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Retiring data is not freed.  It is replaced after</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * further (locked) pointer updates, and a quiet time</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * (minimum 1MSL, maximum LIFE - 2MSL).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#tcp_secret_locker\">tcp_secret_locker</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock_bh\">rcu_read_lock_bh</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#bakery\">bakery</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#tcp_secret_generating\">tcp_secret_generating</a>)-><a class=\"id\" href=\"#secrets\">secrets</a>[0],", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#COOKIE_WORKSPACE_WORDS\">COOKIE_WORKSPACE_WORDS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock_bh\">rcu_read_unlock_bh</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tcp_cookie_generator\">tcp_cookie_generator</a>);", 
"", 
"void <a class=\"id\" href=\"#tcp_done\">tcp_done</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_state\">sk_state</a> == <a class=\"id\" href=\"#TCP_SYN_SENT\">TCP_SYN_SENT</a> || <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_state\">sk_state</a> == <a class=\"id\" href=\"#TCP_SYN_RECV\">TCP_SYN_RECV</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_INC_STATS_BH\">TCP_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#TCP_MIB_ATTEMPTFAILS\">TCP_MIB_ATTEMPTFAILS</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_set_state\">tcp_set_state</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#TCP_CLOSE\">TCP_CLOSE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_clear_xmit_timers\">tcp_clear_xmit_timers</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_shutdown\">sk_shutdown</a> = <a class=\"id\" href=\"#SHUTDOWN_MASK\">SHUTDOWN_MASK</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_DEAD\">SOCK_DEAD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_state_change\">sk_state_change</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_csk_destroy_sock\">inet_csk_destroy_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#tcp_done\">tcp_done</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#tcp_congestion_ops\">tcp_congestion_ops</a> <a class=\"id\" href=\"#tcp_reno\">tcp_reno</a>;", 
"", 
"static <a class=\"id\" href=\"#__initdata\">__initdata</a> unsigned long <a class=\"id\" href=\"#thash_entries\">thash_entries</a>;", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_thash_entries\">set_thash_entries</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#str\">str</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thash_entries\">thash_entries</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#str\">str</a>, 0);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"thash_entries=\", <a class=\"id\" href=\"#set_thash_entries\">set_thash_entries</a>);", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#tcp_init\">tcp_init</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#limit\">limit</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#max_share\">max_share</a>, <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#jiffy\">jiffy</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(sizeof(struct <a class=\"id\" href=\"#tcp_skb_cb\">tcp_skb_cb</a>) &gt; sizeof(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#cb\">cb</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_init\">percpu_counter_init</a>(&amp;<a class=\"id\" href=\"#tcp_sockets_allocated\">tcp_sockets_allocated</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_init\">percpu_counter_init</a>(&amp;<a class=\"id\" href=\"#tcp_orphan_count\">tcp_orphan_count</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_hashinfo\">tcp_hashinfo</a>.<a class=\"id\" href=\"#bind_bucket_cachep\">bind_bucket_cachep</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"tcp_bind_bucket\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  sizeof(struct <a class=\"id\" href=\"#inet_bind_bucket\">inet_bind_bucket</a>), 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a>|<a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Size and allocate the main established and bind bucket</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hash tables.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The methodology is similar to that of the buffer cache.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_hashinfo\">tcp_hashinfo</a>.<a class=\"id\" href=\"#ehash\">ehash</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_large_system_hash\">alloc_large_system_hash</a>(\"TCP established\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#inet_ehash_bucket\">inet_ehash_bucket</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thash_entries\">thash_entries</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#totalram_pages\">totalram_pages</a> >= 128 * 1024) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>13 : 15,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#tcp_hashinfo\">tcp_hashinfo</a>.<a class=\"id\" href=\"#ehash_mask\">ehash_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thash_entries\">thash_entries</a> ? 0 : 512 * 1024);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#tcp_hashinfo\">tcp_hashinfo</a>.<a class=\"id\" href=\"#ehash_mask\">ehash_mask</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_NULLS_HEAD\">INIT_HLIST_NULLS_HEAD</a>(&amp;<a class=\"id\" href=\"#tcp_hashinfo\">tcp_hashinfo</a>.<a class=\"id\" href=\"#ehash\">ehash</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#chain\">chain</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_NULLS_HEAD\">INIT_HLIST_NULLS_HEAD</a>(&amp;<a class=\"id\" href=\"#tcp_hashinfo\">tcp_hashinfo</a>.<a class=\"id\" href=\"#ehash\">ehash</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#twchain\">twchain</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inet_ehash_locks_alloc\">inet_ehash_locks_alloc</a>(&amp;<a class=\"id\" href=\"#tcp_hashinfo\">tcp_hashinfo</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"TCP: failed to alloc ehash_locks\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_hashinfo\">tcp_hashinfo</a>.<a class=\"id\" href=\"#bhash\">bhash</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_large_system_hash\">alloc_large_system_hash</a>(\"TCP bind\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#inet_bind_hashbucket\">inet_bind_hashbucket</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_hashinfo\">tcp_hashinfo</a>.<a class=\"id\" href=\"#ehash_mask\">ehash_mask</a> + 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#totalram_pages\">totalram_pages</a> >= 128 * 1024) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>13 : 15,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#tcp_hashinfo\">tcp_hashinfo</a>.<a class=\"id\" href=\"#bhash_size\">bhash_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>64 * 1024);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_hashinfo\">tcp_hashinfo</a>.<a class=\"id\" href=\"#bhash_size\">bhash_size</a> = 1 << <a class=\"id\" href=\"#tcp_hashinfo\">tcp_hashinfo</a>.<a class=\"id\" href=\"#bhash_size\">bhash_size</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tcp_hashinfo\">tcp_hashinfo</a>.<a class=\"id\" href=\"#bhash_size\">bhash_size</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#tcp_hashinfo\">tcp_hashinfo</a>.<a class=\"id\" href=\"#bhash\">bhash</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#tcp_hashinfo\">tcp_hashinfo</a>.<a class=\"id\" href=\"#bhash\">bhash</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#chain\">chain</a>);", 
"<span class=\"ts\"/>}", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> = <a class=\"id\" href=\"#tcp_hashinfo\">tcp_hashinfo</a>.<a class=\"id\" href=\"#ehash_mask\">ehash_mask</a> + 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_death_row\">tcp_death_row</a>.<a class=\"id\" href=\"#sysctl_max_tw_buckets\">sysctl_max_tw_buckets</a> = <a class=\"id\" href=\"#cnt\">cnt</a> / 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_tcp_max_orphans\">sysctl_tcp_max_orphans</a> = <a class=\"id\" href=\"#cnt\">cnt</a> / 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_max_syn_backlog\">sysctl_max_syn_backlog</a> = <a class=\"id\" href=\"#max\">max</a>(128, <a class=\"id\" href=\"#cnt\">cnt</a> / 256);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the pressure threshold to be a fraction of global memory that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is up to 1/2 at 256 MB, decreasing toward zero with the amount of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * memory, with a floor of 128 pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#totalram_pages\">totalram_pages</a> - <a class=\"id\" href=\"#totalhigh_pages\">totalhigh_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>, 1UL<<(28-<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)) >> (20-<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = (<a class=\"id\" href=\"#limit\">limit</a> * (<a class=\"id\" href=\"#nr_pages\">nr_pages</a> >> (20-<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))) >> (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>-11);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#limit\">limit</a>, 128UL);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_tcp_mem\">sysctl_tcp_mem</a>[0] = <a class=\"id\" href=\"#limit\">limit</a> / 4 * 3;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_tcp_mem\">sysctl_tcp_mem</a>[1] = <a class=\"id\" href=\"#limit\">limit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_tcp_mem\">sysctl_tcp_mem</a>[2] = <a class=\"id\" href=\"#sysctl_tcp_mem\">sysctl_tcp_mem</a>[0] * 2;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set per-socket limits to no more than 1/128 the pressure threshold */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = ((unsigned long)<a class=\"id\" href=\"#sysctl_tcp_mem\">sysctl_tcp_mem</a>[1]) << (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> - 7);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_share\">max_share</a> = <a class=\"id\" href=\"#min\">min</a>(4UL*1024*1024, <a class=\"id\" href=\"#limit\">limit</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_tcp_wmem\">sysctl_tcp_wmem</a>[0] = <a class=\"id\" href=\"#SK_MEM_QUANTUM\">SK_MEM_QUANTUM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_tcp_wmem\">sysctl_tcp_wmem</a>[1] = 16*1024;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_tcp_wmem\">sysctl_tcp_wmem</a>[2] = <a class=\"id\" href=\"#max\">max</a>(64*1024, <a class=\"id\" href=\"#max_share\">max_share</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_tcp_rmem\">sysctl_tcp_rmem</a>[0] = <a class=\"id\" href=\"#SK_MEM_QUANTUM\">SK_MEM_QUANTUM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_tcp_rmem\">sysctl_tcp_rmem</a>[1] = 87380;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_tcp_rmem\">sysctl_tcp_rmem</a>[2] = <a class=\"id\" href=\"#max\">max</a>(87380, <a class=\"id\" href=\"#max_share\">max_share</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"TCP: Hash tables configured \"", 
"<span class=\"ts\"/>       \"(established %u bind %u)\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#tcp_hashinfo\">tcp_hashinfo</a>.<a class=\"id\" href=\"#ehash_mask\">ehash_mask</a> + 1, <a class=\"id\" href=\"#tcp_hashinfo\">tcp_hashinfo</a>.<a class=\"id\" href=\"#bhash_size\">bhash_size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_register_congestion_control\">tcp_register_congestion_control</a>(&amp;<a class=\"id\" href=\"#tcp_reno\">tcp_reno</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#tcp_secret_one\">tcp_secret_one</a>.<a class=\"id\" href=\"#secrets\">secrets</a>[0], 0, sizeof(<a class=\"id\" href=\"#tcp_secret_one\">tcp_secret_one</a>.<a class=\"id\" href=\"#secrets\">secrets</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#tcp_secret_two\">tcp_secret_two</a>.<a class=\"id\" href=\"#secrets\">secrets</a>[0], 0, sizeof(<a class=\"id\" href=\"#tcp_secret_two\">tcp_secret_two</a>.<a class=\"id\" href=\"#secrets\">secrets</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_secret_one\">tcp_secret_one</a>.<a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#jiffy\">jiffy</a>; <span class=\"comment\">/* past due */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_secret_two\">tcp_secret_two</a>.<a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#jiffy\">jiffy</a>; <span class=\"comment\">/* past due */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_secret_generating\">tcp_secret_generating</a> = &amp;<a class=\"id\" href=\"#tcp_secret_one\">tcp_secret_one</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_secret_primary\">tcp_secret_primary</a> = &amp;<a class=\"id\" href=\"#tcp_secret_one\">tcp_secret_one</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_secret_retiring\">tcp_secret_retiring</a> = &amp;<a class=\"id\" href=\"#tcp_secret_two\">tcp_secret_two</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_secret_secondary\">tcp_secret_secondary</a> = &amp;<a class=\"id\" href=\"#tcp_secret_two\">tcp_secret_two</a>;", 
"}", 
];
xr_frag_insert('l/4f/b06ac81f553331dfd9d2f2bdf132ba41d955a9.xr', __xr_tmp);
