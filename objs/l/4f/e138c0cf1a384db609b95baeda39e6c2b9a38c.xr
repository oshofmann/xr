var __xr_tmp = [
"<span class=\"comment\"> *<span class=\"ts\"/>as uevents.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_evt_thread\">scsi_evt_thread</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#event_list\">event_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a>, <a class=\"id\" href=\"#event_work\">event_work</a>);", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_event\">scsi_event</a> *<a class=\"id\" href=\"#evt\">evt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#this\">this</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_splice_init\">list_splice_init</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#event_list\">event_list</a>, &amp;<a class=\"id\" href=\"#event_list\">event_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#event_list\">event_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_safe\">list_for_each_safe</a>(<a class=\"id\" href=\"#this\">this</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#event_list\">event_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#evt\">evt</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#this\">this</a>, struct <a class=\"id\" href=\"#scsi_event\">scsi_event</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#evt\">evt</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_evt_emit\">scsi_evt_emit</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#evt\">evt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#evt\">evt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>sdev_evt_send - send asserted event to uevent thread</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sdev: scsi_device event occurred on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@evt: event to send</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Assert scsi device event asynchronously.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sdev_evt_send\">sdev_evt_send</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, struct <a class=\"id\" href=\"#scsi_event\">scsi_event</a> *<a class=\"id\" href=\"#evt\">evt</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"#if 0", 
"<span class=\"ts\"/><span class=\"comment\">/* FIXME: currently this check eliminates all media change events</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for polled devices.  Need to update to discriminate between AN</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and polled events */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#evt\">evt</a>-><a class=\"id\" href=\"#evt_type\">evt_type</a>, <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#supported_events\">supported_events</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#evt\">evt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#evt\">evt</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#event_list\">event_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#event_work\">event_work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sdev_evt_send\">sdev_evt_send</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>sdev_evt_alloc - allocate a new scsi event</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@evt_type: type of event to allocate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gfpflags: GFP flags for allocation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocates and returns a new scsi_event.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#scsi_event\">scsi_event</a> *<a class=\"id\" href=\"#sdev_evt_alloc\">sdev_evt_alloc</a>(enum <a class=\"id\" href=\"#scsi_device_event\">scsi_device_event</a> <a class=\"id\" href=\"#evt_type\">evt_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfpflags\">gfpflags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_event\">scsi_event</a> *<a class=\"id\" href=\"#evt\">evt</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#scsi_event\">scsi_event</a>), <a class=\"id\" href=\"#gfpflags\">gfpflags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#evt\">evt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#evt\">evt</a>-><a class=\"id\" href=\"#evt_type\">evt_type</a> = <a class=\"id\" href=\"#evt_type\">evt_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#evt\">evt</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* evt_type-specific initialization, if any */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#evt_type\">evt_type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_EVT_MEDIA_CHANGE\">SDEV_EVT_MEDIA_CHANGE</a>:", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* do nothing */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#evt\">evt</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sdev_evt_alloc\">sdev_evt_alloc</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>sdev_evt_send_simple - send asserted event to uevent thread</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sdev: scsi_device event occurred on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@evt_type: type of event to send</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gfpflags: GFP flags for allocation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Assert scsi device event asynchronously, given an event type.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sdev_evt_send_simple\">sdev_evt_send_simple</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  enum <a class=\"id\" href=\"#scsi_device_event\">scsi_device_event</a> <a class=\"id\" href=\"#evt_type\">evt_type</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfpflags\">gfpflags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_event\">scsi_event</a> *<a class=\"id\" href=\"#evt\">evt</a> = <a class=\"id\" href=\"#sdev_evt_alloc\">sdev_evt_alloc</a>(<a class=\"id\" href=\"#evt_type\">evt_type</a>, <a class=\"id\" href=\"#gfpflags\">gfpflags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#evt\">evt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#sdev\">sdev</a>, \"event %d eaten due to OOM\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#evt_type\">evt_type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev_evt_send\">sdev_evt_send</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#evt\">evt</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sdev_evt_send_simple\">sdev_evt_send_simple</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>scsi_device_quiesce - Block user issued commands.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sdev:<span class=\"ts\"/>scsi device to quiesce.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This works by trying to transition to the SDEV_QUIESCE state</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(which must be a legal transition).  When the device is in this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>state, only special requests will be accepted, all others will</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be deferred.  Since special requests may also be requeued requests,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a successful return doesn't guarantee the device will be </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>totally quiescent.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Must be called with user context, may sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns zero if unsuccessful or an error if not.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#scsi_device_quiesce\">scsi_device_quiesce</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#scsi_device_set_state\">scsi_device_set_state</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#SDEV_QUIESCE\">SDEV_QUIESCE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_run_queue\">scsi_run_queue</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#device_busy\">device_busy</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep_interruptible\">msleep_interruptible</a>(200);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_run_queue\">scsi_run_queue</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_device_quiesce\">scsi_device_quiesce</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>scsi_device_resume - Restart user issued commands to a quiesced device.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sdev:<span class=\"ts\"/>scsi device to resume.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Moves the device from quiesced back to running and restarts the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>queues.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Must be called with user context, may sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#scsi_device_resume\">scsi_device_resume</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#scsi_device_set_state\">scsi_device_set_state</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#SDEV_RUNNING\">SDEV_RUNNING</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_run_queue\">scsi_run_queue</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_device_resume\">scsi_device_resume</a>);", 
"", 
"static void", 
"<a class=\"id\" href=\"#device_quiesce_fn\">device_quiesce_fn</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_device_quiesce\">scsi_device_quiesce</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"}", 
"", 
"void", 
"<a class=\"id\" href=\"#scsi_target_quiesce\">scsi_target_quiesce</a>(struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget_for_each_device\">starget_for_each_device</a>(<a class=\"id\" href=\"#starget\">starget</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#device_quiesce_fn\">device_quiesce_fn</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_target_quiesce\">scsi_target_quiesce</a>);", 
"", 
"static void", 
"<a class=\"id\" href=\"#device_resume_fn\">device_resume_fn</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_device_resume\">scsi_device_resume</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"}", 
"", 
"void", 
"<a class=\"id\" href=\"#scsi_target_resume\">scsi_target_resume</a>(struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget_for_each_device\">starget_for_each_device</a>(<a class=\"id\" href=\"#starget\">starget</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#device_resume_fn\">device_resume_fn</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_target_resume\">scsi_target_resume</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_internal_device_block - internal function to put a device temporarily into the SDEV_BLOCK state</span>", 
"<span class=\"comment\"> * @sdev:<span class=\"ts\"/>device to block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Block request made by scsi lld's to temporarily stop all</span>", 
"<span class=\"comment\"> * scsi commands on the specified device.  Called from interrupt</span>", 
"<span class=\"comment\"> * or normal process context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns zero if successful or error if not</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:       </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This routine transitions the device to the SDEV_BLOCK state</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(which must be a legal transition).  When the device is in this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>state, all commands are deferred until the scsi lld reenables</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the device with scsi_device_unblock or device_block_tmo fires.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This routine assumes the host_lock is held on entry.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#scsi_internal_device_block\">scsi_internal_device_block</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#scsi_device_set_state\">scsi_device_set_state</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#SDEV_BLOCK\">SDEV_BLOCK</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#scsi_device_set_state\">scsi_device_set_state</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#SDEV_CREATED_BLOCK\">SDEV_CREATED_BLOCK</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The device has transitioned to SDEV_BLOCK.  Stop the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * block layer from calling the midlayer with this device's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * request queue. </span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_stop_queue\">blk_stop_queue</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#scsi_internal_device_block\">scsi_internal_device_block</a>);", 
" ", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_internal_device_unblock - resume a device after a block request</span>", 
"<span class=\"comment\"> * @sdev:<span class=\"ts\"/>device to resume</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called by scsi lld's or the midlayer to restart the device queue</span>", 
"<span class=\"comment\"> * for the previously suspended scsi device.  Called from interrupt or</span>", 
"<span class=\"comment\"> * normal process context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns zero if successful or error if not.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:       </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This routine transitions the device to the SDEV_RUNNING state</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(which must be a legal transition) allowing the midlayer to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>goose the queue for this device.  This routine assumes the </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>host_lock is held upon entry.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#scsi_internal_device_unblock\">scsi_internal_device_unblock</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>; ", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"comment\">/* </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Try to transition the scsi device to SDEV_RUNNING</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and goose the device queue if successful.  </span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_state\">sdev_state</a> == <a class=\"id\" href=\"#SDEV_BLOCK\">SDEV_BLOCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_state\">sdev_state</a> = <a class=\"id\" href=\"#SDEV_RUNNING\">SDEV_RUNNING</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_state\">sdev_state</a> == <a class=\"id\" href=\"#SDEV_CREATED_BLOCK\">SDEV_CREATED_BLOCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_state\">sdev_state</a> = <a class=\"id\" href=\"#SDEV_CREATED\">SDEV_CREATED</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_start_queue\">blk_start_queue</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#scsi_internal_device_unblock\">scsi_internal_device_unblock</a>);", 
"", 
"static void", 
"<a class=\"id\" href=\"#device_block\">device_block</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_internal_device_block\">scsi_internal_device_block</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#target_block\">target_block</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_is_target_device\">scsi_is_target_device</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#starget_for_each_device\">starget_for_each_device</a>(<a class=\"id\" href=\"#to_scsi_target\">to_scsi_target</a>(<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_block\">device_block</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void", 
"<a class=\"id\" href=\"#scsi_target_block\">scsi_target_block</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_is_target_device\">scsi_is_target_device</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#starget_for_each_device\">starget_for_each_device</a>(<a class=\"id\" href=\"#to_scsi_target\">to_scsi_target</a>(<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_block\">device_block</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_for_each_child\">device_for_each_child</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#target_block\">target_block</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#scsi_target_block\">scsi_target_block</a>);", 
"", 
"static void", 
"<a class=\"id\" href=\"#device_unblock\">device_unblock</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_internal_device_unblock\">scsi_internal_device_unblock</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#target_unblock\">target_unblock</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_is_target_device\">scsi_is_target_device</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#starget_for_each_device\">starget_for_each_device</a>(<a class=\"id\" href=\"#to_scsi_target\">to_scsi_target</a>(<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_unblock\">device_unblock</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void", 
"<a class=\"id\" href=\"#scsi_target_unblock\">scsi_target_unblock</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_is_target_device\">scsi_is_target_device</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#starget_for_each_device\">starget_for_each_device</a>(<a class=\"id\" href=\"#to_scsi_target\">to_scsi_target</a>(<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_unblock\">device_unblock</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_for_each_child\">device_for_each_child</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#target_unblock\">target_unblock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#scsi_target_unblock\">scsi_target_unblock</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_kmap_atomic_sg - find and atomically map an sg-elemnt</span>", 
"<span class=\"comment\"> * @sgl:<span class=\"ts\"/>scatter-gather list</span>", 
"<span class=\"comment\"> * @sg_count:<span class=\"ts\"/>number of segments in sg</span>", 
"<span class=\"comment\"> * @offset:<span class=\"ts\"/>offset in bytes into sg, on return offset into the mapped area</span>", 
"<span class=\"comment\"> * @len:<span class=\"ts\"/>bytes to map, on return number of bytes mapped</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns virtual address of the start of the mapped page</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#scsi_kmap_atomic_sg\">scsi_kmap_atomic_sg</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>, int <a class=\"id\" href=\"#sg_count\">sg_count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#sg_len\">sg_len</a> = 0, <a class=\"id\" href=\"#len_complete\">len_complete</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#sgl\">sgl</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#sg_count\">sg_count</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len_complete\">len_complete</a> = <a class=\"id\" href=\"#sg_len\">sg_len</a>; <span class=\"comment\">/* Complete sg-entries */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_len\">sg_len</a> += <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sg_len\">sg_len</a> &gt; *<a class=\"id\" href=\"#offset\">offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#sg_count\">sg_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: Bytes in sg: %zu, requested offset %zu, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"elements %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#sg_len\">sg_len</a>, *<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#sg_count\">sg_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Offset starting from the beginning of first page in this sg-entry */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#offset\">offset</a> = *<a class=\"id\" href=\"#offset\">offset</a> - <a class=\"id\" href=\"#len_complete\">len_complete</a> + <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Assumption: contiguous pages can be accessed as \"page + i\" */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#nth_page\">nth_page</a>(<a class=\"id\" href=\"#sg_page\">sg_page</a>(<a class=\"id\" href=\"#sg\">sg</a>), (*<a class=\"id\" href=\"#offset\">offset</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>));", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#offset\">offset</a> &= ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Bytes in this sg-entry from *offset to the end of the page */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg_len\">sg_len</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - *<a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#sg_len\">sg_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sg_len\">sg_len</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_BIO_SRC_IRQ\">KM_BIO_SRC_IRQ</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_kmap_atomic_sg\">scsi_kmap_atomic_sg</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_kunmap_atomic_sg - atomically unmap a virtual address, previously mapped with scsi_kmap_atomic_sg</span>", 
"<span class=\"comment\"> * @virt:<span class=\"ts\"/>virtual address to be unmapped</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_kunmap_atomic_sg\">scsi_kunmap_atomic_sg</a>(void *<a class=\"id\" href=\"#virt\">virt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#virt\">virt</a>, <a class=\"id\" href=\"#KM_BIO_SRC_IRQ\">KM_BIO_SRC_IRQ</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_kunmap_atomic_sg\">scsi_kunmap_atomic_sg</a>);", 
];
xr_frag_insert('l/4f/e138c0cf1a384db609b95baeda39e6c2b9a38c.xr', __xr_tmp);
