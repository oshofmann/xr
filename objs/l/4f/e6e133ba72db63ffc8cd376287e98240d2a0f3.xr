var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  bootmem - A boot-time physical memory allocator and configurator</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1999 Ingo Molnar</span>", 
"<span class=\"comment\"> *                1999 Kanoj Sarcar, SGI</span>", 
"<span class=\"comment\"> *                2008 Johannes Weiner</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Access to this subsystem has to be serialized externally (which is true</span>", 
"<span class=\"comment\"> * for the boot process anyway).</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pfn\">pfn</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmemleak\">kmemleak</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#range\">range</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#bug\">bug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"unsigned long <a class=\"id\" href=\"#max_low_pfn\">max_low_pfn</a>;", 
"unsigned long <a class=\"id\" href=\"#min_low_pfn\">min_low_pfn</a>;", 
"unsigned long <a class=\"id\" href=\"#max_pfn\">max_pfn</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CRASH_DUMP\">CONFIG_CRASH_DUMP</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If we have booted due to a crash, max_pfn will be a very low value. We need</span>", 
"<span class=\"comment\"> * to know the amount of memory that the previous kernel used.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#saved_max_pfn\">saved_max_pfn</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<a class=\"id\" href=\"#bootmem_data_t\">bootmem_data_t</a> <a class=\"id\" href=\"#bootmem_node_data\">bootmem_node_data</a>[<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"", 
"static struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#bdata_list\">bdata_list</a> <a class=\"id\" href=\"#__initdata\">__initdata</a> = <a class=\"id\" href=\"#LIST_HEAD_INIT\">LIST_HEAD_INIT</a>(<a class=\"id\" href=\"#bdata_list\">bdata_list</a>);", 
"", 
"static int <a class=\"id\" href=\"#bootmem_debug\">bootmem_debug</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#bootmem_debug_setup\">bootmem_debug_setup</a>(char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bootmem_debug\">bootmem_debug</a> = 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"bootmem_debug\", <a class=\"id\" href=\"#bootmem_debug_setup\">bootmem_debug_setup</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bdebug\">bdebug</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...) ({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#bootmem_debug\">bootmem_debug</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"bootmem::%s \" <a class=\"id\" href=\"#fmt\">fmt</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, ## <a class=\"id\" href=\"#args\">args</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"static unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#bootmap_bytes\">bootmap_bytes</a>(unsigned long <a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bytes\">bytes</a> = (<a class=\"id\" href=\"#pages\">pages</a> + 7) / 8;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#bytes\">bytes</a>, sizeof(long));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bootmem_bootmap_pages - calculate bitmap size in pages</span>", 
"<span class=\"comment\"> * @pages: number of pages the bitmap has to represent</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#bootmem_bootmap_pages\">bootmem_bootmap_pages</a>(unsigned long <a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#bootmap_bytes\">bootmap_bytes</a>(<a class=\"id\" href=\"#pages\">pages</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#bytes\">bytes</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * link bdata in order</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#link_bootmem\">link_bootmem</a>(<a class=\"id\" href=\"#bootmem_data_t\">bootmem_data_t</a> *<a class=\"id\" href=\"#bdata\">bdata</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each\">list_for_each</a>(<a class=\"id\" href=\"#iter\">iter</a>, &amp;<a class=\"id\" href=\"#bdata_list\">bdata_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bootmem_data_t\">bootmem_data_t</a> *<a class=\"id\" href=\"#ent\">ent</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#bootmem_data_t\">bootmem_data_t</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a> &lt; <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#iter\">iter</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called once to set up the allocator itself.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_bootmem_core\">init_bootmem_core</a>(<a class=\"id\" href=\"#bootmem_data_t\">bootmem_data_t</a> *<a class=\"id\" href=\"#bdata\">bdata</a>,", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mapstart\">mapstart</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mapsize\">mapsize</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mminit_validate_memmodel_limits\">mminit_validate_memmodel_limits</a>(&amp;<a class=\"id\" href=\"#start\">start</a>, &amp;<a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_bootmem_map\">node_bootmem_map</a> = <a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#PFN_PHYS\">PFN_PHYS</a>(<a class=\"id\" href=\"#mapstart\">mapstart</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_min_pfn\">node_min_pfn</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_low_pfn\">node_low_pfn</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link_bootmem\">link_bootmem</a>(<a class=\"id\" href=\"#bdata\">bdata</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Initially all pages are reserved - setup_arch() has to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * register free RAM areas explicitly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapsize\">mapsize</a> = <a class=\"id\" href=\"#bootmap_bytes\">bootmap_bytes</a>(<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#bdata\">bdata</a>-><a class=\"id\" href=\"#node_bootmem_map\">node_bootmem_map</a>, 0xff, <a class=\"id\" href=\"#mapsize\">mapsize</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdebug\">bdebug</a>(\"nid=%td start=%lx map=%lx end=%lx mapsize=%lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdata\">bdata</a> - <a class=\"id\" href=\"#bootmem_node_data\">bootmem_node_data</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#mapstart\">mapstart</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#mapsize\">mapsize</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mapsize\">mapsize</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * init_bootmem_node - register a node as boot memory</span>", 
"<span class=\"comment\"> * @pgdat: node to register</span>", 
"<span class=\"comment\"> * @freepfn: pfn where the bitmap for this node is to be placed</span>", 
"<span class=\"comment\"> * @startpfn: first pfn on the node</span>", 
"<span class=\"comment\"> * @endpfn: first pfn after the node</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the number of bytes needed to hold the bitmap for this node.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_bootmem_node\">init_bootmem_node</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>, unsigned long <a class=\"id\" href=\"#freepfn\">freepfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#startpfn\">startpfn</a>, unsigned long <a class=\"id\" href=\"#endpfn\">endpfn</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#init_bootmem_core\">init_bootmem_core</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#freepfn\">freepfn</a>, <a class=\"id\" href=\"#startpfn\">startpfn</a>, <a class=\"id\" href=\"#endpfn\">endpfn</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * init_bootmem - register boot memory</span>", 
"<span class=\"comment\"> * @start: pfn where the bitmap is to be placed</span>", 
"<span class=\"comment\"> * @pages: number of available physical pages</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the number of bytes needed to hold the bitmap.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_bootmem\">init_bootmem</a>(unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_low_pfn\">max_low_pfn</a> = <a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min_low_pfn\">min_low_pfn</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#init_bootmem_core\">init_bootmem_core</a>(<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(0)-><a class=\"id\" href=\"#bdata\">bdata</a>, <a class=\"id\" href=\"#start\">start</a>, 0, <a class=\"id\" href=\"#pages\">pages</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * free_bootmem_late - free bootmem pages directly to page allocator</span>", 
"<span class=\"comment\"> * @addr: starting address of the range</span>", 
"<span class=\"comment\"> * @size: size of the range in bytes</span>", 
"<span class=\"comment\"> *</span>", 
];
xr_frag_insert('l/4f/e6e133ba72db63ffc8cd376287e98240d2a0f3.xr', __xr_tmp);
