var __xr_tmp = [
"<span class=\"comment\">/*********************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Entropy extraction routines</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *********************************************************************/</span>", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#extract_entropy\">extract_entropy</a>(struct <a class=\"id\" href=\"#entropy_store\">entropy_store</a> *<a class=\"id\" href=\"#r\">r</a>, void *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>, int <a class=\"id\" href=\"#min\">min</a>, int <a class=\"id\" href=\"#rsvd\">rsvd</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This utility inline function is responsible for transfering entropy</span>", 
"<span class=\"comment\"> * from the primary pool to the secondary extraction pool. We make</span>", 
"<span class=\"comment\"> * sure we pull enough for a 'catastrophic reseed'.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#xfer_secondary_pool\">xfer_secondary_pool</a>(struct <a class=\"id\" href=\"#entropy_store\">entropy_store</a> *<a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#tmp\">tmp</a>[<a class=\"id\" href=\"#OUTPUT_POOL_WORDS\">OUTPUT_POOL_WORDS</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#pull\">pull</a> && <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#entropy_count\">entropy_count</a> &lt; <a class=\"id\" href=\"#nbytes\">nbytes</a> * 8 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#entropy_count\">entropy_count</a> &lt; <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#poolinfo\">poolinfo</a>-><a class=\"id\" href=\"#POOLBITS\">POOLBITS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we're limited, always leave two wakeup worth's BITS */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#rsvd\">rsvd</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#limit\">limit</a> ? 0 : <a class=\"id\" href=\"#random_read_wakeup_thresh\">random_read_wakeup_thresh</a>/4;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* pull at least as many as BYTES as wakeup BITS */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#max_t\">max_t</a>(int, <a class=\"id\" href=\"#bytes\">bytes</a>, <a class=\"id\" href=\"#random_read_wakeup_thresh\">random_read_wakeup_thresh</a> / 8);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* but never more than the buffer size */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(int, <a class=\"id\" href=\"#bytes\">bytes</a>, sizeof(<a class=\"id\" href=\"#tmp\">tmp</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_ENT\">DEBUG_ENT</a>(\"going to reseed %s with %d bits \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"(%d of %d requested)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#bytes\">bytes</a> * 8, <a class=\"id\" href=\"#nbytes\">nbytes</a> * 8, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#entropy_count\">entropy_count</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#extract_entropy\">extract_entropy</a>(<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#pull\">pull</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#bytes\">bytes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#random_read_wakeup_thresh\">random_read_wakeup_thresh</a> / 8, <a class=\"id\" href=\"#rsvd\">rsvd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mix_pool_bytes\">mix_pool_bytes</a>(<a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#bytes\">bytes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#credit_entropy_bits\">credit_entropy_bits</a>(<a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#bytes\">bytes</a>*8);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These functions extracts randomness from the \"entropy pool\", and</span>", 
"<span class=\"comment\"> * returns it in a buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The min parameter specifies the minimum amount we can pull before</span>", 
"<span class=\"comment\"> * failing to avoid races that defeat catastrophic reseeding while the</span>", 
"<span class=\"comment\"> * reserved parameter indicates how much entropy we must leave in the</span>", 
"<span class=\"comment\"> * pool after each pull to avoid starving other readers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: extract_entropy() assumes that .poolwords is a multiple of 16 words.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#account\">account</a>(struct <a class=\"id\" href=\"#entropy_store\">entropy_store</a> *<a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>, int <a class=\"id\" href=\"#min\">min</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#reserved\">reserved</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Hold lock while accounting */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#entropy_count\">entropy_count</a> &gt; <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#poolinfo\">poolinfo</a>-><a class=\"id\" href=\"#POOLBITS\">POOLBITS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_ENT\">DEBUG_ENT</a>(\"trying to extract %d bits from %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#nbytes\">nbytes</a> * 8, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Can we pull enough? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#entropy_count\">entropy_count</a> / 8 &lt; <a class=\"id\" href=\"#min\">min</a> + <a class=\"id\" href=\"#reserved\">reserved</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbytes\">nbytes</a> = 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If limited, never pull more than available */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#limit\">limit</a> && <a class=\"id\" href=\"#nbytes\">nbytes</a> + <a class=\"id\" href=\"#reserved\">reserved</a> >= <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#entropy_count\">entropy_count</a> / 8)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbytes\">nbytes</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#entropy_count\">entropy_count</a>/8 - <a class=\"id\" href=\"#reserved\">reserved</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#entropy_count\">entropy_count</a> / 8 >= <a class=\"id\" href=\"#nbytes\">nbytes</a> + <a class=\"id\" href=\"#reserved\">reserved</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#entropy_count\">entropy_count</a> -= <a class=\"id\" href=\"#nbytes\">nbytes</a>*8;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#entropy_count\">entropy_count</a> = <a class=\"id\" href=\"#reserved\">reserved</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#entropy_count\">entropy_count</a> &lt; <a class=\"id\" href=\"#random_write_wakeup_thresh\">random_write_wakeup_thresh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#random_write_wait\">random_write_wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_fasync\">kill_fasync</a>(&amp;<a class=\"id\" href=\"#fasync\">fasync</a>, <a class=\"id\" href=\"#SIGIO\">SIGIO</a>, <a class=\"id\" href=\"#POLL_OUT\">POLL_OUT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_ENT\">DEBUG_ENT</a>(\"debiting %d entropy credits from %s%s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#nbytes\">nbytes</a> * 8, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#limit\">limit</a> ? \"\" : \" (unlimited)\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#extract_buf\">extract_buf</a>(struct <a class=\"id\" href=\"#entropy_store\">entropy_store</a> *<a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#__u8\">__u8</a> *<a class=\"id\" href=\"#out\">out</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#hash\">hash</a>[5], <a class=\"id\" href=\"#workspace\">workspace</a>[<a class=\"id\" href=\"#SHA_WORKSPACE_WORDS\">SHA_WORKSPACE_WORDS</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#extract\">extract</a>[64];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Generate a hash across the pool, 16 words (512 bits) at a time */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sha_init\">sha_init</a>(<a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#poolinfo\">poolinfo</a>-><a class=\"id\" href=\"#poolwords\">poolwords</a>; <a class=\"id\" href=\"#i\">i</a> += 16)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sha_transform\">sha_transform</a>(<a class=\"id\" href=\"#hash\">hash</a>, (<a class=\"id\" href=\"#__u8\">__u8</a> *)(<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#pool\">pool</a> + <a class=\"id\" href=\"#i\">i</a>), <a class=\"id\" href=\"#workspace\">workspace</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We mix the hash back into the pool to prevent backtracking</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * attacks (where the attacker knows the state of the pool</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * plus the current outputs, and attempts to find previous</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ouputs), unless the hash function can be inverted. By</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mixing at least a SHA1 worth of hash data back, we make</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * brute-forcing the feedback as hard as brute-forcing the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hash.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mix_pool_bytes_extract\">mix_pool_bytes_extract</a>(<a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#hash\">hash</a>, sizeof(<a class=\"id\" href=\"#hash\">hash</a>), <a class=\"id\" href=\"#extract\">extract</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To avoid duplicates, we atomically extract a portion of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pool while mixing, and hash one final time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sha_transform\">sha_transform</a>(<a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#extract\">extract</a>, <a class=\"id\" href=\"#workspace\">workspace</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#extract\">extract</a>, 0, sizeof(<a class=\"id\" href=\"#extract\">extract</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#workspace\">workspace</a>, 0, sizeof(<a class=\"id\" href=\"#workspace\">workspace</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In case the hash function has some recognizable output</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pattern, we fold it in half. Thus, we always feed back</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * twice as much data as we output.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[0] ^= <a class=\"id\" href=\"#hash\">hash</a>[3];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[1] ^= <a class=\"id\" href=\"#hash\">hash</a>[4];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[2] ^= <a class=\"id\" href=\"#rol32\">rol32</a>(<a class=\"id\" href=\"#hash\">hash</a>[2], 16);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#EXTRACT_SIZE\">EXTRACT_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#hash\">hash</a>, 0, sizeof(<a class=\"id\" href=\"#hash\">hash</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#extract_entropy\">extract_entropy</a>(struct <a class=\"id\" href=\"#entropy_store\">entropy_store</a> *<a class=\"id\" href=\"#r\">r</a>, void *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>, int <a class=\"id\" href=\"#min\">min</a>, int <a class=\"id\" href=\"#reserved\">reserved</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#tmp\">tmp</a>[<a class=\"id\" href=\"#EXTRACT_SIZE\">EXTRACT_SIZE</a>];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xfer_secondary_pool\">xfer_secondary_pool</a>(<a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nbytes\">nbytes</a> = <a class=\"id\" href=\"#account\">account</a>(<a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#min\">min</a>, <a class=\"id\" href=\"#reserved\">reserved</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nbytes\">nbytes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#extract_buf\">extract_buf</a>(<a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fips_enabled\">fips_enabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#last_data\">last_data</a>, <a class=\"id\" href=\"#EXTRACT_SIZE\">EXTRACT_SIZE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Hardware RNG duplicated output!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#last_data\">last_data</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#EXTRACT_SIZE\">EXTRACT_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(int, <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#EXTRACT_SIZE\">EXTRACT_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbytes\">nbytes</a> -= <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wipe data just returned from memory */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, 0, sizeof(<a class=\"id\" href=\"#tmp\">tmp</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#extract_entropy_user\">extract_entropy_user</a>(struct <a class=\"id\" href=\"#entropy_store\">entropy_store</a> *<a class=\"id\" href=\"#r\">r</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#tmp\">tmp</a>[<a class=\"id\" href=\"#EXTRACT_SIZE\">EXTRACT_SIZE</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xfer_secondary_pool\">xfer_secondary_pool</a>(<a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nbytes\">nbytes</a> = <a class=\"id\" href=\"#account\">account</a>(<a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>, 0, 0);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nbytes\">nbytes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#need_resched\">need_resched</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#extract_buf\">extract_buf</a>(<a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(int, <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#EXTRACT_SIZE\">EXTRACT_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#i\">i</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbytes\">nbytes</a> -= <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wipe data just returned from memory */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, 0, sizeof(<a class=\"id\" href=\"#tmp\">tmp</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function is the exported kernel interface.  It returns some</span>", 
"<span class=\"comment\"> * number of good random numbers, suitable for seeding TCP sequence</span>", 
"<span class=\"comment\"> * numbers, etc.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#get_random_bytes\">get_random_bytes</a>(void *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#nbytes\">nbytes</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#extract_entropy\">extract_entropy</a>(&amp;<a class=\"id\" href=\"#nonblocking_pool\">nonblocking_pool</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>, 0, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#get_random_bytes\">get_random_bytes</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * init_std_data - initialize pool with system data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @r: pool to initialize</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function clears the pool's entropy count and mixes some system</span>", 
"<span class=\"comment\"> * data into the pool to prepare it for use. The pool is not cleared</span>", 
"<span class=\"comment\"> * as that can only decrease the entropy in the pool.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#init_std_data\">init_std_data</a>(struct <a class=\"id\" href=\"#entropy_store\">entropy_store</a> *<a class=\"id\" href=\"#r\">r</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#entropy_count\">entropy_count</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#ktime_get_real\">ktime_get_real</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mix_pool_bytes\">mix_pool_bytes</a>(<a class=\"id\" href=\"#r\">r</a>, &amp;<a class=\"id\" href=\"#now\">now</a>, sizeof(<a class=\"id\" href=\"#now\">now</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mix_pool_bytes\">mix_pool_bytes</a>(<a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#utsname\">utsname</a>(), sizeof(*(<a class=\"id\" href=\"#utsname\">utsname</a>())));", 
"}", 
"", 
"static int <a class=\"id\" href=\"#rand_initialize\">rand_initialize</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_std_data\">init_std_data</a>(&amp;<a class=\"id\" href=\"#input_pool\">input_pool</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_std_data\">init_std_data</a>(&amp;<a class=\"id\" href=\"#blocking_pool\">blocking_pool</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_std_data\">init_std_data</a>(&amp;<a class=\"id\" href=\"#nonblocking_pool\">nonblocking_pool</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#rand_initialize\">rand_initialize</a>);", 
"", 
"void <a class=\"id\" href=\"#rand_initialize_irq\">rand_initialize_irq</a>(int <a class=\"id\" href=\"#irq\">irq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_rand_state\">timer_rand_state</a> *<a class=\"id\" href=\"#state\">state</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#get_timer_rand_state\">get_timer_rand_state</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If kzalloc returns null, we just won't use that entropy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * source.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#timer_rand_state\">timer_rand_state</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_timer_rand_state\">set_timer_rand_state</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLOCK\">CONFIG_BLOCK</a>", 
"void <a class=\"id\" href=\"#rand_initialize_disk\">rand_initialize_disk</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_rand_state\">timer_rand_state</a> *<a class=\"id\" href=\"#state\">state</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If kzalloc returns null, we just won't use that entropy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * source.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#timer_rand_state\">timer_rand_state</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#random\">random</a> = <a class=\"id\" href=\"#state\">state</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#random_read\">random_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#retval\">retval</a> = 0, <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nbytes\">nbytes</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nbytes\">nbytes</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &gt; <a class=\"id\" href=\"#SEC_XFER_SIZE\">SEC_XFER_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#SEC_XFER_SIZE\">SEC_XFER_SIZE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_ENT\">DEBUG_ENT</a>(\"reading %d bits\\n\", <a class=\"id\" href=\"#n\">n</a>*8);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#extract_entropy_user\">extract_entropy_user</a>(&amp;<a class=\"id\" href=\"#blocking_pool\">blocking_pool</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_ENT\">DEBUG_ENT</a>(\"read got %d bits (%d still needed)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#n\">n</a>*8, (<a class=\"id\" href=\"#nbytes\">nbytes</a>-<a class=\"id\" href=\"#n\">n</a>)*8);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_ENT\">DEBUG_ENT</a>(\"sleeping?\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_event_interruptible\">wait_event_interruptible</a>(<a class=\"id\" href=\"#random_read_wait\">random_read_wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_pool\">input_pool</a>.<a class=\"id\" href=\"#entropy_count\">entropy_count</a> >=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#random_read_wakeup_thresh\">random_read_wakeup_thresh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_ENT\">DEBUG_ENT</a>(\"awake\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbytes\">nbytes</a> -= <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This break makes the device work */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* like a named pipe */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#count\">count</a> ? <a class=\"id\" href=\"#count\">count</a> : <a class=\"id\" href=\"#retval\">retval</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#urandom_read\">urandom_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#extract_entropy_user\">extract_entropy_user</a>(&amp;<a class=\"id\" href=\"#nonblocking_pool\">nonblocking_pool</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>);", 
"}", 
"", 
"static unsigned int", 
"<a class=\"id\" href=\"#random_poll\">random_poll</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#poll_table\">poll_table</a> * <a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#poll_wait\">poll_wait</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#random_read_wait\">random_read_wait</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#poll_wait\">poll_wait</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#random_write_wait\">random_write_wait</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#input_pool\">input_pool</a>.<a class=\"id\" href=\"#entropy_count\">entropy_count</a> >= <a class=\"id\" href=\"#random_read_wakeup_thresh\">random_read_wakeup_thresh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> |= <a class=\"id\" href=\"#POLLIN\">POLLIN</a> | <a class=\"id\" href=\"#POLLRDNORM\">POLLRDNORM</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#input_pool\">input_pool</a>.<a class=\"id\" href=\"#entropy_count\">entropy_count</a> &lt; <a class=\"id\" href=\"#random_write_wakeup_thresh\">random_write_wakeup_thresh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> |= <a class=\"id\" href=\"#POLLOUT\">POLLOUT</a> | <a class=\"id\" href=\"#POLLWRNORM\">POLLWRNORM</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mask\">mask</a>;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#write_pool\">write_pool</a>(struct <a class=\"id\" href=\"#entropy_store\">entropy_store</a> *<a class=\"id\" href=\"#r\">r</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#buf\">buf</a>[16];", 
"<span class=\"ts\"/>const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#count\">count</a>, sizeof(<a class=\"id\" href=\"#buf\">buf</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#bytes\">bytes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> -= <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mix_pool_bytes\">mix_pool_bytes</a>(<a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#bytes\">bytes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#random_write\">random_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#write_pool\">write_pool</a>(&amp;<a class=\"id\" href=\"#blocking_pool\">blocking_pool</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#write_pool\">write_pool</a>(&amp;<a class=\"id\" href=\"#nonblocking_pool\">nonblocking_pool</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ssize_t\">ssize_t</a>)<a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static long <a class=\"id\" href=\"#random_ioctl\">random_ioctl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#ent_count\">ent_count</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#p\">p</a> = (int <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RNDGETENTCNT\">RNDGETENTCNT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* inherently racy, no point locking */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#input_pool\">input_pool</a>.<a class=\"id\" href=\"#entropy_count\">entropy_count</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RNDADDTOENTCNT\">RNDADDTOENTCNT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#ent_count\">ent_count</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#credit_entropy_bits\">credit_entropy_bits</a>(&amp;<a class=\"id\" href=\"#input_pool\">input_pool</a>, <a class=\"id\" href=\"#ent_count\">ent_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RNDADDENTROPY\">RNDADDENTROPY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#ent_count\">ent_count</a>, <a class=\"id\" href=\"#p\">p</a>++))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ent_count\">ent_count</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#p\">p</a>++))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#write_pool\">write_pool</a>(&amp;<a class=\"id\" href=\"#input_pool\">input_pool</a>, (const char <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#credit_entropy_bits\">credit_entropy_bits</a>(&amp;<a class=\"id\" href=\"#input_pool\">input_pool</a>, <a class=\"id\" href=\"#ent_count\">ent_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RNDZAPENTCNT\">RNDZAPENTCNT</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RNDCLEARPOOL\">RNDCLEARPOOL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Clear the entropy pool counters. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rand_initialize\">rand_initialize</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#random_fasync\">random_fasync</a>(int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, int <a class=\"id\" href=\"#on\">on</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fasync_helper\">fasync_helper</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#on\">on</a>, &amp;<a class=\"id\" href=\"#fasync\">fasync</a>);", 
"}", 
"", 
"const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#random_fops\">random_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a>  = <a class=\"id\" href=\"#random_read\">random_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a> = <a class=\"id\" href=\"#random_write\">random_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#poll\">poll</a>  = <a class=\"id\" href=\"#random_poll\">random_poll</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unlocked_ioctl\">unlocked_ioctl</a> = <a class=\"id\" href=\"#random_ioctl\">random_ioctl</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fasync\">fasync</a> = <a class=\"id\" href=\"#random_fasync\">random_fasync</a>,", 
"};", 
"", 
"const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#urandom_fops\">urandom_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a>  = <a class=\"id\" href=\"#urandom_read\">urandom_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a> = <a class=\"id\" href=\"#random_write\">random_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unlocked_ioctl\">unlocked_ioctl</a> = <a class=\"id\" href=\"#random_ioctl\">random_ioctl</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fasync\">fasync</a> = <a class=\"id\" href=\"#random_fasync\">random_fasync</a>,", 
"};", 
"", 
"<span class=\"comment\">/***************************************************************</span>", 
"<span class=\"comment\"> * Random UUID interface</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Used here for a Boot ID, but can be useful for other kernel</span>", 
"<span class=\"comment\"> * drivers.</span>", 
"<span class=\"comment\"> ***************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generate random UUID</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#generate_random_uuid\">generate_random_uuid</a>(unsigned char <a class=\"id\" href=\"#uuid_out\">uuid_out</a>[16])", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_random_bytes\">get_random_bytes</a>(<a class=\"id\" href=\"#uuid_out\">uuid_out</a>, 16);", 
"<span class=\"ts\"/><span class=\"comment\">/* Set UUID version to 4 --- truly random generation */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uuid_out\">uuid_out</a>[6] = (<a class=\"id\" href=\"#uuid_out\">uuid_out</a>[6] &amp; 0x0F) | 0x40;", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the UUID variant to DCE */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uuid_out\">uuid_out</a>[8] = (<a class=\"id\" href=\"#uuid_out\">uuid_out</a>[8] &amp; 0x3F) | 0x80;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generate_random_uuid\">generate_random_uuid</a>);", 
"", 
"<span class=\"comment\">/********************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sysctl interface</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ********************************************************************/</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSCTL\">CONFIG_SYSCTL</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysctl\">sysctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static int <a class=\"id\" href=\"#min_read_thresh\">min_read_thresh</a> = 8, <a class=\"id\" href=\"#min_write_thresh\">min_write_thresh</a>;", 
"static int <a class=\"id\" href=\"#max_read_thresh\">max_read_thresh</a> = <a class=\"id\" href=\"#INPUT_POOL_WORDS\">INPUT_POOL_WORDS</a> * 32;", 
"static int <a class=\"id\" href=\"#max_write_thresh\">max_write_thresh</a> = <a class=\"id\" href=\"#INPUT_POOL_WORDS\">INPUT_POOL_WORDS</a> * 32;", 
"static char <a class=\"id\" href=\"#sysctl_bootid\">sysctl_bootid</a>[16];", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These functions is used to return both the bootid UUID, and random</span>", 
"<span class=\"comment\"> * UUID.  The difference is in whether table-&gt;data is NULL; if it is,</span>", 
"<span class=\"comment\"> * then a new UUID is generated and returned to the user.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the user accesses this via the proc interface, it will be returned</span>", 
"<span class=\"comment\"> * as an ASCII string in the standard UUID format.  If accesses via the</span>", 
"<span class=\"comment\"> * sysctl system call, it is returned as 16 bytes of binary data.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#proc_do_uuid\">proc_do_uuid</a>(<a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctl_table\">ctl_table</a> <a class=\"id\" href=\"#fake_table\">fake_table</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#buf\">buf</a>[64], <a class=\"id\" href=\"#tmp_uuid\">tmp_uuid</a>[16], *<a class=\"id\" href=\"#uuid\">uuid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uuid\">uuid</a> = <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#uuid\">uuid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uuid\">uuid</a> = <a class=\"id\" href=\"#tmp_uuid\">tmp_uuid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uuid\">uuid</a>[8] = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uuid\">uuid</a>[8] == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#generate_random_uuid\">generate_random_uuid</a>(<a class=\"id\" href=\"#uuid\">uuid</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%pU\", <a class=\"id\" href=\"#uuid\">uuid</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fake_table\">fake_table</a>.<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fake_table\">fake_table</a>.<a class=\"id\" href=\"#maxlen\">maxlen</a> = sizeof(<a class=\"id\" href=\"#buf\">buf</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#proc_dostring\">proc_dostring</a>(&amp;<a class=\"id\" href=\"#fake_table\">fake_table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sysctl_poolsize\">sysctl_poolsize</a> = <a class=\"id\" href=\"#INPUT_POOL_WORDS\">INPUT_POOL_WORDS</a> * 32;", 
"<a class=\"id\" href=\"#ctl_table\">ctl_table</a> <a class=\"id\" href=\"#random_table\">random_table</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"poolsize\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#sysctl_poolsize\">sysctl_poolsize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0444,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"entropy_avail\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0444,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#input_pool\">input_pool</a>.<a class=\"id\" href=\"#entropy_count\">entropy_count</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"read_wakeup_threshold\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#random_read_wakeup_thresh\">random_read_wakeup_thresh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra1\">extra1</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#min_read_thresh\">min_read_thresh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra2\">extra2</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#max_read_thresh\">max_read_thresh</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"write_wakeup_threshold\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#random_write_wakeup_thresh\">random_write_wakeup_thresh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra1\">extra1</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#min_write_thresh\">min_write_thresh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra2\">extra2</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#max_write_thresh\">max_write_thresh</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"boot_id\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#sysctl_bootid\">sysctl_bootid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= 16,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0444,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_do_uuid\">proc_do_uuid</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"uuid\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= 16,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0444,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_do_uuid\">proc_do_uuid</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{ }", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"ts\"/><span class=\"comment\">/* CONFIG_SYSCTL */</span>", 
"", 
"<span class=\"comment\">/********************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Random functions for networking</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ********************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * TCP initial sequence number picking.  This uses the random number</span>", 
"<span class=\"comment\"> * generator to pick an initial secret value.  This value is hashed</span>", 
"<span class=\"comment\"> * along with the TCP endpoint information to provide a unique</span>", 
"<span class=\"comment\"> * starting point for each pair of TCP endpoints.  This defeats</span>", 
"<span class=\"comment\"> * attacks which rely on guessing the initial TCP sequence number.</span>", 
"<span class=\"comment\"> * This algorithm was suggested by Steve Bellovin.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Using a very strong hash was taking an appreciable amount of the total</span>", 
"<span class=\"comment\"> * TCP connection establishment time, so this is a weaker hash,</span>", 
"<span class=\"comment\"> * compensated for by changing the secret periodically.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* F, G and H are basic MD4 functions: selection, majority, parity */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#F\">F</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>, <a class=\"id\" href=\"#z\">z</a>) ((<a class=\"id\" href=\"#z\">z</a>) ^ ((<a class=\"id\" href=\"#x\">x</a>) &amp; ((<a class=\"id\" href=\"#y\">y</a>) ^ (<a class=\"id\" href=\"#z\">z</a>))))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#G\">G</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>, <a class=\"id\" href=\"#z\">z</a>) (((<a class=\"id\" href=\"#x\">x</a>) &amp; (<a class=\"id\" href=\"#y\">y</a>)) + (((<a class=\"id\" href=\"#x\">x</a>) ^ (<a class=\"id\" href=\"#y\">y</a>)) &amp; (<a class=\"id\" href=\"#z\">z</a>)))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#H\">H</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>, <a class=\"id\" href=\"#z\">z</a>) ((<a class=\"id\" href=\"#x\">x</a>) ^ (<a class=\"id\" href=\"#y\">y</a>) ^ (<a class=\"id\" href=\"#z\">z</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The generic round function.  The application is so specific that</span>", 
"<span class=\"comment\"> * we don't bother protecting all the arguments with parens, as is generally</span>", 
"<span class=\"comment\"> * good macro practice, in favor of extra legibility.</span>", 
"<span class=\"comment\"> * Rotation is separate from addition to prevent recomputation</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#s\">s</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#a\">a</a> += <a class=\"id\" href=\"#f\">f</a>(<a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>) + <a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#a\">a</a> = (<a class=\"id\" href=\"#a\">a</a> << <a class=\"id\" href=\"#s\">s</a>) | (<a class=\"id\" href=\"#a\">a</a> >> (32 - <a class=\"id\" href=\"#s\">s</a>)))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#K1\">K1</a> 0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#K2\">K2</a> 013240474631UL", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#K3\">K3</a> 015666365641UL", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6\">CONFIG_IPV6</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6_MODULE\">CONFIG_IPV6_MODULE</a>)", 
"", 
"static <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#twothirdsMD4Transform\">twothirdsMD4Transform</a>(<a class=\"id\" href=\"#__u32\">__u32</a> const <a class=\"id\" href=\"#buf\">buf</a>[4], <a class=\"id\" href=\"#__u32\">__u32</a> const <a class=\"id\" href=\"#in\">in</a>[12])", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#a\">a</a> = <a class=\"id\" href=\"#buf\">buf</a>[0], <a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#buf\">buf</a>[1], <a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#buf\">buf</a>[2], <a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#buf\">buf</a>[3];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Round 1 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#F\">F</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#in\">in</a>[ 0] + <a class=\"id\" href=\"#K1\">K1</a>,  3);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#F\">F</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#in\">in</a>[ 1] + <a class=\"id\" href=\"#K1\">K1</a>,  7);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#F\">F</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#in\">in</a>[ 2] + <a class=\"id\" href=\"#K1\">K1</a>, 11);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#F\">F</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#in\">in</a>[ 3] + <a class=\"id\" href=\"#K1\">K1</a>, 19);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#F\">F</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#in\">in</a>[ 4] + <a class=\"id\" href=\"#K1\">K1</a>,  3);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#F\">F</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#in\">in</a>[ 5] + <a class=\"id\" href=\"#K1\">K1</a>,  7);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#F\">F</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#in\">in</a>[ 6] + <a class=\"id\" href=\"#K1\">K1</a>, 11);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#F\">F</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#in\">in</a>[ 7] + <a class=\"id\" href=\"#K1\">K1</a>, 19);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#F\">F</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#in\">in</a>[ 8] + <a class=\"id\" href=\"#K1\">K1</a>,  3);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#F\">F</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#in\">in</a>[ 9] + <a class=\"id\" href=\"#K1\">K1</a>,  7);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#F\">F</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#in\">in</a>[10] + <a class=\"id\" href=\"#K1\">K1</a>, 11);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#F\">F</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#in\">in</a>[11] + <a class=\"id\" href=\"#K1\">K1</a>, 19);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Round 2 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#G\">G</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#in\">in</a>[ 1] + <a class=\"id\" href=\"#K2\">K2</a>,  3);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#G\">G</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#in\">in</a>[ 3] + <a class=\"id\" href=\"#K2\">K2</a>,  5);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#G\">G</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#in\">in</a>[ 5] + <a class=\"id\" href=\"#K2\">K2</a>,  9);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#G\">G</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#in\">in</a>[ 7] + <a class=\"id\" href=\"#K2\">K2</a>, 13);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#G\">G</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#in\">in</a>[ 9] + <a class=\"id\" href=\"#K2\">K2</a>,  3);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#G\">G</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#in\">in</a>[11] + <a class=\"id\" href=\"#K2\">K2</a>,  5);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#G\">G</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#in\">in</a>[ 0] + <a class=\"id\" href=\"#K2\">K2</a>,  9);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#G\">G</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#in\">in</a>[ 2] + <a class=\"id\" href=\"#K2\">K2</a>, 13);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#G\">G</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#in\">in</a>[ 4] + <a class=\"id\" href=\"#K2\">K2</a>,  3);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#G\">G</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#in\">in</a>[ 6] + <a class=\"id\" href=\"#K2\">K2</a>,  5);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#G\">G</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#in\">in</a>[ 8] + <a class=\"id\" href=\"#K2\">K2</a>,  9);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#G\">G</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#in\">in</a>[10] + <a class=\"id\" href=\"#K2\">K2</a>, 13);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Round 3 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#H\">H</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#in\">in</a>[ 3] + <a class=\"id\" href=\"#K3\">K3</a>,  3);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#H\">H</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#in\">in</a>[ 7] + <a class=\"id\" href=\"#K3\">K3</a>,  9);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#H\">H</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#in\">in</a>[11] + <a class=\"id\" href=\"#K3\">K3</a>, 11);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#H\">H</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#in\">in</a>[ 2] + <a class=\"id\" href=\"#K3\">K3</a>, 15);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#H\">H</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#in\">in</a>[ 6] + <a class=\"id\" href=\"#K3\">K3</a>,  3);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#H\">H</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#in\">in</a>[10] + <a class=\"id\" href=\"#K3\">K3</a>,  9);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#H\">H</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#in\">in</a>[ 1] + <a class=\"id\" href=\"#K3\">K3</a>, 11);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#H\">H</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#in\">in</a>[ 5] + <a class=\"id\" href=\"#K3\">K3</a>, 15);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#H\">H</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#in\">in</a>[ 9] + <a class=\"id\" href=\"#K3\">K3</a>,  3);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#H\">H</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#in\">in</a>[ 0] + <a class=\"id\" href=\"#K3\">K3</a>,  9);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#H\">H</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#in\">in</a>[ 4] + <a class=\"id\" href=\"#K3\">K3</a>, 11);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ROUND\">ROUND</a>(<a class=\"id\" href=\"#H\">H</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#in\">in</a>[ 8] + <a class=\"id\" href=\"#K3\">K3</a>, 15);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a>[1] + <a class=\"id\" href=\"#b\">b</a>; <span class=\"comment\">/* \"most hashed\" word */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Alternative: return sum of all words? */</span>", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#ROUND\">ROUND</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#F\">F</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#G\">G</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#H\">H</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#K1\">K1</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#K2\">K2</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#K3\">K3</a>", 
"", 
"<span class=\"comment\">/* This should not be decreased so low that ISNs wrap too fast. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#REKEY_INTERVAL\">REKEY_INTERVAL</a> (300 * <a class=\"id\" href=\"#HZ\">HZ</a>)", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Bit layout of the tcp sequence numbers (before adding current time):</span>", 
"<span class=\"comment\"> * bit 24-31: increased after every key exchange</span>", 
"<span class=\"comment\"> * bit 0-23: hash(source,dest)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The implementation is similar to the algorithm described</span>", 
"<span class=\"comment\"> * in the Appendix of RFC 1185, except that</span>", 
"<span class=\"comment\"> * - it uses a 1 MHz clock instead of a 250 kHz clock</span>", 
"<span class=\"comment\"> * - it performs a rekey every 5 minutes, which is equivalent</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>to a (source,dest) tulple dependent forward jump of the</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>clock by 0..2^(HASH_BITS+1)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Thus the average ISN wraparound time is 68 minutes instead of</span>", 
"<span class=\"comment\"> * 4.55 hours.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SMP cleanup and lock avoidance with poor man's RCU.</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Manfred Spraul &lt;manfred@colorfullife.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#COUNT_BITS\">COUNT_BITS</a> 8", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#COUNT_MASK\">COUNT_MASK</a> ((1 << <a class=\"id\" href=\"#COUNT_BITS\">COUNT_BITS</a>) - 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HASH_BITS\">HASH_BITS</a> 24", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HASH_MASK\">HASH_MASK</a> ((1 << <a class=\"id\" href=\"#HASH_BITS\">HASH_BITS</a>) - 1)", 
"", 
"static struct <a class=\"id\" href=\"#keydata\">keydata</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#count\">count</a>; <span class=\"comment\">/* already shifted to the final position */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#secret\">secret</a>[12];", 
"} <a class=\"id\" href=\"#____cacheline_aligned\">____cacheline_aligned</a> <a class=\"id\" href=\"#ip_keydata\">ip_keydata</a>[2];", 
"", 
"static unsigned int <a class=\"id\" href=\"#ip_cnt\">ip_cnt</a>;", 
"", 
"static void <a class=\"id\" href=\"#rekey_seq_generator\">rekey_seq_generator</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"", 
"static <a class=\"id\" href=\"#DECLARE_DELAYED_WORK\">DECLARE_DELAYED_WORK</a>(<a class=\"id\" href=\"#rekey_work\">rekey_work</a>, <a class=\"id\" href=\"#rekey_seq_generator\">rekey_seq_generator</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Lock avoidance:</span>", 
"<span class=\"comment\"> * The ISN generation runs lockless - it's just a hash over random data.</span>", 
"<span class=\"comment\"> * State changes happen every 5 minutes when the random key is replaced.</span>", 
"<span class=\"comment\"> * Synchronization is performed by having two copies of the hash function</span>", 
"<span class=\"comment\"> * state and rekey_seq_generator always updates the inactive copy.</span>", 
"<span class=\"comment\"> * The copy is then activated by updating ip_cnt.</span>", 
"<span class=\"comment\"> * The implementation breaks down if someone blocks the thread</span>", 
"<span class=\"comment\"> * that processes SYN requests for more than 5 minutes. Should never</span>", 
"<span class=\"comment\"> * happen, and even if that happens only a not perfectly compliant</span>", 
"<span class=\"comment\"> * ISN is generated, nothing fatal.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rekey_seq_generator\">rekey_seq_generator</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keydata\">keydata</a> *<a class=\"id\" href=\"#keyptr\">keyptr</a> = &amp;<a class=\"id\" href=\"#ip_keydata\">ip_keydata</a>[1 ^ (<a class=\"id\" href=\"#ip_cnt\">ip_cnt</a> &amp; 1)];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_random_bytes\">get_random_bytes</a>(<a class=\"id\" href=\"#keyptr\">keyptr</a>-><a class=\"id\" href=\"#secret\">secret</a>, sizeof(<a class=\"id\" href=\"#keyptr\">keyptr</a>-><a class=\"id\" href=\"#secret\">secret</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#keyptr\">keyptr</a>-><a class=\"id\" href=\"#count\">count</a> = (<a class=\"id\" href=\"#ip_cnt\">ip_cnt</a> &amp; <a class=\"id\" href=\"#COUNT_MASK\">COUNT_MASK</a>) << <a class=\"id\" href=\"#HASH_BITS\">HASH_BITS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip_cnt\">ip_cnt</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_delayed_work\">schedule_delayed_work</a>(&amp;<a class=\"id\" href=\"#rekey_work\">rekey_work</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#round_jiffies_relative\">round_jiffies_relative</a>(<a class=\"id\" href=\"#REKEY_INTERVAL\">REKEY_INTERVAL</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#keydata\">keydata</a> *<a class=\"id\" href=\"#get_keyptr\">get_keyptr</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keydata\">keydata</a> *<a class=\"id\" href=\"#keyptr\">keyptr</a> = &amp;<a class=\"id\" href=\"#ip_keydata\">ip_keydata</a>[<a class=\"id\" href=\"#ip_cnt\">ip_cnt</a> &amp; 1];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#keyptr\">keyptr</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#seqgen_init\">seqgen_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rekey_seq_generator\">rekey_seq_generator</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#seqgen_init\">seqgen_init</a>);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6\">CONFIG_IPV6</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6_MODULE\">CONFIG_IPV6_MODULE</a>)", 
"<a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#secure_tcpv6_sequence_number\">secure_tcpv6_sequence_number</a>(<a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#daddr\">daddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#sport\">sport</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#dport\">dport</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#hash\">hash</a>[12];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keydata\">keydata</a> *<a class=\"id\" href=\"#keyptr\">keyptr</a> = <a class=\"id\" href=\"#get_keyptr\">get_keyptr</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The procedure is the same as for IPv4, but addresses are longer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Thus we must use twothirdsMD4Transform.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#saddr\">saddr</a>, 16);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[4] = ((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u16\">u16</a>)<a class=\"id\" href=\"#sport\">sport</a> << 16) + (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u16\">u16</a>)<a class=\"id\" href=\"#dport\">dport</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#hash\">hash</a>[5], <a class=\"id\" href=\"#keyptr\">keyptr</a>-><a class=\"id\" href=\"#secret\">secret</a>, sizeof(<a class=\"id\" href=\"#__u32\">__u32</a>) * 7);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#twothirdsMD4Transform\">twothirdsMD4Transform</a>((const <a class=\"id\" href=\"#__u32\">__u32</a> *)<a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#hash\">hash</a>) &amp; <a class=\"id\" href=\"#HASH_MASK\">HASH_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> += <a class=\"id\" href=\"#keyptr\">keyptr</a>-><a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> += <a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#ktime_get_real\">ktime_get_real</a>());", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq\">seq</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#secure_tcpv6_sequence_number\">secure_tcpv6_sequence_number</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*  The code below is shamelessly stolen from secure_tcp_sequence_number().</span>", 
"<span class=\"comment\"> *  All blames to Andrey V. Savochkin &lt;saw@msu.ru&gt;.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#secure_ip_id\">secure_ip_id</a>(<a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keydata\">keydata</a> *<a class=\"id\" href=\"#keyptr\">keyptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#hash\">hash</a>[4];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#keyptr\">keyptr</a> = <a class=\"id\" href=\"#get_keyptr\">get_keyptr</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  Pick a unique starting offset for each IP destination.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  The dest ip address is placed in the starting vector,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  which is then hashed with random data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[0] = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__u32\">__u32</a>)<a class=\"id\" href=\"#daddr\">daddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[1] = <a class=\"id\" href=\"#keyptr\">keyptr</a>-><a class=\"id\" href=\"#secret\">secret</a>[9];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[2] = <a class=\"id\" href=\"#keyptr\">keyptr</a>-><a class=\"id\" href=\"#secret\">secret</a>[10];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[3] = <a class=\"id\" href=\"#keyptr\">keyptr</a>-><a class=\"id\" href=\"#secret\">secret</a>[11];", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#half_md4_transform\">half_md4_transform</a>(<a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#keyptr\">keyptr</a>-><a class=\"id\" href=\"#secret\">secret</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_INET\">CONFIG_INET</a>", 
"", 
"<a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#secure_tcp_sequence_number\">secure_tcp_sequence_number</a>(<a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#sport\">sport</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#dport\">dport</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#hash\">hash</a>[4];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keydata\">keydata</a> *<a class=\"id\" href=\"#keyptr\">keyptr</a> = <a class=\"id\" href=\"#get_keyptr\">get_keyptr</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  Pick a unique starting offset for each TCP connection endpoints</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  (saddr, daddr, sport, dport).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  Note that the words are placed into the starting vector, which is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  then mixed with a partial MD4 over random data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[0] = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#saddr\">saddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[1] = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#daddr\">daddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[2] = ((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u16\">u16</a>)<a class=\"id\" href=\"#sport\">sport</a> << 16) + (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u16\">u16</a>)<a class=\"id\" href=\"#dport\">dport</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[3] = <a class=\"id\" href=\"#keyptr\">keyptr</a>-><a class=\"id\" href=\"#secret\">secret</a>[11];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#half_md4_transform\">half_md4_transform</a>(<a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#keyptr\">keyptr</a>-><a class=\"id\" href=\"#secret\">secret</a>) &amp; <a class=\"id\" href=\"#HASH_MASK\">HASH_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> += <a class=\"id\" href=\"#keyptr\">keyptr</a>-><a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>As close as possible to RFC 793, which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>suggests using a 250 kHz clock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Further reading shows this assumes 2 Mb/s networks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>For 10 Mb/s Ethernet, a 1 MHz clock is appropriate.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>For 10 Gb/s Ethernet, a 1 GHz clock should be ok, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>we also need to limit the resolution so that the u32 seq</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>overlaps less than one time per MSL (2 minutes).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Choosing a clock of 64 ns period is OK. (period of 274 s)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> += <a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#ktime_get_real\">ktime_get_real</a>()) >> 6;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq\">seq</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Generate secure starting point for ephemeral IPV4 transport port search */</span>", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secure_ipv4_port_ephemeral\">secure_ipv4_port_ephemeral</a>(<a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#dport\">dport</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keydata\">keydata</a> *<a class=\"id\" href=\"#keyptr\">keyptr</a> = <a class=\"id\" href=\"#get_keyptr\">get_keyptr</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hash\">hash</a>[4];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  Pick a unique starting offset for each ephemeral port search</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  (saddr, daddr, dport) and 48bits of random data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[0] = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#saddr\">saddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[1] = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#daddr\">daddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[2] = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#dport\">dport</a> ^ <a class=\"id\" href=\"#keyptr\">keyptr</a>-><a class=\"id\" href=\"#secret\">secret</a>[10];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[3] = <a class=\"id\" href=\"#keyptr\">keyptr</a>-><a class=\"id\" href=\"#secret\">secret</a>[11];", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#half_md4_transform\">half_md4_transform</a>(<a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#keyptr\">keyptr</a>-><a class=\"id\" href=\"#secret\">secret</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#secure_ipv4_port_ephemeral\">secure_ipv4_port_ephemeral</a>);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6\">CONFIG_IPV6</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6_MODULE\">CONFIG_IPV6_MODULE</a>)", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secure_ipv6_port_ephemeral\">secure_ipv6_port_ephemeral</a>(const <a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#saddr\">saddr</a>, const <a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#daddr\">daddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#dport\">dport</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keydata\">keydata</a> *<a class=\"id\" href=\"#keyptr\">keyptr</a> = <a class=\"id\" href=\"#get_keyptr\">get_keyptr</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hash\">hash</a>[12];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#saddr\">saddr</a>, 16);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[4] = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#dport\">dport</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#hash\">hash</a>[5], <a class=\"id\" href=\"#keyptr\">keyptr</a>-><a class=\"id\" href=\"#secret\">secret</a>, sizeof(<a class=\"id\" href=\"#__u32\">__u32</a>) * 7);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#twothirdsMD4Transform\">twothirdsMD4Transform</a>((const <a class=\"id\" href=\"#__u32\">__u32</a> *)<a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#hash\">hash</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IP_DCCP\">CONFIG_IP_DCCP</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IP_DCCP_MODULE\">CONFIG_IP_DCCP_MODULE</a>)", 
"<span class=\"comment\">/* Similar to secure_tcp_sequence_number but generate a 48 bit value</span>", 
"<span class=\"comment\"> * bit's 32-47 increase every key exchange</span>", 
"<span class=\"comment\"> *       0-31  hash(source, dest)</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#secure_dccp_sequence_number\">secure_dccp_sequence_number</a>(<a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#sport\">sport</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#dport\">dport</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#hash\">hash</a>[4];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keydata\">keydata</a> *<a class=\"id\" href=\"#keyptr\">keyptr</a> = <a class=\"id\" href=\"#get_keyptr\">get_keyptr</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[0] = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#saddr\">saddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[1] = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#daddr\">daddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[2] = ((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u16\">u16</a>)<a class=\"id\" href=\"#sport\">sport</a> << 16) + (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u16\">u16</a>)<a class=\"id\" href=\"#dport\">dport</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[3] = <a class=\"id\" href=\"#keyptr\">keyptr</a>-><a class=\"id\" href=\"#secret\">secret</a>[11];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#half_md4_transform\">half_md4_transform</a>(<a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#keyptr\">keyptr</a>-><a class=\"id\" href=\"#secret\">secret</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#keyptr\">keyptr</a>-><a class=\"id\" href=\"#count\">count</a>) << (32 - <a class=\"id\" href=\"#HASH_BITS\">HASH_BITS</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> += <a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#ktime_get_real\">ktime_get_real</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> &= (1ull << 48) - 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq\">seq</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#secure_dccp_sequence_number\">secure_dccp_sequence_number</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_INET */</span>", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get a random word for internal kernel use only. Similar to urandom but</span>", 
"<span class=\"comment\"> * with the goal of minimal entropy pool depletion. As a result, the random</span>", 
"<span class=\"comment\"> * value is not cryptographically secure but for several uses the cost of</span>", 
"<span class=\"comment\"> * depleting entropy is too high</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(<a class=\"id\" href=\"#__u32\">__u32</a> [4], <a class=\"id\" href=\"#get_random_int_hash\">get_random_int_hash</a>);", 
"unsigned int <a class=\"id\" href=\"#get_random_int\">get_random_int</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keydata\">keydata</a> *<a class=\"id\" href=\"#keyptr\">keyptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> *<a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#get_random_int_hash\">get_random_int_hash</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#keyptr\">keyptr</a> = <a class=\"id\" href=\"#get_keyptr\">get_keyptr</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>[0] += <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a> + <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#get_cycles\">get_cycles</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#half_md4_transform\">half_md4_transform</a>(<a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#keyptr\">keyptr</a>-><a class=\"id\" href=\"#secret\">secret</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#get_random_int_hash\">get_random_int_hash</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * randomize_range() returns a start address such that</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    [...... &lt;range&gt; .....]</span>", 
"<span class=\"comment\"> *  start                  end</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * a &lt;range&gt; with size \"len\" starting at the return value is inside in the</span>", 
"<span class=\"comment\"> * area defined by [start, end], but is otherwise randomized.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long", 
"<a class=\"id\" href=\"#randomize_range\">randomize_range</a>(unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#range\">range</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> <= <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#get_random_int\">get_random_int</a>() % <a class=\"id\" href=\"#range\">range</a> + <a class=\"id\" href=\"#start\">start</a>);", 
"}", 
];
xr_frag_insert('l/4f/ff0c1240f29dd511e9a70206f11d379e3b2ac2.xr', __xr_tmp);
