var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_graph_filter_enabled\">ftrace_graph_filter_enabled</a> = 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#ftrace_graph_write\">ftrace_graph_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#cnt\">cnt</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_parser\">trace_parser</a> <a class=\"id\" href=\"#parser\">parser</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#read\">read</a>, <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cnt\">cnt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#graph_lock\">graph_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#trace_parser_get_init\">trace_parser_get_init</a>(&amp;<a class=\"id\" href=\"#parser\">parser</a>, <a class=\"id\" href=\"#FTRACE_BUFF_MAX\">FTRACE_BUFF_MAX</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#trace_get_user\">trace_get_user</a>(&amp;<a class=\"id\" href=\"#parser\">parser</a>, <a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#cnt\">cnt</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read\">read</a> >= 0 && <a class=\"id\" href=\"#trace_parser_loaded\">trace_parser_loaded</a>((&amp;<a class=\"id\" href=\"#parser\">parser</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parser\">parser</a>.<a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#parser\">parser</a>.<a class=\"id\" href=\"#idx\">idx</a>] = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we allow only one expression at a time */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ftrace_set_func\">ftrace_set_func</a>(<a class=\"id\" href=\"#ftrace_graph_funcs\">ftrace_graph_funcs</a>, &amp;<a class=\"id\" href=\"#ftrace_graph_count\">ftrace_graph_count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parser\">parser</a>.<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#read\">read</a>;", 
"", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_parser_put\">trace_parser_put</a>(&amp;<a class=\"id\" href=\"#parser\">parser</a>);", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#graph_lock\">graph_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#ftrace_graph_fops\">ftrace_graph_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ftrace_graph_open\">ftrace_graph_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ftrace_graph_write\">ftrace_graph_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ftrace_graph_release\">ftrace_graph_release</a>,", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FUNCTION_GRAPH_TRACER */</span>", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#ftrace_init_dyn_debugfs\">ftrace_init_dyn_debugfs</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_tracer\">d_tracer</a>)", 
"{", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_create_file\">trace_create_file</a>(\"available_filter_functions\", 0444,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d_tracer\">d_tracer</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#ftrace_avail_fops\">ftrace_avail_fops</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_create_file\">trace_create_file</a>(\"failures\", 0444,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d_tracer\">d_tracer</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#ftrace_failures_fops\">ftrace_failures_fops</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_create_file\">trace_create_file</a>(\"set_ftrace_filter\", 0644, <a class=\"id\" href=\"#d_tracer\">d_tracer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#ftrace_filter_fops\">ftrace_filter_fops</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_create_file\">trace_create_file</a>(\"set_ftrace_notrace\", 0644, <a class=\"id\" href=\"#d_tracer\">d_tracer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#ftrace_notrace_fops\">ftrace_notrace_fops</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FUNCTION_GRAPH_TRACER\">CONFIG_FUNCTION_GRAPH_TRACER</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_create_file\">trace_create_file</a>(\"set_graph_function\", 0444, <a class=\"id\" href=\"#d_tracer\">d_tracer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#ftrace_graph_fops\">ftrace_graph_fops</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FUNCTION_GRAPH_TRACER */</span>", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ftrace_process_locs\">ftrace_process_locs</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long *<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long *<a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#p\">p</a> &lt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#ftrace_call_adjust\">ftrace_call_adjust</a>(*<a class=\"id\" href=\"#p\">p</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Some architecture linkers will pad between</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the different mcount_loc sections of different</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * object files to satisfy alignments.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Skip any NULL pointers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_record_ip\">ftrace_record_ip</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* disable interrupts to prevent kstop machine */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_update_code\">ftrace_update_code</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULES\">CONFIG_MODULES</a>", 
"void <a class=\"id\" href=\"#ftrace_release_mod\">ftrace_release_mod</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dyn_ftrace\">dyn_ftrace</a> *<a class=\"id\" href=\"#rec\">rec</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_page\">ftrace_page</a> *<a class=\"id\" href=\"#pg\">pg</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_disabled\">ftrace_disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_for_each_ftrace_rec\">do_for_each_ftrace_rec</a>(<a class=\"id\" href=\"#pg\">pg</a>, <a class=\"id\" href=\"#rec\">rec</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#within_module_core\">within_module_core</a>(<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#mod\">mod</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * rec-&gt;ip is changed in ftrace_free_rec()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * It should not between s and e if record was freed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FTRACE_WARN_ON\">FTRACE_WARN_ON</a>(<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_FL_FREE\">FTRACE_FL_FREE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_free_rec\">ftrace_free_rec</a>(<a class=\"id\" href=\"#rec\">rec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_for_each_ftrace_rec\">while_for_each_ftrace_rec</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ftrace_init_module\">ftrace_init_module</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long *<a class=\"id\" href=\"#start\">start</a>, unsigned long *<a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_disabled\">ftrace_disabled</a> || <a class=\"id\" href=\"#start\">start</a> == <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_process_locs\">ftrace_process_locs</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ftrace_module_notify\">ftrace_module_notify</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#val\">val</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MODULE_STATE_COMING\">MODULE_STATE_COMING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_init_module\">ftrace_init_module</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#ftrace_callsites\">ftrace_callsites</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#ftrace_callsites\">ftrace_callsites</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_ftrace_callsites\">num_ftrace_callsites</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MODULE_STATE_GOING\">MODULE_STATE_GOING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_release_mod\">ftrace_release_mod</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#else", 
"static int <a class=\"id\" href=\"#ftrace_module_notify\">ftrace_module_notify</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MODULES */</span>", 
"", 
"struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#ftrace_module_nb\">ftrace_module_nb</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#ftrace_module_notify\">ftrace_module_notify</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#priority\">priority</a> = 0,", 
"};", 
"", 
"extern unsigned long <a class=\"id\" href=\"#__start_mcount_loc\">__start_mcount_loc</a>[];", 
"extern unsigned long <a class=\"id\" href=\"#__stop_mcount_loc\">__stop_mcount_loc</a>[];", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ftrace_init\">ftrace_init</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Keep the ftrace pointer to the stub */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#ftrace_stub\">ftrace_stub</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_dyn_arch_init\">ftrace_dyn_arch_init</a>(&amp;<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ftrace_dyn_arch_init places the return code in addr */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed\">failed</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#__stop_mcount_loc\">__stop_mcount_loc</a> - <a class=\"id\" href=\"#__start_mcount_loc\">__start_mcount_loc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ftrace_dyn_table_alloc\">ftrace_dyn_table_alloc</a>(<a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed\">failed</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_ftrace_enabled\">last_ftrace_enabled</a> = <a class=\"id\" href=\"#ftrace_enabled\">ftrace_enabled</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ftrace_process_locs\">ftrace_process_locs</a>(<a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__start_mcount_loc\">__start_mcount_loc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__stop_mcount_loc\">__stop_mcount_loc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_module_notifier\">register_module_notifier</a>(&amp;<a class=\"id\" href=\"#ftrace_module_nb\">ftrace_module_nb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"Failed to register trace ftrace module notifier\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_ftrace_early_filters\">set_ftrace_early_filters</a>();", 
"", 
"<span class=\"ts\"/>return;", 
" <a class=\"id\" href=\"#failed\">failed</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_disabled\">ftrace_disabled</a> = 1;", 
"}", 
"", 
"#else", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ftrace_nodyn_init\">ftrace_nodyn_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_enabled\">ftrace_enabled</a> = 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#device_initcall\">device_initcall</a>(<a class=\"id\" href=\"#ftrace_nodyn_init\">ftrace_nodyn_init</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ftrace_init_dyn_debugfs\">ftrace_init_dyn_debugfs</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_tracer\">d_tracer</a>) { return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ftrace_startup_enable\">ftrace_startup_enable</a>(int <a class=\"id\" href=\"#command\">command</a>) { }", 
"<span class=\"comment\">/* Keep as macros so we do not need to define the commands */</span>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ftrace_startup\">ftrace_startup</a>(<a class=\"id\" href=\"#command\">command</a>)<span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ftrace_shutdown\">ftrace_shutdown</a>(<a class=\"id\" href=\"#command\">command</a>)<span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ftrace_startup_sysctl\">ftrace_startup_sysctl</a>()<span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ftrace_shutdown_sysctl\">ftrace_shutdown_sysctl</a>()<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_DYNAMIC_FTRACE */</span>", 
"", 
"static void <a class=\"id\" href=\"#clear_ftrace_swapper\">clear_ftrace_swapper</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#idle_task\">idle_task</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_tsk_trace_trace\">clear_tsk_trace_trace</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_ftrace_swapper\">set_ftrace_swapper</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#idle_task\">idle_task</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_trace_trace\">set_tsk_trace_trace</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#clear_ftrace_pid\">clear_ftrace_pid</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_each_pid_task\">do_each_pid_task</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>, <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_tsk_trace_trace\">clear_tsk_trace_trace</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_pid_task\">while_each_pid_task</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_pid\">put_pid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_ftrace_pid\">set_ftrace_pid</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_each_pid_task\">do_each_pid_task</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>, <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_trace_trace\">set_tsk_trace_trace</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_pid_task\">while_each_pid_task</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#clear_ftrace_pid_task\">clear_ftrace_pid_task</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> == <a class=\"id\" href=\"#ftrace_swapper_pid\">ftrace_swapper_pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_ftrace_swapper\">clear_ftrace_swapper</a>();", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_ftrace_pid\">clear_ftrace_pid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_ftrace_pid_task\">set_ftrace_pid_task</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> == <a class=\"id\" href=\"#ftrace_swapper_pid\">ftrace_swapper_pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_ftrace_swapper\">set_ftrace_swapper</a>();", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_ftrace_pid\">set_ftrace_pid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ftrace_pid_add\">ftrace_pid_add</a>(int <a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_pid\">ftrace_pid</a> *<a class=\"id\" href=\"#fpid\">fpid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#ftrace_swapper_pid\">ftrace_swapper_pid</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#find_get_pid\">find_get_pid</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pid\">pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#fpid\">fpid</a>, &amp;<a class=\"id\" href=\"#ftrace_pids\">ftrace_pids</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fpid\">fpid</a>-><a class=\"id\" href=\"#pid\">pid</a> == <a class=\"id\" href=\"#pid\">pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put\">out_put</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fpid\">fpid</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#fpid\">fpid</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fpid\">fpid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put\">out_put</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#fpid\">fpid</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#ftrace_pids\">ftrace_pids</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fpid\">fpid</a>-><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_ftrace_pid_task\">set_ftrace_pid_task</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_update_pid_func\">ftrace_update_pid_func</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_startup_enable\">ftrace_startup_enable</a>(0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_put\">out_put</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> != <a class=\"id\" href=\"#ftrace_swapper_pid\">ftrace_swapper_pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_pid\">put_pid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ftrace_pid_reset\">ftrace_pid_reset</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_pid\">ftrace_pid</a> *<a class=\"id\" href=\"#fpid\">fpid</a>, *<a class=\"id\" href=\"#safe\">safe</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#fpid\">fpid</a>, <a class=\"id\" href=\"#safe\">safe</a>, &amp;<a class=\"id\" href=\"#ftrace_pids\">ftrace_pids</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#fpid\">fpid</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_ftrace_pid_task\">clear_ftrace_pid_task</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#fpid\">fpid</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#fpid\">fpid</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_update_pid_func\">ftrace_update_pid_func</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_startup_enable\">ftrace_startup_enable</a>(0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#fpid_start\">fpid_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ftrace_pids\">ftrace_pids</a>) && (!*<a class=\"id\" href=\"#pos\">pos</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return (void *) 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_list_start\">seq_list_start</a>(&amp;<a class=\"id\" href=\"#ftrace_pids\">ftrace_pids</a>, *<a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#fpid_next\">fpid_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a> == (void *)1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_list_next\">seq_list_next</a>(<a class=\"id\" href=\"#v\">v</a>, &amp;<a class=\"id\" href=\"#ftrace_pids\">ftrace_pids</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fpid_stop\">fpid_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#fpid_show\">fpid_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ftrace_pid\">ftrace_pid</a> *<a class=\"id\" href=\"#fpid\">fpid</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#v\">v</a>, struct <a class=\"id\" href=\"#ftrace_pid\">ftrace_pid</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a> == (void *)1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"no pid\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fpid\">fpid</a>-><a class=\"id\" href=\"#pid\">pid</a> == <a class=\"id\" href=\"#ftrace_swapper_pid\">ftrace_swapper_pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"swapper tasks\\n\");", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%u\\n\", <a class=\"id\" href=\"#pid_vnr\">pid_vnr</a>(<a class=\"id\" href=\"#fpid\">fpid</a>-><a class=\"id\" href=\"#pid\">pid</a>));", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#ftrace_pid_sops\">ftrace_pid_sops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#fpid_start\">fpid_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#fpid_next\">fpid_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a> = <a class=\"id\" href=\"#fpid_stop\">fpid_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a> = <a class=\"id\" href=\"#fpid_show\">fpid_show</a>,", 
"};", 
"", 
"static int", 
"<a class=\"id\" href=\"#ftrace_pid_open\">ftrace_pid_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_TRUNC\">O_TRUNC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_pid_reset\">ftrace_pid_reset</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#ftrace_pid_sops\">ftrace_pid_sops</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#ftrace_pid_write\">ftrace_pid_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#cnt\">cnt</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[64], *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cnt\">cnt</a> >= sizeof(<a class=\"id\" href=\"#buf\">buf</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#cnt\">cnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#cnt\">cnt</a>] = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allow \"echo &gt; set_ftrace_pid\" or \"echo -n '' &gt; set_ftrace_pid\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to clean the filter quietly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#strstrip\">strstrip</a>(<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#tmp\">tmp</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#strict_strtol\">strict_strtol</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, 10, &amp;<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ftrace_pid_add\">ftrace_pid_add</a>(<a class=\"id\" href=\"#val\">val</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> ? <a class=\"id\" href=\"#ret\">ret</a> : <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ftrace_pid_release\">ftrace_pid_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_release\">seq_release</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#ftrace_pid_fops\">ftrace_pid_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ftrace_pid_open\">ftrace_pid_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ftrace_pid_write\">ftrace_pid_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ftrace_pid_release\">ftrace_pid_release</a>,", 
"};", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#ftrace_init_debugfs\">ftrace_init_debugfs</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_tracer\">d_tracer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d_tracer\">d_tracer</a> = <a class=\"id\" href=\"#tracing_init_dentry\">tracing_init_dentry</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#d_tracer\">d_tracer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_init_dyn_debugfs\">ftrace_init_dyn_debugfs</a>(<a class=\"id\" href=\"#d_tracer\">d_tracer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_create_file\">trace_create_file</a>(\"set_ftrace_pid\", 0644, <a class=\"id\" href=\"#d_tracer\">d_tracer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#ftrace_pid_fops\">ftrace_pid_fops</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_profile_debugfs\">ftrace_profile_debugfs</a>(<a class=\"id\" href=\"#d_tracer\">d_tracer</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#fs_initcall\">fs_initcall</a>(<a class=\"id\" href=\"#ftrace_init_debugfs\">ftrace_init_debugfs</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ftrace_kill - kill ftrace</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function should be used by panic code. It stops ftrace</span>", 
"<span class=\"comment\"> * but in a not so nice way. If you need to simply kill ftrace</span>", 
"<span class=\"comment\"> * from a non-atomic section, use ftrace_kill.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ftrace_kill\">ftrace_kill</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_disabled\">ftrace_disabled</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_enabled\">ftrace_enabled</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_ftrace_function\">clear_ftrace_function</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * register_ftrace_function - register a function for profiling</span>", 
"<span class=\"comment\"> * @ops - ops structure that holds the function for profiling.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Register a function to be called by all functions in the</span>", 
"<span class=\"comment\"> * kernel.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: @ops-&gt;func and all the functions it calls must be labeled</span>", 
"<span class=\"comment\"> *       with \"notrace\", otherwise it will go into a</span>", 
"<span class=\"comment\"> *       recursive loop.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#register_ftrace_function\">register_ftrace_function</a>(struct <a class=\"id\" href=\"#ftrace_ops\">ftrace_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ftrace_disabled\">ftrace_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__register_ftrace_function\">__register_ftrace_function</a>(<a class=\"id\" href=\"#ops\">ops</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_startup\">ftrace_startup</a>(0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * unregister_ftrace_function - unregister a function for profiling.</span>", 
"<span class=\"comment\"> * @ops - ops structure that holds the function to unregister</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unregister a function that was added to be called by ftrace profiling.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#unregister_ftrace_function\">unregister_ftrace_function</a>(struct <a class=\"id\" href=\"#ftrace_ops\">ftrace_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__unregister_ftrace_function\">__unregister_ftrace_function</a>(<a class=\"id\" href=\"#ops\">ops</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_shutdown\">ftrace_shutdown</a>(0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int", 
"<a class=\"id\" href=\"#ftrace_enable_sysctl\">ftrace_enable_sysctl</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ftrace_disabled\">ftrace_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>  = <a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> || !<a class=\"id\" href=\"#write\">write</a> || (<a class=\"id\" href=\"#last_ftrace_enabled\">last_ftrace_enabled</a> == !!<a class=\"id\" href=\"#ftrace_enabled\">ftrace_enabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_ftrace_enabled\">last_ftrace_enabled</a> = !!<a class=\"id\" href=\"#ftrace_enabled\">ftrace_enabled</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_enabled\">ftrace_enabled</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_startup_sysctl\">ftrace_startup_sysctl</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we are starting ftrace again */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_list\">ftrace_list</a> != &amp;<a class=\"id\" href=\"#ftrace_list_end\">ftrace_list_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_list\">ftrace_list</a>-><a class=\"id\" href=\"#next\">next</a> == &amp;<a class=\"id\" href=\"#ftrace_list_end\">ftrace_list_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_trace_function\">ftrace_trace_function</a> = <a class=\"id\" href=\"#ftrace_list\">ftrace_list</a>-><a class=\"id\" href=\"#func\">func</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_trace_function\">ftrace_trace_function</a> = <a class=\"id\" href=\"#ftrace_list_func\">ftrace_list_func</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* stopping ftrace calls (just send to ftrace_stub) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_trace_function\">ftrace_trace_function</a> = <a class=\"id\" href=\"#ftrace_stub\">ftrace_stub</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_shutdown_sysctl\">ftrace_shutdown_sysctl</a>();", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FUNCTION_GRAPH_TRACER\">CONFIG_FUNCTION_GRAPH_TRACER</a>", 
"", 
"static int <a class=\"id\" href=\"#ftrace_graph_active\">ftrace_graph_active</a>;", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#ftrace_suspend_notifier\">ftrace_suspend_notifier</a>;", 
"", 
"int <a class=\"id\" href=\"#ftrace_graph_entry_stub\">ftrace_graph_entry_stub</a>(struct <a class=\"id\" href=\"#ftrace_graph_ent\">ftrace_graph_ent</a> *<a class=\"id\" href=\"#trace\">trace</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* The callbacks that hook a function */</span>", 
"<a class=\"id\" href=\"#trace_func_graph_ret_t\">trace_func_graph_ret_t</a> <a class=\"id\" href=\"#ftrace_graph_return\">ftrace_graph_return</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#trace_func_graph_ret_t\">trace_func_graph_ret_t</a>)<a class=\"id\" href=\"#ftrace_stub\">ftrace_stub</a>;", 
"<a class=\"id\" href=\"#trace_func_graph_ent_t\">trace_func_graph_ent_t</a> <a class=\"id\" href=\"#ftrace_graph_entry\">ftrace_graph_entry</a> = <a class=\"id\" href=\"#ftrace_graph_entry_stub\">ftrace_graph_entry_stub</a>;", 
"", 
"<span class=\"comment\">/* Try to assign a return stack array on FTRACE_RETSTACK_ALLOC_SIZE tasks. */</span>", 
"static int <a class=\"id\" href=\"#alloc_retstack_tasklist\">alloc_retstack_tasklist</a>(struct <a class=\"id\" href=\"#ftrace_ret_stack\">ftrace_ret_stack</a> **<a class=\"id\" href=\"#ret_stack_list\">ret_stack_list</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#start\">start</a> = 0, <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#FTRACE_RETSTACK_ALLOC_SIZE\">FTRACE_RETSTACK_ALLOC_SIZE</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#g\">g</a>, *<a class=\"id\" href=\"#t\">t</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#FTRACE_RETSTACK_ALLOC_SIZE\">FTRACE_RETSTACK_ALLOC_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_stack_list\">ret_stack_list</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#FTRACE_RETFUNC_DEPTH\">FTRACE_RETFUNC_DEPTH</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>* sizeof(struct <a class=\"id\" href=\"#ftrace_ret_stack\">ftrace_ret_stack</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret_stack_list\">ret_stack_list</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free\">free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock_irqsave\">read_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_each_thread\">do_each_thread</a>(<a class=\"id\" href=\"#g\">g</a>, <a class=\"id\" href=\"#t\">t</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> == <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#tracing_graph_pause\">tracing_graph_pause</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#trace_overrun\">trace_overrun</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#curr_ret_stack\">curr_ret_stack</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make sure the tasks see the -1 first: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a> = <a class=\"id\" href=\"#ret_stack_list\">ret_stack_list</a>[<a class=\"id\" href=\"#start\">start</a>++];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#g\">g</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock_irqrestore\">read_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<a class=\"id\" href=\"#free\">free</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ret_stack_list\">ret_stack_list</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#ftrace_graph_probe_sched_switch\">ftrace_graph_probe_sched_switch</a>(void *<a class=\"id\" href=\"#ignore\">ignore</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#timestamp\">timestamp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Does the user want to count the time a function was asleep.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If so, do not update the time stamps.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#trace_flags\">trace_flags</a> &amp; <a class=\"id\" href=\"#TRACE_ITER_SLEEP_TIME\">TRACE_ITER_SLEEP_TIME</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timestamp\">timestamp</a> = <a class=\"id\" href=\"#trace_clock_local\">trace_clock_local</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#ftrace_timestamp\">ftrace_timestamp</a> = <a class=\"id\" href=\"#timestamp\">timestamp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* only process tasks that we timestamped */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#ftrace_timestamp\">ftrace_timestamp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Update all the counters in next to make up for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * time next was sleeping.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timestamp\">timestamp</a> -= <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#ftrace_timestamp\">ftrace_timestamp</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#curr_ret_stack\">curr_ret_stack</a>; <a class=\"id\" href=\"#index\">index</a> >= 0; <a class=\"id\" href=\"#index\">index</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a>[<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#calltime\">calltime</a> += <a class=\"id\" href=\"#timestamp\">timestamp</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Allocate a return stack for each task */</span>", 
"static int <a class=\"id\" href=\"#start_graph_tracing\">start_graph_tracing</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_ret_stack\">ftrace_ret_stack</a> **<a class=\"id\" href=\"#ret_stack_list\">ret_stack_list</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret_stack_list\">ret_stack_list</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#FTRACE_RETSTACK_ALLOC_SIZE\">FTRACE_RETSTACK_ALLOC_SIZE</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#ftrace_ret_stack\">ftrace_ret_stack</a> *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret_stack_list\">ret_stack_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The cpu_boot init_task-&gt;ret_stack will never be freed */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#idle_task\">idle_task</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#ret_stack\">ret_stack</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_graph_init_task\">ftrace_graph_init_task</a>(<a class=\"id\" href=\"#idle_task\">idle_task</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#alloc_retstack_tasklist\">alloc_retstack_tasklist</a>(<a class=\"id\" href=\"#ret_stack_list\">ret_stack_list</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_trace_sched_switch\">register_trace_sched_switch</a>(<a class=\"id\" href=\"#ftrace_graph_probe_sched_switch\">ftrace_graph_probe_sched_switch</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"ftrace_graph: Couldn't activate tracepoint\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" probe to kernel_sched_switch\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ret_stack_list\">ret_stack_list</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Hibernation protection.</span>", 
"<span class=\"comment\"> * The state of the current task is too much unstable during</span>", 
"<span class=\"comment\"> * suspend/restore to disk. We want to protect against that.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#ftrace_suspend_notifier_call\">ftrace_suspend_notifier_call</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#bl\">bl</a>, unsigned long <a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PM_HIBERNATION_PREPARE\">PM_HIBERNATION_PREPARE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pause_graph_tracing\">pause_graph_tracing</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PM_POST_HIBERNATION\">PM_POST_HIBERNATION</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unpause_graph_tracing\">unpause_graph_tracing</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#register_ftrace_graph\">register_ftrace_graph</a>(<a class=\"id\" href=\"#trace_func_graph_ret_t\">trace_func_graph_ret_t</a> <a class=\"id\" href=\"#retfunc\">retfunc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_func_graph_ent_t\">trace_func_graph_ent_t</a> <a class=\"id\" href=\"#entryfunc\">entryfunc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we currently allow only one tracer registered at a time */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_graph_active\">ftrace_graph_active</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_suspend_notifier\">ftrace_suspend_notifier</a>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#ftrace_suspend_notifier_call\">ftrace_suspend_notifier_call</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_pm_notifier\">register_pm_notifier</a>(&amp;<a class=\"id\" href=\"#ftrace_suspend_notifier\">ftrace_suspend_notifier</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_graph_active\">ftrace_graph_active</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#start_graph_tracing\">start_graph_tracing</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_graph_active\">ftrace_graph_active</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_graph_return\">ftrace_graph_return</a> = <a class=\"id\" href=\"#retfunc\">retfunc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_graph_entry\">ftrace_graph_entry</a> = <a class=\"id\" href=\"#entryfunc\">entryfunc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_startup\">ftrace_startup</a>(<a class=\"id\" href=\"#FTRACE_START_FUNC_RET\">FTRACE_START_FUNC_RET</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#unregister_ftrace_graph\">unregister_ftrace_graph</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#ftrace_graph_active\">ftrace_graph_active</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_graph_active\">ftrace_graph_active</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_graph_return\">ftrace_graph_return</a> = (<a class=\"id\" href=\"#trace_func_graph_ret_t\">trace_func_graph_ret_t</a>)<a class=\"id\" href=\"#ftrace_stub\">ftrace_stub</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_graph_entry\">ftrace_graph_entry</a> = <a class=\"id\" href=\"#ftrace_graph_entry_stub\">ftrace_graph_entry_stub</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_shutdown\">ftrace_shutdown</a>(<a class=\"id\" href=\"#FTRACE_STOP_FUNC_RET\">FTRACE_STOP_FUNC_RET</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_pm_notifier\">unregister_pm_notifier</a>(&amp;<a class=\"id\" href=\"#ftrace_suspend_notifier\">ftrace_suspend_notifier</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_trace_sched_switch\">unregister_trace_sched_switch</a>(<a class=\"id\" href=\"#ftrace_graph_probe_sched_switch\">ftrace_graph_probe_sched_switch</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Allocate a return stack for newly created task */</span>", 
"void <a class=\"id\" href=\"#ftrace_graph_init_task\">ftrace_graph_init_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure we do not use the parent ret_stack */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#curr_ret_stack\">curr_ret_stack</a> = -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_graph_active\">ftrace_graph_active</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_ret_stack\">ftrace_ret_stack</a> *<a class=\"id\" href=\"#ret_stack\">ret_stack</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_stack\">ret_stack</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#FTRACE_RETFUNC_DEPTH\">FTRACE_RETFUNC_DEPTH</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>* sizeof(struct <a class=\"id\" href=\"#ftrace_ret_stack\">ftrace_ret_stack</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret_stack\">ret_stack</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#tracing_graph_pause\">tracing_graph_pause</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#trace_overrun\">trace_overrun</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#ftrace_timestamp\">ftrace_timestamp</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* make curr_ret_stack visable before we add the ret_stack */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a> = <a class=\"id\" href=\"#ret_stack\">ret_stack</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#ftrace_graph_exit_task\">ftrace_graph_exit_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_ret_stack\">ftrace_ret_stack</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ret_stack\">ret_stack</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* NULL must become visible to IRQs before we free it: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ret_stack\">ret_stack</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#ftrace_graph_stop\">ftrace_graph_stop</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_stop\">ftrace_stop</a>();", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/50/4ce3a92322d55f24f48ff6ee2dc58187c3ee8b.xr', __xr_tmp);
