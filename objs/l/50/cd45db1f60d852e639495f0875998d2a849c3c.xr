var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/kernel/time/clocksource.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file contains the functions which manage clocksource drivers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2004, 2005 IBM, John Stultz (johnstul@us.ibm.com)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * TODO WishList:</span>", 
"<span class=\"comment\"> *   o Allow clocksource drivers to be unregistered</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#clocksource\">clocksource</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysdev\">sysdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* for spin_unlock_irq() using preempt_count() m68k */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tick\">tick</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kthread\">kthread</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"void <a class=\"id\" href=\"#timecounter_init\">timecounter_init</a>(struct <a class=\"id\" href=\"#timecounter\">timecounter</a> *<a class=\"id\" href=\"#tc\">tc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#cyclecounter\">cyclecounter</a> *<a class=\"id\" href=\"#cc\">cc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start_tstamp\">start_tstamp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tc\">tc</a>-><a class=\"id\" href=\"#cc\">cc</a> = <a class=\"id\" href=\"#cc\">cc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tc\">tc</a>-><a class=\"id\" href=\"#cycle_last\">cycle_last</a> = <a class=\"id\" href=\"#cc\">cc</a>-><a class=\"id\" href=\"#read\">read</a>(<a class=\"id\" href=\"#cc\">cc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tc\">tc</a>-><a class=\"id\" href=\"#nsec\">nsec</a> = <a class=\"id\" href=\"#start_tstamp\">start_tstamp</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#timecounter_init\">timecounter_init</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * timecounter_read_delta - get nanoseconds since last call of this function</span>", 
"<span class=\"comment\"> * @tc:         Pointer to time counter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When the underlying cycle counter runs over, this will be handled</span>", 
"<span class=\"comment\"> * correctly as long as it does not run over more than once between</span>", 
"<span class=\"comment\"> * calls.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The first call to this function for a new time counter initializes</span>", 
"<span class=\"comment\"> * the time tracking and returns an undefined result.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#timecounter_read_delta\">timecounter_read_delta</a>(struct <a class=\"id\" href=\"#timecounter\">timecounter</a> *<a class=\"id\" href=\"#tc\">tc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#cycle_now\">cycle_now</a>, <a class=\"id\" href=\"#cycle_delta\">cycle_delta</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ns_offset\">ns_offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* read cycle counter: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_now\">cycle_now</a> = <a class=\"id\" href=\"#tc\">tc</a>-><a class=\"id\" href=\"#cc\">cc</a>-><a class=\"id\" href=\"#read\">read</a>(<a class=\"id\" href=\"#tc\">tc</a>-><a class=\"id\" href=\"#cc\">cc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* calculate the delta since the last timecounter_read_delta(): */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_delta\">cycle_delta</a> = (<a class=\"id\" href=\"#cycle_now\">cycle_now</a> - <a class=\"id\" href=\"#tc\">tc</a>-><a class=\"id\" href=\"#cycle_last\">cycle_last</a>) &amp; <a class=\"id\" href=\"#tc\">tc</a>-><a class=\"id\" href=\"#cc\">cc</a>-><a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* convert to nanoseconds: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns_offset\">ns_offset</a> = <a class=\"id\" href=\"#cyclecounter_cyc2ns\">cyclecounter_cyc2ns</a>(<a class=\"id\" href=\"#tc\">tc</a>-><a class=\"id\" href=\"#cc\">cc</a>, <a class=\"id\" href=\"#cycle_delta\">cycle_delta</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* update time stamp of timecounter_read_delta() call: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tc\">tc</a>-><a class=\"id\" href=\"#cycle_last\">cycle_last</a> = <a class=\"id\" href=\"#cycle_now\">cycle_now</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ns_offset\">ns_offset</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#timecounter_read\">timecounter_read</a>(struct <a class=\"id\" href=\"#timecounter\">timecounter</a> *<a class=\"id\" href=\"#tc\">tc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#nsec\">nsec</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* increment time by nanoseconds since last call */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nsec\">nsec</a> = <a class=\"id\" href=\"#timecounter_read_delta\">timecounter_read_delta</a>(<a class=\"id\" href=\"#tc\">tc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nsec\">nsec</a> += <a class=\"id\" href=\"#tc\">tc</a>-><a class=\"id\" href=\"#nsec\">nsec</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tc\">tc</a>-><a class=\"id\" href=\"#nsec\">nsec</a> = <a class=\"id\" href=\"#nsec\">nsec</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nsec\">nsec</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#timecounter_read\">timecounter_read</a>);", 
"", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#timecounter_cyc2time\">timecounter_cyc2time</a>(struct <a class=\"id\" href=\"#timecounter\">timecounter</a> *<a class=\"id\" href=\"#tc\">tc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#cycle_tstamp\">cycle_tstamp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cycle_delta\">cycle_delta</a> = (<a class=\"id\" href=\"#cycle_tstamp\">cycle_tstamp</a> - <a class=\"id\" href=\"#tc\">tc</a>-><a class=\"id\" href=\"#cycle_last\">cycle_last</a>) &amp; <a class=\"id\" href=\"#tc\">tc</a>-><a class=\"id\" href=\"#cc\">cc</a>-><a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#nsec\">nsec</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Instead of always treating cycle_tstamp as more recent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * than tc-&gt;cycle_last, detect when it is too far in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * future and treat it as old time stamp instead.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cycle_delta\">cycle_delta</a> &gt; <a class=\"id\" href=\"#tc\">tc</a>-><a class=\"id\" href=\"#cc\">cc</a>-><a class=\"id\" href=\"#mask\">mask</a> / 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cycle_delta\">cycle_delta</a> = (<a class=\"id\" href=\"#tc\">tc</a>-><a class=\"id\" href=\"#cycle_last\">cycle_last</a> - <a class=\"id\" href=\"#cycle_tstamp\">cycle_tstamp</a>) &amp; <a class=\"id\" href=\"#tc\">tc</a>-><a class=\"id\" href=\"#cc\">cc</a>-><a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nsec\">nsec</a> = <a class=\"id\" href=\"#tc\">tc</a>-><a class=\"id\" href=\"#nsec\">nsec</a> - <a class=\"id\" href=\"#cyclecounter_cyc2ns\">cyclecounter_cyc2ns</a>(<a class=\"id\" href=\"#tc\">tc</a>-><a class=\"id\" href=\"#cc\">cc</a>, <a class=\"id\" href=\"#cycle_delta\">cycle_delta</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nsec\">nsec</a> = <a class=\"id\" href=\"#cyclecounter_cyc2ns\">cyclecounter_cyc2ns</a>(<a class=\"id\" href=\"#tc\">tc</a>-><a class=\"id\" href=\"#cc\">cc</a>, <a class=\"id\" href=\"#cycle_delta\">cycle_delta</a>) + <a class=\"id\" href=\"#tc\">tc</a>-><a class=\"id\" href=\"#nsec\">nsec</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nsec\">nsec</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#timecounter_cyc2time\">timecounter_cyc2time</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * clocks_calc_mult_shift - calculate mult/shift factors for scaled math of clocks</span>", 
"<span class=\"comment\"> * @mult:<span class=\"ts\"/>pointer to mult variable</span>", 
"<span class=\"comment\"> * @shift:<span class=\"ts\"/>pointer to shift variable</span>", 
"<span class=\"comment\"> * @from:<span class=\"ts\"/>frequency to convert from</span>", 
"<span class=\"comment\"> * @to:<span class=\"ts\"/><span class=\"ts\"/>frequency to convert to</span>", 
"<span class=\"comment\"> * @minsec:<span class=\"ts\"/>guaranteed runtime conversion range in seconds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function evaluates the shift/mult pair for the scaled math</span>", 
"<span class=\"comment\"> * operations of clocksources and clockevents.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @to and @from are frequency values in HZ. For clock sources @to is</span>", 
"<span class=\"comment\"> * NSEC_PER_SEC == 1GHz and @from is the counter frequency. For clock</span>", 
"<span class=\"comment\"> * event @to is the counter frequency and @from is NSEC_PER_SEC.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The @minsec conversion range argument controls the time frame in</span>", 
"<span class=\"comment\"> * seconds which must be covered by the runtime conversion with the</span>", 
"<span class=\"comment\"> * calculated mult and shift factors. This guarantees that no 64bit</span>", 
"<span class=\"comment\"> * overflow happens when the input value of the conversion is</span>", 
"<span class=\"comment\"> * multiplied with the calculated mult factor. Larger ranges may</span>", 
"<span class=\"comment\"> * reduce the conversion accuracy by chosing smaller mult and shift</span>", 
"<span class=\"comment\"> * factors.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#clocks_calc_mult_shift\">clocks_calc_mult_shift</a>(<a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#mult\">mult</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#shift\">shift</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#minsec\">minsec</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sft\">sft</a>, <a class=\"id\" href=\"#sftacc\">sftacc</a>= 32;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Calculate the shift factor which is limiting the conversion</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * range:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#minsec\">minsec</a> * <a class=\"id\" href=\"#from\">from</a>) >> 32;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> >>=1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sftacc\">sftacc</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Find the conversion shift/mult pair which has the best</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * accuracy and fits the maxsec conversion range:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#sft\">sft</a> = 32; <a class=\"id\" href=\"#sft\">sft</a> &gt; 0; <a class=\"id\" href=\"#sft\">sft</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = (<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#to\">to</a> << <a class=\"id\" href=\"#sft\">sft</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#from\">from</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#tmp\">tmp</a> >> <a class=\"id\" href=\"#sftacc\">sftacc</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#mult\">mult</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#shift\">shift</a> = <a class=\"id\" href=\"#sft\">sft</a>;", 
"}", 
"", 
"<span class=\"comment\">/*[Clocksource internal variables]---------</span>", 
"<span class=\"comment\"> * curr_clocksource:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>currently selected clocksource.</span>", 
"<span class=\"comment\"> * clocksource_list:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>linked list with the registered clocksources</span>", 
"<span class=\"comment\"> * clocksource_mutex:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>protects manipulations to curr_clocksource and the clocksource_list</span>", 
"<span class=\"comment\"> * override_name:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Name of the user-specified clocksource.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#curr_clocksource\">curr_clocksource</a>;", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#clocksource_list\">clocksource_list</a>);", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#clocksource_mutex\">clocksource_mutex</a>);", 
"static char <a class=\"id\" href=\"#override_name\">override_name</a>[32];", 
"static int <a class=\"id\" href=\"#finished_booting\">finished_booting</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CLOCKSOURCE_WATCHDOG\">CONFIG_CLOCKSOURCE_WATCHDOG</a>", 
"static void <a class=\"id\" href=\"#clocksource_watchdog_work\">clocksource_watchdog_work</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#watchdog_list\">watchdog_list</a>);", 
"static struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#watchdog\">watchdog</a>;", 
"static struct <a class=\"id\" href=\"#timer_list\">timer_list</a> <a class=\"id\" href=\"#watchdog_timer\">watchdog_timer</a>;", 
"static <a class=\"id\" href=\"#DECLARE_WORK\">DECLARE_WORK</a>(<a class=\"id\" href=\"#watchdog_work\">watchdog_work</a>, <a class=\"id\" href=\"#clocksource_watchdog_work\">clocksource_watchdog_work</a>);", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#watchdog_lock\">watchdog_lock</a>);", 
"static <a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#watchdog_last\">watchdog_last</a>;", 
"static int <a class=\"id\" href=\"#watchdog_running\">watchdog_running</a>;", 
"", 
"static int <a class=\"id\" href=\"#clocksource_watchdog_kthread\">clocksource_watchdog_kthread</a>(void *<a class=\"id\" href=\"#data\">data</a>);", 
"static void <a class=\"id\" href=\"#__clocksource_change_rating\">__clocksource_change_rating</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>, int <a class=\"id\" href=\"#rating\">rating</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Interval: 0.5sec Threshold: 0.0625s</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WATCHDOG_INTERVAL\">WATCHDOG_INTERVAL</a> (<a class=\"id\" href=\"#HZ\">HZ</a> >> 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WATCHDOG_THRESHOLD\">WATCHDOG_THRESHOLD</a> (<a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> >> 4)", 
"", 
"static void <a class=\"id\" href=\"#clocksource_watchdog_work\">clocksource_watchdog_work</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If kthread_run fails the next watchdog scan over the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * watchdog_list will find the unstable clock again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kthread_run\">kthread_run</a>(<a class=\"id\" href=\"#clocksource_watchdog_kthread\">clocksource_watchdog_kthread</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"kwatchdog\");", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__clocksource_unstable\">__clocksource_unstable</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~(<a class=\"id\" href=\"#CLOCK_SOURCE_VALID_FOR_HRES\">CLOCK_SOURCE_VALID_FOR_HRES</a> | <a class=\"id\" href=\"#CLOCK_SOURCE_WATCHDOG\">CLOCK_SOURCE_WATCHDOG</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CLOCK_SOURCE_UNSTABLE\">CLOCK_SOURCE_UNSTABLE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#finished_booting\">finished_booting</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#watchdog_work\">watchdog_work</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#clocksource_unstable\">clocksource_unstable</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#int64_t\">int64_t</a> <a class=\"id\" href=\"#delta\">delta</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Clocksource %s unstable (delta = %Ld ns)\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#delta\">delta</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__clocksource_unstable\">__clocksource_unstable</a>(<a class=\"id\" href=\"#cs\">cs</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * clocksource_mark_unstable - mark clocksource unstable via watchdog</span>", 
"<span class=\"comment\"> * @cs:<span class=\"ts\"/><span class=\"ts\"/>clocksource to be marked unstable</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called instead of clocksource_change_rating from</span>", 
"<span class=\"comment\"> * cpu hotplug code to avoid a deadlock between the clocksource mutex</span>", 
];
xr_frag_insert('l/50/cd45db1f60d852e639495f0875998d2a849c3c.xr', __xr_tmp);
