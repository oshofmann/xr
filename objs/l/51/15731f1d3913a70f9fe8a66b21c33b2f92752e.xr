var __xr_tmp = [
"<span class=\"ts\"/><span class=\"comment\">/* Len */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_len\">bp_len</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#HW_BREAKPOINT_LEN_1\">HW_BREAKPOINT_LEN_1</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_1\">X86_BREAKPOINT_LEN_1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#HW_BREAKPOINT_LEN_2\">HW_BREAKPOINT_LEN_2</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_2\">X86_BREAKPOINT_LEN_2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#HW_BREAKPOINT_LEN_4\">HW_BREAKPOINT_LEN_4</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_4\">X86_BREAKPOINT_LEN_4</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#HW_BREAKPOINT_LEN_8\">HW_BREAKPOINT_LEN_8</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_8\">X86_BREAKPOINT_LEN_8</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Validate the arch-specific HW Breakpoint register settings</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#arch_validate_hwbkpt_settings\">arch_validate_hwbkpt_settings</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#arch_hw_breakpoint\">arch_hw_breakpoint</a> *<a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#counter_arch_bp\">counter_arch_bp</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#align\">align</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#arch_build_bp_info\">arch_build_bp_info</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_1\">X86_BREAKPOINT_LEN_1</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#align\">align</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_2\">X86_BREAKPOINT_LEN_2</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#align\">align</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_4\">X86_BREAKPOINT_LEN_4</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#align\">align</a> = 3;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_8\">X86_BREAKPOINT_LEN_8</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#align\">align</a> = 7;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check that the low-order bits of the address are appropriate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for the alignment implied by len.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#address\">address</a> &amp; <a class=\"id\" href=\"#align\">align</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Dump the debug register contents to the user.</span>", 
"<span class=\"comment\"> * We can't dump our per cpu values because it</span>", 
"<span class=\"comment\"> * may contain cpu wide breakpoint, something that</span>", 
"<span class=\"comment\"> * doesn't belong to the current task.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * TODO: include non-ptrace user breakpoints (perf)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#aout_dump_debugregs\">aout_dump_debugregs</a>(struct <a class=\"id\" href=\"#user\">user</a> *<a class=\"id\" href=\"#dump\">dump</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dr7\">dr7</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#arch_hw_breakpoint\">arch_hw_breakpoint</a> *<a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> *<a class=\"id\" href=\"#thread\">thread</a> = &amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#thread\">thread</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a> = <a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#ptrace_bps\">ptrace_bps</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bp\">bp</a> && !<a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#disabled\">disabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump\">dump</a>-><a class=\"id\" href=\"#u_debugreg\">u_debugreg</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_addr\">bp_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#counter_arch_bp\">counter_arch_bp</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dr7\">dr7</a> |= <a class=\"id\" href=\"#encode_dr7\">encode_dr7</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump\">dump</a>-><a class=\"id\" href=\"#u_debugreg\">u_debugreg</a>[<a class=\"id\" href=\"#i\">i</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump\">dump</a>-><a class=\"id\" href=\"#u_debugreg\">u_debugreg</a>[4] = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump\">dump</a>-><a class=\"id\" href=\"#u_debugreg\">u_debugreg</a>[5] = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump\">dump</a>-><a class=\"id\" href=\"#u_debugreg\">u_debugreg</a>[6] = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#debugreg6\">debugreg6</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump\">dump</a>-><a class=\"id\" href=\"#u_debugreg\">u_debugreg</a>[7] = <a class=\"id\" href=\"#dr7\">dr7</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#aout_dump_debugregs\">aout_dump_debugregs</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Release the user breakpoints used by ptrace</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#flush_ptrace_hw_breakpoint\">flush_ptrace_hw_breakpoint</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> *<a class=\"id\" href=\"#t\">t</a> = &amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_hw_breakpoint\">unregister_hw_breakpoint</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#ptrace_bps\">ptrace_bps</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#ptrace_bps\">ptrace_bps</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#hw_breakpoint_restore\">hw_breakpoint_restore</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_debugreg\">cpu_debugreg</a>[0]), 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_debugreg\">cpu_debugreg</a>[1]), 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_debugreg\">cpu_debugreg</a>[2]), 2);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_debugreg\">cpu_debugreg</a>[3]), 3);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#debugreg6\">debugreg6</a>, 6);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_dr7\">cpu_dr7</a>), 7);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hw_breakpoint_restore\">hw_breakpoint_restore</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle debug exception notifications.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return value is either NOTIFY_STOP or NOTIFY_DONE as explained below.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTIFY_DONE returned if one of the following conditions is true.</span>", 
"<span class=\"comment\"> * i) When the causative address is from user-space and the exception</span>", 
"<span class=\"comment\"> * is a valid one, i.e. not triggered as a result of lazy debug register</span>", 
"<span class=\"comment\"> * switching</span>", 
"<span class=\"comment\"> * ii) When there are more bits than trap&lt;n&gt; set in DR6 register (such</span>", 
"<span class=\"comment\"> * as BD, BS or BT) indicating that more than one debug condition is</span>", 
"<span class=\"comment\"> * met and requires some more action in do_debug().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTIFY_STOP returned for all other cases</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#hw_breakpoint_handler\">hw_breakpoint_handler</a>(struct <a class=\"id\" href=\"#die_args\">die_args</a> *<a class=\"id\" href=\"#args\">args</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dr7\">dr7</a>, <a class=\"id\" href=\"#dr6\">dr6</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#dr6_p\">dr6_p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The DR6 value is pointed by args-&gt;err */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr6_p\">dr6_p</a> = (unsigned long *)<a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr6\">dr6</a> = *<a class=\"id\" href=\"#dr6_p\">dr6_p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do an early return if no trap bits are set in DR6 */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dr6\">dr6</a> &amp; <a class=\"id\" href=\"#DR_TRAP_BITS\">DR_TRAP_BITS</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_debugreg\">get_debugreg</a>(<a class=\"id\" href=\"#dr7\">dr7</a>, 7);", 
"<span class=\"ts\"/><span class=\"comment\">/* Disable breakpoints during exception handling */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(0UL, 7);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Assert that local interrupts are disabled</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reset the DRn bits in the virtualized register value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The ptrace trigger routine will add in whatever is needed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#debugreg6\">debugreg6</a> &= ~<a class=\"id\" href=\"#DR_TRAP_BITS\">DR_TRAP_BITS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#get_cpu\">get_cpu</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Handle all the breakpoints that were triggered */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!(<a class=\"id\" href=\"#dr6\">dr6</a> &amp; (<a class=\"id\" href=\"#DR_TRAP0\">DR_TRAP0</a> << <a class=\"id\" href=\"#i\">i</a>))))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The counter may be concurrently released but that can only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * occur from a call_rcu() path. We can then safely fetch</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the breakpoint, use its callback, touch its counter</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * while we are in an rcu_read_lock() path.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#bp_per_reg\">bp_per_reg</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Reset the 'i'th TRAP bit in dr6 to denote completion of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * exception handling</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#dr6_p\">dr6_p</a>) &= ~(<a class=\"id\" href=\"#DR_TRAP0\">DR_TRAP0</a> << <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * bp can be NULL due to lazy debug register switching</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * or due to concurrent perf counter removing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bp\">bp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_bp_event\">perf_bp_event</a>(<a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Set up resume flag to avoid breakpoint recursion when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * returning back to origin.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#X86_BREAKPOINT_EXECUTE\">X86_BREAKPOINT_EXECUTE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#X86_EFLAGS_RF\">X86_EFLAGS_RF</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Further processing in do_debug() is needed for a) user-space</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * breakpoints (to generate signals) and b) when the system has</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * taken exception due to multiple causes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#debugreg6\">debugreg6</a> &amp; <a class=\"id\" href=\"#DR_TRAP_BITS\">DR_TRAP_BITS</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#dr6\">dr6</a> &amp; (~<a class=\"id\" href=\"#DR_TRAP_BITS\">DR_TRAP_BITS</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(<a class=\"id\" href=\"#dr7\">dr7</a>, 7);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle debug exception notifications.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#hw_breakpoint_exceptions_notify\">hw_breakpoint_exceptions_notify</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#unused\">unused</a>, unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> != <a class=\"id\" href=\"#DIE_DEBUG\">DIE_DEBUG</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hw_breakpoint_handler\">hw_breakpoint_handler</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#hw_breakpoint_pmu_read\">hw_breakpoint_pmu_read</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* TODO */</span>", 
"}", 
];
xr_frag_insert('l/51/15731f1d3913a70f9fe8a66b21c33b2f92752e.xr', __xr_tmp);
