var __xr_tmp = [
"<span class=\"comment\">/* Virtio ring implementation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright 2007 Rusty Russell IBM Corporation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *  it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *  the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> *  (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> *  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> *  GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> *  along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#virtio\">virtio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#virtio_ring\">virtio_ring</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#virtio_config\">virtio_config</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* virtio guest is communicating with a virtual \"device\" that actually runs on</span>", 
"<span class=\"comment\"> * a host processor.  Memory barriers are used to control SMP effects. */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"comment\">/* Where possible, use SMP barriers which are more lightweight than mandatory</span>", 
"<span class=\"comment\"> * barriers, because mandatory barriers control MMIO effects on accesses</span>", 
"<span class=\"comment\"> * through relaxed memory I/O windows (which virtio does not use). */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#virtio_mb\">virtio_mb</a>() <a class=\"id\" href=\"#smp_mb\">smp_mb</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#virtio_rmb\">virtio_rmb</a>() <a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#virtio_wmb\">virtio_wmb</a>() <a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>()", 
"#else", 
"<span class=\"comment\">/* We must force memory ordering even if guest is UP since host could be</span>", 
"<span class=\"comment\"> * running on another CPU, but SMP barriers are defined to barrier() in that</span>", 
"<span class=\"comment\"> * configuration. So fall back to mandatory barriers instead. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#virtio_mb\">virtio_mb</a>() <a class=\"id\" href=\"#mb\">mb</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#virtio_rmb\">virtio_rmb</a>() <a class=\"id\" href=\"#rmb\">rmb</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#virtio_wmb\">virtio_wmb</a>() <a class=\"id\" href=\"#wmb\">wmb</a>()", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"comment\">/* For development, we want to crash whenever the ring is screwed. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BAD_RING\">BAD_RING</a>(<a class=\"id\" href=\"#_vq\">_vq</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;(<a class=\"id\" href=\"#_vq\">_vq</a>)-><a class=\"id\" href=\"#vq\">vq</a>.<a class=\"id\" href=\"#vdev\">vdev</a>-><a class=\"id\" href=\"#dev\">dev</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%s:\"<a class=\"id\" href=\"#fmt\">fmt</a>, (<a class=\"id\" href=\"#_vq\">_vq</a>)-><a class=\"id\" href=\"#vq\">vq</a>.<a class=\"id\" href=\"#name\">name</a>, ##<a class=\"id\" href=\"#args\">args</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"<span class=\"comment\">/* Caller is supposed to guarantee no reentry. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#START_USE\">START_USE</a>(<a class=\"id\" href=\"#_vq\">_vq</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#_vq\">_vq</a>)-><a class=\"id\" href=\"#in_use\">in_use</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"%s:in_use = %i\\n\",<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      (<a class=\"id\" href=\"#_vq\">_vq</a>)-><a class=\"id\" href=\"#vq\">vq</a>.<a class=\"id\" href=\"#name\">name</a>, (<a class=\"id\" href=\"#_vq\">_vq</a>)-><a class=\"id\" href=\"#in_use\">in_use</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#_vq\">_vq</a>)-><a class=\"id\" href=\"#in_use\">in_use</a> = <a class=\"id\" href=\"#__LINE__\">__LINE__</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#END_USE\">END_USE</a>(<a class=\"id\" href=\"#_vq\">_vq</a>) \\", 
"<span class=\"ts\"/>do { <a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#_vq\">_vq</a>)-><a class=\"id\" href=\"#in_use\">in_use</a>); (<a class=\"id\" href=\"#_vq\">_vq</a>)-><a class=\"id\" href=\"#in_use\">in_use</a> = 0; } while(0)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BAD_RING\">BAD_RING</a>(<a class=\"id\" href=\"#_vq\">_vq</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#_vq\">_vq</a>-><a class=\"id\" href=\"#vq\">vq</a>.<a class=\"id\" href=\"#vdev\">vdev</a>-><a class=\"id\" href=\"#dev\">dev</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%s:\"<a class=\"id\" href=\"#fmt\">fmt</a>, (<a class=\"id\" href=\"#_vq\">_vq</a>)-><a class=\"id\" href=\"#vq\">vq</a>.<a class=\"id\" href=\"#name\">name</a>, ##<a class=\"id\" href=\"#args\">args</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#_vq\">_vq</a>)-><a class=\"id\" href=\"#broken\">broken</a> = <a class=\"id\" href=\"#true\">true</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#START_USE\">START_USE</a>(<a class=\"id\" href=\"#vq\">vq</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#END_USE\">END_USE</a>(<a class=\"id\" href=\"#vq\">vq</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#vring_virtqueue\">vring_virtqueue</a>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> <a class=\"id\" href=\"#vq\">vq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Actual memory layout for this queue */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vring\">vring</a> <a class=\"id\" href=\"#vring\">vring</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Other side has made a mess, don't try any more. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#broken\">broken</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Host supports indirect buffers */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#indirect\">indirect</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Number of free buffers */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_free\">num_free</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Head of free buffer list. */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#free_head\">free_head</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Number we've added since last sync. */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_added\">num_added</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Last used index we've seen. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#last_used_idx\">last_used_idx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* How to notify other side. FIXME: commonalize hcalls! */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#notify\">notify</a>)(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* They're supposed to lock for us. */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#in_use\">in_use</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Tokens for callbacks. */</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>[];", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_vvq\">to_vvq</a>(<a class=\"id\" href=\"#_vq\">_vq</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#_vq\">_vq</a>, struct <a class=\"id\" href=\"#vring_virtqueue\">vring_virtqueue</a>, <a class=\"id\" href=\"#vq\">vq</a>)", 
"", 
"<span class=\"comment\">/* Set up an indirect table of descriptors and add it to the queue. */</span>", 
"static int <a class=\"id\" href=\"#vring_add_indirect\">vring_add_indirect</a>(struct <a class=\"id\" href=\"#vring_virtqueue\">vring_virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> <a class=\"id\" href=\"#sg\">sg</a>[],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#out\">out</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#in\">in</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vring_desc\">vring_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>((<a class=\"id\" href=\"#out\">out</a> + <a class=\"id\" href=\"#in\">in</a>) * sizeof(struct <a class=\"id\" href=\"#vring_desc\">vring_desc</a>), <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Transfer entries from the sg list into the indirect page */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#out\">out</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#VRING_DESC_F_NEXT\">VRING_DESC_F_NEXT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#sg_phys\">sg_phys</a>(<a class=\"id\" href=\"#sg\">sg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#i\">i</a>+1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#i\">i</a> &lt; (<a class=\"id\" href=\"#out\">out</a> + <a class=\"id\" href=\"#in\">in</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#VRING_DESC_F_NEXT\">VRING_DESC_F_NEXT</a>|<a class=\"id\" href=\"#VRING_DESC_F_WRITE\">VRING_DESC_F_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#sg_phys\">sg_phys</a>(<a class=\"id\" href=\"#sg\">sg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#i\">i</a>+1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Last one doesn't continue. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>-1].<a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#VRING_DESC_F_NEXT\">VRING_DESC_F_NEXT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>-1].<a class=\"id\" href=\"#next\">next</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We're about to use a buffer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#num_free\">num_free</a>--;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Use a single buffer which doesn't continue */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#free_head\">free_head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#head\">head</a>].<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#VRING_DESC_F_INDIRECT\">VRING_DESC_F_INDIRECT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#head\">head</a>].<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#virt_to_phys\">virt_to_phys</a>(<a class=\"id\" href=\"#desc\">desc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#head\">head</a>].<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#i\">i</a> * sizeof(struct <a class=\"id\" href=\"#vring_desc\">vring_desc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update free pointer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#free_head\">free_head</a> = <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#head\">head</a>].<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#head\">head</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#virtqueue_add_buf_gfp\">virtqueue_add_buf_gfp</a>(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#_vq\">_vq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> <a class=\"id\" href=\"#sg\">sg</a>[],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#out\">out</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#in\">in</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vring_virtqueue\">vring_virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a> = <a class=\"id\" href=\"#to_vvq\">to_vvq</a>(<a class=\"id\" href=\"#_vq\">_vq</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#avail\">avail</a>, <a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#START_USE\">START_USE</a>(<a class=\"id\" href=\"#vq\">vq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#data\">data</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the host supports indirect descriptor tables, and we have multiple</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * buffers, then go indirect. FIXME: tune this threshold */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#indirect\">indirect</a> && (<a class=\"id\" href=\"#out\">out</a> + <a class=\"id\" href=\"#in\">in</a>) &gt; 1 && <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#num_free\">num_free</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#vring_add_indirect\">vring_add_indirect</a>(<a class=\"id\" href=\"#vq\">vq</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#head\">head</a> >= 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#add_head\">add_head</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#out\">out</a> + <a class=\"id\" href=\"#in\">in</a> &gt; <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#out\">out</a> + <a class=\"id\" href=\"#in\">in</a> == 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#num_free\">num_free</a> &lt; <a class=\"id\" href=\"#out\">out</a> + <a class=\"id\" href=\"#in\">in</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"Can't add buf len %i - avail = %i\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#out\">out</a> + <a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#num_free\">num_free</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FIXME: for historical reasons, we force a notify here if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * there are outgoing parts to the buffer.  Presumably the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * host should service the ring ASAP. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#out\">out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#notify\">notify</a>(&amp;<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vq\">vq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#END_USE\">END_USE</a>(<a class=\"id\" href=\"#vq\">vq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We're about to use some buffers from the free list. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#num_free\">num_free</a> -= <a class=\"id\" href=\"#out\">out</a> + <a class=\"id\" href=\"#in\">in</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#free_head\">free_head</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#free_head\">free_head</a>; <a class=\"id\" href=\"#out\">out</a>; <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#out\">out</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#VRING_DESC_F_NEXT\">VRING_DESC_F_NEXT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#sg_phys\">sg_phys</a>(<a class=\"id\" href=\"#sg\">sg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#in\">in</a>; <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#in\">in</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#VRING_DESC_F_NEXT\">VRING_DESC_F_NEXT</a>|<a class=\"id\" href=\"#VRING_DESC_F_WRITE\">VRING_DESC_F_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#sg_phys\">sg_phys</a>(<a class=\"id\" href=\"#sg\">sg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Last one doesn't continue. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#prev\">prev</a>].<a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#VRING_DESC_F_NEXT\">VRING_DESC_F_NEXT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update free pointer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#free_head\">free_head</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<a class=\"id\" href=\"#add_head\">add_head</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Set token. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#head\">head</a>] = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Put entry in available array (but don't update avail-&gt;idx until they</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do sync).  FIXME: avoid modulus here? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avail\">avail</a> = (<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#avail\">avail</a>-><a class=\"id\" href=\"#idx\">idx</a> + <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#num_added\">num_added</a>++) % <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#avail\">avail</a>-><a class=\"id\" href=\"#ring\">ring</a>[<a class=\"id\" href=\"#avail\">avail</a>] = <a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"Added buffer head %i to %p\\n\", <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#vq\">vq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#END_USE\">END_USE</a>(<a class=\"id\" href=\"#vq\">vq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we're indirect, we can fit many (assuming not OOM). */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#indirect\">indirect</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#num_free\">num_free</a> ? <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#num\">num</a> : 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#num_free\">num_free</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#virtqueue_add_buf_gfp\">virtqueue_add_buf_gfp</a>);", 
"", 
"void <a class=\"id\" href=\"#virtqueue_kick\">virtqueue_kick</a>(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#_vq\">_vq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vring_virtqueue\">vring_virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a> = <a class=\"id\" href=\"#to_vvq\">to_vvq</a>(<a class=\"id\" href=\"#_vq\">_vq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#START_USE\">START_USE</a>(<a class=\"id\" href=\"#vq\">vq</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Descriptors and available array need to be set before we expose the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * new available array entries. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#virtio_wmb\">virtio_wmb</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#avail\">avail</a>-><a class=\"id\" href=\"#idx\">idx</a> += <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#num_added\">num_added</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#num_added\">num_added</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Need to update avail index before checking if we should notify */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#virtio_mb\">virtio_mb</a>();", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#used\">used</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VRING_USED_F_NO_NOTIFY\">VRING_USED_F_NO_NOTIFY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Prod other side to tell it about changes. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#notify\">notify</a>(&amp;<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vq\">vq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#END_USE\">END_USE</a>(<a class=\"id\" href=\"#vq\">vq</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#virtqueue_kick\">virtqueue_kick</a>);", 
"", 
"static void <a class=\"id\" href=\"#detach_buf\">detach_buf</a>(struct <a class=\"id\" href=\"#vring_virtqueue\">vring_virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a>, unsigned int <a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear data ptr. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#head\">head</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Put back on free list: find end */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Free the indirect table */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VRING_DESC_F_INDIRECT\">VRING_DESC_F_INDIRECT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#addr\">addr</a>));", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VRING_DESC_F_NEXT\">VRING_DESC_F_NEXT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#num_free\">num_free</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#free_head\">free_head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#free_head\">free_head</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Plus final descriptor */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#num_free\">num_free</a>++;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#more_used\">more_used</a>(const struct <a class=\"id\" href=\"#vring_virtqueue\">vring_virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#last_used_idx\">last_used_idx</a> != <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#used\">used</a>-><a class=\"id\" href=\"#idx\">idx</a>;", 
"}", 
"", 
"void *<a class=\"id\" href=\"#virtqueue_get_buf\">virtqueue_get_buf</a>(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#_vq\">_vq</a>, unsigned int *<a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vring_virtqueue\">vring_virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a> = <a class=\"id\" href=\"#to_vvq\">to_vvq</a>(<a class=\"id\" href=\"#_vq\">_vq</a>);", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#START_USE\">START_USE</a>(<a class=\"id\" href=\"#vq\">vq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#broken\">broken</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#END_USE\">END_USE</a>(<a class=\"id\" href=\"#vq\">vq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#more_used\">more_used</a>(<a class=\"id\" href=\"#vq\">vq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"No more buffers in queue\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#END_USE\">END_USE</a>(<a class=\"id\" href=\"#vq\">vq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only get used array entries after they have been exposed by host. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#virtio_rmb\">virtio_rmb</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#used\">used</a>-><a class=\"id\" href=\"#ring\">ring</a>[<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#last_used_idx\">last_used_idx</a>%<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#num\">num</a>].<a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#used\">used</a>-><a class=\"id\" href=\"#ring\">ring</a>[<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#last_used_idx\">last_used_idx</a>%<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#num\">num</a>].<a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#num\">num</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BAD_RING\">BAD_RING</a>(<a class=\"id\" href=\"#vq\">vq</a>, \"id %u out of range\\n\", <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#i\">i</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BAD_RING\">BAD_RING</a>(<a class=\"id\" href=\"#vq\">vq</a>, \"id %u is not a head!\\n\", <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* detach_buf clears data, so grab it now. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#detach_buf\">detach_buf</a>(<a class=\"id\" href=\"#vq\">vq</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#last_used_idx\">last_used_idx</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#END_USE\">END_USE</a>(<a class=\"id\" href=\"#vq\">vq</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#virtqueue_get_buf\">virtqueue_get_buf</a>);", 
"", 
"void <a class=\"id\" href=\"#virtqueue_disable_cb\">virtqueue_disable_cb</a>(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#_vq\">_vq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vring_virtqueue\">vring_virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a> = <a class=\"id\" href=\"#to_vvq\">to_vvq</a>(<a class=\"id\" href=\"#_vq\">_vq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#avail\">avail</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#VRING_AVAIL_F_NO_INTERRUPT\">VRING_AVAIL_F_NO_INTERRUPT</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#virtqueue_disable_cb\">virtqueue_disable_cb</a>);", 
"", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#virtqueue_enable_cb\">virtqueue_enable_cb</a>(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#_vq\">_vq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vring_virtqueue\">vring_virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a> = <a class=\"id\" href=\"#to_vvq\">to_vvq</a>(<a class=\"id\" href=\"#_vq\">_vq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#START_USE\">START_USE</a>(<a class=\"id\" href=\"#vq\">vq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We optimistically turn back on interrupts, then check if there was</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * more to do. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#avail\">avail</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#VRING_AVAIL_F_NO_INTERRUPT\">VRING_AVAIL_F_NO_INTERRUPT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#virtio_mb\">virtio_mb</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#more_used\">more_used</a>(<a class=\"id\" href=\"#vq\">vq</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#END_USE\">END_USE</a>(<a class=\"id\" href=\"#vq\">vq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#END_USE\">END_USE</a>(<a class=\"id\" href=\"#vq\">vq</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#virtqueue_enable_cb\">virtqueue_enable_cb</a>);", 
"", 
"void *<a class=\"id\" href=\"#virtqueue_detach_unused_buf\">virtqueue_detach_unused_buf</a>(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#_vq\">_vq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vring_virtqueue\">vring_virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a> = <a class=\"id\" href=\"#to_vvq\">to_vvq</a>(<a class=\"id\" href=\"#_vq\">_vq</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#START_USE\">START_USE</a>(<a class=\"id\" href=\"#vq\">vq</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* detach_buf clears data, so grab it now. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#detach_buf\">detach_buf</a>(<a class=\"id\" href=\"#vq\">vq</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#END_USE\">END_USE</a>(<a class=\"id\" href=\"#vq\">vq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* That should have freed everything. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#num_free\">num_free</a> != <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#num\">num</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#END_USE\">END_USE</a>(<a class=\"id\" href=\"#vq\">vq</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#virtqueue_detach_unused_buf\">virtqueue_detach_unused_buf</a>);", 
"", 
"<a class=\"id\" href=\"#irqreturn_t\">irqreturn_t</a> <a class=\"id\" href=\"#vring_interrupt\">vring_interrupt</a>(int <a class=\"id\" href=\"#irq\">irq</a>, void *<a class=\"id\" href=\"#_vq\">_vq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vring_virtqueue\">vring_virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a> = <a class=\"id\" href=\"#to_vvq\">to_vvq</a>(<a class=\"id\" href=\"#_vq\">_vq</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#more_used\">more_used</a>(<a class=\"id\" href=\"#vq\">vq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"virtqueue interrupt with no work for %p\\n\", <a class=\"id\" href=\"#vq\">vq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#IRQ_NONE\">IRQ_NONE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#broken\">broken</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#IRQ_HANDLED\">IRQ_HANDLED</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"virtqueue callback for %p (%p)\\n\", <a class=\"id\" href=\"#vq\">vq</a>, <a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vq\">vq</a>.<a class=\"id\" href=\"#callback\">callback</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vq\">vq</a>.<a class=\"id\" href=\"#callback\">callback</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vq\">vq</a>.<a class=\"id\" href=\"#callback\">callback</a>(&amp;<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vq\">vq</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#IRQ_HANDLED\">IRQ_HANDLED</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#vring_interrupt\">vring_interrupt</a>);", 
"", 
"struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#vring_new_virtqueue\">vring_new_virtqueue</a>(unsigned int <a class=\"id\" href=\"#num\">num</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#vring_align\">vring_align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#vdev\">vdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#pages\">pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void (*<a class=\"id\" href=\"#notify\">notify</a>)(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void (*<a class=\"id\" href=\"#callback\">callback</a>)(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vring_virtqueue\">vring_virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We assume num is a power of 2. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num\">num</a> &amp; (<a class=\"id\" href=\"#num\">num</a> - 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#vdev\">vdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Bad virtqueue length %u\\n\", <a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#vq\">vq</a>) + sizeof(void *)*<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vq\">vq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vring_init\">vring_init</a>(&amp;<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>, <a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#vring_align\">vring_align</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vq\">vq</a>.<a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#callback\">callback</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vq\">vq</a>.<a class=\"id\" href=\"#vdev\">vdev</a> = <a class=\"id\" href=\"#vdev\">vdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vq\">vq</a>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#notify\">notify</a> = <a class=\"id\" href=\"#notify\">notify</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#broken\">broken</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#last_used_idx\">last_used_idx</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#num_added\">num_added</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vq\">vq</a>.<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#vdev\">vdev</a>-><a class=\"id\" href=\"#vqs\">vqs</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#in_use\">in_use</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#indirect\">indirect</a> = <a class=\"id\" href=\"#virtio_has_feature\">virtio_has_feature</a>(<a class=\"id\" href=\"#vdev\">vdev</a>, <a class=\"id\" href=\"#VIRTIO_RING_F_INDIRECT_DESC\">VIRTIO_RING_F_INDIRECT_DESC</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No callback?  Tell other side not to bother us. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#callback\">callback</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#avail\">avail</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#VRING_AVAIL_F_NO_INTERRUPT\">VRING_AVAIL_F_NO_INTERRUPT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Put everything in free lists. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#num_free\">num_free</a> = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#free_head\">free_head</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num\">num</a>-1; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vring\">vring</a>.<a class=\"id\" href=\"#desc\">desc</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#i\">i</a>+1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#vq\">vq</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#vring_new_virtqueue\">vring_new_virtqueue</a>);", 
"", 
"void <a class=\"id\" href=\"#vring_del_virtqueue\">vring_del_virtqueue</a>(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#vq\">vq</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#to_vvq\">to_vvq</a>(<a class=\"id\" href=\"#vq\">vq</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#vring_del_virtqueue\">vring_del_virtqueue</a>);", 
"", 
"<span class=\"comment\">/* Manipulates transport-specific feature bits. */</span>", 
"void <a class=\"id\" href=\"#vring_transport_features\">vring_transport_features</a>(struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#vdev\">vdev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#VIRTIO_TRANSPORT_F_START\">VIRTIO_TRANSPORT_F_START</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#VIRTIO_TRANSPORT_F_END\">VIRTIO_TRANSPORT_F_END</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#VIRTIO_RING_F_INDIRECT_DESC\">VIRTIO_RING_F_INDIRECT_DESC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We don't understand this bit. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#vdev\">vdev</a>-><a class=\"id\" href=\"#features\">features</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#vring_transport_features\">vring_transport_features</a>);", 
"", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
];
xr_frag_insert('l/51/abc90188d969ff33f4ac49be18d5f0760797aa.xr', __xr_tmp);
