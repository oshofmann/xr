var __xr_tmp = [
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_relative - Calculate the next relative offset</span>", 
"<span class=\"comment\"> * @buffer:  Block of data being worked on</span>", 
"<span class=\"comment\"> * @buflen:  Size of the block of data</span>", 
"<span class=\"comment\"> * @base:    Size of the previous fixed width fields</span>", 
"<span class=\"comment\"> * @offset:  Cumulative size of the previous variable-width fields</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Because many of the VBLK fields are variable-width, it's necessary</span>", 
"<span class=\"comment\"> * to calculate each offset based on the previous one and the length</span>", 
"<span class=\"comment\"> * of the field it pointed to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  -1 Error, the calculated offset exceeded the size of the buffer</span>", 
"<span class=\"comment\"> *           n OK, a range-checked offset into buffer</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a>(const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>, int <a class=\"id\" href=\"#base\">base</a>, int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> += <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a> || <a class=\"id\" href=\"#offset\">offset</a> &lt; 0 || <a class=\"id\" href=\"#base\">base</a> &gt; <a class=\"id\" href=\"#buflen\">buflen</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"!buffer\");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"offset (%d) < 0\", <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a> &gt; <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"base (%d) > buflen (%d)\", <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#buflen\">buflen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#base\">base</a>] >= <a class=\"id\" href=\"#buflen\">buflen</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"base (%d) + buffer[base] (%d) >= buflen (%d)\", <a class=\"id\" href=\"#base\">base</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#base\">base</a>], <a class=\"id\" href=\"#buflen\">buflen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#base\">base</a>] + <a class=\"id\" href=\"#offset\">offset</a> + 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_get_vnum - Convert a variable-width, big endian number, into cpu order</span>", 
"<span class=\"comment\"> * @block:  Pointer to the variable-width number to convert</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Large numbers in the LDM Database are often stored in a packed format.  Each</span>", 
"<span class=\"comment\"> * number is prefixed by a one byte width marker.  All numbers in the database</span>", 
"<span class=\"comment\"> * are stored in big-endian byte order.  This function reads one of these</span>", 
"<span class=\"comment\"> * numbers and returns the result</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * N.B.  This function DOES NOT perform any range checking, though the most</span>", 
"<span class=\"comment\"> *       it will read is eight bytes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  n A number</span>", 
"<span class=\"comment\"> *          0 Zero, or an error occurred</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ldm_get_vnum\">ldm_get_vnum</a> (const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#block\">block</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#tmp\">tmp</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#block\">block</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = *<a class=\"id\" href=\"#block\">block</a>++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> && <a class=\"id\" href=\"#length\">length</a> <= 8)", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#length\">length</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = (<a class=\"id\" href=\"#tmp\">tmp</a> << 8) | *<a class=\"id\" href=\"#block\">block</a>++;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a> (\"Illegal length %d.\", <a class=\"id\" href=\"#length\">length</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_get_vstr - Read a length-prefixed string into a buffer</span>", 
"<span class=\"comment\"> * @block:   Pointer to the length marker</span>", 
"<span class=\"comment\"> * @buffer:  Location to copy string to</span>", 
"<span class=\"comment\"> * @buflen:  Size of the output buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Many of the strings in the LDM Database are not NULL terminated.  Instead</span>", 
"<span class=\"comment\"> * they are prefixed by a one byte length marker.  This function copies one of</span>", 
"<span class=\"comment\"> * these strings into a buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * N.B.  This function DOES NOT perform any range checking on the input.</span>", 
"<span class=\"comment\"> *       If the buffer is too small, the output will be truncated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  0, Error and @buffer contents are undefined</span>", 
"<span class=\"comment\"> *          n, String length in characters (excluding NULL)</span>", 
"<span class=\"comment\"> *          buflen-1, String was truncated.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ldm_get_vstr\">ldm_get_vstr</a> (const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#block\">block</a> || !<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#block\">block</a>[0];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> >= <a class=\"id\" href=\"#buflen\">buflen</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a> (\"Truncating string %d -> %d.\", <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#buflen\">buflen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#buflen\">buflen</a> - 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#block\">block</a> + 1, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#length\">length</a>] = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#length\">length</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_parse_cmp3 - Read a raw VBLK Component object into a vblk structure</span>", 
"<span class=\"comment\"> * @buffer:  Block of data being worked on</span>", 
"<span class=\"comment\"> * @buflen:  Size of the block of data</span>", 
"<span class=\"comment\"> * @vb:      In-memory vblk in which to return information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Read a raw VBLK Component object (version 3) into a vblk structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   @vb contains a Component VBLK</span>", 
"<span class=\"comment\"> *          'false'  @vb contents are not defined</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_parse_cmp3\">ldm_parse_cmp3</a> (const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>, struct <a class=\"id\" href=\"#vblk\">vblk</a> *<a class=\"id\" href=\"#vb\">vb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r_objid\">r_objid</a>, <a class=\"id\" href=\"#r_name\">r_name</a>, <a class=\"id\" href=\"#r_vstate\">r_vstate</a>, <a class=\"id\" href=\"#r_child\">r_child</a>, <a class=\"id\" href=\"#r_parent\">r_parent</a>, <a class=\"id\" href=\"#r_stripe\">r_stripe</a>, <a class=\"id\" href=\"#r_cols\">r_cols</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vblk_comp\">vblk_comp</a> *<a class=\"id\" href=\"#comp\">comp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#buffer\">buffer</a> || !<a class=\"id\" href=\"#vb\">vb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_objid\">r_objid</a>  = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x18, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_name\">r_name</a>   = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x18, <a class=\"id\" href=\"#r_objid\">r_objid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_vstate\">r_vstate</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x18, <a class=\"id\" href=\"#r_name\">r_name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_child\">r_child</a>  = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x1D, <a class=\"id\" href=\"#r_vstate\">r_vstate</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_parent\">r_parent</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x2D, <a class=\"id\" href=\"#r_child\">r_child</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>[0x12] &amp; <a class=\"id\" href=\"#VBLK_FLAG_COMP_STRIPE\">VBLK_FLAG_COMP_STRIPE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_stripe\">r_stripe</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x2E, <a class=\"id\" href=\"#r_parent\">r_parent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_cols\">r_cols</a>   = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x2E, <a class=\"id\" href=\"#r_stripe\">r_stripe</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#r_cols\">r_cols</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_stripe\">r_stripe</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_cols\">r_cols</a>   = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#r_parent\">r_parent</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#VBLK_SIZE_CMP3\">VBLK_SIZE_CMP3</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> != <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + 0x14))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a> = &amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#vblk\">vblk</a>.<a class=\"id\" href=\"#comp\">comp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ldm_get_vstr\">ldm_get_vstr</a> (<a class=\"id\" href=\"#buffer\">buffer</a> + 0x18 + <a class=\"id\" href=\"#r_name\">r_name</a>, <a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof (<a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#state\">state</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#type\">type</a>      = <a class=\"id\" href=\"#buffer\">buffer</a>[0x18 + <a class=\"id\" href=\"#r_vstate\">r_vstate</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#children\">children</a>  = <a class=\"id\" href=\"#ldm_get_vnum\">ldm_get_vnum</a> (<a class=\"id\" href=\"#buffer\">buffer</a> + 0x1D + <a class=\"id\" href=\"#r_vstate\">r_vstate</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#parent_id\">parent_id</a> = <a class=\"id\" href=\"#ldm_get_vnum\">ldm_get_vnum</a> (<a class=\"id\" href=\"#buffer\">buffer</a> + 0x2D + <a class=\"id\" href=\"#r_child\">r_child</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comp\">comp</a>-><a class=\"id\" href=\"#chunksize\">chunksize</a> = <a class=\"id\" href=\"#r_stripe\">r_stripe</a> ? <a class=\"id\" href=\"#ldm_get_vnum\">ldm_get_vnum</a> (<a class=\"id\" href=\"#buffer\">buffer</a>+<a class=\"id\" href=\"#r_parent\">r_parent</a>+0x2E) : 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_parse_dgr3 - Read a raw VBLK Disk Group object into a vblk structure</span>", 
"<span class=\"comment\"> * @buffer:  Block of data being worked on</span>", 
"<span class=\"comment\"> * @buflen:  Size of the block of data</span>", 
"<span class=\"comment\"> * @vb:      In-memory vblk in which to return information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Read a raw VBLK Disk Group object (version 3) into a vblk structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   @vb contains a Disk Group VBLK</span>", 
"<span class=\"comment\"> *          'false'  @vb contents are not defined</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ldm_parse_dgr3\">ldm_parse_dgr3</a> (const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>, struct <a class=\"id\" href=\"#vblk\">vblk</a> *<a class=\"id\" href=\"#vb\">vb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r_objid\">r_objid</a>, <a class=\"id\" href=\"#r_name\">r_name</a>, <a class=\"id\" href=\"#r_diskid\">r_diskid</a>, <a class=\"id\" href=\"#r_id1\">r_id1</a>, <a class=\"id\" href=\"#r_id2\">r_id2</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vblk_dgrp\">vblk_dgrp</a> *<a class=\"id\" href=\"#dgrp\">dgrp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#buffer\">buffer</a> || !<a class=\"id\" href=\"#vb\">vb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_objid\">r_objid</a>  = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x18, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_name\">r_name</a>   = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x18, <a class=\"id\" href=\"#r_objid\">r_objid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_diskid\">r_diskid</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x18, <a class=\"id\" href=\"#r_name\">r_name</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>[0x12] &amp; <a class=\"id\" href=\"#VBLK_FLAG_DGR3_IDS\">VBLK_FLAG_DGR3_IDS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_id1\">r_id1</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x24, <a class=\"id\" href=\"#r_diskid\">r_diskid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_id2\">r_id2</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x24, <a class=\"id\" href=\"#r_id1\">r_id1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#r_id2\">r_id2</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_id1\">r_id1</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_id2\">r_id2</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#r_diskid\">r_diskid</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#VBLK_SIZE_DGR3\">VBLK_SIZE_DGR3</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> != <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + 0x14))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dgrp\">dgrp</a> = &amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#vblk\">vblk</a>.<a class=\"id\" href=\"#dgrp\">dgrp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ldm_get_vstr\">ldm_get_vstr</a> (<a class=\"id\" href=\"#buffer\">buffer</a> + 0x18 + <a class=\"id\" href=\"#r_name\">r_name</a>, <a class=\"id\" href=\"#dgrp\">dgrp</a>-><a class=\"id\" href=\"#disk_id\">disk_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof (<a class=\"id\" href=\"#dgrp\">dgrp</a>-><a class=\"id\" href=\"#disk_id\">disk_id</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_parse_dgr4 - Read a raw VBLK Disk Group object into a vblk structure</span>", 
"<span class=\"comment\"> * @buffer:  Block of data being worked on</span>", 
"<span class=\"comment\"> * @buflen:  Size of the block of data</span>", 
"<span class=\"comment\"> * @vb:      In-memory vblk in which to return information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Read a raw VBLK Disk Group object (version 4) into a vblk structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   @vb contains a Disk Group VBLK</span>", 
"<span class=\"comment\"> *          'false'  @vb contents are not defined</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_parse_dgr4\">ldm_parse_dgr4</a> (const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>, struct <a class=\"id\" href=\"#vblk\">vblk</a> *<a class=\"id\" href=\"#vb\">vb</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[64];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r_objid\">r_objid</a>, <a class=\"id\" href=\"#r_name\">r_name</a>, <a class=\"id\" href=\"#r_id1\">r_id1</a>, <a class=\"id\" href=\"#r_id2\">r_id2</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vblk_dgrp\">vblk_dgrp</a> *<a class=\"id\" href=\"#dgrp\">dgrp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#buffer\">buffer</a> || !<a class=\"id\" href=\"#vb\">vb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_objid\">r_objid</a>  = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x18, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_name\">r_name</a>   = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x18, <a class=\"id\" href=\"#r_objid\">r_objid</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>[0x12] &amp; <a class=\"id\" href=\"#VBLK_FLAG_DGR4_IDS\">VBLK_FLAG_DGR4_IDS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_id1\">r_id1</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x44, <a class=\"id\" href=\"#r_name\">r_name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_id2\">r_id2</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x44, <a class=\"id\" href=\"#r_id1\">r_id1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#r_id2\">r_id2</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_id1\">r_id1</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_id2\">r_id2</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#r_name\">r_name</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#VBLK_SIZE_DGR4\">VBLK_SIZE_DGR4</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> != <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + 0x14))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dgrp\">dgrp</a> = &amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#vblk\">vblk</a>.<a class=\"id\" href=\"#dgrp\">dgrp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ldm_get_vstr\">ldm_get_vstr</a> (<a class=\"id\" href=\"#buffer\">buffer</a> + 0x18 + <a class=\"id\" href=\"#r_objid\">r_objid</a>, <a class=\"id\" href=\"#buf\">buf</a>, sizeof (<a class=\"id\" href=\"#buf\">buf</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_parse_dsk3 - Read a raw VBLK Disk object into a vblk structure</span>", 
"<span class=\"comment\"> * @buffer:  Block of data being worked on</span>", 
"<span class=\"comment\"> * @buflen:  Size of the block of data</span>", 
"<span class=\"comment\"> * @vb:      In-memory vblk in which to return information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Read a raw VBLK Disk object (version 3) into a vblk structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   @vb contains a Disk VBLK</span>", 
"<span class=\"comment\"> *          'false'  @vb contents are not defined</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_parse_dsk3\">ldm_parse_dsk3</a> (const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>, struct <a class=\"id\" href=\"#vblk\">vblk</a> *<a class=\"id\" href=\"#vb\">vb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r_objid\">r_objid</a>, <a class=\"id\" href=\"#r_name\">r_name</a>, <a class=\"id\" href=\"#r_diskid\">r_diskid</a>, <a class=\"id\" href=\"#r_altname\">r_altname</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vblk_disk\">vblk_disk</a> *<a class=\"id\" href=\"#disk\">disk</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#buffer\">buffer</a> || !<a class=\"id\" href=\"#vb\">vb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_objid\">r_objid</a>   = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x18, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_name\">r_name</a>    = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x18, <a class=\"id\" href=\"#r_objid\">r_objid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_diskid\">r_diskid</a>  = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x18, <a class=\"id\" href=\"#r_name\">r_name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_altname\">r_altname</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x18, <a class=\"id\" href=\"#r_diskid\">r_diskid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#r_altname\">r_altname</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#VBLK_SIZE_DSK3\">VBLK_SIZE_DSK3</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> != <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + 0x14))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a> = &amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#vblk\">vblk</a>.<a class=\"id\" href=\"#disk\">disk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ldm_get_vstr\">ldm_get_vstr</a> (<a class=\"id\" href=\"#buffer\">buffer</a> + 0x18 + <a class=\"id\" href=\"#r_diskid\">r_diskid</a>, <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#alt_name\">alt_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof (<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#alt_name\">alt_name</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ldm_parse_guid\">ldm_parse_guid</a> (<a class=\"id\" href=\"#buffer\">buffer</a> + 0x19 + <a class=\"id\" href=\"#r_name\">r_name</a>, <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#disk_id\">disk_id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_parse_dsk4 - Read a raw VBLK Disk object into a vblk structure</span>", 
"<span class=\"comment\"> * @buffer:  Block of data being worked on</span>", 
"<span class=\"comment\"> * @buflen:  Size of the block of data</span>", 
"<span class=\"comment\"> * @vb:      In-memory vblk in which to return information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Read a raw VBLK Disk object (version 4) into a vblk structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   @vb contains a Disk VBLK</span>", 
"<span class=\"comment\"> *          'false'  @vb contents are not defined</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_parse_dsk4\">ldm_parse_dsk4</a> (const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>, struct <a class=\"id\" href=\"#vblk\">vblk</a> *<a class=\"id\" href=\"#vb\">vb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r_objid\">r_objid</a>, <a class=\"id\" href=\"#r_name\">r_name</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vblk_disk\">vblk_disk</a> *<a class=\"id\" href=\"#disk\">disk</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#buffer\">buffer</a> || !<a class=\"id\" href=\"#vb\">vb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_objid\">r_objid</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x18, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_name\">r_name</a>  = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x18, <a class=\"id\" href=\"#r_objid\">r_objid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>     = <a class=\"id\" href=\"#r_name\">r_name</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#VBLK_SIZE_DSK4\">VBLK_SIZE_DSK4</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> != <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + 0x14))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a> = &amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#vblk\">vblk</a>.<a class=\"id\" href=\"#disk\">disk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a> (<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#disk_id\">disk_id</a>, <a class=\"id\" href=\"#buffer\">buffer</a> + 0x18 + <a class=\"id\" href=\"#r_name\">r_name</a>, <a class=\"id\" href=\"#GUID_SIZE\">GUID_SIZE</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_parse_prt3 - Read a raw VBLK Partition object into a vblk structure</span>", 
"<span class=\"comment\"> * @buffer:  Block of data being worked on</span>", 
"<span class=\"comment\"> * @buflen:  Size of the block of data</span>", 
"<span class=\"comment\"> * @vb:      In-memory vblk in which to return information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Read a raw VBLK Partition object (version 3) into a vblk structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   @vb contains a Partition VBLK</span>", 
"<span class=\"comment\"> *          'false'  @vb contents are not defined</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_parse_prt3\">ldm_parse_prt3</a>(const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>, struct <a class=\"id\" href=\"#vblk\">vblk</a> *<a class=\"id\" href=\"#vb\">vb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r_objid\">r_objid</a>, <a class=\"id\" href=\"#r_name\">r_name</a>, <a class=\"id\" href=\"#r_size\">r_size</a>, <a class=\"id\" href=\"#r_parent\">r_parent</a>, <a class=\"id\" href=\"#r_diskid\">r_diskid</a>, <a class=\"id\" href=\"#r_index\">r_index</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vblk_part\">vblk_part</a> *<a class=\"id\" href=\"#part\">part</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#buffer\">buffer</a> || !<a class=\"id\" href=\"#vb\">vb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_objid\">r_objid</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x18, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r_objid\">r_objid</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"r_objid %d < 0\", <a class=\"id\" href=\"#r_objid\">r_objid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_name\">r_name</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x18, <a class=\"id\" href=\"#r_objid\">r_objid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r_name\">r_name</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"r_name %d < 0\", <a class=\"id\" href=\"#r_name\">r_name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_size\">r_size</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x34, <a class=\"id\" href=\"#r_name\">r_name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r_size\">r_size</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"r_size %d < 0\", <a class=\"id\" href=\"#r_size\">r_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_parent\">r_parent</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x34, <a class=\"id\" href=\"#r_size\">r_size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r_parent\">r_parent</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"r_parent %d < 0\", <a class=\"id\" href=\"#r_parent\">r_parent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_diskid\">r_diskid</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x34, <a class=\"id\" href=\"#r_parent\">r_parent</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r_diskid\">r_diskid</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"r_diskid %d < 0\", <a class=\"id\" href=\"#r_diskid\">r_diskid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>[0x12] &amp; <a class=\"id\" href=\"#VBLK_FLAG_PART_INDEX\">VBLK_FLAG_PART_INDEX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_index\">r_index</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x34, <a class=\"id\" href=\"#r_diskid\">r_diskid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r_index\">r_index</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"r_index %d < 0\", <a class=\"id\" href=\"#r_index\">r_index</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#r_index\">r_index</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_index\">r_index</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#r_diskid\">r_diskid</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"len %d < 0\", <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#VBLK_SIZE_PRT3\">VBLK_SIZE_PRT3</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + 0x14)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"len %d > BE32(buffer + 0x14) %d\", <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + 0x14));", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = &amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#vblk\">vblk</a>.<a class=\"id\" href=\"#part\">part</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#get_unaligned_be64\">get_unaligned_be64</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + 0x24 + <a class=\"id\" href=\"#r_name\">r_name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#volume_offset\">volume_offset</a> = <a class=\"id\" href=\"#get_unaligned_be64\">get_unaligned_be64</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + 0x2C + <a class=\"id\" href=\"#r_name\">r_name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#ldm_get_vnum\">ldm_get_vnum</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + 0x34 + <a class=\"id\" href=\"#r_name\">r_name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#parent_id\">parent_id</a> = <a class=\"id\" href=\"#ldm_get_vnum\">ldm_get_vnum</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + 0x34 + <a class=\"id\" href=\"#r_size\">r_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#disk_id\">disk_id</a> = <a class=\"id\" href=\"#ldm_get_vnum\">ldm_get_vnum</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + 0x34 + <a class=\"id\" href=\"#r_parent\">r_parent</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VBLK_FLAG_PART_INDEX\">VBLK_FLAG_PART_INDEX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#partnum\">partnum</a> = <a class=\"id\" href=\"#buffer\">buffer</a>[0x35 + <a class=\"id\" href=\"#r_diskid\">r_diskid</a>];", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#partnum\">partnum</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_parse_vol5 - Read a raw VBLK Volume object into a vblk structure</span>", 
"<span class=\"comment\"> * @buffer:  Block of data being worked on</span>", 
"<span class=\"comment\"> * @buflen:  Size of the block of data</span>", 
"<span class=\"comment\"> * @vb:      In-memory vblk in which to return information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Read a raw VBLK Volume object (version 5) into a vblk structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   @vb contains a Volume VBLK</span>", 
"<span class=\"comment\"> *          'false'  @vb contents are not defined</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_parse_vol5\">ldm_parse_vol5</a>(const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>, struct <a class=\"id\" href=\"#vblk\">vblk</a> *<a class=\"id\" href=\"#vb\">vb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r_objid\">r_objid</a>, <a class=\"id\" href=\"#r_name\">r_name</a>, <a class=\"id\" href=\"#r_vtype\">r_vtype</a>, <a class=\"id\" href=\"#r_disable_drive_letter\">r_disable_drive_letter</a>, <a class=\"id\" href=\"#r_child\">r_child</a>, <a class=\"id\" href=\"#r_size\">r_size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r_id1\">r_id1</a>, <a class=\"id\" href=\"#r_id2\">r_id2</a>, <a class=\"id\" href=\"#r_size2\">r_size2</a>, <a class=\"id\" href=\"#r_drive\">r_drive</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vblk_volu\">vblk_volu</a> *<a class=\"id\" href=\"#volu\">volu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#buffer\">buffer</a> || !<a class=\"id\" href=\"#vb\">vb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_objid\">r_objid</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x18, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r_objid\">r_objid</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"r_objid %d < 0\", <a class=\"id\" href=\"#r_objid\">r_objid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_name\">r_name</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x18, <a class=\"id\" href=\"#r_objid\">r_objid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r_name\">r_name</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"r_name %d < 0\", <a class=\"id\" href=\"#r_name\">r_name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_vtype\">r_vtype</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x18, <a class=\"id\" href=\"#r_name\">r_name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r_vtype\">r_vtype</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"r_vtype %d < 0\", <a class=\"id\" href=\"#r_vtype\">r_vtype</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_disable_drive_letter\">r_disable_drive_letter</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x18, <a class=\"id\" href=\"#r_vtype\">r_vtype</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r_disable_drive_letter\">r_disable_drive_letter</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"r_disable_drive_letter %d < 0\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_disable_drive_letter\">r_disable_drive_letter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_child\">r_child</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x2D, <a class=\"id\" href=\"#r_disable_drive_letter\">r_disable_drive_letter</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r_child\">r_child</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"r_child %d < 0\", <a class=\"id\" href=\"#r_child\">r_child</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_size\">r_size</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x3D, <a class=\"id\" href=\"#r_child\">r_child</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r_size\">r_size</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"r_size %d < 0\", <a class=\"id\" href=\"#r_size\">r_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>[0x12] &amp; <a class=\"id\" href=\"#VBLK_FLAG_VOLU_ID1\">VBLK_FLAG_VOLU_ID1</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_id1\">r_id1</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x52, <a class=\"id\" href=\"#r_size\">r_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r_id1\">r_id1</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"r_id1 %d < 0\", <a class=\"id\" href=\"#r_id1\">r_id1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_id1\">r_id1</a> = <a class=\"id\" href=\"#r_size\">r_size</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>[0x12] &amp; <a class=\"id\" href=\"#VBLK_FLAG_VOLU_ID2\">VBLK_FLAG_VOLU_ID2</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_id2\">r_id2</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x52, <a class=\"id\" href=\"#r_id1\">r_id1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r_id2\">r_id2</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"r_id2 %d < 0\", <a class=\"id\" href=\"#r_id2\">r_id2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_id2\">r_id2</a> = <a class=\"id\" href=\"#r_id1\">r_id1</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>[0x12] &amp; <a class=\"id\" href=\"#VBLK_FLAG_VOLU_SIZE\">VBLK_FLAG_VOLU_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_size2\">r_size2</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x52, <a class=\"id\" href=\"#r_id2\">r_id2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r_size2\">r_size2</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"r_size2 %d < 0\", <a class=\"id\" href=\"#r_size2\">r_size2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_size2\">r_size2</a> = <a class=\"id\" href=\"#r_id2\">r_id2</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>[0x12] &amp; <a class=\"id\" href=\"#VBLK_FLAG_VOLU_DRIVE\">VBLK_FLAG_VOLU_DRIVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_drive\">r_drive</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, 0x52, <a class=\"id\" href=\"#r_size2\">r_size2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r_drive\">r_drive</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"r_drive %d < 0\", <a class=\"id\" href=\"#r_drive\">r_drive</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_drive\">r_drive</a> = <a class=\"id\" href=\"#r_size2\">r_size2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#r_drive\">r_drive</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"len %d < 0\", <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#VBLK_SIZE_VOL5\">VBLK_SIZE_VOL5</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + 0x14)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"len %d > BE32(buffer + 0x14) %d\", <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + 0x14));", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#volu\">volu</a> = &amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#vblk\">vblk</a>.<a class=\"id\" href=\"#volu\">volu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ldm_get_vstr\">ldm_get_vstr</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + 0x18 + <a class=\"id\" href=\"#r_name\">r_name</a>, <a class=\"id\" href=\"#volu\">volu</a>-><a class=\"id\" href=\"#volume_type\">volume_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#volu\">volu</a>-><a class=\"id\" href=\"#volume_type\">volume_type</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#volu\">volu</a>-><a class=\"id\" href=\"#volume_state\">volume_state</a>, <a class=\"id\" href=\"#buffer\">buffer</a> + 0x18 + <a class=\"id\" href=\"#r_disable_drive_letter\">r_disable_drive_letter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#volu\">volu</a>-><a class=\"id\" href=\"#volume_state\">volume_state</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#volu\">volu</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#ldm_get_vnum\">ldm_get_vnum</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + 0x3D + <a class=\"id\" href=\"#r_child\">r_child</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#volu\">volu</a>-><a class=\"id\" href=\"#partition_type\">partition_type</a> = <a class=\"id\" href=\"#buffer\">buffer</a>[0x41 + <a class=\"id\" href=\"#r_size\">r_size</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#volu\">volu</a>-><a class=\"id\" href=\"#guid\">guid</a>, <a class=\"id\" href=\"#buffer\">buffer</a> + 0x42 + <a class=\"id\" href=\"#r_size\">r_size</a>, sizeof(<a class=\"id\" href=\"#volu\">volu</a>-><a class=\"id\" href=\"#guid\">guid</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>[0x12] &amp; <a class=\"id\" href=\"#VBLK_FLAG_VOLU_DRIVE\">VBLK_FLAG_VOLU_DRIVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_get_vstr\">ldm_get_vstr</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + 0x52 + <a class=\"id\" href=\"#r_size\">r_size</a>, <a class=\"id\" href=\"#volu\">volu</a>-><a class=\"id\" href=\"#drive_hint\">drive_hint</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#volu\">volu</a>-><a class=\"id\" href=\"#drive_hint\">drive_hint</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_parse_vblk - Read a raw VBLK object into a vblk structure</span>", 
"<span class=\"comment\"> * @buf:  Block of data being worked on</span>", 
"<span class=\"comment\"> * @len:  Size of the block of data</span>", 
"<span class=\"comment\"> * @vb:   In-memory vblk in which to return information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Read a raw VBLK object into a vblk structure.  This function just reads the</span>", 
"<span class=\"comment\"> * information common to all VBLK types, then delegates the rest of the work to</span>", 
"<span class=\"comment\"> * helper functions: ldm_parse_*.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   @vb contains a VBLK</span>", 
"<span class=\"comment\"> *          'false'  @vb contents are not defined</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_parse_vblk\">ldm_parse_vblk</a> (const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>, struct <a class=\"id\" href=\"#vblk\">vblk</a> *<a class=\"id\" href=\"#vb\">vb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r_objid\">r_objid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#buf\">buf</a> || !<a class=\"id\" href=\"#vb\">vb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r_objid\">r_objid</a> = <a class=\"id\" href=\"#ldm_relative\">ldm_relative</a> (<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, 0x18, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r_objid\">r_objid</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a> (\"VBLK header is corrupt.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#flags\">flags</a>  = <a class=\"id\" href=\"#buf\">buf</a>[0x12];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#type\">type</a>   = <a class=\"id\" href=\"#buf\">buf</a>[0x13];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#obj_id\">obj_id</a> = <a class=\"id\" href=\"#ldm_get_vnum\">ldm_get_vnum</a> (<a class=\"id\" href=\"#buf\">buf</a> + 0x18);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ldm_get_vstr\">ldm_get_vstr</a> (<a class=\"id\" href=\"#buf\">buf</a>+0x18+<a class=\"id\" href=\"#r_objid\">r_objid</a>, <a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#name\">name</a>, sizeof (<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#name\">name</a>));", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#VBLK_CMP3\">VBLK_CMP3</a>:  <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#ldm_parse_cmp3\">ldm_parse_cmp3</a> (<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#vb\">vb</a>); break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#VBLK_DSK3\">VBLK_DSK3</a>:  <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#ldm_parse_dsk3\">ldm_parse_dsk3</a> (<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#vb\">vb</a>); break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#VBLK_DSK4\">VBLK_DSK4</a>:  <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#ldm_parse_dsk4\">ldm_parse_dsk4</a> (<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#vb\">vb</a>); break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#VBLK_DGR3\">VBLK_DGR3</a>:  <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#ldm_parse_dgr3\">ldm_parse_dgr3</a> (<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#vb\">vb</a>); break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#VBLK_DGR4\">VBLK_DGR4</a>:  <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#ldm_parse_dgr4\">ldm_parse_dgr4</a> (<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#vb\">vb</a>); break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#VBLK_PRT3\">VBLK_PRT3</a>:  <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#ldm_parse_prt3\">ldm_parse_prt3</a> (<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#vb\">vb</a>); break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#VBLK_VOL5\">VBLK_VOL5</a>:  <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#ldm_parse_vol5\">ldm_parse_vol5</a> (<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#vb\">vb</a>); break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_debug\">ldm_debug</a> (\"Parsed VBLK 0x%llx (type: 0x%02x) ok.\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long long) <a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#obj_id\">obj_id</a>, <a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a> (\"Failed to parse VBLK 0x%llx (type: 0x%02x).\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long) <a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#obj_id\">obj_id</a>, <a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_ldmdb_add - Adds a raw VBLK entry to the ldmdb database</span>", 
"<span class=\"comment\"> * @data:  Raw VBLK to add to the database</span>", 
"<span class=\"comment\"> * @len:   Size of the raw VBLK</span>", 
"<span class=\"comment\"> * @ldb:   Cache of the database structures</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The VBLKs are sorted into categories.  Partitions are also sorted by offset.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * N.B.  This function does not check the validity of the VBLKs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   The VBLK was added</span>", 
"<span class=\"comment\"> *          'false'  An error occurred</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_ldmdb_add\">ldm_ldmdb_add</a> (<a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#len\">len</a>, struct <a class=\"id\" href=\"#ldmdb\">ldmdb</a> *<a class=\"id\" href=\"#ldb\">ldb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vblk\">vblk</a> *<a class=\"id\" href=\"#vb\">vb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#item\">item</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#data\">data</a> || !<a class=\"id\" href=\"#ldb\">ldb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vb\">vb</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a> (sizeof (*<a class=\"id\" href=\"#vb\">vb</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vb\">vb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a> (\"Out of memory.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ldm_parse_vblk\">ldm_parse_vblk</a> (<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#vb\">vb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#vb\">vb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Already logged */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Put vblk into the correct list. */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#VBLK_DGR3\">VBLK_DGR3</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#VBLK_DGR4\">VBLK_DGR4</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a> (&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#v_dgrp\">v_dgrp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#VBLK_DSK3\">VBLK_DSK3</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#VBLK_DSK4\">VBLK_DSK4</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a> (&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#v_disk\">v_disk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#VBLK_VOL5\">VBLK_VOL5</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a> (&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#v_volu\">v_volu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#VBLK_CMP3\">VBLK_CMP3</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a> (&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#v_comp\">v_comp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#VBLK_PRT3\">VBLK_PRT3</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Sort by the partition's start sector. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each\">list_for_each</a> (<a class=\"id\" href=\"#item\">item</a>, &amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#v_part\">v_part</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vblk\">vblk</a> *<a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a> (<a class=\"id\" href=\"#item\">item</a>, struct <a class=\"id\" href=\"#vblk\">vblk</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#vblk\">vblk</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#disk_id\">disk_id</a> == <a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#vblk\">vblk</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#disk_id\">disk_id</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#vblk\">vblk</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#vblk\">vblk</a>.<a class=\"id\" href=\"#part\">part</a>.<a class=\"id\" href=\"#start\">start</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a> (&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a> (&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#v_part\">v_part</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_frag_add - Add a VBLK fragment to a list</span>", 
"<span class=\"comment\"> * @data:   Raw fragment to be added to the list</span>", 
"<span class=\"comment\"> * @size:   Size of the raw fragment</span>", 
"<span class=\"comment\"> * @frags:  Linked list of VBLK fragments</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Fragmented VBLKs may not be consecutive in the database, so they are placed</span>", 
"<span class=\"comment\"> * in a list so they can be pieced together later.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   Success, the VBLK was added to the list</span>", 
"<span class=\"comment\"> *          'false'  Error, a problem occurred</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_frag_add\">ldm_frag_add</a> (const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#size\">size</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#frags\">frags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#frag\">frag</a> *<a class=\"id\" href=\"#f\">f</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#item\">item</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rec\">rec</a>, <a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#group\">group</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#data\">data</a> || !<a class=\"id\" href=\"#frags\">frags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(<a class=\"id\" href=\"#data\">data</a> + 0x08);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a>   = <a class=\"id\" href=\"#get_unaligned_be16\">get_unaligned_be16</a>(<a class=\"id\" href=\"#data\">data</a> + 0x0C);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>   = <a class=\"id\" href=\"#get_unaligned_be16\">get_unaligned_be16</a>(<a class=\"id\" href=\"#data\">data</a> + 0x0E);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#num\">num</a> &lt; 1) || (<a class=\"id\" href=\"#num\">num</a> &gt; 4)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a> (\"A VBLK claims to have %d parts.\", <a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each\">list_for_each</a> (<a class=\"id\" href=\"#item\">item</a>, <a class=\"id\" href=\"#frags\">frags</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a> (<a class=\"id\" href=\"#item\">item</a>, struct <a class=\"id\" href=\"#frag\">frag</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#group\">group</a> == <a class=\"id\" href=\"#group\">group</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a> (sizeof (*<a class=\"id\" href=\"#f\">f</a>) + <a class=\"id\" href=\"#size\">size</a>*<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#f\">f</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a> (\"Out of memory.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#num\">num</a>   = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#rec\">rec</a>   = <a class=\"id\" href=\"#rec\">rec</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#map\">map</a>   = 0xFF << <a class=\"id\" href=\"#num\">num</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a> (&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#frags\">frags</a>);", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#map\">map</a> &amp; (1 << <a class=\"id\" href=\"#rec\">rec</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a> (\"Duplicate VBLK, part %d.\", <a class=\"id\" href=\"#rec\">rec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#map\">map</a> &= 0x7F;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Mark the group as broken */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#map\">map</a> |= (1 << <a class=\"id\" href=\"#rec\">rec</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num\">num</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> += <a class=\"id\" href=\"#VBLK_SIZE_HEAD\">VBLK_SIZE_HEAD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#VBLK_SIZE_HEAD\">VBLK_SIZE_HEAD</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a> (<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#data\">data</a>+<a class=\"id\" href=\"#rec\">rec</a>*(<a class=\"id\" href=\"#size\">size</a>-<a class=\"id\" href=\"#VBLK_SIZE_HEAD\">VBLK_SIZE_HEAD</a>)+<a class=\"id\" href=\"#VBLK_SIZE_HEAD\">VBLK_SIZE_HEAD</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_frag_free - Free a linked list of VBLK fragments</span>", 
"<span class=\"comment\"> * @list:  Linked list of fragments</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Free a linked list of VBLK fragments</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  none</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ldm_frag_free\">ldm_frag_free</a> (struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#item\">item</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_safe\">list_for_each_safe</a> (<a class=\"id\" href=\"#item\">item</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a> (<a class=\"id\" href=\"#list_entry\">list_entry</a> (<a class=\"id\" href=\"#item\">item</a>, struct <a class=\"id\" href=\"#frag\">frag</a>, <a class=\"id\" href=\"#list\">list</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_frag_commit - Validate fragmented VBLKs and add them to the database</span>", 
"<span class=\"comment\"> * @frags:  Linked list of VBLK fragments</span>", 
"<span class=\"comment\"> * @ldb:    Cache of the database structures</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Now that all the fragmented VBLKs have been collected, they must be added to</span>", 
"<span class=\"comment\"> * the database for later use.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   All the fragments we added successfully</span>", 
"<span class=\"comment\"> *          'false'  One or more of the fragments we invalid</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_frag_commit\">ldm_frag_commit</a> (struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#frags\">frags</a>, struct <a class=\"id\" href=\"#ldmdb\">ldmdb</a> *<a class=\"id\" href=\"#ldb\">ldb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#frag\">frag</a> *<a class=\"id\" href=\"#f\">f</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#item\">item</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#frags\">frags</a> || !<a class=\"id\" href=\"#ldb\">ldb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each\">list_for_each</a> (<a class=\"id\" href=\"#item\">item</a>, <a class=\"id\" href=\"#frags\">frags</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a> (<a class=\"id\" href=\"#item\">item</a>, struct <a class=\"id\" href=\"#frag\">frag</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#map\">map</a> != 0xFF) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a> (\"VBLK group %d is incomplete (0x%02x).\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#map\">map</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ldm_ldmdb_add\">ldm_ldmdb_add</a> (<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#num\">num</a>*<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#vm\">vm</a>.<a class=\"id\" href=\"#vblk_size\">vblk_size</a>, <a class=\"id\" href=\"#ldb\">ldb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Already logged */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_get_vblks - Read the on-disk database of VBLKs into memory</span>", 
"<span class=\"comment\"> * @state: Partition check state including device holding the LDM Database</span>", 
"<span class=\"comment\"> * @base:  Offset, into @state-&gt;bdev, of the database</span>", 
"<span class=\"comment\"> * @ldb:   Cache of the database structures</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To use the information from the VBLKs, they need to be read from the disk,</span>", 
"<span class=\"comment\"> * unpacked and validated.  We cache them in @ldb according to their type.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   All the VBLKs were read successfully</span>", 
"<span class=\"comment\"> *          'false'  An error occurred</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_get_vblks\">ldm_get_vblks</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>, unsigned long <a class=\"id\" href=\"#base\">base</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#ldmdb\">ldmdb</a> *<a class=\"id\" href=\"#ldb\">ldb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#perbuf\">perbuf</a>, <a class=\"id\" href=\"#skip\">skip</a>, <a class=\"id\" href=\"#finish\">finish</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#recs\">recs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Sector\">Sector</a> <a class=\"id\" href=\"#sect\">sect</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a> (<a class=\"id\" href=\"#frags\">frags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#state\">state</a> || !<a class=\"id\" href=\"#ldb\">ldb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>   = <a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#vm\">vm</a>.<a class=\"id\" href=\"#vblk_size\">vblk_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perbuf\">perbuf</a> = 512 / <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skip\">skip</a>   = <a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#vm\">vm</a>.<a class=\"id\" href=\"#vblk_offset\">vblk_offset</a> >> 9;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Bytes to sectors */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finish\">finish</a> = (<a class=\"id\" href=\"#size\">size</a> * <a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#vm\">vm</a>.<a class=\"id\" href=\"#last_vblk_seq\">last_vblk_seq</a>) >> 9;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#skip\">skip</a>; <a class=\"id\" href=\"#s\">s</a> &lt; <a class=\"id\" href=\"#finish\">finish</a>; <a class=\"id\" href=\"#s\">s</a>++) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* For each sector */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#read_part_sector\">read_part_sector</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#OFF_VMDB\">OFF_VMDB</a> + <a class=\"id\" href=\"#s\">s</a>, &amp;<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a> (\"Disk read failed.\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#v\">v</a> = 0; <a class=\"id\" href=\"#v\">v</a> &lt; <a class=\"id\" href=\"#perbuf\">perbuf</a>; <a class=\"id\" href=\"#v\">v</a>++, <a class=\"id\" href=\"#data\">data</a>+=<a class=\"id\" href=\"#size\">size</a>) {  <span class=\"comment\">/* For each vblk */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#MAGIC_VBLK\">MAGIC_VBLK</a> != <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(<a class=\"id\" href=\"#data\">data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a> (\"Expected to find a VBLK.\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#recs\">recs</a> = <a class=\"id\" href=\"#get_unaligned_be16\">get_unaligned_be16</a>(<a class=\"id\" href=\"#data\">data</a> + 0x0E);<span class=\"ts\"/><span class=\"comment\">/* Number of records */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#recs\">recs</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ldm_ldmdb_add\">ldm_ldmdb_add</a> (<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#ldb\">ldb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;<span class=\"ts\"/><span class=\"comment\">/* Already logged */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#recs\">recs</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ldm_frag_add\">ldm_frag_add</a> (<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#size\">size</a>, &amp;<a class=\"id\" href=\"#frags\">frags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;<span class=\"ts\"/><span class=\"comment\">/* Already logged */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* else Record is not in use, ignore it. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a> (<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#ldm_frag_commit\">ldm_frag_commit</a> (&amp;<a class=\"id\" href=\"#frags\">frags</a>, <a class=\"id\" href=\"#ldb\">ldb</a>);<span class=\"ts\"/><span class=\"comment\">/* Failures, already logged */</span>", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a> (<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ldm_frag_free\">ldm_frag_free</a> (&amp;<a class=\"id\" href=\"#frags\">frags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_free_vblks - Free a linked list of vblk's</span>", 
"<span class=\"comment\"> * @lh:  Head of a linked list of struct vblk</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Free a list of vblk's and free the memory used to maintain the list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  none</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ldm_free_vblks\">ldm_free_vblks</a> (struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#lh\">lh</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#item\">item</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#lh\">lh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_safe\">list_for_each_safe</a> (<a class=\"id\" href=\"#item\">item</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#lh\">lh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a> (<a class=\"id\" href=\"#list_entry\">list_entry</a> (<a class=\"id\" href=\"#item\">item</a>, struct <a class=\"id\" href=\"#vblk\">vblk</a>, <a class=\"id\" href=\"#list\">list</a>));", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_partition - Find out whether a device is a dynamic disk and handle it</span>", 
"<span class=\"comment\"> * @state: Partition check state including device holding the LDM Database</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This determines whether the device @bdev is a dynamic disk and if so creates</span>", 
"<span class=\"comment\"> * the partitions necessary in the gendisk structure pointed to by @hd.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We create a dummy device 1, which contains the LDM database, and then create</span>", 
"<span class=\"comment\"> * each partition described by the LDM database in sequence as devices 2+. For</span>", 
"<span class=\"comment\"> * example, if the device is hda, we would have: hda1: LDM database, hda2, hda3,</span>", 
"<span class=\"comment\"> * and so on: the actual data containing partitions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  1 Success, @state-&gt;bdev is a dynamic disk and we handled it</span>", 
"<span class=\"comment\"> *          0 Success, @state-&gt;bdev is not a dynamic disk</span>", 
"<span class=\"comment\"> *         -1 An error occurred before enough information had been read</span>", 
"<span class=\"comment\"> *            Or @state-&gt;bdev is a dynamic disk, but it may be corrupted</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ldm_partition\">ldm_partition</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ldmdb\">ldmdb</a>  *<a class=\"id\" href=\"#ldb\">ldb</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a> = -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Look for signs of a Dynamic Disk */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ldm_validate_partition_table\">ldm_validate_partition_table</a>(<a class=\"id\" href=\"#state\">state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ldb\">ldb</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a> (sizeof (*<a class=\"id\" href=\"#ldb\">ldb</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ldb\">ldb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a> (\"Out of memory.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Parse and check privheads. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ldm_validate_privheads\">ldm_validate_privheads</a>(<a class=\"id\" href=\"#state\">state</a>, &amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#ph\">ph</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Already logged */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* All further references are relative to base (database start). */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#ph\">ph</a>.<a class=\"id\" href=\"#config_start\">config_start</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Parse and check tocs and vmdb. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ldm_validate_tocblocks\">ldm_validate_tocblocks</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#ldb\">ldb</a>) ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#ldm_validate_vmdb\">ldm_validate_vmdb</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#ldb\">ldb</a>))", 
"<span class=\"ts\"/>    <span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Already logged */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize vblk lists in ldmdb struct */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a> (&amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#v_dgrp\">v_dgrp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a> (&amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#v_disk\">v_disk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a> (&amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#v_volu\">v_volu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a> (&amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#v_comp\">v_comp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a> (&amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#v_part\">v_part</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ldm_get_vblks\">ldm_get_vblks</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#ldb\">ldb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a> (\"Failed to read the VBLKs from the database.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Finally, create the data partition devices. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ldm_create_data_partitions\">ldm_create_data_partitions</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#ldb\">ldb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_debug\">ldm_debug</a> (\"Parsed LDM database successfully.\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* else Already logged */</span>", 
"", 
"<a class=\"id\" href=\"#cleanup\">cleanup</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ldm_free_vblks\">ldm_free_vblks</a> (&amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#v_dgrp\">v_dgrp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ldm_free_vblks\">ldm_free_vblks</a> (&amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#v_disk\">v_disk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ldm_free_vblks\">ldm_free_vblks</a> (&amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#v_volu\">v_volu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ldm_free_vblks\">ldm_free_vblks</a> (&amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#v_comp\">v_comp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ldm_free_vblks\">ldm_free_vblks</a> (&amp;<a class=\"id\" href=\"#ldb\">ldb</a>-><a class=\"id\" href=\"#v_part\">v_part</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a> (<a class=\"id\" href=\"#ldb\">ldb</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
];
xr_frag_insert('l/52/080bca0a0742508a093498eb796bc1305fa419.xr', __xr_tmp);
