var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * EFI Variables - efivars.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2001,2003,2004 Dell &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2004 Intel Corporation &lt;matthew.e.tolentino@intel.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This code takes all variables accessible from EFI runtime and</span>", 
"<span class=\"comment\"> *  exports them via sysfs</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *  it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *  the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> *  (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> *  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> *  GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> *  along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Changelog:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  17 May 2004 - Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> *   remove check for efi_enabled in exit</span>", 
"<span class=\"comment\"> *   add MODULE_VERSION</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  26 Apr 2004 - Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> *   minor bug fixes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  21 Apr 2004 - Matt Tolentino &lt;matthew.e.tolentino@intel.com)</span>", 
"<span class=\"comment\"> *   converted driver to export variable information via sysfs</span>", 
"<span class=\"comment\"> *   and moved to drivers/firmware directory</span>", 
"<span class=\"comment\"> *   bumped revision number to v0.07 to reflect conversion &amp; move</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  10 Dec 2002 - Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> *   fix locking per Peter Chubb's findings</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  25 Mar 2002 - Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> *   move uuid_unparse() to include/asm-ia64/efi.h:efi_guid_unparse()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  12 Feb 2002 - Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> *   use list_for_each_safe when deleting vars.</span>", 
"<span class=\"comment\"> *   remove ifdef CONFIG_SMP around include &lt;linux/smp.h&gt;</span>", 
"<span class=\"comment\"> *   v0.04 release to linux-ia64@linuxia64.org</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  20 April 2001 - Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> *   Moved vars from /proc/efi to /proc/efi/vars, and made</span>", 
"<span class=\"comment\"> *   efi.c own the /proc/efi directory.</span>", 
"<span class=\"comment\"> *   v0.03 release to linux-ia64@linuxia64.org</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  26 March 2001 - Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> *   At the request of Stephane, moved ownership of /proc/efi</span>", 
"<span class=\"comment\"> *   to efi.c, and now efivars lives under /proc/efi/vars.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  12 March 2001 - Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> *   Feedback received from Stephane Eranian incorporated.</span>", 
"<span class=\"comment\"> *   efivar_write() checks copy_from_user() return value.</span>", 
"<span class=\"comment\"> *   efivar_read/write() returns proper errno.</span>", 
"<span class=\"comment\"> *   v0.02 release to linux-ia64@linuxia64.org</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  26 February 2001 - Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> *   v0.01 release to linux-ia64@linuxia64.org</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#efi\">efi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysfs\">sysfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kobject\">kobject</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EFIVARS_VERSION\">EFIVARS_VERSION</a> \"0.08\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EFIVARS_DATE\">EFIVARS_DATE</a> \"2004-May-17\"", 
"", 
"<a class=\"id\" href=\"#MODULE_AUTHOR\">MODULE_AUTHOR</a>(\"Matt Domsch <Matt_Domsch@Dell.com>\");", 
"<a class=\"id\" href=\"#MODULE_DESCRIPTION\">MODULE_DESCRIPTION</a>(\"sysfs interface to EFI Variables\");", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
"<a class=\"id\" href=\"#MODULE_VERSION\">MODULE_VERSION</a>(<a class=\"id\" href=\"#EFIVARS_VERSION\">EFIVARS_VERSION</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * efivars_lock protects two things:</span>", 
"<span class=\"comment\"> * 1) efivar_list - adds, removals, reads, writes</span>", 
"<span class=\"comment\"> * 2) efi.[gs]et_variable() calls.</span>", 
"<span class=\"comment\"> * It must not be held when creating sysfs entries or calling kmalloc.</span>", 
"<span class=\"comment\"> * efi.get_next_variable() is only called from efivars_init(),</span>", 
"<span class=\"comment\"> * which is protected by the BKL, so that path is safe.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#efivars_lock\">efivars_lock</a>);", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#efivar_list\">efivar_list</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The maximum size of VariableName + Data = 1024</span>", 
"<span class=\"comment\"> * Therefore, it's reasonable to save that much</span>", 
"<span class=\"comment\"> * space in each part of the structure,</span>", 
"<span class=\"comment\"> * and we use a page for reading/writing.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#efi_variable\">efi_variable</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#efi_char16_t\">efi_char16_t</a>  <a class=\"id\" href=\"#VariableName\">VariableName</a>[1024/sizeof(<a class=\"id\" href=\"#efi_char16_t\">efi_char16_t</a>)];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#efi_guid_t\">efi_guid_t</a>    <a class=\"id\" href=\"#VendorGuid\">VendorGuid</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#DataSize\">DataSize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a>          <a class=\"id\" href=\"#Data\">Data</a>[1024];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#efi_status_t\">efi_status_t</a>  <a class=\"id\" href=\"#Status\">Status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a>         <a class=\"id\" href=\"#Attributes\">Attributes</a>;", 
"} <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#packed\">packed</a>));", 
"", 
"", 
"struct <a class=\"id\" href=\"#efivar_entry\">efivar_entry</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#efi_variable\">efi_variable</a> <a class=\"id\" href=\"#var\">var</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> <a class=\"id\" href=\"#kobj\">kobj</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#efivar_attribute\">efivar_attribute</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#attribute\">attribute</a> <a class=\"id\" href=\"#attr\">attr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#show\">show</a>) (struct <a class=\"id\" href=\"#efivar_entry\">efivar_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, char *<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#store\">store</a>)(struct <a class=\"id\" href=\"#efivar_entry\">efivar_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>);", 
"};", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EFIVAR_ATTR\">EFIVAR_ATTR</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#_mode\">_mode</a>, <a class=\"id\" href=\"#_show\">_show</a>, <a class=\"id\" href=\"#_store\">_store</a>) \\", 
"struct <a class=\"id\" href=\"#efivar_attribute\">efivar_attribute</a> <a class=\"id\" href=\"#efivar_attr_\">efivar_attr_</a>##<a class=\"id\" href=\"#_name\">_name</a> = { \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#attr\">attr</a> = {.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#__stringify\">__stringify</a>(<a class=\"id\" href=\"#_name\">_name</a>), .<a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#_mode\">_mode</a>}, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a> = <a class=\"id\" href=\"#_show\">_show</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#store\">store</a> = <a class=\"id\" href=\"#_store\">_store</a>, \\", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_efivar_attr\">to_efivar_attr</a>(<a class=\"id\" href=\"#_attr\">_attr</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#_attr\">_attr</a>, struct <a class=\"id\" href=\"#efivar_attribute\">efivar_attribute</a>, <a class=\"id\" href=\"#attr\">attr</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_efivar_entry\">to_efivar_entry</a>(<a class=\"id\" href=\"#obj\">obj</a>)  <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#obj\">obj</a>, struct <a class=\"id\" href=\"#efivar_entry\">efivar_entry</a>, <a class=\"id\" href=\"#kobj\">kobj</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Prototype for sysfs creation function</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#efivar_create_sysfs_entry\">efivar_create_sysfs_entry</a>(unsigned long <a class=\"id\" href=\"#variable_name_size\">variable_name_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#efi_char16_t\">efi_char16_t</a> *<a class=\"id\" href=\"#variable_name\">variable_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#efi_guid_t\">efi_guid_t</a> *<a class=\"id\" href=\"#vendor_guid\">vendor_guid</a>);", 
"", 
"<span class=\"comment\">/* Return the number of unicode characters in data */</span>", 
"static unsigned long", 
"<a class=\"id\" href=\"#utf8_strlen\">utf8_strlen</a>(<a class=\"id\" href=\"#efi_char16_t\">efi_char16_t</a> *<a class=\"id\" href=\"#data\">data</a>, unsigned long <a class=\"id\" href=\"#maxlength\">maxlength</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#length\">length</a> = 0;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#data\">data</a>++ != 0 && <a class=\"id\" href=\"#length\">length</a> &lt; <a class=\"id\" href=\"#maxlength\">maxlength</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a>++;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#length\">length</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the number of bytes is the length of this string</span>", 
"<span class=\"comment\"> * Note: this is NOT the same as the number of unicode characters</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long", 
"<a class=\"id\" href=\"#utf8_strsize\">utf8_strsize</a>(<a class=\"id\" href=\"#efi_char16_t\">efi_char16_t</a> *<a class=\"id\" href=\"#data\">data</a>, unsigned long <a class=\"id\" href=\"#maxlength\">maxlength</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#utf8_strlen\">utf8_strlen</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#maxlength\">maxlength</a>/sizeof(<a class=\"id\" href=\"#efi_char16_t\">efi_char16_t</a>)) * sizeof(<a class=\"id\" href=\"#efi_char16_t\">efi_char16_t</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#efi_status_t\">efi_status_t</a>", 
"<a class=\"id\" href=\"#get_var_data\">get_var_data</a>(struct <a class=\"id\" href=\"#efi_variable\">efi_variable</a> *<a class=\"id\" href=\"#var\">var</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#efi_status_t\">efi_status_t</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#efivars_lock\">efivars_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#var\">var</a>-><a class=\"id\" href=\"#DataSize\">DataSize</a> = 1024;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#efi\">efi</a>.<a class=\"id\" href=\"#get_variable\">get_variable</a>(<a class=\"id\" href=\"#var\">var</a>-><a class=\"id\" href=\"#VariableName\">VariableName</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#var\">var</a>-><a class=\"id\" href=\"#VendorGuid\">VendorGuid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#var\">var</a>-><a class=\"id\" href=\"#Attributes\">Attributes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#var\">var</a>-><a class=\"id\" href=\"#DataSize\">DataSize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#var\">var</a>-><a class=\"id\" href=\"#Data\">Data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#efivars_lock\">efivars_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#EFI_SUCCESS\">EFI_SUCCESS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"efivars: get_variable() failed 0x%lx!\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#efivar_guid_read\">efivar_guid_read</a>(struct <a class=\"id\" href=\"#efivar_entry\">efivar_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#efi_variable\">efi_variable</a> *<a class=\"id\" href=\"#var\">var</a> = &amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#var\">var</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#entry\">entry</a> || !<a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#efi_guid_unparse\">efi_guid_unparse</a>(&amp;<a class=\"id\" href=\"#var\">var</a>-><a class=\"id\" href=\"#VendorGuid\">VendorGuid</a>, <a class=\"id\" href=\"#str\">str</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> += <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#str\">str</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> += <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#str\">str</a>, \"\\n\");", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#str\">str</a> - <a class=\"id\" href=\"#buf\">buf</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#efivar_attr_read\">efivar_attr_read</a>(struct <a class=\"id\" href=\"#efivar_entry\">efivar_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#efi_variable\">efi_variable</a> *<a class=\"id\" href=\"#var\">var</a> = &amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#var\">var</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#efi_status_t\">efi_status_t</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#entry\">entry</a> || !<a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#get_var_data\">get_var_data</a>(<a class=\"id\" href=\"#var\">var</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#EFI_SUCCESS\">EFI_SUCCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#var\">var</a>-><a class=\"id\" href=\"#Attributes\">Attributes</a> &amp; 0x1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> += <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#str\">str</a>, \"EFI_VARIABLE_NON_VOLATILE\\n\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#var\">var</a>-><a class=\"id\" href=\"#Attributes\">Attributes</a> &amp; 0x2)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> += <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#str\">str</a>, \"EFI_VARIABLE_BOOTSERVICE_ACCESS\\n\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#var\">var</a>-><a class=\"id\" href=\"#Attributes\">Attributes</a> &amp; 0x4)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> += <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#str\">str</a>, \"EFI_VARIABLE_RUNTIME_ACCESS\\n\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#str\">str</a> - <a class=\"id\" href=\"#buf\">buf</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#efivar_size_read\">efivar_size_read</a>(struct <a class=\"id\" href=\"#efivar_entry\">efivar_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#efi_variable\">efi_variable</a> *<a class=\"id\" href=\"#var\">var</a> = &amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#var\">var</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#efi_status_t\">efi_status_t</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#entry\">entry</a> || !<a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#get_var_data\">get_var_data</a>(<a class=\"id\" href=\"#var\">var</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#EFI_SUCCESS\">EFI_SUCCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> += <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#str\">str</a>, \"0x%lx\\n\", <a class=\"id\" href=\"#var\">var</a>-><a class=\"id\" href=\"#DataSize\">DataSize</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#str\">str</a> - <a class=\"id\" href=\"#buf\">buf</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#efivar_data_read\">efivar_data_read</a>(struct <a class=\"id\" href=\"#efivar_entry\">efivar_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#efi_variable\">efi_variable</a> *<a class=\"id\" href=\"#var\">var</a> = &amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#var\">var</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#efi_status_t\">efi_status_t</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#entry\">entry</a> || !<a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#get_var_data\">get_var_data</a>(<a class=\"id\" href=\"#var\">var</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#EFI_SUCCESS\">EFI_SUCCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#var\">var</a>-><a class=\"id\" href=\"#Data\">Data</a>, <a class=\"id\" href=\"#var\">var</a>-><a class=\"id\" href=\"#DataSize\">DataSize</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#var\">var</a>-><a class=\"id\" href=\"#DataSize\">DataSize</a>;", 
"}", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We allow each variable to be edited via rewriting the</span>", 
"<span class=\"comment\"> * entire efi variable structure.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#efivar_store_raw\">efivar_store_raw</a>(struct <a class=\"id\" href=\"#efivar_entry\">efivar_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#efi_variable\">efi_variable</a> *<a class=\"id\" href=\"#new_var\">new_var</a>, *<a class=\"id\" href=\"#var\">var</a> = &amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#var\">var</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#efi_status_t\">efi_status_t</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#EFI_NOT_FOUND\">EFI_NOT_FOUND</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> != sizeof(struct <a class=\"id\" href=\"#efi_variable\">efi_variable</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_var\">new_var</a> = (struct <a class=\"id\" href=\"#efi_variable\">efi_variable</a> *)<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If only updating the variable data, then the name</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and guid should remain the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#new_var\">new_var</a>-><a class=\"id\" href=\"#VariableName\">VariableName</a>, <a class=\"id\" href=\"#var\">var</a>-><a class=\"id\" href=\"#VariableName\">VariableName</a>, sizeof(<a class=\"id\" href=\"#var\">var</a>-><a class=\"id\" href=\"#VariableName\">VariableName</a>)) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#efi_guidcmp\">efi_guidcmp</a>(<a class=\"id\" href=\"#new_var\">new_var</a>-><a class=\"id\" href=\"#VendorGuid\">VendorGuid</a>, <a class=\"id\" href=\"#var\">var</a>-><a class=\"id\" href=\"#VendorGuid\">VendorGuid</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"efivars: Cannot edit the wrong variable!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#new_var\">new_var</a>-><a class=\"id\" href=\"#DataSize\">DataSize</a> <= 0) || (<a class=\"id\" href=\"#new_var\">new_var</a>-><a class=\"id\" href=\"#Attributes\">Attributes</a> == 0)){", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"efivars: DataSize & Attributes must be valid!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#efivars_lock\">efivars_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#efi\">efi</a>.<a class=\"id\" href=\"#set_variable\">set_variable</a>(<a class=\"id\" href=\"#new_var\">new_var</a>-><a class=\"id\" href=\"#VariableName\">VariableName</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#new_var\">new_var</a>-><a class=\"id\" href=\"#VendorGuid\">VendorGuid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_var\">new_var</a>-><a class=\"id\" href=\"#Attributes\">Attributes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_var\">new_var</a>-><a class=\"id\" href=\"#DataSize\">DataSize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_var\">new_var</a>-><a class=\"id\" href=\"#Data\">Data</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#efivars_lock\">efivars_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#EFI_SUCCESS\">EFI_SUCCESS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"efivars: set_variable() failed: status=%lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#var\">var</a>, <a class=\"id\" href=\"#new_var\">new_var</a>, <a class=\"id\" href=\"#count\">count</a>);", 
];
xr_frag_insert('l/52/18597e7c271a76fd0b6e02b51392f4a9a28ed2.xr', __xr_tmp);
