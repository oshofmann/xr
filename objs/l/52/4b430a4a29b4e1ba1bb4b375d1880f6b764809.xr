var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Read-Copy Update mechanism for mutual exclusion (tree-based version)</span>", 
"<span class=\"comment\"> * Internal non-public definitions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright IBM Corporation, 2008</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author: Ingo Molnar &lt;mingo@elte.hu&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   Paul E. McKenney &lt;paulmck@linux.vnet.ibm.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cache\">cache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#threads\">threads</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpumask\">cpumask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seqlock\">seqlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Define shape of hierarchy based on NR_CPUS and CONFIG_RCU_FANOUT.</span>", 
"<span class=\"comment\"> * In theory, it should be possible to add more levels straightforwardly.</span>", 
"<span class=\"comment\"> * In practice, this has not been tested, so there is probably some</span>", 
"<span class=\"comment\"> * bug somewhere.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_RCU_LVLS\">MAX_RCU_LVLS</a> 4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_FANOUT\">RCU_FANOUT</a><span class=\"ts\"/>      (<a class=\"id\" href=\"#CONFIG_RCU_FANOUT\">CONFIG_RCU_FANOUT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_FANOUT_SQ\">RCU_FANOUT_SQ</a><span class=\"ts\"/>      (<a class=\"id\" href=\"#RCU_FANOUT\">RCU_FANOUT</a> * <a class=\"id\" href=\"#RCU_FANOUT\">RCU_FANOUT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_FANOUT_CUBE\">RCU_FANOUT_CUBE</a><span class=\"ts\"/>      (<a class=\"id\" href=\"#RCU_FANOUT_SQ\">RCU_FANOUT_SQ</a> * <a class=\"id\" href=\"#RCU_FANOUT\">RCU_FANOUT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_FANOUT_FOURTH\">RCU_FANOUT_FOURTH</a>     (<a class=\"id\" href=\"#RCU_FANOUT_CUBE\">RCU_FANOUT_CUBE</a> * <a class=\"id\" href=\"#RCU_FANOUT\">RCU_FANOUT</a>)", 
"", 
"#if <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a> <= <a class=\"id\" href=\"#RCU_FANOUT\">RCU_FANOUT</a>", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVLS\">NUM_RCU_LVLS</a><span class=\"ts\"/>      1", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVL_0\">NUM_RCU_LVL_0</a><span class=\"ts\"/>      1", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVL_1\">NUM_RCU_LVL_1</a><span class=\"ts\"/>      (<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>)", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVL_2\">NUM_RCU_LVL_2</a><span class=\"ts\"/>      0", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVL_3\">NUM_RCU_LVL_3</a><span class=\"ts\"/>      0", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVL_4\">NUM_RCU_LVL_4</a><span class=\"ts\"/>      0", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a> <= <a class=\"id\" href=\"#RCU_FANOUT_SQ\">RCU_FANOUT_SQ</a>", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVLS\">NUM_RCU_LVLS</a><span class=\"ts\"/>      2", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVL_0\">NUM_RCU_LVL_0</a><span class=\"ts\"/>      1", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVL_1\">NUM_RCU_LVL_1</a><span class=\"ts\"/>      <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>, <a class=\"id\" href=\"#RCU_FANOUT\">RCU_FANOUT</a>)", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVL_2\">NUM_RCU_LVL_2</a><span class=\"ts\"/>      (<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>)", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVL_3\">NUM_RCU_LVL_3</a><span class=\"ts\"/>      0", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVL_4\">NUM_RCU_LVL_4</a><span class=\"ts\"/>      0", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a> <= <a class=\"id\" href=\"#RCU_FANOUT_CUBE\">RCU_FANOUT_CUBE</a>", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVLS\">NUM_RCU_LVLS</a><span class=\"ts\"/>      3", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVL_0\">NUM_RCU_LVL_0</a><span class=\"ts\"/>      1", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVL_1\">NUM_RCU_LVL_1</a><span class=\"ts\"/>      <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>, <a class=\"id\" href=\"#RCU_FANOUT_SQ\">RCU_FANOUT_SQ</a>)", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVL_2\">NUM_RCU_LVL_2</a><span class=\"ts\"/>      <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>, <a class=\"id\" href=\"#RCU_FANOUT\">RCU_FANOUT</a>)", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVL_3\">NUM_RCU_LVL_3</a><span class=\"ts\"/>      <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVL_4\">NUM_RCU_LVL_4</a><span class=\"ts\"/>      0", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a> <= <a class=\"id\" href=\"#RCU_FANOUT_FOURTH\">RCU_FANOUT_FOURTH</a>", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVLS\">NUM_RCU_LVLS</a><span class=\"ts\"/>      4", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVL_0\">NUM_RCU_LVL_0</a><span class=\"ts\"/>      1", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVL_1\">NUM_RCU_LVL_1</a><span class=\"ts\"/>      <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>, <a class=\"id\" href=\"#RCU_FANOUT_CUBE\">RCU_FANOUT_CUBE</a>)", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVL_2\">NUM_RCU_LVL_2</a><span class=\"ts\"/>      <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>, <a class=\"id\" href=\"#RCU_FANOUT_SQ\">RCU_FANOUT_SQ</a>)", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVL_3\">NUM_RCU_LVL_3</a><span class=\"ts\"/>      <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>, <a class=\"id\" href=\"#RCU_FANOUT\">RCU_FANOUT</a>)", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_LVL_4\">NUM_RCU_LVL_4</a><span class=\"ts\"/>      <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>", 
"#else", 
"# <a class=\"id\" href=\"#error\">error</a> \"CONFIG_RCU_FANOUT insufficient for NR_CPUS\"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #if (NR_CPUS) &lt;= RCU_FANOUT */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_SUM\">RCU_SUM</a> (<a class=\"id\" href=\"#NUM_RCU_LVL_0\">NUM_RCU_LVL_0</a> + <a class=\"id\" href=\"#NUM_RCU_LVL_1\">NUM_RCU_LVL_1</a> + <a class=\"id\" href=\"#NUM_RCU_LVL_2\">NUM_RCU_LVL_2</a> + <a class=\"id\" href=\"#NUM_RCU_LVL_3\">NUM_RCU_LVL_3</a> + <a class=\"id\" href=\"#NUM_RCU_LVL_4\">NUM_RCU_LVL_4</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_RCU_NODES\">NUM_RCU_NODES</a> (<a class=\"id\" href=\"#RCU_SUM\">RCU_SUM</a> - <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Dynticks per-CPU state.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#rcu_dynticks\">rcu_dynticks</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dynticks_nesting\">dynticks_nesting</a>;<span class=\"ts\"/><span class=\"comment\">/* Track nesting level, sort of. */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dynticks\">dynticks</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Even value for dynticks-idle, else odd. */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dynticks_nmi\">dynticks_nmi</a>;<span class=\"ts\"/><span class=\"comment\">/* Even value for either dynticks-idle or */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  not in nmi handler, else odd.  So this */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  remains even for nmi from irq handler. */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Definition for node within the RCU grace-period-detection hierarchy.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;<span class=\"ts\"/><span class=\"comment\">/* Root rcu_node's lock protects some */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  rcu_state fields as well as following. */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#gpnum\">gpnum</a>;<span class=\"ts\"/><span class=\"comment\">/* Current grace period for this node. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  This will either be equal to or one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  behind the root rcu_node's gpnum. */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#completed\">completed</a>; <span class=\"comment\">/* Last GP completed for this node. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  This will either be equal to or one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  behind the root rcu_node's gpnum. */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#qsmask\">qsmask</a>;<span class=\"ts\"/><span class=\"comment\">/* CPUs or groups that need to switch in */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  order for current grace period to proceed.*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  In leaf rcu_node, each bit corresponds to */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  an rcu_data structure, otherwise, each */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  bit corresponds to a child rcu_node */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  structure. */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#expmask\">expmask</a>;<span class=\"ts\"/><span class=\"comment\">/* Groups that have -&gt;blocked_tasks[] */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  elements that need to drain to allow the */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  current expedited grace period to */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  complete (only for TREE_PREEMPT_RCU). */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#qsmaskinit\">qsmaskinit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Per-GP initial value for qsmask &amp; expmask. */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#grpmask\">grpmask</a>;<span class=\"ts\"/><span class=\"comment\">/* Mask to apply to parent qsmask. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  Only one bit will be set in this mask. */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#grplo\">grplo</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* lowest-numbered CPU or group here. */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#grphi\">grphi</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* highest-numbered CPU or group here. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#grpnum\">grpnum</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* CPU/group number for next level up. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#level\">level</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* root is at level 0. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[4];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Tasks blocked in RCU read-side critsect. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  Grace period number (-&gt;gpnum) x blocked */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  by tasks on the (x &amp; 0x1) element of the */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  blocked_tasks[] array. */</span>", 
"} <a class=\"id\" href=\"#____cacheline_internodealigned_in_smp\">____cacheline_internodealigned_in_smp</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Do a full breadth-first scan of the rcu_node structures for the</span>", 
"<span class=\"comment\"> * specified rcu_state structure.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_for_each_node_breadth_first\">rcu_for_each_node_breadth_first</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>) \\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#rnp\">rnp</a>) = &amp;(<a class=\"id\" href=\"#rsp\">rsp</a>)-><a class=\"id\" href=\"#node\">node</a>[0]; \\", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#rnp\">rnp</a>) &lt; &amp;(<a class=\"id\" href=\"#rsp\">rsp</a>)-><a class=\"id\" href=\"#node\">node</a>[<a class=\"id\" href=\"#NUM_RCU_NODES\">NUM_RCU_NODES</a>]; (<a class=\"id\" href=\"#rnp\">rnp</a>)++)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Do a breadth-first scan of the non-leaf rcu_node structures for the</span>", 
"<span class=\"comment\"> * specified rcu_state structure.  Note that if there is a singleton</span>", 
"<span class=\"comment\"> * rcu_node tree with but one rcu_node structure, this loop is a no-op.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_for_each_nonleaf_node_breadth_first\">rcu_for_each_nonleaf_node_breadth_first</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>) \\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#rnp\">rnp</a>) = &amp;(<a class=\"id\" href=\"#rsp\">rsp</a>)-><a class=\"id\" href=\"#node\">node</a>[0]; \\", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#rnp\">rnp</a>) &lt; (<a class=\"id\" href=\"#rsp\">rsp</a>)-><a class=\"id\" href=\"#level\">level</a>[<a class=\"id\" href=\"#NUM_RCU_LVLS\">NUM_RCU_LVLS</a> - 1]; (<a class=\"id\" href=\"#rnp\">rnp</a>)++)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Scan the leaves of the rcu_node hierarchy for the specified rcu_state</span>", 
"<span class=\"comment\"> * structure.  Note that if there is a singleton rcu_node tree with but</span>", 
"<span class=\"comment\"> * one rcu_node structure, this loop -will- visit the rcu_node structure.</span>", 
"<span class=\"comment\"> * It is still a leaf node, even if it is also the root node.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_for_each_leaf_node\">rcu_for_each_leaf_node</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>) \\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#rnp\">rnp</a>) = (<a class=\"id\" href=\"#rsp\">rsp</a>)-><a class=\"id\" href=\"#level\">level</a>[<a class=\"id\" href=\"#NUM_RCU_LVLS\">NUM_RCU_LVLS</a> - 1]; \\", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#rnp\">rnp</a>) &lt; &amp;(<a class=\"id\" href=\"#rsp\">rsp</a>)-><a class=\"id\" href=\"#node\">node</a>[<a class=\"id\" href=\"#NUM_RCU_NODES\">NUM_RCU_NODES</a>]; (<a class=\"id\" href=\"#rnp\">rnp</a>)++)", 
"", 
"<span class=\"comment\">/* Index values for nxttail array in struct rcu_data. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_DONE_TAIL\">RCU_DONE_TAIL</a><span class=\"ts\"/><span class=\"ts\"/>0<span class=\"ts\"/><span class=\"comment\">/* Also RCU_WAIT head. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_WAIT_TAIL\">RCU_WAIT_TAIL</a><span class=\"ts\"/><span class=\"ts\"/>1<span class=\"ts\"/><span class=\"comment\">/* Also RCU_NEXT_READY head. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_NEXT_READY_TAIL\">RCU_NEXT_READY_TAIL</a><span class=\"ts\"/>2<span class=\"ts\"/><span class=\"comment\">/* Also RCU_NEXT head. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_NEXT_TAIL\">RCU_NEXT_TAIL</a><span class=\"ts\"/><span class=\"ts\"/>3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_NEXT_SIZE\">RCU_NEXT_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>4", 
"", 
"<span class=\"comment\">/* Per-CPU data for read-copy update. */</span>", 
"struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* 1) quiescent-state and grace-period handling : */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#completed\">completed</a>;<span class=\"ts\"/><span class=\"comment\">/* Track rsp-&gt;completed gp number */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  in order to detect GP end. */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#gpnum\">gpnum</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Highest gp number that this CPU */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  is aware of having started. */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#passed_quiesc_completed\">passed_quiesc_completed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Value of completed at time of qs. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#passed_quiesc\">passed_quiesc</a>;<span class=\"ts\"/><span class=\"comment\">/* User-mode/idle loop etc. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qs_pending\">qs_pending</a>;<span class=\"ts\"/><span class=\"comment\">/* Core waits for quiesc state. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#beenonline\">beenonline</a>;<span class=\"ts\"/><span class=\"comment\">/* CPU online at least once. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preemptable\">preemptable</a>;<span class=\"ts\"/><span class=\"comment\">/* Preemptable RCU? */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#mynode\">mynode</a>;<span class=\"ts\"/><span class=\"comment\">/* This CPU's leaf of hierarchy */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#grpmask\">grpmask</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Mask to apply to leaf qsmask. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 2) batch handling */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If nxtlist is not NULL, it is partitioned as follows.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Any of the partitions might be empty, in which case the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pointer to that partition will be equal to the pointer for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the following partition.  When the list is empty, all of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the nxttail elements point to the -&gt;nxtlist pointer itself,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which in that case is NULL.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * [nxtlist, *nxttail[RCU_DONE_TAIL]):</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Entries that batch # &lt;= -&gt;completed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>The grace period for these entries has completed, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>the other grace-period-completed entries may be moved</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>here temporarily in rcu_process_callbacks().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * [*nxttail[RCU_DONE_TAIL], *nxttail[RCU_WAIT_TAIL]):</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Entries that batch # &lt;= -&gt;completed - 1: waiting for current GP</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * [*nxttail[RCU_WAIT_TAIL], *nxttail[RCU_NEXT_READY_TAIL]):</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Entries known to have arrived before current GP ended</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * [*nxttail[RCU_NEXT_READY_TAIL], *nxttail[RCU_NEXT_TAIL]):</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Entries that might have arrived after current GP ended</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Note that the value of *nxttail[RCU_NEXT_TAIL] will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>always be NULL, as this is the end of the list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#nxtlist\">nxtlist</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> **<a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_NEXT_SIZE\">RCU_NEXT_SIZE</a>];", 
"<span class=\"ts\"/>long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qlen\">qlen</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* # of queued callbacks */</span>", 
"<span class=\"ts\"/>long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qlen_last_fqs_check\">qlen_last_fqs_check</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* qlen at last check for QS forcing */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#n_force_qs_snap\">n_force_qs_snap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* did other CPU force QS recently? */</span>", 
"<span class=\"ts\"/>long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blimit\">blimit</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Upper limit on a processed batch */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* 3) dynticks interface. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_dynticks\">rcu_dynticks</a> *<a class=\"id\" href=\"#dynticks\">dynticks</a>;<span class=\"ts\"/><span class=\"comment\">/* Shared per-CPU dynticks state. */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dynticks_snap\">dynticks_snap</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Per-GP tracking for dynticks. */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dynticks_nmi_snap\">dynticks_nmi_snap</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Per-GP tracking for dynticks_nmi. */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_NO_HZ */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 4) reasons this CPU needed to be kicked by force_quiescent_state */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dynticks_fqs\">dynticks_fqs</a>;<span class=\"ts\"/><span class=\"comment\">/* Kicked due to dynticks idle. */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_NO_HZ */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offline_fqs\">offline_fqs</a>;<span class=\"ts\"/><span class=\"comment\">/* Kicked due to being offline. */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#resched_ipi\">resched_ipi</a>;<span class=\"ts\"/><span class=\"comment\">/* Sent a resched IPI. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 5) __rcu_pending() statistics. */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n_rcu_pending\">n_rcu_pending</a>;<span class=\"ts\"/><span class=\"comment\">/* rcu_pending() calls since boot. */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n_rp_qs_pending\">n_rp_qs_pending</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n_rp_report_qs\">n_rp_report_qs</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n_rp_cb_ready\">n_rp_cb_ready</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n_rp_cpu_needs_gp\">n_rp_cpu_needs_gp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n_rp_gp_completed\">n_rp_gp_completed</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n_rp_gp_started\">n_rp_gp_started</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n_rp_need_fqs\">n_rp_need_fqs</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n_rp_need_nothing\">n_rp_need_nothing</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Values for signaled field in struct rcu_state. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_GP_IDLE\">RCU_GP_IDLE</a><span class=\"ts\"/><span class=\"ts\"/>0<span class=\"ts\"/><span class=\"comment\">/* No grace period in progress. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_GP_INIT\">RCU_GP_INIT</a><span class=\"ts\"/><span class=\"ts\"/>1<span class=\"ts\"/><span class=\"comment\">/* Grace period being initialized. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_SAVE_DYNTICK\">RCU_SAVE_DYNTICK</a><span class=\"ts\"/>2<span class=\"ts\"/><span class=\"comment\">/* Need to scan dyntick state. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_FORCE_QS\">RCU_FORCE_QS</a><span class=\"ts\"/><span class=\"ts\"/>3<span class=\"ts\"/><span class=\"comment\">/* Need to force quiescent state. */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_SIGNAL_INIT\">RCU_SIGNAL_INIT</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RCU_SAVE_DYNTICK\">RCU_SAVE_DYNTICK</a>", 
"#else <span class=\"comment\">/* #ifdef CONFIG_NO_HZ */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_SIGNAL_INIT\">RCU_SIGNAL_INIT</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RCU_FORCE_QS\">RCU_FORCE_QS</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #else #ifdef CONFIG_NO_HZ */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_JIFFIES_TILL_FORCE_QS\">RCU_JIFFIES_TILL_FORCE_QS</a><span class=\"ts\"/> 3<span class=\"ts\"/><span class=\"comment\">/* for rsp-&gt;jiffies_force_qs */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RCU_CPU_STALL_DETECTOR\">CONFIG_RCU_CPU_STALL_DETECTOR</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROVE_RCU\">CONFIG_PROVE_RCU</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_STALL_DELAY_DELTA\">RCU_STALL_DELAY_DELTA</a><span class=\"ts\"/>       (5 * <a class=\"id\" href=\"#HZ\">HZ</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_STALL_DELAY_DELTA\">RCU_STALL_DELAY_DELTA</a><span class=\"ts\"/>       0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_SECONDS_TILL_STALL_CHECK\">RCU_SECONDS_TILL_STALL_CHECK</a>   (10 * <a class=\"id\" href=\"#HZ\">HZ</a> + <a class=\"id\" href=\"#RCU_STALL_DELAY_DELTA\">RCU_STALL_DELAY_DELTA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for rsp-&gt;jiffies_stall */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_SECONDS_TILL_STALL_RECHECK\">RCU_SECONDS_TILL_STALL_RECHECK</a> (30 * <a class=\"id\" href=\"#HZ\">HZ</a> + <a class=\"id\" href=\"#RCU_STALL_DELAY_DELTA\">RCU_STALL_DELAY_DELTA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for rsp-&gt;jiffies_stall */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_STALL_RAT_DELAY\">RCU_STALL_RAT_DELAY</a><span class=\"ts\"/><span class=\"ts\"/>2<span class=\"ts\"/><span class=\"comment\">/* Allow other CPUs time */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  to take at least one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  scheduling clock irq */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  before ratting on them. */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_RCU_CPU_STALL_DETECTOR */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ULONG_CMP_GE\">ULONG_CMP_GE</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a> / 2 >= (<a class=\"id\" href=\"#a\">a</a>) - (<a class=\"id\" href=\"#b\">b</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ULONG_CMP_LT\">ULONG_CMP_LT</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a> / 2 &lt; (<a class=\"id\" href=\"#a\">a</a>) - (<a class=\"id\" href=\"#b\">b</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * RCU global state, including node hierarchy.  This hierarchy is</span>", 
"<span class=\"comment\"> * represented in \"heap\" form in a dense array.  The root (first level)</span>", 
"<span class=\"comment\"> * of the hierarchy is in -&gt;node[0] (referenced by -&gt;level[0]), the second</span>", 
"<span class=\"comment\"> * level in -&gt;node[1] through -&gt;node[m] (-&gt;node[1] referenced by -&gt;level[1]),</span>", 
"<span class=\"comment\"> * and the third level in -&gt;node[m+1] and following (-&gt;node[m+1] referenced</span>", 
"<span class=\"comment\"> * by -&gt;level[2]).  The number of levels is determined by the number of</span>", 
"<span class=\"comment\"> * CPUs and by CONFIG_RCU_FANOUT.  Small systems will have a \"hierarchy\"</span>", 
"<span class=\"comment\"> * consisting of a single rcu_node.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> <a class=\"id\" href=\"#node\">node</a>[<a class=\"id\" href=\"#NUM_RCU_NODES\">NUM_RCU_NODES</a>];<span class=\"ts\"/><span class=\"comment\">/* Hierarchy. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#level\">level</a>[<a class=\"id\" href=\"#NUM_RCU_LVLS\">NUM_RCU_LVLS</a>];<span class=\"ts\"/><span class=\"comment\">/* Hierarchy levels. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#levelcnt\">levelcnt</a>[<a class=\"id\" href=\"#MAX_RCU_LVLS\">MAX_RCU_LVLS</a> + 1];<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* # nodes in each level. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#levelspread\">levelspread</a>[<a class=\"id\" href=\"#NUM_RCU_LVLS\">NUM_RCU_LVLS</a>];<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* kids/node in each level. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rda\">rda</a>[<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>];<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* array of rdp pointers. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The following fields are guarded by the root rcu_node's lock. */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#signaled\">signaled</a> <a class=\"id\" href=\"#____cacheline_internodealigned_in_smp\">____cacheline_internodealigned_in_smp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Force QS state. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#fqs_active\">fqs_active</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* force_quiescent_state() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  is running. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#fqs_need_gp\">fqs_need_gp</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* A CPU was prevented from */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  starting a new grace */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  period because */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  force_quiescent_state() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  was running. */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#gpnum\">gpnum</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Current gp number. */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#completed\">completed</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* # of last completed gp. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* End of fields guarded by root rcu_node's lock. */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a> <a class=\"id\" href=\"#onofflock\">onofflock</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* exclude on/offline and */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  starting new GP.  Also */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  protects the following */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  orphan_cbs fields. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#orphan_cbs_list\">orphan_cbs_list</a>;<span class=\"ts\"/><span class=\"comment\">/* list of rcu_head structs */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  orphaned by all CPUs in */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  a given leaf rcu_node */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  going offline. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> **<a class=\"id\" href=\"#orphan_cbs_tail\">orphan_cbs_tail</a>;<span class=\"ts\"/><span class=\"comment\">/* And tail pointer. */</span>", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#orphan_qlen\">orphan_qlen</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Number of orphaned cbs. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a> <a class=\"id\" href=\"#fqslock\">fqslock</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Only one task forcing */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  quiescent states. */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#jiffies_force_qs\">jiffies_force_qs</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Time at which to invoke */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  force_quiescent_state(). */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n_force_qs\">n_force_qs</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Number of calls to */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  force_quiescent_state(). */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n_force_qs_lh\">n_force_qs_lh</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ~Number of calls leaving */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  due to lock unavailable. */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n_force_qs_ngp\">n_force_qs_ngp</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Number of calls leaving */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  due to no GP active. */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RCU_CPU_STALL_DETECTOR\">CONFIG_RCU_CPU_STALL_DETECTOR</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#gp_start\">gp_start</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Time at which GP started, */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  but in jiffies. */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#jiffies_stall\">jiffies_stall</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Time at which to check */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  for CPU stalls. */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_RCU_CPU_STALL_DETECTOR */</span>", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Name of structure. */</span>", 
"};", 
"", 
"<span class=\"comment\">/* Return values for rcu_preempt_offline_tasks(). */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_OFL_TASKS_NORM_GP\">RCU_OFL_TASKS_NORM_GP</a><span class=\"ts\"/>0x1<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Tasks blocking normal */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  GP were moved to root. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_OFL_TASKS_EXP_GP\">RCU_OFL_TASKS_EXP_GP</a><span class=\"ts\"/>0x2<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Tasks blocking expedited */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  GP were moved to root. */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * RCU implementation internal declarations:</span>", 
"<span class=\"comment\"> */</span>", 
"extern struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> <a class=\"id\" href=\"#rcu_sched_state\">rcu_sched_state</a>;", 
"<a class=\"id\" href=\"#DECLARE_PER_CPU\">DECLARE_PER_CPU</a>(struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a>, <a class=\"id\" href=\"#rcu_sched_data\">rcu_sched_data</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> <a class=\"id\" href=\"#rcu_bh_state\">rcu_bh_state</a>;", 
"<a class=\"id\" href=\"#DECLARE_PER_CPU\">DECLARE_PER_CPU</a>(struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a>, <a class=\"id\" href=\"#rcu_bh_data\">rcu_bh_data</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TREE_PREEMPT_RCU\">CONFIG_TREE_PREEMPT_RCU</a>", 
"extern struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> <a class=\"id\" href=\"#rcu_preempt_state\">rcu_preempt_state</a>;", 
"<a class=\"id\" href=\"#DECLARE_PER_CPU\">DECLARE_PER_CPU</a>(struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a>, <a class=\"id\" href=\"#rcu_preempt_data\">rcu_preempt_data</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_TREE_PREEMPT_RCU */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#RCU_TREE_NONCORE\">RCU_TREE_NONCORE</a>", 
"", 
"<span class=\"comment\">/* Forward declarations for rcutree_plugin.h */</span>", 
"static void <a class=\"id\" href=\"#rcu_bootup_announce\">rcu_bootup_announce</a>(void);", 
"long <a class=\"id\" href=\"#rcu_batches_completed\">rcu_batches_completed</a>(void);", 
"static void <a class=\"id\" href=\"#rcu_preempt_note_context_switch\">rcu_preempt_note_context_switch</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"static int <a class=\"id\" href=\"#rcu_preempted_readers\">rcu_preempted_readers</a>(struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"static void <a class=\"id\" href=\"#rcu_report_unblock_qs_rnp\">rcu_report_unblock_qs_rnp</a>(struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#flags\">flags</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_HOTPLUG_CPU */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RCU_CPU_STALL_DETECTOR\">CONFIG_RCU_CPU_STALL_DETECTOR</a>", 
"static void <a class=\"id\" href=\"#rcu_print_detail_task_stall\">rcu_print_detail_task_stall</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>);", 
"static void <a class=\"id\" href=\"#rcu_print_task_stall\">rcu_print_task_stall</a>(struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_RCU_CPU_STALL_DETECTOR */</span>", 
"static void <a class=\"id\" href=\"#rcu_preempt_check_blocked_tasks\">rcu_preempt_check_blocked_tasks</a>(struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"static int <a class=\"id\" href=\"#rcu_preempt_offline_tasks\">rcu_preempt_offline_tasks</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>);", 
"static void <a class=\"id\" href=\"#rcu_preempt_offline_cpu\">rcu_preempt_offline_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_HOTPLUG_CPU */</span>", 
"static void <a class=\"id\" href=\"#rcu_preempt_check_callbacks\">rcu_preempt_check_callbacks</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"static void <a class=\"id\" href=\"#rcu_preempt_process_callbacks\">rcu_preempt_process_callbacks</a>(void);", 
"void <a class=\"id\" href=\"#call_rcu\">call_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>, void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rcu\">rcu</a>));", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_TREE_PREEMPT_RCU\">CONFIG_TREE_PREEMPT_RCU</a>)", 
"static void <a class=\"id\" href=\"#rcu_report_exp_rnp\">rcu_report_exp_rnp</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #if defined(CONFIG_HOTPLUG_CPU) || defined(CONFIG_TREE_PREEMPT_RCU) */</span>", 
"static int <a class=\"id\" href=\"#rcu_preempt_pending\">rcu_preempt_pending</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"static int <a class=\"id\" href=\"#rcu_preempt_needs_cpu\">rcu_preempt_needs_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#rcu_preempt_init_percpu_data\">rcu_preempt_init_percpu_data</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"static void <a class=\"id\" href=\"#rcu_preempt_send_cbs_to_orphanage\">rcu_preempt_send_cbs_to_orphanage</a>(void);", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__rcu_init_preempt\">__rcu_init_preempt</a>(void);", 
"static void <a class=\"id\" href=\"#rcu_needs_cpu_flush\">rcu_needs_cpu_flush</a>(void);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifndef RCU_TREE_NONCORE */</span>", 
];
xr_frag_insert('l/52/4b430a4a29b4e1ba1bb4b375d1880f6b764809.xr', __xr_tmp);
