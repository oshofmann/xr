var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquire\">__acquire</a>(<a class=\"id\" href=\"#bitlock\">bitlock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return true if it was acquired</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#bit_spin_trylock\">bit_spin_trylock</a>(int <a class=\"id\" href=\"#bitnum\">bitnum</a>, unsigned long *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_DEBUG_SPINLOCK\">CONFIG_DEBUG_SPINLOCK</a>)", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#test_and_set_bit_lock\">test_and_set_bit_lock</a>(<a class=\"id\" href=\"#bitnum\">bitnum</a>, <a class=\"id\" href=\"#addr\">addr</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquire\">__acquire</a>(<a class=\"id\" href=\"#bitlock\">bitlock</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  bit-based spin_unlock()</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#bit_spin_unlock\">bit_spin_unlock</a>(int <a class=\"id\" href=\"#bitnum\">bitnum</a>, unsigned long *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SPINLOCK\">CONFIG_DEBUG_SPINLOCK</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#bitnum\">bitnum</a>, <a class=\"id\" href=\"#addr\">addr</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_DEBUG_SPINLOCK\">CONFIG_DEBUG_SPINLOCK</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit_unlock\">clear_bit_unlock</a>(<a class=\"id\" href=\"#bitnum\">bitnum</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__release\">__release</a>(<a class=\"id\" href=\"#bitlock\">bitlock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  bit-based spin_unlock()</span>", 
"<span class=\"comment\"> *  non-atomic version, which can be used eg. if the bit lock itself is</span>", 
"<span class=\"comment\"> *  protecting the rest of the flags in the word.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__bit_spin_unlock\">__bit_spin_unlock</a>(int <a class=\"id\" href=\"#bitnum\">bitnum</a>, unsigned long *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SPINLOCK\">CONFIG_DEBUG_SPINLOCK</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#bitnum\">bitnum</a>, <a class=\"id\" href=\"#addr\">addr</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_DEBUG_SPINLOCK\">CONFIG_DEBUG_SPINLOCK</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit_unlock\">__clear_bit_unlock</a>(<a class=\"id\" href=\"#bitnum\">bitnum</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__release\">__release</a>(<a class=\"id\" href=\"#bitlock\">bitlock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return true if the lock is held.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#bit_spin_is_locked\">bit_spin_is_locked</a>(int <a class=\"id\" href=\"#bitnum\">bitnum</a>, unsigned long *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_DEBUG_SPINLOCK\">CONFIG_DEBUG_SPINLOCK</a>)", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#bitnum\">bitnum</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#defined\">defined</a> <a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#preempt_count\">preempt_count</a>();", 
"#else", 
"<span class=\"ts\"/>return 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __LINUX_BIT_SPINLOCK_H */</span>", 
"", 
];
xr_frag_insert('l/52/7baaa55d1b6c8e118402cbfc171509be20b793.xr', __xr_tmp);
