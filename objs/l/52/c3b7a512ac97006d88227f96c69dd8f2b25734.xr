var __xr_tmp = [
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#enabled\">enabled</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ctx\">ctx</a> || !<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#nr_events\">nr_events</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__perf_event_task_sched_out\">__perf_event_task_sched_out</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#pinned_groups\">pinned_groups</a>, <a class=\"id\" href=\"#group_entry\">group_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#event_enable_on_exec\">event_enable_on_exec</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enabled\">enabled</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#flexible_groups\">flexible_groups</a>, <a class=\"id\" href=\"#group_entry\">group_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#event_enable_on_exec\">event_enable_on_exec</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enabled\">enabled</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Unclone this context if we enabled any event.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#enabled\">enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unclone_ctx\">unclone_ctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_task_sched_in\">perf_event_task_sched_in</a>(<a class=\"id\" href=\"#task\">task</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Cross CPU call to read the hardware event</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__perf_event_read\">__perf_event_read</a>(void *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this is a task context, we need to check whether it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the current task context of this cpu.  If not it has been</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * scheduled out before the smp call arrived.  In that case</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * event-&gt;count would have been updated to a recent sample</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when the event was scheduled out.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#task\">task</a> && <a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#task_ctx\">task_ctx</a> != <a class=\"id\" href=\"#ctx\">ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_context_time\">update_context_time</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_event_times\">update_event_times</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pmu\">pmu</a>-><a class=\"id\" href=\"#read\">read</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#perf_event_count\">perf_event_count</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#local64_read\">local64_read</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#count\">count</a>) + <a class=\"id\" href=\"#atomic64_read\">atomic64_read</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#child_count\">child_count</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#perf_event_read\">perf_event_read</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If event is enabled and currently active on a CPU, update the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * value in the event structure:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PERF_EVENT_STATE_ACTIVE\">PERF_EVENT_STATE_ACTIVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function_single\">smp_call_function_single</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#oncpu\">oncpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__perf_event_read\">__perf_event_read</a>, <a class=\"id\" href=\"#event\">event</a>, 1);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_context_time\">update_context_time</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_event_times\">update_event_times</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#perf_event_count\">perf_event_count</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize the perf_event context in a task_struct:</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#__perf_event_init_context\">__perf_event_init_context</a>(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_init\">raw_spin_lock_init</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#pinned_groups\">pinned_groups</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#flexible_groups\">flexible_groups</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#event_list\">event_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#refcount\">refcount</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#task\">task</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#find_get_context\">find_get_context</a>(<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> == -1 && <a class=\"id\" href=\"#cpu\">cpu</a> != -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Must be root to operate on a CPU event: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#perf_paranoid_cpu\">perf_paranoid_cpu</a>() && !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EACCES\">EACCES</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> &lt; 0 || <a class=\"id\" href=\"#cpu\">cpu</a> >= <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We could be clever and allow to attach a event to an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * offline CPU and activate it when the CPU comes up, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that's for later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENODEV\">ENODEV</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a> = &amp;<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_ctx\">get_ctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pid\">pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#find_task_by_vpid\">find_task_by_vpid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ESRCH\">ESRCH</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Can't attach events to a dying task.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_EXITING\">PF_EXITING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reuse ptrace permission checks for now. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ptrace_may_access\">ptrace_may_access</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#PTRACE_MODE_READ\">PTRACE_MODE_READ</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"", 
" <a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#perf_lock_task_context\">perf_lock_task_context</a>(<a class=\"id\" href=\"#task\">task</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unclone_ctx\">unclone_ctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ctx\">ctx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__perf_event_init_context\">__perf_event_init_context</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_ctx\">get_ctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#ctx\">ctx</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We raced with some other task; use</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the context they set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ctx\">ctx</a>;", 
"", 
" <a class=\"id\" href=\"#errout\">errout</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_event_free_filter\">perf_event_free_filter</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"static void <a class=\"id\" href=\"#free_event_rcu\">free_event_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#perf_event\">perf_event</a>, <a class=\"id\" href=\"#rcu_head\">rcu_head</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ns\">ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_pid_ns\">put_pid_ns</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_free_filter\">perf_event_free_filter</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_pending_sync\">perf_pending_sync</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"static void <a class=\"id\" href=\"#perf_buffer_put\">perf_buffer_put</a>(struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"static void <a class=\"id\" href=\"#free_event\">free_event</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_pending_sync\">perf_pending_sync</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#parent\">parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#nr_events\">nr_events</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#mmap\">mmap</a> || <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#mmap_data\">mmap_data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#nr_mmap_events\">nr_mmap_events</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#comm\">comm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#nr_comm_events\">nr_comm_events</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#nr_task_events\">nr_task_events</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#buffer\">buffer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_buffer_put\">perf_buffer_put</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#destroy\">destroy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#destroy\">destroy</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_ctx\">put_ctx</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#rcu_head\">rcu_head</a>, <a class=\"id\" href=\"#free_event_rcu\">free_event_rcu</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#perf_event_release_kernel\">perf_event_release_kernel</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Remove from the PMU, can't get re-enabled since we got</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here because the last ref went.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_disable\">perf_event_disable</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There are two ways this annotation is useful:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  1) there is a lock recursion from perf_event_exit_task</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     see the comment there.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  2) there is a lock-inversion with mmap_sem through</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     perf_event_read_group(), which takes faults while</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     holding ctx-&gt;mutex, however this is called after</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     the last filedesc died, so there is no possibility</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     to trigger the AB-BA case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock_nested\">mutex_lock_nested</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mutex\">mutex</a>, <a class=\"id\" href=\"#SINGLE_DEPTH_NESTING\">SINGLE_DEPTH_NESTING</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_group_detach\">perf_group_detach</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_event\">list_del_event</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#perf_event_mutex\">perf_event_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#owner_entry\">owner_entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#perf_event_mutex\">perf_event_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_event\">free_event</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#perf_event_release_kernel\">perf_event_release_kernel</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called when the last reference to the file is gone.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#perf_release\">perf_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#perf_event_release_kernel\">perf_event_release_kernel</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#perf_event_read_size\">perf_event_read_size</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#entry\">entry</a> = sizeof(<a class=\"id\" href=\"#u64\">u64</a>); <span class=\"comment\">/* value */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a> = 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#read_format\">read_format</a> &amp; <a class=\"id\" href=\"#PERF_FORMAT_TOTAL_TIME_ENABLED\">PERF_FORMAT_TOTAL_TIME_ENABLED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += sizeof(<a class=\"id\" href=\"#u64\">u64</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#read_format\">read_format</a> &amp; <a class=\"id\" href=\"#PERF_FORMAT_TOTAL_TIME_RUNNING\">PERF_FORMAT_TOTAL_TIME_RUNNING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += sizeof(<a class=\"id\" href=\"#u64\">u64</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#read_format\">read_format</a> &amp; <a class=\"id\" href=\"#PERF_FORMAT_ID\">PERF_FORMAT_ID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> += sizeof(<a class=\"id\" href=\"#u64\">u64</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#read_format\">read_format</a> &amp; <a class=\"id\" href=\"#PERF_FORMAT_GROUP\">PERF_FORMAT_GROUP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> += <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>-><a class=\"id\" href=\"#nr_siblings\">nr_siblings</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += sizeof(<a class=\"id\" href=\"#u64\">u64</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#entry\">entry</a> * <a class=\"id\" href=\"#nr\">nr</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#perf_event_read_value\">perf_event_read_value</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#enabled\">enabled</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#running\">running</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#total\">total</a> = 0;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#enabled\">enabled</a> = 0;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#running\">running</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#child_mutex\">child_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a> += <a class=\"id\" href=\"#perf_event_read\">perf_event_read</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#enabled\">enabled</a> += <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#total_time_enabled\">total_time_enabled</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic64_read\">atomic64_read</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#child_total_time_enabled\">child_total_time_enabled</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#running\">running</a> += <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#total_time_running\">total_time_running</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic64_read\">atomic64_read</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#child_total_time_running\">child_total_time_running</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#child\">child</a>, &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#child_list\">child_list</a>, <a class=\"id\" href=\"#child_list\">child_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a> += <a class=\"id\" href=\"#perf_event_read\">perf_event_read</a>(<a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#enabled\">enabled</a> += <a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#total_time_enabled\">total_time_enabled</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#running\">running</a> += <a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#total_time_running\">total_time_running</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#child_mutex\">child_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#total\">total</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#perf_event_read_value\">perf_event_read_value</a>);", 
"", 
"static int <a class=\"id\" href=\"#perf_event_read_group\">perf_event_read_group</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#read_format\">read_format</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#leader\">leader</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>, *<a class=\"id\" href=\"#sub\">sub</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a> = 0, <a class=\"id\" href=\"#size\">size</a> = 0, <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#values\">values</a>[5];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#enabled\">enabled</a>, <a class=\"id\" href=\"#running\">running</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#perf_event_read_value\">perf_event_read_value</a>(<a class=\"id\" href=\"#leader\">leader</a>, &amp;<a class=\"id\" href=\"#enabled\">enabled</a>, &amp;<a class=\"id\" href=\"#running\">running</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#values\">values</a>[<a class=\"id\" href=\"#n\">n</a>++] = 1 + <a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#nr_siblings\">nr_siblings</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_format\">read_format</a> &amp; <a class=\"id\" href=\"#PERF_FORMAT_TOTAL_TIME_ENABLED\">PERF_FORMAT_TOTAL_TIME_ENABLED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#values\">values</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#enabled\">enabled</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_format\">read_format</a> &amp; <a class=\"id\" href=\"#PERF_FORMAT_TOTAL_TIME_RUNNING\">PERF_FORMAT_TOTAL_TIME_RUNNING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#values\">values</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#running\">running</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#values\">values</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_format\">read_format</a> &amp; <a class=\"id\" href=\"#PERF_FORMAT_ID\">PERF_FORMAT_ID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#values\">values</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#primary_event_id\">primary_event_id</a>(<a class=\"id\" href=\"#leader\">leader</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#n\">n</a> * sizeof(<a class=\"id\" href=\"#u64\">u64</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#values\">values</a>, <a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#sub\">sub</a>, &amp;<a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#sibling_list\">sibling_list</a>, <a class=\"id\" href=\"#group_entry\">group_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#values\">values</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#perf_event_read_value\">perf_event_read_value</a>(<a class=\"id\" href=\"#sub\">sub</a>, &amp;<a class=\"id\" href=\"#enabled\">enabled</a>, &amp;<a class=\"id\" href=\"#running\">running</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#read_format\">read_format</a> &amp; <a class=\"id\" href=\"#PERF_FORMAT_ID\">PERF_FORMAT_ID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#values\">values</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#primary_event_id\">primary_event_id</a>(<a class=\"id\" href=\"#sub\">sub</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#n\">n</a> * sizeof(<a class=\"id\" href=\"#u64\">u64</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#values\">values</a>, <a class=\"id\" href=\"#size\">size</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#perf_event_read_one\">perf_event_read_one</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#read_format\">read_format</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#enabled\">enabled</a>, <a class=\"id\" href=\"#running\">running</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#values\">values</a>[4];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#values\">values</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#perf_event_read_value\">perf_event_read_value</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#enabled\">enabled</a>, &amp;<a class=\"id\" href=\"#running\">running</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_format\">read_format</a> &amp; <a class=\"id\" href=\"#PERF_FORMAT_TOTAL_TIME_ENABLED\">PERF_FORMAT_TOTAL_TIME_ENABLED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#values\">values</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#enabled\">enabled</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_format\">read_format</a> &amp; <a class=\"id\" href=\"#PERF_FORMAT_TOTAL_TIME_RUNNING\">PERF_FORMAT_TOTAL_TIME_RUNNING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#values\">values</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#running\">running</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_format\">read_format</a> &amp; <a class=\"id\" href=\"#PERF_FORMAT_ID\">PERF_FORMAT_ID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#values\">values</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#primary_event_id\">primary_event_id</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#values\">values</a>, <a class=\"id\" href=\"#n\">n</a> * sizeof(<a class=\"id\" href=\"#u64\">u64</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a> * sizeof(<a class=\"id\" href=\"#u64\">u64</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Read the performance event - simple non blocking version for now</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#perf_read_hw\">perf_read_hw</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#read_format\">read_format</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#read_format\">read_format</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Return end-of-file for a read on a event that is in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * error state (i.e. because it was pinned but it couldn't be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * scheduled on to the CPU at some point).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PERF_EVENT_STATE_ERROR\">PERF_EVENT_STATE_ERROR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#perf_event_read_size\">perf_event_read_size</a>(<a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_format\">read_format</a> &amp; <a class=\"id\" href=\"#PERF_FORMAT_GROUP\">PERF_FORMAT_GROUP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#perf_event_read_group\">perf_event_read_group</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#read_format\">read_format</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#perf_event_read_one\">perf_event_read_one</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#read_format\">read_format</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#perf_read\">perf_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#perf_read_hw\">perf_read_hw</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#perf_poll\">perf_poll</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#poll_table\">poll_table</a> *<a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#events\">events</a> = <a class=\"id\" href=\"#POLL_HUP\">POLL_HUP</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#events\">events</a> = <a class=\"id\" href=\"#atomic_xchg\">atomic_xchg</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#poll\">poll</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#poll_wait\">poll_wait</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#waitq\">waitq</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#events\">events</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_event_reset\">perf_event_reset</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#perf_event_read\">perf_event_read</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local64_set\">local64_set</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#count\">count</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_update_userpage\">perf_event_update_userpage</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Holding the top-level event's child_mutex means that any</span>", 
"<span class=\"comment\"> * descendant process that has inherited this event will block</span>", 
"<span class=\"comment\"> * in sync_child_event if it goes to exit, thus satisfying the</span>", 
"<span class=\"comment\"> * task existence requirements of perf_event_enable/disable.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#perf_event_for_each_child\">perf_event_for_each_child</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#child\">child</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#child_mutex\">child_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#child\">child</a>, &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#child_list\">child_list</a>, <a class=\"id\" href=\"#child_list\">child_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#child_mutex\">child_mutex</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_event_for_each\">perf_event_for_each</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#sibling\">sibling</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_for_each_child\">perf_event_for_each_child</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#sibling\">sibling</a>, &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#sibling_list\">sibling_list</a>, <a class=\"id\" href=\"#group_entry\">group_entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_for_each_child\">perf_event_for_each_child</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#perf_event_period\">perf_event_period</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#sample_period\">sample_period</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#arg\">arg</a>, sizeof(<a class=\"id\" href=\"#value\">value</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#value\">value</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#freq\">freq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> &gt; <a class=\"id\" href=\"#sysctl_perf_event_sample_rate\">sysctl_perf_event_sample_rate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#sample_freq\">sample_freq</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#sample_period\">sample_period</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#sample_period\">sample_period</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#perf_fops\">perf_fops</a>;", 
"", 
"static struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#perf_fget_light\">perf_fget_light</a>(int <a class=\"id\" href=\"#fd\">fd</a>, int *<a class=\"id\" href=\"#fput_needed\">fput_needed</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#fget_light\">fget_light</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#fput_needed\">fput_needed</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EBADF\">EBADF</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a> != &amp;<a class=\"id\" href=\"#perf_fops\">perf_fops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput_light\">fput_light</a>(<a class=\"id\" href=\"#file\">file</a>, *<a class=\"id\" href=\"#fput_needed\">fput_needed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#fput_needed\">fput_needed</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EBADF\">EBADF</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#perf_event_set_output\">perf_event_set_output</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#output_event\">output_event</a>);", 
"static int <a class=\"id\" href=\"#perf_event_set_filter\">perf_event_set_filter</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"static long <a class=\"id\" href=\"#perf_ioctl\">perf_ioctl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#arg\">arg</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_EVENT_IOC_ENABLE\">PERF_EVENT_IOC_ENABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#perf_event_enable\">perf_event_enable</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_EVENT_IOC_DISABLE\">PERF_EVENT_IOC_DISABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#perf_event_disable\">perf_event_disable</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_EVENT_IOC_RESET\">PERF_EVENT_IOC_RESET</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#perf_event_reset\">perf_event_reset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_EVENT_IOC_REFRESH\">PERF_EVENT_IOC_REFRESH</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#perf_event_refresh\">perf_event_refresh</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_EVENT_IOC_PERIOD\">PERF_EVENT_IOC_PERIOD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#perf_event_period\">perf_event_period</a>(<a class=\"id\" href=\"#event\">event</a>, (<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_EVENT_IOC_SET_OUTPUT\">PERF_EVENT_IOC_SET_OUTPUT</a>:", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#output_event\">output_event</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#fput_needed\">fput_needed</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a> != -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#output_event\">output_event</a> = <a class=\"id\" href=\"#perf_fget_light\">perf_fget_light</a>(<a class=\"id\" href=\"#arg\">arg</a>, &amp;<a class=\"id\" href=\"#fput_needed\">fput_needed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#output_event\">output_event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#output_event\">output_event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#perf_event_set_output\">perf_event_set_output</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#output_event\">output_event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#output_event\">output_event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput_light\">fput_light</a>(<a class=\"id\" href=\"#output_event\">output_event</a>-><a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#fput_needed\">fput_needed</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_EVENT_IOC_SET_FILTER\">PERF_EVENT_IOC_SET_FILTER</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#perf_event_set_filter\">perf_event_set_filter</a>(<a class=\"id\" href=\"#event\">event</a>, (void <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PERF_IOC_FLAG_GROUP\">PERF_IOC_FLAG_GROUP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_for_each\">perf_event_for_each</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_for_each_child\">perf_event_for_each_child</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#func\">func</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#perf_event_task_enable\">perf_event_task_enable</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#perf_event_mutex\">perf_event_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#perf_event_list\">perf_event_list</a>, <a class=\"id\" href=\"#owner_entry\">owner_entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_for_each_child\">perf_event_for_each_child</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#perf_event_enable\">perf_event_enable</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#perf_event_mutex\">perf_event_mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#perf_event_task_disable\">perf_event_task_disable</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#perf_event_mutex\">perf_event_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#perf_event_list\">perf_event_list</a>, <a class=\"id\" href=\"#owner_entry\">owner_entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_for_each_child\">perf_event_for_each_child</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#perf_event_disable\">perf_event_disable</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#perf_event_mutex\">perf_event_mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#PERF_EVENT_INDEX_OFFSET\">PERF_EVENT_INDEX_OFFSET</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_EVENT_INDEX_OFFSET\">PERF_EVENT_INDEX_OFFSET</a> 0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#perf_event_index\">perf_event_index</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#PERF_EVENT_STATE_ACTIVE\">PERF_EVENT_STATE_ACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#idx\">idx</a> + 1 - <a class=\"id\" href=\"#PERF_EVENT_INDEX_OFFSET\">PERF_EVENT_INDEX_OFFSET</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Callers need to ensure there can be no nesting of this function, otherwise</span>", 
"<span class=\"comment\"> * the seqlock logic goes bad. We can not serialize this because the arch</span>", 
"<span class=\"comment\"> * code calls this from NMI context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#perf_event_update_userpage\">perf_event_update_userpage</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_mmap_page\">perf_event_mmap_page</a> *<a class=\"id\" href=\"#userpg\">userpg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#userpg\">userpg</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#user_page\">user_page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Disable preemption so as to not let the corresponding user-space</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * spin too long if we get preempted.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#userpg\">userpg</a>-><a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#userpg\">userpg</a>-><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#perf_event_index\">perf_event_index</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#userpg\">userpg</a>-><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#perf_event_count\">perf_event_count</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PERF_EVENT_STATE_ACTIVE\">PERF_EVENT_STATE_ACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#userpg\">userpg</a>-><a class=\"id\" href=\"#offset\">offset</a> -= <a class=\"id\" href=\"#local64_read\">local64_read</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#prev_count\">prev_count</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#userpg\">userpg</a>-><a class=\"id\" href=\"#time_enabled\">time_enabled</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#total_time_enabled\">total_time_enabled</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic64_read\">atomic64_read</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#child_total_time_enabled\">child_total_time_enabled</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#userpg\">userpg</a>-><a class=\"id\" href=\"#time_running\">time_running</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#total_time_running\">total_time_running</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic64_read\">atomic64_read</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#child_total_time_running\">child_total_time_running</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#userpg\">userpg</a>-><a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#perf_data_size\">perf_data_size</a>(struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"static void", 
"<a class=\"id\" href=\"#perf_buffer_init\">perf_buffer_init</a>(struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, long <a class=\"id\" href=\"#watermark\">watermark</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#max_size\">max_size</a> = <a class=\"id\" href=\"#perf_data_size\">perf_data_size</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#watermark\">watermark</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#watermark\">watermark</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#max_size\">max_size</a>, <a class=\"id\" href=\"#watermark\">watermark</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#watermark\">watermark</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#watermark\">watermark</a> = <a class=\"id\" href=\"#max_size\">max_size</a> / 2;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PERF_BUFFER_WRITABLE\">PERF_BUFFER_WRITABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#writable\">writable</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#refcount\">refcount</a>, 1);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_PERF_USE_VMALLOC\">CONFIG_PERF_USE_VMALLOC</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Back perf_mmap() with regular GFP_KERNEL-0 pages.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#perf_mmap_to_page\">perf_mmap_to_page</a>(struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, unsigned long <a class=\"id\" href=\"#pgoff\">pgoff</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgoff\">pgoff</a> &gt; <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgoff\">pgoff</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#user_page\">user_page</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#data_pages\">data_pages</a>[<a class=\"id\" href=\"#pgoff\">pgoff</a> - 1]);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#perf_mmap_alloc_page\">perf_mmap_alloc_page</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = (<a class=\"id\" href=\"#cpu\">cpu</a> == -1) ? <a class=\"id\" href=\"#cpu\">cpu</a> : <a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_pages_node\">alloc_pages_node</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *", 
"<a class=\"id\" href=\"#perf_buffer_alloc\">perf_buffer_alloc</a>(int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, long <a class=\"id\" href=\"#watermark\">watermark</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#nr_pages\">nr_pages</a> * sizeof(void *);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#user_page\">user_page</a> = <a class=\"id\" href=\"#perf_mmap_alloc_page\">perf_mmap_alloc_page</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#user_page\">user_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_user_page\">fail_user_page</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#data_pages\">data_pages</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#perf_mmap_alloc_page\">perf_mmap_alloc_page</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#data_pages\">data_pages</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_data_pages\">fail_data_pages</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_buffer_init\">perf_buffer_init</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#watermark\">watermark</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"", 
"<a class=\"id\" href=\"#fail_data_pages\">fail_data_pages</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>--; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#data_pages\">data_pages</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#user_page\">user_page</a>);", 
"", 
"<a class=\"id\" href=\"#fail_user_page\">fail_user_page</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_mmap_free_page\">perf_mmap_free_page</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>((void *)<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_buffer_free\">perf_buffer_free</a>(struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_mmap_free_page\">perf_mmap_free_page</a>((unsigned long)<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#user_page\">user_page</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_mmap_free_page\">perf_mmap_free_page</a>((unsigned long)<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#data_pages\">data_pages</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#page_order\">page_order</a>(struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#else", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Back perf_mmap() with vmalloc memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Required for architectures that have d-cache aliasing issues.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#page_order\">page_order</a>(struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#page_order\">page_order</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#perf_mmap_to_page\">perf_mmap_to_page</a>(struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, unsigned long <a class=\"id\" href=\"#pgoff\">pgoff</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgoff\">pgoff</a> &gt; (1UL << <a class=\"id\" href=\"#page_order\">page_order</a>(<a class=\"id\" href=\"#buffer\">buffer</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vmalloc_to_page\">vmalloc_to_page</a>((void *)<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#user_page\">user_page</a> + <a class=\"id\" href=\"#pgoff\">pgoff</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_mmap_unmark_page\">perf_mmap_unmark_page</a>(void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#vmalloc_to_page\">vmalloc_to_page</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_buffer_free_work\">perf_buffer_free_work</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nr\">nr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = 1 << <a class=\"id\" href=\"#page_order\">page_order</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#user_page\">user_page</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr\">nr</a> + 1; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_mmap_unmark_page\">perf_mmap_unmark_page</a>(<a class=\"id\" href=\"#base\">base</a> + (<a class=\"id\" href=\"#i\">i</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_buffer_free\">perf_buffer_free</a>(struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *", 
"<a class=\"id\" href=\"#perf_buffer_alloc\">perf_buffer_alloc</a>(int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, long <a class=\"id\" href=\"#watermark\">watermark</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#all_buf\">all_buf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += sizeof(void *);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#perf_buffer_free_work\">perf_buffer_free_work</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#all_buf\">all_buf</a> = <a class=\"id\" href=\"#vmalloc_user\">vmalloc_user</a>((<a class=\"id\" href=\"#nr_pages\">nr_pages</a> + 1) * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#all_buf\">all_buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_all_buf\">fail_all_buf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#user_page\">user_page</a> = <a class=\"id\" href=\"#all_buf\">all_buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#data_pages\">data_pages</a>[0] = <a class=\"id\" href=\"#all_buf\">all_buf</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#page_order\">page_order</a> = <a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_buffer_init\">perf_buffer_init</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#watermark\">watermark</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"", 
"<a class=\"id\" href=\"#fail_all_buf\">fail_all_buf</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static unsigned long <a class=\"id\" href=\"#perf_data_size\">perf_data_size</a>(struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a> << (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> + <a class=\"id\" href=\"#page_order\">page_order</a>(<a class=\"id\" href=\"#buffer\">buffer</a>));", 
"}", 
"", 
"static int <a class=\"id\" href=\"#perf_mmap_fault\">perf_mmap_fault</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, struct <a class=\"id\" href=\"#vm_fault\">vm_fault</a> *<a class=\"id\" href=\"#vmf\">vmf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_SIGBUS\">VM_FAULT_SIGBUS</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vmf\">vmf</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FAULT_FLAG_MKWRITE\">FAULT_FLAG_MKWRITE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vmf\">vmf</a>-><a class=\"id\" href=\"#pgoff\">pgoff</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vmf\">vmf</a>-><a class=\"id\" href=\"#pgoff\">pgoff</a> && (<a class=\"id\" href=\"#vmf\">vmf</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmf\">vmf</a>-><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#perf_mmap_to_page\">perf_mmap_to_page</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#vmf\">vmf</a>-><a class=\"id\" href=\"#pgoff\">pgoff</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vmf\">vmf</a>-><a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#vmf\">vmf</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmf\">vmf</a>-><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmf\">vmf</a>-><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a>   = <a class=\"id\" href=\"#vmf\">vmf</a>-><a class=\"id\" href=\"#pgoff\">pgoff</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_buffer_free_rcu\">perf_buffer_free_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rcu_head\">rcu_head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#rcu_head\">rcu_head</a>, struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a>, <a class=\"id\" href=\"#rcu_head\">rcu_head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_buffer_free\">perf_buffer_free</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#perf_buffer_get\">perf_buffer_get</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_inc_not_zero\">atomic_inc_not_zero</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#refcount\">refcount</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_buffer_put\">perf_buffer_put</a>(struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#refcount\">refcount</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#rcu_head\">rcu_head</a>, <a class=\"id\" href=\"#perf_buffer_free_rcu\">perf_buffer_free_rcu</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_mmap_open\">perf_mmap_open</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#mmap_count\">mmap_count</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_mmap_close\">perf_mmap_close</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_mutex_lock\">atomic_dec_and_mutex_lock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#mmap_count\">mmap_count</a>, &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#mmap_mutex\">mmap_mutex</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#perf_data_size\">perf_data_size</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#user\">user</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#mmap_user\">mmap_user</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#buffer\">buffer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_sub\">atomic_long_sub</a>((<a class=\"id\" href=\"#size\">size</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) + 1, &amp;<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#locked_vm\">locked_vm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>-><a class=\"id\" href=\"#locked_vm\">locked_vm</a> -= <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#mmap_locked\">mmap_locked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#mmap_mutex\">mmap_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_buffer_put\">perf_buffer_put</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_uid\">free_uid</a>(<a class=\"id\" href=\"#user\">user</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#vm_operations_struct\">vm_operations_struct</a> <a class=\"id\" href=\"#perf_mmap_vmops\">perf_mmap_vmops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_mmap_open\">perf_mmap_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#close\">close</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_mmap_close\">perf_mmap_close</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fault\">fault</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_mmap_fault\">perf_mmap_fault</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#page_mkwrite\">page_mkwrite</a><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_mmap_fault\">perf_mmap_fault</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#perf_mmap\">perf_mmap</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#user_locked\">user_locked</a>, <a class=\"id\" href=\"#user_lock_limit\">user_lock_limit</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#user\">user</a> = <a class=\"id\" href=\"#current_user\">current_user</a>();", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#locked\">locked</a>, <a class=\"id\" href=\"#lock_limit\">lock_limit</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vma_size\">vma_size</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#user_extra\">user_extra</a>, <a class=\"id\" href=\"#extra\">extra</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't allow mmap() of inherited per-task counters. This would</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * create a performance issue due to all children writing to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * same buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> == -1 && <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#inherit\">inherit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma_size\">vma_size</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = (<a class=\"id\" href=\"#vma_size\">vma_size</a> / <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) - 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we have buffer pages ensure they're a power-of-two number, so we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can do bitmasks instead of modulo.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_pages\">nr_pages</a> != 0 && !<a class=\"id\" href=\"#is_power_of_2\">is_power_of_2</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma_size\">vma_size</a> != <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> * (1 + <a class=\"id\" href=\"#nr_pages\">nr_pages</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#mmap_mutex\">mmap_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#buffer\">buffer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a> == <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#refcount\">refcount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#user_extra\">user_extra</a> = <a class=\"id\" href=\"#nr_pages\">nr_pages</a> + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#user_lock_limit\">user_lock_limit</a> = <a class=\"id\" href=\"#sysctl_perf_event_mlock\">sysctl_perf_event_mlock</a> >> (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> - 10);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Increase the limit linearly with more CPUs:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#user_lock_limit\">user_lock_limit</a> *= <a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#user_locked\">user_locked</a> = <a class=\"id\" href=\"#atomic_long_read\">atomic_long_read</a>(&amp;<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#locked_vm\">locked_vm</a>) + <a class=\"id\" href=\"#user_extra\">user_extra</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#extra\">extra</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#user_locked\">user_locked</a> &gt; <a class=\"id\" href=\"#user_lock_limit\">user_lock_limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#extra\">extra</a> = <a class=\"id\" href=\"#user_locked\">user_locked</a> - <a class=\"id\" href=\"#user_lock_limit\">user_lock_limit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_limit\">lock_limit</a> = <a class=\"id\" href=\"#rlimit\">rlimit</a>(<a class=\"id\" href=\"#RLIMIT_MEMLOCK\">RLIMIT_MEMLOCK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_limit\">lock_limit</a> >>= <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locked\">locked</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>-><a class=\"id\" href=\"#locked_vm\">locked_vm</a> + <a class=\"id\" href=\"#extra\">extra</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#locked\">locked</a> &gt; <a class=\"id\" href=\"#lock_limit\">lock_limit</a>) && <a class=\"id\" href=\"#perf_paranoid_tracepoint_raw\">perf_paranoid_tracepoint_raw</a>() &&", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_IPC_LOCK\">CAP_IPC_LOCK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_WRITE\">VM_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PERF_BUFFER_WRITABLE\">PERF_BUFFER_WRITABLE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#perf_buffer_alloc\">perf_buffer_alloc</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#wakeup_watermark\">wakeup_watermark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_add\">atomic_long_add</a>(<a class=\"id\" href=\"#user_extra\">user_extra</a>, &amp;<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#locked_vm\">locked_vm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#mmap_locked\">mmap_locked</a> = <a class=\"id\" href=\"#extra\">extra</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#mmap_user\">mmap_user</a> = <a class=\"id\" href=\"#get_current_user\">get_current_user</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>-><a class=\"id\" href=\"#locked_vm\">locked_vm</a> += <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#mmap_locked\">mmap_locked</a>;", 
"", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#mmap_count\">mmap_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#mmap_mutex\">mmap_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> |= <a class=\"id\" href=\"#VM_RESERVED\">VM_RESERVED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a> = &amp;<a class=\"id\" href=\"#perf_mmap_vmops\">perf_mmap_vmops</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#perf_fasync\">perf_fasync</a>(int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, int <a class=\"id\" href=\"#on\">on</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#fasync_helper\">fasync_helper</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#on\">on</a>, &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#fasync\">fasync</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#perf_fops\">perf_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#no_llseek\">no_llseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_release\">perf_release</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_read\">perf_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#poll\">poll</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_poll\">perf_poll</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unlocked_ioctl\">unlocked_ioctl</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_ioctl\">perf_ioctl</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#compat_ioctl\">compat_ioctl</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_ioctl\">perf_ioctl</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mmap\">mmap</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_mmap\">perf_mmap</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fasync\">fasync</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_fasync\">perf_fasync</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Perf event wakeup</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If there's data, ensure we set the poll() state and publish everything</span>", 
"<span class=\"comment\"> * to user-space before waking everybody up.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#perf_event_wakeup\">perf_event_wakeup</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_all\">wake_up_all</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#waitq\">waitq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pending_kill\">pending_kill</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_fasync\">kill_fasync</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#fasync\">fasync</a>, <a class=\"id\" href=\"#SIGIO\">SIGIO</a>, <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pending_kill\">pending_kill</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pending_kill\">pending_kill</a> = 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Pending wakeups</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Handle the case where we need to wakeup up from NMI (or rq-&gt;lock) context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The NMI bit means we cannot possibly take locks. Therefore, maintain a</span>", 
"<span class=\"comment\"> * single linked list and use cmpxchg() to add entries lockless.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#perf_pending_event\">perf_pending_event</a>(struct <a class=\"id\" href=\"#perf_pending_entry\">perf_pending_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a>, <a class=\"id\" href=\"#pending\">pending</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pending_disable\">pending_disable</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pending_disable\">pending_disable</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__perf_event_disable\">__perf_event_disable</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pending_wakeup\">pending_wakeup</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pending_wakeup\">pending_wakeup</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_wakeup\">perf_event_wakeup</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PENDING_TAIL\">PENDING_TAIL</a> ((struct <a class=\"id\" href=\"#perf_pending_entry\">perf_pending_entry</a> *)-1UL)", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#perf_pending_entry\">perf_pending_entry</a> *, <a class=\"id\" href=\"#perf_pending_head\">perf_pending_head</a>) = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PENDING_TAIL\">PENDING_TAIL</a>,", 
"};", 
"", 
"static void <a class=\"id\" href=\"#perf_pending_queue\">perf_pending_queue</a>(struct <a class=\"id\" href=\"#perf_pending_entry\">perf_pending_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#perf_pending_entry\">perf_pending_entry</a> *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_pending_entry\">perf_pending_entry</a> **<a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#PENDING_TAIL\">PENDING_TAIL</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#func\">func</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#perf_pending_head\">perf_pending_head</a>);", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#next\">next</a> = *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#entry\">entry</a>) != <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_perf_event_pending\">set_perf_event_pending</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#perf_pending_head\">perf_pending_head</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__perf_pending_run\">__perf_pending_run</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_pending_entry\">perf_pending_entry</a> *<a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#xchg\">xchg</a>(&amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#perf_pending_head\">perf_pending_head</a>), <a class=\"id\" href=\"#PENDING_TAIL\">PENDING_TAIL</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#list\">list</a> != <a class=\"id\" href=\"#PENDING_TAIL\">PENDING_TAIL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#perf_pending_entry\">perf_pending_entry</a> *);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_pending_entry\">perf_pending_entry</a> *<a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#func\">func</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Ensure we observe the unqueue before we issue the wakeup,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so that we won't be waiting forever.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * -- see perf_not_pending().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr\">nr</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#perf_not_pending\">perf_not_pending</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we flush on whatever cpu we run, there is a chance we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to wait.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_cpu\">get_cpu</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__perf_pending_run\">__perf_pending_run</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ensure we see the proper queue state before going to sleep</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so that we do not miss the wakeup. -- see perf_pending_handle()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pending\">pending</a>.<a class=\"id\" href=\"#next\">next</a> == <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_pending_sync\">perf_pending_sync</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_event\">wait_event</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#waitq\">waitq</a>, <a class=\"id\" href=\"#perf_not_pending\">perf_not_pending</a>(<a class=\"id\" href=\"#event\">event</a>));", 
"}", 
"", 
"void <a class=\"id\" href=\"#perf_event_do_pending\">perf_event_do_pending</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__perf_pending_run\">__perf_pending_run</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Callchain support -- arch specific</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<a class=\"id\" href=\"#__weak\">__weak</a> struct <a class=\"id\" href=\"#perf_callchain_entry\">perf_callchain_entry</a> *<a class=\"id\" href=\"#perf_callchain\">perf_callchain</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We assume there is only KVM supporting the callbacks.</span>", 
"<span class=\"comment\"> * Later on, we might change it to a list if there is</span>", 
"<span class=\"comment\"> * another virtualization implementation supporting the callbacks.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#perf_guest_info_callbacks\">perf_guest_info_callbacks</a> *<a class=\"id\" href=\"#perf_guest_cbs\">perf_guest_cbs</a>;", 
"", 
"int <a class=\"id\" href=\"#perf_register_guest_info_callbacks\">perf_register_guest_info_callbacks</a>(struct <a class=\"id\" href=\"#perf_guest_info_callbacks\">perf_guest_info_callbacks</a> *<a class=\"id\" href=\"#cbs\">cbs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_guest_cbs\">perf_guest_cbs</a> = <a class=\"id\" href=\"#cbs\">cbs</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#perf_register_guest_info_callbacks\">perf_register_guest_info_callbacks</a>);", 
"", 
"int <a class=\"id\" href=\"#perf_unregister_guest_info_callbacks\">perf_unregister_guest_info_callbacks</a>(struct <a class=\"id\" href=\"#perf_guest_info_callbacks\">perf_guest_info_callbacks</a> *<a class=\"id\" href=\"#cbs\">cbs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_guest_cbs\">perf_guest_cbs</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#perf_unregister_guest_info_callbacks\">perf_unregister_guest_info_callbacks</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Output</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#perf_output_space\">perf_output_space</a>(struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, unsigned long <a class=\"id\" href=\"#tail\">tail</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#offset\">offset</a>, unsigned long <a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#writable\">writable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#perf_data_size\">perf_data_size</a>(<a class=\"id\" href=\"#buffer\">buffer</a>) - 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = (<a class=\"id\" href=\"#offset\">offset</a> - <a class=\"id\" href=\"#tail\">tail</a>) &amp; <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>   = (<a class=\"id\" href=\"#head\">head</a>   - <a class=\"id\" href=\"#tail\">tail</a>) &amp; <a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/>if ((int)(<a class=\"id\" href=\"#head\">head</a> - <a class=\"id\" href=\"#offset\">offset</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_output_wakeup\">perf_output_wakeup</a>(struct <a class=\"id\" href=\"#perf_output_handle\">perf_output_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#poll\">poll</a>, <a class=\"id\" href=\"#POLL_IN\">POLL_IN</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#nmi\">nmi</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pending_wakeup\">pending_wakeup</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_pending_queue\">perf_pending_queue</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pending\">pending</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#perf_pending_event\">perf_pending_event</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_wakeup\">perf_event_wakeup</a>(<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We need to ensure a later event_id doesn't publish a head when a former</span>", 
"<span class=\"comment\"> * event isn't done writing. However since we need to deal with NMIs we</span>", 
"<span class=\"comment\"> * cannot fully serialize things.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We only publish the head (and generate a wakeup) when the outer-most</span>", 
"<span class=\"comment\"> * event completes.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#perf_output_get_handle\">perf_output_get_handle</a>(struct <a class=\"id\" href=\"#perf_output_handle\">perf_output_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#buffer\">buffer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_inc\">local_inc</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#nest\">nest</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#wakeup\">wakeup</a> = <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#wakeup\">wakeup</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_output_put_handle\">perf_output_put_handle</a>(struct <a class=\"id\" href=\"#perf_output_handle\">perf_output_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * IRQ/NMI can happen here, which means we can miss a head update.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#local_dec_and_test\">local_dec_and_test</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#nest\">nest</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Publish the known good head. Rely on the full barrier implied</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by atomic_dec_and_test() order the buffer-&gt;head read and this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * write.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#user_page\">user_page</a>-><a class=\"id\" href=\"#data_head\">data_head</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now check if we missed an update, rely on the (compiler)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * barrier in atomic_dec_and_test() to re-read buffer-&gt;head.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#head\">head</a> != <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#head\">head</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_inc\">local_inc</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#nest\">nest</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#wakeup\">wakeup</a> != <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#wakeup\">wakeup</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_output_wakeup\">perf_output_wakeup</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"<a class=\"id\" href=\"#__always_inline\">__always_inline</a> void <a class=\"id\" href=\"#perf_output_copy\">perf_output_copy</a>(struct <a class=\"id\" href=\"#perf_output_handle\">perf_output_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      const void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned long, <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#buffer\">buffer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#page\">page</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#page\">page</a> &= <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#data_pages\">data_pages</a>[<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#page\">page</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> << <a class=\"id\" href=\"#page_order\">page_order</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#perf_output_begin\">perf_output_begin</a>(struct <a class=\"id\" href=\"#perf_output_handle\">perf_output_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, unsigned int <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#nmi\">nmi</a>, int <a class=\"id\" href=\"#sample\">sample</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tail\">tail</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#have_lost\">have_lost</a>;", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_header\">perf_event_header</a> <a class=\"id\" href=\"#header\">header</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#lost\">lost</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#lost_event\">lost_event</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For inherited events we send all the output towards the parent.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#buffer\">buffer</a><span class=\"ts\"/>= <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#event\">event</a><span class=\"ts\"/>= <a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#nmi\">nmi</a><span class=\"ts\"/>= <a class=\"id\" href=\"#nmi\">nmi</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#sample\">sample</a><span class=\"ts\"/>= <a class=\"id\" href=\"#sample\">sample</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#have_lost\">have_lost</a> = <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#lost\">lost</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#have_lost\">have_lost</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += sizeof(<a class=\"id\" href=\"#lost_event\">lost_event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_output_get_handle\">perf_output_get_handle</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Userspace could choose to issue a mb() before updating the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * tail pointer. So that all reads will be completed before the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * write is issued.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#user_page\">user_page</a>-><a class=\"id\" href=\"#data_tail\">data_tail</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#perf_output_space\">perf_output_space</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#tail\">tail</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#head\">head</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#local_cmpxchg\">local_cmpxchg</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#head\">head</a>) != <a class=\"id\" href=\"#offset\">offset</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#head\">head</a> - <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#wakeup\">wakeup</a>) &gt; <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#watermark\">watermark</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_add\">local_add</a>(<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#watermark\">watermark</a>, &amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#wakeup\">wakeup</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#offset\">offset</a> >> (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> + <a class=\"id\" href=\"#page_order\">page_order</a>(<a class=\"id\" href=\"#buffer\">buffer</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#page\">page</a> &= <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#offset\">offset</a> &amp; ((<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> << <a class=\"id\" href=\"#page_order\">page_order</a>(<a class=\"id\" href=\"#buffer\">buffer</a>)) - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#data_pages\">data_pages</a>[<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#page\">page</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#size\">size</a> = (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> << <a class=\"id\" href=\"#page_order\">page_order</a>(<a class=\"id\" href=\"#buffer\">buffer</a>)) - <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#have_lost\">have_lost</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lost_event\">lost_event</a>.<a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PERF_RECORD_LOST\">PERF_RECORD_LOST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lost_event\">lost_event</a>.<a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#misc\">misc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lost_event\">lost_event</a>.<a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#size\">size</a> = sizeof(<a class=\"id\" href=\"#lost_event\">lost_event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lost_event\">lost_event</a>.<a class=\"id\" href=\"#id\">id</a>          = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lost_event\">lost_event</a>.<a class=\"id\" href=\"#lost\">lost</a>        = <a class=\"id\" href=\"#local_xchg\">local_xchg</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#lost\">lost</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_output_put\">perf_output_put</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#lost_event\">lost_event</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_inc\">local_inc</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#lost\">lost</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_output_put_handle\">perf_output_put_handle</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#perf_output_end\">perf_output_end</a>(struct <a class=\"id\" href=\"#perf_output_handle\">perf_output_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#buffer\">buffer</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#wakeup_events\">wakeup_events</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#wakeup_events\">wakeup_events</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#sample\">sample</a> && <a class=\"id\" href=\"#wakeup_events\">wakeup_events</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#events\">events</a> = <a class=\"id\" href=\"#local_inc_return\">local_inc_return</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#events\">events</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#events\">events</a> >= <a class=\"id\" href=\"#wakeup_events\">wakeup_events</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_sub\">local_sub</a>(<a class=\"id\" href=\"#wakeup_events\">wakeup_events</a>, &amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#events\">events</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_inc\">local_inc</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#wakeup\">wakeup</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_output_put_handle\">perf_output_put_handle</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#perf_event_pid\">perf_event_pid</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * only top level events have the pid namespace they were created in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task_tgid_nr_ns\">task_tgid_nr_ns</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ns\">ns</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#perf_event_tid\">perf_event_tid</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * only top level events have the pid namespace they were created in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task_pid_nr_ns\">task_pid_nr_ns</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ns\">ns</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_output_read_one\">perf_output_read_one</a>(struct <a class=\"id\" href=\"#perf_output_handle\">perf_output_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#read_format\">read_format</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#read_format\">read_format</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#values\">values</a>[4];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#values\">values</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#perf_event_count\">perf_event_count</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_format\">read_format</a> &amp; <a class=\"id\" href=\"#PERF_FORMAT_TOTAL_TIME_ENABLED\">PERF_FORMAT_TOTAL_TIME_ENABLED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#values\">values</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#total_time_enabled\">total_time_enabled</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic64_read\">atomic64_read</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#child_total_time_enabled\">child_total_time_enabled</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_format\">read_format</a> &amp; <a class=\"id\" href=\"#PERF_FORMAT_TOTAL_TIME_RUNNING\">PERF_FORMAT_TOTAL_TIME_RUNNING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#values\">values</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#total_time_running\">total_time_running</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic64_read\">atomic64_read</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#child_total_time_running\">child_total_time_running</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_format\">read_format</a> &amp; <a class=\"id\" href=\"#PERF_FORMAT_ID\">PERF_FORMAT_ID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#values\">values</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#primary_event_id\">primary_event_id</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_output_copy\">perf_output_copy</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#values\">values</a>, <a class=\"id\" href=\"#n\">n</a> * sizeof(<a class=\"id\" href=\"#u64\">u64</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * XXX PERF_FORMAT_GROUP vs inherited events seems difficult.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#perf_output_read_group\">perf_output_read_group</a>(struct <a class=\"id\" href=\"#perf_output_handle\">perf_output_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#leader\">leader</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>, *<a class=\"id\" href=\"#sub\">sub</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#read_format\">read_format</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#read_format\">read_format</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#values\">values</a>[5];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#values\">values</a>[<a class=\"id\" href=\"#n\">n</a>++] = 1 + <a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#nr_siblings\">nr_siblings</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_format\">read_format</a> &amp; <a class=\"id\" href=\"#PERF_FORMAT_TOTAL_TIME_ENABLED\">PERF_FORMAT_TOTAL_TIME_ENABLED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#values\">values</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#total_time_enabled\">total_time_enabled</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_format\">read_format</a> &amp; <a class=\"id\" href=\"#PERF_FORMAT_TOTAL_TIME_RUNNING\">PERF_FORMAT_TOTAL_TIME_RUNNING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#values\">values</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#total_time_running\">total_time_running</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#leader\">leader</a> != <a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#pmu\">pmu</a>-><a class=\"id\" href=\"#read\">read</a>(<a class=\"id\" href=\"#leader\">leader</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#values\">values</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#perf_event_count\">perf_event_count</a>(<a class=\"id\" href=\"#leader\">leader</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_format\">read_format</a> &amp; <a class=\"id\" href=\"#PERF_FORMAT_ID\">PERF_FORMAT_ID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#values\">values</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#primary_event_id\">primary_event_id</a>(<a class=\"id\" href=\"#leader\">leader</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_output_copy\">perf_output_copy</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#values\">values</a>, <a class=\"id\" href=\"#n\">n</a> * sizeof(<a class=\"id\" href=\"#u64\">u64</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#sub\">sub</a>, &amp;<a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#sibling_list\">sibling_list</a>, <a class=\"id\" href=\"#group_entry\">group_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = 0;", 
];
xr_frag_insert('l/52/c3b7a512ac97006d88227f96c69dd8f2b25734.xr', __xr_tmp);
