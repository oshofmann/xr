var __xr_tmp = [
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_bmdma_port_ops\">ata_bmdma_port_ops</a>);", 
"", 
"const struct <a class=\"id\" href=\"#ata_port_operations\">ata_port_operations</a> <a class=\"id\" href=\"#ata_bmdma32_port_ops\">ata_bmdma32_port_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#inherits\">inherits</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#ata_bmdma_port_ops\">ata_bmdma_port_ops</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sff_data_xfer\">sff_data_xfer</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ata_sff_data_xfer32\">ata_sff_data_xfer32</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#port_start\">port_start</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ata_bmdma_port_start32\">ata_bmdma_port_start32</a>,", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_bmdma32_port_ops\">ata_bmdma32_port_ops</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_bmdma_fill_sg - Fill PCI IDE PRD table</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: Metadata associated with taskfile to be transferred</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Fill PCI IDE PRD (scatter-gather) table with segments</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>associated with the current disk command.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ata_bmdma_fill_sg\">ata_bmdma_fill_sg</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_bmdma_prd\">ata_bmdma_prd</a> *<a class=\"id\" href=\"#prd\">prd</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#bmdma_prd\">bmdma_prd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#si\">si</a>, <a class=\"id\" href=\"#pi\">pi</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pi\">pi</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#n_elem\">n_elem</a>, <a class=\"id\" href=\"#si\">si</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sg_len\">sg_len</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* determine if physical DMA addr spans 64K boundary.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note h/w doesn't support 64-bit, so we unconditionally</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * truncate dma_addr_t to u32.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = (<a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#sg_dma_address\">sg_dma_address</a>(<a class=\"id\" href=\"#sg\">sg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_len\">sg_len</a> = <a class=\"id\" href=\"#sg_dma_len\">sg_dma_len</a>(<a class=\"id\" href=\"#sg\">sg</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#sg_len\">sg_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#addr\">addr</a> &amp; 0xffff;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sg_len\">sg_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#sg_len\">sg_len</a>) &gt; 0x10000)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = 0x10000 - <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prd\">prd</a>[<a class=\"id\" href=\"#pi\">pi</a>].<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prd\">prd</a>[<a class=\"id\" href=\"#pi\">pi</a>].<a class=\"id\" href=\"#flags_len\">flags_len</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#len\">len</a> &amp; 0xffff);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VPRINTK\">VPRINTK</a>(\"PRD[%u] = (0x%X, 0x%X)\\n\", <a class=\"id\" href=\"#pi\">pi</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pi\">pi</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_len\">sg_len</a> -= <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prd\">prd</a>[<a class=\"id\" href=\"#pi\">pi</a> - 1].<a class=\"id\" href=\"#flags_len\">flags_len</a> |= <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#ATA_PRD_EOT\">ATA_PRD_EOT</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_bmdma_fill_sg_dumb - Fill PCI IDE PRD table</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: Metadata associated with taskfile to be transferred</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Fill PCI IDE PRD (scatter-gather) table with segments</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>associated with the current disk command. Perform the fill</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>so that we avoid writing any length 64K records for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>controllers that don't follow the spec.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ata_bmdma_fill_sg_dumb\">ata_bmdma_fill_sg_dumb</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_bmdma_prd\">ata_bmdma_prd</a> *<a class=\"id\" href=\"#prd\">prd</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#bmdma_prd\">bmdma_prd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#si\">si</a>, <a class=\"id\" href=\"#pi\">pi</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pi\">pi</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#n_elem\">n_elem</a>, <a class=\"id\" href=\"#si\">si</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sg_len\">sg_len</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#blen\">blen</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* determine if physical DMA addr spans 64K boundary.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note h/w doesn't support 64-bit, so we unconditionally</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * truncate dma_addr_t to u32.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = (<a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#sg_dma_address\">sg_dma_address</a>(<a class=\"id\" href=\"#sg\">sg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_len\">sg_len</a> = <a class=\"id\" href=\"#sg_dma_len\">sg_dma_len</a>(<a class=\"id\" href=\"#sg\">sg</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#sg_len\">sg_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#addr\">addr</a> &amp; 0xffff;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sg_len\">sg_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#sg_len\">sg_len</a>) &gt; 0x10000)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = 0x10000 - <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blen\">blen</a> = <a class=\"id\" href=\"#len\">len</a> &amp; 0xffff;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prd\">prd</a>[<a class=\"id\" href=\"#pi\">pi</a>].<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blen\">blen</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Some PATA chipsets like the CS5530 can't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   cope with 0x0000 meaning 64K as the spec</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   says */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prd\">prd</a>[<a class=\"id\" href=\"#pi\">pi</a>].<a class=\"id\" href=\"#flags_len\">flags_len</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(0x8000);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blen\">blen</a> = 0x8000;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prd\">prd</a>[++<a class=\"id\" href=\"#pi\">pi</a>].<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#addr\">addr</a> + 0x8000);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prd\">prd</a>[<a class=\"id\" href=\"#pi\">pi</a>].<a class=\"id\" href=\"#flags_len\">flags_len</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#blen\">blen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VPRINTK\">VPRINTK</a>(\"PRD[%u] = (0x%X, 0x%X)\\n\", <a class=\"id\" href=\"#pi\">pi</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pi\">pi</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_len\">sg_len</a> -= <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prd\">prd</a>[<a class=\"id\" href=\"#pi\">pi</a> - 1].<a class=\"id\" href=\"#flags_len\">flags_len</a> |= <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#ATA_PRD_EOT\">ATA_PRD_EOT</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_bmdma_qc_prep - Prepare taskfile for submission</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: Metadata associated with taskfile to be prepared</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Prepare ATA taskfile for submission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_bmdma_qc_prep\">ata_bmdma_qc_prep</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_QCFLAG_DMAMAP\">ATA_QCFLAG_DMAMAP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_bmdma_fill_sg\">ata_bmdma_fill_sg</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_bmdma_qc_prep\">ata_bmdma_qc_prep</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_bmdma_dumb_qc_prep - Prepare taskfile for submission</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: Metadata associated with taskfile to be prepared</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Prepare ATA taskfile for submission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_bmdma_dumb_qc_prep\">ata_bmdma_dumb_qc_prep</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_QCFLAG_DMAMAP\">ATA_QCFLAG_DMAMAP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_bmdma_fill_sg_dumb\">ata_bmdma_fill_sg_dumb</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_bmdma_dumb_qc_prep\">ata_bmdma_dumb_qc_prep</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_bmdma_qc_issue - issue taskfile to a BMDMA controller</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: command to issue to device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function issues a PIO, NODATA or DMA command to a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>SFF/BMDMA controller.  PIO and NODATA are handled by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_sff_qc_issue().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Zero on success, AC_ERR_* mask on failure</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#ata_bmdma_qc_issue\">ata_bmdma_qc_issue</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* defer PIO handling to sff_qc_issue */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ata_is_dma\">ata_is_dma</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ata_sff_qc_issue\">ata_sff_qc_issue</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* select the device */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_select\">ata_dev_select</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devno\">devno</a>, 1, 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* start the command */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ATA_PROT_DMA\">ATA_PROT_DMA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_TFLAG_POLLING\">ATA_TFLAG_POLLING</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_tf_load\">sff_tf_load</a>(<a class=\"id\" href=\"#ap\">ap</a>, &amp;<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>);  <span class=\"comment\">/* load tf registers */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#bmdma_setup\">bmdma_setup</a>(<a class=\"id\" href=\"#qc\">qc</a>);<span class=\"ts\"/>    <span class=\"comment\">/* set up bmdma */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#bmdma_start\">bmdma_start</a>(<a class=\"id\" href=\"#qc\">qc</a>);<span class=\"ts\"/>    <span class=\"comment\">/* initiate bmdma */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#hsm_task_state\">hsm_task_state</a> = <a class=\"id\" href=\"#HSM_ST_LAST\">HSM_ST_LAST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ATAPI_PROT_DMA\">ATAPI_PROT_DMA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_TFLAG_POLLING\">ATA_TFLAG_POLLING</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_tf_load\">sff_tf_load</a>(<a class=\"id\" href=\"#ap\">ap</a>, &amp;<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>);  <span class=\"comment\">/* load tf registers */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#bmdma_setup\">bmdma_setup</a>(<a class=\"id\" href=\"#qc\">qc</a>);<span class=\"ts\"/>    <span class=\"comment\">/* set up bmdma */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#hsm_task_state\">hsm_task_state</a> = <a class=\"id\" href=\"#HSM_ST_FIRST\">HSM_ST_FIRST</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* send cdb by polling if no cdb interrupt */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_CDB_INTR\">ATA_DFLAG_CDB_INTR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_sff_queue_pio_task\">ata_sff_queue_pio_task</a>(<a class=\"id\" href=\"#link\">link</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#AC_ERR_SYSTEM\">AC_ERR_SYSTEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_bmdma_qc_issue\">ata_bmdma_qc_issue</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_bmdma_port_intr - Handle BMDMA port interrupt</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ap: Port on which interrupt arrived (possibly...)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: Taskfile currently active in engine</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Handle port interrupt for given queued command.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>One if interrupt was handled, zero if not (shared irq).</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#ata_bmdma_port_intr\">ata_bmdma_port_intr</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>, struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_eh_info\">ata_eh_info</a> *<a class=\"id\" href=\"#ehi\">ehi</a> = &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#eh_info\">eh_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#host_stat\">host_stat</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#bmdma_stopped\">bmdma_stopped</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#handled\">handled</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#hsm_task_state\">hsm_task_state</a> == <a class=\"id\" href=\"#HSM_ST_LAST\">HSM_ST_LAST</a> && <a class=\"id\" href=\"#ata_is_dma\">ata_is_dma</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* check status of DMA engine */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host_stat\">host_stat</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#bmdma_status\">bmdma_status</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VPRINTK\">VPRINTK</a>(\"ata%u: host_stat 0x%X\\n\", <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#print_id\">print_id</a>, <a class=\"id\" href=\"#host_stat\">host_stat</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if it's not our irq... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#host_stat\">host_stat</a> &amp; <a class=\"id\" href=\"#ATA_DMA_INTR\">ATA_DMA_INTR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ata_sff_idle_irq\">ata_sff_idle_irq</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* before we do anything else, clear DMA-Start bit */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#bmdma_stop\">bmdma_stop</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bmdma_stopped\">bmdma_stopped</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#host_stat\">host_stat</a> &amp; <a class=\"id\" href=\"#ATA_DMA_ERR\">ATA_DMA_ERR</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* error when transfering data to/from memory */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a> |= <a class=\"id\" href=\"#AC_ERR_HOST_BUS\">AC_ERR_HOST_BUS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#hsm_task_state\">hsm_task_state</a> = <a class=\"id\" href=\"#HSM_ST_ERR\">HSM_ST_ERR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handled\">handled</a> = <a class=\"id\" href=\"#__ata_sff_port_intr\">__ata_sff_port_intr</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#qc\">qc</a>, <a class=\"id\" href=\"#bmdma_stopped\">bmdma_stopped</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a>) && <a class=\"id\" href=\"#ata_is_dma\">ata_is_dma</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_ehi_push_desc\">ata_ehi_push_desc</a>(<a class=\"id\" href=\"#ehi\">ehi</a>, \"BMDMA stat 0x%x\", <a class=\"id\" href=\"#host_stat\">host_stat</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#handled\">handled</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_bmdma_port_intr\">ata_bmdma_port_intr</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_bmdma_interrupt - Default BMDMA ATA host interrupt handler</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@irq: irq line (unused)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev_instance: pointer to our ata_host information structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Default interrupt handler for PCI IDE devices.  Calls</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_bmdma_port_intr() for each port that is not disabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Obtains host lock during operation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>IRQ_NONE or IRQ_HANDLED.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#irqreturn_t\">irqreturn_t</a> <a class=\"id\" href=\"#ata_bmdma_interrupt\">ata_bmdma_interrupt</a>(int <a class=\"id\" href=\"#irq\">irq</a>, void *<a class=\"id\" href=\"#dev_instance\">dev_instance</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__ata_sff_interrupt\">__ata_sff_interrupt</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#dev_instance\">dev_instance</a>, <a class=\"id\" href=\"#ata_bmdma_port_intr\">ata_bmdma_port_intr</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_bmdma_interrupt\">ata_bmdma_interrupt</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_bmdma_error_handler - Stock error handler for BMDMA controller</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ap: port to handle error for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Stock error handler for BMDMA controller.  It can handle both</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>PATA and SATA controllers.  Most BMDMA controllers should be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>able to use this EH as-is or with some added handling before</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and after.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel thread context (may sleep)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_bmdma_error_handler\">ata_bmdma_error_handler</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#thaw\">thaw</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a> = <a class=\"id\" href=\"#__ata_qc_from_tag\">__ata_qc_from_tag</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#active_tag\">active_tag</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a> && !(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_QCFLAG_FAILED\">ATA_QCFLAG_FAILED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* reset PIO HSM and stop DMA engine */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a> && <a class=\"id\" href=\"#ata_is_dma\">ata_is_dma</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#host_stat\">host_stat</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host_stat\">host_stat</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#bmdma_status\">bmdma_status</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* BMDMA controllers indicate host bus error by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * setting DMA_ERR bit and timing out.  As it wasn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * really a timeout event, adjust error mask and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cancel frozen state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a> == <a class=\"id\" href=\"#AC_ERR_TIMEOUT\">AC_ERR_TIMEOUT</a> && (<a class=\"id\" href=\"#host_stat\">host_stat</a> &amp; <a class=\"id\" href=\"#ATA_DMA_ERR\">ATA_DMA_ERR</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a> = <a class=\"id\" href=\"#AC_ERR_HOST_BUS\">AC_ERR_HOST_BUS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thaw\">thaw</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#bmdma_stop\">bmdma_stop</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if we're gonna thaw, make sure IRQ is clear */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#thaw\">thaw</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_check_status\">sff_check_status</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_irq_clear\">sff_irq_clear</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_irq_clear\">sff_irq_clear</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#thaw\">thaw</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_eh_thaw_port\">ata_eh_thaw_port</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_sff_error_handler\">ata_sff_error_handler</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_bmdma_error_handler\">ata_bmdma_error_handler</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_bmdma_post_internal_cmd - Stock post_internal_cmd for BMDMA</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: internal command to clean up</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel thread context (may sleep)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_bmdma_post_internal_cmd\">ata_bmdma_post_internal_cmd</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_is_dma\">ata_is_dma</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#bmdma_stop\">bmdma_stop</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_bmdma_post_internal_cmd\">ata_bmdma_post_internal_cmd</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_bmdma_irq_clear - Clear PCI IDE BMDMA interrupt.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ap: Port associated with this ATA transaction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Clear interrupt and error flags in DMA status register.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>May be used as the irq_clear() entry in ata_port_operations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_bmdma_irq_clear\">ata_bmdma_irq_clear</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>)", 
"{", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#mmio\">mmio</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ioaddr\">ioaddr</a>.<a class=\"id\" href=\"#bmdma_addr\">bmdma_addr</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mmio\">mmio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iowrite8\">iowrite8</a>(<a class=\"id\" href=\"#ioread8\">ioread8</a>(<a class=\"id\" href=\"#mmio\">mmio</a> + <a class=\"id\" href=\"#ATA_DMA_STATUS\">ATA_DMA_STATUS</a>), <a class=\"id\" href=\"#mmio\">mmio</a> + <a class=\"id\" href=\"#ATA_DMA_STATUS\">ATA_DMA_STATUS</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_bmdma_irq_clear\">ata_bmdma_irq_clear</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_bmdma_setup - Set up PCI IDE BMDMA transaction</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: Info associated with this ATA transaction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_bmdma_setup\">ata_bmdma_setup</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#rw\">rw</a> = (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_TFLAG_WRITE\">ATA_TFLAG_WRITE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#dmactl\">dmactl</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* load PRD table addr. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb\">mb</a>();<span class=\"ts\"/><span class=\"comment\">/* make sure PRD table writes are visible to controller */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iowrite32\">iowrite32</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#bmdma_prd_dma\">bmdma_prd_dma</a>, <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ioaddr\">ioaddr</a>.<a class=\"id\" href=\"#bmdma_addr\">bmdma_addr</a> + <a class=\"id\" href=\"#ATA_DMA_TABLE_OFS\">ATA_DMA_TABLE_OFS</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* specify data direction, triple-check start bit is clear */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmactl\">dmactl</a> = <a class=\"id\" href=\"#ioread8\">ioread8</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ioaddr\">ioaddr</a>.<a class=\"id\" href=\"#bmdma_addr\">bmdma_addr</a> + <a class=\"id\" href=\"#ATA_DMA_CMD\">ATA_DMA_CMD</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmactl\">dmactl</a> &= ~(<a class=\"id\" href=\"#ATA_DMA_WR\">ATA_DMA_WR</a> | <a class=\"id\" href=\"#ATA_DMA_START\">ATA_DMA_START</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rw\">rw</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmactl\">dmactl</a> |= <a class=\"id\" href=\"#ATA_DMA_WR\">ATA_DMA_WR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iowrite8\">iowrite8</a>(<a class=\"id\" href=\"#dmactl\">dmactl</a>, <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ioaddr\">ioaddr</a>.<a class=\"id\" href=\"#bmdma_addr\">bmdma_addr</a> + <a class=\"id\" href=\"#ATA_DMA_CMD\">ATA_DMA_CMD</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* issue r/w command */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_exec_command\">sff_exec_command</a>(<a class=\"id\" href=\"#ap\">ap</a>, &amp;<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_bmdma_setup\">ata_bmdma_setup</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_bmdma_start - Start a PCI IDE BMDMA transaction</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: Info associated with this ATA transaction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_bmdma_start\">ata_bmdma_start</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#dmactl\">dmactl</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* start host DMA transaction */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmactl\">dmactl</a> = <a class=\"id\" href=\"#ioread8\">ioread8</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ioaddr\">ioaddr</a>.<a class=\"id\" href=\"#bmdma_addr\">bmdma_addr</a> + <a class=\"id\" href=\"#ATA_DMA_CMD\">ATA_DMA_CMD</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iowrite8\">iowrite8</a>(<a class=\"id\" href=\"#dmactl\">dmactl</a> | <a class=\"id\" href=\"#ATA_DMA_START\">ATA_DMA_START</a>, <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ioaddr\">ioaddr</a>.<a class=\"id\" href=\"#bmdma_addr\">bmdma_addr</a> + <a class=\"id\" href=\"#ATA_DMA_CMD\">ATA_DMA_CMD</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Strictly, one may wish to issue an ioread8() here, to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * flush the mmio write.  However, control also passes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the hardware at this point, and it will interrupt</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * us when we are to resume control.  So, in effect,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we don't care when the mmio write flushes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Further, a read of the DMA status register _immediately_</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * following the write may not be what certain flaky hardware</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is expected, so I think it is best to not add a readb()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * without first all the MMIO ATA cards/mobos.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Or maybe I'm just being paranoid.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * FIXME: The posting of this write means I/O starts are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unneccessarily delayed for MMIO</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_bmdma_start\">ata_bmdma_start</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_bmdma_stop - Stop PCI IDE BMDMA transfer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: Command we are ending DMA for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Clears the ATA_DMA_START flag in the dma control register</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>May be used as the bmdma_stop() entry in ata_port_operations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_bmdma_stop\">ata_bmdma_stop</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#mmio\">mmio</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ioaddr\">ioaddr</a>.<a class=\"id\" href=\"#bmdma_addr\">bmdma_addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* clear start/stop bit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iowrite8\">iowrite8</a>(<a class=\"id\" href=\"#ioread8\">ioread8</a>(<a class=\"id\" href=\"#mmio\">mmio</a> + <a class=\"id\" href=\"#ATA_DMA_CMD\">ATA_DMA_CMD</a>) &amp; ~<a class=\"id\" href=\"#ATA_DMA_START\">ATA_DMA_START</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#mmio\">mmio</a> + <a class=\"id\" href=\"#ATA_DMA_CMD\">ATA_DMA_CMD</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* one-PIO-cycle guaranteed wait, per spec, for HDMA1:0 transition */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_sff_dma_pause\">ata_sff_dma_pause</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_bmdma_stop\">ata_bmdma_stop</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_bmdma_status - Read PCI IDE BMDMA status</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ap: Port associated with this ATA transaction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Read and return BMDMA status register.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>May be used as the bmdma_status() entry in ata_port_operations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ata_bmdma_status\">ata_bmdma_status</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ioread8\">ioread8</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ioaddr\">ioaddr</a>.<a class=\"id\" href=\"#bmdma_addr\">bmdma_addr</a> + <a class=\"id\" href=\"#ATA_DMA_STATUS\">ATA_DMA_STATUS</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_bmdma_status\">ata_bmdma_status</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_bmdma_port_start - Set port up for bmdma.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ap: Port to initialize</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called just after data structures for each port are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>initialized.  Allocates space for PRD table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>May be used as the port_start() entry in ata_port_operations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Inherited from caller.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_bmdma_port_start\">ata_bmdma_port_start</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a> || <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#udma_mask\">udma_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#bmdma_prd\">bmdma_prd</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmam_alloc_coherent\">dmam_alloc_coherent</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#ATA_PRD_TBL_SZ\">ATA_PRD_TBL_SZ</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#bmdma_prd_dma\">bmdma_prd_dma</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#bmdma_prd\">bmdma_prd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_bmdma_port_start\">ata_bmdma_port_start</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_bmdma_port_start32 - Set port up for dma.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ap: Port to initialize</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called just after data structures for each port are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>initialized.  Enables 32bit PIO and allocates space for PRD</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>May be used as the port_start() entry in ata_port_operations for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>devices that are capable of 32bit PIO.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Inherited from caller.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_bmdma_port_start32\">ata_bmdma_port_start32</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> |= <a class=\"id\" href=\"#ATA_PFLAG_PIO32\">ATA_PFLAG_PIO32</a> | <a class=\"id\" href=\"#ATA_PFLAG_PIO32CHANGE\">ATA_PFLAG_PIO32CHANGE</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ata_bmdma_port_start\">ata_bmdma_port_start</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_bmdma_port_start32\">ata_bmdma_port_start32</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PCI\">CONFIG_PCI</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_pci_bmdma_clear_simplex -<span class=\"ts\"/>attempt to kick device out of simplex</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pdev: PCI device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Some PCI ATA devices report simplex mode but in fact can be told to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>enter non simplex mode. This implements the necessary logic to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>perform the task on such devices. Calling it on other devices will</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>have -undefined- behaviour.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_pci_bmdma_clear_simplex\">ata_pci_bmdma_clear_simplex</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bmdma\">bmdma</a> = <a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, 4);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#simplex\">simplex</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bmdma\">bmdma</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#simplex\">simplex</a> = <a class=\"id\" href=\"#inb\">inb</a>(<a class=\"id\" href=\"#bmdma\">bmdma</a> + 0x02);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(<a class=\"id\" href=\"#simplex\">simplex</a> &amp; 0x60, <a class=\"id\" href=\"#bmdma\">bmdma</a> + 0x02);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#simplex\">simplex</a> = <a class=\"id\" href=\"#inb\">inb</a>(<a class=\"id\" href=\"#bmdma\">bmdma</a> + 0x02);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#simplex\">simplex</a> &amp; 0x80)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_pci_bmdma_clear_simplex\">ata_pci_bmdma_clear_simplex</a>);", 
"", 
"static void <a class=\"id\" href=\"#ata_bmdma_nodma\">ata_bmdma_nodma</a>(struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a>, const char *<a class=\"id\" href=\"#reason\">reason</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"BMDMA: %s, falling back to PIO\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#reason\">reason</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 2; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#udma_mask\">udma_mask</a> = 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_pci_bmdma_init - acquire PCI BMDMA resources and init ATA host</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@host: target ATA host</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Acquire PCI BMDMA resources and initialize @host accordingly.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Inherited from calling layer (may sleep).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_pci_bmdma_init\">ata_pci_bmdma_init</a>(struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#gdev\">gdev</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#to_pci_dev\">to_pci_dev</a>(<a class=\"id\" href=\"#gdev\">gdev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No BAR4 allocation: No DMA */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, 4) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_bmdma_nodma\">ata_bmdma_nodma</a>(<a class=\"id\" href=\"#host\">host</a>, \"BAR4 is zero\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some controllers require BMDMA region to be initialized</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * even if DMA is not in use to clear IRQ status via</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * -&gt;sff_irq_clear method.  Try to initialize bmdma_addr</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * regardless of dma masks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pci_set_dma_mask\">pci_set_dma_mask</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#ATA_DMA_MASK\">ATA_DMA_MASK</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_bmdma_nodma\">ata_bmdma_nodma</a>(<a class=\"id\" href=\"#host\">host</a>, \"failed to set dma mask\");", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pci_set_consistent_dma_mask\">pci_set_consistent_dma_mask</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#ATA_DMA_MASK\">ATA_DMA_MASK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_bmdma_nodma\">ata_bmdma_nodma</a>(<a class=\"id\" href=\"#host\">host</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"failed to set consistent dma mask\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* request and iomap DMA region */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pcim_iomap_regions\">pcim_iomap_regions</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, 1 << 4, <a class=\"id\" href=\"#dev_driver_string\">dev_driver_string</a>(<a class=\"id\" href=\"#gdev\">gdev</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_bmdma_nodma\">ata_bmdma_nodma</a>(<a class=\"id\" href=\"#host\">host</a>, \"failed to request/iomap BAR4\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#iomap\">iomap</a> = <a class=\"id\" href=\"#pcim_iomap_table\">pcim_iomap_table</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 2; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#bmdma\">bmdma</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#iomap\">iomap</a>[4] + 8 * <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_port_is_dummy\">ata_port_is_dummy</a>(<a class=\"id\" href=\"#ap\">ap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ioaddr\">ioaddr</a>.<a class=\"id\" href=\"#bmdma_addr\">bmdma_addr</a> = <a class=\"id\" href=\"#bmdma\">bmdma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((!(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_IGN_SIMPLEX\">ATA_FLAG_IGN_SIMPLEX</a>)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#ioread8\">ioread8</a>(<a class=\"id\" href=\"#bmdma\">bmdma</a> + 2) &amp; 0x80))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_HOST_SIMPLEX\">ATA_HOST_SIMPLEX</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_desc\">ata_port_desc</a>(<a class=\"id\" href=\"#ap\">ap</a>, \"bmdma 0x%llx\",", 
"<span class=\"ts\"/><span class=\"ts\"/>    (unsigned long long)<a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, 4) + 8 * <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_pci_bmdma_init\">ata_pci_bmdma_init</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_pci_bmdma_prepare_host - helper to prepare PCI BMDMA ATA host</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pdev: target PCI device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ppi: array of port_info, must be enough for two ports</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@r_host: out argument for the initialized ATA host</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Helper to allocate BMDMA ATA host for @pdev, acquire all PCI</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>resources and initialize it accordingly in one go.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Inherited from calling layer (may sleep).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -errno otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_pci_bmdma_prepare_host\">ata_pci_bmdma_prepare_host</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#ata_port_info\">ata_port_info</a> * const * <a class=\"id\" href=\"#ppi\">ppi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#ata_host\">ata_host</a> **<a class=\"id\" href=\"#r_host\">r_host</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_pci_sff_prepare_host\">ata_pci_sff_prepare_host</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#ppi\">ppi</a>, <a class=\"id\" href=\"#r_host\">r_host</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_pci_bmdma_init\">ata_pci_bmdma_init</a>(*<a class=\"id\" href=\"#r_host\">r_host</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_pci_bmdma_prepare_host\">ata_pci_bmdma_prepare_host</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_pci_bmdma_init_one - Initialize/register BMDMA PCI IDE controller</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pdev: Controller to be initialized</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ppi: array of port_info, must be enough for two ports</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sht: scsi_host_template to use when registering the host</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@host_priv: host private_data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@hflags: host flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function is similar to ata_pci_sff_init_one() but also</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>takes care of BMDMA initialization.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Inherited from PCI layer (may sleep).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Zero on success, negative on errno-based value on error.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_pci_bmdma_init_one\">ata_pci_bmdma_init_one</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#ata_port_info\">ata_port_info</a> * const * <a class=\"id\" href=\"#ppi\">ppi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#scsi_host_template\">scsi_host_template</a> *<a class=\"id\" href=\"#sht\">sht</a>, void *<a class=\"id\" href=\"#host_priv\">host_priv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#hflags\">hflags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a> = &amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ata_port_info\">ata_port_info</a> *<a class=\"id\" href=\"#pi\">pi</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"ENTER\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pi\">pi</a> = <a class=\"id\" href=\"#ata_sff_find_valid_pi\">ata_sff_find_valid_pi</a>(<a class=\"id\" href=\"#ppi\">ppi</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pi\">pi</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, &amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"no valid port_info specified\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#devres_open_group\">devres_open_group</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pcim_enable_device\">pcim_enable_device</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* prepare and activate BMDMA host */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_pci_bmdma_prepare_host\">ata_pci_bmdma_prepare_host</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#ppi\">ppi</a>, &amp;<a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#private_data\">private_data</a> = <a class=\"id\" href=\"#host_priv\">host_priv</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#hflags\">hflags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_set_master\">pci_set_master</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_pci_sff_activate_host\">ata_pci_sff_activate_host</a>(<a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#ata_bmdma_interrupt\">ata_bmdma_interrupt</a>, <a class=\"id\" href=\"#sht\">sht</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devres_remove_group\">devres_remove_group</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devres_release_group\">devres_release_group</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_pci_bmdma_init_one\">ata_pci_bmdma_init_one</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PCI */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_ATA_BMDMA */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_sff_port_init - Initialize SFF/BMDMA ATA port</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ap: Port to initialize</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called on port allocation to initialize SFF/BMDMA specific</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>fields.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_sff_port_init\">ata_sff_port_init</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_DELAYED_WORK\">INIT_DELAYED_WORK</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#sff_pio_task\">sff_pio_task</a>, <a class=\"id\" href=\"#ata_sff_pio_task\">ata_sff_pio_task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ctl\">ctl</a> = <a class=\"id\" href=\"#ATA_DEVCTL_OBS\">ATA_DEVCTL_OBS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#last_ctl\">last_ctl</a> = 0xFF;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ata_sff_init\">ata_sff_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_sff_wq\">ata_sff_wq</a> = <a class=\"id\" href=\"#alloc_workqueue\">alloc_workqueue</a>(\"ata_sff\", <a class=\"id\" href=\"#WQ_RESCUER\">WQ_RESCUER</a>, <a class=\"id\" href=\"#WQ_MAX_ACTIVE\">WQ_MAX_ACTIVE</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ata_sff_wq\">ata_sff_wq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#ata_sff_exit\">ata_sff_exit</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destroy_workqueue\">destroy_workqueue</a>(<a class=\"id\" href=\"#ata_sff_wq\">ata_sff_wq</a>);", 
"}", 
];
xr_frag_insert('l/53/daa8695a75850966cca4d0857a25a6185e1ab0.xr', __xr_tmp);
