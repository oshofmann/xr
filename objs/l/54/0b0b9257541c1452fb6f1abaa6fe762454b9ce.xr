var __xr_tmp = [
"", 
"static struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#sd_alloc_ctl_entry\">sd_alloc_ctl_entry</a>(int <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#entry\">entry</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kcalloc\">kcalloc</a>(<a class=\"id\" href=\"#n\">n</a>, sizeof(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#entry\">entry</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sd_free_ctl_entry\">sd_free_ctl_entry</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> **<a class=\"id\" href=\"#tablep\">tablep</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In the intermediate directories, both the child directory and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * procname are dynamically allocated and could fail but the mode</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will always be set. In the lowest directory the names are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * static strings and all have proc handlers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#entry\">entry</a> = *<a class=\"id\" href=\"#tablep\">tablep</a>; <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#mode\">mode</a>; <a class=\"id\" href=\"#entry\">entry</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#child\">child</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_free_ctl_entry\">sd_free_ctl_entry</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#proc_handler\">proc_handler</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#procname\">procname</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(*<a class=\"id\" href=\"#tablep\">tablep</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#tablep\">tablep</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#set_table_entry\">set_table_entry</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#procname\">procname</a>, void *<a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#maxlen\">maxlen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#proc_handler\">proc_handler</a> *<a class=\"id\" href=\"#proc_handler\">proc_handler</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#procname\">procname</a> = <a class=\"id\" href=\"#procname\">procname</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#maxlen\">maxlen</a> = <a class=\"id\" href=\"#maxlen\">maxlen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#proc_handler\">proc_handler</a> = <a class=\"id\" href=\"#proc_handler\">proc_handler</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *", 
"<a class=\"id\" href=\"#sd_alloc_ctl_domain_table\">sd_alloc_ctl_domain_table</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#sd_alloc_ctl_entry\">sd_alloc_ctl_entry</a>(13);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#table\">table</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_table_entry\">set_table_entry</a>(&amp;<a class=\"id\" href=\"#table\">table</a>[0], \"min_interval\", &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#min_interval\">min_interval</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof(long), 0644, <a class=\"id\" href=\"#proc_doulongvec_minmax\">proc_doulongvec_minmax</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_table_entry\">set_table_entry</a>(&amp;<a class=\"id\" href=\"#table\">table</a>[1], \"max_interval\", &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#max_interval\">max_interval</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof(long), 0644, <a class=\"id\" href=\"#proc_doulongvec_minmax\">proc_doulongvec_minmax</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_table_entry\">set_table_entry</a>(&amp;<a class=\"id\" href=\"#table\">table</a>[2], \"busy_idx\", &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#busy_idx\">busy_idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof(int), 0644, <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_table_entry\">set_table_entry</a>(&amp;<a class=\"id\" href=\"#table\">table</a>[3], \"idle_idx\", &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#idle_idx\">idle_idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof(int), 0644, <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_table_entry\">set_table_entry</a>(&amp;<a class=\"id\" href=\"#table\">table</a>[4], \"newidle_idx\", &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#newidle_idx\">newidle_idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof(int), 0644, <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_table_entry\">set_table_entry</a>(&amp;<a class=\"id\" href=\"#table\">table</a>[5], \"wake_idx\", &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#wake_idx\">wake_idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof(int), 0644, <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_table_entry\">set_table_entry</a>(&amp;<a class=\"id\" href=\"#table\">table</a>[6], \"forkexec_idx\", &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#forkexec_idx\">forkexec_idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof(int), 0644, <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_table_entry\">set_table_entry</a>(&amp;<a class=\"id\" href=\"#table\">table</a>[7], \"busy_factor\", &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#busy_factor\">busy_factor</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof(int), 0644, <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_table_entry\">set_table_entry</a>(&amp;<a class=\"id\" href=\"#table\">table</a>[8], \"imbalance_pct\", &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#imbalance_pct\">imbalance_pct</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof(int), 0644, <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_table_entry\">set_table_entry</a>(&amp;<a class=\"id\" href=\"#table\">table</a>[9], \"cache_nice_tries\",", 
"<span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#cache_nice_tries\">cache_nice_tries</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof(int), 0644, <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_table_entry\">set_table_entry</a>(&amp;<a class=\"id\" href=\"#table\">table</a>[10], \"flags\", &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof(int), 0644, <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_table_entry\">set_table_entry</a>(&amp;<a class=\"id\" href=\"#table\">table</a>[11], \"name\", <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#CORENAME_MAX_SIZE\">CORENAME_MAX_SIZE</a>, 0444, <a class=\"id\" href=\"#proc_dostring\">proc_dostring</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* &amp;table[12] is terminator */</span>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#table\">table</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#sd_alloc_ctl_cpu_table\">sd_alloc_ctl_cpu_table</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#entry\">entry</a>, *<a class=\"id\" href=\"#table\">table</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#domain_num\">domain_num</a> = 0, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[32];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_domain\">for_each_domain</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#sd\">sd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#domain_num\">domain_num</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#sd_alloc_ctl_entry\">sd_alloc_ctl_entry</a>(<a class=\"id\" href=\"#domain_num\">domain_num</a> + 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#table\">table</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_domain\">for_each_domain</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#sd\">sd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, 32, \"domain%d\", <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#procname\">procname</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#mode\">mode</a> = 0555;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#sd_alloc_ctl_domain_table\">sd_alloc_ctl_domain_table</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#table\">table</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#sd_sysctl_header\">sd_sysctl_header</a>;", 
"static void <a class=\"id\" href=\"#register_sched_domain_sysctl\">register_sched_domain_sysctl</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu_num\">cpu_num</a> = <a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#sd_alloc_ctl_entry\">sd_alloc_ctl_entry</a>(<a class=\"id\" href=\"#cpu_num\">cpu_num</a> + 1);", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[32];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#sd_ctl_dir\">sd_ctl_dir</a>[0].<a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_ctl_dir\">sd_ctl_dir</a>[0].<a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, 32, \"cpu%d\", <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#procname\">procname</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#mode\">mode</a> = 0555;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#sd_alloc_ctl_cpu_table\">sd_alloc_ctl_cpu_table</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#sd_sysctl_header\">sd_sysctl_header</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_sysctl_header\">sd_sysctl_header</a> = <a class=\"id\" href=\"#register_sysctl_table\">register_sysctl_table</a>(<a class=\"id\" href=\"#sd_ctl_root\">sd_ctl_root</a>);", 
"}", 
"", 
"<span class=\"comment\">/* may be called multiple times per register */</span>", 
"static void <a class=\"id\" href=\"#unregister_sched_domain_sysctl\">unregister_sched_domain_sysctl</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd_sysctl_header\">sd_sysctl_header</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_sysctl_table\">unregister_sysctl_table</a>(<a class=\"id\" href=\"#sd_sysctl_header\">sd_sysctl_header</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_sysctl_header\">sd_sysctl_header</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd_ctl_dir\">sd_ctl_dir</a>[0].<a class=\"id\" href=\"#child\">child</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_free_ctl_entry\">sd_free_ctl_entry</a>(&amp;<a class=\"id\" href=\"#sd_ctl_dir\">sd_ctl_dir</a>[0].<a class=\"id\" href=\"#child\">child</a>);", 
"}", 
"#else", 
"static void <a class=\"id\" href=\"#register_sched_domain_sysctl\">register_sched_domain_sysctl</a>(void)", 
"{", 
"}", 
"static void <a class=\"id\" href=\"#unregister_sched_domain_sysctl\">unregister_sched_domain_sysctl</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#set_rq_online\">set_rq_online</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#online\">online</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#sched_class\">sched_class</a> *<a class=\"id\" href=\"#class\">class</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#online\">online</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#online\">online</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_class\">for_each_class</a>(<a class=\"id\" href=\"#class\">class</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#rq_online\">rq_online</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#rq_online\">rq_online</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_rq_offline\">set_rq_offline</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#online\">online</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#sched_class\">sched_class</a> *<a class=\"id\" href=\"#class\">class</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_class\">for_each_class</a>(<a class=\"id\" href=\"#class\">class</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#rq_offline\">rq_offline</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#rq_offline\">rq_offline</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#online\">online</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#online\">online</a> = 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * migration_call - callback that gets triggered when a CPU is added.</span>", 
"<span class=\"comment\"> * Here we can start up the necessary migration thread for the new CPU.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a>", 
"<a class=\"id\" href=\"#migration_call\">migration_call</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nfb\">nfb</a>, unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = (long)<a class=\"id\" href=\"#hcpu\">hcpu</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a>) {", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_PREPARE_FROZEN\">CPU_UP_PREPARE_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#calc_load_update\">calc_load_update</a> = <a class=\"id\" href=\"#calc_load_update\">calc_load_update</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_ONLINE\">CPU_ONLINE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_ONLINE_FROZEN\">CPU_ONLINE_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Update our root-domain */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rd\">rd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#span\">span</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_rq_online\">set_rq_online</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DEAD\">CPU_DEAD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DEAD_FROZEN\">CPU_DEAD_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migrate_live_tasks\">migrate_live_tasks</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Idle task back to normal (off runqueue, low prio) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deactivate_task\">deactivate_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#idle\">idle</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__setscheduler\">__setscheduler</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#idle\">idle</a>, <a class=\"id\" href=\"#SCHED_NORMAL\">SCHED_NORMAL</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#idle\">idle</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a> = &amp;<a class=\"id\" href=\"#idle_sched_class\">idle_sched_class</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migrate_dead_tasks\">migrate_dead_tasks</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migrate_nr_uninterruptible\">migrate_nr_uninterruptible</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a> != 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#calc_global_load_remove\">calc_global_load_remove</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DYING\">CPU_DYING</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DYING_FROZEN\">CPU_DYING_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Update our root-domain */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rd\">rd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#span\">span</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_rq_offline\">set_rq_offline</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Register at high priority so that task migration (migrate_all_tasks)</span>", 
"<span class=\"comment\"> * happens before everything else.  This has to be lower priority than</span>", 
"<span class=\"comment\"> * the notifier in the perf_event subsystem, though.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> <a class=\"id\" href=\"#migration_notifier\">migration_notifier</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#migration_call\">migration_call</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#priority\">priority</a> = <a class=\"id\" href=\"#CPU_PRI_MIGRATION\">CPU_PRI_MIGRATION</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#sched_cpu_active\">sched_cpu_active</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nfb\">nfb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a> &amp; ~<a class=\"id\" href=\"#CPU_TASKS_FROZEN\">CPU_TASKS_FROZEN</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_ONLINE\">CPU_ONLINE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_FAILED\">CPU_DOWN_FAILED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_active\">set_cpu_active</a>((long)<a class=\"id\" href=\"#hcpu\">hcpu</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#sched_cpu_inactive\">sched_cpu_inactive</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nfb\">nfb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a> &amp; ~<a class=\"id\" href=\"#CPU_TASKS_FROZEN\">CPU_TASKS_FROZEN</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_PREPARE\">CPU_DOWN_PREPARE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_active\">set_cpu_active</a>((long)<a class=\"id\" href=\"#hcpu\">hcpu</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#migration_init\">migration_init</a>(void)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#cpu\">cpu</a> = (void *)(long)<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize migration for the boot CPU */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#migration_call\">migration_call</a>(&amp;<a class=\"id\" href=\"#migration_notifier\">migration_notifier</a>, <a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#err\">err</a> == <a class=\"id\" href=\"#NOTIFY_BAD\">NOTIFY_BAD</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#migration_call\">migration_call</a>(&amp;<a class=\"id\" href=\"#migration_notifier\">migration_notifier</a>, <a class=\"id\" href=\"#CPU_ONLINE\">CPU_ONLINE</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_cpu_notifier\">register_cpu_notifier</a>(&amp;<a class=\"id\" href=\"#migration_notifier\">migration_notifier</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Register cpu active notifiers */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_notifier\">cpu_notifier</a>(<a class=\"id\" href=\"#sched_cpu_active\">sched_cpu_active</a>, <a class=\"id\" href=\"#CPU_PRI_SCHED_ACTIVE\">CPU_PRI_SCHED_ACTIVE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_notifier\">cpu_notifier</a>(<a class=\"id\" href=\"#sched_cpu_inactive\">sched_cpu_inactive</a>, <a class=\"id\" href=\"#CPU_PRI_SCHED_INACTIVE\">CPU_PRI_SCHED_INACTIVE</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_initcall\">early_initcall</a>(<a class=\"id\" href=\"#migration_init\">migration_init</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_DEBUG\">CONFIG_SCHED_DEBUG</a>", 
"", 
"static <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> int <a class=\"id\" href=\"#sched_domain_debug_enabled\">sched_domain_debug_enabled</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sched_domain_debug_setup\">sched_domain_debug_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_domain_debug_enabled\">sched_domain_debug_enabled</a> = 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"sched_debug\", <a class=\"id\" href=\"#sched_domain_debug_setup\">sched_domain_debug_setup</a>);", 
"", 
"static int <a class=\"id\" href=\"#sched_domain_debug_one\">sched_domain_debug_one</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#level\">level</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#groupmask\">groupmask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#str\">str</a>[256];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpulist_scnprintf\">cpulist_scnprintf</a>(<a class=\"id\" href=\"#str\">str</a>, sizeof(<a class=\"id\" href=\"#str\">str</a>), <a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear\">cpumask_clear</a>(<a class=\"id\" href=\"#groupmask\">groupmask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"%*s domain %d: \", <a class=\"id\" href=\"#level\">level</a>, \"\", <a class=\"id\" href=\"#level\">level</a>);", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_LOAD_BALANCE\">SD_LOAD_BALANCE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"does not load-balance\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ERROR: !SD_LOAD_BALANCE domain\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" has parent\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"span %s level %s\\n\", <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ERROR: domain->span does not contain \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"CPU%d\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(<a class=\"id\" href=\"#group\">group</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ERROR: domain->groups does not contain\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" CPU%d\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"%*s groups:\", <a class=\"id\" href=\"#level\">level</a> + 1, \"\");", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#group\">group</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ERROR: group is NULL\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ERROR: domain->cpu_power not \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"set\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_weight\">cpumask_weight</a>(<a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(<a class=\"id\" href=\"#group\">group</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ERROR: empty group\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_intersects\">cpumask_intersects</a>(<a class=\"id\" href=\"#groupmask\">groupmask</a>, <a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(<a class=\"id\" href=\"#group\">group</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ERROR: repeated CPUs\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_or\">cpumask_or</a>(<a class=\"id\" href=\"#groupmask\">groupmask</a>, <a class=\"id\" href=\"#groupmask\">groupmask</a>, <a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(<a class=\"id\" href=\"#group\">group</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpulist_scnprintf\">cpulist_scnprintf</a>(<a class=\"id\" href=\"#str\">str</a>, sizeof(<a class=\"id\" href=\"#str\">str</a>), <a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(<a class=\"id\" href=\"#group\">group</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \" %s\", <a class=\"id\" href=\"#str\">str</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a> != <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \" (cpu_power = %d)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#group\">group</a> != <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"\\n\");", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_equal\">cpumask_equal</a>(<a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>), <a class=\"id\" href=\"#groupmask\">groupmask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ERROR: groups don't span domain->span\\n\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#parent\">parent</a> &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#cpumask_subset\">cpumask_subset</a>(<a class=\"id\" href=\"#groupmask\">groupmask</a>, <a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#parent\">parent</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ERROR: parent span is not a superset \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"of domain->span\\n\");", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sched_domain_debug\">sched_domain_debug</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#groupmask\">groupmask</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#level\">level</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sched_domain_debug_enabled\">sched_domain_debug_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sd\">sd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"CPU%d attaching NULL sched-domain.\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"CPU%d attaching sched-domain:\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#groupmask\">groupmask</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"Cannot load-balance (out of memory)\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sched_domain_debug_one\">sched_domain_debug_one</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#groupmask\">groupmask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#level\">level</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sd\">sd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#groupmask\">groupmask</a>);", 
"}", 
"#else <span class=\"comment\">/* !CONFIG_SCHED_DEBUG */</span>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sched_domain_debug\">sched_domain_debug</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SCHED_DEBUG */</span>", 
"", 
"static int <a class=\"id\" href=\"#sd_degenerate\">sd_degenerate</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_weight\">cpumask_weight</a>(<a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>)) == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Following flags need at least 2 groups */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#SD_LOAD_BALANCE\">SD_LOAD_BALANCE</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SD_BALANCE_NEWIDLE\">SD_BALANCE_NEWIDLE</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SD_BALANCE_FORK\">SD_BALANCE_FORK</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SD_BALANCE_EXEC\">SD_BALANCE_EXEC</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SD_SHARE_CPUPOWER\">SD_SHARE_CPUPOWER</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SD_SHARE_PKG_RESOURCES\">SD_SHARE_PKG_RESOURCES</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a> != <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Following flags don't use groups */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#SD_WAKE_AFFINE\">SD_WAKE_AFFINE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#sd_parent_degenerate\">sd_parent_degenerate</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cflags\">cflags</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pflags\">pflags</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd_degenerate\">sd_degenerate</a>(<a class=\"id\" href=\"#parent\">parent</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_equal\">cpumask_equal</a>(<a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>), <a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#parent\">parent</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Flags needing groups don't count if only 1 group in parent */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#groups\">groups</a> == <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#groups\">groups</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pflags\">pflags</a> &= ~(<a class=\"id\" href=\"#SD_LOAD_BALANCE\">SD_LOAD_BALANCE</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SD_BALANCE_NEWIDLE\">SD_BALANCE_NEWIDLE</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SD_BALANCE_FORK\">SD_BALANCE_FORK</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SD_BALANCE_EXEC\">SD_BALANCE_EXEC</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SD_SHARE_CPUPOWER\">SD_SHARE_CPUPOWER</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SD_SHARE_PKG_RESOURCES\">SD_SHARE_PKG_RESOURCES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pflags\">pflags</a> &= ~<a class=\"id\" href=\"#SD_SERIALIZE\">SD_SERIALIZE</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (~<a class=\"id\" href=\"#cflags\">cflags</a> &amp; <a class=\"id\" href=\"#pflags\">pflags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_rootdomain\">free_rootdomain</a>(struct <a class=\"id\" href=\"#root_domain\">root_domain</a> *<a class=\"id\" href=\"#rd\">rd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpupri_cleanup\">cpupri_cleanup</a>(&amp;<a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#cpupri\">cpupri</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#rto_mask\">rto_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#online\">online</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#span\">span</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#rd\">rd</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rq_attach_root\">rq_attach_root</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#root_domain\">root_domain</a> *<a class=\"id\" href=\"#rd\">rd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#root_domain\">root_domain</a> *<a class=\"id\" href=\"#old_rd\">old_rd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rd\">rd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_rd\">old_rd</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rd\">rd</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#old_rd\">old_rd</a>-><a class=\"id\" href=\"#online\">online</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_rq_offline\">set_rq_offline</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#old_rd\">old_rd</a>-><a class=\"id\" href=\"#span\">span</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we dont want to free the old_rt yet then</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * set old_rd to NULL to skip the freeing later</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in this function:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#old_rd\">old_rd</a>-><a class=\"id\" href=\"#refcount\">refcount</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_rd\">old_rd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#refcount\">refcount</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rd\">rd</a> = <a class=\"id\" href=\"#rd\">rd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#span\">span</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_active_mask\">cpu_active_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_rq_online\">set_rq_online</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_rd\">old_rd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_rootdomain\">free_rootdomain</a>(<a class=\"id\" href=\"#old_rd\">old_rd</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#init_rootdomain\">init_rootdomain</a>(struct <a class=\"id\" href=\"#root_domain\">root_domain</a> *<a class=\"id\" href=\"#rd\">rd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#rd\">rd</a>, 0, sizeof(*<a class=\"id\" href=\"#rd\">rd</a>));", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#span\">span</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#online\">online</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_span\">free_span</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#rto_mask\">rto_mask</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_online\">free_online</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpupri_init\">cpupri_init</a>(&amp;<a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#cpupri\">cpupri</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_rto_mask\">free_rto_mask</a>;", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#free_rto_mask\">free_rto_mask</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#rto_mask\">rto_mask</a>);", 
"<a class=\"id\" href=\"#free_online\">free_online</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#online\">online</a>);", 
"<a class=\"id\" href=\"#free_span\">free_span</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#span\">span</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#init_defrootdomain\">init_defrootdomain</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_rootdomain\">init_rootdomain</a>(&amp;<a class=\"id\" href=\"#def_root_domain\">def_root_domain</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#def_root_domain\">def_root_domain</a>.<a class=\"id\" href=\"#refcount\">refcount</a>, 1);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#root_domain\">root_domain</a> *<a class=\"id\" href=\"#alloc_rootdomain\">alloc_rootdomain</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#root_domain\">root_domain</a> *<a class=\"id\" href=\"#rd\">rd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rd\">rd</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#rd\">rd</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rd\">rd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#init_rootdomain\">init_rootdomain</a>(<a class=\"id\" href=\"#rd\">rd</a>) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#rd\">rd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rd\">rd</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Attach the domain 'sd' to 'cpu' as its base domain. Callers must</span>", 
"<span class=\"comment\"> * hold the hotplug lock.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#cpu_attach_domain\">cpu_attach_domain</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, struct <a class=\"id\" href=\"#root_domain\">root_domain</a> *<a class=\"id\" href=\"#rd\">rd</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#sd\">sd</a>; <a class=\"id\" href=\"#tmp\">tmp</a>; <a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#span_weight\">span_weight</a> = <a class=\"id\" href=\"#cpumask_weight\">cpumask_weight</a>(<a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#tmp\">tmp</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove the sched domains which do not contribute to scheduling. */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#sd\">sd</a>; <a class=\"id\" href=\"#tmp\">tmp</a>; ) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sd_parent_degenerate\">sd_parent_degenerate</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#parent\">parent</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a> && <a class=\"id\" href=\"#sd_degenerate\">sd_degenerate</a>(<a class=\"id\" href=\"#sd\">sd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_domain_debug\">sched_domain_debug</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq_attach_root\">rq_attach_root</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#rd\">rd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#sd\">sd</a>);", 
"}", 
"", 
"<span class=\"comment\">/* cpus with isolated domains */</span>", 
"static <a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#cpu_isolated_map\">cpu_isolated_map</a>;", 
"", 
"<span class=\"comment\">/* Setup the mask of cpus configured for isolated domains */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#isolated_cpu_setup\">isolated_cpu_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_bootmem_cpumask_var\">alloc_bootmem_cpumask_var</a>(&amp;<a class=\"id\" href=\"#cpu_isolated_map\">cpu_isolated_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpulist_parse\">cpulist_parse</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#cpu_isolated_map\">cpu_isolated_map</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"isolcpus=\", <a class=\"id\" href=\"#isolated_cpu_setup\">isolated_cpu_setup</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * init_sched_build_groups takes the cpumask we wish to span, and a pointer</span>", 
"<span class=\"comment\"> * to a function which identifies what group(along with sched group) a CPU</span>", 
"<span class=\"comment\"> * belongs to. The return value of group_fn must be a &gt;= 0 and &lt; nr_cpu_ids</span>", 
"<span class=\"comment\"> * (due to the fact that we keep track of groups covered with a struct cpumask).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * init_sched_build_groups will build a circular linked list of the groups</span>", 
"<span class=\"comment\"> * covered by the given span, and will set each group's -&gt;cpumask correctly,</span>", 
"<span class=\"comment\"> * and -&gt;cpu_power to 0.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#init_sched_build_groups\">init_sched_build_groups</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#span\">span</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#group_fn\">group_fn</a>)(int <a class=\"id\" href=\"#cpu\">cpu</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> **<a class=\"id\" href=\"#sg\">sg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#tmpmask\">tmpmask</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#covered\">covered</a>, struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#tmpmask\">tmpmask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear\">cpumask_clear</a>(<a class=\"id\" href=\"#covered\">covered</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#span\">span</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#group_fn\">group_fn</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, &amp;<a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#tmpmask\">tmpmask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#covered\">covered</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear\">cpumask_clear</a>(<a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(<a class=\"id\" href=\"#sg\">sg</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#span\">span</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#group_fn\">group_fn</a>(<a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#tmpmask\">tmpmask</a>) != <a class=\"id\" href=\"#group\">group</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#covered\">covered</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(<a class=\"id\" href=\"#sg\">sg</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#last\">last</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#first\">first</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_NODES_PER_DOMAIN\">SD_NODES_PER_DOMAIN</a> 16", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_next_best_node - find the next node to include in a sched_domain</span>", 
"<span class=\"comment\"> * @node: node whose sched_domain we're building</span>", 
"<span class=\"comment\"> * @used_nodes: nodes already in the sched_domain</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find the next node to include in a given scheduling domain. Simply</span>", 
"<span class=\"comment\"> * finds the closest node not already in the @used_nodes map.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Should use nodemask_t.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#find_next_best_node\">find_next_best_node</a>(int <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#used_nodes\">used_nodes</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#min_val\">min_val</a>, <a class=\"id\" href=\"#best_node\">best_node</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min_val\">min_val</a> = <a class=\"id\" href=\"#INT_MAX\">INT_MAX</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Start at @node */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = (<a class=\"id\" href=\"#node\">node</a> + <a class=\"id\" href=\"#i\">i</a>) % <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nr_cpus_node\">nr_cpus_node</a>(<a class=\"id\" href=\"#n\">n</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Skip already used nodes */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node_isset\">node_isset</a>(<a class=\"id\" href=\"#n\">n</a>, *<a class=\"id\" href=\"#used_nodes\">used_nodes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Simple min distance search */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#node_distance\">node_distance</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &lt; <a class=\"id\" href=\"#min_val\">min_val</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_val\">min_val</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#best_node\">best_node</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_set\">node_set</a>(<a class=\"id\" href=\"#best_node\">best_node</a>, *<a class=\"id\" href=\"#used_nodes\">used_nodes</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#best_node\">best_node</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sched_domain_node_span - get a cpumask for a node's sched_domain</span>", 
"<span class=\"comment\"> * @node: node whose cpumask we're constructing</span>", 
"<span class=\"comment\"> * @span: resulting cpumask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Given a node, construct a good cpumask for its sched_domain to span. It</span>", 
"<span class=\"comment\"> * should be one that prevents unnecessary balancing, but also spreads tasks</span>", 
"<span class=\"comment\"> * out optimally.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sched_domain_node_span\">sched_domain_node_span</a>(int <a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#span\">span</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#used_nodes\">used_nodes</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear\">cpumask_clear</a>(<a class=\"id\" href=\"#span\">span</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(<a class=\"id\" href=\"#used_nodes\">used_nodes</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_or\">cpumask_or</a>(<a class=\"id\" href=\"#span\">span</a>, <a class=\"id\" href=\"#span\">span</a>, <a class=\"id\" href=\"#cpumask_of_node\">cpumask_of_node</a>(<a class=\"id\" href=\"#node\">node</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_set\">node_set</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#used_nodes\">used_nodes</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#SD_NODES_PER_DOMAIN\">SD_NODES_PER_DOMAIN</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#next_node\">next_node</a> = <a class=\"id\" href=\"#find_next_best_node\">find_next_best_node</a>(<a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#used_nodes\">used_nodes</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_or\">cpumask_or</a>(<a class=\"id\" href=\"#span\">span</a>, <a class=\"id\" href=\"#span\">span</a>, <a class=\"id\" href=\"#cpumask_of_node\">cpumask_of_node</a>(<a class=\"id\" href=\"#next_node\">next_node</a>));", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NUMA */</span>", 
"", 
"int <a class=\"id\" href=\"#sched_smt_power_savings\">sched_smt_power_savings</a> = 0, <a class=\"id\" href=\"#sched_mc_power_savings\">sched_mc_power_savings</a> = 0;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The cpus mask in sched_group and sched_domain hangs off the end.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ( See the the comments in include/linux/sched.h:struct sched_group</span>", 
"<span class=\"comment\"> *   and struct sched_domain. )</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#static_sched_group\">static_sched_group</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> <a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#cpus\">cpus</a>, <a class=\"id\" href=\"#CONFIG_NR_CPUS\">CONFIG_NR_CPUS</a>);", 
"};", 
"", 
"struct <a class=\"id\" href=\"#static_sched_domain\">static_sched_domain</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> <a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#span\">span</a>, <a class=\"id\" href=\"#CONFIG_NR_CPUS\">CONFIG_NR_CPUS</a>);", 
"};", 
"", 
"struct <a class=\"id\" href=\"#s_data\">s_data</a> {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_allnodes\">sd_allnodes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#domainspan\">domainspan</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#covered\">covered</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#notcovered\">notcovered</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodemask\">nodemask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_sibling_map\">this_sibling_map</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_core_map\">this_core_map</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_covered\">send_covered</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmpmask\">tmpmask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a><span class=\"ts\"/>**<a class=\"id\" href=\"#sched_group_nodes\">sched_group_nodes</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#root_domain\">root_domain</a><span class=\"ts\"/>*<a class=\"id\" href=\"#rd\">rd</a>;", 
"};", 
"", 
"enum <a class=\"id\" href=\"#s_alloc\">s_alloc</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sa_sched_groups\">sa_sched_groups</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sa_rootdomain\">sa_rootdomain</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sa_tmpmask\">sa_tmpmask</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sa_send_covered\">sa_send_covered</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sa_this_core_map\">sa_this_core_map</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sa_this_sibling_map\">sa_this_sibling_map</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sa_nodemask\">sa_nodemask</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sa_sched_group_nodes\">sa_sched_group_nodes</a>,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sa_notcovered\">sa_notcovered</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sa_covered\">sa_covered</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sa_domainspan\">sa_domainspan</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sa_none\">sa_none</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * SMT sched-domains:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_SMT\">CONFIG_SCHED_SMT</a>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#static_sched_domain\">static_sched_domain</a>, <a class=\"id\" href=\"#cpu_domains\">cpu_domains</a>);", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#static_sched_group\">static_sched_group</a>, <a class=\"id\" href=\"#sched_groups\">sched_groups</a>);", 
"", 
"static int", 
"<a class=\"id\" href=\"#cpu_to_cpu_group\">cpu_to_cpu_group</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#sched_group\">sched_group</a> **<a class=\"id\" href=\"#sg\">sg</a>, struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sg\">sg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sg\">sg</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#sched_groups\">sched_groups</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SCHED_SMT */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * multi-core sched-domains:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_MC\">CONFIG_SCHED_MC</a>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#static_sched_domain\">static_sched_domain</a>, <a class=\"id\" href=\"#core_domains\">core_domains</a>);", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#static_sched_group\">static_sched_group</a>, <a class=\"id\" href=\"#sched_group_core\">sched_group_core</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SCHED_MC */</span>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SCHED_MC\">CONFIG_SCHED_MC</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SCHED_SMT\">CONFIG_SCHED_SMT</a>)", 
"static int", 
"<a class=\"id\" href=\"#cpu_to_core_group\">cpu_to_core_group</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sched_group\">sched_group</a> **<a class=\"id\" href=\"#sg\">sg</a>, struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#group\">group</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#topology_thread_cpumask\">topology_thread_cpumask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cpu_map\">cpu_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sg\">sg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sg\">sg</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#sched_group_core\">sched_group_core</a>, <a class=\"id\" href=\"#group\">group</a>).<a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#group\">group</a>;", 
"}", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SCHED_MC\">CONFIG_SCHED_MC</a>)", 
"static int", 
"<a class=\"id\" href=\"#cpu_to_core_group\">cpu_to_core_group</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sched_group\">sched_group</a> **<a class=\"id\" href=\"#sg\">sg</a>, struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sg\">sg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sg\">sg</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#sched_group_core\">sched_group_core</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#static_sched_domain\">static_sched_domain</a>, <a class=\"id\" href=\"#phys_domains\">phys_domains</a>);", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#static_sched_group\">static_sched_group</a>, <a class=\"id\" href=\"#sched_group_phys\">sched_group_phys</a>);", 
"", 
"static int", 
"<a class=\"id\" href=\"#cpu_to_phys_group\">cpu_to_phys_group</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sched_group\">sched_group</a> **<a class=\"id\" href=\"#sg\">sg</a>, struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#group\">group</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_MC\">CONFIG_SCHED_MC</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#cpu_coregroup_mask\">cpu_coregroup_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cpu_map\">cpu_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#mask\">mask</a>);", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SCHED_SMT\">CONFIG_SCHED_SMT</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#topology_thread_cpumask\">topology_thread_cpumask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cpu_map\">cpu_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#mask\">mask</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sg\">sg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sg\">sg</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#sched_group_phys\">sched_group_phys</a>, <a class=\"id\" href=\"#group\">group</a>).<a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#group\">group</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The init_sched_build_groups can't handle what we want to do with node</span>", 
"<span class=\"comment\"> * groups, so roll our own. Now each node has its own list of groups which</span>", 
"<span class=\"comment\"> * gets dynamically allocated.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#static_sched_domain\">static_sched_domain</a>, <a class=\"id\" href=\"#node_domains\">node_domains</a>);", 
"static struct <a class=\"id\" href=\"#sched_group\">sched_group</a> ***<a class=\"id\" href=\"#sched_group_nodes_bycpu\">sched_group_nodes_bycpu</a>;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#static_sched_domain\">static_sched_domain</a>, <a class=\"id\" href=\"#allnodes_domains\">allnodes_domains</a>);", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#static_sched_group\">static_sched_group</a>, <a class=\"id\" href=\"#sched_group_allnodes\">sched_group_allnodes</a>);", 
"", 
"static int <a class=\"id\" href=\"#cpu_to_allnodes_group\">cpu_to_allnodes_group</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#sched_group\">sched_group</a> **<a class=\"id\" href=\"#sg\">sg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#group\">group</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#nodemask\">nodemask</a>, <a class=\"id\" href=\"#cpumask_of_node\">cpumask_of_node</a>(<a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)), <a class=\"id\" href=\"#cpu_map\">cpu_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#nodemask\">nodemask</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sg\">sg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sg\">sg</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#sched_group_allnodes\">sched_group_allnodes</a>, <a class=\"id\" href=\"#group\">group</a>).<a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#group\">group</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#init_numa_sched_groups_power\">init_numa_sched_groups_power</a>(struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#group_head\">group_head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#sg\">sg</a> = <a class=\"id\" href=\"#group_head\">group_head</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sg\">sg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(<a class=\"id\" href=\"#sg\">sg</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#phys_domains\">phys_domains</a>, <a class=\"id\" href=\"#j\">j</a>).<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#j\">j</a> != <a class=\"id\" href=\"#group_first_cpu\">group_first_cpu</a>(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Only add \"power\" once for each</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * physical package.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a> += <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a> = <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#sg\">sg</a> != <a class=\"id\" href=\"#group_head\">group_head</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#build_numa_sched_groups\">build_numa_sched_groups</a>(struct <a class=\"id\" href=\"#s_data\">s_data</a> *<a class=\"id\" href=\"#d\">d</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>, int <a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#sg\">sg</a>, *<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear\">cpumask_clear</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#covered\">covered</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#nodemask\">nodemask</a>, <a class=\"id\" href=\"#cpumask_of_node\">cpumask_of_node</a>(<a class=\"id\" href=\"#num\">num</a>), <a class=\"id\" href=\"#cpu_map\">cpu_map</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#nodemask\">nodemask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#sched_group_nodes\">sched_group_nodes</a>[<a class=\"id\" href=\"#num\">num</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_domain_node_span\">sched_domain_node_span</a>(<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#domainspan\">domainspan</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#domainspan\">domainspan</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#domainspan\">domainspan</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a> = <a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(sizeof(struct <a class=\"id\" href=\"#sched_group\">sched_group</a>) + <a class=\"id\" href=\"#cpumask_size\">cpumask_size</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sg\">sg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Can not alloc domain group for node %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#sched_group_nodes\">sched_group_nodes</a>[<a class=\"id\" href=\"#num\">num</a>] = <a class=\"id\" href=\"#sg\">sg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#nodemask\">nodemask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#node_domains\">node_domains</a>, <a class=\"id\" href=\"#j\">j</a>).<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a> = <a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(<a class=\"id\" href=\"#sg\">sg</a>), <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#nodemask\">nodemask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_or\">cpumask_or</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#covered\">covered</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#covered\">covered</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#nodemask\">nodemask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = (<a class=\"id\" href=\"#num\">num</a> + <a class=\"id\" href=\"#j\">j</a>) % <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_complement\">cpumask_complement</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#notcovered\">notcovered</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#covered\">covered</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tmpmask\">tmpmask</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#notcovered\">notcovered</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tmpmask\">tmpmask</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tmpmask\">tmpmask</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#domainspan\">domainspan</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tmpmask\">tmpmask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tmpmask\">tmpmask</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tmpmask\">tmpmask</a>, <a class=\"id\" href=\"#cpumask_of_node\">cpumask_of_node</a>(<a class=\"id\" href=\"#n\">n</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tmpmask\">tmpmask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a> = <a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(sizeof(struct <a class=\"id\" href=\"#sched_group\">sched_group</a>) + <a class=\"id\" href=\"#cpumask_size\">cpumask_size</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sg\">sg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"Can not alloc domain group for node %d\\n\", <a class=\"id\" href=\"#j\">j</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(<a class=\"id\" href=\"#sg\">sg</a>), <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tmpmask\">tmpmask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_or\">cpumask_or</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#covered\">covered</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#covered\">covered</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tmpmask\">tmpmask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NUMA */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"comment\">/* Free memory allocated for various sched_group structures */</span>", 
"static void <a class=\"id\" href=\"#free_sched_groups\">free_sched_groups</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> **<a class=\"id\" href=\"#sched_group_nodes\">sched_group_nodes</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sched_group_nodes_bycpu\">sched_group_nodes_bycpu</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sched_group_nodes\">sched_group_nodes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#oldsg\">oldsg</a>, *<a class=\"id\" href=\"#sg\">sg</a> = <a class=\"id\" href=\"#sched_group_nodes\">sched_group_nodes</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#nodemask\">nodemask</a>, <a class=\"id\" href=\"#cpumask_of_node\">cpumask_of_node</a>(<a class=\"id\" href=\"#i\">i</a>), <a class=\"id\" href=\"#cpu_map\">cpu_map</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#nodemask\">nodemask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sg\">sg</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a> = <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<a class=\"id\" href=\"#next_sg\">next_sg</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#oldsg\">oldsg</a> = <a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a> = <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#oldsg\">oldsg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#oldsg\">oldsg</a> != <a class=\"id\" href=\"#sched_group_nodes\">sched_group_nodes</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next_sg\">next_sg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sched_group_nodes\">sched_group_nodes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sched_group_nodes_bycpu\">sched_group_nodes_bycpu</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"#else <span class=\"comment\">/* !CONFIG_NUMA */</span>", 
"static void <a class=\"id\" href=\"#free_sched_groups\">free_sched_groups</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NUMA */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize sched groups cpu_power.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cpu_power indicates the capacity of sched group, which is used while</span>", 
"<span class=\"comment\"> * distributing the load between different sched groups in a sched domain.</span>", 
"<span class=\"comment\"> * Typically cpu_power for all the groups in a sched domain will be same unless</span>", 
"<span class=\"comment\"> * there are asymmetries in the topology. If there are asymmetries, group</span>", 
"<span class=\"comment\"> * having more cpu_power will pickup more load compared to the group having</span>", 
"<span class=\"comment\"> * less cpu_power.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#init_sched_groups_power\">init_sched_groups_power</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#power\">power</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#weight\">weight</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#sd\">sd</a> || !<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#group_first_cpu\">group_first_cpu</a>(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#child\">child</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#child\">child</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#power\">power</a> = <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#cpumask_weight\">cpumask_weight</a>(<a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * SMT siblings share the power of a single core.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Usually multiple threads get a better yield out of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that one core than a single thread would have,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reflect that in sd-&gt;smt_gain.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_SHARE_CPUPOWER\">SD_SHARE_CPUPOWER</a>) && <a class=\"id\" href=\"#weight\">weight</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#power\">power</a> *= <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#smt_gain\">smt_gain</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#power\">power</a> /= <a class=\"id\" href=\"#weight\">weight</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#power\">power</a> >>= <a class=\"id\" href=\"#SCHED_LOAD_SHIFT\">SCHED_LOAD_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a> += <a class=\"id\" href=\"#power\">power</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Add cpu_power of each child group to this groups cpu_power.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#groups\">groups</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a> += <a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#group\">group</a> != <a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#groups\">groups</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initializers for schedule domains</span>", 
"<span class=\"comment\"> * Non-inlined to reduce accumulated stack pressure in build_sched_domains()</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_DEBUG\">CONFIG_SCHED_DEBUG</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_INIT_NAME\">SD_INIT_NAME</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#name\">name</a> = #<a class=\"id\" href=\"#type\">type</a>", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_INIT_NAME\">SD_INIT_NAME</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SD_INIT\">SD_INIT</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/><a class=\"id\" href=\"#sd_init_\">sd_init_</a>##<a class=\"id\" href=\"#type\">type</a>(<a class=\"id\" href=\"#sd\">sd</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_INIT_FUNC\">SD_INIT_FUNC</a>(<a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> void <a class=\"id\" href=\"#sd_init_\">sd_init_</a>##<a class=\"id\" href=\"#type\">type</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>)<span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#sd\">sd</a>, 0, sizeof(*<a class=\"id\" href=\"#sd\">sd</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#SD_\">SD_</a>##<a class=\"id\" href=\"#type\">type</a>##<a class=\"id\" href=\"#_INIT\">_INIT</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#level\">level</a> = <a class=\"id\" href=\"#SD_LV_\">SD_LV_</a>##<a class=\"id\" href=\"#type\">type</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SD_INIT_NAME\">SD_INIT_NAME</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#type\">type</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"<a class=\"id\" href=\"#SD_INIT_FUNC\">SD_INIT_FUNC</a>(<a class=\"id\" href=\"#CPU\">CPU</a>)", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
" <a class=\"id\" href=\"#SD_INIT_FUNC\">SD_INIT_FUNC</a>(<a class=\"id\" href=\"#ALLNODES\">ALLNODES</a>)", 
" <a class=\"id\" href=\"#SD_INIT_FUNC\">SD_INIT_FUNC</a>(<a class=\"id\" href=\"#NODE\">NODE</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_SMT\">CONFIG_SCHED_SMT</a>", 
" <a class=\"id\" href=\"#SD_INIT_FUNC\">SD_INIT_FUNC</a>(<a class=\"id\" href=\"#SIBLING\">SIBLING</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_MC\">CONFIG_SCHED_MC</a>", 
" <a class=\"id\" href=\"#SD_INIT_FUNC\">SD_INIT_FUNC</a>(<a class=\"id\" href=\"#MC\">MC</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#default_relax_domain_level\">default_relax_domain_level</a> = -1;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_relax_domain_level\">setup_relax_domain_level</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &lt; <a class=\"id\" href=\"#SD_LV_MAX\">SD_LV_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#default_relax_domain_level\">default_relax_domain_level</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"relax_domain_level=\", <a class=\"id\" href=\"#setup_relax_domain_level\">setup_relax_domain_level</a>);", 
"", 
"static void <a class=\"id\" href=\"#set_domain_attribute\">set_domain_attribute</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#sched_domain_attr\">sched_domain_attr</a> *<a class=\"id\" href=\"#attr\">attr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#request\">request</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#attr\">attr</a> || <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#relax_domain_level\">relax_domain_level</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#default_relax_domain_level\">default_relax_domain_level</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request\">request</a> = <a class=\"id\" href=\"#default_relax_domain_level\">default_relax_domain_level</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request\">request</a> = <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#relax_domain_level\">relax_domain_level</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#request\">request</a> &lt; <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#level\">level</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* turn off idle balance on this domain */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~(<a class=\"id\" href=\"#SD_BALANCE_WAKE\">SD_BALANCE_WAKE</a>|<a class=\"id\" href=\"#SD_BALANCE_NEWIDLE\">SD_BALANCE_NEWIDLE</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* turn on idle balance on this domain */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> |= (<a class=\"id\" href=\"#SD_BALANCE_WAKE\">SD_BALANCE_WAKE</a>|<a class=\"id\" href=\"#SD_BALANCE_NEWIDLE\">SD_BALANCE_NEWIDLE</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__free_domain_allocs\">__free_domain_allocs</a>(struct <a class=\"id\" href=\"#s_data\">s_data</a> *<a class=\"id\" href=\"#d\">d</a>, enum <a class=\"id\" href=\"#s_alloc\">s_alloc</a> <a class=\"id\" href=\"#what\">what</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#what\">what</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#sa_sched_groups\">sa_sched_groups</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_sched_groups\">free_sched_groups</a>(<a class=\"id\" href=\"#cpu_map\">cpu_map</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tmpmask\">tmpmask</a>); <span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#sched_group_nodes\">sched_group_nodes</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#sa_rootdomain\">sa_rootdomain</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_rootdomain\">free_rootdomain</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#rd\">rd</a>); <span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#sa_tmpmask\">sa_tmpmask</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tmpmask\">tmpmask</a>); <span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#sa_send_covered\">sa_send_covered</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#send_covered\">send_covered</a>); <span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#sa_this_core_map\">sa_this_core_map</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#this_core_map\">this_core_map</a>); <span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#sa_this_sibling_map\">sa_this_sibling_map</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#this_sibling_map\">this_sibling_map</a>); <span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#sa_nodemask\">sa_nodemask</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#nodemask\">nodemask</a>); <span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#sa_sched_group_nodes\">sa_sched_group_nodes</a>:", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#sched_group_nodes\">sched_group_nodes</a>); <span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#sa_notcovered\">sa_notcovered</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#notcovered\">notcovered</a>); <span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#sa_covered\">sa_covered</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#covered\">covered</a>); <span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#sa_domainspan\">sa_domainspan</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#domainspan\">domainspan</a>); <span class=\"comment\">/* fall through */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#sa_none\">sa_none</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static enum <a class=\"id\" href=\"#s_alloc\">s_alloc</a> <a class=\"id\" href=\"#__visit_domain_allocation_hell\">__visit_domain_allocation_hell</a>(struct <a class=\"id\" href=\"#s_data\">s_data</a> *<a class=\"id\" href=\"#d\">d</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#domainspan\">domainspan</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sa_none\">sa_none</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#covered\">covered</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sa_domainspan\">sa_domainspan</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#notcovered\">notcovered</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sa_covered\">sa_covered</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate the per-node list of sched groups */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#sched_group_nodes\">sched_group_nodes</a> = <a class=\"id\" href=\"#kcalloc\">kcalloc</a>(<a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      sizeof(struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#sched_group_nodes\">sched_group_nodes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Can not alloc sched group node list\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sa_notcovered\">sa_notcovered</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_group_nodes_bycpu\">sched_group_nodes_bycpu</a>[<a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#cpu_map\">cpu_map</a>)] = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#sched_group_nodes\">sched_group_nodes</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#nodemask\">nodemask</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sa_sched_group_nodes\">sa_sched_group_nodes</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#this_sibling_map\">this_sibling_map</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sa_nodemask\">sa_nodemask</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#this_core_map\">this_core_map</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sa_this_sibling_map\">sa_this_sibling_map</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#send_covered\">send_covered</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sa_this_core_map\">sa_this_core_map</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tmpmask\">tmpmask</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sa_send_covered\">sa_send_covered</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#rd\">rd</a> = <a class=\"id\" href=\"#alloc_rootdomain\">alloc_rootdomain</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#rd\">rd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Cannot alloc root domain\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sa_tmpmask\">sa_tmpmask</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sa_rootdomain\">sa_rootdomain</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#__build_numa_sched_domains\">__build_numa_sched_domains</a>(struct <a class=\"id\" href=\"#s_data\">s_data</a> *<a class=\"id\" href=\"#d\">d</a>,", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>, struct <a class=\"id\" href=\"#sched_domain_attr\">sched_domain_attr</a> *<a class=\"id\" href=\"#attr\">attr</a>, int <a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#sd_allnodes\">sd_allnodes</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_weight\">cpumask_weight</a>(<a class=\"id\" href=\"#cpu_map\">cpu_map</a>) &gt;", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#SD_NODES_PER_DOMAIN\">SD_NODES_PER_DOMAIN</a> * <a class=\"id\" href=\"#cpumask_weight\">cpumask_weight</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#nodemask\">nodemask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#allnodes_domains\">allnodes_domains</a>, <a class=\"id\" href=\"#i\">i</a>).<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SD_INIT\">SD_INIT</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#ALLNODES\">ALLNODES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_domain_attribute\">set_domain_attribute</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>), <a class=\"id\" href=\"#cpu_map\">cpu_map</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_allnodes_group\">cpu_to_allnodes_group</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tmpmask\">tmpmask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#sd_allnodes\">sd_allnodes</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#sd\">sd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#node_domains\">node_domains</a>, <a class=\"id\" href=\"#i\">i</a>).<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SD_INIT\">SD_INIT</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#NODE\">NODE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_domain_attribute\">set_domain_attribute</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_domain_node_span\">sched_domain_node_span</a>(<a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#i\">i</a>), <a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>), <a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>), <a class=\"id\" href=\"#cpu_map\">cpu_map</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sd\">sd</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#__build_cpu_sched_domain\">__build_cpu_sched_domain</a>(struct <a class=\"id\" href=\"#s_data\">s_data</a> *<a class=\"id\" href=\"#d\">d</a>,", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>, struct <a class=\"id\" href=\"#sched_domain_attr\">sched_domain_attr</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#parent\">parent</a>, int <a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#phys_domains\">phys_domains</a>, <a class=\"id\" href=\"#i\">i</a>).<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SD_INIT\">SD_INIT</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#CPU\">CPU</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_domain_attribute\">set_domain_attribute</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>), <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#nodemask\">nodemask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_phys_group\">cpu_to_phys_group</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tmpmask\">tmpmask</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sd\">sd</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#__build_mc_sched_domain\">__build_mc_sched_domain</a>(struct <a class=\"id\" href=\"#s_data\">s_data</a> *<a class=\"id\" href=\"#d\">d</a>,", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>, struct <a class=\"id\" href=\"#sched_domain_attr\">sched_domain_attr</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#parent\">parent</a>, int <a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_MC\">CONFIG_SCHED_MC</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#core_domains\">core_domains</a>, <a class=\"id\" href=\"#i\">i</a>).<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SD_INIT\">SD_INIT</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#MC\">MC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_domain_attribute\">set_domain_attribute</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>), <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, <a class=\"id\" href=\"#cpu_coregroup_mask\">cpu_coregroup_mask</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_core_group\">cpu_to_core_group</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tmpmask\">tmpmask</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sd\">sd</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#__build_smt_sched_domain\">__build_smt_sched_domain</a>(struct <a class=\"id\" href=\"#s_data\">s_data</a> *<a class=\"id\" href=\"#d\">d</a>,", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>, struct <a class=\"id\" href=\"#sched_domain_attr\">sched_domain_attr</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#parent\">parent</a>, int <a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_SMT\">CONFIG_SCHED_SMT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_domains\">cpu_domains</a>, <a class=\"id\" href=\"#i\">i</a>).<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SD_INIT\">SD_INIT</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#SIBLING\">SIBLING</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_domain_attribute\">set_domain_attribute</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>), <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, <a class=\"id\" href=\"#topology_thread_cpumask\">topology_thread_cpumask</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_cpu_group\">cpu_to_cpu_group</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tmpmask\">tmpmask</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sd\">sd</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#build_sched_groups\">build_sched_groups</a>(struct <a class=\"id\" href=\"#s_data\">s_data</a> *<a class=\"id\" href=\"#d\">d</a>, enum <a class=\"id\" href=\"#sched_domain_level\">sched_domain_level</a> <a class=\"id\" href=\"#l\">l</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#l\">l</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_SMT\">CONFIG_SCHED_SMT</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SD_LV_SIBLING\">SD_LV_SIBLING</a>: <span class=\"comment\">/* set up CPU (sibling) groups */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#this_sibling_map\">this_sibling_map</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#topology_thread_cpumask\">topology_thread_cpumask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#this_sibling_map\">this_sibling_map</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_sched_build_groups\">init_sched_build_groups</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#this_sibling_map\">this_sibling_map</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#cpu_to_cpu_group\">cpu_to_cpu_group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#send_covered\">send_covered</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tmpmask\">tmpmask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_MC\">CONFIG_SCHED_MC</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SD_LV_MC\">SD_LV_MC</a>: <span class=\"comment\">/* set up multi-core groups */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#this_core_map\">this_core_map</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, <a class=\"id\" href=\"#cpu_coregroup_mask\">cpu_coregroup_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#this_core_map\">this_core_map</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_sched_build_groups\">init_sched_build_groups</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#this_core_map\">this_core_map</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#cpu_to_core_group\">cpu_to_core_group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#send_covered\">send_covered</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tmpmask\">tmpmask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SD_LV_CPU\">SD_LV_CPU</a>: <span class=\"comment\">/* set up physical groups */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#nodemask\">nodemask</a>, <a class=\"id\" href=\"#cpumask_of_node\">cpumask_of_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cpu_map\">cpu_map</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#nodemask\">nodemask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_sched_build_groups\">init_sched_build_groups</a>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#nodemask\">nodemask</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#cpu_to_phys_group\">cpu_to_phys_group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#send_covered\">send_covered</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tmpmask\">tmpmask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SD_LV_ALLNODES\">SD_LV_ALLNODES</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_sched_build_groups\">init_sched_build_groups</a>(<a class=\"id\" href=\"#cpu_map\">cpu_map</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, &amp;<a class=\"id\" href=\"#cpu_to_allnodes_group\">cpu_to_allnodes_group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#send_covered\">send_covered</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tmpmask\">tmpmask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Build sched domains for a given set of cpus and attach the sched domains</span>", 
"<span class=\"comment\"> * to the individual cpus</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__build_sched_domains\">__build_sched_domains</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#sched_domain_attr\">sched_domain_attr</a> *<a class=\"id\" href=\"#attr\">attr</a>)", 
"{", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#s_alloc\">s_alloc</a> <a class=\"id\" href=\"#alloc_state\">alloc_state</a> = <a class=\"id\" href=\"#sa_none\">sa_none</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#s_data\">s_data</a> <a class=\"id\" href=\"#d\">d</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>.<a class=\"id\" href=\"#sd_allnodes\">sd_allnodes</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_state\">alloc_state</a> = <a class=\"id\" href=\"#__visit_domain_allocation_hell\">__visit_domain_allocation_hell</a>(&amp;<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#alloc_state\">alloc_state</a> != <a class=\"id\" href=\"#sa_rootdomain\">sa_rootdomain</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_state\">alloc_state</a> = <a class=\"id\" href=\"#sa_sched_groups\">sa_sched_groups</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set up domains for cpus specified by the cpu_map.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#d\">d</a>.<a class=\"id\" href=\"#nodemask\">nodemask</a>, <a class=\"id\" href=\"#cpumask_of_node\">cpumask_of_node</a>(<a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#i\">i</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cpu_map\">cpu_map</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#__build_numa_sched_domains\">__build_numa_sched_domains</a>(&amp;<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, <a class=\"id\" href=\"#attr\">attr</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#__build_cpu_sched_domain\">__build_cpu_sched_domain</a>(&amp;<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, <a class=\"id\" href=\"#attr\">attr</a>, <a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#__build_mc_sched_domain\">__build_mc_sched_domain</a>(&amp;<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, <a class=\"id\" href=\"#attr\">attr</a>, <a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#__build_smt_sched_domain\">__build_smt_sched_domain</a>(&amp;<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, <a class=\"id\" href=\"#attr\">attr</a>, <a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#build_sched_groups\">build_sched_groups</a>(&amp;<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#SD_LV_SIBLING\">SD_LV_SIBLING</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#build_sched_groups\">build_sched_groups</a>(&amp;<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#SD_LV_MC\">SD_LV_MC</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set up physical groups */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#build_sched_groups\">build_sched_groups</a>(&amp;<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#SD_LV_CPU\">SD_LV_CPU</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Set up node groups */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a>.<a class=\"id\" href=\"#sd_allnodes\">sd_allnodes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#build_sched_groups\">build_sched_groups</a>(&amp;<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#SD_LV_ALLNODES\">SD_LV_ALLNODES</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, 0);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#build_numa_sched_groups\">build_numa_sched_groups</a>(&amp;<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, <a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Calculate CPU power for physical packages and nodes */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_SMT\">CONFIG_SCHED_SMT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_domains\">cpu_domains</a>, <a class=\"id\" href=\"#i\">i</a>).<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_sched_groups_power\">init_sched_groups_power</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_MC\">CONFIG_SCHED_MC</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#core_domains\">core_domains</a>, <a class=\"id\" href=\"#i\">i</a>).<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_sched_groups_power\">init_sched_groups_power</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#phys_domains\">phys_domains</a>, <a class=\"id\" href=\"#i\">i</a>).<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_sched_groups_power\">init_sched_groups_power</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_numa_sched_groups_power\">init_numa_sched_groups_power</a>(<a class=\"id\" href=\"#d\">d</a>.<a class=\"id\" href=\"#sched_group_nodes\">sched_group_nodes</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a>.<a class=\"id\" href=\"#sd_allnodes\">sd_allnodes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#sg\">sg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_allnodes_group\">cpu_to_allnodes_group</a>(<a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#cpu_map\">cpu_map</a>), <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, &amp;<a class=\"id\" href=\"#sg\">sg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>.<a class=\"id\" href=\"#tmpmask\">tmpmask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_numa_sched_groups_power\">init_numa_sched_groups_power</a>(<a class=\"id\" href=\"#sg\">sg</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Attach the domains */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_SMT\">CONFIG_SCHED_SMT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_domains\">cpu_domains</a>, <a class=\"id\" href=\"#i\">i</a>).<a class=\"id\" href=\"#sd\">sd</a>;", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SCHED_MC\">CONFIG_SCHED_MC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#core_domains\">core_domains</a>, <a class=\"id\" href=\"#i\">i</a>).<a class=\"id\" href=\"#sd\">sd</a>;", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#phys_domains\">phys_domains</a>, <a class=\"id\" href=\"#i\">i</a>).<a class=\"id\" href=\"#sd\">sd</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_attach_domain\">cpu_attach_domain</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#d\">d</a>.<a class=\"id\" href=\"#rd\">rd</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>.<a class=\"id\" href=\"#sched_group_nodes\">sched_group_nodes</a> = <a class=\"id\" href=\"#NULL\">NULL</a>; <span class=\"comment\">/* don't free this we still need it */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__free_domain_allocs\">__free_domain_allocs</a>(&amp;<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#sa_tmpmask\">sa_tmpmask</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>);", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__free_domain_allocs\">__free_domain_allocs</a>(&amp;<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#alloc_state\">alloc_state</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#build_sched_domains\">build_sched_domains</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__build_sched_domains\">__build_sched_domains</a>(<a class=\"id\" href=\"#cpu_map\">cpu_map</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> *<a class=\"id\" href=\"#doms_cur\">doms_cur</a>;<span class=\"ts\"/><span class=\"comment\">/* current sched domains */</span>", 
"static int <a class=\"id\" href=\"#ndoms_cur\">ndoms_cur</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* number of sched domains in 'doms_cur' */</span>", 
"static struct <a class=\"id\" href=\"#sched_domain_attr\">sched_domain_attr</a> *<a class=\"id\" href=\"#dattr_cur\">dattr_cur</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* attribues of custom domains in 'doms_cur' */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Special case: If a kmalloc of a doms_cur partition (array of</span>", 
"<span class=\"comment\"> * cpumask) fails, then fallback to a single sched domain,</span>", 
"<span class=\"comment\"> * as determined by the single cpumask fallback_doms.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#fallback_doms\">fallback_doms</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * arch_update_cpu_topology lets virtualized architectures update the</span>", 
"<span class=\"comment\"> * cpu core maps. It is supposed to return 1 if the topology changed</span>", 
"<span class=\"comment\"> * or 0 if it stayed the same.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#weak\">weak</a>)) <a class=\"id\" href=\"#arch_update_cpu_topology\">arch_update_cpu_topology</a>(void)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> *<a class=\"id\" href=\"#alloc_sched_domains\">alloc_sched_domains</a>(unsigned int <a class=\"id\" href=\"#ndoms\">ndoms</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> *<a class=\"id\" href=\"#doms\">doms</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#doms\">doms</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#doms\">doms</a>) * <a class=\"id\" href=\"#ndoms\">ndoms</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#doms\">doms</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ndoms\">ndoms</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#doms\">doms</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_sched_domains\">free_sched_domains</a>(<a class=\"id\" href=\"#doms\">doms</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#doms\">doms</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#free_sched_domains\">free_sched_domains</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#doms\">doms</a>[], unsigned int <a class=\"id\" href=\"#ndoms\">ndoms</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ndoms\">ndoms</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#doms\">doms</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#doms\">doms</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set up scheduler domains and groups. Callers must hold the hotplug lock.</span>", 
"<span class=\"comment\"> * For now this just excludes isolated cpus, but could be used to</span>", 
"<span class=\"comment\"> * exclude other special cases in the future.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#arch_init_sched_domains\">arch_init_sched_domains</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_update_cpu_topology\">arch_update_cpu_topology</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ndoms_cur\">ndoms_cur</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#doms_cur\">doms_cur</a> = <a class=\"id\" href=\"#alloc_sched_domains\">alloc_sched_domains</a>(<a class=\"id\" href=\"#ndoms_cur\">ndoms_cur</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#doms_cur\">doms_cur</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#doms_cur\">doms_cur</a> = &amp;<a class=\"id\" href=\"#fallback_doms\">fallback_doms</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_andnot\">cpumask_andnot</a>(<a class=\"id\" href=\"#doms_cur\">doms_cur</a>[0], <a class=\"id\" href=\"#cpu_map\">cpu_map</a>, <a class=\"id\" href=\"#cpu_isolated_map\">cpu_isolated_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dattr_cur\">dattr_cur</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#build_sched_domains\">build_sched_domains</a>(<a class=\"id\" href=\"#doms_cur\">doms_cur</a>[0]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_sched_domain_sysctl\">register_sched_domain_sysctl</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#arch_destroy_sched_domains\">arch_destroy_sched_domains</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#tmpmask\">tmpmask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_sched_groups\">free_sched_groups</a>(<a class=\"id\" href=\"#cpu_map\">cpu_map</a>, <a class=\"id\" href=\"#tmpmask\">tmpmask</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Detach sched domains from a group of cpus specified in cpu_map</span>", 
"<span class=\"comment\"> * These cpus will now be attached to the NULL domain</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#detach_destroy_domains\">detach_destroy_domains</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_map\">cpu_map</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Save because hotplug lock held. */</span>", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#tmpmask\">tmpmask</a>, <a class=\"id\" href=\"#CONFIG_NR_CPUS\">CONFIG_NR_CPUS</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu_map\">cpu_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_attach_domain\">cpu_attach_domain</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#def_root_domain\">def_root_domain</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_destroy_sched_domains\">arch_destroy_sched_domains</a>(<a class=\"id\" href=\"#cpu_map\">cpu_map</a>, <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#tmpmask\">tmpmask</a>));", 
"}", 
"", 
"<span class=\"comment\">/* handle null as \"default\" */</span>", 
"static int <a class=\"id\" href=\"#dattrs_equal\">dattrs_equal</a>(struct <a class=\"id\" href=\"#sched_domain_attr\">sched_domain_attr</a> *<a class=\"id\" href=\"#cur\">cur</a>, int <a class=\"id\" href=\"#idx_cur\">idx_cur</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain_attr\">sched_domain_attr</a> *<a class=\"id\" href=\"#new\">new</a>, int <a class=\"id\" href=\"#idx_new\">idx_new</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain_attr\">sched_domain_attr</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* fast path */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a> && !<a class=\"id\" href=\"#cur\">cur</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#SD_ATTR_INIT\">SD_ATTR_INIT</a>;", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#cur\">cur</a> ? (<a class=\"id\" href=\"#cur\">cur</a> + <a class=\"id\" href=\"#idx_cur\">idx_cur</a>) : &amp;<a class=\"id\" href=\"#tmp\">tmp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> ? (<a class=\"id\" href=\"#new\">new</a> + <a class=\"id\" href=\"#idx_new\">idx_new</a>) : &amp;<a class=\"id\" href=\"#tmp\">tmp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#sched_domain_attr\">sched_domain_attr</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Partition sched domains as specified by the 'ndoms_new'</span>", 
"<span class=\"comment\"> * cpumasks in the array doms_new[] of cpumasks. This compares</span>", 
"<span class=\"comment\"> * doms_new[] to the current sched domain partitioning, doms_cur[].</span>", 
"<span class=\"comment\"> * It destroys each deleted domain and builds each new domain.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 'doms_new' is an array of cpumask_var_t's of length 'ndoms_new'.</span>", 
"<span class=\"comment\"> * The masks don't intersect (don't overlap.) We should setup one</span>", 
"<span class=\"comment\"> * sched domain for each mask. CPUs not in any of the cpumasks will</span>", 
"<span class=\"comment\"> * not be load balanced. If the same cpumask appears both in the</span>", 
"<span class=\"comment\"> * current 'doms_cur' domains and in the new 'doms_new', we can leave</span>", 
"<span class=\"comment\"> * it as it is.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The passed in 'doms_new' should be allocated using</span>", 
"<span class=\"comment\"> * alloc_sched_domains.  This routine takes ownership of it and will</span>", 
"<span class=\"comment\"> * free_sched_domains it when done with it. If the caller failed the</span>", 
"<span class=\"comment\"> * alloc call, then it can pass in doms_new == NULL &amp;&amp; ndoms_new == 1,</span>", 
"<span class=\"comment\"> * and partition_sched_domains() will fallback to the single partition</span>", 
"<span class=\"comment\"> * 'fallback_doms', it also forces the domains to be rebuilt.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If doms_new == NULL it will be replaced with cpu_online_mask.</span>", 
"<span class=\"comment\"> * ndoms_new == 0 is a special case for destroying existing domains,</span>", 
"<span class=\"comment\"> * and it will not create the default domain.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Call with hotplug lock held</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#partition_sched_domains\">partition_sched_domains</a>(int <a class=\"id\" href=\"#ndoms_new\">ndoms_new</a>, <a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#doms_new\">doms_new</a>[],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#sched_domain_attr\">sched_domain_attr</a> *<a class=\"id\" href=\"#dattr_new\">dattr_new</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#new_topology\">new_topology</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#sched_domains_mutex\">sched_domains_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* always unregister in case we don't destroy any domains */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_sched_domain_sysctl\">unregister_sched_domain_sysctl</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Let architecture update cpu core mappings. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_topology\">new_topology</a> = <a class=\"id\" href=\"#arch_update_cpu_topology\">arch_update_cpu_topology</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#doms_new\">doms_new</a> ? <a class=\"id\" href=\"#ndoms_new\">ndoms_new</a> : 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Destroy deleted domains */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ndoms_cur\">ndoms_cur</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#n\">n</a> && !<a class=\"id\" href=\"#new_topology\">new_topology</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_equal\">cpumask_equal</a>(<a class=\"id\" href=\"#doms_cur\">doms_cur</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#doms_new\">doms_new</a>[<a class=\"id\" href=\"#j\">j</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    && <a class=\"id\" href=\"#dattrs_equal\">dattrs_equal</a>(<a class=\"id\" href=\"#dattr_cur\">dattr_cur</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#dattr_new\">dattr_new</a>, <a class=\"id\" href=\"#j\">j</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#match1\">match1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no match - a current sched domain not in new doms_new[] */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#detach_destroy_domains\">detach_destroy_domains</a>(<a class=\"id\" href=\"#doms_cur\">doms_cur</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<a class=\"id\" href=\"#match1\">match1</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#doms_new\">doms_new</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ndoms_cur\">ndoms_cur</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#doms_new\">doms_new</a> = &amp;<a class=\"id\" href=\"#fallback_doms\">fallback_doms</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_andnot\">cpumask_andnot</a>(<a class=\"id\" href=\"#doms_new\">doms_new</a>[0], <a class=\"id\" href=\"#cpu_active_mask\">cpu_active_mask</a>, <a class=\"id\" href=\"#cpu_isolated_map\">cpu_isolated_map</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#dattr_new\">dattr_new</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Build new domains */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ndoms_new\">ndoms_new</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#ndoms_cur\">ndoms_cur</a> && !<a class=\"id\" href=\"#new_topology\">new_topology</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_equal\">cpumask_equal</a>(<a class=\"id\" href=\"#doms_new\">doms_new</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#doms_cur\">doms_cur</a>[<a class=\"id\" href=\"#j\">j</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    && <a class=\"id\" href=\"#dattrs_equal\">dattrs_equal</a>(<a class=\"id\" href=\"#dattr_new\">dattr_new</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#dattr_cur\">dattr_cur</a>, <a class=\"id\" href=\"#j\">j</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#match2\">match2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no match - add a new doms_new */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__build_sched_domains\">__build_sched_domains</a>(<a class=\"id\" href=\"#doms_new\">doms_new</a>[<a class=\"id\" href=\"#i\">i</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dattr_new\">dattr_new</a> ? <a class=\"id\" href=\"#dattr_new\">dattr_new</a> + <a class=\"id\" href=\"#i\">i</a> : <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<a class=\"id\" href=\"#match2\">match2</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remember the new sched domains */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#doms_cur\">doms_cur</a> != &amp;<a class=\"id\" href=\"#fallback_doms\">fallback_doms</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_sched_domains\">free_sched_domains</a>(<a class=\"id\" href=\"#doms_cur\">doms_cur</a>, <a class=\"id\" href=\"#ndoms_cur\">ndoms_cur</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dattr_cur\">dattr_cur</a>);<span class=\"ts\"/><span class=\"comment\">/* kfree(NULL) is safe */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#doms_cur\">doms_cur</a> = <a class=\"id\" href=\"#doms_new\">doms_new</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dattr_cur\">dattr_cur</a> = <a class=\"id\" href=\"#dattr_new\">dattr_new</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ndoms_cur\">ndoms_cur</a> = <a class=\"id\" href=\"#ndoms_new\">ndoms_new</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_sched_domain_sysctl\">register_sched_domain_sysctl</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#sched_domains_mutex\">sched_domains_mutex</a>);", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SCHED_MC\">CONFIG_SCHED_MC</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SCHED_SMT\">CONFIG_SCHED_SMT</a>)", 
"static void <a class=\"id\" href=\"#arch_reinit_sched_domains\">arch_reinit_sched_domains</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Destroy domains first to force the rebuild */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#partition_sched_domains\">partition_sched_domains</a>(0, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rebuild_sched_domains\">rebuild_sched_domains</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#sched_power_savings_store\">sched_power_savings_store</a>(const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, int <a class=\"id\" href=\"#smt\">smt</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#level\">level</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%u\", &amp;<a class=\"id\" href=\"#level\">level</a>) != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * level is always be positive so don't check for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * level &lt; POWERSAVINGS_BALANCE_NONE which is 0</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * What happens on 0 or 1 byte write,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to check for count as well?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> >= <a class=\"id\" href=\"#MAX_POWERSAVINGS_BALANCE_LEVELS\">MAX_POWERSAVINGS_BALANCE_LEVELS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smt\">smt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sched_smt_power_savings\">sched_smt_power_savings</a> = <a class=\"id\" href=\"#level\">level</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sched_mc_power_savings\">sched_mc_power_savings</a> = <a class=\"id\" href=\"#level\">level</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_reinit_sched_domains\">arch_reinit_sched_domains</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_MC\">CONFIG_SCHED_MC</a>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#sched_mc_power_savings_show\">sched_mc_power_savings_show</a>(struct <a class=\"id\" href=\"#sysdev_class\">sysdev_class</a> *<a class=\"id\" href=\"#class\">class</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#sysdev_class_attribute\">sysdev_class_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   char *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#page\">page</a>, \"%u\\n\", <a class=\"id\" href=\"#sched_mc_power_savings\">sched_mc_power_savings</a>);", 
"}", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#sched_mc_power_savings_store\">sched_mc_power_savings_store</a>(struct <a class=\"id\" href=\"#sysdev_class\">sysdev_class</a> *<a class=\"id\" href=\"#class\">class</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#sysdev_class_attribute\">sysdev_class_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sched_power_savings_store\">sched_power_savings_store</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>, 0);", 
"}", 
"static <a class=\"id\" href=\"#SYSDEV_CLASS_ATTR\">SYSDEV_CLASS_ATTR</a>(<a class=\"id\" href=\"#sched_mc_power_savings\">sched_mc_power_savings</a>, 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#sched_mc_power_savings_show\">sched_mc_power_savings_show</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#sched_mc_power_savings_store\">sched_mc_power_savings_store</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_SMT\">CONFIG_SCHED_SMT</a>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#sched_smt_power_savings_show\">sched_smt_power_savings_show</a>(struct <a class=\"id\" href=\"#sysdev_class\">sysdev_class</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#sysdev_class_attribute\">sysdev_class_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    char *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#page\">page</a>, \"%u\\n\", <a class=\"id\" href=\"#sched_smt_power_savings\">sched_smt_power_savings</a>);", 
"}", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#sched_smt_power_savings_store\">sched_smt_power_savings_store</a>(struct <a class=\"id\" href=\"#sysdev_class\">sysdev_class</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#sysdev_class_attribute\">sysdev_class_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sched_power_savings_store\">sched_power_savings_store</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>, 1);", 
"}", 
"static <a class=\"id\" href=\"#SYSDEV_CLASS_ATTR\">SYSDEV_CLASS_ATTR</a>(<a class=\"id\" href=\"#sched_smt_power_savings\">sched_smt_power_savings</a>, 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#sched_smt_power_savings_show\">sched_smt_power_savings_show</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#sched_smt_power_savings_store\">sched_smt_power_savings_store</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sched_create_sysfs_power_savings_entries\">sched_create_sysfs_power_savings_entries</a>(struct <a class=\"id\" href=\"#sysdev_class\">sysdev_class</a> *<a class=\"id\" href=\"#cls\">cls</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_SMT\">CONFIG_SCHED_SMT</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smt_capable\">smt_capable</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#sysfs_create_file\">sysfs_create_file</a>(&amp;<a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#kset\">kset</a>.<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#attr_sched_smt_power_savings\">attr_sched_smt_power_savings</a>.<a class=\"id\" href=\"#attr\">attr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_MC\">CONFIG_SCHED_MC</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a> && <a class=\"id\" href=\"#mc_capable\">mc_capable</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#sysfs_create_file\">sysfs_create_file</a>(&amp;<a class=\"id\" href=\"#cls\">cls</a>-><a class=\"id\" href=\"#kset\">kset</a>.<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#attr_sched_mc_power_savings\">attr_sched_mc_power_savings</a>.<a class=\"id\" href=\"#attr\">attr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SCHED_MC || CONFIG_SCHED_SMT */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Update cpusets according to cpu_active mask.  If cpusets are</span>", 
"<span class=\"comment\"> * disabled, cpuset_update_active_cpus() becomes a simple wrapper</span>", 
"<span class=\"comment\"> * around partition_sched_domains().</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cpuset_cpu_active\">cpuset_cpu_active</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nfb\">nfb</a>, unsigned long <a class=\"id\" href=\"#action\">action</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a> &amp; ~<a class=\"id\" href=\"#CPU_TASKS_FROZEN\">CPU_TASKS_FROZEN</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_ONLINE\">CPU_ONLINE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_FAILED\">CPU_DOWN_FAILED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuset_update_active_cpus\">cpuset_update_active_cpus</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cpuset_cpu_inactive\">cpuset_cpu_inactive</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nfb\">nfb</a>, unsigned long <a class=\"id\" href=\"#action\">action</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a> &amp; ~<a class=\"id\" href=\"#CPU_TASKS_FROZEN\">CPU_TASKS_FROZEN</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_PREPARE\">CPU_DOWN_PREPARE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuset_update_active_cpus\">cpuset_update_active_cpus</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#update_runtime\">update_runtime</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nfb\">nfb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = (int)(long)<a class=\"id\" href=\"#hcpu\">hcpu</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_PREPARE\">CPU_DOWN_PREPARE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_PREPARE_FROZEN\">CPU_DOWN_PREPARE_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_runtime\">disable_runtime</a>(<a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_FAILED\">CPU_DOWN_FAILED</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_FAILED_FROZEN\">CPU_DOWN_FAILED_FROZEN</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_ONLINE\">CPU_ONLINE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_ONLINE_FROZEN\">CPU_ONLINE_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_runtime\">enable_runtime</a>(<a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sched_init_smp\">sched_init_smp</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#non_isolated_cpus\">non_isolated_cpus</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#non_isolated_cpus\">non_isolated_cpus</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#fallback_doms\">fallback_doms</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_group_nodes_bycpu\">sched_group_nodes_bycpu</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> * sizeof(void **),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#sched_group_nodes_bycpu\">sched_group_nodes_bycpu</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#sched_domains_mutex\">sched_domains_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_init_sched_domains\">arch_init_sched_domains</a>(<a class=\"id\" href=\"#cpu_active_mask\">cpu_active_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_andnot\">cpumask_andnot</a>(<a class=\"id\" href=\"#non_isolated_cpus\">non_isolated_cpus</a>, <a class=\"id\" href=\"#cpu_possible_mask\">cpu_possible_mask</a>, <a class=\"id\" href=\"#cpu_isolated_map\">cpu_isolated_map</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#non_isolated_cpus\">non_isolated_cpus</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(), <a class=\"id\" href=\"#non_isolated_cpus\">non_isolated_cpus</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#sched_domains_mutex\">sched_domains_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hotcpu_notifier\">hotcpu_notifier</a>(<a class=\"id\" href=\"#cpuset_cpu_active\">cpuset_cpu_active</a>, <a class=\"id\" href=\"#CPU_PRI_CPUSET_ACTIVE\">CPU_PRI_CPUSET_ACTIVE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hotcpu_notifier\">hotcpu_notifier</a>(<a class=\"id\" href=\"#cpuset_cpu_inactive\">cpuset_cpu_inactive</a>, <a class=\"id\" href=\"#CPU_PRI_CPUSET_INACTIVE\">CPU_PRI_CPUSET_INACTIVE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* RT runtime code needs to handle some hotplug events */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hotcpu_notifier\">hotcpu_notifier</a>(<a class=\"id\" href=\"#update_runtime\">update_runtime</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_hrtick\">init_hrtick</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Move init over to a non-isolated CPU */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#set_cpus_allowed_ptr\">set_cpus_allowed_ptr</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#non_isolated_cpus\">non_isolated_cpus</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_init_granularity\">sched_init_granularity</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#non_isolated_cpus\">non_isolated_cpus</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_sched_rt_class\">init_sched_rt_class</a>();", 
"}", 
"#else", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sched_init_smp\">sched_init_smp</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_init_granularity\">sched_init_granularity</a>();", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"<a class=\"id\" href=\"#const_debug\">const_debug</a> unsigned int <a class=\"id\" href=\"#sysctl_timer_migration\">sysctl_timer_migration</a> = 1;", 
"", 
"int <a class=\"id\" href=\"#in_sched_functions\">in_sched_functions</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#in_lock_functions\">in_lock_functions</a>(<a class=\"id\" href=\"#addr\">addr</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#addr\">addr</a> >= (unsigned long)<a class=\"id\" href=\"#__sched_text_start\">__sched_text_start</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>&& <a class=\"id\" href=\"#addr\">addr</a> &lt; (unsigned long)<a class=\"id\" href=\"#__sched_text_end\">__sched_text_end</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#init_cfs_rq\">init_cfs_rq</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#tasks_timeline\">tasks_timeline</a> = <a class=\"id\" href=\"#RB_ROOT\">RB_ROOT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#tasks\">tasks</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#rq\">rq</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#min_vruntime\">min_vruntime</a> = (<a class=\"id\" href=\"#u64\">u64</a>)(-(1LL << 20));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#init_rt_rq\">init_rt_rq</a>(struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_prio_array\">rt_prio_array</a> *<a class=\"id\" href=\"#array\">array</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#array\">array</a> = &amp;<a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#active\">active</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(<a class=\"id\" href=\"#array\">array</a>-><a class=\"id\" href=\"#queue\">queue</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#array\">array</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* delimiter for bitsearch: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a>, <a class=\"id\" href=\"#array\">array</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a> || <a class=\"id\" href=\"#defined\">defined</a> <a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#highest_prio\">highest_prio</a>.<a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#highest_prio\">highest_prio</a>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_nr_migratory\">rt_nr_migratory</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#overloaded\">overloaded</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_head_init_raw\">plist_head_init_raw</a>(&amp;<a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#pushable_tasks\">pushable_tasks</a>, &amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_time\">rt_time</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_throttled\">rt_throttled</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_runtime\">rt_runtime</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_init\">raw_spin_lock_init</a>(&amp;<a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_runtime_lock\">rt_runtime_lock</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_nr_boosted\">rt_nr_boosted</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#rq\">rq</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"static void <a class=\"id\" href=\"#init_tg_cfs_entry\">init_tg_cfs_entry</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#add\">add</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_cfs_rq\">init_cfs_rq</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#tg\">tg</a> = <a class=\"id\" href=\"#tg\">tg</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#add\">add</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#leaf_cfs_rq_list\">leaf_cfs_rq_list</a>, &amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#leaf_cfs_rq_list\">leaf_cfs_rq_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#se\">se</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = <a class=\"id\" href=\"#se\">se</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* se could be NULL for init_task_group */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#se\">se</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = &amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cfs\">cfs</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#my_q\">my_q</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#my_q\">my_q</a> = <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#shares\">shares</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#inv_weight\">inv_weight</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>", 
"static void <a class=\"id\" href=\"#init_tg_rt_entry\">init_tg_rt_entry</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#rt_se\">rt_se</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#add\">add</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_rq\">rt_rq</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = <a class=\"id\" href=\"#rt_rq\">rt_rq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_rt_rq\">init_rt_rq</a>(<a class=\"id\" href=\"#rt_rq\">rt_rq</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#tg\">tg</a> = <a class=\"id\" href=\"#tg\">tg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_runtime\">rt_runtime</a> = <a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_bandwidth\">rt_bandwidth</a>.<a class=\"id\" href=\"#rt_runtime\">rt_runtime</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#add\">add</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#leaf_rt_rq_list\">leaf_rt_rq_list</a>, &amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#leaf_rt_rq_list\">leaf_rt_rq_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_se\">rt_se</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = <a class=\"id\" href=\"#rt_se\">rt_se</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rt_se\">rt_se</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_se\">rt_se</a>-><a class=\"id\" href=\"#rt_rq\">rt_rq</a> = &amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt\">rt</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_se\">rt_se</a>-><a class=\"id\" href=\"#rt_rq\">rt_rq</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#my_q\">my_q</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_se\">rt_se</a>-><a class=\"id\" href=\"#my_q\">my_q</a> = <a class=\"id\" href=\"#rt_rq\">rt_rq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_se\">rt_se</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#rt_se\">rt_se</a>-><a class=\"id\" href=\"#run_list\">run_list</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sched_init\">sched_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#alloc_size\">alloc_size</a> = 0, <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_size\">alloc_size</a> += 2 * <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> * sizeof(void **);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_size\">alloc_size</a> += 2 * <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> * sizeof(void **);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CPUMASK_OFFSTACK\">CONFIG_CPUMASK_OFFSTACK</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_size\">alloc_size</a> += <a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>() * <a class=\"id\" href=\"#cpumask_size\">cpumask_size</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#alloc_size\">alloc_size</a>) {", 
];
xr_frag_insert('l/54/0b0b9257541c1452fb6f1abaa6fe762454b9ce.xr', __xr_tmp);
