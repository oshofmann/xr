var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_VIRTIO_CONFIG_H\">_LINUX_VIRTIO_CONFIG_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_VIRTIO_CONFIG_H\">_LINUX_VIRTIO_CONFIG_H</a>", 
"<span class=\"comment\">/* This header, excluding the #ifdef __KERNEL__ part, is BSD licensed so</span>", 
"<span class=\"comment\"> * anyone can use the definitions to implement compatible drivers/servers. */</span>", 
"", 
"<span class=\"comment\">/* Virtio devices use a standardized configuration space to define their</span>", 
"<span class=\"comment\"> * features and pass configuration information, but each implementation can</span>", 
"<span class=\"comment\"> * store and access that space differently. */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* Status byte for guest to report progress, and synchronize features. */</span>", 
"<span class=\"comment\">/* We have seen device and processed generic fields (VIRTIO_CONFIG_F_VIRTIO) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRTIO_CONFIG_S_ACKNOWLEDGE\">VIRTIO_CONFIG_S_ACKNOWLEDGE</a><span class=\"ts\"/>1", 
"<span class=\"comment\">/* We have found a driver for the device. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRTIO_CONFIG_S_DRIVER\">VIRTIO_CONFIG_S_DRIVER</a><span class=\"ts\"/><span class=\"ts\"/>2", 
"<span class=\"comment\">/* Driver has used its parts of the config, and is happy */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRTIO_CONFIG_S_DRIVER_OK\">VIRTIO_CONFIG_S_DRIVER_OK</a><span class=\"ts\"/>4", 
"<span class=\"comment\">/* We've given up on this device. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRTIO_CONFIG_S_FAILED\">VIRTIO_CONFIG_S_FAILED</a><span class=\"ts\"/><span class=\"ts\"/>0x80", 
"", 
"<span class=\"comment\">/* Some virtio feature bits (currently bits 28 through 31) are reserved for the</span>", 
"<span class=\"comment\"> * transport being used (eg. virtio_ring), the rest are per-device feature</span>", 
"<span class=\"comment\"> * bits. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRTIO_TRANSPORT_F_START\">VIRTIO_TRANSPORT_F_START</a><span class=\"ts\"/>28", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRTIO_TRANSPORT_F_END\">VIRTIO_TRANSPORT_F_END</a><span class=\"ts\"/><span class=\"ts\"/>32", 
"", 
"<span class=\"comment\">/* Do we get callbacks when the ring is completely used, even if we've</span>", 
"<span class=\"comment\"> * suppressed them? */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRTIO_F_NOTIFY_ON_EMPTY\">VIRTIO_F_NOTIFY_ON_EMPTY</a><span class=\"ts\"/>24", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#virtio\">virtio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * virtio_config_ops - operations for configuring a virtio device</span>", 
"<span class=\"comment\"> * @get: read the value of a configuration field</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vdev: the virtio_device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>offset: the offset of the configuration field</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>buf: the buffer to write the field value into.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>len: the length of the buffer</span>", 
"<span class=\"comment\"> * @set: write the value of a configuration field</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vdev: the virtio_device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>offset: the offset of the configuration field</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>buf: the buffer to read the field value from.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>len: the length of the buffer</span>", 
"<span class=\"comment\"> * @get_status: read the status byte</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vdev: the virtio_device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns the status byte</span>", 
"<span class=\"comment\"> * @set_status: write the status byte</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vdev: the virtio_device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>status: the new status byte</span>", 
"<span class=\"comment\"> * @request_vqs: request the specified number of virtqueues</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vdev: the virtio_device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>max_vqs: the max number of virtqueues we want</span>", 
"<span class=\"comment\"> *      If supplied, must call before any virtqueues are instantiated.</span>", 
"<span class=\"comment\"> *      To modify the max number of virtqueues after request_vqs has been</span>", 
"<span class=\"comment\"> *      called, call free_vqs and then request_vqs with a new value.</span>", 
"<span class=\"comment\"> * @free_vqs: cleanup resources allocated by request_vqs</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vdev: the virtio_device</span>", 
"<span class=\"comment\"> *      If supplied, must call after all virtqueues have been deleted.</span>", 
"<span class=\"comment\"> * @reset: reset the device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vdev: the virtio device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>After this, status and feature negotiation must be done again</span>", 
"<span class=\"comment\"> * @find_vqs: find virtqueues and instantiate them.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vdev: the virtio_device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>nvqs: the number of virtqueues to find</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vqs: on success, includes new virtqueues</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>callbacks: array of callbacks, for each virtqueue</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>names: array of virtqueue names (mainly for debugging)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns 0 on success or error status</span>", 
"<span class=\"comment\"> * @del_vqs: free virtqueues found by find_vqs().</span>", 
"<span class=\"comment\"> * @get_features: get the array of feature bits for this device.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vdev: the virtio_device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns the first 32 feature bits (all we currently need).</span>", 
"<span class=\"comment\"> * @finalize_features: confirm what device features we'll be using.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vdev: the virtio_device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This gives the final feature bits for the device: it can change</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the dev-&gt;feature bits if it wants.</span>", 
"<span class=\"comment\"> */</span>", 
"typedef void <a class=\"id\" href=\"#vq_callback_t\">vq_callback_t</a>(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *);", 
"struct <a class=\"id\" href=\"#virtio_config_ops\">virtio_config_ops</a> {", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#get\">get</a>)(struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#vdev\">vdev</a>, unsigned <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#set\">set</a>)(struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#vdev\">vdev</a>, unsigned <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    const void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> (*<a class=\"id\" href=\"#get_status\">get_status</a>)(struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#vdev\">vdev</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#set_status\">set_status</a>)(struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#vdev\">vdev</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#reset\">reset</a>)(struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#vdev\">vdev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#find_vqs\">find_vqs</a>)(struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *, unsigned <a class=\"id\" href=\"#nvqs\">nvqs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#vqs\">vqs</a>[],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vq_callback_t\">vq_callback_t</a> *<a class=\"id\" href=\"#callbacks\">callbacks</a>[],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#names\">names</a>[]);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#del_vqs\">del_vqs</a>)(struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> (*<a class=\"id\" href=\"#get_features\">get_features</a>)(struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#vdev\">vdev</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#finalize_features\">finalize_features</a>)(struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#vdev\">vdev</a>);", 
"};", 
"", 
"<span class=\"comment\">/* If driver didn't advertise the feature, it will never appear. */</span>", 
"void <a class=\"id\" href=\"#virtio_check_driver_offered_feature\">virtio_check_driver_offered_feature</a>(const struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#vdev\">vdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#fbit\">fbit</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * virtio_has_feature - helper to determine if this device has this feature.</span>", 
"<span class=\"comment\"> * @vdev: the device</span>", 
"<span class=\"comment\"> * @fbit: the feature bit</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#virtio_has_feature\">virtio_has_feature</a>(const struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#vdev\">vdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#fbit\">fbit</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Did you forget to fix assumptions on max features? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MAYBE_BUILD_BUG_ON\">MAYBE_BUILD_BUG_ON</a>(<a class=\"id\" href=\"#fbit\">fbit</a> >= 32);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fbit\">fbit</a> &lt; <a class=\"id\" href=\"#VIRTIO_TRANSPORT_F_START\">VIRTIO_TRANSPORT_F_START</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#virtio_check_driver_offered_feature\">virtio_check_driver_offered_feature</a>(<a class=\"id\" href=\"#vdev\">vdev</a>, <a class=\"id\" href=\"#fbit\">fbit</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#fbit\">fbit</a>, <a class=\"id\" href=\"#vdev\">vdev</a>-><a class=\"id\" href=\"#features\">features</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * virtio_config_val - look for a feature and get a virtio config entry.</span>", 
"<span class=\"comment\"> * @vdev: the virtio device</span>", 
"<span class=\"comment\"> * @fbit: the feature bit</span>", 
"<span class=\"comment\"> * @offset: the type to search for.</span>", 
"<span class=\"comment\"> * @val: a pointer to the value to fill in.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The return value is -ENOENT if the feature doesn't exist.  Otherwise</span>", 
"<span class=\"comment\"> * the config value is copied into whatever is pointed to by v. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#virtio_config_val\">virtio_config_val</a>(<a class=\"id\" href=\"#vdev\">vdev</a>, <a class=\"id\" href=\"#fbit\">fbit</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#v\">v</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#virtio_config_buf\">virtio_config_buf</a>((<a class=\"id\" href=\"#vdev\">vdev</a>), (<a class=\"id\" href=\"#fbit\">fbit</a>), (<a class=\"id\" href=\"#offset\">offset</a>), (<a class=\"id\" href=\"#v\">v</a>), sizeof(*<a class=\"id\" href=\"#v\">v</a>))", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#virtio_config_buf\">virtio_config_buf</a>(struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#vdev\">vdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#fbit\">fbit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#virtio_has_feature\">virtio_has_feature</a>(<a class=\"id\" href=\"#vdev\">vdev</a>, <a class=\"id\" href=\"#fbit\">fbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vdev\">vdev</a>-><a class=\"id\" href=\"#config\">config</a>-><a class=\"id\" href=\"#get\">get</a>(<a class=\"id\" href=\"#vdev\">vdev</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#virtio_find_single_vq\">virtio_find_single_vq</a>(struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#vdev\">vdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vq_callback_t\">vq_callback_t</a> *<a class=\"id\" href=\"#c\">c</a>, const char *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vq_callback_t\">vq_callback_t</a> *<a class=\"id\" href=\"#callbacks\">callbacks</a>[] = { <a class=\"id\" href=\"#c\">c</a> };", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#names\">names</a>[] = { <a class=\"id\" href=\"#n\">n</a> };", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#vdev\">vdev</a>-><a class=\"id\" href=\"#config\">config</a>-><a class=\"id\" href=\"#find_vqs\">find_vqs</a>(<a class=\"id\" href=\"#vdev\">vdev</a>, 1, &amp;<a class=\"id\" href=\"#vq\">vq</a>, <a class=\"id\" href=\"#callbacks\">callbacks</a>, <a class=\"id\" href=\"#names\">names</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vq\">vq</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_VIRTIO_CONFIG_H */</span>", 
];
xr_frag_insert('l/54/166fb8f1b9a8fb4eb1e8b0a65a62fb4c2c7231.xr', __xr_tmp);
