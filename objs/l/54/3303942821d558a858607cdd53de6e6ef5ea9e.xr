var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Performance events:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    Copyright (C) 2008-2009, Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>", 
"<span class=\"comment\"> *    Copyright (C) 2008-2009, Red Hat, Inc., Ingo Molnar</span>", 
"<span class=\"comment\"> *    Copyright (C) 2008-2009, Red Hat, Inc., Peter Zijlstra</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Data type definitions, declarations, prototypes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    Started by: Thomas Gleixner and Ingo Molnar</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For licencing details see kernel-base/COPYING</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_PERF_EVENT_H\">_LINUX_PERF_EVENT_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_PERF_EVENT_H\">_LINUX_PERF_EVENT_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ioctl\">ioctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#byteorder\">byteorder</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * User-space ABI bits:</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * attr.type</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#perf_type_id\">perf_type_id</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_TYPE_HARDWARE\">PERF_TYPE_HARDWARE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_TYPE_SOFTWARE\">PERF_TYPE_SOFTWARE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_TYPE_TRACEPOINT\">PERF_TYPE_TRACEPOINT</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_TYPE_HW_CACHE\">PERF_TYPE_HW_CACHE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_TYPE_RAW\">PERF_TYPE_RAW</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 4,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_TYPE_BREAKPOINT\">PERF_TYPE_BREAKPOINT</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 5,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_TYPE_MAX\">PERF_TYPE_MAX</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* non-ABI */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generalized performance event event_id types, used by the</span>", 
"<span class=\"comment\"> * attr.event_id parameter of the sys_perf_event_open()</span>", 
"<span class=\"comment\"> * syscall:</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#perf_hw_id\">perf_hw_id</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Common hardware events, generalized by the kernel:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_CPU_CYCLES\">PERF_COUNT_HW_CPU_CYCLES</a><span class=\"ts\"/><span class=\"ts\"/>= 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_INSTRUCTIONS\">PERF_COUNT_HW_INSTRUCTIONS</a><span class=\"ts\"/><span class=\"ts\"/>= 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_REFERENCES\">PERF_COUNT_HW_CACHE_REFERENCES</a><span class=\"ts\"/><span class=\"ts\"/>= 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_MISSES\">PERF_COUNT_HW_CACHE_MISSES</a><span class=\"ts\"/><span class=\"ts\"/>= 3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_BRANCH_INSTRUCTIONS\">PERF_COUNT_HW_BRANCH_INSTRUCTIONS</a><span class=\"ts\"/>= 4,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_BRANCH_MISSES\">PERF_COUNT_HW_BRANCH_MISSES</a><span class=\"ts\"/><span class=\"ts\"/>= 5,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_BUS_CYCLES\">PERF_COUNT_HW_BUS_CYCLES</a><span class=\"ts\"/><span class=\"ts\"/>= 6,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_MAX\">PERF_COUNT_HW_MAX</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* non-ABI */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generalized hardware cache events:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *       { L1-D, L1-I, LLC, ITLB, DTLB, BPU } x</span>", 
"<span class=\"comment\"> *       { read, write, prefetch } x</span>", 
"<span class=\"comment\"> *       { accesses, misses }</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#perf_hw_cache_id\">perf_hw_cache_id</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_L1D\">PERF_COUNT_HW_CACHE_L1D</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_L1I\">PERF_COUNT_HW_CACHE_L1I</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_LL\">PERF_COUNT_HW_CACHE_LL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_DTLB\">PERF_COUNT_HW_CACHE_DTLB</a><span class=\"ts\"/><span class=\"ts\"/>= 3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_ITLB\">PERF_COUNT_HW_CACHE_ITLB</a><span class=\"ts\"/><span class=\"ts\"/>= 4,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_BPU\">PERF_COUNT_HW_CACHE_BPU</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 5,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_MAX\">PERF_COUNT_HW_CACHE_MAX</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* non-ABI */</span>", 
"};", 
"", 
"enum <a class=\"id\" href=\"#perf_hw_cache_op_id\">perf_hw_cache_op_id</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_OP_READ\">PERF_COUNT_HW_CACHE_OP_READ</a><span class=\"ts\"/><span class=\"ts\"/>= 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_OP_WRITE\">PERF_COUNT_HW_CACHE_OP_WRITE</a><span class=\"ts\"/><span class=\"ts\"/>= 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_OP_PREFETCH\">PERF_COUNT_HW_CACHE_OP_PREFETCH</a><span class=\"ts\"/><span class=\"ts\"/>= 2,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_OP_MAX\">PERF_COUNT_HW_CACHE_OP_MAX</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* non-ABI */</span>", 
"};", 
"", 
"enum <a class=\"id\" href=\"#perf_hw_cache_op_result_id\">perf_hw_cache_op_result_id</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_RESULT_ACCESS\">PERF_COUNT_HW_CACHE_RESULT_ACCESS</a><span class=\"ts\"/>= 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_RESULT_MISS\">PERF_COUNT_HW_CACHE_RESULT_MISS</a><span class=\"ts\"/><span class=\"ts\"/>= 1,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_RESULT_MAX\">PERF_COUNT_HW_CACHE_RESULT_MAX</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* non-ABI */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Special \"software\" events provided by the kernel, even if the hardware</span>", 
"<span class=\"comment\"> * does not support performance events. These events measure various</span>", 
"<span class=\"comment\"> * physical and sw events of the kernel (and allow the profiling of them as</span>", 
"<span class=\"comment\"> * well):</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#perf_sw_ids\">perf_sw_ids</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_SW_CPU_CLOCK\">PERF_COUNT_SW_CPU_CLOCK</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_SW_TASK_CLOCK\">PERF_COUNT_SW_TASK_CLOCK</a><span class=\"ts\"/><span class=\"ts\"/>= 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_SW_PAGE_FAULTS\">PERF_COUNT_SW_PAGE_FAULTS</a><span class=\"ts\"/><span class=\"ts\"/>= 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_SW_CONTEXT_SWITCHES\">PERF_COUNT_SW_CONTEXT_SWITCHES</a><span class=\"ts\"/><span class=\"ts\"/>= 3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_SW_CPU_MIGRATIONS\">PERF_COUNT_SW_CPU_MIGRATIONS</a><span class=\"ts\"/><span class=\"ts\"/>= 4,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_SW_PAGE_FAULTS_MIN\">PERF_COUNT_SW_PAGE_FAULTS_MIN</a><span class=\"ts\"/><span class=\"ts\"/>= 5,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_SW_PAGE_FAULTS_MAJ\">PERF_COUNT_SW_PAGE_FAULTS_MAJ</a><span class=\"ts\"/><span class=\"ts\"/>= 6,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_SW_ALIGNMENT_FAULTS\">PERF_COUNT_SW_ALIGNMENT_FAULTS</a><span class=\"ts\"/><span class=\"ts\"/>= 7,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_SW_EMULATION_FAULTS\">PERF_COUNT_SW_EMULATION_FAULTS</a><span class=\"ts\"/><span class=\"ts\"/>= 8,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_COUNT_SW_MAX\">PERF_COUNT_SW_MAX</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* non-ABI */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Bits that can be set in attr.sample_type to request information</span>", 
"<span class=\"comment\"> * in the overflow packets.</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#perf_event_sample_format\">perf_event_sample_format</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_SAMPLE_IP\">PERF_SAMPLE_IP</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 1U << 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_SAMPLE_TID\">PERF_SAMPLE_TID</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 1U << 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_SAMPLE_TIME\">PERF_SAMPLE_TIME</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 1U << 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_SAMPLE_ADDR\">PERF_SAMPLE_ADDR</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 1U << 3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_SAMPLE_READ\">PERF_SAMPLE_READ</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 1U << 4,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_SAMPLE_CALLCHAIN\">PERF_SAMPLE_CALLCHAIN</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 1U << 5,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_SAMPLE_ID\">PERF_SAMPLE_ID</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 1U << 6,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_SAMPLE_CPU\">PERF_SAMPLE_CPU</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 1U << 7,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_SAMPLE_PERIOD\">PERF_SAMPLE_PERIOD</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 1U << 8,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_SAMPLE_STREAM_ID\">PERF_SAMPLE_STREAM_ID</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 1U << 9,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_SAMPLE_RAW\">PERF_SAMPLE_RAW</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 1U << 10,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_SAMPLE_MAX\">PERF_SAMPLE_MAX</a> = 1U << 11,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* non-ABI */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The format of the data returned by read() on a perf event fd,</span>", 
"<span class=\"comment\"> * as specified by attr.read_format:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * struct read_format {</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>{ u64<span class=\"ts\"/><span class=\"ts\"/>value;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  { u64<span class=\"ts\"/><span class=\"ts\"/>time_enabled; } &amp;&amp; PERF_FORMAT_ENABLED</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  { u64<span class=\"ts\"/><span class=\"ts\"/>time_running; } &amp;&amp; PERF_FORMAT_RUNNING</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  { u64<span class=\"ts\"/><span class=\"ts\"/>id;           } &amp;&amp; PERF_FORMAT_ID</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>} &amp;&amp; !PERF_FORMAT_GROUP</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>{ u64<span class=\"ts\"/><span class=\"ts\"/>nr;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  { u64<span class=\"ts\"/><span class=\"ts\"/>time_enabled; } &amp;&amp; PERF_FORMAT_ENABLED</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  { u64<span class=\"ts\"/><span class=\"ts\"/>time_running; } &amp;&amp; PERF_FORMAT_RUNNING</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  { u64<span class=\"ts\"/><span class=\"ts\"/>value;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    { u64<span class=\"ts\"/>id;           } &amp;&amp; PERF_FORMAT_ID</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  }<span class=\"ts\"/><span class=\"ts\"/>cntr[nr];</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>} &amp;&amp; PERF_FORMAT_GROUP</span>", 
"<span class=\"comment\"> * };</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#perf_event_read_format\">perf_event_read_format</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_FORMAT_TOTAL_TIME_ENABLED\">PERF_FORMAT_TOTAL_TIME_ENABLED</a><span class=\"ts\"/><span class=\"ts\"/>= 1U << 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_FORMAT_TOTAL_TIME_RUNNING\">PERF_FORMAT_TOTAL_TIME_RUNNING</a><span class=\"ts\"/><span class=\"ts\"/>= 1U << 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_FORMAT_ID\">PERF_FORMAT_ID</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 1U << 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_FORMAT_GROUP\">PERF_FORMAT_GROUP</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 1U << 3,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_FORMAT_MAX\">PERF_FORMAT_MAX</a> = 1U << 4,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* non-ABI */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_ATTR_SIZE_VER0\">PERF_ATTR_SIZE_VER0</a><span class=\"ts\"/>64<span class=\"ts\"/><span class=\"comment\">/* sizeof first published struct */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Hardware event_id to monitor via a performance monitoring event:</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#perf_event_attr\">perf_event_attr</a> {", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Major type: hardware/software/tracepoint/etc.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Size of the attr structure, for fwd/bwd compat.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Type specific configuration information.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#config\">config</a>;", 
"", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sample_period\">sample_period</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sample_freq\">sample_freq</a>;", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sample_type\">sample_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_format\">read_format</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disabled\">disabled</a>       :  1, <span class=\"comment\">/* off by default        */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inherit\">inherit</a><span class=\"ts\"/>       :  1, <span class=\"comment\">/* children inherit it   */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pinned\">pinned</a><span class=\"ts\"/>       :  1, <span class=\"comment\">/* must always be on PMU */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exclusive\">exclusive</a>      :  1, <span class=\"comment\">/* only group on PMU     */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exclude_user\">exclude_user</a>   :  1, <span class=\"comment\">/* don't count user      */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exclude_kernel\">exclude_kernel</a> :  1, <span class=\"comment\">/* ditto kernel          */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exclude_hv\">exclude_hv</a>     :  1, <span class=\"comment\">/* ditto hypervisor      */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exclude_idle\">exclude_idle</a>   :  1, <span class=\"comment\">/* don't count when idle */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmap\">mmap</a>           :  1, <span class=\"comment\">/* include mmap data     */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comm\">comm</a><span class=\"ts\"/>       :  1, <span class=\"comment\">/* include comm data     */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freq\">freq</a>           :  1, <span class=\"comment\">/* use freq, not period  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inherit_stat\">inherit_stat</a>   :  1, <span class=\"comment\">/* per task counts       */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_on_exec\">enable_on_exec</a> :  1, <span class=\"comment\">/* next exec enables     */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>           :  1, <span class=\"comment\">/* trace fork/exit       */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#watermark\">watermark</a>      :  1, <span class=\"comment\">/* wakeup_watermark      */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * precise_ip:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *  0 - SAMPLE_IP can have arbitrary skid</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *  1 - SAMPLE_IP must have constant skid</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *  2 - SAMPLE_IP requested to have 0 skid</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *  3 - SAMPLE_IP must have 0 skid</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *  See also PERF_RECORD_MISC_EXACT_IP</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#precise_ip\">precise_ip</a>     :  2, <span class=\"comment\">/* skid constraint       */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmap_data\">mmap_data</a>      :  1, <span class=\"comment\">/* non-exec mmap data    */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__reserved_1\">__reserved_1</a>   : 46;", 
"", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wakeup_events\">wakeup_events</a>;<span class=\"ts\"/>  <span class=\"comment\">/* wakeup every n events */</span>", 
];
xr_frag_insert('l/54/3303942821d558a858607cdd53de6e6ef5ea9e.xr', __xr_tmp);
