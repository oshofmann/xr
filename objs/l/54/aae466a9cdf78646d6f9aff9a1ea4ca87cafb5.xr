var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * legacy.c - traditional, old school PCI bus probing</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pci_x86\">pci_x86</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Discover remaining PCI buses in case there are peer host bridges.</span>", 
"<span class=\"comment\"> * We use the number of last PCI bus provided by the PCI BIOS.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#pcibios_fixup_peer_bridges\">pcibios_fixup_peer_bridges</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcibios_last_bus\">pcibios_last_bus</a> <= 0 || <a class=\"id\" href=\"#pcibios_last_bus\">pcibios_last_bus</a> &gt; 0xff)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DBG\">DBG</a>(\"PCI: Peer bridge fixup\\n\");", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a>=0; <a class=\"id\" href=\"#n\">n</a> <= <a class=\"id\" href=\"#pcibios_last_bus\">pcibios_last_bus</a>; <a class=\"id\" href=\"#n\">n</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcibios_scan_specific_bus\">pcibios_scan_specific_bus</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pci_legacy_init\">pci_legacy_init</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#raw_pci_ops\">raw_pci_ops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"PCI: System does not support PCI\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"PCI: Probing PCI hardware\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_root_bus\">pci_root_bus</a> = <a class=\"id\" href=\"#pcibios_scan_root\">pcibios_scan_root</a>(0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_root_bus\">pci_root_bus</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_bus_add_devices\">pci_bus_add_devices</a>(<a class=\"id\" href=\"#pci_root_bus\">pci_root_bus</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#pcibios_scan_specific_bus\">pcibios_scan_specific_bus</a>(int <a class=\"id\" href=\"#busn\">busn</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#devfn\">devfn</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#l\">l</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_find_bus\">pci_find_bus</a>(0, <a class=\"id\" href=\"#busn\">busn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#get_mp_bus_to_node\">get_mp_bus_to_node</a>(<a class=\"id\" href=\"#busn\">busn</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#devfn\">devfn</a> = 0; <a class=\"id\" href=\"#devfn\">devfn</a> &lt; 256; <a class=\"id\" href=\"#devfn\">devfn</a> += 8) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#raw_pci_read\">raw_pci_read</a>(0, <a class=\"id\" href=\"#busn\">busn</a>, <a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#PCI_VENDOR_ID\">PCI_VENDOR_ID</a>, 2, &amp;<a class=\"id\" href=\"#l\">l</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#l\">l</a> != 0x0000 && <a class=\"id\" href=\"#l\">l</a> != 0xffff) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DBG\">DBG</a>(\"Found device at %02x:%02x [%04x]\\n\", <a class=\"id\" href=\"#busn\">busn</a>, <a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#l\">l</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"PCI: Discovered peer bus %02x\\n\", <a class=\"id\" href=\"#busn\">busn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_scan_bus_on_node\">pci_scan_bus_on_node</a>(<a class=\"id\" href=\"#busn\">busn</a>, &amp;<a class=\"id\" href=\"#pci_root_ops\">pci_root_ops</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pcibios_scan_specific_bus\">pcibios_scan_specific_bus</a>);", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pci_subsys_init\">pci_subsys_init</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The init function returns an non zero value when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pci_legacy_init should be invoked.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#init\">init</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_legacy_init\">pci_legacy_init</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcibios_fixup_peer_bridges\">pcibios_fixup_peer_bridges</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#init_irq\">init_irq</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcibios_init\">pcibios_init</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#subsys_initcall\">subsys_initcall</a>(<a class=\"id\" href=\"#pci_subsys_init\">pci_subsys_init</a>);", 
];
xr_frag_insert('l/54/aae466a9cdf78646d6f9aff9a1ea4ca87cafb5.xr', __xr_tmp);
