var __xr_tmp = [
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#victim\">victim</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#victim\">victim</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#swap_list\">swap_list</a>.<a class=\"id\" href=\"#head\">head</a>; <a class=\"id\" href=\"#type\">type</a> >= 0; <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#type\">type</a>]-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#type\">type</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SWP_WRITEOK\">SWP_WRITEOK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#swap_file\">swap_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a> == <a class=\"id\" href=\"#mapping\">mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_dput\">out_dput</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#security_vm_enough_memory\">security_vm_enough_memory</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pages\">pages</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_unacct_memory\">vm_unacct_memory</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_dput\">out_dput</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_list\">swap_list</a>.<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#prev\">prev</a>]-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#swap_list\">swap_list</a>.<a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* just pick something that's safe... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_list\">swap_list</a>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#swap_list\">swap_list</a>.<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#next\">next</a>; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#prio\">prio</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#least_priority\">least_priority</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_swap_pages\">nr_swap_pages</a> -= <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total_swap_pages\">total_swap_pages</a> -= <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#SWP_WRITEOK\">SWP_WRITEOK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_OOM_ORIGIN\">PF_OOM_ORIGIN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#try_to_unuse\">try_to_unuse</a>(<a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PF_OOM_ORIGIN\">PF_OOM_ORIGIN</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* re-insert swap space back into swap_list */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> = --<a class=\"id\" href=\"#least_priority\">least_priority</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#swap_list\">swap_list</a>.<a class=\"id\" href=\"#head\">head</a>; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> >= <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#prio\">prio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_list\">swap_list</a>.<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#swap_list\">swap_list</a>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#prev\">prev</a>]-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_swap_pages\">nr_swap_pages</a> += <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_swap_pages\">total_swap_pages</a> += <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SWP_WRITEOK\">SWP_WRITEOK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_dput\">out_dput</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* wait for any unplug function to finish */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#swap_unplug_sem\">swap_unplug_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#swap_unplug_sem\">swap_unplug_sem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destroy_swap_extents\">destroy_swap_extents</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SWP_CONTINUED\">SWP_CONTINUED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_swap_count_continuations\">free_swap_count_continuations</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#swapon_mutex\">swapon_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drain_mmlist\">drain_mmlist</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* wait for anyone still in scan_swap_map */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#highest_bit\">highest_bit</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cuts scans short */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> >= <a class=\"id\" href=\"#SWP_SCANNING\">SWP_SCANNING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_timeout_uninterruptible\">schedule_timeout_uninterruptible</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swap_file\">swap_file</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#swap_file\">swap_file</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#swap_file\">swap_file</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#max\">max</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swap_map\">swap_map</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#swapon_mutex\">swapon_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#swap_map\">swap_map</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Destroy swap account informatin */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swap_cgroup_swapoff\">swap_cgroup_swapoff</a>(<a class=\"id\" href=\"#type\">type</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISBLK\">S_ISBLK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#I_BDEV\">I_BDEV</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_blocksize\">set_blocksize</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#old_block_size\">old_block_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd_release\">bd_release</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> &= ~<a class=\"id\" href=\"#S_SWAPFILE\">S_SWAPFILE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filp_close\">filp_close</a>(<a class=\"id\" href=\"#swap_file\">swap_file</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<a class=\"id\" href=\"#out_dput\">out_dput</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filp_close\">filp_close</a>(<a class=\"id\" href=\"#victim\">victim</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"<span class=\"comment\">/* iterator */</span>", 
"static void *<a class=\"id\" href=\"#swap_start\">swap_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#swap\">swap</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#si\">si</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#l\">l</a> = *<a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#swapon_mutex\">swapon_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#l\">l</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SEQ_START_TOKEN\">SEQ_START_TOKEN</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#type\">type</a> = 0; <a class=\"id\" href=\"#type\">type</a> &lt; <a class=\"id\" href=\"#nr_swapfiles\">nr_swapfiles</a>; <a class=\"id\" href=\"#type\">type</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();<span class=\"ts\"/><span class=\"comment\">/* read nr_swapfiles before swap_info[type] */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a> = <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#type\">type</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SWP_USED\">SWP_USED</a>) || !<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!--<a class=\"id\" href=\"#l\">l</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#si\">si</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#swap_next\">swap_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#swap\">swap</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#si\">si</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a> == <a class=\"id\" href=\"#SEQ_START_TOKEN\">SEQ_START_TOKEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#type\">type</a> + 1;", 
"", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#type\">type</a> &lt; <a class=\"id\" href=\"#nr_swapfiles\">nr_swapfiles</a>; <a class=\"id\" href=\"#type\">type</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();<span class=\"ts\"/><span class=\"comment\">/* read nr_swapfiles before swap_info[type] */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a> = <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#type\">type</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SWP_USED\">SWP_USED</a>) || !<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>++*<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#si\">si</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#swap_stop\">swap_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#swap\">swap</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#swapon_mutex\">swapon_mutex</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#swap_show\">swap_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#swap\">swap</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#si\">si</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#si\">si</a> == <a class=\"id\" href=\"#SEQ_START_TOKEN\">SEQ_START_TOKEN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#swap\">swap</a>,\"Filename\\t\\t\\t\\tType\\t\\tSize\\tUsed\\tPriority\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#swap_file\">swap_file</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#seq_path\">seq_path</a>(<a class=\"id\" href=\"#swap\">swap</a>, &amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>, \" \\t\\n\\\\\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#swap\">swap</a>, \"%*s%s\\t%u\\t%u\\t%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> &lt; 40 ? 40 - <a class=\"id\" href=\"#len\">len</a> : 1, \" \",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#S_ISBLK\">S_ISBLK</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"partition\" : \"file\\t\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#pages\">pages</a> << (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> - 10),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#inuse_pages\">inuse_pages</a> << (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> - 10),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#prio\">prio</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#swaps_op\">swaps_op</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a> =<span class=\"ts\"/><a class=\"id\" href=\"#swap_start\">swap_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a> =<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_next\">swap_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a> =<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_stop\">swap_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a> =<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_show\">swap_show</a>", 
"};", 
"", 
"static int <a class=\"id\" href=\"#swaps_open\">swaps_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#swaps_op\">swaps_op</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#proc_swaps_operations\">proc_swaps_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#swaps_open\">swaps_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_release\">seq_release</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#procswaps_init\">procswaps_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_create\">proc_create</a>(\"swaps\", 0, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#proc_swaps_operations\">proc_swaps_operations</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#__initcall\">__initcall</a>(<a class=\"id\" href=\"#procswaps_init\">procswaps_init</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PROC_FS */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#MAX_SWAPFILES_CHECK\">MAX_SWAPFILES_CHECK</a>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#max_swapfiles_check\">max_swapfiles_check</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MAX_SWAPFILES_CHECK\">MAX_SWAPFILES_CHECK</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#max_swapfiles_check\">max_swapfiles_check</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Written 01/25/92 by Simmule Turner, heavily changed by Linus.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The swapon system call</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#swapon\">swapon</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#specialfile\">specialfile</a>, int, <a class=\"id\" href=\"#swap_flags\">swap_flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#swap_file\">swap_file</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#swap_header\">swap_header</a> *<a class=\"id\" href=\"#swap_header\">swap_header</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_good_pages\">nr_good_pages</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_extents\">nr_extents</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#span\">span</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#maxpages\">maxpages</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#swapfilepages\">swapfilepages</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#swap_map\">swap_map</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#did_down\">did_down</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#p\">p</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#type\">type</a> = 0; <a class=\"id\" href=\"#type\">type</a> &lt; <a class=\"id\" href=\"#nr_swapfiles\">nr_swapfiles</a>; <a class=\"id\" href=\"#type\">type</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#type\">type</a>]-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SWP_USED\">SWP_USED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> >= <a class=\"id\" href=\"#MAX_SWAPFILES\">MAX_SWAPFILES</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> >= <a class=\"id\" href=\"#nr_swapfiles\">nr_swapfiles</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#type\">type</a>] = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Write swap_info[type] before nr_swapfiles, in case a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * racing procfs swap_start() or swap_next() is reading them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (We never shrink nr_swapfiles, we never free this entry.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_swapfiles\">nr_swapfiles</a>++;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#type\">type</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Do not memset this entry: a racing procfs swap_next()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * would be relying on p-&gt;type to remain valid.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#first_swap_extent\">first_swap_extent</a>.<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#SWP_USED\">SWP_USED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#next\">next</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#getname\">getname</a>(<a class=\"id\" href=\"#specialfile\">specialfile</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#name\">name</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_swap_2\">bad_swap_2</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swap_file\">swap_file</a> = <a class=\"id\" href=\"#filp_open\">filp_open</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#O_RDWR\">O_RDWR</a>|<a class=\"id\" href=\"#O_LARGEFILE\">O_LARGEFILE</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#swap_file\">swap_file</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#swap_file\">swap_file</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_file\">swap_file</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_swap_2\">bad_swap_2</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#swap_file\">swap_file</a> = <a class=\"id\" href=\"#swap_file\">swap_file</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#swap_file\">swap_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_swapfiles\">nr_swapfiles</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#type\">type</a> || !<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#swap_file\">swap_file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a> == <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#swap_file\">swap_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_swap\">bad_swap</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISBLK\">S_ISBLK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#I_BDEV\">I_BDEV</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#bd_claim\">bd_claim</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#sys_swapon\">sys_swapon</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_swap\">bad_swap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#old_block_size\">old_block_size</a> = <a class=\"id\" href=\"#block_size\">block_size</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#set_blocksize\">set_blocksize</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_swap\">bad_swap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SWP_BLKDEV\">SWP_BLKDEV</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#did_down\">did_down</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_SWAPFILE\">IS_SWAPFILE</a>(<a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_swap\">bad_swap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_swap\">bad_swap</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swapfilepages\">swapfilepages</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#inode\">inode</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Read the swap header.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#readpage\">readpage</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_swap\">bad_swap</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#read_mapping_page\">read_mapping_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, 0, <a class=\"id\" href=\"#swap_file\">swap_file</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_swap\">bad_swap</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swap_header\">swap_header</a> = <a class=\"id\" href=\"#kmap\">kmap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#memcmp\">memcmp</a>(\"SWAPSPACE2\", <a class=\"id\" href=\"#swap_header\">swap_header</a>-><a class=\"id\" href=\"#magic\">magic</a>.<a class=\"id\" href=\"#magic\">magic</a>, 10)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Unable to find swap-space signature\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_swap\">bad_swap</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* swap partition endianess hack... */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#swab32\">swab32</a>(<a class=\"id\" href=\"#swap_header\">swap_header</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#version\">version</a>) == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swab32s\">swab32s</a>(&amp;<a class=\"id\" href=\"#swap_header\">swap_header</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#version\">version</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swab32s\">swab32s</a>(&amp;<a class=\"id\" href=\"#swap_header\">swap_header</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#last_page\">last_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swab32s\">swab32s</a>(&amp;<a class=\"id\" href=\"#swap_header\">swap_header</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#nr_badpages\">nr_badpages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#swap_header\">swap_header</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#nr_badpages\">nr_badpages</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swab32s\">swab32s</a>(&amp;<a class=\"id\" href=\"#swap_header\">swap_header</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#badpages\">badpages</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Check the swap header's sub-version */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#swap_header\">swap_header</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#version\">version</a> != 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"Unable to handle swap header version %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#swap_header\">swap_header</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#version\">version</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_swap\">bad_swap</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#lowest_bit\">lowest_bit</a>  = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cluster_next\">cluster_next</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cluster_nr\">cluster_nr</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Find out how many pages are allowed for a single swap</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * device. There are two limiting factors: 1) the number of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bits for the swap offset in the swp_entry_t type and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) the number of bits in the a swap pte as defined by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the different architectures. In order to find the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * largest possible bit mask a swap entry with swap type 0</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and swap offset ~0UL is created, encoded to a swap pte,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * decoded to a swp_entry_t again and finally the swap</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * offset is extracted. This will mask all the bits from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the initial ~0UL mask that can't be encoded in either</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the swp_entry_t or the architecture definition of a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * swap pte.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#maxpages\">maxpages</a> = <a class=\"id\" href=\"#swp_offset\">swp_offset</a>(<a class=\"id\" href=\"#pte_to_swp_entry\">pte_to_swp_entry</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_to_pte\">swp_entry_to_pte</a>(<a class=\"id\" href=\"#swp_entry\">swp_entry</a>(0, ~0UL)))) + 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#maxpages\">maxpages</a> &gt; <a class=\"id\" href=\"#swap_header\">swap_header</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#last_page\">last_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#maxpages\">maxpages</a> = <a class=\"id\" href=\"#swap_header\">swap_header</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#last_page\">last_page</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* p-&gt;max is an unsigned int: don't overflow it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((unsigned int)<a class=\"id\" href=\"#maxpages\">maxpages</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#maxpages\">maxpages</a> = <a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#highest_bit\">highest_bit</a> = <a class=\"id\" href=\"#maxpages\">maxpages</a> - 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#maxpages\">maxpages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_swap\">bad_swap</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#swapfilepages\">swapfilepages</a> && <a class=\"id\" href=\"#maxpages\">maxpages</a> &gt; <a class=\"id\" href=\"#swapfilepages\">swapfilepages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"Swap area shorter than signature indicates\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_swap\">bad_swap</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#swap_header\">swap_header</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#nr_badpages\">nr_badpages</a> && <a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_swap\">bad_swap</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#swap_header\">swap_header</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#nr_badpages\">nr_badpages</a> &gt; <a class=\"id\" href=\"#MAX_SWAP_BADPAGES\">MAX_SWAP_BADPAGES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_swap\">bad_swap</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* OK, set up the swap map and apply the bad block list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swap_map\">swap_map</a> = <a class=\"id\" href=\"#vmalloc\">vmalloc</a>(<a class=\"id\" href=\"#maxpages\">maxpages</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#swap_map\">swap_map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_swap\">bad_swap</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#swap_map\">swap_map</a>, 0, <a class=\"id\" href=\"#maxpages\">maxpages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_good_pages\">nr_good_pages</a> = <a class=\"id\" href=\"#maxpages\">maxpages</a> - 1;<span class=\"ts\"/><span class=\"comment\">/* omit header page */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#swap_header\">swap_header</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#nr_badpages\">nr_badpages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#page_nr\">page_nr</a> = <a class=\"id\" href=\"#swap_header\">swap_header</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#badpages\">badpages</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_nr\">page_nr</a> == 0 || <a class=\"id\" href=\"#page_nr\">page_nr</a> &gt; <a class=\"id\" href=\"#swap_header\">swap_header</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#last_page\">last_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_swap\">bad_swap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_nr\">page_nr</a> &lt; <a class=\"id\" href=\"#maxpages\">maxpages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_map\">swap_map</a>[<a class=\"id\" href=\"#page_nr\">page_nr</a>] = <a class=\"id\" href=\"#SWAP_MAP_BAD\">SWAP_MAP_BAD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_good_pages\">nr_good_pages</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#swap_cgroup_swapon\">swap_cgroup_swapon</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#maxpages\">maxpages</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_swap\">bad_swap</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_good_pages\">nr_good_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_map\">swap_map</a>[0] = <a class=\"id\" href=\"#SWAP_MAP_BAD\">SWAP_MAP_BAD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#maxpages\">maxpages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#nr_good_pages\">nr_good_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_extents\">nr_extents</a> = <a class=\"id\" href=\"#setup_swap_extents\">setup_swap_extents</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#span\">span</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_extents\">nr_extents</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#nr_extents\">nr_extents</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_swap\">bad_swap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_good_pages\">nr_good_pages</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nr_good_pages\">nr_good_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Empty swap-file\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_swap\">bad_swap</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bdev\">bdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_queue_nonrot\">blk_queue_nonrot</a>(<a class=\"id\" href=\"#bdev_get_queue\">bdev_get_queue</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bdev\">bdev</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SWP_SOLIDSTATE\">SWP_SOLIDSTATE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cluster_next\">cluster_next</a> = 1 + (<a class=\"id\" href=\"#random32\">random32</a>() % <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#highest_bit\">highest_bit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#discard_swap\">discard_swap</a>(<a class=\"id\" href=\"#p\">p</a>) == 0 && (<a class=\"id\" href=\"#swap_flags\">swap_flags</a> &amp; <a class=\"id\" href=\"#SWAP_FLAG_DISCARD\">SWAP_FLAG_DISCARD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SWP_DISCARDABLE\">SWP_DISCARDABLE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#swapon_mutex\">swapon_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#swap_flags\">swap_flags</a> &amp; <a class=\"id\" href=\"#SWAP_FLAG_PREFER\">SWAP_FLAG_PREFER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#swap_flags\">swap_flags</a> &amp; <a class=\"id\" href=\"#SWAP_FLAG_PRIO_MASK\">SWAP_FLAG_PRIO_MASK</a>) >> <a class=\"id\" href=\"#SWAP_FLAG_PRIO_SHIFT\">SWAP_FLAG_PRIO_SHIFT</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> = --<a class=\"id\" href=\"#least_priority\">least_priority</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a> = <a class=\"id\" href=\"#swap_map\">swap_map</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SWP_WRITEOK\">SWP_WRITEOK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_swap_pages\">nr_swap_pages</a> += <a class=\"id\" href=\"#nr_good_pages\">nr_good_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total_swap_pages\">total_swap_pages</a> += <a class=\"id\" href=\"#nr_good_pages\">nr_good_pages</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Adding %uk swap on %s.  \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Priority:%d extents:%d across:%lluk %s%s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_good_pages\">nr_good_pages</a><<(<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>-10), <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_extents\">nr_extents</a>, (unsigned long long)<a class=\"id\" href=\"#span\">span</a><<(<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>-10),", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SWP_SOLIDSTATE\">SWP_SOLIDSTATE</a>) ? \"SS\" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SWP_DISCARDABLE\">SWP_DISCARDABLE</a>) ? \"D\" : \"\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* insert swap space into swap_list: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = -1;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#swap_list\">swap_list</a>.<a class=\"id\" href=\"#head\">head</a>; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> >= <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#prio\">prio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_list\">swap_list</a>.<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#swap_list\">swap_list</a>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#prev\">prev</a>]-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#swapon_mutex\">swapon_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<a class=\"id\" href=\"#bad_swap\">bad_swap</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev\">bdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_blocksize\">set_blocksize</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#old_block_size\">old_block_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd_release\">bd_release</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destroy_swap_extents\">destroy_swap_extents</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swap_cgroup_swapoff\">swap_cgroup_swapoff</a>(<a class=\"id\" href=\"#type\">type</a>);", 
"<a class=\"id\" href=\"#bad_swap_2\">bad_swap_2</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#swap_file\">swap_file</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#swap_map\">swap_map</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#swap_file\">swap_file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filp_close\">filp_close</a>(<a class=\"id\" href=\"#swap_file\">swap_file</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> && !<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap\">kunmap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#putname\">putname</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#did_down\">did_down</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> |= <a class=\"id\" href=\"#S_SWAPFILE\">S_SWAPFILE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#si_swapinfo\">si_swapinfo</a>(struct <a class=\"id\" href=\"#sysinfo\">sysinfo</a> *<a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_to_be_unused\">nr_to_be_unused</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#type\">type</a> = 0; <a class=\"id\" href=\"#type\">type</a> &lt; <a class=\"id\" href=\"#nr_swapfiles\">nr_swapfiles</a>; <a class=\"id\" href=\"#type\">type</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#si\">si</a> = <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#type\">type</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SWP_USED\">SWP_USED</a>) && !(<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SWP_WRITEOK\">SWP_WRITEOK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_to_be_unused\">nr_to_be_unused</a> += <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#inuse_pages\">inuse_pages</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a>-><a class=\"id\" href=\"#freeswap\">freeswap</a> = <a class=\"id\" href=\"#nr_swap_pages\">nr_swap_pages</a> + <a class=\"id\" href=\"#nr_to_be_unused\">nr_to_be_unused</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a>-><a class=\"id\" href=\"#totalswap\">totalswap</a> = <a class=\"id\" href=\"#total_swap_pages\">total_swap_pages</a> + <a class=\"id\" href=\"#nr_to_be_unused\">nr_to_be_unused</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Verify that a swap entry is valid and increment its swap map count.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns error code in following case.</span>", 
"<span class=\"comment\"> * - success -&gt; 0</span>", 
"<span class=\"comment\"> * - swp_entry is invalid -&gt; EINVAL</span>", 
"<span class=\"comment\"> * - swp_entry is migration entry -&gt; EINVAL</span>", 
"<span class=\"comment\"> * - swap-cache reference is requested but there is already one. -&gt; EEXIST</span>", 
"<span class=\"comment\"> * - swap-cache reference is requested but the entry is not used. -&gt; ENOENT</span>", 
"<span class=\"comment\"> * - swap-mapped reference requested but needs continued swap count. -&gt; ENOMEM</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__swap_duplicate\">__swap_duplicate</a>(<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>, unsigned char <a class=\"id\" href=\"#usage\">usage</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#has_cache\">has_cache</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#non_swap_entry\">non_swap_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#swp_type\">swp_type</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> >= <a class=\"id\" href=\"#nr_swapfiles\">nr_swapfiles</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_file\">bad_file</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#type\">type</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#swp_offset\">swp_offset</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#offset\">offset</a> >= <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#max\">max</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_out\">unlock_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a>[<a class=\"id\" href=\"#offset\">offset</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#has_cache\">has_cache</a> = <a class=\"id\" href=\"#count\">count</a> &amp; <a class=\"id\" href=\"#SWAP_HAS_CACHE\">SWAP_HAS_CACHE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> &= ~<a class=\"id\" href=\"#SWAP_HAS_CACHE\">SWAP_HAS_CACHE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#usage\">usage</a> == <a class=\"id\" href=\"#SWAP_HAS_CACHE\">SWAP_HAS_CACHE</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* set SWAP_HAS_CACHE if there is no cache and entry is used */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#has_cache\">has_cache</a> && <a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#has_cache\">has_cache</a> = <a class=\"id\" href=\"#SWAP_HAS_CACHE\">SWAP_HAS_CACHE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#has_cache\">has_cache</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* someone else added cache */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no users remaining */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#count\">count</a> || <a class=\"id\" href=\"#has_cache\">has_cache</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#count\">count</a> &amp; ~<a class=\"id\" href=\"#COUNT_CONTINUED\">COUNT_CONTINUED</a>) &lt; <a class=\"id\" href=\"#SWAP_MAP_MAX\">SWAP_MAP_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#usage\">usage</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if ((<a class=\"id\" href=\"#count\">count</a> &amp; ~<a class=\"id\" href=\"#COUNT_CONTINUED\">COUNT_CONTINUED</a>) &gt; <a class=\"id\" href=\"#SWAP_MAP_MAX\">SWAP_MAP_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#swap_count_continued\">swap_count_continued</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#count\">count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#COUNT_CONTINUED\">COUNT_CONTINUED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* unused swap entry */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a>[<a class=\"id\" href=\"#offset\">offset</a>] = <a class=\"id\" href=\"#count\">count</a> | <a class=\"id\" href=\"#has_cache\">has_cache</a>;", 
"", 
"<a class=\"id\" href=\"#unlock_out\">unlock_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<a class=\"id\" href=\"#bad_file\">bad_file</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"swap_dup: %s%08lx\\n\", <a class=\"id\" href=\"#Bad_file\">Bad_file</a>, <a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Help swapoff by noting that swap entry belongs to shmem/tmpfs</span>", 
"<span class=\"comment\"> * (in which case its reference count is never incremented).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#swap_shmem_alloc\">swap_shmem_alloc</a>(<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__swap_duplicate\">__swap_duplicate</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#SWAP_MAP_SHMEM\">SWAP_MAP_SHMEM</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Increase reference count of swap entry by 1.</span>", 
"<span class=\"comment\"> * Returns 0 for success, or -ENOMEM if a swap_count_continuation is required</span>", 
"<span class=\"comment\"> * but could not be atomically allocated.  Returns 0, just as if it succeeded,</span>", 
"<span class=\"comment\"> * if __swap_duplicate() fails for another reason (-EINVAL or -ENOENT), which</span>", 
"<span class=\"comment\"> * might occur if a page table entry has got corrupted.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#swap_duplicate\">swap_duplicate</a>(<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#err\">err</a> && <a class=\"id\" href=\"#__swap_duplicate\">__swap_duplicate</a>(<a class=\"id\" href=\"#entry\">entry</a>, 1) == -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#add_swap_count_continuation\">add_swap_count_continuation</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * @entry: swap entry for which we allocate swap cache.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called when allocating swap cache for existing swap entry,</span>", 
"<span class=\"comment\"> * This can return error codes. Returns 0 at success.</span>", 
"<span class=\"comment\"> * -EBUSY means there is a swap cache.</span>", 
"<span class=\"comment\"> * Note: return code is different from swap_duplicate().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#swapcache_prepare\">swapcache_prepare</a>(<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__swap_duplicate\">__swap_duplicate</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#SWAP_HAS_CACHE\">SWAP_HAS_CACHE</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * swap_lock prevents swap_map being freed. Don't grab an extra</span>", 
"<span class=\"comment\"> * reference on the swaphandle, it doesn't matter if it becomes unused.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#valid_swaphandles\">valid_swaphandles</a>(<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>, unsigned long *<a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#si\">si</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#our_page_cluster\">our_page_cluster</a> = <a class=\"id\" href=\"#page_cluster\">page_cluster</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#toff\">toff</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#our_page_cluster\">our_page_cluster</a>)<span class=\"ts\"/><span class=\"comment\">/* no readahead */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a> = <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#swp_type\">swp_type</a>(<a class=\"id\" href=\"#entry\">entry</a>)];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#target\">target</a> = <a class=\"id\" href=\"#swp_offset\">swp_offset</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = (<a class=\"id\" href=\"#target\">target</a> >> <a class=\"id\" href=\"#our_page_cluster\">our_page_cluster</a>) << <a class=\"id\" href=\"#our_page_cluster\">our_page_cluster</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#base\">base</a> + (1 << <a class=\"id\" href=\"#our_page_cluster\">our_page_cluster</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#base\">base</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* first page is swap header */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#max\">max</a>)<span class=\"ts\"/><span class=\"comment\">/* don't go beyond end of map */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#max\">max</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Count contiguous allocated slots above our target */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#toff\">toff</a> = <a class=\"id\" href=\"#target\">target</a>; ++<a class=\"id\" href=\"#toff\">toff</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Don't read in free or bad pages */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a>[<a class=\"id\" href=\"#toff\">toff</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#swap_count\">swap_count</a>(<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a>[<a class=\"id\" href=\"#toff\">toff</a>]) == <a class=\"id\" href=\"#SWAP_MAP_BAD\">SWAP_MAP_BAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Count contiguous allocated slots below our target */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#toff\">toff</a> = <a class=\"id\" href=\"#target\">target</a>; --<a class=\"id\" href=\"#toff\">toff</a> >= <a class=\"id\" href=\"#base\">base</a>; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Don't read in free or bad pages */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a>[<a class=\"id\" href=\"#toff\">toff</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#swap_count\">swap_count</a>(<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a>[<a class=\"id\" href=\"#toff\">toff</a>]) == <a class=\"id\" href=\"#SWAP_MAP_BAD\">SWAP_MAP_BAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Indicate starting offset, and return number of pages to get:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if only 1, say 0, since there's then no readahead to be done.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#offset\">offset</a> = ++<a class=\"id\" href=\"#toff\">toff</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_pages\">nr_pages</a>? ++<a class=\"id\" href=\"#nr_pages\">nr_pages</a>: 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * add_swap_count_continuation - called when a swap count is duplicated</span>", 
"<span class=\"comment\"> * beyond SWAP_MAP_MAX, it allocates a new page and links that to the entry's</span>", 
"<span class=\"comment\"> * page of the original vmalloc'ed swap_map, to hold the continuation count</span>", 
"<span class=\"comment\"> * (for that entry and for its neighbouring PAGE_SIZE swap entries).  Called</span>", 
"<span class=\"comment\"> * again when count is duplicated beyond SWAP_MAP_MAX * SWAP_CONT_MAX, etc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These continuation pages are seldom referenced: the common paths all work</span>", 
"<span class=\"comment\"> * on the original swap_map, only referring to a continuation page when the</span>", 
"<span class=\"comment\"> * low \"digit\" of a count is incremented or decremented through SWAP_MAP_MAX.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * add_swap_count_continuation(, GFP_ATOMIC) can be called while holding</span>", 
"<span class=\"comment\"> * page table locks; if it fails, add_swap_count_continuation(, GFP_KERNEL)</span>", 
"<span class=\"comment\"> * can be called after dropping locks.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#add_swap_count_continuation\">add_swap_count_continuation</a>(<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#si\">si</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#list_page\">list_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When debugging, it's easier to use __GFP_ZERO here; but it's better</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for latency not to zero a page while GFP_ATOMIC and holding locks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_page\">alloc_page</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> | <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a> = <a class=\"id\" href=\"#swap_info_get\">swap_info_get</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#si\">si</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * An acceptable race has occurred since the failing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * __swap_duplicate(): the swap entry has been freed,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * perhaps even the whole swap_map cleared for swapoff.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#outer\">outer</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#swp_offset\">swp_offset</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a>[<a class=\"id\" href=\"#offset\">offset</a>] &amp; ~<a class=\"id\" href=\"#SWAP_HAS_CACHE\">SWAP_HAS_CACHE</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#count\">count</a> &amp; ~<a class=\"id\" href=\"#COUNT_CONTINUED\">COUNT_CONTINUED</a>) != <a class=\"id\" href=\"#SWAP_MAP_MAX\">SWAP_MAP_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The higher the swap count, the more likely it is that tasks</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will race to add swap count continuation: we need to avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * over-provisioning.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We are fortunate that although vmalloc_to_page uses pte_offset_map,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no architecture is using highmem pages for kernel pagetables: so it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will not corrupt the GFP_ATOMIC caller's atomic pagetable kmaps.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#vmalloc_to_page\">vmalloc_to_page</a>(<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a> + <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> &= ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Page allocation does not initialize the page's lru field,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but it does always reset its private field.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#head\">head</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#count\">count</a> &amp; <a class=\"id\" href=\"#COUNT_CONTINUED\">COUNT_CONTINUED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#SWP_CONTINUED\">SWP_CONTINUED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SWP_CONTINUED\">SWP_CONTINUED</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#list_page\">list_page</a>, &amp;<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#lru\">lru</a>, <a class=\"id\" href=\"#lru\">lru</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#map\">map</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the previous map said no continuation, but we've found</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a continuation page, free our allocation and use this one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#count\">count</a> &amp; <a class=\"id\" href=\"#COUNT_CONTINUED\">COUNT_CONTINUED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#list_page\">list_page</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>) + <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = *<a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this continuation count now has some space in it,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * free our allocation and use this one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#count\">count</a> &amp; ~<a class=\"id\" href=\"#COUNT_CONTINUED\">COUNT_CONTINUED</a>) != <a class=\"id\" href=\"#SWAP_CONT_MAX\">SWAP_CONT_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* now it's attached, don't free it */</span>", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<a class=\"id\" href=\"#outer\">outer</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * swap_count_continued - when the original swap_map count is incremented</span>", 
"<span class=\"comment\"> * from SWAP_MAP_MAX, check if there is already a continuation page to carry</span>", 
"<span class=\"comment\"> * into, carry if so, or else fail until a new continuation page is allocated;</span>", 
"<span class=\"comment\"> * when the original swap_map count is decremented from 0 with continuation,</span>", 
"<span class=\"comment\"> * borrow from the continuation and report whether it still holds more.</span>", 
"<span class=\"comment\"> * Called while __swap_duplicate() or swap_entry_free() holds swap_lock.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#swap_count_continued\">swap_count_continued</a>(struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#si\">si</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, unsigned char <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#map\">map</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#vmalloc_to_page\">vmalloc_to_page</a>(<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a> + <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#head\">head</a>) != <a class=\"id\" href=\"#SWP_CONTINUED\">SWP_CONTINUED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#count\">count</a> &amp; <a class=\"id\" href=\"#COUNT_CONTINUED\">COUNT_CONTINUED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* need to add count continuation */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> &= ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#lru\">lru</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>) + <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> == <a class=\"id\" href=\"#SWAP_MAP_MAX\">SWAP_MAP_MAX</a>)<span class=\"ts\"/><span class=\"comment\">/* initial increment from swap_map */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#init_map\">init_map</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* jump over SWAP_CONT_MAX checks */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> == (<a class=\"id\" href=\"#SWAP_MAP_MAX\">SWAP_MAP_MAX</a> | <a class=\"id\" href=\"#COUNT_CONTINUED\">COUNT_CONTINUED</a>)) { <span class=\"comment\">/* incrementing */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Think of how you add 1 to 999</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (*<a class=\"id\" href=\"#map\">map</a> == (<a class=\"id\" href=\"#SWAP_CONT_MAX\">SWAP_CONT_MAX</a> | <a class=\"id\" href=\"#COUNT_CONTINUED\">COUNT_CONTINUED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>) + <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#map\">map</a> == <a class=\"id\" href=\"#SWAP_CONT_MAX\">SWAP_CONT_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;<span class=\"ts\"/><span class=\"comment\">/* add count continuation */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>) + <a class=\"id\" href=\"#offset\">offset</a>;", 
"<a class=\"id\" href=\"#init_map\">init_map</a>:<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#map\">map</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we didn't zero the page */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#map\">map</a> += 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>.<a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#page\">page</a> != <a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>) + <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#COUNT_CONTINUED\">COUNT_CONTINUED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>.<a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* incremented */</span>", 
"", 
"<span class=\"ts\"/>} else {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* decrementing */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Think of how you subtract 1 from 1000</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#count\">count</a> != <a class=\"id\" href=\"#COUNT_CONTINUED\">COUNT_CONTINUED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while (*<a class=\"id\" href=\"#map\">map</a> == <a class=\"id\" href=\"#COUNT_CONTINUED\">COUNT_CONTINUED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>) + <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(*<a class=\"id\" href=\"#map\">map</a> == 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#map\">map</a> -= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#map\">map</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>.<a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#page\">page</a> != <a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>) + <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#SWAP_CONT_MAX\">SWAP_CONT_MAX</a> | <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#COUNT_CONTINUED\">COUNT_CONTINUED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>.<a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a> == <a class=\"id\" href=\"#COUNT_CONTINUED\">COUNT_CONTINUED</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * free_swap_count_continuations - swapoff free all the continuation pages</span>", 
"<span class=\"comment\"> * appended to the swap_map, after swap_map is quiesced, before vfree'ing it.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#free_swap_count_continuations\">free_swap_count_continuations</a>(struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#si\">si</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#offset\">offset</a> = 0; <a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#max\">max</a>; <a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#vmalloc_to_page\">vmalloc_to_page</a>(<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a> + <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#head\">head</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#this\">this</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_safe\">list_for_each_safe</a>(<a class=\"id\" href=\"#this\">this</a>, <a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#lru\">lru</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#this\">this</a>, struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(<a class=\"id\" href=\"#this\">this</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
];
xr_frag_insert('l/55/36027519feb74eb4832e50a030db2f4ade6528.xr', __xr_tmp);
