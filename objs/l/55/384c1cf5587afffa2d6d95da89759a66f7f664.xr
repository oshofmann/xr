var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kernel/time/timer_stats.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Collect timer usage statistics.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright(C) 2006, Red Hat, Inc., Ingo Molnar</span>", 
"<span class=\"comment\"> * Copyright(C) 2006 Timesys Corp., Thomas Gleixner &lt;tglx@timesys.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * timer_stats is based on timer_top, a similar functionality which was part of</span>", 
"<span class=\"comment\"> * Con Kolivas dyntick patch set. It was developed by Daniel Petrini at the</span>", 
"<span class=\"comment\"> * Instituto Nokia de Tecnologia - INdT - Manaus. timer_top's design was based</span>", 
"<span class=\"comment\"> * on dynamic allocation of the statistics entries and linear search based</span>", 
"<span class=\"comment\"> * lookup combined with a global lock, rather than the static array, hash</span>", 
"<span class=\"comment\"> * and per-CPU locking which is used by timer_stats. It was written for the</span>", 
"<span class=\"comment\"> * pre hrtimer kernel code and therefore did not take hrtimers into account.</span>", 
"<span class=\"comment\"> * Nevertheless it provided the base for the timer_stats implementation and</span>", 
"<span class=\"comment\"> * was a helpful source of inspiration. Kudos to Daniel and the Nokia folks</span>", 
"<span class=\"comment\"> * for this effort.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * timer_top.c is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Copyright (C) 2005 Instituto Nokia de Tecnologia - INdT - Manaus</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Written by Daniel Petrini &lt;d.pensator@gmail.com&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>timer_top.c was released under the GNU General Public License version 2</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We export the addresses and counting of timer functions being called,</span>", 
"<span class=\"comment\"> * the pid and cmdline from the owner process if applicable.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Start/stop data collection:</span>", 
"<span class=\"comment\"> * # echo [1|0] &gt;/proc/timer_stats</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Display the information collected so far:</span>", 
"<span class=\"comment\"> * # cat /proc/timer_stats</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License version 2 as</span>", 
"<span class=\"comment\"> * published by the Free Software Foundation.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is our basic unit of interest: a timer expiry event identified</span>", 
"<span class=\"comment\"> * by the timer, its start/expire functions and the PID of the task that</span>", 
"<span class=\"comment\"> * started the timer. We count the number of times an event happens:</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#entry\">entry</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Hash list:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#entry\">entry</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Hash keys:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#timer\">timer</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#start_func\">start_func</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#expire_func\">expire_func</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Number of timeout events:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer_flag\">timer_flag</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We save the command-line string to preserve</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this information past task exit:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comm\">comm</a>[<a class=\"id\" href=\"#TASK_COMM_LEN\">TASK_COMM_LEN</a> + 1];", 
"", 
"} <a class=\"id\" href=\"#____cacheline_aligned_in_smp\">____cacheline_aligned_in_smp</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Spinlock protecting the tables - not taken during lookup:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#table_lock\">table_lock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Per-CPU lookup locks for fast hash lookup:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(<a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a>, <a class=\"id\" href=\"#tstats_lookup_lock\">tstats_lookup_lock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Mutex to serialize state changes with show-stats activities:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#show_mutex\">show_mutex</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Collection status, active/inactive:</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> <a class=\"id\" href=\"#timer_stats_active\">timer_stats_active</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Beginning/end timestamps of measurement:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#time_start\">time_start</a>, <a class=\"id\" href=\"#time_stop\">time_stop</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * tstat entry structs only get allocated while collection is</span>", 
"<span class=\"comment\"> * active and never freed during that time - this simplifies</span>", 
"<span class=\"comment\"> * things quite a bit.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * They get freed when a new collection period is started.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_ENTRIES_BITS\">MAX_ENTRIES_BITS</a><span class=\"ts\"/>10", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_ENTRIES\">MAX_ENTRIES</a><span class=\"ts\"/><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#MAX_ENTRIES_BITS\">MAX_ENTRIES_BITS</a>)", 
"", 
"static unsigned long <a class=\"id\" href=\"#nr_entries\">nr_entries</a>;", 
"static struct <a class=\"id\" href=\"#entry\">entry</a> <a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#MAX_ENTRIES\">MAX_ENTRIES</a>];", 
"", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#overflow_count\">overflow_count</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The entries are in a hash-table, for fast lookup:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TSTAT_HASH_BITS\">TSTAT_HASH_BITS</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#MAX_ENTRIES_BITS\">MAX_ENTRIES_BITS</a> - 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TSTAT_HASH_SIZE\">TSTAT_HASH_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#TSTAT_HASH_BITS\">TSTAT_HASH_BITS</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TSTAT_HASH_MASK\">TSTAT_HASH_MASK</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#TSTAT_HASH_SIZE\">TSTAT_HASH_SIZE</a> - 1)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__tstat_hashfn\">__tstat_hashfn</a>(<a class=\"id\" href=\"#entry\">entry</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(((unsigned long)(<a class=\"id\" href=\"#entry\">entry</a>)-><a class=\"id\" href=\"#timer\">timer</a>       ^<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>  (unsigned long)(<a class=\"id\" href=\"#entry\">entry</a>)-><a class=\"id\" href=\"#start_func\">start_func</a>  ^<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>  (unsigned long)(<a class=\"id\" href=\"#entry\">entry</a>)-><a class=\"id\" href=\"#expire_func\">expire_func</a> ^<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>  (unsigned long)(<a class=\"id\" href=\"#entry\">entry</a>)-><a class=\"id\" href=\"#pid\">pid</a><span class=\"ts\"/><span class=\"ts\"/>) &amp; <a class=\"id\" href=\"#TSTAT_HASH_MASK\">TSTAT_HASH_MASK</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#tstat_hashentry\">tstat_hashentry</a>(<a class=\"id\" href=\"#entry\">entry</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#tstat_hash_table\">tstat_hash_table</a> + <a class=\"id\" href=\"#__tstat_hashfn\">__tstat_hashfn</a>(<a class=\"id\" href=\"#entry\">entry</a>))", 
"", 
"static struct <a class=\"id\" href=\"#entry\">entry</a> *<a class=\"id\" href=\"#tstat_hash_table\">tstat_hash_table</a>[<a class=\"id\" href=\"#TSTAT_HASH_SIZE\">TSTAT_HASH_SIZE</a>] <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"static void <a class=\"id\" href=\"#reset_entries\">reset_entries</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_entries\">nr_entries</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#entries\">entries</a>, 0, sizeof(<a class=\"id\" href=\"#entries\">entries</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#tstat_hash_table\">tstat_hash_table</a>, 0, sizeof(<a class=\"id\" href=\"#tstat_hash_table\">tstat_hash_table</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#overflow_count\">overflow_count</a>, 0);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#entry\">entry</a> *<a class=\"id\" href=\"#alloc_entry\">alloc_entry</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_entries\">nr_entries</a> >= <a class=\"id\" href=\"#MAX_ENTRIES\">MAX_ENTRIES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#entries\">entries</a> + <a class=\"id\" href=\"#nr_entries\">nr_entries</a>++;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#match_entries\">match_entries</a>(struct <a class=\"id\" href=\"#entry\">entry</a> *<a class=\"id\" href=\"#entry1\">entry1</a>, struct <a class=\"id\" href=\"#entry\">entry</a> *<a class=\"id\" href=\"#entry2\">entry2</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#entry1\">entry1</a>-><a class=\"id\" href=\"#timer\">timer</a>       == <a class=\"id\" href=\"#entry2\">entry2</a>-><a class=\"id\" href=\"#timer\">timer</a><span class=\"ts\"/>  &&", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#entry1\">entry1</a>-><a class=\"id\" href=\"#start_func\">start_func</a>  == <a class=\"id\" href=\"#entry2\">entry2</a>-><a class=\"id\" href=\"#start_func\">start_func</a>  &&", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#entry1\">entry1</a>-><a class=\"id\" href=\"#expire_func\">expire_func</a> == <a class=\"id\" href=\"#entry2\">entry2</a>-><a class=\"id\" href=\"#expire_func\">expire_func</a> &&", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#entry1\">entry1</a>-><a class=\"id\" href=\"#pid\">pid</a><span class=\"ts\"/>   == <a class=\"id\" href=\"#entry2\">entry2</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Look up whether an entry matching this item is present</span>", 
"<span class=\"comment\"> * in the hash already. Must be called with irqs off and the</span>", 
"<span class=\"comment\"> * lookup lock held:</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#entry\">entry</a> *<a class=\"id\" href=\"#tstat_lookup\">tstat_lookup</a>(struct <a class=\"id\" href=\"#entry\">entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, char *<a class=\"id\" href=\"#comm\">comm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#entry\">entry</a> **<a class=\"id\" href=\"#head\">head</a>, *<a class=\"id\" href=\"#curr\">curr</a>, *<a class=\"id\" href=\"#prev\">prev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#tstat_hashentry\">tstat_hashentry</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a> = *<a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The fastpath is when the entry is already hashed,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we do this with the lookup lock held, but with the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * table lock not held:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#curr\">curr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#match_entries\">match_entries</a>(<a class=\"id\" href=\"#curr\">curr</a>, <a class=\"id\" href=\"#entry\">entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#curr\">curr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Slowpath: allocate, set up and link a new hash entry:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a> = *<a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#table_lock\">table_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure we have not raced with another CPU:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#curr\">curr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#match_entries\">match_entries</a>(<a class=\"id\" href=\"#curr\">curr</a>, <a class=\"id\" href=\"#entry\">entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#curr\">curr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#alloc_entry\">alloc_entry</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#curr\">curr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#curr\">curr</a> = *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#TASK_COMM_LEN\">TASK_COMM_LEN</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); <span class=\"comment\">/* Ensure that curr is initialized before insert */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#curr\">curr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#curr\">curr</a>;", 
"<span class=\"ts\"/>}", 
" <a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#table_lock\">table_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#curr\">curr</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * timer_stats_update_stats - Update the statistics for a timer.</span>", 
"<span class=\"comment\"> * @timer:<span class=\"ts\"/>pointer to either a timer_list or a hrtimer</span>", 
"<span class=\"comment\"> * @pid:<span class=\"ts\"/>the pid of the task which set up the timer</span>", 
"<span class=\"comment\"> * @startf:<span class=\"ts\"/>pointer to the function which did the timer setup</span>", 
"<span class=\"comment\"> * @timerf:<span class=\"ts\"/>pointer to the timer callback function of the timer</span>", 
"<span class=\"comment\"> * @comm:<span class=\"ts\"/>name of the process which set up the timer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When the timer is already registered, then the event counter is</span>", 
"<span class=\"comment\"> * incremented. Otherwise the timer is registered in a free slot.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#timer_stats_update_stats\">timer_stats_update_stats</a>(void *<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>, void *<a class=\"id\" href=\"#startf\">startf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#timerf\">timerf</a>, char *<a class=\"id\" href=\"#comm\">comm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#timer_flag\">timer_flag</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It doesnt matter which lock we take:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#entry\">entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#input\">input</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#timer_stats_active\">timer_stats_active</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tstats_lookup_lock\">tstats_lookup_lock</a>, <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input\">input</a>.<a class=\"id\" href=\"#timer\">timer</a> = <a class=\"id\" href=\"#timer\">timer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input\">input</a>.<a class=\"id\" href=\"#start_func\">start_func</a> = <a class=\"id\" href=\"#startf\">startf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input\">input</a>.<a class=\"id\" href=\"#expire_func\">expire_func</a> = <a class=\"id\" href=\"#timerf\">timerf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input\">input</a>.<a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input\">input</a>.<a class=\"id\" href=\"#timer_flag\">timer_flag</a> = <a class=\"id\" href=\"#timer_flag\">timer_flag</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#timer_stats_active\">timer_stats_active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#tstat_lookup\">tstat_lookup</a>(&amp;<a class=\"id\" href=\"#input\">input</a>, <a class=\"id\" href=\"#comm\">comm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#entry\">entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#overflow_count\">overflow_count</a>);", 
"", 
" <a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#print_name_offset\">print_name_offset</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#symname\">symname</a>[<a class=\"id\" href=\"#KSYM_NAME_LEN\">KSYM_NAME_LEN</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lookup_symbol_name\">lookup_symbol_name</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#symname\">symname</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"<%p>\", (void *)<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%s\", <a class=\"id\" href=\"#symname\">symname</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#tstats_show\">tstats_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#period\">period</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#entry\">entry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ms\">ms</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#events\">events</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#show_mutex\">show_mutex</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If still active then calculate up to now:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timer_stats_active\">timer_stats_active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#time_stop\">time_stop</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time\">time</a> = <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#time_stop\">time_stop</a>, <a class=\"id\" href=\"#time_start\">time_start</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#ktime_to_timespec\">ktime_to_timespec</a>(<a class=\"id\" href=\"#time\">time</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a> = <a class=\"id\" href=\"#period\">period</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> / 1000000;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \"Timer Stats Version: v0.2\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"Sample period: %ld.%03ld s\\n\", <a class=\"id\" href=\"#period\">period</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>, <a class=\"id\" href=\"#ms\">ms</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#overflow_count\">overflow_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"Overflow: %d entries\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#overflow_count\">overflow_count</a>));", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_entries\">nr_entries</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#entries\">entries</a> + <a class=\"id\" href=\"#i\">i</a>;", 
" <span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#timer_flag\">timer_flag</a> &amp; <a class=\"id\" href=\"#TIMER_STATS_FLAG_DEFERRABLE\">TIMER_STATS_FLAG_DEFERRABLE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%4luD, %5d %-16s \",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#comm\">comm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" %4lu, %5d %-16s \",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#comm\">comm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_name_offset\">print_name_offset</a>(<a class=\"id\" href=\"#m\">m</a>, (unsigned long)<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#start_func\">start_func</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \" (\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_name_offset\">print_name_offset</a>(<a class=\"id\" href=\"#m\">m</a>, (unsigned long)<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#expire_func\">expire_func</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \")\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#events\">events</a> += <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a> += <a class=\"id\" href=\"#period\">period</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> * 1000;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ms\">ms</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a> = 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#events\">events</a> && <a class=\"id\" href=\"#period\">period</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%ld total events, %ld.%03ld events/sec\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#events\">events</a>, <a class=\"id\" href=\"#events\">events</a> * 1000 / <a class=\"id\" href=\"#ms\">ms</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#events\">events</a> * 1000000 / <a class=\"id\" href=\"#ms\">ms</a>) % 1000);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%ld total events\\n\", <a class=\"id\" href=\"#events\">events</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#show_mutex\">show_mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * After a state change, make sure all concurrent lookup/update</span>", 
"<span class=\"comment\"> * activities have stopped:</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sync_access\">sync_access</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tstats_lookup_lock\">tstats_lookup_lock</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nothing */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#tstats_write\">tstats_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#offs\">offs</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#ctl\">ctl</a>[2];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> != 2 || *<a class=\"id\" href=\"#offs\">offs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#ctl\">ctl</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#show_mutex\">show_mutex</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#ctl\">ctl</a>[0]) {", 
"<span class=\"ts\"/>case '0':", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timer_stats_active\">timer_stats_active</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer_stats_active\">timer_stats_active</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#time_stop\">time_stop</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_access\">sync_access</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case '1':", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#timer_stats_active\">timer_stats_active</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reset_entries\">reset_entries</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#time_start\">time_start</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer_stats_active\">timer_stats_active</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#show_mutex\">show_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#tstats_open\">tstats_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#single_open\">single_open</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#tstats_show\">tstats_show</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#tstats_fops\">tstats_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#tstats_open\">tstats_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#tstats_write\">tstats_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#single_release\">single_release</a>,", 
"};", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_timer_stats\">init_timer_stats</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_init\">raw_spin_lock_init</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tstats_lookup_lock\">tstats_lookup_lock</a>, <a class=\"id\" href=\"#cpu\">cpu</a>));", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_tstats_procfs\">init_tstats_procfs</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#pe\">pe</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pe\">pe</a> = <a class=\"id\" href=\"#proc_create\">proc_create</a>(\"timer_stats\", 0644, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#tstats_fops\">tstats_fops</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pe\">pe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#__initcall\">__initcall</a>(<a class=\"id\" href=\"#init_tstats_procfs\">init_tstats_procfs</a>);", 
];
xr_frag_insert('l/55/384c1cf5587afffa2d6d95da89759a66f7f664.xr', __xr_tmp);
