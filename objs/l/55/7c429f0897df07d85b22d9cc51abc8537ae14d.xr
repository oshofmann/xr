var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list_sort\">list_sort</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_LIST_LENGTH_BITS\">MAX_LIST_LENGTH_BITS</a> 20", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns a list organized in an intermediate format suited</span>", 
"<span class=\"comment\"> * to chaining of merge() calls: null-terminated, no reserved or</span>", 
"<span class=\"comment\"> * sentinel head node, \"prev\" links not maintained.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#merge\">merge</a>(void *<a class=\"id\" href=\"#priv\">priv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#cmp\">cmp</a>)(void *<a class=\"id\" href=\"#priv\">priv</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#a\">a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#b\">b</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#head\">head</a>, *<a class=\"id\" href=\"#tail\">tail</a> = &amp;<a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#a\">a</a> && <a class=\"id\" href=\"#b\">b</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if equal, take 'a' -- important for sort stability */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#cmp\">cmp</a>)(<a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>) <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#a\">a</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a> = <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#b\">b</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#a\">a</a>?:<a class=\"id\" href=\"#b\">b</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#head\">head</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Combine final list merge with restoration of standard doubly-linked</span>", 
"<span class=\"comment\"> * list structure.  This approach duplicates code from merge(), but</span>", 
"<span class=\"comment\"> * runs faster than the tidier alternatives of either a separate final</span>", 
"<span class=\"comment\"> * prev-link restoration pass, or maintaining the prev links</span>", 
"<span class=\"comment\"> * throughout.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#merge_and_restore_back_links\">merge_and_restore_back_links</a>(void *<a class=\"id\" href=\"#priv\">priv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#cmp\">cmp</a>)(void *<a class=\"id\" href=\"#priv\">priv</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#a\">a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#b\">b</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#a\">a</a> && <a class=\"id\" href=\"#b\">b</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if equal, take 'a' -- important for sort stability */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#cmp\">cmp</a>)(<a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>) <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#a\">a</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a> = <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#b\">b</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#a\">a</a> ? : <a class=\"id\" href=\"#b\">b</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In worst cases this loop may run many iterations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Continue callbacks to the client even though no</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * element comparison is needed, so the client's cmp()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * routine can invoke cond_resched() periodically.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#cmp\">cmp</a>)(<a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#tail\">tail</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_sort - sort a list</span>", 
"<span class=\"comment\"> * @priv: private data, opaque to list_sort(), passed to @cmp</span>", 
"<span class=\"comment\"> * @head: the list to sort</span>", 
"<span class=\"comment\"> * @cmp: the elements comparison function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function implements \"merge sort\", which has O(nlog(n))</span>", 
"<span class=\"comment\"> * complexity.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The comparison function @cmp must return a negative value if @a</span>", 
"<span class=\"comment\"> * should sort before @b, and a positive value if @a should sort after</span>", 
"<span class=\"comment\"> * @b. If @a and @b are equivalent, and their original relative</span>", 
"<span class=\"comment\"> * ordering is to be preserved, @cmp must return 0.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#list_sort\">list_sort</a>(void *<a class=\"id\" href=\"#priv\">priv</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#cmp\">cmp</a>)(void *<a class=\"id\" href=\"#priv\">priv</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#a\">a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#b\">b</a>))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#part\">part</a>[<a class=\"id\" href=\"#MAX_LIST_LENGTH_BITS\">MAX_LIST_LENGTH_BITS</a>+1]; <span class=\"comment\">/* sorted partial lists</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>-- last slot is a sentinel */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lev\">lev</a>;  <span class=\"comment\">/* index into part[] */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_lev\">max_lev</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#head\">head</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#part\">part</a>, 0, sizeof(<a class=\"id\" href=\"#part\">part</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#lev\">lev</a> = 0; <a class=\"id\" href=\"#part\">part</a>[<a class=\"id\" href=\"#lev\">lev</a>]; <a class=\"id\" href=\"#lev\">lev</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#merge\">merge</a>(<a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#cmp\">cmp</a>, <a class=\"id\" href=\"#part\">part</a>[<a class=\"id\" href=\"#lev\">lev</a>], <a class=\"id\" href=\"#cur\">cur</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a>[<a class=\"id\" href=\"#lev\">lev</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lev\">lev</a> &gt; <a class=\"id\" href=\"#max_lev\">max_lev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#lev\">lev</a> >= <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#part\">part</a>)-1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk_once\">printk_once</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"list passed to\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" list_sort() too long for\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" efficiency\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lev\">lev</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_lev\">max_lev</a> = <a class=\"id\" href=\"#lev\">lev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a>[<a class=\"id\" href=\"#lev\">lev</a>] = <a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#lev\">lev</a> = 0; <a class=\"id\" href=\"#lev\">lev</a> &lt; <a class=\"id\" href=\"#max_lev\">max_lev</a>; <a class=\"id\" href=\"#lev\">lev</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#part\">part</a>[<a class=\"id\" href=\"#lev\">lev</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#merge\">merge</a>(<a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#cmp\">cmp</a>, <a class=\"id\" href=\"#part\">part</a>[<a class=\"id\" href=\"#lev\">lev</a>], <a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#merge_and_restore_back_links\">merge_and_restore_back_links</a>(<a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#cmp\">cmp</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#part\">part</a>[<a class=\"id\" href=\"#max_lev\">max_lev</a>], <a class=\"id\" href=\"#list\">list</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#list_sort\">list_sort</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#DEBUG_LIST_SORT\">DEBUG_LIST_SORT</a>", 
"struct <a class=\"id\" href=\"#debug_el\">debug_el</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#l_h\">l_h</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#serial\">serial</a>;", 
"};", 
"", 
"static int <a class=\"id\" href=\"#cmp\">cmp</a>(void *<a class=\"id\" href=\"#priv\">priv</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#debug_el\">debug_el</a>, <a class=\"id\" href=\"#l_h\">l_h</a>)-><a class=\"id\" href=\"#value\">value</a>", 
"<span class=\"ts\"/>     - <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#b\">b</a>, struct <a class=\"id\" href=\"#debug_el\">debug_el</a>, <a class=\"id\" href=\"#l_h\">l_h</a>)-><a class=\"id\" href=\"#value\">value</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The pattern of set bits in the list length determines which cases</span>", 
"<span class=\"comment\"> * are hit in list_sort().</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LIST_SORT_TEST_LENGTH\">LIST_SORT_TEST_LENGTH</a> (512+128+2) <span class=\"comment\">/* not including head */</span>", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#list_sort_test\">list_sort_test</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#r\">r</a> = 1, <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#head\">head</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#cur\">cur</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"testing list_sort()\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#LIST_SORT_TEST_LENGTH\">LIST_SORT_TEST_LENGTH</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#debug_el\">debug_el</a> *<a class=\"id\" href=\"#el\">el</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#el\">el</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#el\">el</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/> <span class=\"comment\">/* force some equivalencies */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#el\">el</a>-><a class=\"id\" href=\"#value\">value</a> = (<a class=\"id\" href=\"#r\">r</a> = (<a class=\"id\" href=\"#r\">r</a> * 725861) % 6599) % (<a class=\"id\" href=\"#LIST_SORT_TEST_LENGTH\">LIST_SORT_TEST_LENGTH</a>/3);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#el\">el</a>-><a class=\"id\" href=\"#serial\">serial</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#el\">el</a>-><a class=\"id\" href=\"#l_h\">l_h</a>.<a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#next\">next</a> = &amp;<a class=\"id\" href=\"#el\">el</a>-><a class=\"id\" href=\"#l_h\">l_h</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#cur\">cur</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_sort\">list_sort</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#cmp\">cmp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 1;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>; <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#next\">next</a> != <a class=\"id\" href=\"#head\">head</a>; <a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#debug_el\">debug_el</a> *<a class=\"id\" href=\"#el\">el</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#cur\">cur</a>, struct <a class=\"id\" href=\"#debug_el\">debug_el</a>, <a class=\"id\" href=\"#l_h\">l_h</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cmp_result\">cmp_result</a> = <a class=\"id\" href=\"#cmp\">cmp</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#cur\">cur</a>, <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#prev\">prev</a> != <a class=\"id\" href=\"#cur\">cur</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"list_sort() returned \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"a corrupted list!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#cmp_result\">cmp_result</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"list_sort() failed to sort!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#cmp_result\">cmp_result</a> == 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#el\">el</a>-><a class=\"id\" href=\"#serial\">serial</a> >= <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#debug_el\">debug_el</a>, <a class=\"id\" href=\"#l_h\">l_h</a>)-><a class=\"id\" href=\"#serial\">serial</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"list_sort() failed to preserve order\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \" of equivalent elements!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cur\">cur</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> != <a class=\"id\" href=\"#LIST_SORT_TEST_LENGTH\">LIST_SORT_TEST_LENGTH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"list_sort() returned list of\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"different length!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#list_sort_test\">list_sort_test</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/55/7c429f0897df07d85b22d9cc51abc8537ae14d.xr', __xr_tmp);
