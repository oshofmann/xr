var __xr_tmp = [
"<span class=\"comment\">/* include/linux/aio_abi.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright 2000,2001,2002 Red Hat.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Written by Benjamin LaHaise &lt;bcrl@kvack.org&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Distribute under the terms of the GPLv2 (see ../../COPYING) or under </span>", 
"<span class=\"comment\"> * the following terms.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Permission to use, copy, modify, and distribute this software and its</span>", 
"<span class=\"comment\"> * documentation is hereby granted, provided that the above copyright</span>", 
"<span class=\"comment\"> * notice appears in all copies.  This software is provided without any</span>", 
"<span class=\"comment\"> * warranty, express or implied.  Red Hat makes no representations about</span>", 
"<span class=\"comment\"> * the suitability of this software for any purpose.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * IN NO EVENT SHALL RED HAT BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,</span>", 
"<span class=\"comment\"> * SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OF</span>", 
"<span class=\"comment\"> * THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF RED HAT HAS BEEN ADVISED</span>", 
"<span class=\"comment\"> * OF THE POSSIBILITY OF SUCH DAMAGE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RED HAT DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span>", 
"<span class=\"comment\"> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR</span>", 
"<span class=\"comment\"> * PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND</span>", 
"<span class=\"comment\"> * RED HAT HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,</span>", 
"<span class=\"comment\"> * ENHANCEMENTS, OR MODIFICATIONS.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX__AIO_ABI_H\">__LINUX__AIO_ABI_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX__AIO_ABI_H\">__LINUX__AIO_ABI_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#byteorder\">byteorder</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"typedef unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#aio_context_t\">aio_context_t</a>;", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IOCB_CMD_PREAD\">IOCB_CMD_PREAD</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IOCB_CMD_PWRITE\">IOCB_CMD_PWRITE</a> = 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IOCB_CMD_FSYNC\">IOCB_CMD_FSYNC</a> = 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IOCB_CMD_FDSYNC\">IOCB_CMD_FDSYNC</a> = 3,", 
"<span class=\"ts\"/><span class=\"comment\">/* These two are experimental.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * IOCB_CMD_PREADX = 4,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * IOCB_CMD_POLL = 5,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IOCB_CMD_NOOP\">IOCB_CMD_NOOP</a> = 6,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IOCB_CMD_PREADV\">IOCB_CMD_PREADV</a> = 7,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IOCB_CMD_PWRITEV\">IOCB_CMD_PWRITEV</a> = 8,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Valid flags for the \"aio_flags\" member of the \"struct iocb\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * IOCB_FLAG_RESFD - Set if the \"aio_resfd\" member of the \"struct iocb\"</span>", 
"<span class=\"comment\"> *                   is valid.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IOCB_FLAG_RESFD\">IOCB_FLAG_RESFD</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 0)", 
"", 
"<span class=\"comment\">/* read() from /dev/aio returns these structures. */</span>", 
"struct <a class=\"id\" href=\"#io_event\">io_event</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the data field from the iocb */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj\">obj</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* what iocb this event came from */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__s64\">__s64</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* result code for this event */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__s64\">__s64</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res2\">res2</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* secondary result */</span>", 
"};", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#__LITTLE_ENDIAN\">__LITTLE_ENDIAN</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PADDED\">PADDED</a>(<a class=\"id\" href=\"#x\">x</a>,<a class=\"id\" href=\"#y\">y</a>)<span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#__BIG_ENDIAN\">__BIG_ENDIAN</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PADDED\">PADDED</a>(<a class=\"id\" href=\"#x\">x</a>,<a class=\"id\" href=\"#y\">y</a>)<span class=\"ts\"/><a class=\"id\" href=\"#y\">y</a>, <a class=\"id\" href=\"#x\">x</a>", 
"#else", 
"#<a class=\"id\" href=\"#error\">error</a> <a class=\"id\" href=\"#edit\">edit</a> for <a class=\"id\" href=\"#your\">your</a> <a class=\"id\" href=\"#odd\">odd</a> <a class=\"id\" href=\"#byteorder\">byteorder</a>.", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * we always use a 64bit off_t when communicating</span>", 
"<span class=\"comment\"> * with userland.  its up to libraries to do the</span>", 
"<span class=\"comment\"> * proper padding and aio_error abstraction</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#iocb\">iocb</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* these are internal to the kernel/libc. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><a class=\"id\" href=\"#aio_data\">aio_data</a>;<span class=\"ts\"/><span class=\"comment\">/* data to be returned in event's data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#PADDED\">PADDED</a>(<a class=\"id\" href=\"#aio_key\">aio_key</a>, <a class=\"id\" href=\"#aio_reserved1\">aio_reserved1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the kernel sets aio_key to the req # */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* common fields */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><a class=\"id\" href=\"#aio_lio_opcode\">aio_lio_opcode</a>;<span class=\"ts\"/><span class=\"comment\">/* see IOCB_CMD_ above */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__s16\">__s16</a><span class=\"ts\"/><a class=\"id\" href=\"#aio_reqprio\">aio_reqprio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#aio_fildes\">aio_fildes</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><a class=\"id\" href=\"#aio_buf\">aio_buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><a class=\"id\" href=\"#aio_nbytes\">aio_nbytes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__s64\">__s64</a><span class=\"ts\"/><a class=\"id\" href=\"#aio_offset\">aio_offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* extra parameters */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><a class=\"id\" href=\"#aio_reserved2\">aio_reserved2</a>;<span class=\"ts\"/><span class=\"comment\">/* TODO: use this for a (struct sigevent *) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* flags for the \"struct iocb\" */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#aio_flags\">aio_flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the IOCB_FLAG_RESFD flag of \"aio_flags\" is set, this is an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * eventfd to signal AIO readiness to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#aio_resfd\">aio_resfd</a>;", 
"}; <span class=\"comment\">/* 64 bytes */</span>", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#IFBIG\">IFBIG</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#IFLITTLE\">IFLITTLE</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __LINUX__AIO_ABI_H */</span>", 
"", 
];
xr_frag_insert('l/55/80383d6a39f682bac969a4cfd4e27868c57e51.xr', __xr_tmp);
