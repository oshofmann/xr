var __xr_tmp = [
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * subtle -- if __bio_map_user() ended up bouncing a bio,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it would normally disappear when its bi_end_io is run.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * however, we need it for the unmap, so grab an extra</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reference to it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_get\">bio_get</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bio\">bio</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__bio_unmap_user\">__bio_unmap_user</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bvec\">bvec</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * make sure we dirty pages we wrote to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__bio_for_each_segment\">__bio_for_each_segment</a>(<a class=\"id\" href=\"#bvec\">bvec</a>, <a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#i\">i</a>, 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_data_dir\">bio_data_dir</a>(<a class=\"id\" href=\"#bio\">bio</a>) == <a class=\"id\" href=\"#READ\">READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_dirty_lock\">set_page_dirty_lock</a>(<a class=\"id\" href=\"#bvec\">bvec</a>-><a class=\"id\" href=\"#bv_page\">bv_page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#bvec\">bvec</a>-><a class=\"id\" href=\"#bv_page\">bv_page</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>bio_unmap_user<span class=\"ts\"/>-<span class=\"ts\"/>unmap a bio</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bio:<span class=\"ts\"/><span class=\"ts\"/>the bio being unmapped</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Unmap a bio previously mapped by bio_map_user(). Must be called with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a process context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>bio_unmap_user() may sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#bio_unmap_user\">bio_unmap_user</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__bio_unmap_user\">__bio_unmap_user</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_unmap_user\">bio_unmap_user</a>);", 
"", 
"static void <a class=\"id\" href=\"#bio_map_kern_endio\">bio_map_kern_endio</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, int <a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#__bio_map_kern\">__bio_map_kern</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#kaddr\">kaddr</a> = (unsigned long)<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a> = (<a class=\"id\" href=\"#kaddr\">kaddr</a> + <a class=\"id\" href=\"#len\">len</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#kaddr\">kaddr</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio_kmalloc\">bio_kmalloc</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bio\">bio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#offset_in_page\">offset_in_page</a>(<a class=\"id\" href=\"#kaddr\">kaddr</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bytes\">bytes</a> &gt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_add_pc_page\">bio_add_pc_page</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#data\">data</a>), <a class=\"id\" href=\"#bytes\">bytes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#offset\">offset</a>) &lt; <a class=\"id\" href=\"#bytes\">bytes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> += <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_end_io\">bi_end_io</a> = <a class=\"id\" href=\"#bio_map_kern_endio\">bio_map_kern_endio</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bio\">bio</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>bio_map_kern<span class=\"ts\"/>-<span class=\"ts\"/>map kernel address into bio</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@q: the struct request_queue for the bio</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@data: pointer to buffer to map</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len: length in bytes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gfp_mask: allocation flags for bio allocation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Map the kernel address into a bio suitable for io to a block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>device. Returns an error pointer in case of error.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_map_kern\">bio_map_kern</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, void *<a class=\"id\" href=\"#data\">data</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#__bio_map_kern\">__bio_map_kern</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#bio\">bio</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a> == <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't support partial mappings.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_map_kern\">bio_map_kern</a>);", 
"", 
"static void <a class=\"id\" href=\"#bio_copy_kern_endio\">bio_copy_kern_endio</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, int <a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bvec\">bvec</a>;", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#bio_data_dir\">bio_data_dir</a>(<a class=\"id\" href=\"#bio\">bio</a>) == <a class=\"id\" href=\"#READ\">READ</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_map_data\">bio_map_data</a> *<a class=\"id\" href=\"#bmd\">bmd</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#bmd\">bmd</a>-><a class=\"id\" href=\"#sgvecs\">sgvecs</a>[0].<a class=\"id\" href=\"#iov_base\">iov_base</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__bio_for_each_segment\">__bio_for_each_segment</a>(<a class=\"id\" href=\"#bvec\">bvec</a>, <a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#i\">i</a>, 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#bvec\">bvec</a>-><a class=\"id\" href=\"#bv_page\">bv_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#bmd\">bmd</a>-><a class=\"id\" href=\"#iovecs\">iovecs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#bv_len\">bv_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#read\">read</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#bvec\">bvec</a>-><a class=\"id\" href=\"#bv_page\">bv_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_free_map_data\">bio_free_map_data</a>(<a class=\"id\" href=\"#bmd\">bmd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>bio_copy_kern<span class=\"ts\"/>-<span class=\"ts\"/>copy kernel address into bio</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@q: the struct request_queue for the bio</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@data: pointer to buffer to copy</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len: length in bytes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gfp_mask: allocation flags for bio and page allocation</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@reading: data direction is READ</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>copy the kernel address into a bio suitable for io to a block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>device. Returns an error pointer in case of error.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_copy_kern\">bio_copy_kern</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, void *<a class=\"id\" href=\"#data\">data</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, int <a class=\"id\" href=\"#reading\">reading</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bvec\">bvec</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio_copy_user\">bio_copy_user</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, (unsigned long)<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#len\">len</a>, 1, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#bio\">bio</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#reading\">reading</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_for_each_segment\">bio_for_each_segment</a>(<a class=\"id\" href=\"#bvec\">bvec</a>, <a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#bvec\">bvec</a>-><a class=\"id\" href=\"#bv_page\">bv_page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#bvec\">bvec</a>-><a class=\"id\" href=\"#bv_len\">bv_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#bvec\">bvec</a>-><a class=\"id\" href=\"#bv_len\">bv_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_end_io\">bi_end_io</a> = <a class=\"id\" href=\"#bio_copy_kern_endio\">bio_copy_kern_endio</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bio\">bio</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_copy_kern\">bio_copy_kern</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * bio_set_pages_dirty() and bio_check_pages_dirty() are support functions</span>", 
"<span class=\"comment\"> * for performing direct-IO in BIOs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The problem is that we cannot run set_page_dirty() from interrupt context</span>", 
"<span class=\"comment\"> * because the required locks are not interrupt-safe.  So what we can do is to</span>", 
"<span class=\"comment\"> * mark the pages dirty _before_ performing IO.  And in interrupt context,</span>", 
"<span class=\"comment\"> * check that the pages are still dirty.   If so, fine.  If not, redirty them</span>", 
"<span class=\"comment\"> * in process context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We special-case compound pages here: normally this means reads into hugetlb</span>", 
"<span class=\"comment\"> * pages.  The logic in here doesn't really work right for compound pages</span>", 
"<span class=\"comment\"> * because the VM does not uniformly chase down the head page in all cases.</span>", 
"<span class=\"comment\"> * But dirtiness of compound pages is pretty meaningless anyway: the VM doesn't</span>", 
"<span class=\"comment\"> * handle them at all.  So we skip compound pages here at an early stage.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that this code is very hard to test under normal circumstances because</span>", 
"<span class=\"comment\"> * direct-io pins the pages with get_user_pages().  This makes</span>", 
"<span class=\"comment\"> * is_page_cache_freeable return false, and the VM will not clean the pages.</span>", 
"<span class=\"comment\"> * But other code (eg, pdflush) could clean the pages if they are mapped</span>", 
"<span class=\"comment\"> * pagecache.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Simply disabling the call to bio_set_pages_dirty() is a good way to test the</span>", 
"<span class=\"comment\"> * deferred bio dirtying paths.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * bio_set_pages_dirty() will mark all the bio's pages as dirty.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#bio_set_pages_dirty\">bio_set_pages_dirty</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bvec\">bvec</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_vcnt\">bi_vcnt</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#bvec\">bvec</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#bv_page\">bv_page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> && !<a class=\"id\" href=\"#PageCompound\">PageCompound</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_dirty_lock\">set_page_dirty_lock</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#bio_release_pages\">bio_release_pages</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bvec\">bvec</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_vcnt\">bi_vcnt</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#bvec\">bvec</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#bv_page\">bv_page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * bio_check_pages_dirty() will check that all the BIO's pages are still dirty.</span>", 
"<span class=\"comment\"> * If they are, then fine.  If, however, some pages are clean then they must</span>", 
"<span class=\"comment\"> * have been written out during the direct-IO read.  So we take another ref on</span>", 
"<span class=\"comment\"> * the BIO and the offending pages and re-dirty the pages in process context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is expected that bio_check_pages_dirty() will wholly own the BIO from</span>", 
"<span class=\"comment\"> * here on.  It will run one page_cache_release() against each page and will</span>", 
"<span class=\"comment\"> * run one bio_put() against the BIO.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#bio_dirty_fn\">bio_dirty_fn</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"", 
"static <a class=\"id\" href=\"#DECLARE_WORK\">DECLARE_WORK</a>(<a class=\"id\" href=\"#bio_dirty_work\">bio_dirty_work</a>, <a class=\"id\" href=\"#bio_dirty_fn\">bio_dirty_fn</a>);", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#bio_dirty_lock\">bio_dirty_lock</a>);", 
"static struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_dirty_list\">bio_dirty_list</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This runs in process context</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#bio_dirty_fn\">bio_dirty_fn</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#bio_dirty_lock\">bio_dirty_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio_dirty_list\">bio_dirty_list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_dirty_list\">bio_dirty_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#bio_dirty_lock\">bio_dirty_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#bio\">bio</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_set_pages_dirty\">bio_set_pages_dirty</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_release_pages\">bio_release_pages</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#bio_check_pages_dirty\">bio_check_pages_dirty</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bvec\">bvec</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_clean_pages\">nr_clean_pages</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_vcnt\">bi_vcnt</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#bvec\">bvec</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#bv_page\">bv_page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#page\">page</a>) || <a class=\"id\" href=\"#PageCompound\">PageCompound</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bvec\">bvec</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#bv_page\">bv_page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_clean_pages\">nr_clean_pages</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_clean_pages\">nr_clean_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#bio_dirty_lock\">bio_dirty_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a> = <a class=\"id\" href=\"#bio_dirty_list\">bio_dirty_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_dirty_list\">bio_dirty_list</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#bio_dirty_lock\">bio_dirty_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#bio_dirty_work\">bio_dirty_work</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#if <a class=\"id\" href=\"#ARCH_IMPLEMENTS_FLUSH_DCACHE_PAGE\">ARCH_IMPLEMENTS_FLUSH_DCACHE_PAGE</a>", 
"void <a class=\"id\" href=\"#bio_flush_dcache_pages\">bio_flush_dcache_pages</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bi\">bi</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bvec\">bvec</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_for_each_segment\">bio_for_each_segment</a>(<a class=\"id\" href=\"#bvec\">bvec</a>, <a class=\"id\" href=\"#bi\">bi</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_dcache_page\">flush_dcache_page</a>(<a class=\"id\" href=\"#bvec\">bvec</a>-><a class=\"id\" href=\"#bv_page\">bv_page</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_flush_dcache_pages\">bio_flush_dcache_pages</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bio_endio - end I/O on a bio</span>", 
"<span class=\"comment\"> * @bio:<span class=\"ts\"/>bio</span>", 
"<span class=\"comment\"> * @error:<span class=\"ts\"/>error, if any</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   bio_endio() will end I/O on the whole bio. bio_endio() is the</span>", 
"<span class=\"comment\"> *   preferred way to end I/O on a bio, it takes care of clearing</span>", 
"<span class=\"comment\"> *   BIO_UPTODATE on error. @error is 0 on success, and and one of the</span>", 
"<span class=\"comment\"> *   established -Exxxx (-EIO, for instance) error values in case</span>", 
"<span class=\"comment\"> *   something went wrong. Noone should call bi_end_io() directly on a</span>", 
"<span class=\"comment\"> *   bio unless they own it and thus know that it has an end_io</span>", 
"<span class=\"comment\"> *   function.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#bio_endio\">bio_endio</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#BIO_UPTODATE\">BIO_UPTODATE</a>, &amp;<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a>);", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#BIO_UPTODATE\">BIO_UPTODATE</a>, &amp;<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_end_io\">bi_end_io</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_end_io\">bi_end_io</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_endio\">bio_endio</a>);", 
"", 
"void <a class=\"id\" href=\"#bio_pair_release\">bio_pair_release</a>(struct <a class=\"id\" href=\"#bio_pair\">bio_pair</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#cnt\">cnt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#master\">master</a> = <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bio1\">bio1</a>.<a class=\"id\" href=\"#bi_private\">bi_private</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_endio\">bio_endio</a>(<a class=\"id\" href=\"#master\">master</a>, <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mempool_free\">mempool_free</a>(<a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bio2\">bio2</a>.<a class=\"id\" href=\"#bi_private\">bi_private</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_pair_release\">bio_pair_release</a>);", 
"", 
"static void <a class=\"id\" href=\"#bio_pair_end_1\">bio_pair_end_1</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bi\">bi</a>, int <a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_pair\">bio_pair</a> *<a class=\"id\" href=\"#bp\">bp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#bi\">bi</a>, struct <a class=\"id\" href=\"#bio_pair\">bio_pair</a>, <a class=\"id\" href=\"#bio1\">bio1</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_pair_release\">bio_pair_release</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#bio_pair_end_2\">bio_pair_end_2</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bi\">bi</a>, int <a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_pair\">bio_pair</a> *<a class=\"id\" href=\"#bp\">bp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#bi\">bi</a>, struct <a class=\"id\" href=\"#bio_pair\">bio_pair</a>, <a class=\"id\" href=\"#bio2\">bio2</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_pair_release\">bio_pair_release</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * split a bio - only worry about a bio with a single page in its iovec</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#bio_pair\">bio_pair</a> *<a class=\"id\" href=\"#bio_split\">bio_split</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bi\">bi</a>, int <a class=\"id\" href=\"#first_sectors\">first_sectors</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_pair\">bio_pair</a> *<a class=\"id\" href=\"#bp\">bp</a> = <a class=\"id\" href=\"#mempool_alloc\">mempool_alloc</a>(<a class=\"id\" href=\"#bio_split_pool\">bio_split_pool</a>, <a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bp\">bp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bp\">bp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_block_split\">trace_block_split</a>(<a class=\"id\" href=\"#bdev_get_queue\">bdev_get_queue</a>(<a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>), <a class=\"id\" href=\"#bi\">bi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a> + <a class=\"id\" href=\"#first_sectors\">first_sectors</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#bi_vcnt\">bi_vcnt</a> != 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#bi_idx\">bi_idx</a> != 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#cnt\">cnt</a>, 3);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bio1\">bio1</a> = *<a class=\"id\" href=\"#bi\">bi</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bio2\">bio2</a> = *<a class=\"id\" href=\"#bi\">bi</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bio2\">bio2</a>.<a class=\"id\" href=\"#bi_sector\">bi_sector</a> += <a class=\"id\" href=\"#first_sectors\">first_sectors</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bio2\">bio2</a>.<a class=\"id\" href=\"#bi_size\">bi_size</a> -= <a class=\"id\" href=\"#first_sectors\">first_sectors</a> << 9;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bio1\">bio1</a>.<a class=\"id\" href=\"#bi_size\">bi_size</a> = <a class=\"id\" href=\"#first_sectors\">first_sectors</a> << 9;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bv1\">bv1</a> = <a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>[0];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bv2\">bv2</a> = <a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>[0];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bv2\">bv2</a>.<a class=\"id\" href=\"#bv_offset\">bv_offset</a> += <a class=\"id\" href=\"#first_sectors\">first_sectors</a> << 9;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bv2\">bv2</a>.<a class=\"id\" href=\"#bv_len\">bv_len</a> -= <a class=\"id\" href=\"#first_sectors\">first_sectors</a> << 9;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bv1\">bv1</a>.<a class=\"id\" href=\"#bv_len\">bv_len</a> = <a class=\"id\" href=\"#first_sectors\">first_sectors</a> << 9;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bio1\">bio1</a>.<a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a> = &amp;<a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bv1\">bv1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bio2\">bio2</a>.<a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a> = &amp;<a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bv2\">bv2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bio1\">bio1</a>.<a class=\"id\" href=\"#bi_max_vecs\">bi_max_vecs</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bio2\">bio2</a>.<a class=\"id\" href=\"#bi_max_vecs\">bi_max_vecs</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bio1\">bio1</a>.<a class=\"id\" href=\"#bi_end_io\">bi_end_io</a> = <a class=\"id\" href=\"#bio_pair_end_1\">bio_pair_end_1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bio2\">bio2</a>.<a class=\"id\" href=\"#bi_end_io\">bi_end_io</a> = <a class=\"id\" href=\"#bio_pair_end_2\">bio_pair_end_2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bio1\">bio1</a>.<a class=\"id\" href=\"#bi_private\">bi_private</a> = <a class=\"id\" href=\"#bi\">bi</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#bio2\">bio2</a>.<a class=\"id\" href=\"#bi_private\">bi_private</a> = <a class=\"id\" href=\"#bio_split_pool\">bio_split_pool</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_integrity\">bio_integrity</a>(<a class=\"id\" href=\"#bi\">bi</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_integrity_split\">bio_integrity_split</a>(<a class=\"id\" href=\"#bi\">bi</a>, <a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#first_sectors\">first_sectors</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bp\">bp</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_split\">bio_split</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *      bio_sector_offset - Find hardware sector offset in bio</span>", 
"<span class=\"comment\"> *      @bio:           bio to inspect</span>", 
"<span class=\"comment\"> *      @index:         bio_vec index</span>", 
"<span class=\"comment\"> *      @offset:        offset in bv_page</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      Return the number of hardware sectors between beginning of bio</span>", 
"<span class=\"comment\"> *      and an end point indicated by a bio_vec index and an offset</span>", 
"<span class=\"comment\"> *      within that vector's page.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#bio_sector_offset\">bio_sector_offset</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, unsigned short <a class=\"id\" href=\"#index\">index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sector_sz\">sector_sz</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bv\">bv</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sectors\">sectors</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_sz\">sector_sz</a> = <a class=\"id\" href=\"#queue_logical_block_size\">queue_logical_block_size</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>-><a class=\"id\" href=\"#queue\">queue</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sectors\">sectors</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> >= <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_idx\">bi_idx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_vcnt\">bi_vcnt</a> - 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__bio_for_each_segment\">__bio_for_each_segment</a>(<a class=\"id\" href=\"#bv\">bv</a>, <a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#i\">i</a>, 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#index\">index</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &gt; <a class=\"id\" href=\"#bv\">bv</a>-><a class=\"id\" href=\"#bv_offset\">bv_offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sectors\">sectors</a> += (<a class=\"id\" href=\"#offset\">offset</a> - <a class=\"id\" href=\"#bv\">bv</a>-><a class=\"id\" href=\"#bv_offset\">bv_offset</a>) / <a class=\"id\" href=\"#sector_sz\">sector_sz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sectors\">sectors</a> += <a class=\"id\" href=\"#bv\">bv</a>-><a class=\"id\" href=\"#bv_len\">bv_len</a> / <a class=\"id\" href=\"#sector_sz\">sector_sz</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sectors\">sectors</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_sector_offset\">bio_sector_offset</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * create memory pools for biovec's in a bio_set.</span>", 
"<span class=\"comment\"> * use the global biovec slabs created for general use.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#biovec_create_pools\">biovec_create_pools</a>(struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *<a class=\"id\" href=\"#bs\">bs</a>, int <a class=\"id\" href=\"#pool_entries\">pool_entries</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#biovec_slab\">biovec_slab</a> *<a class=\"id\" href=\"#bp\">bp</a> = <a class=\"id\" href=\"#bvec_slabs\">bvec_slabs</a> + <a class=\"id\" href=\"#BIOVEC_MAX_IDX\">BIOVEC_MAX_IDX</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#bvec_pool\">bvec_pool</a> = <a class=\"id\" href=\"#mempool_create_slab_pool\">mempool_create_slab_pool</a>(<a class=\"id\" href=\"#pool_entries\">pool_entries</a>, <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#slab\">slab</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#bvec_pool\">bvec_pool</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#biovec_free_pools\">biovec_free_pools</a>(struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *<a class=\"id\" href=\"#bs\">bs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempool_destroy\">mempool_destroy</a>(<a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#bvec_pool\">bvec_pool</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#bioset_free\">bioset_free</a>(struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *<a class=\"id\" href=\"#bs\">bs</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#bio_pool\">bio_pool</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mempool_destroy\">mempool_destroy</a>(<a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#bio_pool\">bio_pool</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bioset_integrity_free\">bioset_integrity_free</a>(<a class=\"id\" href=\"#bs\">bs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#biovec_free_pools\">biovec_free_pools</a>(<a class=\"id\" href=\"#bs\">bs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_put_slab\">bio_put_slab</a>(<a class=\"id\" href=\"#bs\">bs</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bs\">bs</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bioset_free\">bioset_free</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bioset_create  - Create a bio_set</span>", 
"<span class=\"comment\"> * @pool_size:<span class=\"ts\"/>Number of bio and bio_vecs to cache in the mempool</span>", 
"<span class=\"comment\"> * @front_pad:<span class=\"ts\"/>Number of bytes to allocate in front of the returned bio</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    Set up a bio_set to be used with @bio_alloc_bioset. Allows the caller</span>", 
"<span class=\"comment\"> *    to ask for a number of bytes to be allocated in front of the bio.</span>", 
"<span class=\"comment\"> *    Front pad allocation is useful for embedding the bio inside</span>", 
"<span class=\"comment\"> *    another structure, to avoid allocating extra data to go with the bio.</span>", 
"<span class=\"comment\"> *    Note that the bio must be embedded at the END of that structure always,</span>", 
"<span class=\"comment\"> *    or things will break badly.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *<a class=\"id\" href=\"#bioset_create\">bioset_create</a>(unsigned int <a class=\"id\" href=\"#pool_size\">pool_size</a>, unsigned int <a class=\"id\" href=\"#front_pad\">front_pad</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#back_pad\">back_pad</a> = <a class=\"id\" href=\"#BIO_INLINE_VECS\">BIO_INLINE_VECS</a> * sizeof(struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *<a class=\"id\" href=\"#bs\">bs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bs\">bs</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#bs\">bs</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bs\">bs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#front_pad\">front_pad</a> = <a class=\"id\" href=\"#front_pad\">front_pad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#bio_slab\">bio_slab</a> = <a class=\"id\" href=\"#bio_find_or_create_slab\">bio_find_or_create_slab</a>(<a class=\"id\" href=\"#front_pad\">front_pad</a> + <a class=\"id\" href=\"#back_pad\">back_pad</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#bio_slab\">bio_slab</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bs\">bs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#bio_pool\">bio_pool</a> = <a class=\"id\" href=\"#mempool_create_slab_pool\">mempool_create_slab_pool</a>(<a class=\"id\" href=\"#pool_size\">pool_size</a>, <a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#bio_slab\">bio_slab</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#bio_pool\">bio_pool</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bioset_integrity_create\">bioset_integrity_create</a>(<a class=\"id\" href=\"#bs\">bs</a>, <a class=\"id\" href=\"#pool_size\">pool_size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#biovec_create_pools\">biovec_create_pools</a>(<a class=\"id\" href=\"#bs\">bs</a>, <a class=\"id\" href=\"#pool_size\">pool_size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bs\">bs</a>;", 
"", 
"<a class=\"id\" href=\"#bad\">bad</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bioset_free\">bioset_free</a>(<a class=\"id\" href=\"#bs\">bs</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bioset_create\">bioset_create</a>);", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#biovec_init_slabs\">biovec_init_slabs</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#BIOVEC_NR_POOLS\">BIOVEC_NR_POOLS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#biovec_slab\">biovec_slab</a> *<a class=\"id\" href=\"#bvs\">bvs</a> = <a class=\"id\" href=\"#bvec_slabs\">bvec_slabs</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_BLK_DEV_INTEGRITY\">CONFIG_BLK_DEV_INTEGRITY</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bvs\">bvs</a>-><a class=\"id\" href=\"#nr_vecs\">nr_vecs</a> <= <a class=\"id\" href=\"#BIO_INLINE_VECS\">BIO_INLINE_VECS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bvs\">bvs</a>-><a class=\"id\" href=\"#slab\">slab</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#bvs\">bvs</a>-><a class=\"id\" href=\"#nr_vecs\">nr_vecs</a> * sizeof(struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bvs\">bvs</a>-><a class=\"id\" href=\"#slab\">slab</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(<a class=\"id\" href=\"#bvs\">bvs</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#size\">size</a>, 0,", 
"                                <a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a>|<a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_bio\">init_bio</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_slab_max\">bio_slab_max</a> = 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_slab_nr\">bio_slab_nr</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_slabs\">bio_slabs</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#bio_slab_max\">bio_slab_max</a> * sizeof(struct <a class=\"id\" href=\"#bio_slab\">bio_slab</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bio_slabs\">bio_slabs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"bio: can't allocate bios\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_integrity_init\">bio_integrity_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#biovec_init_slabs\">biovec_init_slabs</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fs_bio_set\">fs_bio_set</a> = <a class=\"id\" href=\"#bioset_create\">bioset_create</a>(<a class=\"id\" href=\"#BIO_POOL_SIZE\">BIO_POOL_SIZE</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fs_bio_set\">fs_bio_set</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"bio: can't allocate bios\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_split_pool\">bio_split_pool</a> = <a class=\"id\" href=\"#mempool_create_kmalloc_pool\">mempool_create_kmalloc_pool</a>(<a class=\"id\" href=\"#BIO_SPLIT_ENTRIES\">BIO_SPLIT_ENTRIES</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     sizeof(struct <a class=\"id\" href=\"#bio_pair\">bio_pair</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bio_split_pool\">bio_split_pool</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"bio: can't create split pool\\n\");", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#subsys_initcall\">subsys_initcall</a>(<a class=\"id\" href=\"#init_bio\">init_bio</a>);", 
];
xr_frag_insert('l/55/9f26afab728302ec11755bb10f3abb2cbcc90f.xr', __xr_tmp);
