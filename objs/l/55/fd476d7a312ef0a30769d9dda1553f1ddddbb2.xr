var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is a module which is used for queueing IPv4 packets and</span>", 
"<span class=\"comment\"> * communicating with userspace via netlink.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) 2000 James Morris, this code is GPL.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_IP_QUEUE_H\">_IP_QUEUE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_IP_QUEUE_H\">_IP_QUEUE_H</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#DEBUG_IPQ\">DEBUG_IPQ</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#QDEBUG\">QDEBUG</a>(<a class=\"id\" href=\"#x\">x</a>...) <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> ## <a class=\"id\" href=\"#x\">x</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#QDEBUG\">QDEBUG</a>(<a class=\"id\" href=\"#x\">x</a>...)", 
"#<a class=\"id\" href=\"#endif\">endif</a>  <span class=\"comment\">/* DEBUG_IPQ */</span>", 
"#else", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/if.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* ! __KERNEL__ */</span>", 
"", 
"<span class=\"comment\">/* Messages sent from kernel */</span>", 
"typedef struct <a class=\"id\" href=\"#ipq_packet_msg\">ipq_packet_msg</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#packet_id\">packet_id</a>;<span class=\"ts\"/><span class=\"comment\">/* ID of queued packet */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mark\">mark</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Netfilter mark value */</span>", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#timestamp_sec\">timestamp_sec</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Packet arrival time (seconds) */</span>", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#timestamp_usec\">timestamp_usec</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Packet arrvial time (+useconds) */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hook\">hook</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Netfilter hook we rode in on */</span>", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#indev_name\">indev_name</a>[<a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>];<span class=\"ts\"/><span class=\"comment\">/* Name of incoming interface */</span>", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#outdev_name\">outdev_name</a>[<a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>];<span class=\"ts\"/><span class=\"comment\">/* Name of outgoing interface */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#hw_protocol\">hw_protocol</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Hardware protocol (network order) */</span>", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#hw_type\">hw_type</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Hardware type */</span>", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#hw_addrlen\">hw_addrlen</a>;<span class=\"ts\"/><span class=\"comment\">/* Hardware address length */</span>", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#hw_addr\">hw_addr</a>[8];<span class=\"ts\"/><span class=\"comment\">/* Hardware address */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#data_len\">data_len</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Length of packet data */</span>", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#payload\">payload</a>[0];<span class=\"ts\"/><span class=\"comment\">/* Optional packet data */</span>", 
"} <a class=\"id\" href=\"#ipq_packet_msg_t\">ipq_packet_msg_t</a>;", 
"", 
"<span class=\"comment\">/* Messages sent from userspace */</span>", 
"typedef struct <a class=\"id\" href=\"#ipq_mode_msg\">ipq_mode_msg</a> {", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#value\">value</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Requested mode */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#range\">range</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Optional range of packet requested */</span>", 
"} <a class=\"id\" href=\"#ipq_mode_msg_t\">ipq_mode_msg_t</a>;", 
"", 
"typedef struct <a class=\"id\" href=\"#ipq_verdict_msg\">ipq_verdict_msg</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#value\">value</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Verdict to hand to netfilter */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#id\">id</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Packet ID for this verdict */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#data_len\">data_len</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Length of replacement data */</span>", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#payload\">payload</a>[0];<span class=\"ts\"/><span class=\"comment\">/* Optional replacement packet */</span>", 
"} <a class=\"id\" href=\"#ipq_verdict_msg_t\">ipq_verdict_msg_t</a>;", 
"", 
"typedef struct <a class=\"id\" href=\"#ipq_peer_msg\">ipq_peer_msg</a> {", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipq_verdict_msg_t\">ipq_verdict_msg_t</a> <a class=\"id\" href=\"#verdict\">verdict</a>;", 
];
xr_frag_insert('l/55/fd476d7a312ef0a30769d9dda1553f1ddddbb2.xr', __xr_tmp);
