var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>INETPEER - A storage for permanent information about peers</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This source is covered by the GNU GPL, the same as all kernel sources.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Authors:<span class=\"ts\"/>Andrey V. Savochkin &lt;saw@msu.ru&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#random\">random</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#net\">net</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#inetpeer\">inetpeer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Theory of operations.</span>", 
"<span class=\"comment\"> *  We keep one entry for each peer IP address.  The nodes contains long-living</span>", 
"<span class=\"comment\"> *  information about the peer which doesn't depend on routes.</span>", 
"<span class=\"comment\"> *  At this moment this information consists only of ID field for the next</span>", 
"<span class=\"comment\"> *  outgoing IP packet.  This field is incremented with each packet as encoded</span>", 
"<span class=\"comment\"> *  in inet_getid() function (include/net/inetpeer.h).</span>", 
"<span class=\"comment\"> *  At the moment of writing this notes identifier of IP packets is generated</span>", 
"<span class=\"comment\"> *  to be unpredictable using this code only for packets subjected</span>", 
"<span class=\"comment\"> *  (actually or potentially) to defragmentation.  I.e. DF packets less than</span>", 
"<span class=\"comment\"> *  PMTU in size uses a constant ID and do not use this code (see</span>", 
"<span class=\"comment\"> *  ip_select_ident() in include/net/ip.h).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Route cache entries hold references to our nodes.</span>", 
"<span class=\"comment\"> *  New cache entries get references via lookup by destination IP address in</span>", 
"<span class=\"comment\"> *  the avl tree.  The reference is grabbed only when it's needed i.e. only</span>", 
"<span class=\"comment\"> *  when we try to output IP packet which needs an unpredictable ID (see</span>", 
"<span class=\"comment\"> *  __ip_select_ident() in net/ipv4/route.c).</span>", 
"<span class=\"comment\"> *  Nodes are removed only when reference counter goes to 0.</span>", 
"<span class=\"comment\"> *  When it's happened the node may be removed when a sufficient amount of</span>", 
"<span class=\"comment\"> *  time has been passed since its last use.  The less-recently-used entry can</span>", 
"<span class=\"comment\"> *  also be removed if the pool is overloaded i.e. if the total amount of</span>", 
"<span class=\"comment\"> *  entries is greater-or-equal than the threshold.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Node pool is organised as an AVL tree.</span>", 
"<span class=\"comment\"> *  Such an implementation has been chosen not just for fun.  It's a way to</span>", 
"<span class=\"comment\"> *  prevent easy and efficient DoS attacks by creating hash collisions.  A huge</span>", 
"<span class=\"comment\"> *  amount of long living nodes in a single hash slot would significantly delay</span>", 
"<span class=\"comment\"> *  lookups performed with disabled BHs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Serialisation issues.</span>", 
"<span class=\"comment\"> *  1.  Nodes may appear in the tree only with the pool lock held.</span>", 
"<span class=\"comment\"> *  2.  Nodes may disappear from the tree only with the pool lock held</span>", 
"<span class=\"comment\"> *      AND reference count being 0.</span>", 
"<span class=\"comment\"> *  3.  Nodes appears and disappears from unused node list only under</span>", 
"<span class=\"comment\"> *      \"inet_peer_unused_lock\".</span>", 
"<span class=\"comment\"> *  4.  Global variable peer_total is modified under the pool lock.</span>", 
"<span class=\"comment\"> *  5.  struct inet_peer fields modification:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>avl_left, avl_right, avl_parent, avl_height: pool lock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>unused: unused node list lock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>refcnt: atomically against modifications on other CPU;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>   usually under some other lock to prevent node disappearing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>dtime: unused node list lock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>v4daddr: unchangeable</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>ip_id_count: atomic value (no lock needed)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#peer_cachep\">peer_cachep</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#node_height\">node_height</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#avl_height\">avl_height</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#peer_avl_empty\">peer_avl_empty</a> ((struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> *)&amp;<a class=\"id\" href=\"#peer_fake_node\">peer_fake_node</a>)", 
"static const struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> <a class=\"id\" href=\"#peer_fake_node\">peer_fake_node</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#avl_left\">avl_left</a><span class=\"ts\"/>= <a class=\"id\" href=\"#peer_avl_empty\">peer_avl_empty</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#avl_right\">avl_right</a><span class=\"ts\"/>= <a class=\"id\" href=\"#peer_avl_empty\">peer_avl_empty</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#avl_height\">avl_height</a><span class=\"ts\"/>= 0", 
"};", 
"", 
"static struct {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> *<a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a>;", 
"} <a class=\"id\" href=\"#peers\">peers</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#root\">root</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#peer_avl_empty\">peer_avl_empty</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#lock\">lock</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#__SPIN_LOCK_UNLOCKED\">__SPIN_LOCK_UNLOCKED</a>(<a class=\"id\" href=\"#peers\">peers</a>.<a class=\"id\" href=\"#lock\">lock</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#total\">total</a><span class=\"ts\"/><span class=\"ts\"/>= 0,", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PEER_MAXDEPTH\">PEER_MAXDEPTH</a> 40 <span class=\"comment\">/* sufficient for about 2^27 nodes */</span>", 
"", 
"<span class=\"comment\">/* Exported for sysctl_net_ipv4.  */</span>", 
"int <a class=\"id\" href=\"#inet_peer_threshold\">inet_peer_threshold</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 65536 + 128;<span class=\"ts\"/><span class=\"comment\">/* start to throw entries more</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * aggressively at this stage */</span>", 
"int <a class=\"id\" href=\"#inet_peer_minttl\">inet_peer_minttl</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 120 * <a class=\"id\" href=\"#HZ\">HZ</a>;<span class=\"ts\"/><span class=\"comment\">/* TTL under high load: 120 sec */</span>", 
"int <a class=\"id\" href=\"#inet_peer_maxttl\">inet_peer_maxttl</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 10 * 60 * <a class=\"id\" href=\"#HZ\">HZ</a>;<span class=\"ts\"/><span class=\"comment\">/* usual time to live: 10 min */</span>", 
"int <a class=\"id\" href=\"#inet_peer_gc_mintime\">inet_peer_gc_mintime</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 10 * <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"int <a class=\"id\" href=\"#inet_peer_gc_maxtime\">inet_peer_gc_maxtime</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 120 * <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"", 
"static struct {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>;", 
"} <a class=\"id\" href=\"#unused_peers\">unused_peers</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#list\">list</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#LIST_HEAD_INIT\">LIST_HEAD_INIT</a>(<a class=\"id\" href=\"#unused_peers\">unused_peers</a>.<a class=\"id\" href=\"#list\">list</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#lock\">lock</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#__SPIN_LOCK_UNLOCKED\">__SPIN_LOCK_UNLOCKED</a>(<a class=\"id\" href=\"#unused_peers\">unused_peers</a>.<a class=\"id\" href=\"#lock\">lock</a>),", 
"};", 
"", 
"static void <a class=\"id\" href=\"#peer_check_expire\">peer_check_expire</a>(unsigned long <a class=\"id\" href=\"#dummy\">dummy</a>);", 
"static <a class=\"id\" href=\"#DEFINE_TIMER\">DEFINE_TIMER</a>(<a class=\"id\" href=\"#peer_periodic_timer\">peer_periodic_timer</a>, <a class=\"id\" href=\"#peer_check_expire\">peer_check_expire</a>, 0, 0);", 
"", 
"", 
"<span class=\"comment\">/* Called from ip_output.c:ip_init  */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#inet_initpeers\">inet_initpeers</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sysinfo\">sysinfo</a> <a class=\"id\" href=\"#si\">si</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Use the straight interface to information about memory. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si_meminfo\">si_meminfo</a>(&amp;<a class=\"id\" href=\"#si\">si</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* The values below were suggested by Alexey Kuznetsov</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * &lt;kuznet@ms2.inr.ac.ru&gt;.  I don't have any opinion about the values</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * myself.  --SAW</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#si\">si</a>.<a class=\"id\" href=\"#totalram\">totalram</a> <= (32768*1024)/<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_peer_threshold\">inet_peer_threshold</a> >>= 1; <span class=\"comment\">/* max pool size about 1MB on IA32 */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#si\">si</a>.<a class=\"id\" href=\"#totalram\">totalram</a> <= (16384*1024)/<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_peer_threshold\">inet_peer_threshold</a> >>= 1; <span class=\"comment\">/* about 512KB */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#si\">si</a>.<a class=\"id\" href=\"#totalram\">totalram</a> <= (8192*1024)/<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_peer_threshold\">inet_peer_threshold</a> >>= 2; <span class=\"comment\">/* about 128KB */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#peer_cachep\">peer_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"inet_peer_cache\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0, <a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a> | <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* All the timers, started at system startup tend</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   to synchronize. Perturb it a bit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#peer_periodic_timer\">peer_periodic_timer</a>.<a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#net_random\">net_random</a>() % <a class=\"id\" href=\"#inet_peer_gc_maxtime\">inet_peer_gc_maxtime</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#inet_peer_gc_maxtime\">inet_peer_gc_maxtime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_timer\">add_timer</a>(&amp;<a class=\"id\" href=\"#peer_periodic_timer\">peer_periodic_timer</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Called with or without local BH being disabled. */</span>", 
"static void <a class=\"id\" href=\"#unlink_from_unused\">unlink_from_unused</a>(struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#unused\">unused</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#unused_peers\">unused_peers</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#unused\">unused</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#unused_peers\">unused_peers</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called with local BH disabled and the pool lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lookup\">lookup</a>(<a class=\"id\" href=\"#_daddr\">_daddr</a>, <a class=\"id\" href=\"#_stack\">_stack</a>) <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> *<a class=\"id\" href=\"#u\">u</a>, **<a class=\"id\" href=\"#v\">v</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stackptr\">stackptr</a> = <a class=\"id\" href=\"#_stack\">_stack</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#stackptr\">stackptr</a>++ = &amp;<a class=\"id\" href=\"#peers\">peers</a>.<a class=\"id\" href=\"#root\">root</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#u\">u</a> = <a class=\"id\" href=\"#peers\">peers</a>.<a class=\"id\" href=\"#root\">root</a>; <a class=\"id\" href=\"#u\">u</a> != <a class=\"id\" href=\"#peer_avl_empty\">peer_avl_empty</a>; ) {<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#_daddr\">_daddr</a> == <a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#v4daddr\">v4daddr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__u32\">__u32</a>)<a class=\"id\" href=\"#_daddr\">_daddr</a> &lt; (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__u32\">__u32</a>)<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#v4daddr\">v4daddr</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = &amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = &amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#stackptr\">stackptr</a>++ = <a class=\"id\" href=\"#v\">v</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a> = *<a class=\"id\" href=\"#v\">v</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called with rcu_read_lock_bh()</span>", 
"<span class=\"comment\"> * Because we hold no lock against a writer, its quite possible we fall</span>", 
"<span class=\"comment\"> * in an endless loop.</span>", 
"<span class=\"comment\"> * But every pointer we follow is guaranteed to be valid thanks to RCU.</span>", 
"<span class=\"comment\"> * We exit from this function if number of links exceeds PEER_MAXDEPTH</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> *<a class=\"id\" href=\"#lookup_rcu_bh\">lookup_rcu_bh</a>(<a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> *<a class=\"id\" href=\"#u\">u</a> = <a class=\"id\" href=\"#rcu_dereference_bh\">rcu_dereference_bh</a>(<a class=\"id\" href=\"#peers\">peers</a>.<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#u\">u</a> != <a class=\"id\" href=\"#peer_avl_empty\">peer_avl_empty</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#daddr\">daddr</a> == <a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#v4daddr\">v4daddr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Before taking a reference, check if this entry was</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * deleted, unlink_from_pool() sets refcnt=-1 to make</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * distinction between an unused entry (refcnt=0) and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * a freed one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#atomic_add_unless\">atomic_add_unless</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>, 1, -1)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#u\">u</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__u32\">__u32</a>)<a class=\"id\" href=\"#daddr\">daddr</a> &lt; (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__u32\">__u32</a>)<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#v4daddr\">v4daddr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a> = <a class=\"id\" href=\"#rcu_dereference_bh\">rcu_dereference_bh</a>(<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a> = <a class=\"id\" href=\"#rcu_dereference_bh\">rcu_dereference_bh</a>(<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(++<a class=\"id\" href=\"#count\">count</a> == <a class=\"id\" href=\"#PEER_MAXDEPTH\">PEER_MAXDEPTH</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Called with local BH disabled and the pool lock held. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lookup_rightempty\">lookup_rightempty</a>(<a class=\"id\" href=\"#start\">start</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> *<a class=\"id\" href=\"#u\">u</a>, **<a class=\"id\" href=\"#v\">v</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#stackptr\">stackptr</a>++ = &amp;<a class=\"id\" href=\"#start\">start</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = &amp;<a class=\"id\" href=\"#start\">start</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#u\">u</a> = *<a class=\"id\" href=\"#v\">v</a>; <a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a> != <a class=\"id\" href=\"#peer_avl_empty\">peer_avl_empty</a>; ) {<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = &amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#stackptr\">stackptr</a>++ = <a class=\"id\" href=\"#v\">v</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a> = *<a class=\"id\" href=\"#v\">v</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"<span class=\"comment\">/* Called with local BH disabled and the pool lock held.</span>", 
"<span class=\"comment\"> * Variable names are the proof of operation correctness.</span>", 
"<span class=\"comment\"> * Look into mm/map_avl.c for more detail description of the ideas.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#peer_avl_rebalance\">peer_avl_rebalance</a>(struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> **<a class=\"id\" href=\"#stack\">stack</a>[],", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> ***<a class=\"id\" href=\"#stackend\">stackend</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> **<a class=\"id\" href=\"#nodep\">nodep</a>, *<a class=\"id\" href=\"#node\">node</a>, *<a class=\"id\" href=\"#l\">l</a>, *<a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lh\">lh</a>, <a class=\"id\" href=\"#rh\">rh</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#stackend\">stackend</a> &gt; <a class=\"id\" href=\"#stack\">stack</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodep\">nodep</a> = *--<a class=\"id\" href=\"#stackend\">stackend</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = *<a class=\"id\" href=\"#nodep\">nodep</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lh\">lh</a> = <a class=\"id\" href=\"#node_height\">node_height</a>(<a class=\"id\" href=\"#l\">l</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rh\">rh</a> = <a class=\"id\" href=\"#node_height\">node_height</a>(<a class=\"id\" href=\"#r\">r</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lh\">lh</a> &gt; <a class=\"id\" href=\"#rh\">rh</a> + 1) { <span class=\"comment\">/* l: RH+2 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> *<a class=\"id\" href=\"#ll\">ll</a>, *<a class=\"id\" href=\"#lr\">lr</a>, *<a class=\"id\" href=\"#lrl\">lrl</a>, *<a class=\"id\" href=\"#lrr\">lrr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#lrh\">lrh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ll\">ll</a> = <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lr\">lr</a> = <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lrh\">lrh</a> = <a class=\"id\" href=\"#node_height\">node_height</a>(<a class=\"id\" href=\"#lr\">lr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lrh\">lrh</a> <= <a class=\"id\" href=\"#node_height\">node_height</a>(<a class=\"id\" href=\"#ll\">ll</a>)) {<span class=\"ts\"/><span class=\"comment\">/* ll: RH+1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a> = <a class=\"id\" href=\"#lr\">lr</a>;<span class=\"ts\"/><span class=\"comment\">/* lr: RH or RH+1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a> = <a class=\"id\" href=\"#r\">r</a>;<span class=\"ts\"/><span class=\"comment\">/* r: RH */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#avl_height\">avl_height</a> = <a class=\"id\" href=\"#lrh\">lrh</a> + 1; <span class=\"comment\">/* RH+1 or RH+2 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a> = <a class=\"id\" href=\"#ll\">ll</a>;<span class=\"ts\"/><span class=\"comment\">/* ll: RH+1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a> = <a class=\"id\" href=\"#node\">node</a>;<span class=\"ts\"/><span class=\"comment\">/* node: RH+1 or RH+2 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#avl_height\">avl_height</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#avl_height\">avl_height</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nodep\">nodep</a> = <a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else { <span class=\"comment\">/* ll: RH, lr: RH+1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lrl\">lrl</a> = <a class=\"id\" href=\"#lr\">lr</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a>;<span class=\"ts\"/><span class=\"comment\">/* lrl: RH or RH-1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lrr\">lrr</a> = <a class=\"id\" href=\"#lr\">lr</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a>;<span class=\"ts\"/><span class=\"comment\">/* lrr: RH or RH-1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a> = <a class=\"id\" href=\"#lrr\">lrr</a>;<span class=\"ts\"/><span class=\"comment\">/* lrr: RH or RH-1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a> = <a class=\"id\" href=\"#r\">r</a>;<span class=\"ts\"/><span class=\"comment\">/* r: RH */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#avl_height\">avl_height</a> = <a class=\"id\" href=\"#rh\">rh</a> + 1; <span class=\"comment\">/* node: RH+1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a> = <a class=\"id\" href=\"#ll\">ll</a>;<span class=\"ts\"/><span class=\"comment\">/* ll: RH */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a> = <a class=\"id\" href=\"#lrl\">lrl</a>;<span class=\"ts\"/><span class=\"comment\">/* lrl: RH or RH-1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#avl_height\">avl_height</a> = <a class=\"id\" href=\"#rh\">rh</a> + 1;<span class=\"ts\"/><span class=\"comment\">/* l: RH+1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lr\">lr</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a> = <a class=\"id\" href=\"#l\">l</a>;<span class=\"ts\"/><span class=\"comment\">/* l: RH+1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lr\">lr</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a> = <a class=\"id\" href=\"#node\">node</a>;<span class=\"ts\"/><span class=\"comment\">/* node: RH+1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lr\">lr</a>-><a class=\"id\" href=\"#avl_height\">avl_height</a> = <a class=\"id\" href=\"#rh\">rh</a> + 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nodep\">nodep</a> = <a class=\"id\" href=\"#lr\">lr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#rh\">rh</a> &gt; <a class=\"id\" href=\"#lh\">lh</a> + 1) { <span class=\"comment\">/* r: LH+2 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> *<a class=\"id\" href=\"#rr\">rr</a>, *<a class=\"id\" href=\"#rl\">rl</a>, *<a class=\"id\" href=\"#rlr\">rlr</a>, *<a class=\"id\" href=\"#rll\">rll</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#rlh\">rlh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rr\">rr</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rl\">rl</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rlh\">rlh</a> = <a class=\"id\" href=\"#node_height\">node_height</a>(<a class=\"id\" href=\"#rl\">rl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rlh\">rlh</a> <= <a class=\"id\" href=\"#node_height\">node_height</a>(<a class=\"id\" href=\"#rr\">rr</a>)) {<span class=\"ts\"/><span class=\"comment\">/* rr: LH+1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a> = <a class=\"id\" href=\"#rl\">rl</a>;<span class=\"ts\"/><span class=\"comment\">/* rl: LH or LH+1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a> = <a class=\"id\" href=\"#l\">l</a>;<span class=\"ts\"/><span class=\"comment\">/* l: LH */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#avl_height\">avl_height</a> = <a class=\"id\" href=\"#rlh\">rlh</a> + 1; <span class=\"comment\">/* LH+1 or LH+2 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a> = <a class=\"id\" href=\"#rr\">rr</a>;<span class=\"ts\"/><span class=\"comment\">/* rr: LH+1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a> = <a class=\"id\" href=\"#node\">node</a>;<span class=\"ts\"/><span class=\"comment\">/* node: LH+1 or LH+2 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#avl_height\">avl_height</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#avl_height\">avl_height</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nodep\">nodep</a> = <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else { <span class=\"comment\">/* rr: RH, rl: RH+1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rlr\">rlr</a> = <a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a>;<span class=\"ts\"/><span class=\"comment\">/* rlr: LH or LH-1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rll\">rll</a> = <a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a>;<span class=\"ts\"/><span class=\"comment\">/* rll: LH or LH-1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a> = <a class=\"id\" href=\"#rll\">rll</a>;<span class=\"ts\"/><span class=\"comment\">/* rll: LH or LH-1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a> = <a class=\"id\" href=\"#l\">l</a>;<span class=\"ts\"/><span class=\"comment\">/* l: LH */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#avl_height\">avl_height</a> = <a class=\"id\" href=\"#lh\">lh</a> + 1; <span class=\"comment\">/* node: LH+1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a> = <a class=\"id\" href=\"#rr\">rr</a>;<span class=\"ts\"/><span class=\"comment\">/* rr: LH */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a> = <a class=\"id\" href=\"#rlr\">rlr</a>;<span class=\"ts\"/><span class=\"comment\">/* rlr: LH or LH-1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#avl_height\">avl_height</a> = <a class=\"id\" href=\"#lh\">lh</a> + 1;<span class=\"ts\"/><span class=\"comment\">/* r: LH+1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a> = <a class=\"id\" href=\"#r\">r</a>;<span class=\"ts\"/><span class=\"comment\">/* r: LH+1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a> = <a class=\"id\" href=\"#node\">node</a>;<span class=\"ts\"/><span class=\"comment\">/* node: LH+1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#avl_height\">avl_height</a> = <a class=\"id\" href=\"#lh\">lh</a> + 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nodep\">nodep</a> = <a class=\"id\" href=\"#rl\">rl</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#avl_height\">avl_height</a> = (<a class=\"id\" href=\"#lh\">lh</a> &gt; <a class=\"id\" href=\"#rh\">rh</a> ? <a class=\"id\" href=\"#lh\">lh</a> : <a class=\"id\" href=\"#rh\">rh</a>) + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Called with local BH disabled and the pool lock held. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#link_to_pool\">link_to_pool</a>(<a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#avl_height\">avl_height</a> = 1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a> = <a class=\"id\" href=\"#peer_avl_empty\">peer_avl_empty</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a> = <a class=\"id\" href=\"#peer_avl_empty\">peer_avl_empty</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>(); <span class=\"comment\">/* lockless readers can catch us now */</span><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>**--<a class=\"id\" href=\"#stackptr\">stackptr</a> = <a class=\"id\" href=\"#n\">n</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#peer_avl_rebalance\">peer_avl_rebalance</a>(<a class=\"id\" href=\"#stack\">stack</a>, <a class=\"id\" href=\"#stackptr\">stackptr</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"static void <a class=\"id\" href=\"#inetpeer_free_rcu\">inetpeer_free_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#peer_cachep\">peer_cachep</a>, <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a>, <a class=\"id\" href=\"#rcu\">rcu</a>));", 
"}", 
"", 
"<span class=\"comment\">/* May be called with local BH enabled. */</span>", 
"static void <a class=\"id\" href=\"#unlink_from_pool\">unlink_from_pool</a>(struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#do_free\">do_free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_free\">do_free</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#peers\">peers</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Check the reference counter.  It was artificially incremented by 1</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in cleanup() function to prevent sudden disappearing.  If we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * atomically (because of lockless readers) take this last reference,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it's safe to remove the node and free it later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We use refcnt=-1 to alert lockless readers this entry is deleted.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_cmpxchg\">atomic_cmpxchg</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>, 1, -1) == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> **<a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#PEER_MAXDEPTH\">PEER_MAXDEPTH</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> ***<a class=\"id\" href=\"#stackptr\">stackptr</a>, ***<a class=\"id\" href=\"#delp\">delp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lookup\">lookup</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#v4daddr\">v4daddr</a>, <a class=\"id\" href=\"#stack\">stack</a>) != <a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delp\">delp</a> = <a class=\"id\" href=\"#stackptr\">stackptr</a> - 1; <span class=\"comment\">/* *delp[0] == p */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a> == <a class=\"id\" href=\"#peer_avl_empty\">peer_avl_empty</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#delp\">delp</a>[0] = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#stackptr\">stackptr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* look for a node to insert instead of p */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> *<a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#lookup_rightempty\">lookup_rightempty</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(*<a class=\"id\" href=\"#stackptr\">stackptr</a>[-1] != <a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>**--<a class=\"id\" href=\"#stackptr\">stackptr</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* t is removed, t-&gt;v4daddr &gt; x-&gt;v4daddr for any</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * x in p-&gt;avl_left subtree.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Put t in the old place of p. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#delp\">delp</a>[0] = <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#avl_right\">avl_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#avl_height\">avl_height</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#avl_height\">avl_height</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#delp\">delp</a>[1] != &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delp\">delp</a>[1] = &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#avl_left\">avl_left</a>; <span class=\"comment\">/* was &amp;p-&gt;avl_left */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#peer_avl_rebalance\">peer_avl_rebalance</a>(<a class=\"id\" href=\"#stack\">stack</a>, <a class=\"id\" href=\"#stackptr\">stackptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#peers\">peers</a>.<a class=\"id\" href=\"#total\">total</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_free\">do_free</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#peers\">peers</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#do_free\">do_free</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu_bh\">call_rcu_bh</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#inetpeer_free_rcu\">inetpeer_free_rcu</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The node is used again.  Decrease the reference counter</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * back.  The loop \"cleanup -&gt; unlink_from_unused</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *   -&gt; unlink_from_pool -&gt; putpeer -&gt; link_to_unused</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *   -&gt; cleanup (for the same node)\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * doesn't really exist because the entry will have a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * recent deletion time and will not be cleaned again soon.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_putpeer\">inet_putpeer</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<span class=\"comment\">/* May be called with local BH enabled. */</span>", 
"static int <a class=\"id\" href=\"#cleanup_once\">cleanup_once</a>(unsigned long <a class=\"id\" href=\"#ttl\">ttl</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove the first entry from the list of unused nodes. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#unused_peers\">unused_peers</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#unused_peers\">unused_peers</a>.<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#unused_peers\">unused_peers</a>.<a class=\"id\" href=\"#list\">list</a>, struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a>, <a class=\"id\" href=\"#unused\">unused</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = (<a class=\"id\" href=\"#__u32\">__u32</a>)<a class=\"id\" href=\"#jiffies\">jiffies</a> - <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#dtime\">dtime</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &lt; <a class=\"id\" href=\"#ttl\">ttl</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Do not prune fresh entries. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#unused_peers\">unused_peers</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#unused\">unused</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Grab an extra reference to prevent node disappearing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * before unlink_from_pool() call. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#unused_peers\">unused_peers</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* It means that the total number of USED entries has</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * grown over inet_peer_threshold.  It shouldn't really</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * happen because of entry limits in route cache. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlink_from_pool\">unlink_from_pool</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Called with or without local BH being disabled. */</span>", 
"struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> *<a class=\"id\" href=\"#inet_getpeer\">inet_getpeer</a>(<a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>, int <a class=\"id\" href=\"#create\">create</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> **<a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#PEER_MAXDEPTH\">PEER_MAXDEPTH</a>], ***<a class=\"id\" href=\"#stackptr\">stackptr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Look up for the address quickly, lockless.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Because of a concurrent writer, we might not find an existing entry.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock_bh\">rcu_read_lock_bh</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#lookup_rcu_bh\">lookup_rcu_bh</a>(<a class=\"id\" href=\"#daddr\">daddr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock_bh\">rcu_read_unlock_bh</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The existing node has been found.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Remove the entry from unused list if it was there.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlink_from_unused\">unlink_from_unused</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* retry an exact lookup, taking the lock before.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At least, nodes should be hot in our cache.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#peers\">peers</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#lookup\">lookup</a>(<a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#stack\">stack</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#peer_avl_empty\">peer_avl_empty</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#peers\">peers</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Remove the entry from unused list if it was there. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlink_from_unused\">unlink_from_unused</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#create\">create</a> ? <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#peer_cachep\">peer_cachep</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>) : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#v4daddr\">v4daddr</a> = <a class=\"id\" href=\"#daddr\">daddr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rid\">rid</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ip_id_count\">ip_id_count</a>, <a class=\"id\" href=\"#secure_ip_id\">secure_ip_id</a>(<a class=\"id\" href=\"#daddr\">daddr</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#tcp_ts_stamp\">tcp_ts_stamp</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#unused\">unused</a>);", 
"", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Link the node. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#link_to_pool\">link_to_pool</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#peers\">peers</a>.<a class=\"id\" href=\"#total\">total</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#peers\">peers</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#peers\">peers</a>.<a class=\"id\" href=\"#total\">total</a> >= <a class=\"id\" href=\"#inet_peer_threshold\">inet_peer_threshold</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Remove one less-recently-used entry. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cleanup_once\">cleanup_once</a>(0);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Called with local BH disabled. */</span>", 
"static void <a class=\"id\" href=\"#peer_check_expire\">peer_check_expire</a>(unsigned long <a class=\"id\" href=\"#dummy\">dummy</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ttl\">ttl</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#peers\">peers</a>.<a class=\"id\" href=\"#total\">total</a> >= <a class=\"id\" href=\"#inet_peer_threshold\">inet_peer_threshold</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ttl\">ttl</a> = <a class=\"id\" href=\"#inet_peer_minttl\">inet_peer_minttl</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ttl\">ttl</a> = <a class=\"id\" href=\"#inet_peer_maxttl\">inet_peer_maxttl</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>- (<a class=\"id\" href=\"#inet_peer_maxttl\">inet_peer_maxttl</a> - <a class=\"id\" href=\"#inet_peer_minttl\">inet_peer_minttl</a>) / <a class=\"id\" href=\"#HZ\">HZ</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#peers\">peers</a>.<a class=\"id\" href=\"#total\">total</a> / <a class=\"id\" href=\"#inet_peer_threshold\">inet_peer_threshold</a> * <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#cleanup_once\">cleanup_once</a>(<a class=\"id\" href=\"#ttl\">ttl</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jiffies\">jiffies</a> != <a class=\"id\" href=\"#now\">now</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Trigger the timer after inet_peer_gc_mintime .. inet_peer_gc_maxtime</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * interval depending on the total number of entries (more entries,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * less interval). */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#peers\">peers</a>.<a class=\"id\" href=\"#total\">total</a> >= <a class=\"id\" href=\"#inet_peer_threshold\">inet_peer_threshold</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#peer_periodic_timer\">peer_periodic_timer</a>.<a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#inet_peer_gc_mintime\">inet_peer_gc_mintime</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#peer_periodic_timer\">peer_periodic_timer</a>.<a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#inet_peer_gc_maxtime\">inet_peer_gc_maxtime</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>- (<a class=\"id\" href=\"#inet_peer_gc_maxtime\">inet_peer_gc_maxtime</a> - <a class=\"id\" href=\"#inet_peer_gc_mintime\">inet_peer_gc_mintime</a>) / <a class=\"id\" href=\"#HZ\">HZ</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#peers\">peers</a>.<a class=\"id\" href=\"#total\">total</a> / <a class=\"id\" href=\"#inet_peer_threshold\">inet_peer_threshold</a> * <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_timer\">add_timer</a>(&amp;<a class=\"id\" href=\"#peer_periodic_timer\">peer_periodic_timer</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#inet_putpeer\">inet_putpeer</a>(struct <a class=\"id\" href=\"#inet_peer\">inet_peer</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_bh_disable\">local_bh_disable</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_lock\">atomic_dec_and_lock</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>, &amp;<a class=\"id\" href=\"#unused_peers\">unused_peers</a>.<a class=\"id\" href=\"#lock\">lock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#unused\">unused</a>, &amp;<a class=\"id\" href=\"#unused_peers\">unused_peers</a>.<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#dtime\">dtime</a> = (<a class=\"id\" href=\"#__u32\">__u32</a>)<a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#unused_peers\">unused_peers</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_bh_enable\">local_bh_enable</a>();", 
"}", 
];
xr_frag_insert('l/55/ff9e5cf27d03e100b0154c40dca7bffb13bee1.xr', __xr_tmp);
