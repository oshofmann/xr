var __xr_tmp = [
"<span class=\"comment\">/* i2c-core.c - a device driver for the iic-bus interface<span class=\"ts\"/><span class=\"ts\"/>     */</span>", 
"<span class=\"comment\">/* ------------------------------------------------------------------------- */</span>", 
"<span class=\"comment\">/*   Copyright (C) 1995-99 Simon G. Vogl</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\">    it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\">    the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\">    (at your option) any later version.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\">    GNU General Public License for more details.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\">    along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\">    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.<span class=\"ts\"/><span class=\"ts\"/>     */</span>", 
"<span class=\"comment\">/* ------------------------------------------------------------------------- */</span>", 
"", 
"<span class=\"comment\">/* With some changes from Kyösti Mälkki &lt;kmalkki@cc.hut.fi&gt;.</span>", 
"<span class=\"comment\">   All SMBus-related things are written by Frodo Looijaard &lt;frodol@dds.nl&gt;</span>", 
"<span class=\"comment\">   SMBus 2.0 support by Mark Studebaker &lt;mdsxyz123@yahoo.com&gt; and</span>", 
"<span class=\"comment\">   Jean Delvare &lt;khali@linux-fr.org&gt;</span>", 
"<span class=\"comment\">   Mux support by Rodolfo Giometti &lt;giometti@enneenne.com&gt; and</span>", 
"<span class=\"comment\">   Michael Lawnick &lt;michael.lawnick.ext@nsn.com&gt; */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#i2c\">i2c</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#of_device\">of_device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#completion\">completion</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#irqflags\">irqflags</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rwsem\">rwsem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm_runtime\">pm_runtime</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"i2c-core.h\"", 
"", 
"", 
"<span class=\"comment\">/* core_lock protects i2c_adapter_idr, and guarantees</span>", 
"<span class=\"comment\">   that device detection, deletion of detected devices, and attach_adapter</span>", 
"<span class=\"comment\">   and detach_adapter calls are serialized */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"static <a class=\"id\" href=\"#DEFINE_IDR\">DEFINE_IDR</a>(<a class=\"id\" href=\"#i2c_adapter_idr\">i2c_adapter_idr</a>);", 
"", 
"static struct <a class=\"id\" href=\"#device_type\">device_type</a> <a class=\"id\" href=\"#i2c_client_type\">i2c_client_type</a>;", 
"static int <a class=\"id\" href=\"#i2c_detect\">i2c_detect</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adapter\">adapter</a>, struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>);", 
"", 
"<span class=\"comment\">/* ------------------------------------------------------------------------- */</span>", 
"", 
"static const struct <a class=\"id\" href=\"#i2c_device_id\">i2c_device_id</a> *<a class=\"id\" href=\"#i2c_match_id\">i2c_match_id</a>(const struct <a class=\"id\" href=\"#i2c_device_id\">i2c_device_id</a> *<a class=\"id\" href=\"#id\">id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#name\">name</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#name\">name</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#i2c_device_match\">i2c_device_match</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a><span class=\"ts\"/>*<a class=\"id\" href=\"#client\">client</a> = <a class=\"id\" href=\"#i2c_verify_client\">i2c_verify_client</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a><span class=\"ts\"/>*<a class=\"id\" href=\"#driver\">driver</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#client\">client</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Attempt an OF style match */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#of_driver_match_device\">of_driver_match_device</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#drv\">drv</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#driver\">driver</a> = <a class=\"id\" href=\"#to_i2c_driver\">to_i2c_driver</a>(<a class=\"id\" href=\"#drv\">drv</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* match on an id table if there is one */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#id_table\">id_table</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_match_id\">i2c_match_id</a>(<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#id_table\">id_table</a>, <a class=\"id\" href=\"#client\">client</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a><span class=\"ts\"/><a class=\"id\" href=\"#CONFIG_HOTPLUG\">CONFIG_HOTPLUG</a>", 
"", 
"<span class=\"comment\">/* uevent helps with hotplug: modprobe -q $(MODALIAS) */</span>", 
"static int <a class=\"id\" href=\"#i2c_device_uevent\">i2c_device_uevent</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#kobj_uevent_env\">kobj_uevent_env</a> *<a class=\"id\" href=\"#env\">env</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a><span class=\"ts\"/>*<a class=\"id\" href=\"#client\">client</a> = <a class=\"id\" href=\"#to_i2c_client\">to_i2c_client</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#add_uevent_var\">add_uevent_var</a>(<a class=\"id\" href=\"#env\">env</a>, \"MODALIAS=%s%s\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#I2C_MODULE_PREFIX\">I2C_MODULE_PREFIX</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"uevent\\n\");", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#i2c_device_uevent\">i2c_device_uevent</a><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_HOTPLUG */</span>", 
"", 
"static int <a class=\"id\" href=\"#i2c_device_probe\">i2c_device_probe</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a><span class=\"ts\"/>*<a class=\"id\" href=\"#client\">client</a> = <a class=\"id\" href=\"#i2c_verify_client\">i2c_verify_client</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a><span class=\"ts\"/>*<a class=\"id\" href=\"#driver\">driver</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#client\">client</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#driver\">driver</a> = <a class=\"id\" href=\"#to_i2c_driver\">to_i2c_driver</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#probe\">probe</a> || !<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#id_table\">id_table</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#driver\">driver</a> = <a class=\"id\" href=\"#driver\">driver</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#device_can_wakeup\">device_can_wakeup</a>(&amp;<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_init_wakeup\">device_init_wakeup</a>(&amp;<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#I2C_CLIENT_WAKE\">I2C_CLIENT_WAKE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"probe\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#probe\">probe</a>(<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#i2c_match_id\">i2c_match_id</a>(<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#id_table\">id_table</a>, <a class=\"id\" href=\"#client\">client</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#driver\">driver</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i2c_set_clientdata\">i2c_set_clientdata</a>(<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#i2c_device_remove\">i2c_device_remove</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a><span class=\"ts\"/>*<a class=\"id\" href=\"#client\">client</a> = <a class=\"id\" href=\"#i2c_verify_client\">i2c_verify_client</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a><span class=\"ts\"/>*<a class=\"id\" href=\"#driver\">driver</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#client\">client</a> || !<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#driver\">driver</a> = <a class=\"id\" href=\"#to_i2c_driver\">to_i2c_driver</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#remove\">remove</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"remove\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#remove\">remove</a>(<a class=\"id\" href=\"#client\">client</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#driver\">driver</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i2c_set_clientdata\">i2c_set_clientdata</a>(<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#i2c_device_shutdown\">i2c_device_shutdown</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a> = <a class=\"id\" href=\"#i2c_verify_client\">i2c_verify_client</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#client\">client</a> || !<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#driver\">driver</a> = <a class=\"id\" href=\"#to_i2c_driver\">to_i2c_driver</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#shutdown\">shutdown</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#shutdown\">shutdown</a>(<a class=\"id\" href=\"#client\">client</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_SLEEP\">CONFIG_PM_SLEEP</a>", 
"static int <a class=\"id\" href=\"#i2c_legacy_suspend\">i2c_legacy_suspend</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#mesg\">mesg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a> = <a class=\"id\" href=\"#i2c_verify_client\">i2c_verify_client</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#client\">client</a> || !<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#driver\">driver</a> = <a class=\"id\" href=\"#to_i2c_driver\">to_i2c_driver</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#suspend\">suspend</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#suspend\">suspend</a>(<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#mesg\">mesg</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#i2c_legacy_resume\">i2c_legacy_resume</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a> = <a class=\"id\" href=\"#i2c_verify_client\">i2c_verify_client</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#client\">client</a> || !<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#driver\">driver</a> = <a class=\"id\" href=\"#to_i2c_driver\">to_i2c_driver</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#resume\">resume</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#resume\">resume</a>(<a class=\"id\" href=\"#client\">client</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#i2c_device_pm_suspend\">i2c_device_pm_suspend</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#dev_pm_ops\">dev_pm_ops</a> *<a class=\"id\" href=\"#pm\">pm</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> ? <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#pm\">pm</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pm\">pm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pm_runtime_suspended\">pm_runtime_suspended</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#suspend\">suspend</a> ? <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#suspend\">suspend</a>(<a class=\"id\" href=\"#dev\">dev</a>) : 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_legacy_suspend\">i2c_legacy_suspend</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PMSG_SUSPEND\">PMSG_SUSPEND</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#i2c_device_pm_resume\">i2c_device_pm_resume</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#dev_pm_ops\">dev_pm_ops</a> *<a class=\"id\" href=\"#pm\">pm</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> ? <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#pm\">pm</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pm\">pm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#resume\">resume</a> ? <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#resume\">resume</a>(<a class=\"id\" href=\"#dev\">dev</a>) : 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#i2c_legacy_resume\">i2c_legacy_resume</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#i2c_device_pm_freeze\">i2c_device_pm_freeze</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#dev_pm_ops\">dev_pm_ops</a> *<a class=\"id\" href=\"#pm\">pm</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> ? <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#pm\">pm</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pm\">pm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pm_runtime_suspended\">pm_runtime_suspended</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#freeze\">freeze</a> ? <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#freeze\">freeze</a>(<a class=\"id\" href=\"#dev\">dev</a>) : 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_legacy_suspend\">i2c_legacy_suspend</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PMSG_FREEZE\">PMSG_FREEZE</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#i2c_device_pm_thaw\">i2c_device_pm_thaw</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#dev_pm_ops\">dev_pm_ops</a> *<a class=\"id\" href=\"#pm\">pm</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> ? <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#pm\">pm</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pm\">pm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pm_runtime_suspended\">pm_runtime_suspended</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#thaw\">thaw</a> ? <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#thaw\">thaw</a>(<a class=\"id\" href=\"#dev\">dev</a>) : 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_legacy_resume\">i2c_legacy_resume</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#i2c_device_pm_poweroff\">i2c_device_pm_poweroff</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#dev_pm_ops\">dev_pm_ops</a> *<a class=\"id\" href=\"#pm\">pm</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> ? <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#pm\">pm</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pm\">pm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pm_runtime_suspended\">pm_runtime_suspended</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#poweroff\">poweroff</a> ? <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#poweroff\">poweroff</a>(<a class=\"id\" href=\"#dev\">dev</a>) : 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_legacy_suspend\">i2c_legacy_suspend</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PMSG_HIBERNATE\">PMSG_HIBERNATE</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#i2c_device_pm_restore\">i2c_device_pm_restore</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#dev_pm_ops\">dev_pm_ops</a> *<a class=\"id\" href=\"#pm\">pm</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> ? <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#pm\">pm</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pm\">pm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#restore\">restore</a> ? <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#restore\">restore</a>(<a class=\"id\" href=\"#dev\">dev</a>) : 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#i2c_legacy_resume\">i2c_legacy_resume</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_runtime_disable\">pm_runtime_disable</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_runtime_set_active\">pm_runtime_set_active</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_runtime_enable\">pm_runtime_enable</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"#else <span class=\"comment\">/* !CONFIG_PM_SLEEP */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#i2c_device_pm_suspend\">i2c_device_pm_suspend</a><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#i2c_device_pm_resume\">i2c_device_pm_resume</a><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#i2c_device_pm_freeze\">i2c_device_pm_freeze</a><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#i2c_device_pm_thaw\">i2c_device_pm_thaw</a><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#i2c_device_pm_poweroff\">i2c_device_pm_poweroff</a><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#i2c_device_pm_restore\">i2c_device_pm_restore</a><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_PM_SLEEP */</span>", 
"", 
"static void <a class=\"id\" href=\"#i2c_client_dev_release\">i2c_client_dev_release</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#to_i2c_client\">to_i2c_client</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#show_name\">show_name</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%s\\n\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#type\">type</a> == &amp;<a class=\"id\" href=\"#i2c_client_type\">i2c_client_type</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#to_i2c_client\">to_i2c_client</a>(<a class=\"id\" href=\"#dev\">dev</a>)-><a class=\"id\" href=\"#name\">name</a> : <a class=\"id\" href=\"#to_i2c_adapter\">to_i2c_adapter</a>(<a class=\"id\" href=\"#dev\">dev</a>)-><a class=\"id\" href=\"#name\">name</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#show_modalias\">show_modalias</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a> = <a class=\"id\" href=\"#to_i2c_client\">to_i2c_client</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%s%s\\n\", <a class=\"id\" href=\"#I2C_MODULE_PREFIX\">I2C_MODULE_PREFIX</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#show_name\">show_name</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#modalias\">modalias</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#show_modalias\">show_modalias</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"static struct <a class=\"id\" href=\"#attribute\">attribute</a> *<a class=\"id\" href=\"#i2c_dev_attrs\">i2c_dev_attrs</a>[] = {", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_name\">dev_attr_name</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* modalias helps coldplug:  modprobe $(cat .../modalias) */</span>", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_modalias\">dev_attr_modalias</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#attribute_group\">attribute_group</a> <a class=\"id\" href=\"#i2c_dev_attr_group\">i2c_dev_attr_group</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#attrs\">attrs</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#i2c_dev_attrs\">i2c_dev_attrs</a>,", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#attribute_group\">attribute_group</a> *<a class=\"id\" href=\"#i2c_dev_attr_groups\">i2c_dev_attr_groups</a>[] = {", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#i2c_dev_attr_group\">i2c_dev_attr_group</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#dev_pm_ops\">dev_pm_ops</a> <a class=\"id\" href=\"#i2c_device_pm_ops\">i2c_device_pm_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#suspend\">suspend</a> = <a class=\"id\" href=\"#i2c_device_pm_suspend\">i2c_device_pm_suspend</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#resume\">resume</a> = <a class=\"id\" href=\"#i2c_device_pm_resume\">i2c_device_pm_resume</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#freeze\">freeze</a> = <a class=\"id\" href=\"#i2c_device_pm_freeze\">i2c_device_pm_freeze</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#thaw\">thaw</a> = <a class=\"id\" href=\"#i2c_device_pm_thaw\">i2c_device_pm_thaw</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#poweroff\">poweroff</a> = <a class=\"id\" href=\"#i2c_device_pm_poweroff\">i2c_device_pm_poweroff</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#restore\">restore</a> = <a class=\"id\" href=\"#i2c_device_pm_restore\">i2c_device_pm_restore</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SET_RUNTIME_PM_OPS\">SET_RUNTIME_PM_OPS</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_generic_runtime_suspend\">pm_generic_runtime_suspend</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_generic_runtime_resume\">pm_generic_runtime_resume</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_generic_runtime_idle\">pm_generic_runtime_idle</a>", 
"<span class=\"ts\"/>)", 
"};", 
"", 
"struct <a class=\"id\" href=\"#bus_type\">bus_type</a> <a class=\"id\" href=\"#i2c_bus_type\">i2c_bus_type</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"i2c\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#match\">match</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#i2c_device_match\">i2c_device_match</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#probe\">probe</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#i2c_device_probe\">i2c_device_probe</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#remove\">remove</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#i2c_device_remove\">i2c_device_remove</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#shutdown\">shutdown</a><span class=\"ts\"/>= <a class=\"id\" href=\"#i2c_device_shutdown\">i2c_device_shutdown</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pm\">pm</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#i2c_device_pm_ops\">i2c_device_pm_ops</a>,", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#i2c_bus_type\">i2c_bus_type</a>);", 
"", 
"static struct <a class=\"id\" href=\"#device_type\">device_type</a> <a class=\"id\" href=\"#i2c_client_type\">i2c_client_type</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#groups\">groups</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#i2c_dev_attr_groups\">i2c_dev_attr_groups</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#uevent\">uevent</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#i2c_device_uevent\">i2c_device_uevent</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#i2c_client_dev_release\">i2c_client_dev_release</a>,", 
"};", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_verify_client - return parameter as i2c_client, or NULL</span>", 
"<span class=\"comment\"> * @dev: device, probably from some driver model iterator</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When traversing the driver model tree, perhaps using driver model</span>", 
"<span class=\"comment\"> * iterators like @device_for_each_child(), you can't assume very much</span>", 
"<span class=\"comment\"> * about the nodes you find.  Use this function to avoid oopses caused</span>", 
"<span class=\"comment\"> * by wrongly treating some non-I2C device as an i2c_client.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#i2c_verify_client\">i2c_verify_client</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#type\">type</a> == &amp;<a class=\"id\" href=\"#i2c_client_type\">i2c_client_type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>? <a class=\"id\" href=\"#to_i2c_client\">to_i2c_client</a>(<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>: <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_verify_client\">i2c_verify_client</a>);", 
"", 
"", 
"<span class=\"comment\">/* This is a permissive address validity check, I2C address map constraints</span>", 
"<span class=\"comment\"> * are purposedly not enforced, except for the general call address. */</span>", 
"static int <a class=\"id\" href=\"#i2c_check_client_addr_validity\">i2c_check_client_addr_validity</a>(const struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#I2C_CLIENT_TEN\">I2C_CLIENT_TEN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 10-bit address, all values are valid */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a> &gt; 0x3ff)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 7-bit address, reject the general call address */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a> == 0x00 || <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a> &gt; 0x7f)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* And this is a strict address validity check, used when probing. If a</span>", 
"<span class=\"comment\"> * device uses a reserved address, then it shouldn't be probed. 7-bit</span>", 
"<span class=\"comment\"> * addressing is assumed, 10-bit address devices are rare and should be</span>", 
"<span class=\"comment\"> * explicitly enumerated. */</span>", 
"static int <a class=\"id\" href=\"#i2c_check_addr_validity\">i2c_check_addr_validity</a>(unsigned short <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reserved addresses per I2C specification:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  0x00       General call address / START byte</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  0x01       CBUS address</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  0x02       Reserved for different bus format</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  0x03       Reserved for future purposes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  0x04-0x07  Hs-mode master code</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  0x78-0x7b  10-bit slave addressing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  0x7c-0x7f  Reserved for future purposes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &lt; 0x08 || <a class=\"id\" href=\"#addr\">addr</a> &gt; 0x77)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__i2c_check_addr_busy\">__i2c_check_addr_busy</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#addrp\">addrp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a><span class=\"ts\"/>*<a class=\"id\" href=\"#client\">client</a> = <a class=\"id\" href=\"#i2c_verify_client\">i2c_verify_client</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = *(int *)<a class=\"id\" href=\"#addrp\">addrp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#client\">client</a> && <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a> == <a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* walk up mux tree */</span>", 
"static int <a class=\"id\" href=\"#i2c_check_mux_parents\">i2c_check_mux_parents</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adapter\">adapter</a>, int <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#device_for_each_child\">device_for_each_child</a>(&amp;<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__i2c_check_addr_busy\">__i2c_check_addr_busy</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#result\">result</a> && <a class=\"id\" href=\"#i2c_parent_is_i2c_adapter\">i2c_parent_is_i2c_adapter</a>(<a class=\"id\" href=\"#adapter\">adapter</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#i2c_check_mux_parents\">i2c_check_mux_parents</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#to_i2c_adapter\">to_i2c_adapter</a>(<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>), <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<span class=\"comment\">/* recurse down mux tree */</span>", 
"static int <a class=\"id\" href=\"#i2c_check_mux_children\">i2c_check_mux_children</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#addrp\">addrp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#type\">type</a> == &amp;<a class=\"id\" href=\"#i2c_adapter_type\">i2c_adapter_type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#device_for_each_child\">device_for_each_child</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#addrp\">addrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i2c_check_mux_children\">i2c_check_mux_children</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#__i2c_check_addr_busy\">__i2c_check_addr_busy</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#addrp\">addrp</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#i2c_check_addr_busy\">i2c_check_addr_busy</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adapter\">adapter</a>, int <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i2c_parent_is_i2c_adapter\">i2c_parent_is_i2c_adapter</a>(<a class=\"id\" href=\"#adapter\">adapter</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#i2c_check_mux_parents\">i2c_check_mux_parents</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#to_i2c_adapter\">to_i2c_adapter</a>(<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>), <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#device_for_each_child\">device_for_each_child</a>(&amp;<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i2c_check_mux_children\">i2c_check_mux_children</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_lock_adapter - Get exclusive access to an I2C bus segment</span>", 
"<span class=\"comment\"> * @adapter: Target I2C bus segment</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#i2c_lock_adapter\">i2c_lock_adapter</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adapter\">adapter</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i2c_parent_is_i2c_adapter\">i2c_parent_is_i2c_adapter</a>(<a class=\"id\" href=\"#adapter\">adapter</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i2c_lock_adapter\">i2c_lock_adapter</a>(<a class=\"id\" href=\"#to_i2c_adapter\">to_i2c_adapter</a>(<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>));", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_lock\">rt_mutex_lock</a>(&amp;<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#bus_lock\">bus_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#i2c_lock_adapter\">i2c_lock_adapter</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_trylock_adapter - Try to get exclusive access to an I2C bus segment</span>", 
"<span class=\"comment\"> * @adapter: Target I2C bus segment</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#i2c_trylock_adapter\">i2c_trylock_adapter</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adapter\">adapter</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i2c_parent_is_i2c_adapter\">i2c_parent_is_i2c_adapter</a>(<a class=\"id\" href=\"#adapter\">adapter</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_trylock_adapter\">i2c_trylock_adapter</a>(<a class=\"id\" href=\"#to_i2c_adapter\">to_i2c_adapter</a>(<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>));", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rt_mutex_trylock\">rt_mutex_trylock</a>(&amp;<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#bus_lock\">bus_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_unlock_adapter - Release exclusive access to an I2C bus segment</span>", 
"<span class=\"comment\"> * @adapter: Target I2C bus segment</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#i2c_unlock_adapter\">i2c_unlock_adapter</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adapter\">adapter</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i2c_parent_is_i2c_adapter\">i2c_parent_is_i2c_adapter</a>(<a class=\"id\" href=\"#adapter\">adapter</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i2c_unlock_adapter\">i2c_unlock_adapter</a>(<a class=\"id\" href=\"#to_i2c_adapter\">to_i2c_adapter</a>(<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>));", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_unlock\">rt_mutex_unlock</a>(&amp;<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#bus_lock\">bus_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#i2c_unlock_adapter\">i2c_unlock_adapter</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_new_device - instantiate an i2c device</span>", 
"<span class=\"comment\"> * @adap: the adapter managing the device</span>", 
"<span class=\"comment\"> * @info: describes one I2C device; bus_num is ignored</span>", 
"<span class=\"comment\"> * Context: can sleep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Create an i2c device. Binding is handled through driver model</span>", 
"<span class=\"comment\"> * probe()/remove() methods.  A driver may be bound to this device when we</span>", 
"<span class=\"comment\"> * return from this function, or any later moment (e.g. maybe hotplugging will</span>", 
"<span class=\"comment\"> * load the driver module).  This call is not appropriate for use by mainboard</span>", 
"<span class=\"comment\"> * initialization logic, which usually runs during an arch_initcall() long</span>", 
"<span class=\"comment\"> * before any i2c_adapter could exist.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This returns the new i2c client, which may be saved for later use with</span>", 
"<span class=\"comment\"> * i2c_unregister_device(); or NULL to indicate an error.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *", 
"<a class=\"id\" href=\"#i2c_new_device\">i2c_new_device</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>, struct <a class=\"id\" href=\"#i2c_board_info\">i2c_board_info</a> const *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a><span class=\"ts\"/>*<a class=\"id\" href=\"#client\">client</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof *<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#client\">client</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#adapter\">adapter</a> = <a class=\"id\" href=\"#adap\">adap</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#platform_data\">platform_data</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#platform_data\">platform_data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#archdata\">archdata</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#archdata\">archdata</a> = *<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#archdata\">archdata</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#irq\">irq</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#irq\">irq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#type\">type</a>, sizeof(<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#name\">name</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for address validity */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#i2c_check_client_addr_validity\">i2c_check_client_addr_validity</a>(<a class=\"id\" href=\"#client\">client</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Invalid %d-bit I2C address 0x%02hx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#I2C_CLIENT_TEN\">I2C_CLIENT_TEN</a> ? 10 : 7, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err_silent\">out_err_silent</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for address business */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#i2c_check_addr_busy\">i2c_check_addr_busy</a>(<a class=\"id\" href=\"#adap\">adap</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a> = &amp;<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#bus\">bus</a> = &amp;<a class=\"id\" href=\"#i2c_bus_type\">i2c_bus_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#type\">type</a> = &amp;<a class=\"id\" href=\"#i2c_client_type\">i2c_client_type</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_OF\">CONFIG_OF</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#of_node\">of_node</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#of_node\">of_node</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_name\">dev_set_name</a>(&amp;<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"%d-%04x\", <a class=\"id\" href=\"#i2c_adapter_id\">i2c_adapter_id</a>(<a class=\"id\" href=\"#adap\">adap</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#device_register\">device_register</a>(&amp;<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"client [%s] registered with bus id %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#dev_name\">dev_name</a>(&amp;<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#dev\">dev</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#client\">client</a>;", 
"", 
"<a class=\"id\" href=\"#out_err\">out_err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Failed to register i2c client %s at 0x%02x \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"(%d)\\n\", <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#status\">status</a>);", 
"<a class=\"id\" href=\"#out_err_silent\">out_err_silent</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#client\">client</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#i2c_new_device\">i2c_new_device</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_unregister_device - reverse effect of i2c_new_device()</span>", 
"<span class=\"comment\"> * @client: value returned from i2c_new_device()</span>", 
"<span class=\"comment\"> * Context: can sleep</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#i2c_unregister_device\">i2c_unregister_device</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_unregister\">device_unregister</a>(&amp;<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#i2c_unregister_device\">i2c_unregister_device</a>);", 
"", 
"", 
"static const struct <a class=\"id\" href=\"#i2c_device_id\">i2c_device_id</a> <a class=\"id\" href=\"#dummy_id\">dummy_id</a>[] = {", 
"<span class=\"ts\"/>{ \"dummy\", 0 },", 
"<span class=\"ts\"/>{ },", 
"};", 
"", 
"static int <a class=\"id\" href=\"#dummy_probe\">dummy_probe</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#i2c_device_id\">i2c_device_id</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#dummy_remove\">dummy_remove</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a> <a class=\"id\" href=\"#dummy_driver\">dummy_driver</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/>= \"dummy\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#probe\">probe</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#dummy_probe\">dummy_probe</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#remove\">remove</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#dummy_remove\">dummy_remove</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#id_table\">id_table</a><span class=\"ts\"/>= <a class=\"id\" href=\"#dummy_id\">dummy_id</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_new_dummy - return a new i2c device bound to a dummy driver</span>", 
"<span class=\"comment\"> * @adapter: the adapter managing the device</span>", 
"<span class=\"comment\"> * @address: seven bit address to be used</span>", 
"<span class=\"comment\"> * Context: can sleep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This returns an I2C client bound to the \"dummy\" driver, intended for use</span>", 
"<span class=\"comment\"> * with devices that consume multiple addresses.  Examples of such chips</span>", 
"<span class=\"comment\"> * include various EEPROMS (like 24c04 and 24c08 models).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These dummy devices have two main uses.  First, most I2C and SMBus calls</span>", 
"<span class=\"comment\"> * except i2c_transfer() need a client handle; the dummy will be that handle.</span>", 
"<span class=\"comment\"> * And second, this prevents the specified address from being bound to a</span>", 
"<span class=\"comment\"> * different driver.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This returns the new i2c client, which should be saved for later use with</span>", 
"<span class=\"comment\"> * i2c_unregister_device(); or NULL to indicate an error.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#i2c_new_dummy\">i2c_new_dummy</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adapter\">adapter</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_board_info\">i2c_board_info</a> <a class=\"id\" href=\"#info\">info</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#I2C_BOARD_INFO\">I2C_BOARD_INFO</a>(\"dummy\", <a class=\"id\" href=\"#address\">address</a>),", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_new_device\">i2c_new_device</a>(<a class=\"id\" href=\"#adapter\">adapter</a>, &amp;<a class=\"id\" href=\"#info\">info</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#i2c_new_dummy\">i2c_new_dummy</a>);", 
"", 
"<span class=\"comment\">/* ------------------------------------------------------------------------- */</span>", 
"", 
"<span class=\"comment\">/* I2C bus adapters -- one roots each I2C or SMBUS segment */</span>", 
"", 
"static void <a class=\"id\" href=\"#i2c_adapter_dev_release\">i2c_adapter_dev_release</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a> = <a class=\"id\" href=\"#to_i2c_adapter\">to_i2c_adapter</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev_released\">dev_released</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Let users instantiate I2C devices through sysfs. This can be used when</span>", 
"<span class=\"comment\"> * platform initialization code doesn't contain the proper data for</span>", 
"<span class=\"comment\"> * whatever reason. Also useful for drivers that do device detection and</span>", 
"<span class=\"comment\"> * detection fails, either because the device uses an unexpected address,</span>", 
"<span class=\"comment\"> * or this is a compatible device with different ID register values.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Parameter checking may look overzealous, but we really don't want</span>", 
"<span class=\"comment\"> * the user to provide incorrect parameters.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#i2c_sysfs_new_device\">i2c_sysfs_new_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a> = <a class=\"id\" href=\"#to_i2c_adapter\">to_i2c_adapter</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_board_info\">i2c_board_info</a> <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#blank\">blank</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"The new_device interface is still experimental \"", 
"<span class=\"ts\"/><span class=\"ts\"/> \"and may change in a near future\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#info\">info</a>, 0, sizeof(struct <a class=\"id\" href=\"#i2c_board_info\">i2c_board_info</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blank\">blank</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#buf\">buf</a>, ' ');", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#blank\">blank</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"%s: Missing parameters\\n\", \"new_device\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blank\">blank</a> - <a class=\"id\" href=\"#buf\">buf</a> &gt; <a class=\"id\" href=\"#I2C_NAME_SIZE\">I2C_NAME_SIZE</a> - 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"%s: Invalid device name\\n\", \"new_device\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#blank\">blank</a> - <a class=\"id\" href=\"#buf\">buf</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Parse remaining parameters, reject extra parameters */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#sscanf\">sscanf</a>(++<a class=\"id\" href=\"#blank\">blank</a>, \"%hi%c\", &amp;<a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> &lt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"%s: Can't parse I2C address\\n\", \"new_device\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> &gt; 1  && <a class=\"id\" href=\"#end\">end</a> != '\\n') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"%s: Extra parameters\\n\", \"new_device\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a> = <a class=\"id\" href=\"#i2c_new_device\">i2c_new_device</a>(<a class=\"id\" href=\"#adap\">adap</a>, &amp;<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#client\">client</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Keep track of the added device */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#userspace_clients_lock\">userspace_clients_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#detected\">detected</a>, &amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#userspace_clients\">userspace_clients</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#userspace_clients_lock\">userspace_clients_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"%s: Instantiated device %s at 0x%02hx\\n\", \"new_device\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * And of course let the users delete the devices they instantiated, if</span>", 
"<span class=\"comment\"> * they got it wrong. This interface can only be used to delete devices</span>", 
"<span class=\"comment\"> * instantiated by i2c_sysfs_new_device above. This guarantees that we</span>", 
"<span class=\"comment\"> * don't delete devices to which some kernel code still has references.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Parameter checking may look overzealous, but we really don't want</span>", 
"<span class=\"comment\"> * the user to delete the wrong device.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#i2c_sysfs_delete_device\">i2c_sysfs_delete_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a> = <a class=\"id\" href=\"#to_i2c_adapter\">to_i2c_adapter</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Parse parameters, reject extra parameters */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%hi%c\", &amp;<a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> &lt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"%s: Can't parse I2C address\\n\", \"delete_device\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> &gt; 1  && <a class=\"id\" href=\"#end\">end</a> != '\\n') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"%s: Extra parameters\\n\", \"delete_device\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure the device was added through sysfs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#userspace_clients_lock\">userspace_clients_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#userspace_clients\">userspace_clients</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#detected\">detected</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a> == <a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"%s: Deleting device %s at 0x%02hx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"delete_device\", <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#detected\">detected</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i2c_unregister_device\">i2c_unregister_device</a>(<a class=\"id\" href=\"#client\">client</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#userspace_clients_lock\">userspace_clients_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"%s: Can't find device in list\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"delete_device\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#new_device\">new_device</a>, <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#i2c_sysfs_new_device\">i2c_sysfs_new_device</a>);", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#delete_device\">delete_device</a>, <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#i2c_sysfs_delete_device\">i2c_sysfs_delete_device</a>);", 
"", 
"static struct <a class=\"id\" href=\"#attribute\">attribute</a> *<a class=\"id\" href=\"#i2c_adapter_attrs\">i2c_adapter_attrs</a>[] = {", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_name\">dev_attr_name</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_new_device\">dev_attr_new_device</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_delete_device\">dev_attr_delete_device</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#attribute_group\">attribute_group</a> <a class=\"id\" href=\"#i2c_adapter_attr_group\">i2c_adapter_attr_group</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#attrs\">attrs</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#i2c_adapter_attrs\">i2c_adapter_attrs</a>,", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#attribute_group\">attribute_group</a> *<a class=\"id\" href=\"#i2c_adapter_attr_groups\">i2c_adapter_attr_groups</a>[] = {", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#i2c_adapter_attr_group\">i2c_adapter_attr_group</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#device_type\">device_type</a> <a class=\"id\" href=\"#i2c_adapter_type\">i2c_adapter_type</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#groups\">groups</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#i2c_adapter_attr_groups\">i2c_adapter_attr_groups</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#i2c_adapter_dev_release\">i2c_adapter_dev_release</a>,", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#i2c_adapter_type\">i2c_adapter_type</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_I2C_COMPAT\">CONFIG_I2C_COMPAT</a>", 
"static struct <a class=\"id\" href=\"#class_compat\">class_compat</a> *<a class=\"id\" href=\"#i2c_adapter_compat_class\">i2c_adapter_compat_class</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#i2c_scan_static_board_info\">i2c_scan_static_board_info</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adapter\">adapter</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_devinfo\">i2c_devinfo</a><span class=\"ts\"/>*<a class=\"id\" href=\"#devinfo\">devinfo</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#__i2c_board_lock\">__i2c_board_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#devinfo\">devinfo</a>, &amp;<a class=\"id\" href=\"#__i2c_board_list\">__i2c_board_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#devinfo\">devinfo</a>-><a class=\"id\" href=\"#busnum\">busnum</a> == <a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#nr\">nr</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&& !<a class=\"id\" href=\"#i2c_new_device\">i2c_new_device</a>(<a class=\"id\" href=\"#adapter\">adapter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#devinfo\">devinfo</a>-><a class=\"id\" href=\"#board_info\">board_info</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Can't create device at 0x%02x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devinfo\">devinfo</a>-><a class=\"id\" href=\"#board_info\">board_info</a>.<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#__i2c_board_lock\">__i2c_board_lock</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#i2c_do_add_adapter\">i2c_do_add_adapter</a>(struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Detect supported devices on that bus, and instantiate them */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i2c_detect\">i2c_detect</a>(<a class=\"id\" href=\"#adap\">adap</a>, <a class=\"id\" href=\"#driver\">driver</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Let legacy drivers scan this bus for matching devices */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#attach_adapter\">attach_adapter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We ignore the return code; if it fails, too bad */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#attach_adapter\">attach_adapter</a>(<a class=\"id\" href=\"#adap\">adap</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__process_new_adapter\">__process_new_adapter</a>(struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#d\">d</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_do_add_adapter\">i2c_do_add_adapter</a>(<a class=\"id\" href=\"#to_i2c_driver\">to_i2c_driver</a>(<a class=\"id\" href=\"#d\">d</a>), <a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#i2c_register_adapter\">i2c_register_adapter</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Can't register until after driver model init */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#i2c_bus_type\">i2c_bus_type</a>.<a class=\"id\" href=\"#p\">p</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_list\">out_list</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_init\">rt_mutex_init</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#bus_lock\">bus_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#userspace_clients_lock\">userspace_clients_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#userspace_clients\">userspace_clients</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set default timeout to 1 second if not already set */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#timeout\">timeout</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_name\">dev_set_name</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"i2c-%d\", <a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#bus\">bus</a> = &amp;<a class=\"id\" href=\"#i2c_bus_type\">i2c_bus_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#type\">type</a> = &amp;<a class=\"id\" href=\"#i2c_adapter_type\">i2c_adapter_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#device_register\">device_register</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_list\">out_list</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"adapter [%s] registered\\n\", <a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_I2C_COMPAT\">CONFIG_I2C_COMPAT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#class_compat_create_link\">class_compat_create_link</a>(<a class=\"id\" href=\"#i2c_adapter_compat_class\">i2c_adapter_compat_class</a>, &amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"Failed to create compatibility class link\\n\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* create pre-declared device nodes */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#nr\">nr</a> &lt; <a class=\"id\" href=\"#__i2c_first_dynamic_bus_num\">__i2c_first_dynamic_bus_num</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i2c_scan_static_board_info\">i2c_scan_static_board_info</a>(<a class=\"id\" href=\"#adap\">adap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Notify drivers */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus_for_each_drv\">bus_for_each_drv</a>(&amp;<a class=\"id\" href=\"#i2c_bus_type\">i2c_bus_type</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#adap\">adap</a>, <a class=\"id\" href=\"#__process_new_adapter\">__process_new_adapter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_list\">out_list</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idr_remove\">idr_remove</a>(&amp;<a class=\"id\" href=\"#i2c_adapter_idr\">i2c_adapter_idr</a>, <a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_add_adapter - declare i2c adapter, use dynamic bus number</span>", 
"<span class=\"comment\"> * @adapter: the adapter to add</span>", 
"<span class=\"comment\"> * Context: can sleep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This routine is used to declare an I2C adapter when its bus number</span>", 
"<span class=\"comment\"> * doesn't matter.  Examples: for I2C adapters dynamically added by</span>", 
"<span class=\"comment\"> * USB links or PCI plugin cards.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When this returns zero, a new bus number was allocated and stored</span>", 
"<span class=\"comment\"> * in adap-&gt;nr, and the specified adapter became available for clients.</span>", 
"<span class=\"comment\"> * Otherwise, a negative errno value is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#i2c_add_adapter\">i2c_add_adapter</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adapter\">adapter</a>)", 
"{", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#res\">res</a> = 0;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idr_pre_get\">idr_pre_get</a>(&amp;<a class=\"id\" href=\"#i2c_adapter_idr\">i2c_adapter_idr</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* \"above\" here means \"above or equal to\", sigh */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#idr_get_new_above\">idr_get_new_above</a>(&amp;<a class=\"id\" href=\"#i2c_adapter_idr\">i2c_adapter_idr</a>, <a class=\"id\" href=\"#adapter\">adapter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__i2c_first_dynamic_bus_num\">__i2c_first_dynamic_bus_num</a>, &amp;<a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_register_adapter\">i2c_register_adapter</a>(<a class=\"id\" href=\"#adapter\">adapter</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_add_adapter\">i2c_add_adapter</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_add_numbered_adapter - declare i2c adapter, use static bus number</span>", 
"<span class=\"comment\"> * @adap: the adapter to register (with adap-&gt;nr initialized)</span>", 
"<span class=\"comment\"> * Context: can sleep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This routine is used to declare an I2C adapter when its bus number</span>", 
"<span class=\"comment\"> * matters.  For example, use it for I2C adapters from system-on-chip CPUs,</span>", 
"<span class=\"comment\"> * or otherwise built in to the system's mainboard, and where i2c_board_info</span>", 
"<span class=\"comment\"> * is used to properly configure I2C devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If no devices have pre-been declared for this bus, then be sure to</span>", 
"<span class=\"comment\"> * register the adapter before any dynamically allocated ones.  Otherwise</span>", 
"<span class=\"comment\"> * the required bus ID may not be available.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When this returns zero, the specified adapter became available for</span>", 
"<span class=\"comment\"> * clients using the bus number provided in adap-&gt;nr.  Also, the table</span>", 
"<span class=\"comment\"> * of I2C devices pre-declared using i2c_register_board_info() is scanned,</span>", 
"<span class=\"comment\"> * and the appropriate driver model device nodes are created.  Otherwise, a</span>", 
"<span class=\"comment\"> * negative errno value is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#i2c_add_numbered_adapter\">i2c_add_numbered_adapter</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>)", 
"{", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#nr\">nr</a> &amp; ~<a class=\"id\" href=\"#MAX_ID_MASK\">MAX_ID_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idr_pre_get\">idr_pre_get</a>(&amp;<a class=\"id\" href=\"#i2c_adapter_idr\">i2c_adapter_idr</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* \"above\" here means \"above or equal to\", sigh;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we need the \"equal to\" result to force the result</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#idr_get_new_above\">idr_get_new_above</a>(&amp;<a class=\"id\" href=\"#i2c_adapter_idr\">i2c_adapter_idr</a>, <a class=\"id\" href=\"#adap\">adap</a>, <a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#nr\">nr</a>, &amp;<a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == 0 && <a class=\"id\" href=\"#id\">id</a> != <a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idr_remove\">idr_remove</a>(&amp;<a class=\"id\" href=\"#i2c_adapter_idr\">i2c_adapter_idr</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#i2c_register_adapter\">i2c_register_adapter</a>(<a class=\"id\" href=\"#adap\">adap</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#i2c_add_numbered_adapter\">i2c_add_numbered_adapter</a>);", 
"", 
"static int <a class=\"id\" href=\"#i2c_do_del_adapter\">i2c_do_del_adapter</a>(struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adapter\">adapter</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, *<a class=\"id\" href=\"#_n\">_n</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove the devices we created ourselves as the result of hardware</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * probing (using a driver's detect method) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#_n\">_n</a>, &amp;<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#clients\">clients</a>, <a class=\"id\" href=\"#detected\">detected</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#adapter\">adapter</a> == <a class=\"id\" href=\"#adapter\">adapter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Removing %s at 0x%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#detected\">detected</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i2c_unregister_device\">i2c_unregister_device</a>(<a class=\"id\" href=\"#client\">client</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#detach_adapter\">detach_adapter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#detach_adapter\">detach_adapter</a>(<a class=\"id\" href=\"#adapter\">adapter</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"detach_adapter failed (%d) \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"for driver [%s]\\n\", <a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__unregister_client\">__unregister_client</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#dummy\">dummy</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a> = <a class=\"id\" href=\"#i2c_verify_client\">i2c_verify_client</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#client\">client</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i2c_unregister_device\">i2c_unregister_device</a>(<a class=\"id\" href=\"#client\">client</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__process_removed_adapter\">__process_removed_adapter</a>(struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#d\">d</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_do_del_adapter\">i2c_do_del_adapter</a>(<a class=\"id\" href=\"#to_i2c_driver\">to_i2c_driver</a>(<a class=\"id\" href=\"#d\">d</a>), <a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_del_adapter - unregister I2C adapter</span>", 
"<span class=\"comment\"> * @adap: the adapter being unregistered</span>", 
"<span class=\"comment\"> * Context: can sleep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This unregisters an I2C adapter which was previously registered</span>", 
"<span class=\"comment\"> * by @i2c_add_adapter or @i2c_add_numbered_adapter.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#i2c_del_adapter\">i2c_del_adapter</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First make sure that this adapter was ever added */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = <a class=\"id\" href=\"#idr_find\">idr_find</a>(&amp;<a class=\"id\" href=\"#i2c_adapter_idr\">i2c_adapter_idr</a>, <a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#found\">found</a> != <a class=\"id\" href=\"#adap\">adap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"i2c-core: attempting to delete unregistered \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"adapter [%s]\\n\", <a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Tell drivers about this removal */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#bus_for_each_drv\">bus_for_each_drv</a>(&amp;<a class=\"id\" href=\"#i2c_bus_type\">i2c_bus_type</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#adap\">adap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__process_removed_adapter\">__process_removed_adapter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove devices instantiated from sysfs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#userspace_clients_lock\">userspace_clients_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#userspace_clients\">userspace_clients</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#detected\">detected</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Removing %s at 0x%x\\n\", <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#detected\">detected</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i2c_unregister_device\">i2c_unregister_device</a>(<a class=\"id\" href=\"#client\">client</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#userspace_clients_lock\">userspace_clients_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Detach any active clients. This can't fail, thus we do not</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   checking the returned value. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#device_for_each_child\">device_for_each_child</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#__unregister_client\">__unregister_client</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_I2C_COMPAT\">CONFIG_I2C_COMPAT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_compat_remove_link\">class_compat_remove_link</a>(<a class=\"id\" href=\"#i2c_adapter_compat_class\">i2c_adapter_compat_class</a>, &amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* device name is gone after device_unregister */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"adapter [%s] unregistered\\n\", <a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* clean up the sysfs representation */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev_released\">dev_released</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_unregister\">device_unregister</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* wait for sysfs to drop all references */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev_released\">dev_released</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* free bus id */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idr_remove\">idr_remove</a>(&amp;<a class=\"id\" href=\"#i2c_adapter_idr\">i2c_adapter_idr</a>, <a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear the device structure in case this adapter is ever going to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   added again */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>, 0, sizeof(<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>));", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_del_adapter\">i2c_del_adapter</a>);", 
"", 
"", 
"<span class=\"comment\">/* ------------------------------------------------------------------------- */</span>", 
"", 
"static int <a class=\"id\" href=\"#__process_new_driver\">__process_new_driver</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#type\">type</a> != &amp;<a class=\"id\" href=\"#i2c_adapter_type\">i2c_adapter_type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_do_add_adapter\">i2c_do_add_adapter</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#to_i2c_adapter\">to_i2c_adapter</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * An i2c_driver is used with one or more i2c_client (device) nodes to access</span>", 
"<span class=\"comment\"> * i2c slave chips, on a bus instance associated with some i2c_adapter.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#i2c_register_driver\">i2c_register_driver</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>, struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Can't register until after driver model init */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#i2c_bus_type\">i2c_bus_type</a>.<a class=\"id\" href=\"#p\">p</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* add the driver to the list of i2c drivers in the driver core */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#bus\">bus</a> = &amp;<a class=\"id\" href=\"#i2c_bus_type\">i2c_bus_type</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* When registration returns, the driver core</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will have called probe() for all matching-but-unbound devices.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#driver_register\">driver_register</a>(&amp;<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"i2c-core: driver [%s] registered\\n\", <a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#name\">name</a>);", 
];
xr_frag_insert('l/56/259b00c99e7405989e72c6c206acea5e4e314b.xr', __xr_tmp);
