var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * PCIe Native PME support</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2007 - 2009 Intel Corp</span>", 
"<span class=\"comment\"> * Copyright (C) 2007 - 2009 Shaohua Li &lt;shaohua.li@intel.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2009 Rafael J. Wysocki &lt;rjw@sisk.pl&gt;, Novell Inc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is subject to the terms and conditions of the GNU General Public</span>", 
"<span class=\"comment\"> * License V2.  See the file \"COPYING\" in the main directory of this archive</span>", 
"<span class=\"comment\"> * for more details.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pcieport_if\">pcieport_if</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>-<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm_runtime\">pm_runtime</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"../pci.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"portdrv.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PCI_EXP_RTSTA_PME\">PCI_EXP_RTSTA_PME</a><span class=\"ts\"/>0x10000 <span class=\"comment\">/* PME status */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PCI_EXP_RTSTA_PENDING\">PCI_EXP_RTSTA_PENDING</a><span class=\"ts\"/>0x20000 <span class=\"comment\">/* PME pending */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If this switch is set, MSI will not be used for PCIe PME signaling.  This</span>", 
"<span class=\"comment\"> * causes the PCIe port driver to use INTx interrupts only, but it turns out</span>", 
"<span class=\"comment\"> * that using MSI for PCIe PME signaling doesn't play well with PCIe PME-based</span>", 
"<span class=\"comment\"> * wake-up from system sleep states.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#pcie_pme_msi_disabled\">pcie_pme_msi_disabled</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcie_pme_setup\">pcie_pme_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"nomsi\", 5))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcie_pme_msi_disabled\">pcie_pme_msi_disabled</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"pcie_pme=\", <a class=\"id\" href=\"#pcie_pme_setup\">pcie_pme_setup</a>);", 
"", 
"struct <a class=\"id\" href=\"#pcie_pme_service_data\">pcie_pme_service_data</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pcie_device\">pcie_device</a> *<a class=\"id\" href=\"#srv\">srv</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> <a class=\"id\" href=\"#work\">work</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#noirq\">noirq</a>; <span class=\"comment\">/* Don't enable the PME interrupt used by this service. */</span>", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcie_pme_interrupt_enable - Enable/disable PCIe PME interrupt generation.</span>", 
"<span class=\"comment\"> * @dev: PCIe root port or event collector.</span>", 
"<span class=\"comment\"> * @enable: Enable or disable the interrupt.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pcie_pme_interrupt_enable\">pcie_pme_interrupt_enable</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rtctl_pos\">rtctl_pos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#rtctl\">rtctl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtctl_pos\">rtctl_pos</a> = <a class=\"id\" href=\"#pci_pcie_cap\">pci_pcie_cap</a>(<a class=\"id\" href=\"#dev\">dev</a>) + <a class=\"id\" href=\"#PCI_EXP_RTCTL\">PCI_EXP_RTCTL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#rtctl_pos\">rtctl_pos</a>, &amp;<a class=\"id\" href=\"#rtctl\">rtctl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#enable\">enable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtctl\">rtctl</a> |= <a class=\"id\" href=\"#PCI_EXP_RTCTL_PMEIE\">PCI_EXP_RTCTL_PMEIE</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtctl\">rtctl</a> &= ~<a class=\"id\" href=\"#PCI_EXP_RTCTL_PMEIE\">PCI_EXP_RTCTL_PMEIE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#rtctl_pos\">rtctl_pos</a>, <a class=\"id\" href=\"#rtctl\">rtctl</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcie_pme_clear_status - Clear root port PME interrupt status.</span>", 
"<span class=\"comment\"> * @dev: PCIe root port or event collector.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pcie_pme_clear_status\">pcie_pme_clear_status</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rtsta_pos\">rtsta_pos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#rtsta\">rtsta</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtsta_pos\">rtsta_pos</a> = <a class=\"id\" href=\"#pci_pcie_cap\">pci_pcie_cap</a>(<a class=\"id\" href=\"#dev\">dev</a>) + <a class=\"id\" href=\"#PCI_EXP_RTSTA\">PCI_EXP_RTSTA</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#rtsta_pos\">rtsta_pos</a>, &amp;<a class=\"id\" href=\"#rtsta\">rtsta</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtsta\">rtsta</a> |= <a class=\"id\" href=\"#PCI_EXP_RTSTA_PME\">PCI_EXP_RTSTA_PME</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#rtsta_pos\">rtsta_pos</a>, <a class=\"id\" href=\"#rtsta\">rtsta</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcie_pme_walk_bus - Scan a PCI bus for devices asserting PME#.</span>", 
"<span class=\"comment\"> * @bus: PCI bus to scan.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Scan given PCI bus and all buses under it for devices asserting PME#.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#pcie_pme_walk_bus\">pcie_pme_walk_bus</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#devices\">devices</a>, <a class=\"id\" href=\"#bus_list\">bus_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Skip PCIe devices in case we started from a root port. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pci_is_pcie\">pci_is_pcie</a>(<a class=\"id\" href=\"#dev\">dev</a>) && <a class=\"id\" href=\"#pci_check_pme_status\">pci_check_pme_status</a>(<a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_request_resume\">pm_request_resume</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_wakeup_event\">pci_wakeup_event</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a> && <a class=\"id\" href=\"#pcie_pme_walk_bus\">pcie_pme_walk_bus</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcie_pme_from_pci_bridge - Check if PCIe-PCI bridge generated a PME.</span>", 
"<span class=\"comment\"> * @bus: Secondary bus of the bridge.</span>", 
"<span class=\"comment\"> * @devfn: Device/function number to check.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PME from PCI devices under a PCIe-PCI bridge may be converted to an in-band</span>", 
"<span class=\"comment\"> * PCIe PME message.  In such that case the bridge should use the Requester ID</span>", 
"<span class=\"comment\"> * of device/function number 0 on its secondary bus.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#pcie_pme_from_pci_bridge\">pcie_pme_from_pci_bridge</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#devfn\">devfn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#found\">found</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#devfn\">devfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#pci_dev_get\">pci_dev_get</a>(<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_is_pcie\">pci_is_pcie</a>(<a class=\"id\" href=\"#dev\">dev</a>) && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pcie_type\">pcie_type</a> == <a class=\"id\" href=\"#PCI_EXP_TYPE_PCI_BRIDGE\">PCI_EXP_TYPE_PCI_BRIDGE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#pci_bus_sem\">pci_bus_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pcie_pme_walk_bus\">pcie_pme_walk_bus</a>(<a class=\"id\" href=\"#bus\">bus</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#pci_bus_sem\">pci_bus_sem</a>);", 
];
xr_frag_insert('l/56/599b75b49a2586d2808f7ed185c7087f2d9290.xr', __xr_tmp);
