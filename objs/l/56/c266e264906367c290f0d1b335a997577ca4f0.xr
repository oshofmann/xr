var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/kernel/hrtimer.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright(C) 2005-2006, Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>", 
"<span class=\"comment\"> *  Copyright(C) 2005-2007, Red Hat, Inc., Ingo Molnar</span>", 
"<span class=\"comment\"> *  Copyright(C) 2006-2007  Timesys Corp., Thomas Gleixner</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  High-resolution kernel timers</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  In contrast to the low-resolution timeout API implemented in</span>", 
"<span class=\"comment\"> *  kernel/timer.c, hrtimers provide finer resolution and accuracy</span>", 
"<span class=\"comment\"> *  depending on system configuration and capabilities.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  These timers are currently used for:</span>", 
"<span class=\"comment\"> *   - itimers</span>", 
"<span class=\"comment\"> *   - POSIX timers</span>", 
"<span class=\"comment\"> *   - nanosleep</span>", 
"<span class=\"comment\"> *   - precise in-kernel timing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Started by: Thomas Gleixner and Ingo Molnar</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Credits:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>based on kernel/timer.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Help, testing, suggestions, bugfixes, improvements were</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>provided by:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>George Anzinger, Andrew Morton, Steven Rostedt, Roman Zippel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>et. al.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  For licencing details see kernel-base/COPYING</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hrtimer\">hrtimer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tick\">tick</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugobjects\">debugobjects</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The timer bases:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: If we want to add new timer bases, we have to skip the two</span>", 
"<span class=\"comment\"> * clock ids captured by the cpu-timers. We do this by holding empty</span>", 
"<span class=\"comment\"> * entries rather than doing math adjustment of the clock ids.</span>", 
"<span class=\"comment\"> * This ensures that we capture erroneous accesses to these clock ids</span>", 
"<span class=\"comment\"> * rather than moving them into the range of valid clock id's.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#hrtimer_cpu_base\">hrtimer_cpu_base</a>, <a class=\"id\" href=\"#hrtimer_bases\">hrtimer_bases</a>) =", 
"{", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#clock_base\">clock_base</a> =", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#CLOCK_REALTIME\">CLOCK_REALTIME</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#get_time\">get_time</a> = &amp;<a class=\"id\" href=\"#ktime_get_real\">ktime_get_real</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#resolution\">resolution</a> = <a class=\"id\" href=\"#KTIME_LOW_RES\">KTIME_LOW_RES</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/><span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#CLOCK_MONOTONIC\">CLOCK_MONOTONIC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#get_time\">get_time</a> = &amp;<a class=\"id\" href=\"#ktime_get\">ktime_get</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#resolution\">resolution</a> = <a class=\"id\" href=\"#KTIME_LOW_RES\">KTIME_LOW_RES</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>}", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get the coarse grained time at the softirq based on xtime and</span>", 
"<span class=\"comment\"> * wall_to_monotonic.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#hrtimer_get_softirq_time\">hrtimer_get_softirq_time</a>(struct <a class=\"id\" href=\"#hrtimer_cpu_base\">hrtimer_cpu_base</a> *<a class=\"id\" href=\"#base\">base</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#xtim\">xtim</a>, <a class=\"id\" href=\"#tomono\">tomono</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#xts\">xts</a>, <a class=\"id\" href=\"#tom\">tom</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#seq\">seq</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#read_seqbegin\">read_seqbegin</a>(&amp;<a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xts\">xts</a> = <a class=\"id\" href=\"#__current_kernel_time\">__current_kernel_time</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tom\">tom</a> = <a class=\"id\" href=\"#__get_wall_to_monotonic\">__get_wall_to_monotonic</a>();", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#read_seqretry\">read_seqretry</a>(&amp;<a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>, <a class=\"id\" href=\"#seq\">seq</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xtim\">xtim</a> = <a class=\"id\" href=\"#timespec_to_ktime\">timespec_to_ktime</a>(<a class=\"id\" href=\"#xts\">xts</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tomono\">tomono</a> = <a class=\"id\" href=\"#timespec_to_ktime\">timespec_to_ktime</a>(<a class=\"id\" href=\"#tom\">tom</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#clock_base\">clock_base</a>[<a class=\"id\" href=\"#CLOCK_REALTIME\">CLOCK_REALTIME</a>].<a class=\"id\" href=\"#softirq_time\">softirq_time</a> = <a class=\"id\" href=\"#xtim\">xtim</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#clock_base\">clock_base</a>[<a class=\"id\" href=\"#CLOCK_MONOTONIC\">CLOCK_MONOTONIC</a>].<a class=\"id\" href=\"#softirq_time\">softirq_time</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ktime_add\">ktime_add</a>(<a class=\"id\" href=\"#xtim\">xtim</a>, <a class=\"id\" href=\"#tomono\">tomono</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Functions and macros which are different for UP/SMP systems are kept in a</span>", 
"<span class=\"comment\"> * single place</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We are using hashed locking: holding per_cpu(hrtimer_bases)[n].lock</span>", 
"<span class=\"comment\"> * means that all timers which are tied to this base via timer-&gt;base are</span>", 
"<span class=\"comment\"> * locked, and the base itself is locked too.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * So __run_timers/migrate_timers can safely modify all timers which could</span>", 
"<span class=\"comment\"> * be found on the lists/queues.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When the timer's base is locked, and the timer removed from list, it is</span>", 
"<span class=\"comment\"> * possible to set timer-&gt;base = NULL and drop the lock: the timer remains</span>", 
"<span class=\"comment\"> * locked.</span>", 
"<span class=\"comment\"> */</span>", 
"static", 
"struct <a class=\"id\" href=\"#hrtimer_clock_base\">hrtimer_clock_base</a> *<a class=\"id\" href=\"#lock_hrtimer_base\">lock_hrtimer_base</a>(const struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_clock_base\">hrtimer_clock_base</a> *<a class=\"id\" href=\"#base\">base</a>;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#base\">base</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#lock\">lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#base\">base</a> == <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The timer has migrated to another CPU: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#lock\">lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get the preferred target CPU for NOHZ</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#hrtimer_get_target\">hrtimer_get_target</a>(int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, int <a class=\"id\" href=\"#pinned\">pinned</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pinned\">pinned</a> && <a class=\"id\" href=\"#get_sysctl_timer_migration\">get_sysctl_timer_migration</a>() && <a class=\"id\" href=\"#idle_cpu\">idle_cpu</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#get_nohz_timer_target\">get_nohz_timer_target</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#this_cpu\">this_cpu</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * With HIGHRES=y we do not migrate the timer when it is expiring</span>", 
"<span class=\"comment\"> * before the next event on the target cpu because we cannot reprogram</span>", 
"<span class=\"comment\"> * the target cpu hardware and we would cause it to fire late.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with cpu_base-&gt;lock of target cpu held.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#hrtimer_check_target\">hrtimer_check_target</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>, struct <a class=\"id\" href=\"#hrtimer_clock_base\">hrtimer_clock_base</a> *<a class=\"id\" href=\"#new_base\">new_base</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGH_RES_TIMERS\">CONFIG_HIGH_RES_TIMERS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#expires\">expires</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_base\">new_base</a>-><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#hres_active\">hres_active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#hrtimer_get_expires\">hrtimer_get_expires</a>(<a class=\"id\" href=\"#timer\">timer</a>), <a class=\"id\" href=\"#new_base\">new_base</a>-><a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#tv64\">tv64</a> <= <a class=\"id\" href=\"#new_base\">new_base</a>-><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#expires_next\">expires_next</a>.<a class=\"id\" href=\"#tv64\">tv64</a>;", 
"#else", 
"<span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Switch the timer base to the current CPU when possible.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#hrtimer_clock_base\">hrtimer_clock_base</a> *", 
"<a class=\"id\" href=\"#switch_hrtimer_base\">switch_hrtimer_base</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>, struct <a class=\"id\" href=\"#hrtimer_clock_base\">hrtimer_clock_base</a> *<a class=\"id\" href=\"#base\">base</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#pinned\">pinned</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_clock_base\">hrtimer_clock_base</a> *<a class=\"id\" href=\"#new_base\">new_base</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_cpu_base\">hrtimer_cpu_base</a> *<a class=\"id\" href=\"#new_cpu_base\">new_cpu_base</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#this_cpu\">this_cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#hrtimer_get_target\">hrtimer_get_target</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#pinned\">pinned</a>);", 
"", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_cpu_base\">new_cpu_base</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#hrtimer_bases\">hrtimer_bases</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_base\">new_base</a> = &amp;<a class=\"id\" href=\"#new_cpu_base\">new_cpu_base</a>-><a class=\"id\" href=\"#clock_base\">clock_base</a>[<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#index\">index</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a> != <a class=\"id\" href=\"#new_base\">new_base</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We are trying to move timer to new_base.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * However we can't change timer's base while it is running,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so we keep it on the same CPU. No hassle vs. reprogramming</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the event source in the high resolution case. The softirq</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * code will take care of this when the timer function has</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * completed. There is no conflict as we hold the lock until</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the timer is enqueued.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#hrtimer_callback_running\">hrtimer_callback_running</a>(<a class=\"id\" href=\"#timer\">timer</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#base\">base</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* See the comment in lock_timer_base() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#new_base\">new_base</a>-><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#this_cpu\">this_cpu</a> && <a class=\"id\" href=\"#hrtimer_check_target\">hrtimer_check_target</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#new_base\">new_base</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#this_cpu\">this_cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#new_base\">new_base</a>-><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#new_base\">new_base</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new_base\">new_base</a>;", 
"}", 
"", 
"#else <span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#hrtimer_clock_base\">hrtimer_clock_base</a> *", 
"<a class=\"id\" href=\"#lock_hrtimer_base\">lock_hrtimer_base</a>(const struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>, unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_clock_base\">hrtimer_clock_base</a> *<a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#lock\">lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#base\">base</a>;", 
"}", 
"", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#switch_hrtimer_base\">switch_hrtimer_base</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#b\">b</a>)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* !CONFIG_SMP */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Functions for the union type storage format of ktime_t which are</span>", 
"<span class=\"comment\"> * too large for inlining:</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> &lt; 64", 
"# <a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_KTIME_SCALAR\">CONFIG_KTIME_SCALAR</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ktime_add_ns - Add a scalar nanoseconds value to a ktime_t variable</span>", 
"<span class=\"comment\"> * @kt:<span class=\"ts\"/><span class=\"ts\"/>addend</span>", 
"<span class=\"comment\"> * @nsec:<span class=\"ts\"/>the scalar nsec value to add</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the sum of kt and nsec in ktime_t format</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#ktime_add_ns\">ktime_add_ns</a>(const <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#kt\">kt</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#nsec\">nsec</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#nsec\">nsec</a> &lt; <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#nsec\">nsec</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rem\">rem</a> = <a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#nsec\">nsec</a>, <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#ktime_set\">ktime_set</a>((long)<a class=\"id\" href=\"#nsec\">nsec</a>, <a class=\"id\" href=\"#rem\">rem</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ktime_add\">ktime_add</a>(<a class=\"id\" href=\"#kt\">kt</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ktime_add_ns\">ktime_add_ns</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ktime_sub_ns - Subtract a scalar nanoseconds value from a ktime_t variable</span>", 
"<span class=\"comment\"> * @kt:<span class=\"ts\"/><span class=\"ts\"/>minuend</span>", 
"<span class=\"comment\"> * @nsec:<span class=\"ts\"/>the scalar nsec value to subtract</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the subtraction of @nsec from @kt in ktime_t format</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#ktime_sub_ns\">ktime_sub_ns</a>(const <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#kt\">kt</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#nsec\">nsec</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#nsec\">nsec</a> &lt; <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#nsec\">nsec</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rem\">rem</a> = <a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#nsec\">nsec</a>, <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#ktime_set\">ktime_set</a>((long)<a class=\"id\" href=\"#nsec\">nsec</a>, <a class=\"id\" href=\"#rem\">rem</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#kt\">kt</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ktime_sub_ns\">ktime_sub_ns</a>);", 
"# <a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_KTIME_SCALAR */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Divide a ktime value by a nanosecond value</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ktime_divns\">ktime_divns</a>(const <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#kt\">kt</a>, <a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#div\">div</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#dclc\">dclc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sft\">sft</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dclc\">dclc</a> = <a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#kt\">kt</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure the divisor is less than 2^32: */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#div\">div</a> >> 32) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sft\">sft</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#div\">div</a> >>= 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dclc\">dclc</a> >>= <a class=\"id\" href=\"#sft\">sft</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#dclc\">dclc</a>, (unsigned long) <a class=\"id\" href=\"#div\">div</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dclc\">dclc</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* BITS_PER_LONG &gt;= 64 */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add two ktime values and do a safety check for overflow:</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#ktime_add_safe\">ktime_add_safe</a>(const <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#lhs\">lhs</a>, const <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#rhs\">rhs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#ktime_add\">ktime_add</a>(<a class=\"id\" href=\"#lhs\">lhs</a>, <a class=\"id\" href=\"#rhs\">rhs</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We use KTIME_SEC_MAX here, the maximum timeout which we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * return to user space in a timespec:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &lt; 0 || <a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &lt; <a class=\"id\" href=\"#lhs\">lhs</a>.<a class=\"id\" href=\"#tv64\">tv64</a> || <a class=\"id\" href=\"#res\">res</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &lt; <a class=\"id\" href=\"#rhs\">rhs</a>.<a class=\"id\" href=\"#tv64\">tv64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#ktime_set\">ktime_set</a>(<a class=\"id\" href=\"#KTIME_SEC_MAX\">KTIME_SEC_MAX</a>, 0);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ktime_add_safe\">ktime_add_safe</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_OBJECTS_TIMERS\">CONFIG_DEBUG_OBJECTS_TIMERS</a>", 
"", 
"static struct <a class=\"id\" href=\"#debug_obj_descr\">debug_obj_descr</a> <a class=\"id\" href=\"#hrtimer_debug_descr\">hrtimer_debug_descr</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fixup_init is called when:</span>", 
"<span class=\"comment\"> * - an active object is initialized</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#hrtimer_fixup_init\">hrtimer_fixup_init</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, enum <a class=\"id\" href=\"#debug_obj_state\">debug_obj_state</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ODEBUG_STATE_ACTIVE\">ODEBUG_STATE_ACTIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_cancel\">hrtimer_cancel</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_object_init\">debug_object_init</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#hrtimer_debug_descr\">hrtimer_debug_descr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fixup_activate is called when:</span>", 
"<span class=\"comment\"> * - an active object is activated</span>", 
"<span class=\"comment\"> * - an unknown object is activated (might be a statically initialized object)</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#hrtimer_fixup_activate\">hrtimer_fixup_activate</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, enum <a class=\"id\" href=\"#debug_obj_state\">debug_obj_state</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#state\">state</a>) {", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ODEBUG_STATE_NOTAVAILABLE\">ODEBUG_STATE_NOTAVAILABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ODEBUG_STATE_ACTIVE\">ODEBUG_STATE_ACTIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fixup_free is called when:</span>", 
"<span class=\"comment\"> * - an active object is freed</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#hrtimer_fixup_free\">hrtimer_fixup_free</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, enum <a class=\"id\" href=\"#debug_obj_state\">debug_obj_state</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ODEBUG_STATE_ACTIVE\">ODEBUG_STATE_ACTIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_cancel\">hrtimer_cancel</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_object_free\">debug_object_free</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#hrtimer_debug_descr\">hrtimer_debug_descr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#debug_obj_descr\">debug_obj_descr</a> <a class=\"id\" href=\"#hrtimer_debug_descr\">hrtimer_debug_descr</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"hrtimer\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fixup_init\">fixup_init</a><span class=\"ts\"/>= <a class=\"id\" href=\"#hrtimer_fixup_init\">hrtimer_fixup_init</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fixup_activate\">fixup_activate</a><span class=\"ts\"/>= <a class=\"id\" href=\"#hrtimer_fixup_activate\">hrtimer_fixup_activate</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fixup_free\">fixup_free</a><span class=\"ts\"/>= <a class=\"id\" href=\"#hrtimer_fixup_free\">hrtimer_fixup_free</a>,", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_hrtimer_init\">debug_hrtimer_init</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_init\">debug_object_init</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#hrtimer_debug_descr\">hrtimer_debug_descr</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_hrtimer_activate\">debug_hrtimer_activate</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_activate\">debug_object_activate</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#hrtimer_debug_descr\">hrtimer_debug_descr</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_hrtimer_deactivate\">debug_hrtimer_deactivate</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_deactivate\">debug_object_deactivate</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#hrtimer_debug_descr\">hrtimer_debug_descr</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_hrtimer_free\">debug_hrtimer_free</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_free\">debug_object_free</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#hrtimer_debug_descr\">hrtimer_debug_descr</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__hrtimer_init\">__hrtimer_init</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#clock_id\">clock_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   enum <a class=\"id\" href=\"#hrtimer_mode\">hrtimer_mode</a> <a class=\"id\" href=\"#mode\">mode</a>);", 
"", 
"void <a class=\"id\" href=\"#hrtimer_init_on_stack\">hrtimer_init_on_stack</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#clock_id\">clock_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   enum <a class=\"id\" href=\"#hrtimer_mode\">hrtimer_mode</a> <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_init_on_stack\">debug_object_init_on_stack</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#hrtimer_debug_descr\">hrtimer_debug_descr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__hrtimer_init\">__hrtimer_init</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#clock_id\">clock_id</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hrtimer_init_on_stack\">hrtimer_init_on_stack</a>);", 
"", 
"void <a class=\"id\" href=\"#destroy_hrtimer_on_stack\">destroy_hrtimer_on_stack</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_free\">debug_object_free</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#hrtimer_debug_descr\">hrtimer_debug_descr</a>);", 
"}", 
"", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_hrtimer_init\">debug_hrtimer_init</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_hrtimer_activate\">debug_hrtimer_activate</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_hrtimer_deactivate\">debug_hrtimer_deactivate</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>) { }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#debug_init\">debug_init</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#clockid\">clockid</a>,", 
"<span class=\"ts\"/>   enum <a class=\"id\" href=\"#hrtimer_mode\">hrtimer_mode</a> <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_hrtimer_init\">debug_hrtimer_init</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_hrtimer_init\">trace_hrtimer_init</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#clockid\">clockid</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_activate\">debug_activate</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_hrtimer_activate\">debug_hrtimer_activate</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_hrtimer_start\">trace_hrtimer_start</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_deactivate\">debug_deactivate</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_hrtimer_deactivate\">debug_hrtimer_deactivate</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_hrtimer_cancel\">trace_hrtimer_cancel</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"}", 
"", 
"<span class=\"comment\">/* High resolution timer related functions */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGH_RES_TIMERS\">CONFIG_HIGH_RES_TIMERS</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * High resolution timer enabled ?</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#hrtimer_hres_enabled\">hrtimer_hres_enabled</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>  = 1;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Enable / Disable high resolution mode</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_hrtimer_hres\">setup_hrtimer_hres</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"off\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_hres_enabled\">hrtimer_hres_enabled</a> = 0;", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"on\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_hres_enabled\">hrtimer_hres_enabled</a> = 1;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"highres=\", <a class=\"id\" href=\"#setup_hrtimer_hres\">setup_hrtimer_hres</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * hrtimer_high_res_enabled - query, if the highres mode is enabled</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#hrtimer_is_hres_enabled\">hrtimer_is_hres_enabled</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hrtimer_hres_enabled\">hrtimer_hres_enabled</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Is the high resolution mode active ?</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#hrtimer_hres_active\">hrtimer_hres_active</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#hrtimer_bases\">hrtimer_bases</a>).<a class=\"id\" href=\"#hres_active\">hres_active</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Reprogram the event source with checking both queues for the</span>", 
"<span class=\"comment\"> * next event</span>", 
"<span class=\"comment\"> * Called with interrupts disabled and base-&gt;lock held</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#hrtimer_force_reprogram\">hrtimer_force_reprogram</a>(struct <a class=\"id\" href=\"#hrtimer_cpu_base\">hrtimer_cpu_base</a> *<a class=\"id\" href=\"#cpu_base\">cpu_base</a>, int <a class=\"id\" href=\"#skip_equal\">skip_equal</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_clock_base\">hrtimer_clock_base</a> *<a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#clock_base\">clock_base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#expires_next\">expires_next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#expires_next\">expires_next</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#HRTIMER_MAX_CLOCK_BASES\">HRTIMER_MAX_CLOCK_BASES</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#base\">base</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#first\">first</a>, struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#hrtimer_get_expires\">hrtimer_get_expires</a>(<a class=\"id\" href=\"#timer\">timer</a>), <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * clock_was_set() has changed base-&gt;offset so the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * result might be negative. Fix it up to prevent a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * false positive in clockevents_program_event()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &lt; <a class=\"id\" href=\"#expires_next\">expires_next</a>.<a class=\"id\" href=\"#tv64\">tv64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires_next\">expires_next</a> = <a class=\"id\" href=\"#expires\">expires</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skip_equal\">skip_equal</a> && <a class=\"id\" href=\"#expires_next\">expires_next</a>.<a class=\"id\" href=\"#tv64\">tv64</a> == <a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#expires_next\">expires_next</a>.<a class=\"id\" href=\"#tv64\">tv64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#expires_next\">expires_next</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#expires_next\">expires_next</a>.<a class=\"id\" href=\"#tv64\">tv64</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#expires_next\">expires_next</a>.<a class=\"id\" href=\"#tv64\">tv64</a> != <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_program_event\">tick_program_event</a>(<a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#expires_next\">expires_next</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Shared reprogramming for clock_realtime and clock_monotonic</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When a timer is enqueued and expires earlier than the already enqueued</span>", 
"<span class=\"comment\"> * timers, we have to check, whether it expires earlier than the timer for</span>", 
"<span class=\"comment\"> * which the clock event device was armed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with interrupts disabled and base-&gt;cpu_base.lock held</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#hrtimer_reprogram\">hrtimer_reprogram</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#hrtimer_clock_base\">hrtimer_clock_base</a> *<a class=\"id\" href=\"#base\">base</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_cpu_base\">hrtimer_cpu_base</a> *<a class=\"id\" href=\"#cpu_base\">cpu_base</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#hrtimer_bases\">hrtimer_bases</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#hrtimer_get_expires\">hrtimer_get_expires</a>(<a class=\"id\" href=\"#timer\">timer</a>), <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#hrtimer_get_expires_tv64\">hrtimer_get_expires_tv64</a>(<a class=\"id\" href=\"#timer\">timer</a>) &lt; 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When the callback is running, we do not reprogram the clock event</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * device. The timer callback is either running on a different CPU or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the callback is executed in the hrtimer_interrupt context. The</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reprogramming is handled either by the softirq, which called the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * callback or at the end of the hrtimer_interrupt.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hrtimer_callback_running\">hrtimer_callback_running</a>(<a class=\"id\" href=\"#timer\">timer</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CLOCK_REALTIME timer might be requested with an absolute</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * expiry time which is less than base-&gt;offset. Nothing wrong</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * about that, just avoid to call into the tick code, which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * has now objections against negative expiry values.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ETIME\">ETIME</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#tv64\">tv64</a> >= <a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#expires_next\">expires_next</a>.<a class=\"id\" href=\"#tv64\">tv64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If a hang was detected in the last timer interrupt then we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do not schedule a timer which is earlier than the expiry</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which we enforced in the hang detection. We want the system</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to make progress.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#hang_detected\">hang_detected</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Clockevents returns -ETIME, when the event was in the past.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#tick_program_event\">tick_program_event</a>(<a class=\"id\" href=\"#expires\">expires</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR_VALUE\">IS_ERR_VALUE</a>(<a class=\"id\" href=\"#res\">res</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#expires_next\">expires_next</a> = <a class=\"id\" href=\"#expires\">expires</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Retrigger next event is called after clock was set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with interrupts disabled via on_each_cpu()</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#retrigger_next_event\">retrigger_next_event</a>(void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_cpu_base\">hrtimer_cpu_base</a> *<a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#realtime_offset\">realtime_offset</a>, <a class=\"id\" href=\"#wtm\">wtm</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#seq\">seq</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hrtimer_hres_active\">hrtimer_hres_active</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#read_seqbegin\">read_seqbegin</a>(&amp;<a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wtm\">wtm</a> = <a class=\"id\" href=\"#__get_wall_to_monotonic\">__get_wall_to_monotonic</a>();", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#read_seqretry\">read_seqretry</a>(&amp;<a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>, <a class=\"id\" href=\"#seq\">seq</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_normalized_timespec\">set_normalized_timespec</a>(&amp;<a class=\"id\" href=\"#realtime_offset\">realtime_offset</a>, -<a class=\"id\" href=\"#wtm\">wtm</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>, -<a class=\"id\" href=\"#wtm\">wtm</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#hrtimer_bases\">hrtimer_bases</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Adjust CLOCK_REALTIME offset */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#clock_base\">clock_base</a>[<a class=\"id\" href=\"#CLOCK_REALTIME\">CLOCK_REALTIME</a>].<a class=\"id\" href=\"#offset\">offset</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timespec_to_ktime\">timespec_to_ktime</a>(<a class=\"id\" href=\"#realtime_offset\">realtime_offset</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_force_reprogram\">hrtimer_force_reprogram</a>(<a class=\"id\" href=\"#base\">base</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Clock realtime was set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Change the offset of the realtime clock vs. the monotonic</span>", 
"<span class=\"comment\"> * clock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We might have to reprogram the high resolution timer interrupt. On</span>", 
"<span class=\"comment\"> * SMP we call the architecture specific code to retrigger _all_ high</span>", 
"<span class=\"comment\"> * resolution timer interrupts. On UP we just disable interrupts and</span>", 
"<span class=\"comment\"> * call the high resolution interrupt code.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#clock_was_set\">clock_was_set</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Retrigger the CPU local events everywhere */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#retrigger_next_event\">retrigger_next_event</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * During resume we might have to reprogram the high resolution timer</span>", 
"<span class=\"comment\"> * interrupt (on the local CPU):</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#hres_timers_resume\">hres_timers_resume</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(!<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"hres_timers_resume() called with IRQs enabled!\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retrigger_next_event\">retrigger_next_event</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize the high resolution related parts of cpu_base</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hrtimer_init_hres\">hrtimer_init_hres</a>(struct <a class=\"id\" href=\"#hrtimer_cpu_base\">hrtimer_cpu_base</a> *<a class=\"id\" href=\"#base\">base</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#expires_next\">expires_next</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#hres_active\">hres_active</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize the high resolution related parts of a hrtimer</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hrtimer_init_timer_hres\">hrtimer_init_timer_hres</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When High resolution timers are active, try to reprogram. Note, that in case</span>", 
"<span class=\"comment\"> * the state has HRTIMER_STATE_CALLBACK set, no reprogramming and no expiry</span>", 
"<span class=\"comment\"> * check happens. The timer gets enqueued into the rbtree. The reprogramming</span>", 
"<span class=\"comment\"> * and expiry check is done in the hrtimer_interrupt or in the softirq.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#hrtimer_enqueue_reprogram\">hrtimer_enqueue_reprogram</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#hrtimer_clock_base\">hrtimer_clock_base</a> *<a class=\"id\" href=\"#base\">base</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#wakeup\">wakeup</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#hres_active\">hres_active</a> && <a class=\"id\" href=\"#hrtimer_reprogram\">hrtimer_reprogram</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#base\">base</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wakeup\">wakeup</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raise_softirq_irqoff\">raise_softirq_irqoff</a>(<a class=\"id\" href=\"#HRTIMER_SOFTIRQ\">HRTIMER_SOFTIRQ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__raise_softirq_irqoff\">__raise_softirq_irqoff</a>(<a class=\"id\" href=\"#HRTIMER_SOFTIRQ\">HRTIMER_SOFTIRQ</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Switch to high resolution mode</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#hrtimer_switch_to_hres\">hrtimer_switch_to_hres</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_cpu_base\">hrtimer_cpu_base</a> *<a class=\"id\" href=\"#base\">base</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#hrtimer_bases\">hrtimer_bases</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#hres_active\">hres_active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tick_init_highres\">tick_init_highres</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Could not switch to high resolution \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"mode on CPU %d\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#hres_active\">hres_active</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#clock_base\">clock_base</a>[<a class=\"id\" href=\"#CLOCK_REALTIME\">CLOCK_REALTIME</a>].<a class=\"id\" href=\"#resolution\">resolution</a> = <a class=\"id\" href=\"#KTIME_HIGH_RES\">KTIME_HIGH_RES</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#clock_base\">clock_base</a>[<a class=\"id\" href=\"#CLOCK_MONOTONIC\">CLOCK_MONOTONIC</a>].<a class=\"id\" href=\"#resolution\">resolution</a> = <a class=\"id\" href=\"#KTIME_HIGH_RES\">KTIME_HIGH_RES</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tick_setup_sched_timer\">tick_setup_sched_timer</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* \"Retrigger\" the interrupt to get things going */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retrigger_next_event\">retrigger_next_event</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"#else", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#hrtimer_hres_active\">hrtimer_hres_active</a>(void) { return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#hrtimer_is_hres_enabled\">hrtimer_is_hres_enabled</a>(void) { return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#hrtimer_switch_to_hres\">hrtimer_switch_to_hres</a>(void) { return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#hrtimer_force_reprogram\">hrtimer_force_reprogram</a>(struct <a class=\"id\" href=\"#hrtimer_cpu_base\">hrtimer_cpu_base</a> *<a class=\"id\" href=\"#base\">base</a>, int <a class=\"id\" href=\"#skip_equal\">skip_equal</a>) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#hrtimer_enqueue_reprogram\">hrtimer_enqueue_reprogram</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#hrtimer_clock_base\">hrtimer_clock_base</a> *<a class=\"id\" href=\"#base\">base</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#wakeup\">wakeup</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hrtimer_init_hres\">hrtimer_init_hres</a>(struct <a class=\"id\" href=\"#hrtimer_cpu_base\">hrtimer_cpu_base</a> *<a class=\"id\" href=\"#base\">base</a>) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hrtimer_init_timer_hres\">hrtimer_init_timer_hres</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>) { }", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HIGH_RES_TIMERS */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#timer_stats_hrtimer_set_start_info\">timer_stats_hrtimer_set_start_info</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TIMER_STATS\">CONFIG_TIMER_STATS</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_site\">start_site</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_site\">start_site</a> = <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_comm\">start_comm</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#TASK_COMM_LEN\">TASK_COMM_LEN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_pid\">start_pid</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#timer_stats_hrtimer_clear_start_info\">timer_stats_hrtimer_clear_start_info</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TIMER_STATS\">CONFIG_TIMER_STATS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_site\">start_site</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#timer_stats_account_hrtimer\">timer_stats_account_hrtimer</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TIMER_STATS\">CONFIG_TIMER_STATS</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#timer_stats_active\">timer_stats_active</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer_stats_update_stats\">timer_stats_update_stats</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_pid\">start_pid</a>, <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_site\">start_site</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#function\">function</a>, <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_comm\">start_comm</a>, 0);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Counterpart to lock_hrtimer_base above:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#unlock_hrtimer_base\">unlock_hrtimer_base</a>(const struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>, unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#lock\">lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hrtimer_forward - forward the timer expiry</span>", 
"<span class=\"comment\"> * @timer:<span class=\"ts\"/>hrtimer to forward</span>", 
"<span class=\"comment\"> * @now:<span class=\"ts\"/>forward past this time</span>", 
"<span class=\"comment\"> * @interval:<span class=\"ts\"/>the interval to forward</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Forward the timer expiry so it will expire in the future.</span>", 
"<span class=\"comment\"> * Returns the number of overruns.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#hrtimer_forward\">hrtimer_forward</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#interval\">interval</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#orun\">orun</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#hrtimer_get_expires\">hrtimer_get_expires</a>(<a class=\"id\" href=\"#timer\">timer</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#interval\">interval</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &lt; <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#resolution\">resolution</a>.<a class=\"id\" href=\"#tv64\">tv64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#interval\">interval</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#resolution\">resolution</a>.<a class=\"id\" href=\"#tv64\">tv64</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#delta\">delta</a>.<a class=\"id\" href=\"#tv64\">tv64</a> >= <a class=\"id\" href=\"#interval\">interval</a>.<a class=\"id\" href=\"#tv64\">tv64</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#incr\">incr</a> = <a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#interval\">interval</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#orun\">orun</a> = <a class=\"id\" href=\"#ktime_divns\">ktime_divns</a>(<a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#incr\">incr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_add_expires_ns\">hrtimer_add_expires_ns</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#incr\">incr</a> * <a class=\"id\" href=\"#orun\">orun</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hrtimer_get_expires_tv64\">hrtimer_get_expires_tv64</a>(<a class=\"id\" href=\"#timer\">timer</a>) &gt; <a class=\"id\" href=\"#now\">now</a>.<a class=\"id\" href=\"#tv64\">tv64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#orun\">orun</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This (and the ktime_add() below) is the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * correction for exact:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#orun\">orun</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_add_expires\">hrtimer_add_expires</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#interval\">interval</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#orun\">orun</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hrtimer_forward\">hrtimer_forward</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * enqueue_hrtimer - internal function to (re)start a timer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The timer is inserted in expiry order. Insertion into the</span>", 
"<span class=\"comment\"> * red black tree is O(log(n)). Must hold the base lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 1 when the new timer is the leftmost timer in the tree.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#enqueue_hrtimer\">enqueue_hrtimer</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#hrtimer_clock_base\">hrtimer_clock_base</a> *<a class=\"id\" href=\"#base\">base</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> **<a class=\"id\" href=\"#link\">link</a> = &amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#active\">active</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#leftmost\">leftmost</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_activate\">debug_activate</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Find the right place in the rbtree:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#link\">link</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = *<a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We dont care about collisions. Nodes with</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the same expiry time stay together.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hrtimer_get_expires_tv64\">hrtimer_get_expires_tv64</a>(<a class=\"id\" href=\"#timer\">timer</a>) &lt;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_get_expires_tv64\">hrtimer_get_expires_tv64</a>(<a class=\"id\" href=\"#entry\">entry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a> = &amp;(*<a class=\"id\" href=\"#link\">link</a>)-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a> = &amp;(*<a class=\"id\" href=\"#link\">link</a>)-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#leftmost\">leftmost</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Insert the timer to the rbtree and check whether it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * replaces the first pending timer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#leftmost\">leftmost</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#first\">first</a> = &amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_link_node\">rb_link_node</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_insert_color\">rb_insert_color</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#active\">active</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * HRTIMER_STATE_ENQUEUED is or'ed to the current state to preserve the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * state of a possibly running callback.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#state\">state</a> |= <a class=\"id\" href=\"#HRTIMER_STATE_ENQUEUED\">HRTIMER_STATE_ENQUEUED</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#leftmost\">leftmost</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * __remove_hrtimer - internal function to remove a timer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller must hold the base lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * High resolution timer mode reprograms the clock event device when the</span>", 
"<span class=\"comment\"> * timer is the one which expires next. The caller can disable this by setting</span>", 
"<span class=\"comment\"> * reprogram to zero. This is useful, when the context does a reprogramming</span>", 
"<span class=\"comment\"> * anyway (e.g. timer interrupt)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__remove_hrtimer\">__remove_hrtimer</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#hrtimer_clock_base\">hrtimer_clock_base</a> *<a class=\"id\" href=\"#base\">base</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#newstate\">newstate</a>, int <a class=\"id\" href=\"#reprogram\">reprogram</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#state\">state</a> &amp; <a class=\"id\" href=\"#HRTIMER_STATE_ENQUEUED\">HRTIMER_STATE_ENQUEUED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Remove the timer from the rbtree and replace the first</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * entry pointer if necessary.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#first\">first</a> == &amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGH_RES_TIMERS\">CONFIG_HIGH_RES_TIMERS</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Reprogram the clock event device. if enabled */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reprogram\">reprogram</a> && <a class=\"id\" href=\"#hrtimer_hres_active\">hrtimer_hres_active</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#expires\">expires</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#hrtimer_get_expires\">hrtimer_get_expires</a>(<a class=\"id\" href=\"#timer\">timer</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#expires_next\">expires_next</a>.<a class=\"id\" href=\"#tv64\">tv64</a> == <a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#tv64\">tv64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_force_reprogram\">hrtimer_force_reprogram</a>(<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#cpu_base\">cpu_base</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_erase\">rb_erase</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#active\">active</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#newstate\">newstate</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * remove hrtimer, called with base lock held</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#remove_hrtimer\">remove_hrtimer</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>, struct <a class=\"id\" href=\"#hrtimer_clock_base\">hrtimer_clock_base</a> *<a class=\"id\" href=\"#base\">base</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hrtimer_is_queued\">hrtimer_is_queued</a>(<a class=\"id\" href=\"#timer\">timer</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#reprogram\">reprogram</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Remove the timer and force reprogramming when high</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * resolution mode is active and the timer is on the current</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * CPU. If we remove a timer on another CPU, reprogramming is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * skipped. The interrupt event on this CPU is fired and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reprogramming happens in the interrupt handler. This is a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * rare case and less expensive than a smp call.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_deactivate\">debug_deactivate</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer_stats_hrtimer_clear_start_info\">timer_stats_hrtimer_clear_start_info</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reprogram\">reprogram</a> = <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#cpu_base\">cpu_base</a> == &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#hrtimer_bases\">hrtimer_bases</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We must preserve the CALLBACK state flag here,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * otherwise we could move the timer base in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * switch_hrtimer_base.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#state\">state</a> &amp; <a class=\"id\" href=\"#HRTIMER_STATE_CALLBACK\">HRTIMER_STATE_CALLBACK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__remove_hrtimer\">__remove_hrtimer</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#reprogram\">reprogram</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__hrtimer_start_range_ns\">__hrtimer_start_range_ns</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#tim\">tim</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#delta_ns\">delta_ns</a>, const enum <a class=\"id\" href=\"#hrtimer_mode\">hrtimer_mode</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#wakeup\">wakeup</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_clock_base\">hrtimer_clock_base</a> *<a class=\"id\" href=\"#base\">base</a>, *<a class=\"id\" href=\"#new_base\">new_base</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#leftmost\">leftmost</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#lock_hrtimer_base\">lock_hrtimer_base</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove an active timer from the queue: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#remove_hrtimer\">remove_hrtimer</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Switch the timer base, if necessary: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_base\">new_base</a> = <a class=\"id\" href=\"#switch_hrtimer_base\">switch_hrtimer_base</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#HRTIMER_MODE_PINNED\">HRTIMER_MODE_PINNED</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#HRTIMER_MODE_REL\">HRTIMER_MODE_REL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tim\">tim</a> = <a class=\"id\" href=\"#ktime_add_safe\">ktime_add_safe</a>(<a class=\"id\" href=\"#tim\">tim</a>, <a class=\"id\" href=\"#new_base\">new_base</a>-><a class=\"id\" href=\"#get_time\">get_time</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * CONFIG_TIME_LOW_RES is a temporary way for architectures</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to signal that they simply return xtime in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * do_gettimeoffset(). In this case we want to round up by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * resolution when starting a relative timer, to avoid short</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * timeouts. This will go away with the GTOD framework.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TIME_LOW_RES\">CONFIG_TIME_LOW_RES</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tim\">tim</a> = <a class=\"id\" href=\"#ktime_add_safe\">ktime_add_safe</a>(<a class=\"id\" href=\"#tim\">tim</a>, <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#resolution\">resolution</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_set_expires_range_ns\">hrtimer_set_expires_range_ns</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#tim\">tim</a>, <a class=\"id\" href=\"#delta_ns\">delta_ns</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer_stats_hrtimer_set_start_info\">timer_stats_hrtimer_set_start_info</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#leftmost\">leftmost</a> = <a class=\"id\" href=\"#enqueue_hrtimer\">enqueue_hrtimer</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#new_base\">new_base</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only allow reprogramming if the new base is on this CPU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (it might still be on another CPU if the timer was pending)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * XXX send_remote_softirq() ?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#leftmost\">leftmost</a> && <a class=\"id\" href=\"#new_base\">new_base</a>-><a class=\"id\" href=\"#cpu_base\">cpu_base</a> == &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#hrtimer_bases\">hrtimer_bases</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_enqueue_reprogram\">hrtimer_enqueue_reprogram</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#new_base\">new_base</a>, <a class=\"id\" href=\"#wakeup\">wakeup</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_hrtimer_base\">unlock_hrtimer_base</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hrtimer_start_range_ns - (re)start an hrtimer on the current CPU</span>", 
"<span class=\"comment\"> * @timer:<span class=\"ts\"/>the timer to be added</span>", 
"<span class=\"comment\"> * @tim:<span class=\"ts\"/>expiry time</span>", 
"<span class=\"comment\"> * @delta_ns:<span class=\"ts\"/>\"slack\" range for the timer</span>", 
"<span class=\"comment\"> * @mode:<span class=\"ts\"/>expiry mode: absolute (HRTIMER_ABS) or relative (HRTIMER_REL)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> *  0 on success</span>", 
"<span class=\"comment\"> *  1 when the timer was active</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#hrtimer_start_range_ns\">hrtimer_start_range_ns</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#tim\">tim</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#delta_ns\">delta_ns</a>, const enum <a class=\"id\" href=\"#hrtimer_mode\">hrtimer_mode</a> <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__hrtimer_start_range_ns\">__hrtimer_start_range_ns</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#tim\">tim</a>, <a class=\"id\" href=\"#delta_ns\">delta_ns</a>, <a class=\"id\" href=\"#mode\">mode</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hrtimer_start_range_ns\">hrtimer_start_range_ns</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hrtimer_start - (re)start an hrtimer on the current CPU</span>", 
"<span class=\"comment\"> * @timer:<span class=\"ts\"/>the timer to be added</span>", 
"<span class=\"comment\"> * @tim:<span class=\"ts\"/>expiry time</span>", 
"<span class=\"comment\"> * @mode:<span class=\"ts\"/>expiry mode: absolute (HRTIMER_ABS) or relative (HRTIMER_REL)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> *  0 on success</span>", 
"<span class=\"comment\"> *  1 when the timer was active</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#hrtimer_start\">hrtimer_start</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#tim\">tim</a>, const enum <a class=\"id\" href=\"#hrtimer_mode\">hrtimer_mode</a> <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__hrtimer_start_range_ns\">__hrtimer_start_range_ns</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#tim\">tim</a>, 0, <a class=\"id\" href=\"#mode\">mode</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hrtimer_start\">hrtimer_start</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hrtimer_try_to_cancel - try to deactivate a timer</span>", 
"<span class=\"comment\"> * @timer:<span class=\"ts\"/>hrtimer to stop</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> *  0 when the timer was not active</span>", 
"<span class=\"comment\"> *  1 when the timer was active</span>", 
"<span class=\"comment\"> * -1 when the timer is currently excuting the callback function and</span>", 
"<span class=\"comment\"> *    cannot be stopped</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#hrtimer_try_to_cancel\">hrtimer_try_to_cancel</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_clock_base\">hrtimer_clock_base</a> *<a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#lock_hrtimer_base\">lock_hrtimer_base</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hrtimer_callback_running\">hrtimer_callback_running</a>(<a class=\"id\" href=\"#timer\">timer</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#remove_hrtimer\">remove_hrtimer</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_hrtimer_base\">unlock_hrtimer_base</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hrtimer_try_to_cancel\">hrtimer_try_to_cancel</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hrtimer_cancel - cancel a timer and wait for the handler to finish.</span>", 
"<span class=\"comment\"> * @timer:<span class=\"ts\"/>the timer to be cancelled</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> *  0 when the timer was not active</span>", 
"<span class=\"comment\"> *  1 when the timer was active</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#hrtimer_cancel\">hrtimer_cancel</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#hrtimer_try_to_cancel\">hrtimer_try_to_cancel</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hrtimer_cancel\">hrtimer_cancel</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hrtimer_get_remaining - get remaining time for the timer</span>", 
"<span class=\"comment\"> * @timer:<span class=\"ts\"/>the timer to read</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#hrtimer_get_remaining\">hrtimer_get_remaining</a>(const struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#rem\">rem</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_hrtimer_base\">lock_hrtimer_base</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rem\">rem</a> = <a class=\"id\" href=\"#hrtimer_expires_remaining\">hrtimer_expires_remaining</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_hrtimer_base\">unlock_hrtimer_base</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rem\">rem</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hrtimer_get_remaining\">hrtimer_get_remaining</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hrtimer_get_next_event - get the time until next expiry event</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the delta to the next expiry event or KTIME_MAX if no timer</span>", 
"<span class=\"comment\"> * is pending.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#hrtimer_get_next_event\">hrtimer_get_next_event</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_cpu_base\">hrtimer_cpu_base</a> *<a class=\"id\" href=\"#cpu_base\">cpu_base</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#hrtimer_bases\">hrtimer_bases</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_clock_base\">hrtimer_clock_base</a> *<a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#clock_base\">clock_base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#mindelta\">mindelta</a> = { .<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a> };", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hrtimer_hres_active\">hrtimer_hres_active</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#HRTIMER_MAX_CLOCK_BASES\">HRTIMER_MAX_CLOCK_BASES</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#base\">base</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#first\">first</a>, struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#hrtimer_get_expires_tv64\">hrtimer_get_expires_tv64</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#get_time\">get_time</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &lt; <a class=\"id\" href=\"#mindelta\">mindelta</a>.<a class=\"id\" href=\"#tv64\">tv64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mindelta\">mindelta</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#delta\">delta</a>.<a class=\"id\" href=\"#tv64\">tv64</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mindelta\">mindelta</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mindelta\">mindelta</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mindelta\">mindelta</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#__hrtimer_init\">__hrtimer_init</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#clock_id\">clock_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   enum <a class=\"id\" href=\"#hrtimer_mode\">hrtimer_mode</a> <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_cpu_base\">hrtimer_cpu_base</a> *<a class=\"id\" href=\"#cpu_base\">cpu_base</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#timer\">timer</a>, 0, sizeof(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_base\">cpu_base</a> = &amp;<a class=\"id\" href=\"#__raw_get_cpu_var\">__raw_get_cpu_var</a>(<a class=\"id\" href=\"#hrtimer_bases\">hrtimer_bases</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clock_id\">clock_id</a> == <a class=\"id\" href=\"#CLOCK_REALTIME\">CLOCK_REALTIME</a> && <a class=\"id\" href=\"#mode\">mode</a> != <a class=\"id\" href=\"#HRTIMER_MODE_ABS\">HRTIMER_MODE_ABS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clock_id\">clock_id</a> = <a class=\"id\" href=\"#CLOCK_MONOTONIC\">CLOCK_MONOTONIC</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a> = &amp;<a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#clock_base\">clock_base</a>[<a class=\"id\" href=\"#clock_id\">clock_id</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_init_timer_hres\">hrtimer_init_timer_hres</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TIMER_STATS\">CONFIG_TIMER_STATS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_site\">start_site</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_pid\">start_pid</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#start_comm\">start_comm</a>, 0, <a class=\"id\" href=\"#TASK_COMM_LEN\">TASK_COMM_LEN</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hrtimer_init - initialize a timer to the given clock</span>", 
"<span class=\"comment\"> * @timer:<span class=\"ts\"/>the timer to be initialized</span>", 
"<span class=\"comment\"> * @clock_id:<span class=\"ts\"/>the clock to be used</span>", 
"<span class=\"comment\"> * @mode:<span class=\"ts\"/>timer mode abs/rel</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#hrtimer_init\">hrtimer_init</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#clock_id\">clock_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  enum <a class=\"id\" href=\"#hrtimer_mode\">hrtimer_mode</a> <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_init\">debug_init</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#clock_id\">clock_id</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__hrtimer_init\">__hrtimer_init</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#clock_id\">clock_id</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hrtimer_init\">hrtimer_init</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hrtimer_get_res - get the timer resolution for a clock</span>", 
"<span class=\"comment\"> * @which_clock: which clock to query</span>", 
"<span class=\"comment\"> * @tp:<span class=\"ts\"/><span class=\"ts\"/> pointer to timespec variable to store the resolution</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Store the resolution of the clock selected by @which_clock in the</span>", 
"<span class=\"comment\"> * variable pointed to by @tp.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#hrtimer_get_res\">hrtimer_get_res</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_cpu_base\">hrtimer_cpu_base</a> *<a class=\"id\" href=\"#cpu_base\">cpu_base</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_base\">cpu_base</a> = &amp;<a class=\"id\" href=\"#__raw_get_cpu_var\">__raw_get_cpu_var</a>(<a class=\"id\" href=\"#hrtimer_bases\">hrtimer_bases</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#ktime_to_timespec\">ktime_to_timespec</a>(<a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#clock_base\">clock_base</a>[<a class=\"id\" href=\"#which_clock\">which_clock</a>].<a class=\"id\" href=\"#resolution\">resolution</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hrtimer_get_res\">hrtimer_get_res</a>);", 
"", 
"static void <a class=\"id\" href=\"#__run_hrtimer\">__run_hrtimer</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#ktime_t\">ktime_t</a> *<a class=\"id\" href=\"#now\">now</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_clock_base\">hrtimer_clock_base</a> *<a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_cpu_base\">hrtimer_cpu_base</a> *<a class=\"id\" href=\"#cpu_base\">cpu_base</a> = <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#cpu_base\">cpu_base</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#hrtimer_restart\">hrtimer_restart</a> (*<a class=\"id\" href=\"#fn\">fn</a>)(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#restart\">restart</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_deactivate\">debug_deactivate</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__remove_hrtimer\">__remove_hrtimer</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#HRTIMER_STATE_CALLBACK\">HRTIMER_STATE_CALLBACK</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer_stats_account_hrtimer\">timer_stats_account_hrtimer</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#function\">function</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Because we run timers from hardirq context, there is no chance</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * they get migrated to another cpu, therefore its safe to unlock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the timer base.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_hrtimer_expire_entry\">trace_hrtimer_expire_entry</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#restart\">restart</a> = <a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_hrtimer_expire_exit\">trace_hrtimer_expire_exit</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note: We clear the CALLBACK bit after enqueue_hrtimer and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we do not reprogramm the event hardware. Happens either in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hrtimer_start_range_ns() or in hrtimer_interrupt()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#restart\">restart</a> != <a class=\"id\" href=\"#HRTIMER_NORESTART\">HRTIMER_NORESTART</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#HRTIMER_STATE_CALLBACK\">HRTIMER_STATE_CALLBACK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enqueue_hrtimer\">enqueue_hrtimer</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#state\">state</a> &amp; <a class=\"id\" href=\"#HRTIMER_STATE_CALLBACK\">HRTIMER_STATE_CALLBACK</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#state\">state</a> &= ~<a class=\"id\" href=\"#HRTIMER_STATE_CALLBACK\">HRTIMER_STATE_CALLBACK</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGH_RES_TIMERS\">CONFIG_HIGH_RES_TIMERS</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * High resolution timer interrupt</span>", 
"<span class=\"comment\"> * Called with interrupts disabled</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#hrtimer_interrupt\">hrtimer_interrupt</a>(struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_cpu_base\">hrtimer_cpu_base</a> *<a class=\"id\" href=\"#cpu_base\">cpu_base</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#hrtimer_bases\">hrtimer_bases</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_clock_base\">hrtimer_clock_base</a> *<a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#expires_next\">expires_next</a>, <a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#entry_time\">entry_time</a>, <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#retries\">retries</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#hres_active\">hres_active</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#nr_events\">nr_events</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#next_event\">next_event</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry_time\">entry_time</a> = <a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#expires_next\">expires_next</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We set expires_next to KTIME_MAX here with cpu_base-&gt;lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * held to prevent that a timer is enqueued in our queue via</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the migration code. This does not affect enqueueing of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * timers which run their callback and need to be requeued on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this CPU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#expires_next\">expires_next</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#clock_base\">clock_base</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#HRTIMER_MAX_CLOCK_BASES\">HRTIMER_MAX_CLOCK_BASES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#basenow\">basenow</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#basenow\">basenow</a> = <a class=\"id\" href=\"#ktime_add\">ktime_add</a>(<a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#offset\">offset</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while ((<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#first\">first</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The immediate goal for using the softexpires is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * minimizing wakeups, not running timers at the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * earliest interrupt after their soft expiration.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This allows us to avoid using a Priority Search</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Tree, which can answer a stabbing querry for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * overlapping intervals and instead use the simple</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * BST we already have.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We don't add extra wakeups by delaying timers that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * are right-of a not yet expired timer, because that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * timer will have to trigger a wakeup anyway.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#basenow\">basenow</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &lt; <a class=\"id\" href=\"#hrtimer_get_softexpires_tv64\">hrtimer_get_softexpires_tv64</a>(<a class=\"id\" href=\"#timer\">timer</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#expires\">expires</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#hrtimer_get_expires\">hrtimer_get_expires</a>(<a class=\"id\" href=\"#timer\">timer</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#base\">base</a>-><a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &lt; <a class=\"id\" href=\"#expires_next\">expires_next</a>.<a class=\"id\" href=\"#tv64\">tv64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires_next\">expires_next</a> = <a class=\"id\" href=\"#expires\">expires</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__run_hrtimer\">__run_hrtimer</a>(<a class=\"id\" href=\"#timer\">timer</a>, &amp;<a class=\"id\" href=\"#basenow\">basenow</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Store the new expiry value so the migration code can verify</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * against it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#expires_next\">expires_next</a> = <a class=\"id\" href=\"#expires_next\">expires_next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reprogramming necessary ? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#expires_next\">expires_next</a>.<a class=\"id\" href=\"#tv64\">tv64</a> == <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a> ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#tick_program_event\">tick_program_event</a>(<a class=\"id\" href=\"#expires_next\">expires_next</a>, 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#hang_detected\">hang_detected</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The next timer was already expired due to:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - tracing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - long lasting callbacks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - being scheduled away when running in a VM</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to prevent that we loop forever in the hrtimer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * interrupt routine. We give it 3 attempts to avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * overreacting on some spurious event.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#nr_retries\">nr_retries</a>++;", 
"<span class=\"ts\"/>if (++<a class=\"id\" href=\"#retries\">retries</a> &lt; 3)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Give the system a chance to do something else than looping</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here. We stored the entry time, so we know exactly how long</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we spent here. We schedule the next event this amount of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * time away.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#nr_hangs\">nr_hangs</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#hang_detected\">hang_detected</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#entry_time\">entry_time</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &gt; <a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#max_hang_time\">max_hang_time</a>.<a class=\"id\" href=\"#tv64\">tv64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_base\">cpu_base</a>-><a class=\"id\" href=\"#max_hang_time\">max_hang_time</a> = <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Limit it to a sensible value as we enforce a longer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * delay. Give the CPU at least 100ms to catch up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &gt; 100 * <a class=\"id\" href=\"#NSEC_PER_MSEC\">NSEC_PER_MSEC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires_next\">expires_next</a> = <a class=\"id\" href=\"#ktime_add_ns\">ktime_add_ns</a>(<a class=\"id\" href=\"#now\">now</a>, 100 * <a class=\"id\" href=\"#NSEC_PER_MSEC\">NSEC_PER_MSEC</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires_next\">expires_next</a> = <a class=\"id\" href=\"#ktime_add\">ktime_add</a>(<a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#delta\">delta</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tick_program_event\">tick_program_event</a>(<a class=\"id\" href=\"#expires_next\">expires_next</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk_once\">printk_once</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"hrtimer: interrupt took %llu ns\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#delta\">delta</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * local version of hrtimer_peek_ahead_timers() called with interrupts</span>", 
"<span class=\"comment\"> * disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__hrtimer_peek_ahead_timers\">__hrtimer_peek_ahead_timers</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_device\">tick_device</a> *<a class=\"id\" href=\"#td\">td</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hrtimer_hres_active\">hrtimer_hres_active</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#td\">td</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#tick_cpu_device\">tick_cpu_device</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#td\">td</a> && <a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_interrupt\">hrtimer_interrupt</a>(<a class=\"id\" href=\"#td\">td</a>-><a class=\"id\" href=\"#evtdev\">evtdev</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hrtimer_peek_ahead_timers -- run soft-expired timers now</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * hrtimer_peek_ahead_timers will peek at the timer queue of</span>", 
"<span class=\"comment\"> * the current cpu and check if there are any timers for which</span>", 
"<span class=\"comment\"> * the soft expires time has passed. If any such timers exist,</span>", 
"<span class=\"comment\"> * they are run immediately and then removed from the timer queue.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#hrtimer_peek_ahead_timers\">hrtimer_peek_ahead_timers</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__hrtimer_peek_ahead_timers\">__hrtimer_peek_ahead_timers</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#run_hrtimer_softirq\">run_hrtimer_softirq</a>(struct <a class=\"id\" href=\"#softirq_action\">softirq_action</a> *<a class=\"id\" href=\"#h\">h</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_peek_ahead_timers\">hrtimer_peek_ahead_timers</a>();", 
"}", 
"", 
"#else <span class=\"comment\">/* CONFIG_HIGH_RES_TIMERS */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__hrtimer_peek_ahead_timers\">__hrtimer_peek_ahead_timers</a>(void) { }", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* !CONFIG_HIGH_RES_TIMERS */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called from timer softirq every jiffy, expire hrtimers:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For HRT its the fall back code to run the softirq in the timer</span>", 
"<span class=\"comment\"> * softirq context in case the hrtimer initialization failed or has</span>", 
"<span class=\"comment\"> * not been done yet.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#hrtimer_run_pending\">hrtimer_run_pending</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hrtimer_hres_active\">hrtimer_hres_active</a>())", 
];
xr_frag_insert('l/56/c266e264906367c290f0d1b335a997577ca4f0.xr', __xr_tmp);
