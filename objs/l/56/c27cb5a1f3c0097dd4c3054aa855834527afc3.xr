var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> * arch-x86_32.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Guest OS interface to x86 Xen.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2004, K A Fraser</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_XEN_INTERFACE_H\">_ASM_X86_XEN_INTERFACE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_XEN_INTERFACE_H\">_ASM_X86_XEN_INTERFACE_H</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__XEN__\">__XEN__</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__DEFINE_GUEST_HANDLE\">__DEFINE_GUEST_HANDLE</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#type\">type</a>) \\", 
"    typedef struct { <a class=\"id\" href=\"#type\">type</a> *<a class=\"id\" href=\"#p\">p</a>; } <a class=\"id\" href=\"#__guest_handle_\">__guest_handle_</a> ## <a class=\"id\" href=\"#name\">name</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__DEFINE_GUEST_HANDLE\">__DEFINE_GUEST_HANDLE</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#type\">type</a>) \\", 
"    typedef <a class=\"id\" href=\"#type\">type</a> * <a class=\"id\" href=\"#__guest_handle_\">__guest_handle_</a> ## <a class=\"id\" href=\"#name\">name</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_GUEST_HANDLE_STRUCT\">DEFINE_GUEST_HANDLE_STRUCT</a>(<a class=\"id\" href=\"#name\">name</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__DEFINE_GUEST_HANDLE\">__DEFINE_GUEST_HANDLE</a>(<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#name\">name</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_GUEST_HANDLE\">DEFINE_GUEST_HANDLE</a>(<a class=\"id\" href=\"#name\">name</a>) <a class=\"id\" href=\"#__DEFINE_GUEST_HANDLE\">__DEFINE_GUEST_HANDLE</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GUEST_HANDLE\">GUEST_HANDLE</a>(<a class=\"id\" href=\"#name\">name</a>)        <a class=\"id\" href=\"#__guest_handle_\">__guest_handle_</a> ## <a class=\"id\" href=\"#name\">name</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__XEN__\">__XEN__</a>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#__i386__\">__i386__</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_xen_guest_handle\">set_xen_guest_handle</a>(<a class=\"id\" href=\"#hnd\">hnd</a>, <a class=\"id\" href=\"#val\">val</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (sizeof(<a class=\"id\" href=\"#hnd\">hnd</a>) == 8)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#uint64_t\">uint64_t</a> *)&amp;(<a class=\"id\" href=\"#hnd\">hnd</a>) = 0;<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#hnd\">hnd</a>).<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#val\">val</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#__x86_64__\">__x86_64__</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_xen_guest_handle\">set_xen_guest_handle</a>(<a class=\"id\" href=\"#hnd\">hnd</a>, <a class=\"id\" href=\"#val\">val</a>)<span class=\"ts\"/>do { (<a class=\"id\" href=\"#hnd\">hnd</a>).<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#val\">val</a>; } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#else", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#__i386__\">__i386__</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_xen_guest_handle\">set_xen_guest_handle</a>(<a class=\"id\" href=\"#hnd\">hnd</a>, <a class=\"id\" href=\"#val\">val</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (sizeof(<a class=\"id\" href=\"#hnd\">hnd</a>) == 8)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#uint64_t\">uint64_t</a> *)&amp;(<a class=\"id\" href=\"#hnd\">hnd</a>) = 0;<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#hnd\">hnd</a>) = <a class=\"id\" href=\"#val\">val</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#__x86_64__\">__x86_64__</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_xen_guest_handle\">set_xen_guest_handle</a>(<a class=\"id\" href=\"#hnd\">hnd</a>, <a class=\"id\" href=\"#val\">val</a>)<span class=\"ts\"/>do { (<a class=\"id\" href=\"#hnd\">hnd</a>) = <a class=\"id\" href=\"#val\">val</a>; } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"<span class=\"comment\">/* Guest handles for primitive C types. */</span>", 
"<a class=\"id\" href=\"#__DEFINE_GUEST_HANDLE\">__DEFINE_GUEST_HANDLE</a>(<a class=\"id\" href=\"#uchar\">uchar</a>, unsigned char);", 
"<a class=\"id\" href=\"#__DEFINE_GUEST_HANDLE\">__DEFINE_GUEST_HANDLE</a>(<a class=\"id\" href=\"#uint\">uint</a>,  unsigned int);", 
"<a class=\"id\" href=\"#__DEFINE_GUEST_HANDLE\">__DEFINE_GUEST_HANDLE</a>(<a class=\"id\" href=\"#ulong\">ulong</a>, unsigned long);", 
"<a class=\"id\" href=\"#DEFINE_GUEST_HANDLE\">DEFINE_GUEST_HANDLE</a>(char);", 
"<a class=\"id\" href=\"#DEFINE_GUEST_HANDLE\">DEFINE_GUEST_HANDLE</a>(int);", 
"<a class=\"id\" href=\"#DEFINE_GUEST_HANDLE\">DEFINE_GUEST_HANDLE</a>(long);", 
"<a class=\"id\" href=\"#DEFINE_GUEST_HANDLE\">DEFINE_GUEST_HANDLE</a>(void);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#HYPERVISOR_VIRT_START\">HYPERVISOR_VIRT_START</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HYPERVISOR_VIRT_START\">HYPERVISOR_VIRT_START</a> <a class=\"id\" href=\"#mk_unsigned_long\">mk_unsigned_long</a>(<a class=\"id\" href=\"#__HYPERVISOR_VIRT_START\">__HYPERVISOR_VIRT_START</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#machine_to_phys_mapping\">machine_to_phys_mapping</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#machine_to_phys_mapping\">machine_to_phys_mapping</a> ((unsigned long *)<a class=\"id\" href=\"#HYPERVISOR_VIRT_START\">HYPERVISOR_VIRT_START</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Maximum number of virtual CPUs in multi-processor guests. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_VIRT_CPUS\">MAX_VIRT_CPUS</a> 32", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * SEGMENT DESCRIPTOR TABLES</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A number of GDT entries are reserved by Xen. These are not situated at the</span>", 
"<span class=\"comment\"> * start of the GDT because some stupid OSes export hard-coded selector values</span>", 
"<span class=\"comment\"> * in their ABI. These hard-coded values are always near the start of the GDT,</span>", 
"<span class=\"comment\"> * so Xen places itself out of the way, at the far end of the GDT.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIRST_RESERVED_GDT_PAGE\">FIRST_RESERVED_GDT_PAGE</a>  14", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIRST_RESERVED_GDT_BYTE\">FIRST_RESERVED_GDT_BYTE</a>  (<a class=\"id\" href=\"#FIRST_RESERVED_GDT_PAGE\">FIRST_RESERVED_GDT_PAGE</a> * 4096)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIRST_RESERVED_GDT_ENTRY\">FIRST_RESERVED_GDT_ENTRY</a> (<a class=\"id\" href=\"#FIRST_RESERVED_GDT_BYTE\">FIRST_RESERVED_GDT_BYTE</a> / 8)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Send an array of these to HYPERVISOR_set_trap_table()</span>", 
"<span class=\"comment\"> * The privilege level specifies which modes may enter a trap via a software</span>", 
"<span class=\"comment\"> * interrupt. On x86/64, since rings 1 and 2 are unavailable, we allocate</span>", 
"<span class=\"comment\"> * privilege levels as follows:</span>", 
"<span class=\"comment\"> *  Level == 0: Noone may enter</span>", 
"<span class=\"comment\"> *  Level == 1: Kernel may enter</span>", 
"<span class=\"comment\"> *  Level == 2: Kernel may enter</span>", 
"<span class=\"comment\"> *  Level == 3: Everyone may enter</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TI_GET_DPL\">TI_GET_DPL</a>(<a class=\"id\" href=\"#_ti\">_ti</a>)<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#_ti\">_ti</a>)-><a class=\"id\" href=\"#flags\">flags</a> &amp; 3)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TI_GET_IF\">TI_GET_IF</a>(<a class=\"id\" href=\"#_ti\">_ti</a>)<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#_ti\">_ti</a>)-><a class=\"id\" href=\"#flags\">flags</a> &amp; 4)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TI_SET_DPL\">TI_SET_DPL</a>(<a class=\"id\" href=\"#_ti\">_ti</a>, <a class=\"id\" href=\"#_dpl\">_dpl</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#_ti\">_ti</a>)-><a class=\"id\" href=\"#flags\">flags</a> |= (<a class=\"id\" href=\"#_dpl\">_dpl</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TI_SET_IF\">TI_SET_IF</a>(<a class=\"id\" href=\"#_ti\">_ti</a>, <a class=\"id\" href=\"#_if\">_if</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#_ti\">_ti</a>)-><a class=\"id\" href=\"#flags\">flags</a> |= ((!!(<a class=\"id\" href=\"#_if\">_if</a>))<<2))", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"struct <a class=\"id\" href=\"#trap_info\">trap_info</a> {", 
"    <a class=\"id\" href=\"#uint8_t\">uint8_t</a>       <a class=\"id\" href=\"#vector\">vector</a>;  <span class=\"comment\">/* exception vector                              */</span>", 
"    <a class=\"id\" href=\"#uint8_t\">uint8_t</a>       <a class=\"id\" href=\"#flags\">flags</a>;   <span class=\"comment\">/* 0-3: privilege level; 4: clear event enable?  */</span>", 
"    <a class=\"id\" href=\"#uint16_t\">uint16_t</a>      <a class=\"id\" href=\"#cs\">cs</a>;      <span class=\"comment\">/* code selector                                 */</span>", 
"    unsigned long <a class=\"id\" href=\"#address\">address</a>; <span class=\"comment\">/* code offset                                   */</span>", 
"};", 
"<a class=\"id\" href=\"#DEFINE_GUEST_HANDLE_STRUCT\">DEFINE_GUEST_HANDLE_STRUCT</a>(<a class=\"id\" href=\"#trap_info\">trap_info</a>);", 
"", 
"struct <a class=\"id\" href=\"#arch_shared_info\">arch_shared_info</a> {", 
"    unsigned long <a class=\"id\" href=\"#max_pfn\">max_pfn</a>;                  <span class=\"comment\">/* max pfn that appears in table */</span>", 
"    <span class=\"comment\">/* Frame containing list of mfns containing list of mfns containing p2m. */</span>", 
"    unsigned long <a class=\"id\" href=\"#pfn_to_mfn_frame_list_list\">pfn_to_mfn_frame_list_list</a>;", 
"    unsigned long <a class=\"id\" href=\"#nmi_reason\">nmi_reason</a>;", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* !__ASSEMBLY__ */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"#<a class=\"id\" href=\"#include\">include</a> \"interface_32.h\"", 
"#else", 
"#<a class=\"id\" href=\"#include\">include</a> \"interface_64.h\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The following is all CPU context. Note that the fpu_ctxt block is filled</span>", 
"<span class=\"comment\"> * in by FXSAVE if the CPU has feature FXSR; otherwise FSAVE is used.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#vcpu_guest_context\">vcpu_guest_context</a> {", 
"    <span class=\"comment\">/* FPU registers come first so they can be aligned for FXSAVE/FXRSTOR. */</span>", 
"    struct { char <a class=\"id\" href=\"#x\">x</a>[512]; } <a class=\"id\" href=\"#fpu_ctxt\">fpu_ctxt</a>;       <span class=\"comment\">/* User-level FPU registers     */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VGCF_I387_VALID\">VGCF_I387_VALID</a> (1<<0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VGCF_HVM_GUEST\">VGCF_HVM_GUEST</a>  (1<<1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VGCF_IN_KERNEL\">VGCF_IN_KERNEL</a>  (1<<2)", 
"    unsigned long <a class=\"id\" href=\"#flags\">flags</a>;                    <span class=\"comment\">/* VGCF_* flags                 */</span>", 
"    struct <a class=\"id\" href=\"#cpu_user_regs\">cpu_user_regs</a> <a class=\"id\" href=\"#user_regs\">user_regs</a>;         <span class=\"comment\">/* User-level CPU registers     */</span>", 
"    struct <a class=\"id\" href=\"#trap_info\">trap_info</a> <a class=\"id\" href=\"#trap_ctxt\">trap_ctxt</a>[256];        <span class=\"comment\">/* Virtual IDT                  */</span>", 
"    unsigned long <a class=\"id\" href=\"#ldt_base\">ldt_base</a>, <a class=\"id\" href=\"#ldt_ents\">ldt_ents</a>;       <span class=\"comment\">/* LDT (linear address, # ents) */</span>", 
"    unsigned long <a class=\"id\" href=\"#gdt_frames\">gdt_frames</a>[16], <a class=\"id\" href=\"#gdt_ents\">gdt_ents</a>; <span class=\"comment\">/* GDT (machine frames, # ents) */</span>", 
"    unsigned long <a class=\"id\" href=\"#kernel_ss\">kernel_ss</a>, <a class=\"id\" href=\"#kernel_sp\">kernel_sp</a>;     <span class=\"comment\">/* Virtual TSS (only SS1/SP1)   */</span>", 
"    <span class=\"comment\">/* NB. User pagetable on x86/64 is placed in ctrlreg[1]. */</span>", 
"    unsigned long <a class=\"id\" href=\"#ctrlreg\">ctrlreg</a>[8];               <span class=\"comment\">/* CR0-CR7 (control registers)  */</span>", 
"    unsigned long <a class=\"id\" href=\"#debugreg\">debugreg</a>[8];              <span class=\"comment\">/* DB0-DB7 (debug registers)    */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__i386__\">__i386__</a>", 
"    unsigned long <a class=\"id\" href=\"#event_callback_cs\">event_callback_cs</a>;        <span class=\"comment\">/* CS:EIP of event callback     */</span>", 
];
xr_frag_insert('l/56/c27cb5a1f3c0097dd4c3054aa855834527afc3.xr', __xr_tmp);
