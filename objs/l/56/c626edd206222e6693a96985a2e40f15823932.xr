var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Macros for manipulating and testing page-&gt;flags</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#PAGE_FLAGS_H\">PAGE_FLAGS_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGE_FLAGS_H\">PAGE_FLAGS_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__GENERATING_BOUNDS_H\">__GENERATING_BOUNDS_H</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm_types\">mm_types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#generated\">generated</a>/<a class=\"id\" href=\"#bounds\">bounds</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !__GENERATING_BOUNDS_H */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Various page-&gt;flags bits:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PG_reserved is set for special pages, which can never be swapped out. Some</span>", 
"<span class=\"comment\"> * of them might not even exist (eg empty_bad_page)...</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The PG_private bitflag is set on pagecache pages if they contain filesystem</span>", 
"<span class=\"comment\"> * specific data (which is normally at page-&gt;private). It can be used by</span>", 
"<span class=\"comment\"> * private allocations for its own usage.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * During initiation of disk I/O, PG_locked is set. This bit is set before I/O</span>", 
"<span class=\"comment\"> * and cleared when writeback _starts_ or when read _completes_. PG_writeback</span>", 
"<span class=\"comment\"> * is set before writeback starts and cleared when it finishes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PG_locked also pins a page in pagecache, and blocks truncation of the file</span>", 
"<span class=\"comment\"> * while it is held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * page_waitqueue(page) is a wait queue of all tasks waiting for the page</span>", 
"<span class=\"comment\"> * to become unlocked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PG_uptodate tells whether the page's contents is valid.  When a read</span>", 
"<span class=\"comment\"> * completes, the page becomes uptodate, unless a disk I/O error happened.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PG_referenced, PG_reclaim are used for page reclaim for anonymous and</span>", 
"<span class=\"comment\"> * file-backed pagecache (see mm/vmscan.c).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PG_error is set to indicate that an I/O error occurred on this page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PG_arch_1 is an architecture specific page state bit.  The generic code</span>", 
"<span class=\"comment\"> * guarantees that this bit is cleared for a page when it first is entered into</span>", 
"<span class=\"comment\"> * the page cache.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PG_highmem pages are not permanently mapped into the kernel virtual address</span>", 
"<span class=\"comment\"> * space, they need to be kmapped separately for doing IO on the pages.  The</span>", 
"<span class=\"comment\"> * struct page (these bits with information) are always mapped into kernel</span>", 
"<span class=\"comment\"> * address space...</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PG_buddy is set to indicate that the page is free and in the buddy system</span>", 
"<span class=\"comment\"> * (see mm/page_alloc.c).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PG_hwpoison indicates that a page got corrupted in hardware and contains</span>", 
"<span class=\"comment\"> * data with incorrect ECC bits that triggered a machine check. Accessing is</span>", 
"<span class=\"comment\"> * not safe since it may cause another machine check. Don't touch!</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Don't use the *_dontuse flags.  Use the macros.  Otherwise you'll break</span>", 
"<span class=\"comment\"> * locked- and dirty-page accounting.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The page flags field is split into two parts, the main flags area</span>", 
"<span class=\"comment\"> * which extends from the low bits upwards, and the fields area which</span>", 
"<span class=\"comment\"> * extends from the high bits downwards.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  | FIELD | ... | FLAGS |</span>", 
"<span class=\"comment\"> *  N-1           ^       0</span>", 
"<span class=\"comment\"> *               (NR_PAGEFLAGS)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The fields area is reserved for fields mapping zone, node (for NUMA) and</span>", 
"<span class=\"comment\"> * SPARSEMEM section (for variants of SPARSEMEM that require section ids like</span>", 
"<span class=\"comment\"> * SPARSEMEM_EXTREME with !SPARSEMEM_VMEMMAP).</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#pageflags\">pageflags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_locked\">PG_locked</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Page is locked. Don't touch. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_error\">PG_error</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_referenced\">PG_referenced</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_uptodate\">PG_uptodate</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_dirty\">PG_dirty</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_lru\">PG_lru</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_active\">PG_active</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_slab\">PG_slab</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_owner_priv_1\">PG_owner_priv_1</a>,<span class=\"ts\"/><span class=\"comment\">/* Owner use. If pagecache, fs may use*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_arch_1\">PG_arch_1</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_reserved\">PG_reserved</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_private\">PG_private</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If pagecache, has fs-private data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_private_2\">PG_private_2</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If pagecache, has fs aux data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_writeback\">PG_writeback</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Page is under writeback */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PAGEFLAGS_EXTENDED\">CONFIG_PAGEFLAGS_EXTENDED</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_head\">PG_head</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* A head page */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_tail\">PG_tail</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* A tail page */</span>", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_compound\">PG_compound</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* A compound page */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_swapcache\">PG_swapcache</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Swap page: swp_entry_t in private */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_mappedtodisk\">PG_mappedtodisk</a>,<span class=\"ts\"/><span class=\"comment\">/* Has blocks allocated on-disk */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_reclaim\">PG_reclaim</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* To be reclaimed asap */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_buddy\">PG_buddy</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Page is free, on buddy lists */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_swapbacked\">PG_swapbacked</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Page is backed by RAM/swap */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_unevictable\">PG_unevictable</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Page is \"unevictable\"  */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_mlocked\">PG_mlocked</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Page is vma mlocked */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ARCH_USES_PG_UNCACHED\">CONFIG_ARCH_USES_PG_UNCACHED</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_uncached\">PG_uncached</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Page has been mapped as uncached */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_FAILURE\">CONFIG_MEMORY_FAILURE</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_hwpoison\">PG_hwpoison</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* hardware poisoned page. Don't touch */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__NR_PAGEFLAGS\">__NR_PAGEFLAGS</a>,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Filesystems */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_checked\">PG_checked</a> = <a class=\"id\" href=\"#PG_owner_priv_1\">PG_owner_priv_1</a>,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Two page bits are conscripted by FS-Cache to maintain local caching</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * state.  These bits are set on pages belonging to the netfs's inodes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when those inodes are being locally cached.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_fscache\">PG_fscache</a> = <a class=\"id\" href=\"#PG_private_2\">PG_private_2</a>,<span class=\"ts\"/><span class=\"comment\">/* page backed by cache */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* XEN */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_pinned\">PG_pinned</a> = <a class=\"id\" href=\"#PG_owner_priv_1\">PG_owner_priv_1</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_savepinned\">PG_savepinned</a> = <a class=\"id\" href=\"#PG_dirty\">PG_dirty</a>,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* SLOB */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_slob_free\">PG_slob_free</a> = <a class=\"id\" href=\"#PG_private\">PG_private</a>,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* SLUB */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_slub_frozen\">PG_slub_frozen</a> = <a class=\"id\" href=\"#PG_active\">PG_active</a>,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* inktag */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PG_inktag\">PG_inktag</a> = <a class=\"id\" href=\"#PG_owner_priv_1\">PG_owner_priv_1</a>,", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__GENERATING_BOUNDS_H\">__GENERATING_BOUNDS_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Macros to create function definitions for page flags</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TESTPAGEFLAG\">TESTPAGEFLAG</a>(<a class=\"id\" href=\"#uname\">uname</a>, <a class=\"id\" href=\"#lname\">lname</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#Page\">Page</a>##<a class=\"id\" href=\"#uname\">uname</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>) <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#PG_\">PG_</a>##<a class=\"id\" href=\"#lname\">lname</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>); }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SETPAGEFLAG\">SETPAGEFLAG</a>(<a class=\"id\" href=\"#uname\">uname</a>, <a class=\"id\" href=\"#lname\">lname</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#SetPage\">SetPage</a>##<a class=\"id\" href=\"#uname\">uname</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#PG_\">PG_</a>##<a class=\"id\" href=\"#lname\">lname</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>); }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLEARPAGEFLAG\">CLEARPAGEFLAG</a>(<a class=\"id\" href=\"#uname\">uname</a>, <a class=\"id\" href=\"#lname\">lname</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ClearPage\">ClearPage</a>##<a class=\"id\" href=\"#uname\">uname</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#PG_\">PG_</a>##<a class=\"id\" href=\"#lname\">lname</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>); }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__SETPAGEFLAG\">__SETPAGEFLAG</a>(<a class=\"id\" href=\"#uname\">uname</a>, <a class=\"id\" href=\"#lname\">lname</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__SetPage\">__SetPage</a>##<a class=\"id\" href=\"#uname\">uname</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#PG_\">PG_</a>##<a class=\"id\" href=\"#lname\">lname</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>); }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__CLEARPAGEFLAG\">__CLEARPAGEFLAG</a>(<a class=\"id\" href=\"#uname\">uname</a>, <a class=\"id\" href=\"#lname\">lname</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__ClearPage\">__ClearPage</a>##<a class=\"id\" href=\"#uname\">uname</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#PG_\">PG_</a>##<a class=\"id\" href=\"#lname\">lname</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>); }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TESTSETFLAG\">TESTSETFLAG</a>(<a class=\"id\" href=\"#uname\">uname</a>, <a class=\"id\" href=\"#lname\">lname</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#TestSetPage\">TestSetPage</a>##<a class=\"id\" href=\"#uname\">uname</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>{ return <a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#PG_\">PG_</a>##<a class=\"id\" href=\"#lname\">lname</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>); }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TESTCLEARFLAG\">TESTCLEARFLAG</a>(<a class=\"id\" href=\"#uname\">uname</a>, <a class=\"id\" href=\"#lname\">lname</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#TestClearPage\">TestClearPage</a>##<a class=\"id\" href=\"#uname\">uname</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>{ return <a class=\"id\" href=\"#test_and_clear_bit\">test_and_clear_bit</a>(<a class=\"id\" href=\"#PG_\">PG_</a>##<a class=\"id\" href=\"#lname\">lname</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>); }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__TESTCLEARFLAG\">__TESTCLEARFLAG</a>(<a class=\"id\" href=\"#uname\">uname</a>, <a class=\"id\" href=\"#lname\">lname</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__TestClearPage\">__TestClearPage</a>##<a class=\"id\" href=\"#uname\">uname</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>{ return <a class=\"id\" href=\"#__test_and_clear_bit\">__test_and_clear_bit</a>(<a class=\"id\" href=\"#PG_\">PG_</a>##<a class=\"id\" href=\"#lname\">lname</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>); }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#uname\">uname</a>, <a class=\"id\" href=\"#lname\">lname</a>) <a class=\"id\" href=\"#TESTPAGEFLAG\">TESTPAGEFLAG</a>(<a class=\"id\" href=\"#uname\">uname</a>, <a class=\"id\" href=\"#lname\">lname</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SETPAGEFLAG\">SETPAGEFLAG</a>(<a class=\"id\" href=\"#uname\">uname</a>, <a class=\"id\" href=\"#lname\">lname</a>) <a class=\"id\" href=\"#CLEARPAGEFLAG\">CLEARPAGEFLAG</a>(<a class=\"id\" href=\"#uname\">uname</a>, <a class=\"id\" href=\"#lname\">lname</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__PAGEFLAG\">__PAGEFLAG</a>(<a class=\"id\" href=\"#uname\">uname</a>, <a class=\"id\" href=\"#lname\">lname</a>) <a class=\"id\" href=\"#TESTPAGEFLAG\">TESTPAGEFLAG</a>(<a class=\"id\" href=\"#uname\">uname</a>, <a class=\"id\" href=\"#lname\">lname</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__SETPAGEFLAG\">__SETPAGEFLAG</a>(<a class=\"id\" href=\"#uname\">uname</a>, <a class=\"id\" href=\"#lname\">lname</a>)  <a class=\"id\" href=\"#__CLEARPAGEFLAG\">__CLEARPAGEFLAG</a>(<a class=\"id\" href=\"#uname\">uname</a>, <a class=\"id\" href=\"#lname\">lname</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGEFLAG_FALSE\">PAGEFLAG_FALSE</a>(<a class=\"id\" href=\"#uname\">uname</a>) <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#Page\">Page</a>##<a class=\"id\" href=\"#uname\">uname</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>) <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ return 0; }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TESTSCFLAG\">TESTSCFLAG</a>(<a class=\"id\" href=\"#uname\">uname</a>, <a class=\"id\" href=\"#lname\">lname</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TESTSETFLAG\">TESTSETFLAG</a>(<a class=\"id\" href=\"#uname\">uname</a>, <a class=\"id\" href=\"#lname\">lname</a>) <a class=\"id\" href=\"#TESTCLEARFLAG\">TESTCLEARFLAG</a>(<a class=\"id\" href=\"#uname\">uname</a>, <a class=\"id\" href=\"#lname\">lname</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SETPAGEFLAG_NOOP\">SETPAGEFLAG_NOOP</a>(<a class=\"id\" href=\"#uname\">uname</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#SetPage\">SetPage</a>##<a class=\"id\" href=\"#uname\">uname</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>) {  }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLEARPAGEFLAG_NOOP\">CLEARPAGEFLAG_NOOP</a>(<a class=\"id\" href=\"#uname\">uname</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ClearPage\">ClearPage</a>##<a class=\"id\" href=\"#uname\">uname</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>) {  }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__CLEARPAGEFLAG_NOOP\">__CLEARPAGEFLAG_NOOP</a>(<a class=\"id\" href=\"#uname\">uname</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__ClearPage\">__ClearPage</a>##<a class=\"id\" href=\"#uname\">uname</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>) {  }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TESTCLEARFLAG_FALSE\">TESTCLEARFLAG_FALSE</a>(<a class=\"id\" href=\"#uname\">uname</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#TestClearPage\">TestClearPage</a>##<a class=\"id\" href=\"#uname\">uname</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>) { return 0; }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__TESTCLEARFLAG_FALSE\">__TESTCLEARFLAG_FALSE</a>(<a class=\"id\" href=\"#uname\">uname</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__TestClearPage\">__TestClearPage</a>##<a class=\"id\" href=\"#uname\">uname</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>) { return 0; }", 
"", 
"struct <a class=\"id\" href=\"#page\">page</a>;<span class=\"ts\"/><span class=\"comment\">/* forward declaration */</span>", 
"", 
"<a class=\"id\" href=\"#TESTPAGEFLAG\">TESTPAGEFLAG</a>(<a class=\"id\" href=\"#Locked\">Locked</a>, <a class=\"id\" href=\"#locked\">locked</a>) <a class=\"id\" href=\"#TESTSETFLAG\">TESTSETFLAG</a>(<a class=\"id\" href=\"#Locked\">Locked</a>, <a class=\"id\" href=\"#locked\">locked</a>)", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#Error\">Error</a>, <a class=\"id\" href=\"#error\">error</a>)", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#Referenced\">Referenced</a>, <a class=\"id\" href=\"#referenced\">referenced</a>) <a class=\"id\" href=\"#TESTCLEARFLAG\">TESTCLEARFLAG</a>(<a class=\"id\" href=\"#Referenced\">Referenced</a>, <a class=\"id\" href=\"#referenced\">referenced</a>)", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#Dirty\">Dirty</a>, <a class=\"id\" href=\"#dirty\">dirty</a>) <a class=\"id\" href=\"#TESTSCFLAG\">TESTSCFLAG</a>(<a class=\"id\" href=\"#Dirty\">Dirty</a>, <a class=\"id\" href=\"#dirty\">dirty</a>) <a class=\"id\" href=\"#__CLEARPAGEFLAG\">__CLEARPAGEFLAG</a>(<a class=\"id\" href=\"#Dirty\">Dirty</a>, <a class=\"id\" href=\"#dirty\">dirty</a>)", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#LRU\">LRU</a>, <a class=\"id\" href=\"#lru\">lru</a>) <a class=\"id\" href=\"#__CLEARPAGEFLAG\">__CLEARPAGEFLAG</a>(<a class=\"id\" href=\"#LRU\">LRU</a>, <a class=\"id\" href=\"#lru\">lru</a>)", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#Active\">Active</a>, <a class=\"id\" href=\"#active\">active</a>) <a class=\"id\" href=\"#__CLEARPAGEFLAG\">__CLEARPAGEFLAG</a>(<a class=\"id\" href=\"#Active\">Active</a>, <a class=\"id\" href=\"#active\">active</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TESTCLEARFLAG\">TESTCLEARFLAG</a>(<a class=\"id\" href=\"#Active\">Active</a>, <a class=\"id\" href=\"#active\">active</a>)", 
"<a class=\"id\" href=\"#__PAGEFLAG\">__PAGEFLAG</a>(<a class=\"id\" href=\"#Slab\">Slab</a>, <a class=\"id\" href=\"#slab\">slab</a>)", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#Checked\">Checked</a>, <a class=\"id\" href=\"#checked\">checked</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Used by some filesystems */</span>", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#Pinned\">Pinned</a>, <a class=\"id\" href=\"#pinned\">pinned</a>) <a class=\"id\" href=\"#TESTSCFLAG\">TESTSCFLAG</a>(<a class=\"id\" href=\"#Pinned\">Pinned</a>, <a class=\"id\" href=\"#pinned\">pinned</a>)<span class=\"ts\"/><span class=\"comment\">/* Xen */</span>", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#SavePinned\">SavePinned</a>, <a class=\"id\" href=\"#savepinned\">savepinned</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Xen */</span>", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#Reserved\">Reserved</a>, <a class=\"id\" href=\"#reserved\">reserved</a>) <a class=\"id\" href=\"#__CLEARPAGEFLAG\">__CLEARPAGEFLAG</a>(<a class=\"id\" href=\"#Reserved\">Reserved</a>, <a class=\"id\" href=\"#reserved\">reserved</a>)", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#SwapBacked\">SwapBacked</a>, <a class=\"id\" href=\"#swapbacked\">swapbacked</a>) <a class=\"id\" href=\"#__CLEARPAGEFLAG\">__CLEARPAGEFLAG</a>(<a class=\"id\" href=\"#SwapBacked\">SwapBacked</a>, <a class=\"id\" href=\"#swapbacked\">swapbacked</a>)", 
"", 
"<a class=\"id\" href=\"#__PAGEFLAG\">__PAGEFLAG</a>(<a class=\"id\" href=\"#SlobFree\">SlobFree</a>, <a class=\"id\" href=\"#slob_free\">slob_free</a>)", 
"", 
"<a class=\"id\" href=\"#__PAGEFLAG\">__PAGEFLAG</a>(<a class=\"id\" href=\"#SlubFrozen\">SlubFrozen</a>, <a class=\"id\" href=\"#slub_frozen\">slub_frozen</a>)", 
"", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#Inktag\">Inktag</a>, <a class=\"id\" href=\"#inktag\">inktag</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Private page markings that may be used by the filesystem that owns the page</span>", 
"<span class=\"comment\"> * for its own purposes.</span>", 
"<span class=\"comment\"> * - PG_private and PG_private_2 cause releasepage() and co to be invoked</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#Private\">Private</a>, <a class=\"id\" href=\"#private\">private</a>) <a class=\"id\" href=\"#__SETPAGEFLAG\">__SETPAGEFLAG</a>(<a class=\"id\" href=\"#Private\">Private</a>, <a class=\"id\" href=\"#private\">private</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__CLEARPAGEFLAG\">__CLEARPAGEFLAG</a>(<a class=\"id\" href=\"#Private\">Private</a>, <a class=\"id\" href=\"#private\">private</a>)", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#Private2\">Private2</a>, <a class=\"id\" href=\"#private_2\">private_2</a>) <a class=\"id\" href=\"#TESTSCFLAG\">TESTSCFLAG</a>(<a class=\"id\" href=\"#Private2\">Private2</a>, <a class=\"id\" href=\"#private_2\">private_2</a>)", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#OwnerPriv1\">OwnerPriv1</a>, <a class=\"id\" href=\"#owner_priv_1\">owner_priv_1</a>) <a class=\"id\" href=\"#TESTCLEARFLAG\">TESTCLEARFLAG</a>(<a class=\"id\" href=\"#OwnerPriv1\">OwnerPriv1</a>, <a class=\"id\" href=\"#owner_priv_1\">owner_priv_1</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Only test-and-set exist for PG_writeback.  The unconditional operators are</span>", 
"<span class=\"comment\"> * risky: they bypass page accounting.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#TESTPAGEFLAG\">TESTPAGEFLAG</a>(<a class=\"id\" href=\"#Writeback\">Writeback</a>, <a class=\"id\" href=\"#writeback\">writeback</a>) <a class=\"id\" href=\"#TESTSCFLAG\">TESTSCFLAG</a>(<a class=\"id\" href=\"#Writeback\">Writeback</a>, <a class=\"id\" href=\"#writeback\">writeback</a>)", 
"<a class=\"id\" href=\"#__PAGEFLAG\">__PAGEFLAG</a>(<a class=\"id\" href=\"#Buddy\">Buddy</a>, <a class=\"id\" href=\"#buddy\">buddy</a>)", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#MappedToDisk\">MappedToDisk</a>, <a class=\"id\" href=\"#mappedtodisk\">mappedtodisk</a>)", 
"", 
"<span class=\"comment\">/* PG_readahead is only used for file reads; PG_reclaim is only for writes */</span>", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#Reclaim\">Reclaim</a>, <a class=\"id\" href=\"#reclaim\">reclaim</a>) <a class=\"id\" href=\"#TESTCLEARFLAG\">TESTCLEARFLAG</a>(<a class=\"id\" href=\"#Reclaim\">Reclaim</a>, <a class=\"id\" href=\"#reclaim\">reclaim</a>)", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#Readahead\">Readahead</a>, <a class=\"id\" href=\"#reclaim\">reclaim</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Reminder to do async read-ahead */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Must use a macro here due to header dependency issues. page_zone() is not</span>", 
"<span class=\"comment\"> * available at this point.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#__p\">__p</a>) <a class=\"id\" href=\"#is_highmem\">is_highmem</a>(<a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#__p\">__p</a>))", 
"#else", 
"<a class=\"id\" href=\"#PAGEFLAG_FALSE\">PAGEFLAG_FALSE</a>(<a class=\"id\" href=\"#HighMem\">HighMem</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SWAP\">CONFIG_SWAP</a>", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#SwapCache\">SwapCache</a>, <a class=\"id\" href=\"#swapcache\">swapcache</a>)", 
"#else", 
"<a class=\"id\" href=\"#PAGEFLAG_FALSE\">PAGEFLAG_FALSE</a>(<a class=\"id\" href=\"#SwapCache\">SwapCache</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SETPAGEFLAG_NOOP\">SETPAGEFLAG_NOOP</a>(<a class=\"id\" href=\"#SwapCache\">SwapCache</a>) <a class=\"id\" href=\"#CLEARPAGEFLAG_NOOP\">CLEARPAGEFLAG_NOOP</a>(<a class=\"id\" href=\"#SwapCache\">SwapCache</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#Unevictable\">Unevictable</a>, <a class=\"id\" href=\"#unevictable\">unevictable</a>) <a class=\"id\" href=\"#__CLEARPAGEFLAG\">__CLEARPAGEFLAG</a>(<a class=\"id\" href=\"#Unevictable\">Unevictable</a>, <a class=\"id\" href=\"#unevictable\">unevictable</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TESTCLEARFLAG\">TESTCLEARFLAG</a>(<a class=\"id\" href=\"#Unevictable\">Unevictable</a>, <a class=\"id\" href=\"#unevictable\">unevictable</a>)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#Mlocked\">Mlocked</a>, <a class=\"id\" href=\"#mlocked\">mlocked</a>) <a class=\"id\" href=\"#__CLEARPAGEFLAG\">__CLEARPAGEFLAG</a>(<a class=\"id\" href=\"#Mlocked\">Mlocked</a>, <a class=\"id\" href=\"#mlocked\">mlocked</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TESTSCFLAG\">TESTSCFLAG</a>(<a class=\"id\" href=\"#Mlocked\">Mlocked</a>, <a class=\"id\" href=\"#mlocked\">mlocked</a>) <a class=\"id\" href=\"#__TESTCLEARFLAG\">__TESTCLEARFLAG</a>(<a class=\"id\" href=\"#Mlocked\">Mlocked</a>, <a class=\"id\" href=\"#mlocked\">mlocked</a>)", 
"#else", 
"<a class=\"id\" href=\"#PAGEFLAG_FALSE\">PAGEFLAG_FALSE</a>(<a class=\"id\" href=\"#Mlocked\">Mlocked</a>) <a class=\"id\" href=\"#SETPAGEFLAG_NOOP\">SETPAGEFLAG_NOOP</a>(<a class=\"id\" href=\"#Mlocked\">Mlocked</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TESTCLEARFLAG_FALSE\">TESTCLEARFLAG_FALSE</a>(<a class=\"id\" href=\"#Mlocked\">Mlocked</a>) <a class=\"id\" href=\"#__TESTCLEARFLAG_FALSE\">__TESTCLEARFLAG_FALSE</a>(<a class=\"id\" href=\"#Mlocked\">Mlocked</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ARCH_USES_PG_UNCACHED\">CONFIG_ARCH_USES_PG_UNCACHED</a>", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#Uncached\">Uncached</a>, <a class=\"id\" href=\"#uncached\">uncached</a>)", 
"#else", 
"<a class=\"id\" href=\"#PAGEFLAG_FALSE\">PAGEFLAG_FALSE</a>(<a class=\"id\" href=\"#Uncached\">Uncached</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_FAILURE\">CONFIG_MEMORY_FAILURE</a>", 
"<a class=\"id\" href=\"#PAGEFLAG\">PAGEFLAG</a>(<a class=\"id\" href=\"#HWPoison\">HWPoison</a>, <a class=\"id\" href=\"#hwpoison\">hwpoison</a>)", 
"<a class=\"id\" href=\"#TESTSCFLAG\">TESTSCFLAG</a>(<a class=\"id\" href=\"#HWPoison\">HWPoison</a>, <a class=\"id\" href=\"#hwpoison\">hwpoison</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__PG_HWPOISON\">__PG_HWPOISON</a> (1UL << <a class=\"id\" href=\"#PG_hwpoison\">PG_hwpoison</a>)", 
"#else", 
"<a class=\"id\" href=\"#PAGEFLAG_FALSE\">PAGEFLAG_FALSE</a>(<a class=\"id\" href=\"#HWPoison\">HWPoison</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__PG_HWPOISON\">__PG_HWPOISON</a> 0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#stable_page_flags\">stable_page_flags</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#PG_uptodate\">PG_uptodate</a>, &amp;(<a class=\"id\" href=\"#page\">page</a>)-><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Must ensure that the data we read out of the page is loaded</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * _after_ we've loaded page-&gt;flags to check for PageUptodate.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can skip the barrier if the page is not uptodate, because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we wouldn't be reading anything from it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * See SetPageUptodate() for the other side of the story.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__SetPageUptodate\">__SetPageUptodate</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#PG_uptodate\">PG_uptodate</a>, &amp;(<a class=\"id\" href=\"#page\">page</a>)-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#SetPageUptodate\">SetPageUptodate</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_S390\">CONFIG_S390</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#PG_uptodate\">PG_uptodate</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_clear_dirty\">page_clear_dirty</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"#else", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Memory barrier must be issued before setting the PG_uptodate bit,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so that all previous stores issued in order to bring the page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * uptodate are actually visible before PageUptodate becomes true.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * s390 doesn't need an explicit smp_wmb here because the test and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set bit already provides full barriers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#PG_uptodate\">PG_uptodate</a>, &amp;(<a class=\"id\" href=\"#page\">page</a>)-><a class=\"id\" href=\"#flags\">flags</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<a class=\"id\" href=\"#CLEARPAGEFLAG\">CLEARPAGEFLAG</a>(<a class=\"id\" href=\"#Uptodate\">Uptodate</a>, <a class=\"id\" href=\"#uptodate\">uptodate</a>)", 
"", 
"extern void <a class=\"id\" href=\"#cancel_dirty_page\">cancel_dirty_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned int <a class=\"id\" href=\"#account_size\">account_size</a>);", 
"", 
"int <a class=\"id\" href=\"#test_clear_page_writeback\">test_clear_page_writeback</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"int <a class=\"id\" href=\"#test_set_page_writeback\">test_set_page_writeback</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_page_writeback\">set_page_writeback</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#test_set_page_writeback\">test_set_page_writeback</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PAGEFLAGS_EXTENDED\">CONFIG_PAGEFLAGS_EXTENDED</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * System with lots of page flags available. This allows separate</span>", 
"<span class=\"comment\"> * flags for PageHead() and PageTail() checks of compound pages so that bit</span>", 
"<span class=\"comment\"> * tests can be used in performance sensitive paths. PageCompound is</span>", 
"<span class=\"comment\"> * generally not used in hot code paths.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#__PAGEFLAG\">__PAGEFLAG</a>(<a class=\"id\" href=\"#Head\">Head</a>, <a class=\"id\" href=\"#head\">head</a>)", 
"<a class=\"id\" href=\"#__PAGEFLAG\">__PAGEFLAG</a>(<a class=\"id\" href=\"#Tail\">Tail</a>, <a class=\"id\" href=\"#tail\">tail</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#PageCompound\">PageCompound</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; ((1L << <a class=\"id\" href=\"#PG_head\">PG_head</a>) | (1L << <a class=\"id\" href=\"#PG_tail\">PG_tail</a>));", 
"", 
"}", 
"#else", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Reduce page flag use as much as possible by overlapping</span>", 
"<span class=\"comment\"> * compound page flags with the flags used for page cache pages. Possible</span>", 
"<span class=\"comment\"> * because PageCompound is always set for compound pages and not for</span>", 
"<span class=\"comment\"> * pages on the LRU and/or pagecache.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#TESTPAGEFLAG\">TESTPAGEFLAG</a>(<a class=\"id\" href=\"#Compound\">Compound</a>, <a class=\"id\" href=\"#compound\">compound</a>)", 
"<a class=\"id\" href=\"#__PAGEFLAG\">__PAGEFLAG</a>(<a class=\"id\" href=\"#Head\">Head</a>, <a class=\"id\" href=\"#compound\">compound</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * PG_reclaim is used in combination with PG_compound to mark the</span>", 
"<span class=\"comment\"> * head and tail of a compound page. This saves one page flag</span>", 
"<span class=\"comment\"> * but makes it impossible to use compound pages for the page cache.</span>", 
"<span class=\"comment\"> * The PG_reclaim bit would have to be used for reclaim or readahead</span>", 
"<span class=\"comment\"> * if compound pages enter the page cache.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PG_compound &amp; PG_reclaim<span class=\"ts\"/>=&gt; Tail page</span>", 
"<span class=\"comment\"> * PG_compound &amp; ~PG_reclaim<span class=\"ts\"/>=&gt; Head page</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PG_head_tail_mask\">PG_head_tail_mask</a> ((1L << <a class=\"id\" href=\"#PG_compound\">PG_compound</a>) | (1L << <a class=\"id\" href=\"#PG_reclaim\">PG_reclaim</a>))", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#PageTail\">PageTail</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PG_head_tail_mask\">PG_head_tail_mask</a>) == <a class=\"id\" href=\"#PG_head_tail_mask\">PG_head_tail_mask</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__SetPageTail\">__SetPageTail</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PG_head_tail_mask\">PG_head_tail_mask</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__ClearPageTail\">__ClearPageTail</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PG_head_tail_mask\">PG_head_tail_mask</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !PAGEFLAGS_EXTENDED */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__PG_MLOCKED\">__PG_MLOCKED</a><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#PG_mlocked\">PG_mlocked</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__PG_MLOCKED\">__PG_MLOCKED</a><span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Flags checked when a page is freed.  Pages being freed should not have</span>", 
"<span class=\"comment\"> * these flags set.  It they are, there is a problem.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGE_FLAGS_CHECK_AT_FREE\">PAGE_FLAGS_CHECK_AT_FREE</a> \\", 
"<span class=\"ts\"/>(1 << <a class=\"id\" href=\"#PG_lru\">PG_lru</a><span class=\"ts\"/> | 1 << <a class=\"id\" href=\"#PG_locked\">PG_locked</a>    | \\", 
"<span class=\"ts\"/> 1 << <a class=\"id\" href=\"#PG_private\">PG_private</a> | 1 << <a class=\"id\" href=\"#PG_private_2\">PG_private_2</a> | \\", 
"<span class=\"ts\"/> 1 << <a class=\"id\" href=\"#PG_buddy\">PG_buddy</a><span class=\"ts\"/> | 1 << <a class=\"id\" href=\"#PG_writeback\">PG_writeback</a> | 1 << <a class=\"id\" href=\"#PG_reserved\">PG_reserved</a> | \\", 
"<span class=\"ts\"/> 1 << <a class=\"id\" href=\"#PG_slab\">PG_slab</a><span class=\"ts\"/> | 1 << <a class=\"id\" href=\"#PG_swapcache\">PG_swapcache</a> | 1 << <a class=\"id\" href=\"#PG_active\">PG_active</a> | \\", 
"<span class=\"ts\"/> 1 << <a class=\"id\" href=\"#PG_unevictable\">PG_unevictable</a> | <a class=\"id\" href=\"#__PG_MLOCKED\">__PG_MLOCKED</a> | <a class=\"id\" href=\"#__PG_HWPOISON\">__PG_HWPOISON</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Flags checked when a page is prepped for return by the page allocator.</span>", 
"<span class=\"comment\"> * Pages being prepped should not have any flags set.  It they are set,</span>", 
"<span class=\"comment\"> * there has been a kernel bug or struct page corruption.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGE_FLAGS_CHECK_AT_PREP\">PAGE_FLAGS_CHECK_AT_PREP</a><span class=\"ts\"/>((1 << <a class=\"id\" href=\"#NR_PAGEFLAGS\">NR_PAGEFLAGS</a>) - 1)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGE_FLAGS_PRIVATE\">PAGE_FLAGS_PRIVATE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(1 << <a class=\"id\" href=\"#PG_private\">PG_private</a> | 1 << <a class=\"id\" href=\"#PG_private_2\">PG_private_2</a>)", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * page_has_private - Determine if page has private stuff</span>", 
"<span class=\"comment\"> * @page: The page to be checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Determine if a page has private stuff, indicating that release routines</span>", 
"<span class=\"comment\"> * should be invoked upon it.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#page_has_private\">page_has_private</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return !!(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PAGE_FLAGS_PRIVATE\">PAGE_FLAGS_PRIVATE</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !__GENERATING_BOUNDS_H */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* PAGE_FLAGS_H */</span>", 
];
xr_frag_insert('l/56/c626edd206222e6693a96985a2e40f15823932.xr', __xr_tmp);
